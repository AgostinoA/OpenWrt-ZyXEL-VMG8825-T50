Index: linux-3.18.21/include/uapi/linux/netfilter_bridge/ebt_ip.h
===================================================================
--- linux-3.18.21.orig/include/uapi/linux/netfilter_bridge/ebt_ip.h	2018-05-29 19:34:49.546839647 +0800
+++ linux-3.18.21/include/uapi/linux/netfilter_bridge/ebt_ip.h	2018-05-29 19:34:49.774799802 +0800
@@ -23,44 +23,131 @@
 #define EBT_IP_PROTO 0x08
 #define EBT_IP_SPORT 0x10
 #define EBT_IP_DPORT 0x20
-#if !defined(TCSUPPORT_ORN_EBTABLES)
-#define EBT_IP_IPP 0x40
-#define EBT_IP_DSCP 0x80
+
+#if 1 /* ZyXEL QoS, John (porting from MSTC) */
+#if defined(CONFIG_BCM_KF_NETFILTER) || !defined(CONFIG_BCM_IN_KERNEL)
+#define EBT_IP_DSCP  0x40
+#endif
+#define EBT_IP_LENGTH 0x80
+#define EBT_IP_TCP_FLAGS 0x100
+#define EBT_IP_DHCP_OPT60 0x200
+#define EBT_IP_DHCP_OPT61 0x400
+#define EBT_IP_DHCP_OPT77 0x800
+#define EBT_IP_DHCP_OPT125 0x1000
+#if defined(CONFIG_BCM_KF_NETFILTER) || !defined(CONFIG_BCM_IN_KERNEL)
+#define EBT_IP_MASK (EBT_IP_SOURCE | EBT_IP_DEST | EBT_IP_TOS | EBT_IP_PROTO |\
+ EBT_IP_SPORT | EBT_IP_DPORT | EBT_IP_DSCP | EBT_IP_LENGTH | EBT_IP_TCP_FLAGS |\
+ EBT_IP_DHCP_OPT60 | EBT_IP_DHCP_OPT61 | EBT_IP_DHCP_OPT77 | EBT_IP_DHCP_OPT125)
+#else
+#define EBT_IP_MASK (EBT_IP_SOURCE | EBT_IP_DEST | EBT_IP_TOS | EBT_IP_PROTO |\
+ EBT_IP_SPORT | EBT_IP_DPORT | EBT_IP_LENGTH | EBT_IP_TCP_FLAGS |\
+ EBT_IP_DHCP_OPT60 | EBT_IP_DHCP_OPT61 | EBT_IP_DHCP_OPT77 | EBT_IP_DHCP_OPT125)
+#endif
+#define DHCP_OPTION_MAX_LEN 556 /* IP header(20) + UDP header(8)+ DHCP header(528) */
+
+#define DHCP_PADDING                            0x00
+#define DHCP_VENDOR                             0x3c    /*option 60 */
+#define DHCP_CLIENT_ID                          0x3d    /*option 61 */
+#define DHCP_USER_CLASS_ID                      0x4d    /*option 77 */
+#define DHCP_VENDOR_IDENTIFYING 				0x7d    /*option 125 */
+#define DHCP_OPTION_OVER                        0x34
+#define DHCP_END                                0xFF
+
+#define OPTION_FIELD            0
+#define FILE_FIELD              1
+#define SNAME_FIELD             2
+
+
+
+/* miscellaneous defines */
+#define OPT_CODE 0
+#define OPT_LEN 1
+#define OPT_DATA 2
+
+#define OPTION_MAC_ENTRY 32
+
+/* each option data shift length */
+#define DHCP_OPT_LEN_FIELD_LEN  1
+#define DHCP_OPT125_ENTERPRISE_NUM_LEN 4
+#define DHCP_OPT125_DATA_SHIFT DHCP_OPT125_ENTERPRISE_NUM_LEN + DHCP_OPT_LEN_FIELD_LEN
+
+#else
+#if defined(CONFIG_BCM_KF_NETFILTER) || !defined(CONFIG_BCM_IN_KERNEL)
+#define EBT_IP_DSCP  0x40
 #define EBT_IP_MASK (EBT_IP_SOURCE | EBT_IP_DEST | EBT_IP_TOS | EBT_IP_PROTO |\
- EBT_IP_SPORT | EBT_IP_DPORT | EBT_IP_IPP | EBT_IP_DSCP)
+ EBT_IP_SPORT | EBT_IP_DPORT | EBT_IP_DSCP )
 #else
 #define EBT_IP_MASK (EBT_IP_SOURCE | EBT_IP_DEST | EBT_IP_TOS | EBT_IP_PROTO |\
  EBT_IP_SPORT | EBT_IP_DPORT )
 #endif
+#endif
 #define EBT_IP_MATCH "ip"
 
 /* the same values are used for the invflags */
+#if 1 /* ZyXEL QoS, John (porting from MSTC) */
+struct cfgopt{
+        uint8_t len;
+        char cfgdata[254];
+};
+
+struct dhcpMessage {
+        uint8_t op;
+        uint8_t htype;
+        uint8_t hlen;
+        uint8_t hops;
+        uint32_t xid;
+        uint16_t secs;
+        uint16_t flags;
+        uint32_t ciaddr;
+        uint32_t yiaddr;
+        uint32_t siaddr;
+        uint32_t giaddr;
+        uint8_t chaddr[16];
+        uint8_t sname[64];
+        uint8_t file[128];
+        uint32_t cookie;
+        uint8_t options[308]; /* 312 - cookie */
+};
+
 struct ebt_ip_info {
-#if defined(TCSUPPORT_ORN_EBTABLES)
 	__be32 saddr;
 	__be32 daddr;
 	__be32 smsk;
 	__be32 dmsk;
-#else
-	__be32 saddr[2];
-	__be32 daddr[2];
-	__be32 smsk[2];
-	__be32 dmsk[2];
-#endif
 	__u8  tos;
-#if !defined(TCSUPPORT_ORN_EBTABLES)
-	__u8  protocol[2];
-#else
+#if defined(CONFIG_BCM_KF_NETFILTER) || !defined(CONFIG_BCM_IN_KERNEL)
+	__u8  dscp; /* brcm */
+#endif
 	__u8  protocol;
+	__u16  bitmask;
+	__u16  invflags;
+	__u8  tcp_flg_mask;
+	__u8  tcp_flg_cmp;
+	__u16 sport[2];
+	__u16 dport[2];
+	__u16 length[2];
+	struct cfgopt cfg60; //option 60
+    struct cfgopt cfg61; //option 61
+    struct cfgopt cfg77; //option 77
+    struct cfgopt cfg125; //option 125
+    char SrcMacArray[OPTION_MAC_ENTRY][ETH_ALEN];
+};
+#else
+/* the same values are used for the invflags */
+struct ebt_ip_info {
+	__be32 saddr;
+	__be32 daddr;
+	__be32 smsk;
+	__be32 dmsk;
+	__u8  tos;
+#if defined(CONFIG_BCM_KF_NETFILTER) || !defined(CONFIG_BCM_IN_KERNEL)
+	__u8  dscp;
 #endif
+	__u8  protocol;
 	__u8  bitmask;
 	__u8  invflags;
 	__u16 sport[2];
 	__u16 dport[2];
-#if !defined(TCSUPPORT_ORN_EBTABLES)
-	__u8 ipp[2];
-	__u8 dscp[2];
-#endif
 };
-
+#endif
 #endif
Index: linux-3.18.21/include/uapi/linux/netfilter_bridge/ebt_ip6.h
===================================================================
--- linux-3.18.21.orig/include/uapi/linux/netfilter_bridge/ebt_ip6.h	2018-05-29 19:34:49.546839647 +0800
+++ linux-3.18.21/include/uapi/linux/netfilter_bridge/ebt_ip6.h	2018-05-29 19:34:49.774799802 +0800
@@ -21,8 +21,14 @@
 #define EBT_IP6_SPORT 0x10
 #define EBT_IP6_DPORT 0x20
 #define EBT_IP6_ICMP6 0x40
-
-#if !defined(TCSUPPORT_CT_PORTSLIMIT) 
+#if 1 /* ZyXEL QoS, John (porting from MSTC) */
+#define EBT_IP6_LENGTH 0x40
+#endif
+#if 1 /* ZyXEL QoS, John (porting from MSTC) */
+#define EBT_IP6_MASK (EBT_IP6_SOURCE | EBT_IP6_DEST | EBT_IP6_TCLASS |\
+		      EBT_IP6_PROTO | EBT_IP6_SPORT | EBT_IP6_DPORT | \
+		      EBT_IP6_LENGTH)
+#else
 #define EBT_IP6_MASK (EBT_IP6_SOURCE | EBT_IP6_DEST | EBT_IP6_TCLASS |\
 		      EBT_IP6_PROTO | EBT_IP6_SPORT | EBT_IP6_DPORT | \
 		      EBT_IP6_ICMP6)
@@ -36,18 +42,13 @@
 	struct in6_addr daddr;
 	struct in6_addr smsk;
 	struct in6_addr dmsk;
-#if defined(TCSUPPORT_ORN_EBTABLES)	
 	__u8  tclass;
-#else
-	__u8  tclass[2];
-#endif
-#if defined(TCSUPPORT_ORN_EBTABLES)	
 	__u8  protocol;
-#else
-	__u8  protocol[2];
-#endif
 	__u8  bitmask;
 	__u8  invflags;
+#if 1 /* ZyXEL QoS, John (porting from MSTC) */
+	uint16_t length[2];
+#endif
 	union {
 		__u16 sport[2];
 		__u8 icmpv6_type[2];
Index: linux-3.18.21/net/bridge/netfilter/ebt_ip.c
===================================================================
--- linux-3.18.21.orig/net/bridge/netfilter/ebt_ip.c	2018-05-29 19:34:49.558837550 +0800
+++ linux-3.18.21/net/bridge/netfilter/ebt_ip.c	2018-05-29 19:38:50.546532596 +0800
@@ -18,21 +18,200 @@
 #include <linux/netfilter/x_tables.h>
 #include <linux/netfilter_bridge/ebtables.h>
 #include <linux/netfilter_bridge/ebt_ip.h>
+#if 1 /* ZyXEL QoS, John (porting from MSTC) */
+#include <linux/tcp.h>
+#include <linux/udp.h>
+#endif
 
 struct tcpudphdr {
 	__be16 src;
 	__be16 dst;
 };
-#if !defined(TCSUPPORT_ORN_EBTABLES)
-static inline __be16 vlan_proto(const struct sk_buff *skb)
+
+#if 1 /* ZyXEL QoS, John (porting from MSTC) */
+
+unsigned char *get_DhcpOption(struct dhcpMessage *packet, int code)
 {
-	return vlan_eth_hdr(skb)->h_vlan_encapsulated_proto;
+	int i, length;
+	unsigned char *optionptr;
+	int over = 0, done = 0, curr = OPTION_FIELD;
+
+	optionptr = packet->options;
+	i = 0;
+	length = 308;
+
+	while (!done) {
+		if (i >= length){
+			return NULL;
+		}
+		if (optionptr[i + OPT_CODE] == code) {
+			if (i + 1 + optionptr[i + OPT_LEN] >= length) {
+				return NULL;
+			}
+			return optionptr + i + 2;
+		}
+		switch (optionptr[i + OPT_CODE]) {
+			case DHCP_PADDING:
+				i++;
+				break;
+			case DHCP_OPTION_OVER:
+				if (i + 1 + optionptr[i + OPT_LEN] >= length) {
+					return NULL;
+				}
+				over = optionptr[i + 3];
+				i += optionptr[OPT_LEN] + 2;
+				break;
+			case DHCP_END:
+				if (curr == OPTION_FIELD && over & FILE_FIELD) {
+					optionptr = packet->file;
+					i = 0;
+					length = 128;
+					curr = FILE_FIELD;
+				} else if (curr == FILE_FIELD && over & SNAME_FIELD) {
+					optionptr = packet->sname;
+					i = 0;
+					length = 64;
+					curr = SNAME_FIELD;
+				} else done = 1;
+				break;
+			default:
+				i += optionptr[OPT_LEN + i] + 2;
+		}
+	}
+	return NULL;
+}
+
+/* If match, return value is 1 */
+static int cmp_option60(char *optval60, const struct ebt_ip_info *info)
+{
+	int len;
+	char optionData[254];
+	const struct cfgopt *cfgptr = NULL;
+	printk("%s %d\n", __FUNCTION__, __LINE__);
+
+	if (optval60 == NULL)
+		return false;
+
+	cfgptr = &(info->cfg60);
+
+	/* Compare option data length */
+	len = (int)(*((unsigned char *)optval60 - 1));
+	if(len != cfgptr->len)
+		return false;
+
+	/* Compare option data content */
+	memset(optionData, 0, 254);
+	strncpy(optionData, optval60, len);
+	printk("%s %d: cfgdata[%s] optionData[%s]\n", __FUNCTION__, __LINE__, cfgptr->cfgdata, optionData);
+	if(strcmp(cfgptr->cfgdata, optionData) == 0)
+		return true;
+
+	return false;
+}
+
+/* If match, return value is 1 */
+static int cmp_option61(char *optval61, const struct ebt_ip_info *info)
+{
+        int len;
+        char optionData[254];
+        const struct cfgopt *cfgptr = NULL;
+
+
+
+        if (optval61 == NULL)
+                return false;
+
+        cfgptr = &(info->cfg61);
+
+        /* Compare option data length */
+        len = (int)(*((unsigned char *)optval61 - 1));
+
+        if(len != cfgptr->len)
+                return false;
+
+        /* Compare option data content */
+        memset(optionData, 0, 254);
+        memcpy(optionData, optval61, len);
+
+        if(!memcmp(cfgptr->cfgdata, optionData, len))
+                return true;
+
+        return false;
 }
-static inline __be16 pppoe_proto(const struct sk_buff *skb)
+
+/* If match, return value is 1 */
+static int cmp_option77(char *optval77, const struct ebt_ip_info *info)
 {
-	return *((__be16 *)(skb_mac_header(skb) + ETH_HLEN +
-			    sizeof(struct pppoe_hdr)));
+	uint8_t len = 0, total_len = 0, current_len = 0;
+        char optionData[254];
+        const struct cfgopt *cfgptr = NULL;
+
+
+        if (optval77 == NULL)
+                return false;
+
+        cfgptr = &(info->cfg77);
+
+        /* Record option 77 total length */
+        total_len = (uint8_t)(*((unsigned char *)optval77 - 1));
+
+        while(total_len != current_len){
+                len = (uint8_t)*((unsigned char *)optval77);    /* For option 77, one data length */
+
+                if(len != cfgptr->len)
+                        return false;
+
+                /* Compare option data content */
+                memset(optionData, 0, 254);
+                memcpy(optionData, optval77 + DHCP_OPT_LEN_FIELD_LEN, len );
+                if(!memcmp(cfgptr->cfgdata, optionData, len))
+                        return true;
+
+                /* shift to next vendor class data in option 125 */
+                current_len += (len + DHCP_OPT_LEN_FIELD_LEN);
+                optval77 += (len + DHCP_OPT_LEN_FIELD_LEN);
+        }
+        return false;
 }
+
+
+/* If match, return value is 1 */
+static int cmp_option125(char *optval125, const struct ebt_ip_info *info)
+{
+	int len = 0,  total_len = 0, current_len = 0;
+        char optionData[254];
+        const struct cfgopt *cfgptr = NULL;
+
+        if (optval125 == NULL)
+                return false;
+
+        cfgptr = &(info->cfg125);
+
+        /* Record option 125 total length */
+        total_len = (int)(*((unsigned char *)optval125 - 1));
+
+        while(total_len != current_len){
+
+                len = (int)(*((unsigned char *)optval125 +DHCP_OPT125_ENTERPRISE_NUM_LEN));     /* For option 125, one data length */
+
+
+                if(len + DHCP_OPT125_DATA_SHIFT != cfgptr->len) /* Add 5 is for enterprise-number(4 bytes) and data length represent(1 byte) */
+                        return false;
+
+                /* Compare option data content */
+                memset(optionData, 0, 254);
+                memcpy(optionData, optval125, len + DHCP_OPT125_DATA_SHIFT);
+
+                if(!memcmp(cfgptr->cfgdata, optionData, len + DHCP_OPT125_DATA_SHIFT))
+                        return true;
+
+                /* shift to next vendor class data in option 125 */
+                current_len += (len + DHCP_OPT125_DATA_SHIFT);
+                optval125 += (len + DHCP_OPT125_DATA_SHIFT);
+        }
+        return false;
+}
+
 #endif
 static bool
 ebt_ip_mt(const struct sk_buff *skb, struct xt_action_param *par)
@@ -42,37 +221,120 @@
 	struct iphdr _iph;
 	const struct tcpudphdr *pptr;
 	struct tcpudphdr _ports;
-#if !defined(TCSUPPORT_ORN_EBTABLES)
-	if(skb->protocol == htons(ETH_P_IP))
-		ih = skb_header_pointer(skb, 0, sizeof(_iph), &_iph);
-	else if((skb->protocol == htons(ETH_P_8021Q)) && (vlan_proto(skb) == htons(ETH_P_IP)))
-		ih = (struct iphdr *)(skb_mac_header(skb) + VLAN_ETH_HLEN);
-	else if((skb->protocol == htons(ETH_P_PPP_SES)) && (pppoe_proto(skb) == htons(0x0021)))
-		ih = (struct iphdr *)(skb_mac_header(skb) + ETH_HLEN +PPPOE_SES_HLEN);
-	else
-	ih = skb_header_pointer(skb, 0, sizeof(_iph), &_iph);
-#else
-	ih = skb_header_pointer(skb, 0, sizeof(_iph), &_iph);
+#if 1 /* ZyXEL QoS, John (porting from MSTC) */
+	struct tcphdr _tcph, *th;
 #endif
+
+	ih = skb_header_pointer(skb, 0, sizeof(_iph), &_iph);
 	if (ih == NULL)
 		return false;
-#if !defined(TCSUPPORT_ORN_EBTABLES)
-	if (info->bitmask & EBT_IP_IPP){
-		if (FWINV((ih->tos & 0xe0) < info->ipp[0] || (ih->tos & 0xe0) > info->ipp[1], EBT_IP_IPP))
-			return false;
-	}
-	if (info->bitmask & EBT_IP_DSCP){
-		if (FWINV((ih->tos & 0xfc) < info->dscp[0] || (ih->tos & 0xfc) > info->dscp[1], EBT_IP_DSCP))
-			return false;
+#if 1 /* ZyXEL QoS, John (porting from MSTC) */
+	if((info->bitmask & EBT_IP_DHCP_OPT60)||(info->bitmask & EBT_IP_DHCP_OPT61)||
+       (info->bitmask & EBT_IP_DHCP_OPT77)||(info->bitmask & EBT_IP_DHCP_OPT125)){
+		 unsigned char payload[DHCP_OPTION_MAX_LEN];
+        struct dhcpMessage *dhcpPtr;
+        struct iphdr _iph, *ih;
+        struct tcpudphdr _ports, *pptr;
+        int     skb_data_len=0, i, LastEntry = -1;
+        bool OptMatch = 0;
+        char TmpMac[ETH_ALEN];
+
+        memset(TmpMac , 0, sizeof(TmpMac));
+
+        ih = skb_header_pointer(skb, 0, sizeof(_iph), &_iph);
+        if (ih == NULL)
+                return false;
+
+        pptr = skb_header_pointer(skb, ih->ihl*4,  sizeof(_ports), &_ports);
+
+        /* not DHCP packet, then try to compared with recoded mac */
+        if(ntohs(pptr->src)!=67 && ntohs(pptr->src)!=68 && ntohs(pptr->dst)!=67 && ntohs(pptr->dst)!=68){
+			for(i=0;i<OPTION_MAC_ENTRY;i++){
+		        if(ether_addr_equal(eth_hdr(skb)->h_source, info->SrcMacArray[i])){
+					/* if match, continue to check other conditions */
+		        	goto CONTINUE;
+		        }
+		        if(!memcmp(TmpMac,info->SrcMacArray[i],ETH_ALEN)){
+		        	break;
+		        }
+			}
+            return false;
+        }else{
+            /* If packet is dhcp packet */
+            memset(payload, 0, sizeof(payload));
+            skb_data_len = skb->len;
+
+            if (skb_copy_bits(skb, 0, payload, skb_data_len))
+                            printk("Copy packet is failed by ebtables of filtering DHCP Option\n\r");
+
+            dhcpPtr = (struct dhcpMessage *)(payload + sizeof(struct iphdr) + sizeof(struct udphdr));
+
+            if(info->bitmask & EBT_IP_DHCP_OPT60){
+                char *opt60 = get_DhcpOption(dhcpPtr, DHCP_VENDOR);
+                if(cmp_option60(opt60, info)^ !!(info->invflags & EBT_IP_DHCP_OPT60))
+                	OptMatch = 1;
+            }
+
+            if(info->bitmask & EBT_IP_DHCP_OPT61){
+                char *opt61 = get_DhcpOption(dhcpPtr, DHCP_CLIENT_ID);
+                if(cmp_option61(opt61, info)^ !!(info->invflags & EBT_IP_DHCP_OPT61))
+                	OptMatch = 1;
+            }
+
+            if(info->bitmask & EBT_IP_DHCP_OPT77){
+                char *opt77 = get_DhcpOption(dhcpPtr, DHCP_USER_CLASS_ID);
+                if(cmp_option77(opt77, info)^ !!(info->invflags & EBT_IP_DHCP_OPT77))
+                	OptMatch = 1;
+            }
+
+            if(info->bitmask & EBT_IP_DHCP_OPT125){
+                char *opt125 = get_DhcpOption(dhcpPtr, DHCP_VENDOR_IDENTIFYING);
+                if(cmp_option125(opt125, info)^ !!(info->invflags & EBT_IP_DHCP_OPT125))
+                	OptMatch = 1;
+            }
+
+//                              printk("\nOptMatch is %d\n",OptMatch);
+
+            if(OptMatch){
+				/* match dhcp option, then record its MAC addr for future filter */
+				for(i=0;i<OPTION_MAC_ENTRY;i++){
+					if(!memcmp(TmpMac,info->SrcMacArray[i],ETH_ALEN)){
+				        memcpy((void *)(info->SrcMacArray[i]), eth_hdr(skb)->h_source, ETH_ALEN);
+				        break;
+					}else if(!memcmp(eth_hdr(skb)->h_source, info->SrcMacArray[i], ETH_ALEN)){
+					    break;
+					}
+				}
+            }else{
+            	/* not match, need to check current list whether this MAC hace once been matched, if so, clear this entry from this DHCP
+            				  option criteria (client might change another vendor information, ex different vendor ID string) */
+                for(i=0;i<OPTION_MAC_ENTRY;i++){
+                    if(!memcmp(TmpMac,info->SrcMacArray[i],ETH_ALEN)){
+                        if(LastEntry!=-1){
+                            memcpy((void *)(info->SrcMacArray[LastEntry]),  info->SrcMacArray[i-1], ETH_ALEN);
+                            memset((void *)(info->SrcMacArray[i-1]), 0, ETH_ALEN);
+                        }
+                        break;
+                    }else if(!memcmp(eth_hdr(skb)->h_source, info->SrcMacArray[i], ETH_ALEN)){
+                        LastEntry = i;//Record clear entry
+                    }
+                }
+
+                return false;
+            }
+		}
+
 	}
-	if (info->bitmask & EBT_IP_TOS &&
-		FWINV((info->tos & 0x1e) != (ih->tos & 0x1e), EBT_IP_TOS))
-#else
+CONTINUE:
+#endif
 	if (info->bitmask & EBT_IP_TOS &&
 	   FWINV(info->tos != ih->tos, EBT_IP_TOS))
-#endif
 		return false;
-#if defined(TCSUPPORT_ORN_EBTABLES)
+#if defined(CONFIG_BCM_KF_NETFILTER) || !defined(CONFIG_BCM_IN_KERNEL)
+	if (info->bitmask & EBT_IP_DSCP &&
+	   FWINV(info->dscp != (ih->tos & 0xFC), EBT_IP_DSCP))
+		return false;
+#endif
 	if (info->bitmask & EBT_IP_SOURCE &&
 	   FWINV((ih->saddr & info->smsk) !=
 	   info->saddr, EBT_IP_SOURCE))
@@ -81,45 +343,31 @@
 	   FWINV((ih->daddr & info->dmsk) !=
 	   info->daddr, EBT_IP_DEST))
 		return false;
-#else
-	/*xyzhu_20100413*/
-	if ( info->bitmask & EBT_IP_SOURCE &&
-		FWINV( ((ih->saddr & info->smsk[0]) < info->saddr[0]) ||
-			   ((ih->saddr & info->smsk[0]) > info->saddr[1]), EBT_IP_SOURCE ) ) {
+#if 1 /* ZyXEL QoS, John (porting from MSTC) */
+	if(info->bitmask & EBT_IP_LENGTH) { /* IP Length */
+		u16 len = ntohs(ih->tot_len);
+			if (FWINV(len < info->length[0] ||
+					  len > info->length[1],
+					  EBT_IP_LENGTH))
 		return false;
 	}
-	
-	if ( info->bitmask & EBT_IP_DEST &&
-		FWINV( ((ih->daddr & info->dmsk[0]) < info->daddr[0]) ||
-			   ((ih->daddr & info->dmsk[0]) > info->daddr[1]), EBT_IP_DEST ) ) {
-		return false;	   
-	}
 #endif
 	if (info->bitmask & EBT_IP_PROTO) {
-#if !defined(TCSUPPORT_ORN_EBTABLES)
-		if (FWINV((info->protocol[0] != ih->protocol) && (info->protocol[1] != ih->protocol), EBT_IP_PROTO))
-#else
 		if (FWINV(info->protocol != ih->protocol, EBT_IP_PROTO))
-#endif
 			return false;
+#if 0 /* ZyXEL QoS, John (porting from MSTC) */
 		if (!(info->bitmask & EBT_IP_DPORT) &&
 		    !(info->bitmask & EBT_IP_SPORT))
+#else
+		if (!(info->bitmask & EBT_IP_DPORT) &&
+		    !(info->bitmask & EBT_IP_SPORT) &&
+		    !(info->bitmask & EBT_IP_TCP_FLAGS))
+#endif
 			return true;
 		if (ntohs(ih->frag_off) & IP_OFFSET)
 			return false;
-#if !defined(TCSUPPORT_ORN_EBTABLES)
-		if(skb->protocol == htons(ETH_P_IP))
-			pptr = (struct tcpudphdr *)skb_header_pointer(skb, ih->ihl*4, sizeof(_ports), &_ports);
-		else if((skb->protocol == htons(ETH_P_8021Q)) && (vlan_proto(skb) == htons(ETH_P_IP)))
-			pptr = (struct tcpudphdr *)(skb_mac_header(skb) + VLAN_ETH_HLEN + ih->ihl*4);
-		else if((skb->protocol == htons(ETH_P_PPP_SES)) && (pppoe_proto(skb) == htons(0x0021)))
-			pptr = (struct tcpudphdr *)(skb_mac_header(skb) + ETH_HLEN + PPPOE_SES_HLEN + ih->ihl*4);
-		else
-			pptr = (struct tcpudphdr *)skb_header_pointer(skb, ih->ihl*4, sizeof(_ports), &_ports);
-#else
 		pptr = skb_header_pointer(skb, ih->ihl*4,
 					  sizeof(_ports), &_ports);
-#endif
 		if (pptr == NULL)
 			return false;
 		if (info->bitmask & EBT_IP_DPORT) {
@@ -136,6 +384,19 @@
 				  EBT_IP_SPORT))
 			return false;
 		}
+#if 1 /* ZyXEL QoS, John (porting from MSTC) */
+        if (info->bitmask & EBT_IP_TCP_FLAGS) {
+			th = skb_header_pointer(skb, ih->ihl*4, sizeof(_tcph), &_tcph);
+			if (th == NULL) {
+				/* We've been asked to examine this packet, and we
+				   can't.  Hence, no choice but to drop. */
+				printk("Dropping evil TCP offset=0 tinygram.\n");
+				return 0;
+			}
+			if (FWINV((((unsigned char *)th)[13] & info->tcp_flg_mask) != info->tcp_flg_cmp, EBT_IP_TCP_FLAGS))
+				return false;
+		}
+#endif
 	}
 	return true;
 }
@@ -153,25 +414,21 @@
 	if (info->bitmask & (EBT_IP_DPORT | EBT_IP_SPORT)) {
 		if (info->invflags & EBT_IP_PROTO)
 			return -EINVAL;
-#if !defined(TCSUPPORT_ORN_EBTABLES)
-		if (info->protocol[0] != IPPROTO_TCP && info->protocol[1] != IPPROTO_TCP &&
-		    info->protocol[0] != IPPROTO_UDP && info->protocol[1] != IPPROTO_UDP &&
-		    info->protocol[0] != IPPROTO_UDPLITE && info->protocol[1] != IPPROTO_UDPLITE &&
-		    info->protocol[0] != IPPROTO_SCTP && info->protocol[1] != IPPROTO_SCTP &&
-		    info->protocol[0] != IPPROTO_DCCP && info->protocol[1] != IPPROTO_DCCP)
-#else
 		if (info->protocol != IPPROTO_TCP &&
 		    info->protocol != IPPROTO_UDP &&
 		    info->protocol != IPPROTO_UDPLITE &&
 		    info->protocol != IPPROTO_SCTP &&
 		    info->protocol != IPPROTO_DCCP)
-#endif
 			 return -EINVAL;
 	}
 	if (info->bitmask & EBT_IP_DPORT && info->dport[0] > info->dport[1])
 		return -EINVAL;
 	if (info->bitmask & EBT_IP_SPORT && info->sport[0] > info->sport[1])
 		return -EINVAL;
+#if 1 /* ZyXEL QoS, John (porting from MSTC) */
+        if (info->bitmask & EBT_IP_LENGTH && info->length[0] > info->length[1])
+		return false;
+#endif
 	return 0;
 }
 
Index: linux-3.18.21/net/bridge/netfilter/ebt_ip6.c
===================================================================
--- linux-3.18.21.orig/net/bridge/netfilter/ebt_ip6.c	2018-05-29 19:34:49.558837550 +0800
+++ linux-3.18.21/net/bridge/netfilter/ebt_ip6.c	2018-05-29 19:34:49.774799802 +0800
@@ -31,15 +31,6 @@
 		u8 code;
 	} icmphdr;
 };
-static inline __be16 vlan_proto(const struct sk_buff *skb)
-{
-	return vlan_eth_hdr(skb)->h_vlan_encapsulated_proto;
-}
-static inline __be16 pppoe_proto(const struct sk_buff *skb)
-{
-	return *((__be16 *)(skb_mac_header(skb) + ETH_HLEN +
-			    sizeof(struct pppoe_hdr)));
-}
 
 static bool
 ebt_ip6_mt(const struct sk_buff *skb, struct xt_action_param *par)
@@ -49,51 +40,14 @@
 	struct ipv6hdr _ip6h;
 	const union pkthdr *pptr;
 	union pkthdr _pkthdr;
-	struct in6_addr tmp_addr;
-	int i;
 
-#if !defined(TCSUPPORT_ORN_EBTABLES)
-	if(skb->protocol == htons(ETH_P_IPV6))
-		ih6 = (struct ipv6hdr *)skb_header_pointer(skb, 0, sizeof(_ip6h), &_ip6h);
-	else if((skb->protocol == htons(ETH_P_8021Q)) && (vlan_proto(skb) == htons(ETH_P_IPV6)))
-		ih6 = (struct ipv6hdr *)(skb_mac_header(skb) + VLAN_ETH_HLEN);
-	else if((skb->protocol == htons(ETH_P_PPP_SES)) && (pppoe_proto(skb) == htons(0x0021)))
-		ih6 = (struct ipv6hdr *)(skb_mac_header(skb) + ETH_HLEN +PPPOE_SES_HLEN);
-	else
-		ih6 = (struct ipv6hdr *)skb_header_pointer(skb, 0, sizeof(_ip6h), &_ip6h);
-#else
 	ih6 = skb_header_pointer(skb, 0, sizeof(_ip6h), &_ip6h);
-#endif
+
 	if (ih6 == NULL)
 		return false;
-#if !defined(TCSUPPORT_ORN_EBTABLES)
-	if (info->bitmask & EBT_IP6_TCLASS) {
-		__u8 tc = ipv6_get_dsfield((struct ipv6hdr *)ih6);
-	   if (FWINV(tc < info->tclass[0] || 
-	   		 tc > info->tclass[1], EBT_IP6_TCLASS))
-		return false;
-	}
-#else
 	if (info->bitmask & EBT_IP6_TCLASS &&
-	   FWINV(info->tclass != ipv6_get_dsfield(ih6), EBT_IP6_TCLASS))
+		FWINV(info->tclass != ipv6_get_dsfield(ih6), EBT_IP6_TCLASS))
 		return false;
-#endif
-#if !defined(TCSUPPORT_ORN_EBTABLES)
-	for (i = 0; i < 4; i++)
-			tmp_addr.in6_u.u6_addr32[i] = ih6->saddr.in6_u.u6_addr32[i] &
-				info->smsk.in6_u.u6_addr32[i];
-		if (info->bitmask & EBT_IP6_SOURCE &&
-			FWINV((ipv6_addr_cmp(&tmp_addr, &info->saddr) != 0),
-				EBT_IP6_SOURCE))
-			return false;
-	
-		for (i = 0; i < 4; i++)
-			tmp_addr.in6_u.u6_addr32[i] = ih6->daddr.in6_u.u6_addr32[i] &
-				info->dmsk.in6_u.u6_addr32[i];
-		if (info->bitmask & EBT_IP6_DEST &&
-		   FWINV((ipv6_addr_cmp(&tmp_addr, &info->daddr) != 0), EBT_IP6_DEST))
-			return false;
-#else
 	if ((info->bitmask & EBT_IP6_SOURCE &&
 	    FWINV(ipv6_masked_addr_cmp(&ih6->saddr, &info->smsk,
 				       &info->saddr), EBT_IP6_SOURCE)) ||
@@ -101,6 +55,14 @@
 	    FWINV(ipv6_masked_addr_cmp(&ih6->daddr, &info->dmsk,
 				       &info->daddr), EBT_IP6_DEST)))
 		return false;
+#if 1 /* ZyXEL QoS, John (porting from MSTC) */
+	if(info->bitmask & EBT_IP6_LENGTH) {
+		u16 len = ntohs(ih6->payload_len);
+		if (FWINV(len < info->length[0] ||
+					len > info->length[1],
+					EBT_IP6_LENGTH))
+			return false;
+	}
 #endif
 	if (info->bitmask & EBT_IP6_PROTO) {
 		uint8_t nexthdr = ih6->nexthdr;
@@ -110,31 +72,13 @@
 		offset_ph = ipv6_skip_exthdr(skb, sizeof(_ip6h), &nexthdr, &frag_off);
 		if (offset_ph == -1)
 			return false;
-#if !defined(TCSUPPORT_ORN_EBTABLES)
-		if ( FWINV((info->protocol[0] != nexthdr) && (info->protocol[1] != nexthdr), EBT_IP6_PROTO) )
-			return false;
-#else
 		if (FWINV(info->protocol != nexthdr, EBT_IP6_PROTO))
 			return false;
-#endif
 		if (!(info->bitmask & ( EBT_IP6_DPORT |
-					EBT_IP6_SPORT | EBT_IP6_ICMP6))
-		    ){		    
+					EBT_IP6_SPORT | EBT_IP6_ICMP6)))
 			return true;
-		}
-#if !defined(TCSUPPORT_ORN_EBTABLES)
-		if(skb->protocol == htons(ETH_P_IPV6))
-			pptr = skb_header_pointer(skb, offset_ph, sizeof(_pkthdr), &_pkthdr);
-		else if((skb->protocol == htons(ETH_P_8021Q)) && (vlan_proto(skb) == htons(ETH_P_IPV6)))
-			pptr = (union pkthdr *)(skb_mac_header(skb) + VLAN_ETH_HLEN + offset_ph);
-		else if((skb->protocol == htons(ETH_P_PPP_SES)) && (pppoe_proto(skb) == htons(0x0021)))
-			pptr = (union pkthdr *)(skb_mac_header(skb) + ETH_HLEN + PPPOE_SES_HLEN + offset_ph);
-		else
-			pptr = skb_header_pointer(skb, offset_ph, sizeof(_pkthdr), &_pkthdr);
-#else
 		pptr = skb_header_pointer(skb, offset_ph, sizeof(_pkthdr),
 					  &_pkthdr);
-#endif
 		if (pptr == NULL)
 			return false;
 		if (info->bitmask & EBT_IP6_DPORT) {
@@ -172,25 +116,21 @@
 	if (info->bitmask & (EBT_IP6_DPORT | EBT_IP6_SPORT)) {
 		if (info->invflags & EBT_IP6_PROTO)
 			return -EINVAL;
-#if !defined(TCSUPPORT_ORN_EBTABLES)
-		if (info->protocol[0] != IPPROTO_TCP && info->protocol[1] != IPPROTO_TCP &&
-					info->protocol[0] != IPPROTO_UDP && info->protocol[1] != IPPROTO_UDP &&
-					info->protocol[0] != IPPROTO_UDPLITE && info->protocol[1] != IPPROTO_UDPLITE &&
-					info->protocol[0] != IPPROTO_SCTP && info->protocol[1] != IPPROTO_SCTP &&
-					info->protocol[0] != IPPROTO_DCCP && info->protocol[1] != IPPROTO_DCCP ) 
-#else
 		if (info->protocol != IPPROTO_TCP &&
 		    info->protocol != IPPROTO_UDP &&
 		    info->protocol != IPPROTO_UDPLITE &&
 		    info->protocol != IPPROTO_SCTP &&
 		    info->protocol != IPPROTO_DCCP)
-#endif
 			return -EINVAL;
 	}
 	if (info->bitmask & EBT_IP6_DPORT && info->dport[0] > info->dport[1])
 		return -EINVAL;
 	if (info->bitmask & EBT_IP6_SPORT && info->sport[0] > info->sport[1])
 		return -EINVAL;
+#if 1 /* ZyXEL QoS, John (porting from MSTC) */
+        if (info->bitmask & EBT_IP6_LENGTH && info->length[0] > info->length[1])
+		return false;
+#endif
 	if (info->bitmask & EBT_IP6_ICMP6) {
 		if ((info->invflags & EBT_IP6_PROTO) ||
 		     info->protocol != IPPROTO_ICMPV6)
