Index: linux-3.18.21/include/linux/foe_hook.h
===================================================================
--- linux-3.18.21.orig/include/linux/foe_hook.h	2019-11-19 14:34:43.706174253 +0800
+++ linux-3.18.21/include/linux/foe_hook.h	2019-11-19 14:34:43.734174253 +0800
@@ -205,7 +205,6 @@
 extern int (*ra_sw_nat_ds_offload)(struct sk_buff *skb, int *dp);
 extern int (*ra_sw_nat_hook_update_dp)(int index, int dp);
 extern int (*ra_sw_nat_hook_update_vlan)(int index,int outer_vlan,int inner_vlan);
-extern int (*ra_sw_nat_local_in_tx) (struct sk_buff * skb,unsigned short port);
 
 extern int (*ra_sw_nat_hook_save_gre_txinfo)(struct sk_buff *skb);
 extern int (*ra_sw_nat_hook_restore_gre_txinfo)(struct sk_buff *skb);
@@ -255,4 +254,4 @@
 extern int (*ra_sw_nat_hook_cpu_meter)(struct sk_buff* skb,FETxMsg_T* txMsg,struct port_info* pinfo,unsigned char dir,unsigned short mtrIndex);
 #endif
 
-extern int (*ra_sw_nat_hook_sendto_ppe)(struct sk_buff *skb);
\ No newline at end of file
+extern int (*ra_sw_nat_hook_sendto_ppe)(struct sk_buff *skb);
Index: linux-3.18.21/include/ecnt_hook/ecnt_hook_ppe.h
===================================================================
--- linux-3.18.21.orig/include/ecnt_hook/ecnt_hook_ppe.h	2019-11-19 14:34:43.706174253 +0800
+++ linux-3.18.21/include/ecnt_hook/ecnt_hook_ppe.h	2019-11-19 14:38:43.384518703 +0800
@@ -101,7 +101,6 @@
      PPE_API_ID_SET_KA_CFG,
      PPE_API_ID_GET_AGING_CFG,
      PPE_API_ID_SET_AGING_CFG,
-	 PPE_API_ID_LOCAL_IN_RCV,
 	PPE_API_ID_MAX_NUM
 } PPE_HookFunctionID_t ;
 
@@ -204,23 +203,6 @@
     
 	ret = __ECNT_HOOK(ECNT_PPE, ECNT_DRIVER_PPE_API, (struct ecnt_data *)&in_data);
     
-	if(ret != ECNT_HOOK_ERROR)
-		return in_data.retValue;
-	else
-		return ECNT_HOOK_ERROR;
-}
-
-static inline int PPE_API_LOCAL_IN_RCV(void *skb) 
-{
-	struct ecnt_ppe_data in_data; 
-	int ret = 0;
-	
-	in_data.function_id = PPE_API_ID_LOCAL_IN_RCV ;
-
-	in_data.skb = skb;
-    
-	ret = __ECNT_HOOK(ECNT_PPE, ECNT_DRIVER_PPE_API, (struct ecnt_data *)&in_data);
-    
 	if(ret != ECNT_HOOK_ERROR)
 		return in_data.retValue;
 	else
Index: linux-3.18.21/net/core/ecnt_net_utility.c
===================================================================
--- linux-3.18.21.orig/net/core/ecnt_net_utility.c	2019-11-19 14:34:43.706174253 +0800
+++ linux-3.18.21/net/core/ecnt_net_utility.c	2019-11-19 14:39:24.166172807 +0800
@@ -52,7 +52,6 @@
 #include <net/addrconf.h>
 #include "ecnt_net_core.h"
 #include "../ipv6/ecnt_net_ipv6.h"
-#include <net/tcp.h>
 
 
 /************************************************************************
@@ -465,11 +464,6 @@
 {
 	struct iphdr *iph = NULL;
 
-	skb_reset_mac_header(skb);
-	skb_pull_inline(skb, ETH_HLEN);
-	
-	skb->pkt_type = PACKET_HOST;
-	skb->protocol = htons(ETH_P_IP);
 	skb->ip_summed = CHECKSUM_UNNECESSARY ;
 
 	skb_reset_network_header(skb);
Index: linux-3.18.21/net/ipv4/tcp_ipv4.c
===================================================================
--- linux-3.18.21.orig/net/ipv4/tcp_ipv4.c	2019-11-19 14:34:43.706174253 +0800
+++ linux-3.18.21/net/ipv4/tcp_ipv4.c	2019-11-19 14:39:58.750870216 +0800
@@ -85,7 +85,6 @@
 #include <linux/crypto.h>
 #include <linux/scatterlist.h>
 #include "ecnt_net_ipv4.h"
-#include <linux/foe_hook.h>
 
 int sysctl_tcp_tw_reuse __read_mostly;
 int sysctl_tcp_low_latency __read_mostly;
@@ -1646,8 +1645,6 @@
 	if (!sk)
 		goto no_tcp_socket;
 	
-	if(ra_sw_nat_local_in_tx)
-		ra_sw_nat_local_in_tx(skb,th->dest);
 
 process:
 	if (sk->sk_state == TCP_TIME_WAIT)
