Index: json-c-0.12/json_object.h
===================================================================
--- json-c-0.12.orig/json_object.h	2016-01-05 23:04:26.851198858 +0800
+++ json-c-0.12/json_object.h	2016-01-05 23:04:26.859198903 +0800
@@ -81,6 +81,9 @@
 typedef struct json_object json_object;
 typedef struct json_object_iter json_object_iter;
 typedef struct json_tokener json_tokener;
+#ifndef boolean
+typedef int boolean;
+#endif
 
 /**
  * Type of custom user delete functions.  See json_object_set_serializer.
@@ -299,9 +302,13 @@
  * @returns the json_object associated with the given field name
  * @deprecated Please use json_object_object_get_ex
  */
+#if 0 // open function for zcfg use
 THIS_FUNCTION_IS_DEPRECATED(extern struct json_object* json_object_object_get(struct json_object* obj,
 						  const char *key));
-
+#else
+extern struct json_object* json_object_object_get(struct json_object* obj,
+						  const char *key);
+#endif
 /** Get the json_object associated with a given object field.  
  *
  * This returns true if the key is found, false in all other cases (including 
Index: json-c-0.12/Makefile.am.inc
===================================================================
--- json-c-0.12.orig/Makefile.am.inc	2014-04-11 08:41:08.000000000 +0800
+++ json-c-0.12/Makefile.am.inc	2016-01-05 23:04:26.863198919 +0800
@@ -1,2 +1,2 @@
 AM_CFLAGS = -Wall -Werror -Wno-error=deprecated-declarations -Wextra -Wwrite-strings -Wno-unused-parameter -std=gnu99 -D_GNU_SOURCE -D_REENTRANT
-
+AM_LDFLAGS = -lm
Index: json-c-0.12/bits.h
===================================================================
--- json-c-0.12.orig/bits.h	2014-04-11 08:41:08.000000000 +0800
+++ json-c-0.12/bits.h	2016-01-05 23:04:26.863198919 +0800
@@ -23,6 +23,10 @@
 #define hexdigit(x) (((x) <= '9') ? (x) - '0' : ((x) & 7) + 9)
 #define error_ptr(error) ((void*)error)
 #define error_description(error)  (json_tokener_errors[error])
+#if 0 //for zcfg
+#define is_error(ptr) ((unsigned long)ptr > (unsigned long)-4000L)
+#else
 #define is_error(ptr) (ptr == NULL)
+#endif
 
 #endif
Index: json-c-0.12/json_tokener.c
===================================================================
--- json-c-0.12.orig/json_tokener.c	2014-04-11 08:41:08.000000000 +0800
+++ json-c-0.12/json_tokener.c	2016-01-05 23:04:26.863198919 +0800
@@ -66,7 +66,7 @@
 static const char json_false_str[] = "false";
 static const int json_false_str_len = sizeof(json_false_str) - 1;
 
-static const char* json_tokener_errors[] = {
+const char* json_tokener_errors[] = {
   "success",
   "continue",
   "nesting too deep",
@@ -160,6 +160,10 @@
     enum json_tokener_error jerr_ignored;
     struct json_object* obj;
     obj = json_tokener_parse_verbose(str, &jerr_ignored);
+#if 0 //for zcfg	
+	if(jerr_ignored != json_tokener_success)
+		obj = (struct json_object*)error_ptr(-jerr_ignored);
+#endif
     return obj;
 }
 
Index: json-c-0.12/json_tokener.h
===================================================================
--- json-c-0.12.orig/json_tokener.h	2014-04-11 08:41:08.000000000 +0800
+++ json-c-0.12/json_tokener.h	2016-01-05 23:04:26.863198919 +0800
@@ -19,6 +19,8 @@
 extern "C" {
 #endif
 
+extern const char* json_tokener_errors[];
+
 enum json_tokener_error {
   json_tokener_success,
   json_tokener_continue,
Index: json-c-0.12/json_util.c
===================================================================
--- json-c-0.12.orig/json_util.c	2016-01-05 23:04:26.827198739 +0800
+++ json-c-0.12/json_util.c	2016-01-05 23:04:26.863198919 +0800
@@ -75,12 +75,20 @@
   if((fd = open(filename, O_RDONLY)) < 0) {
     MC_ERROR("json_object_from_file: error opening file %s: %s\n",
 	     filename, strerror(errno));
+#if 0 //for zcfg
+	return (struct json_object*)error_ptr(-1);
+#else
     return NULL;
+#endif
   }
   if(!(pb = printbuf_new())) {
     close(fd);
     MC_ERROR("json_object_from_file: printbuf_new failed\n");
+#if 0 //for zcfg
+	return (struct json_object*)error_ptr(-1);
+#else
     return NULL;
+#endif
   }
   while((ret = read(fd, buf, JSON_FILE_BUF_SIZE)) > 0) {
     printbuf_memappend(pb, buf, ret);
@@ -90,7 +98,11 @@
     MC_ERROR("json_object_from_file: error reading file %s: %s\n",
 	     filename, strerror(errno));
     printbuf_free(pb);
+#if 0 //for zcfg
+	return (struct json_object*)error_ptr(-1);
+#else
     return NULL;
+#endif
   }
   obj = json_tokener_parse(pb->buf);
   printbuf_free(pb);
Index: json-c-0.12/Makefile.am
===================================================================
--- json-c-0.12.orig/Makefile.am	2014-04-11 09:47:33.000000000 +0800
+++ json-c-0.12/Makefile.am	2016-01-05 23:04:50.986686740 +0800
@@ -31,7 +31,7 @@
 #libjsonx_include_HEADERS = \
 #	json_config.h
 
-libjson_c_la_LDFLAGS = -version-info 2:1:0 -no-undefined @JSON_BSYMBOLIC_LDFLAGS@
+libjson_c_la_LDFLAGS = -version-info 2:1:0 -no-undefined @JSON_BSYMBOLIC_LDFLAGS@ -lm 
 
 libjson_c_la_SOURCES = \
 	arraylist.c \
