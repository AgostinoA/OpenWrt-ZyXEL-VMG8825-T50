--- a/miscutils/crond.c
+++ b/miscutils/crond.c
@@ -23,6 +23,7 @@
 //usage:	)
 //usage:     "\n	-L	Log to file"
 //usage:     "\n	-c	Working dir"
+//usage:     "\n	-p	PID file (default is /var/run/crond.pid)"
 
 #include "libbb.h"
 #include <syslog.h>
@@ -50,6 +51,7 @@
 #ifndef MAXLINES
 # define MAXLINES       256  /* max lines in non-root crontabs */
 #endif
+#define PIDFILENAME		"/var/run/crond.pid"
 
 
 typedef struct CronFile {
@@ -89,6 +91,7 @@ enum {
 	OPT_S = (1 << 4),
 	OPT_c = (1 << 5),
 	OPT_d = (1 << 6) * ENABLE_FEATURE_CROND_D,
+	OPT_p = (1 << 7)
 };
 #if ENABLE_FEATURE_CROND_D
 # define DebugOpt (option_mask32 & OPT_d)
@@ -107,11 +110,13 @@ struct globals {
 	char *env_var_user;
 	char *env_var_home;
 #endif
+	char *pid_filename;
 } FIX_ALIASING;
 #define G (*(struct globals*)&bb_common_bufsiz1)
 #define INIT_G() do { \
 	G.log_level = 8; \
 	G.crontab_dir_name = CRONTABS; \
+	G.pid_filename = PIDFILENAME; \
 } while (0)
 
 
@@ -863,9 +868,9 @@ int crond_main(int argc UNUSED_PARAM, char **argv)
 	opt_complementary = "f-b:b-f:S-L:L-S" IF_FEATURE_CROND_D(":d-l")
 			/* -l and -d have numeric param */
 			":l+" IF_FEATURE_CROND_D(":d+");
-	opts = getopt32(argv, "l:L:fbSc:" IF_FEATURE_CROND_D("d:"),
+	opts = getopt32(argv, "l:L:fbSc:p:" IF_FEATURE_CROND_D("d:"),
 			&G.log_level, &G.log_filename, &G.crontab_dir_name
-			IF_FEATURE_CROND_D(,&G.log_level));
+			IF_FEATURE_CROND_D(,&G.log_level), &G.pid_filename);
 	/* both -d N and -l N set the same variable: G.log_level */
 
 	if (!(opts & OPT_f)) {
@@ -885,7 +890,7 @@ int crond_main(int argc UNUSED_PARAM, char **argv)
 	xsetenv("SHELL", DEFAULT_SHELL); /* once, for all future children */
 	crondlog(LVL8 "crond (busybox "BB_VER") started, log level %d", G.log_level);
 	rescan_crontab_dir();
-	write_pidfile("/var/run/crond.pid");
+	write_pidfile(G.pid_filename);
 
 	/* Main loop */
 	t2 = time(NULL);
