Index: busybox-1_20_1/miscutils/taskset.c
===================================================================
--- busybox-1_20_1.orig/miscutils/taskset.c	2019-04-15 19:13:39.289493510 +0800
+++ busybox-1_20_1/miscutils/taskset.c	2019-04-15 19:15:30.671718492 +0800
@@ -55,25 +55,26 @@
 		char BUG_CPU_SETSIZE_is_too_small[
 			CPU_SETSIZE < sizeof(int) ? -1 : 1];
 	};
-	char *p = (void*)mask;
+	//char *p = (void*)mask;
 
-	/* Take the least significant bits. Careful!
-	 * Consider both CPU_SETSIZE=4 and CPU_SETSIZE=1024 cases
-	 */
+	/* Take the least significant bits. Assume cpu_set_t is
+	 * implemented as an array of unsigned long or unsigned
+	 * int.
+ 	 */
+if (CPU_SETSIZE < 8*sizeof(long))
+		return *(unsigned*)mask;
+	if (CPU_SETSIZE < 8*sizeof(long long))
+		return *(unsigned long*)mask;
 #if BB_BIG_ENDIAN
-	/* For big endian, it means LAST bits */
-	if (CPU_SETSIZE < sizeof(long))
-		p += CPU_SETSIZE - sizeof(int);
-	else if (CPU_SETSIZE < sizeof(long long))
-		p += CPU_SETSIZE - sizeof(long);
-	else
-		p += CPU_SETSIZE - sizeof(long long);
+	if (sizeof(long long) > sizeof(long)) {
+		/* We can put two long in the long long, but they have to
+		 * be swapped: the least significant word comes first in the
+		 * array */
+		unsigned long *p = (void*)mask;
+		return p[0] + ((unsigned long long)p[1] << (8*sizeof(long)));
+	}
 #endif
-	if (CPU_SETSIZE < sizeof(long))
-		return *(unsigned*)p;
-	if (CPU_SETSIZE < sizeof(long long))
-		return *(unsigned long*)p;
-	return *(unsigned long long*)p;
+	return *(unsigned long long*)mask;
 }
 #endif
 
