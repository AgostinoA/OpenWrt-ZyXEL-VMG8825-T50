/******************************************************************************
*                                                                       
* FILE NAME    :icf_stats_types.h                         
*                                                                       
* DESCRIPTION  : File for information on Statistics of IPTK 
*                definiton.
*                                                                       
* Revision History :                                                    
*    DATE            NAME             REFERENCE       REASON
* --------      ------------          ----------   ---------------
*  15-May-2007  Anuradha Gupta                        Initial
*  15-May-2007  Alok Tiwari                         Stats strucutre modified
* 16-Jan-2008   Amit Sharma       ICF 8.0 LLD       Enhancements for Rel8.0
* 11-Mar-2008   Vipul Varshney      SPR 18122       AKA Enhancement
* 28-Mar-2008   Sumant Gupta      ICF 8.0           Merging Publish & Message
* 07-Jun-2008  Amit Sharma       IPTK 8.0 SRTP LLD  SRTP Enhancements
* Copyright 2007,Aricent.                               
*                                                                       
******************************************************************************/
#ifndef __ICF_STAT_TYPES_H__
#define __ICF_STAT_TYPES_H__

#include "icf_types.h"

/* Determine if a C++ compiler is being used.
 * If so, ensure that standard
 * C is used to process the API information.
 */

#ifdef __cplusplus

/* Yes, C++ compiler is present.
 * Use standard C.
 */

extern "C"
{
#endif /* __cplusplus */


#ifdef ICF_STAT_ENABLE

/*-----------------------------------------------------------------------------
 * 
 * Structure Name: icf_tcp_connections_stats_st
 *
 * Description: This structure is used to fill up the stats of all TCP
 *              connections either active or closed since last reboot.
 *              This structure is used in API ICF_STATS_RESP when IPTK
 *              sends response of request generated by PA through API 
 *              ICF_STATS_REQ.
 *---------------------------------------------------------------------------*/

typedef struct
{
        /*Specifies number of active TCP connections*/
        icf_uint32_t            stats_active_conn;

        /*Total TCP connections active or closed after last reboot*/
        icf_uint32_t            total_tcp_conn_since_last_reboot;

        /*Total number of failures of icf_send function*/
        icf_uint32_t            stats_send_failures;

        /*Number of connection failures*/
        icf_uint32_t            stats_conn_failures;

        /*Number of TCP connections created by local and closed by remote*/
        icf_uint32_t            stats_remote_closure_for_local_conn;

} icf_tcp_connections_stats_st;


/*-----------------------------------------------------------------------------
 * 
 * Structure Name: icf_udp_connections_stats_st
 *
 * Description: This structure is used to fill up the stats of UDP.
 *              This structure is used in API ICF_STATS_RESP when IPTK
 *              sends response of request generated by PA through API 
 *              ICF_STATS_REQ.
 *---------------------------------------------------------------------------*/

typedef struct
{

        /*Total number of failures of icf_send function*/
        icf_uint32_t            stats_send_failures;

} icf_udp_connections_stats_st;


/*-----------------------------------------------------------------------------
 * 
 * Structure Name: icf_tls_connections_stats_st
 *
 * Description: This structure is used to fill up the stats of all TLS
 *              connections either active or closed since last reboot.
 *              This structure is used in API ICF_STATS_RESP when IPTK
 *              sends response of request generated by PA through API 
 *              ICF_STATS_REQ.
 *---------------------------------------------------------------------------*/

typedef struct
{
        /*Specifies number of active TCP connections*/
        icf_uint32_t            stats_active_conn;

        /*Total TCP connections active or closed after last reboot*/
        icf_uint32_t            total_tls_conn_since_last_reboot;

        /*Total number of failures of icf_send function*/
        icf_uint32_t            stats_send_failures;

        /*Number of connection failures*/
        icf_uint32_t            stats_conn_failures;

        /*Number of TCP connections created by local and closed by remote*/
        icf_uint32_t            stats_remote_closure_for_local_conn;

        icf_uint32_t            stats_handshake_errors;

} icf_tls_connections_stats_st;


/*-----------------------------------------------------------------------------
 * 
 * Structure Name: icf_register_stats_st
 *
 * Description: This structure is used to fill up the stats of REGISTER
 *              requests.This structure is used in API ICF_STATS_RESP
 *              when IPTK sends response of request generated by PA through
 *              API  ICF_STATS_REQ.
 *---------------------------------------------------------------------------*/

typedef struct
{
        /*Number of active registrations*/
        icf_uint32_t            stats_active_reg;

        /*Number of failed registrations*/
        icf_uint32_t            stats_failed_reg;

        /*Number of user initiated deregistrations done*/
        icf_uint32_t            stats_dereg_done;

        /*Number of users registered*/
        icf_uint32_t            stats_user_registered;

        /*Number of registrar addresses*/
        icf_uint32_t            stats_registrar_addr;

	/*Number of register retransmission*/
	icf_uint32_t            stats_rereg_done;

        /* new field added for number of reg event subscription 
         * done corresponding to successful registration*/
        icf_uint32_t            stats_reg_event_package_subs;

        /* new filed added for number of network initiated deregistration done.*/
        icf_uint32_t           stats_nw_dereg_done;

 	/*Number of guard timer expiry for registration procedure*/
        icf_uint32_t            stats_reg_guard_timer_expire;

	/*Number of authentication challenge received for registration*/
        icf_uint32_t            stats_reg_auth_received;

        /*Number of success in authentication*/
        icf_uint32_t            stats_reg_auth_success;

        /*Number of failure in authentication*/
        icf_uint32_t            stats_reg_auth_failure;

} icf_register_stats_st;


/*-----------------------------------------------------------------------------
 * 
 * Structure Name: icf_outbound_req_stats_st
 *
 * Description:
 *---------------------------------------------------------------------------*/

typedef struct
{
        /*Number of INVITE sent*/
        icf_uint32_t            stats_INVITE;

        /*Number of  PRACK sent*/
        icf_uint32_t            stats_PRACK;

        /*Number of UPDATE sent*/
        icf_uint32_t            stats_UPDATE;

        /*Number of ReINVITE sent*/
        icf_uint32_t            stats_ReINVITE;

        /*Number of INFO sent*/
        icf_uint32_t            stats_INFO;

        /*Number of OPTION sent out of dialog*/
        icf_uint32_t            stats_outdlg_OPTION;

        /*Number of OPTION sent in dialog*/
        icf_uint32_t            stats_indlg_OPTION;

        /*Number of CANCEL sent*/
        icf_uint32_t            stats_CANCEL;

        /*Number of ACK sent */
        icf_uint32_t            stats_ACK;

        /*Number of BYE sent*/
        icf_uint32_t            stats_BYE;

        /*Number of REGISTER requests sent*/
        icf_uint32_t            stats_REGISTER;

        /*Number of SUBSCRIBE requests sent*/
        icf_uint32_t            stats_SUBSCRIBE;

        /*Number of REFER sent*/
        icf_uint32_t            stats_REFER;

        /*Number of NOTIFY sent*/
        icf_uint32_t            stats_NOTIFY;

        /*Number of QOS INVITE sent*/
        icf_uint32_t            stats_qos_INVITE;

	 /* Number of PUBLISH Sent */
        icf_uint32_t            stats_PUBLISH;

        /* Number of MESSAGE Sent */
        icf_uint32_t            stats_MESSAGE;

} icf_outbound_req_stats_st;


/*-----------------------------------------------------------------------------
 * 
 * Structure Name: icf_inbound_req_stats_st
 *
 * Description:
 *---------------------------------------------------------------------------*/

typedef struct
{
        /* Number of INVITE received */
        icf_uint32_t            stats_INVITE;

        /* Number of PRACK received */
        icf_uint32_t            stats_PRACK;

        /* Number of UPDATE received */
        icf_uint32_t            stats_UPDATE;

        /* Number of ReINVITE received */
        icf_uint32_t            stats_ReINVITE;

        /* Number of INFO received */
        icf_uint32_t            stats_INFO;

        /* Number of OPTION received out of dialog */
        icf_uint32_t            stats_outdlg_OPTION;

        /* Number of OPTION received within the dialog */
        icf_uint32_t            stats_indlg_OPTION;

        /* Number of CANCEL received */
        icf_uint32_t            stats_CANCEL;

        /* Number of ACK received */
        icf_uint32_t            stats_ACK;

        /* Number of BYE received */
        icf_uint32_t            stats_BYE;

        /* Number of NOTIFY received */
        icf_uint32_t            stats_NOTIFY;

        /* Number of REFER received */
        icf_uint32_t            stats_REFER;

        /* Number of QOS  INVITE received */
        icf_uint32_t            stats_qos_INVITE;
       
        /* Number of MESSAGE received */
	 icf_uint32_t            stats_MESSAGE;
} icf_inbound_req_stats_st;

/*-----------------------------------------------------------------------------
 * 
 * Structure Name: icf_outbound_req_retrans_stats_st
 *
 * Description:
 *---------------------------------------------------------------------------*/

typedef struct
{
        /*Number of INVITE sent*/
        icf_uint32_t            stats_INVITE;

        /*Number of  PRACK sent*/
        icf_uint32_t            stats_PRACK;

        /*Number of UPDATE sent*/
        icf_uint32_t            stats_UPDATE;

        /*Number of INFO sent*/
        icf_uint32_t            stats_INFO;

        /*Number of OPTION sent*/
        icf_uint32_t            stats_OPTION;

        /*Number of CANCEL sent*/
        icf_uint32_t            stats_CANCEL;

        /*Number of BYE sent*/
        icf_uint32_t            stats_BYE;

        /*Number of REGISTER requests sent*/
        icf_uint32_t            stats_REGISTER;

        /*Number of SUBSCRIBE requests sent*/
        icf_uint32_t            stats_SUBSCRIBE;

        /*Number of REFER sent*/
        icf_uint32_t            stats_REFER;

        /*Number of NOTIFY sent*/
        icf_uint32_t            stats_NOTIFY;

       /* Number of PUBLISH Sent */
        icf_uint32_t            stats_PUBLISH;

        /* Number of MESSAGE Sent */
        icf_uint32_t            stats_MESSAGE;

} icf_outbound_req_retrans_stats_st;

/*-----------------------------------------------------------------------------
 * 
 * Structure Name: icf_outbound_invite_resp_stats_st
 *
 * Description:
 *---------------------------------------------------------------------------*/

typedef struct
{
        /* Number of 100 response of OUTBOUND_INVITE */
        icf_uint32_t            stats_100;

        /* Number of 2xx response of OUTBOUND_INVITE */
        icf_uint32_t            stats_2xx;

        /* Number of 180 response of OUTBOUND_INVITE */
        icf_uint32_t            stats_180;

        /* Number of 183 response of OUTBOUND_INVITE */
        icf_uint32_t            stats_183;

        /* Number of 181 response of OUTBOUND_INVITE */
        icf_uint32_t            stats_181;

        /* Number of 182 response of OUTBOUND_INVITE */
        icf_uint32_t            stats_182;

        /*Fix merged for CSR_1_5417045*/
        /* Number of 300 response of OUTBOUND_INVITE */
        icf_uint32_t            stats_300;

        /* Number of 301 response of OUTBOUND_INVITE */
        icf_uint32_t            stats_301;

        /* Number of 302 response of OUTBOUND_INVITE */
        icf_uint32_t            stats_302;

        /* Number of 305 response of OUTBOUND_INVITE */
        icf_uint32_t            stats_305;

        /* Number of 380 response of OUTBOUND_INVITE */
        icf_uint32_t            stats_380;
        
        /* Number of 3xx response of OUTBOUND_INVITE */
        icf_uint32_t            stats_3xx;

        /* Number of 486 response of OUTBOUND_INVITE */
        icf_uint32_t            stats_486;

        /* Number of 404 response of OUTBOUND_INVITE */
        icf_uint32_t            stats_404;

        /* Number of 415 response of OUTBOUND_INVITE */
        icf_uint32_t            stats_415;

        /* Number of 407 response of OUTBOUND_INVITE */
        icf_uint32_t            stats_407;

        /* Number of 401 response of OUTBOUND_INVITE */
        icf_uint32_t            stats_401;

        /* Number of 491 response of OUTBOUND_INVITE */
        icf_uint32_t            stats_491;

        /* Number of 481 response of OUTBOUND_INVITE */
        icf_uint32_t            stats_481;

        /* Number of 503 response of OUTBOUND_INVITE */
        icf_uint32_t            stats_503;

        /* Number of 488 response of OUTBOUND_INVITE */
        icf_uint32_t            stats_488;

	/* Number of 480 response of OUTBOUND_INVITE */
        icf_uint32_t            stats_480;

        /* Number of 500 response of OUTBOUND_INVITE */
        icf_uint32_t            stats_500;

        /* Number of 403 response of OUTBOUND_INVITE */
        icf_uint32_t            stats_403;

        /* Number of 487 response of OUTBOUND_INVITE */
        icf_uint32_t            stats_487;

        /* Number of 400 response of OUTBOUND_INVITE */
        icf_uint32_t            stats_400;

	/* Number of 420 response of OUTBOUND_INVITE */
	icf_uint32_t            stats_420;

        /* Number of 423 response of INBOUND_INVITE */
        icf_uint32_t            stats_423;

        /* Number of 484 response of OUTBOUND_INVITE */
        icf_uint32_t            stats_484;

        /* Number of 485 response of OUTBOUND_INVITE */
        icf_uint32_t            stats_485;

        /* Number of 402 response of OUTBOUND_INVITE */
        icf_uint32_t            stats_402;

	/* Number of 406 response of OUTBOUND_INVITE */
        icf_uint32_t            stats_406;

	/* Number of 408 response of OUTBOUND_INVITE */
        icf_uint32_t            stats_408;

	/* Number of 409 response of OUTBOUND_INVITE */
        icf_uint32_t            stats_409;

	/* Number of 410 response of OUTBOUND_INVITE */
        icf_uint32_t            stats_410;

	/* Number of 413 response of OUTBOUND_INVITE */
        icf_uint32_t            stats_413;

	/* Number of 482 response of OUTBOUND_INVITE */
        icf_uint32_t            stats_482;

	/* Number of 483 response of OUTBOUND_INVITE */
        icf_uint32_t            stats_483;

	/* Number of 489 response of OUTBOUND_INVITE */
        icf_uint32_t            stats_489;

        /* Number of 501 response of OUTBOUND_INVITE */
        icf_uint32_t            stats_501;

        /* Number of 502 response of OUTBOUND_INVITE */
        icf_uint32_t            stats_502;

        /* Number of 504 response of OUTBOUND_INVITE */
        icf_uint32_t            stats_504;

        /* Number of 505 response of OUTBOUND_INVITE */
        icf_uint32_t            stats_505;

        /* Number of 580 response of OUTBOUND_INVITE */
        icf_uint32_t            stats_580;

        /* Number of 600 response of OUTBOUND_INVITE */
        icf_uint32_t            stats_600;

        /* Number of 603 response of OUTBOUND_INVITE */
        icf_uint32_t            stats_603;

 	/* Number of 604 response of OUTBOUND_INVITE */
        icf_uint32_t            stats_604;

	/* Number of 606 response of OUTBOUND_INVITE */
        icf_uint32_t            stats_606;

        /* Number of rest of 4xx  response of OUTBOUND_INVITE */
        icf_uint32_t            stats_rest_4xx;

        /* Number of rest of 5xx  response of OUTBOUND_INVITE */
        icf_uint32_t            stats_rest_5xx;

        /* Number of 6xx response of OUTBOUND_INVITE */
        icf_uint32_t            stats_rest_6xx;

} icf_outbound_invite_resp_stats_st;


/*-----------------------------------------------------------------------------
 * 
 * Structure Name: icf_outbound_resp_stats_st
 *
 * Description:
 *---------------------------------------------------------------------------*/

typedef struct
{
        /* Number of 200 responses of OUTBOUND methods*/
        icf_uint32_t            stats_200;

        /* Number of any other responses of OUTBOUND methods*/
        icf_uint32_t            stats_other_resp;


} icf_outbound_resp_stats_st;



/*-----------------------------------------------------------------------------
 * 
 * Structure Name: icf_outbound_refer_resp_stats_st
 *
 * Description:
 *---------------------------------------------------------------------------*/

typedef struct
{
        /* Number of 202 responses of OUTBOUND_REFER*/
        icf_uint32_t            stats_202;

        /* Number of 400 responses of OUTBOUND_REFER*/
        icf_uint32_t            stats_400;

	/* Number of 481 responses of OUTBOUND_REFER*/
        icf_uint32_t            stats_481;

        /* Number of any other responses of OUTBOUND_REFER*/
        icf_uint32_t            stats_other_resp;

} icf_outbound_refer_resp_stats_st;


/*-----------------------------------------------------------------------------
 * 
 * Structure Name: icf_outbound_resp_with_auth_stats_st
 *
 * Description:
 *---------------------------------------------------------------------------*/


typedef struct
{
        /* Number of 200 responses of OUTBOUND methods*/

        icf_uint32_t            stats_200;

        /* Number of 401 responses OUTBOUND methods*/
        icf_uint32_t            stats_401;

        /* Number of 407 responses OUTBOUND methods*/
        icf_uint32_t            stats_407;

	/* Number of 489 responses OUTBOUND methods*/
        icf_uint32_t            stats_489;

        /* Number of any other responses of OUTBOUND methods*/
        icf_uint32_t            stats_other_resp;

} icf_outbound_resp_with_auth_stats_st;



/*-----------------------------------------------------------------------------
 * 
 * Structure Name: icf_inbound_invite_resp_stats_st
 *
 * Description:
 *---------------------------------------------------------------------------*/

typedef struct
{
        /* Number of 100 response of INBOUND_INVITE */
        icf_uint32_t            stats_100;

        /* Number of 2xx response of INBOUND_INVITE */
        icf_uint32_t            stats_2xx;

        /* Number of 180 response of INBOUND_INVITE */
        icf_uint32_t            stats_180;

        /* Number of 181 response of INBOUND_INVITE */
        icf_uint32_t            stats_181;

	/* Number of 182 response of INBOUND_INVITE */
        icf_uint32_t            stats_182;

        /* Number of 183 response of INBOUND_INVITE */
        icf_uint32_t            stats_183;

        /* Number of 3xx response of INBOUND_INVITE */
        icf_uint32_t            stats_3xx;

        /* Number of 400 response of INBOUND_INVITE */
        icf_uint32_t            stats_400;

       /* Number of 486 response of INBOUND_INVITE */
        icf_uint32_t            stats_486;

        /* Number of 404 response of INBOUND_INVITE */
        icf_uint32_t            stats_404;

        /* Number of 415 response of INBOUND_INVITE */
        icf_uint32_t            stats_415;

        /* Number of 407 response of INBOUND_INVITE */
        icf_uint32_t            stats_407;

        /* Number of 401 response of INBOUND_INVITE */
        icf_uint32_t            stats_401;

        /* Number of 491 response of INBOUND_INVITE */
        icf_uint32_t            stats_491;

        /* Number of 481 response of INBOUND_INVITE */
        icf_uint32_t            stats_481;

        /* Number of 503 response of INBOUND_INVITE */
        icf_uint32_t            stats_503;

        /* Number of 488 response of INBOUND_INVITE */
        icf_uint32_t            stats_488;

        /* Number of 480 response of INBOUND_INVITE */
        icf_uint32_t            stats_480;

        /* Number of 500 response of INBOUND_INVITE */
        icf_uint32_t            stats_500;

        /* Number of 403 response of INBOUND_INVITE */
        icf_uint32_t            stats_403;

        /* Number of 487 response of INBOUND_INVITE */
        icf_uint32_t            stats_487;

        /* Number of 420 response of INBOUND_INVITE */
        icf_uint32_t            stats_420;

        /* Number of 423 response of INBOUND_INVITE */
        icf_uint32_t            stats_423;

        /* Number of 484 response of INBOUND_INVITE */
        icf_uint32_t            stats_484;

        /* Number of 485 response of INBOUND_INVITE */
        icf_uint32_t            stats_485;

        /* Number of 402 response of INBOUND_INVITE */
        icf_uint32_t            stats_402;

 	/* Number of 406 response of INBOUND_INVITE */
        icf_uint32_t            stats_406;

 	/* Number of 408 response of INBOUND_INVITE */
        icf_uint32_t            stats_408;

 	/* Number of 409 response of INBOUND_INVITE */
        icf_uint32_t            stats_409;

 	/* Number of 410 response of INBOUND_INVITE */
        icf_uint32_t            stats_410;

 	/* Number of 413 response of INBOUND_INVITE */
        icf_uint32_t            stats_413;

 	/* Number of 482 response of INBOUND_INVITE */
        icf_uint32_t            stats_482;

	/* Number of 483 response of INBOUND_INVITE */
        icf_uint32_t            stats_483;

 	/* Number of 489 response of INBOUND_INVITE */
        icf_uint32_t            stats_489;

        /* Number of 501 response of INBOUND_INVITE */
        icf_uint32_t            stats_501;

        /* Number of 502 response of INBOUND_INVITE */
        icf_uint32_t            stats_502;

        /* Number of 504 response of INBOUND_INVITE */
        icf_uint32_t            stats_504;

        /* Number of 505 response of INBOUND_INVITE */
        icf_uint32_t            stats_505;

        /* Number of 580 response of INBOUND_INVITE */
        icf_uint32_t            stats_580;

        /* Number of 600 response of INBOUND_INVITE */
        icf_uint32_t            stats_600;

        /* Number of 603 response of INBOUND_INVITE */
        icf_uint32_t            stats_603;

	/* Number of 604 response of INBOUND_INVITE */
        icf_uint32_t            stats_604;

	/* Number of 606 response of INBOUND_INVITE */
        icf_uint32_t            stats_606;

        /* Number of rest of 4xx  response of INBOUND_INVITE */
        icf_uint32_t            stats_rest_4xx;

        /* Number of rest of 5xx  response of INBOUND_INVITE */
        icf_uint32_t            stats_rest_5xx;

        /* Number of 6xx response of INBOUND_INVITE */
        icf_uint32_t            stats_rest_6xx;

       
} icf_inbound_invite_resp_stats_st;




/*-----------------------------------------------------------------------------
 * 
 * Structure Name: icf_inbound_resp_stats_st
 *
 * Description:
 *---------------------------------------------------------------------------*/

typedef struct
{
        /*Number of 200 responses of INBOUND methods*/
        icf_uint32_t            stats_200;

        /*Number of 500 responses of INBOUND methods*/
        icf_uint32_t            stats_500;

        /*Number of 481 responses of INBOUND methods*/
        icf_uint32_t            stats_481;

        /*Number of 400 responses of INBOUND methods*/
        icf_uint32_t            stats_400;


} icf_inbound_resp_stats_st;


/*-----------------------------------------------------------------------------
 * 
 * Structure Name: icf_inbound_refer_resp_stats_st
 *
 * Description:
 *---------------------------------------------------------------------------*/

typedef struct
{
        /*Number of 202 responses of INBOUND_REFER*/
        icf_uint32_t            stats_202;

        /*Number of 481 responses of INBOUND_REFER*/
        icf_uint32_t            stats_481;

        /*Number of 400 responses of INBOUND_REFER*/
        icf_uint32_t            stats_400;

        /*Number of 403 responses of INBOUND_REFER*/
        icf_uint32_t            stats_403;

        /* Number of failure responses */
        icf_uint32_t            stats_failure_resp;

} icf_inbound_refer_resp_stats_st;



/*-----------------------------------------------------------------------------
 * 
 * Structure Name: icf_inbound_options_resp_stats_st
 *
 * Description:
 *---------------------------------------------------------------------------*/

typedef struct
{
        /*Number of 200 responses of INBOUND methods*/
        icf_uint32_t            stats_200;

        /*Number of 481 responses of INBOUND methods*/
        icf_uint32_t            stats_481;

        /*Number of 400 responses of INBOUND methods*/
        icf_uint32_t            stats_other_resp;

} icf_inbound_options_resp_stats_st;


/*-----------------------------------------------------------------------------
 * 
 * Structure Name: icf_misc_stats_st
 *
 * Description:
 *---------------------------------------------------------------------------*/

typedef struct
{
    /* Number of AAA_DNS_QUERY*/
    icf_uint32_t            stats_AAA_DNS_QUERY;

    /* Number of SRV_DNS_QUERY*/
    icf_uint32_t            stats_SRV_DNS_QUERY;

    /*Number of AAA_DNS_QUERY_SUCCESS_RESP*/
    icf_uint32_t            stats_AAA_DNS_QUERY_SUCCESS_RESP;

    /*Number of SRV_DNS_SUCCESS_RESP*/
    icf_uint32_t            stats_SRV_DNS_SUCCESS_RESP;

    /*Number of AAA_DNS_QUERY_FAILURE_RESP*/
    icf_uint32_t            stats_AAA_DNS_QUERY_FAILURE_RESP;

    /*Number of SRV_DNS_FAILURE_RESP*/
    icf_uint32_t            stats_SRV_DNS_FAILURE_RESP;

    /*Number of active timers*/
    icf_uint32_t            stats_active_timers;

    /*Number of 405 for inbound req*/
    icf_uint32_t inbound_req_405;
	
    /*Number of 405 for outbound req*/
    icf_uint32_t outbound_req_405;
    
    /*Number of DHCP queries*/
    icf_uint32_t            stats_DHCP_QUERY;

    /*Number of DHCP success queries*/
    icf_uint32_t            stats_DHCP_SUCCESS_QUERY;

    /*Number of DHCP failure queries*/
    icf_uint32_t            stats_DHCP_FAILURE_QUERY;

    /*Number of DNS-NAPTR queries*/
    icf_uint32_t            stats_NAPTR_DNS_QUERY;

    /*Number of DNS-NAPTR success queries*/
    icf_uint32_t            stats_NAPTR_DNS_SUCCESS_QUERY;
  
    /*Number of DNS-NAPTR failure queries*/
    icf_uint32_t            stats_NAPTR_DNS_FAILURE_QUERY;

    /*Number of time SRTP Fallback has been done*/
    icf_uint32_t            stats_srtp_fallback_done; 

       
}  icf_misc_stats_st;


/*-----------------------------------------------------------------------------
 * 
 * Structure Name: icf_request_message_stats_st
 *
 * Description:
 *---------------------------------------------------------------------------*/

typedef struct
{

        icf_outbound_req_stats_st       stat_outbound_req;
       
        icf_outbound_req_retrans_stats_st 	stat_outbound_retrans_req;

        icf_inbound_req_stats_st        stat_inbound_req;

}  icf_request_message_stats_st;


/*-----------------------------------------------------------------------------
 * 
 * Structure Name: icf_response_message_stats_st
 *
 * Description:
 *---------------------------------------------------------------------------*/

typedef struct
{

        icf_outbound_invite_resp_stats_st                stat_outbound_invite_resp;

        icf_outbound_resp_stats_st               	 stat_outbound_cancel_resp;

        icf_outbound_resp_stats_st                	 stat_outbound_prack_resp;

        icf_outbound_refer_resp_stats_st                 stat_outbound_refer_resp;

        icf_outbound_resp_with_auth_stats_st             stat_outbound_subscribe_resp;

        icf_outbound_resp_stats_st                 	 stat_outbound_info_resp;

        icf_outbound_resp_stats_st                  	 stat_outbound_bye_resp;

	icf_outbound_resp_stats_st                       stat_outbound_notify_resp;

	icf_outbound_resp_stats_st                       stat_outbound_update_resp;

	icf_outbound_resp_with_auth_stats_st             stat_outbound_register_resp;

        icf_outbound_resp_stats_st              	 stat_outbound_options_resp;

        icf_inbound_invite_resp_stats_st                 stat_inbound_invite_resp;

        icf_inbound_resp_stats_st                	 stat_inbound_cancel_resp;

        icf_inbound_resp_stats_st                 	 stat_inbound_prack_resp;

        icf_inbound_refer_resp_stats_st                  stat_inbound_refer_resp;

        icf_inbound_resp_stats_st                	 stat_inbound_notify_resp;

        icf_inbound_resp_stats_st                  	 stat_inbound_info_resp;

        icf_inbound_resp_stats_st                   	 stat_inbound_bye_resp;

	icf_inbound_resp_stats_st                        stat_inbound_update_resp;

        icf_inbound_options_resp_stats_st              	 stat_inbound_options_resp;

        icf_outbound_resp_stats_st                       stat_outbound_publish_resp;
   
        icf_inbound_resp_stats_st                        stat_inbound_message_resp;

        icf_outbound_resp_stats_st                       stat_outbound_message_resp;


}  icf_response_message_stats_st;


/*-----------------------------------------------------------------------------
 * 
 * Structure Name: icf_stats_st
 *
 * Description:
 *---------------------------------------------------------------------------*/


typedef struct
{

         icf_tcp_connections_stats_st                     stat_tcp_connections;

         icf_udp_connections_stats_st                     stat_udp_connections;

         icf_tls_connections_stats_st                     stat_tls_connections;

         icf_register_stats_st                            stat_register;

         icf_request_message_stats_st                     stat_requests;

         icf_response_message_stats_st                    stat_responses;

         icf_misc_stats_st                                misc_stats;

} icf_stats_st;


/*-----------------------------------------------------------------------------
 * 
 * Structure Name: icf_stats_req_st
 *
 * Description: This is payload of API ICF_STATS_REQ.
 *              Application will send this API to request IPTK to send the 
 *              current stats value. 
 *
 *---------------------------------------------------------------------------*/


typedef  struct
{

        icf_boolean_t     reset_stats;

} icf_stats_req_st;


/*-----------------------------------------------------------------------------
 * 
 * Structure Name: icf_stats_resp_st
 *
 * Description: This is payload of API ICF_STATS_RESP.
 *              This API is sent by IPTK in response to ICF_STATS_REQ.
 *              This API contains the current value of all the stats being
 *              collected.
 *
 *---------------------------------------------------------------------------*/


typedef  struct
{

        icf_stats_st                           stats_data;
        icf_time_stamp_st                     last_reset_time;

} icf_stats_resp_st;

#endif



#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif

