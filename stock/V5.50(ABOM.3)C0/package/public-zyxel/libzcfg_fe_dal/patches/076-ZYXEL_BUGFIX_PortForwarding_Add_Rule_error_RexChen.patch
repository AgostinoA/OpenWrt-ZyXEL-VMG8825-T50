Index: libzcfg_fe_dal-1.0/network/nat/zcfg_fe_dal_nat_application.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ libzcfg_fe_dal-1.0/network/nat/zcfg_fe_dal_nat_application.c	2016-12-02 12:50:34.073990800 +0800
@@ -0,0 +1,188 @@
+
+#include <json/json.h>
+
+#include "zcfg_common.h"
+#include "zcfg_rdm_oid.h"
+#include "zcfg_rdm_obj.h"
+#include "zcfg_debug.h"
+#include "zcfg_fe_rdm_string.h"
+#include "zcfg_fe_dal_common.h"
+
+#define CWMP_SOAP_MSG_DEBUG (1 << 1)
+
+dal_param_t NAT_Application_param[] =
+{
+	{"Enable",		dalType_boolean,	0,	0,	NULL},
+	{"Status",		dalType_string,	0,	19,	NULL},
+	{"Alias",		dalType_string,	0,	64,	NULL},
+	{"Interface",		dalType_string,	0,	256,	NULL},
+	{"X_ZYXEL_WANIP",		dalType_string,	0,	45,	NULL},
+	{"OriginatingIpAddress",	dalType_string, 0, 45, NULL},
+	{"AllInterfaces",		dalType_boolean,	0,	0,	NULL},
+	{"LeaseDuration",		dalType_int,	0,	63737,	NULL},
+	{"RemoteHost",		dalType_string,	0,	45,	NULL},
+	{"ExternalPort",		dalType_int,	0,	63737,	NULL},
+	{"ExternalPortEndRange",		dalType_int,	0,	63737,	NULL},
+	{"InternalPort",		dalType_int,	0,	63737,	NULL},
+	{"X_ZYXEL_InternalPortEndRange",		dalType_int,	0,	63737,	NULL},
+	{"X_ZYXEL_StartTime",		dalType_string,	0,	31,	NULL},
+	{"X_ZYXEL_StopTime",		dalType_string,	0,	31,	NULL},
+	{"X_ZYXEL_AutoDetectWanStatus",		dalType_boolean,	0,	0,	NULL},
+	{"X_ZYXEL_SetOriginatingIP",	dalType_boolean, 0, 0, NULL},
+	{"Protocol",		dalType_string,	0,	3,	NULL},
+	{"InternalClient",		dalType_string,	0,	256,	NULL},
+	{"Description",		dalType_string,	0,	256,	NULL},			
+	{NULL,		0,	0,	0,	NULL}
+};
+static struct json_object *allIpIfaceObj = NULL;
+
+zcfgRet_t zcfgFeDalNatApplicationAdd(struct json_object *Jobj, char *replyMsg)
+{
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	const char *paraName, *applicaion = NULL, *new_application = NULL;
+	objIndex_t objIid;
+	struct json_object *NatPortMappingJobj = NULL;
+	int n=0;
+	paraName = (const char *)NAT_Application_param[n++].paraName;
+
+	IID_INIT(objIid);
+	zcfgFeObjJsonAdd(RDM_OID_NAT_PORT_MAPPING, &objIid, NULL);
+	if((ret = zcfgFeObjJsonGet(RDM_OID_NAT_PORT_MAPPING, &objIid, &NatPortMappingJobj)) != ZCFG_SUCCESS) {
+		printf("%s: Object retrieve fail\n", __FUNCTION__);
+		return ret;
+	}	
+	while(paraName){
+		struct json_object *paramValue = json_object_object_get(Jobj, paraName);
+		printf("%s: Object retrieve fail\n %s", __FUNCTION__,paraName);
+		if(!paramValue) {
+			printf("function:%s, Line =%d\n", __FUNCTION__,__LINE__);
+			paraName = (const char *)NAT_Application_param[n++].paraName;
+			continue;
+		}
+		json_object_object_add(NatPortMappingJobj, paraName, JSON_OBJ_COPY(paramValue));
+		paraName = (const char *)NAT_Application_param[n++].paraName;
+	}
+
+	if((ret = zcfgFeObjJsonSet(RDM_OID_NAT_PORT_MAPPING, &objIid, NatPortMappingJobj, NULL)) == ZCFG_SUCCESS)
+	{
+		sprintf(replyMsg, "[%d,%d,%d,%d,%d,%d]",objIid.idx[0],objIid.idx[1],objIid.idx[2],
+				objIid.idx[3],objIid.idx[4],objIid.idx[5]);
+		//printf("reply msg %s\n",replyMsg);		
+	}
+	
+	json_object_put(NatPortMappingJobj);
+	return ret;
+}
+zcfgRet_t zcfgFeDalNatApplicationEdit(struct json_object *Jobj, char *replyMsg)
+{
+
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	const char *paraName;
+	objIndex_t objIid;
+	struct json_object *NatPortMappingJobj = NULL;
+	int paramModified = 0, n = 0;
+	struct json_object *iidArray = NULL;
+	uint8_t iidIdx =0;
+	paraName = (const char *)NAT_Application_param[n++].paraName;
+	
+	//IID_INIT(objIid);
+	iidArray = json_object_object_get(Jobj, "iid");
+	for(iidIdx=0;iidIdx<6;iidIdx++){
+		objIid.idx[iidIdx] = json_object_get_int( json_object_array_get_idx(iidArray, iidIdx));
+		if(objIid.idx[iidIdx] != 0)
+			objIid.level = iidIdx+1;
+	}
+	if((ret = zcfgFeObjJsonGet(RDM_OID_NAT_PORT_MAPPING, &objIid, &NatPortMappingJobj)) != ZCFG_SUCCESS) {
+		return ret;
+	}
+	while(paraName){
+		struct json_object *paramValue = json_object_object_get(Jobj, paraName);
+		if(!paramValue) {
+			paraName = (const char *)NAT_Application_param[n++].paraName;
+			continue;
+		}
+		json_object_object_add(NatPortMappingJobj, paraName, JSON_OBJ_COPY(paramValue));
+		paramModified = 1;				
+		paraName = (const char *)NAT_Application_param[n++].paraName;
+	}
+
+	if(paramModified) {
+		if((ret = zcfgFeObjJsonSet(RDM_OID_NAT_PORT_MAPPING, &objIid, NatPortMappingJobj, NULL)) != ZCFG_SUCCESS);
+	}
+	json_object_put(NatPortMappingJobj);
+	return ret;
+}
+zcfgRet_t zcfgFeDalNatApplicationDelete(struct json_object *Jobj, char *replyMsg)
+{
+
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	objIndex_t objIid;
+	struct json_object *iidArray = NULL;
+	uint8_t iidIdx =0;
+
+	
+	//IID_INIT(objIid);
+	iidArray = json_object_object_get(Jobj, "iid");
+	
+	for(iidIdx=0;iidIdx<6;iidIdx++){
+		objIid.idx[iidIdx] = json_object_get_int( json_object_array_get_idx(iidArray, iidIdx));
+		if(objIid.idx[iidIdx] != 0)
+			objIid.level = iidIdx+1;
+	}
+	
+	zcfgFeObjJsonDel(RDM_OID_NAT_PORT_MAPPING, &objIid, NULL);
+	
+	return ret;
+	
+}
+zcfgRet_t zcfgFeDalNatApplicationCheck(struct json_object *Jobj, char *replyMsg){	
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	struct json_object *obj = NULL;
+	objIndex_t iid = {0};
+	const char *application = NULL, *new_application = NULL, *ExternalPort = NULL, *new_ExternalPort = NULL;
+	const char *ExternalPortEndRange = NULL, *new_ExternalPortEndRange = NULL, *Protocol = NULL, *new_Protocol = NULL;
+	new_application = json_object_get_string(json_object_object_get(Jobj, "Description"));
+	new_ExternalPort = json_object_get_int(json_object_object_get(Jobj, "ExternalPort"));
+	new_ExternalPortEndRange = json_object_get_int(json_object_object_get(Jobj, "ExternalPortEndRange"));
+	new_Protocol = json_object_get_string(json_object_object_get(Jobj, "Protocol"));
+	
+	IID_INIT(iid);
+
+	while(zcfgFeObjJsonGetNext(RDM_OID_NAT_PORT_MAPPING, &iid, &obj) == ZCFG_SUCCESS) { 
+		application = json_object_get_string(json_object_object_get(obj, "Description"));
+		ExternalPort = json_object_get_int(json_object_object_get(obj, "ExternalPort"));
+		ExternalPortEndRange = json_object_get_int(json_object_object_get(obj, "ExternalPortEndRange"));
+		Protocol = json_object_get_string(json_object_object_get(obj, "Protocol"));
+			
+			
+		if(!strcmp(application,new_application) && !strcmp(Protocol,new_Protocol) && new_ExternalPort-ExternalPort == 0 && new_ExternalPortEndRange-ExternalPortEndRange == 0){
+			zcfgFeObjJsonDel(RDM_OID_NAT_PORT_MAPPING, &iid, NULL);
+		}
+		zcfgFeJsonObjFree(obj);
+	}	
+	
+	return ret;
+}
+
+zcfgRet_t zcfgFeDalNatApplication(const char *method, struct json_object *Jobj, char *replyMsg)
+{
+	zcfgRet_t ret = ZCFG_SUCCESS;
+
+	if(!method || !Jobj)
+		return ZCFG_INTERNAL_ERROR;
+
+	if(!strcmp(method, "PUT")) {
+		ret = zcfgFeDalNatApplicationEdit(Jobj, NULL);
+		printf("====testH %s: nat true! break;PUT\n", __FUNCTION__);
+	}
+	else if(!strcmp(method, "POST")) {
+		ret = zcfgFeDalNatApplicationCheck(Jobj, NULL);
+		ret = zcfgFeDalNatApplicationAdd(Jobj, replyMsg);
+		printf("====testH %s: nat true! break;POST\n", __FUNCTION__);
+	}
+	else if(!strcmp(method, "DELETE")) {
+		ret = zcfgFeDalNatApplicationDelete(Jobj, NULL);
+	}
+
+	return ret;
+}
Index: libzcfg_fe_dal-1.0/network/nat/zcfg_fe_dal_nat_port_mapping.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/network/nat/zcfg_fe_dal_nat_port_mapping.c	2016-12-02 13:56:41.678398098 +0800
+++ libzcfg_fe_dal-1.0/network/nat/zcfg_fe_dal_nat_port_mapping.c	2016-12-02 13:57:19.391095100 +0800
@@ -133,58 +133,6 @@
 	return ret;
 	
 }
-
-zcfgRet_t zcfgFeDalNatPortMappingCheck(struct json_object *Jobj, char *replyMsg)
-{
-	zcfgRet_t ret = ZCFG_SUCCESS;
-	struct json_object *obj = NULL;
-	objIndex_t iid = {0};
-	const char *application = NULL, *new_application = NULL;
-	const char *Interface = NULL, *new_Interface = NULL;
-	const char *InternalClient = NULL, *new_InternalClient = NULL;
-	int ExternalPort = 0, new_ExternalPort = 0;
-	int ExternalPortEndRange = 0, new_ExternalPortEndRange = 0;
-	const char *Protocol = NULL, *new_Protocol = NULL;
-
-	new_application = json_object_get_string(json_object_object_get(Jobj, "Description"));
-	new_Interface = json_object_get_string(json_object_object_get(Jobj, "Interface"));
-	new_InternalClient = json_object_get_string(json_object_object_get(Jobj, "InternalClient"));
-	new_ExternalPort = json_object_get_int(json_object_object_get(Jobj, "ExternalPort"));
-	new_ExternalPortEndRange = json_object_get_int(json_object_object_get(Jobj, "ExternalPortEndRange"));
-	new_Protocol = json_object_get_string(json_object_object_get(Jobj, "Protocol"));
-
-	IID_INIT(iid);
-
-	while (zcfgFeObjJsonGetNext(RDM_OID_NAT_PORT_MAPPING, &iid, &obj) == ZCFG_SUCCESS) {
-		application = json_object_get_string(json_object_object_get(obj, "Description"));
-		Interface = json_object_get_string(json_object_object_get(obj, "Interface"));
-		InternalClient = json_object_get_string(json_object_object_get(obj, "InternalClient"));
-		ExternalPort = json_object_get_int(json_object_object_get(obj, "ExternalPort"));
-		ExternalPortEndRange = json_object_get_int(json_object_object_get(obj, "ExternalPortEndRange"));
-		Protocol = json_object_get_string(json_object_object_get(obj, "Protocol"));
-
-		if (!strcmp(application, new_application))  {
-			if (!strcmp(Interface, new_Interface) && !strcmp(InternalClient, new_InternalClient)) {
-				if (!strcmp(Protocol, new_Protocol) &&
-				    (ExternalPort == new_ExternalPort) &&
-				    (ExternalPortEndRange == new_ExternalPortEndRange)) {
-					zcfgFeObjJsonDel(RDM_OID_NAT_PORT_MAPPING, &iid, NULL);
-					zcfgFeJsonObjFree(obj);
-					return ret;
-				}
-			} else {
-				zcfgFeObjJsonDel(RDM_OID_NAT_PORT_MAPPING, &iid, NULL);
-				zcfgFeJsonObjFree(obj);
-				return ret;
-			}
-		}
-
-		zcfgFeJsonObjFree(obj);
-	}
-
-	return ret;
-}
-
 zcfgRet_t zcfgFeDalNatPortMapping(const char *method, struct json_object *Jobj, char *replyMsg)
 {
 	zcfgRet_t ret = ZCFG_SUCCESS;
@@ -196,7 +144,6 @@
 		ret = zcfgFeDalNatPortMappingEdit(Jobj, NULL);
 	}
 	else if(!strcmp(method, "POST")) {
-		ret = zcfgFeDalNatPortMappingCheck(Jobj, NULL);
 		ret = zcfgFeDalNatPortMappingAdd(Jobj, replyMsg);
 	}
 	else if(!strcmp(method, "DELETE")) {
Index: libzcfg_fe_dal-1.0/zcfg_fe_dal.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/zcfg_fe_dal.c	2016-12-02 13:56:41.654398098 +0800
+++ libzcfg_fe_dal-1.0/zcfg_fe_dal.c	2016-12-02 13:57:47.312095100 +0800
@@ -23,6 +23,7 @@
 extern dal_param_t NAT_DMZ_ALG_param[];
 extern dal_param_t NAT_ADDR_MAPPING_param[];
 extern dal_param_t NAT_SESSION_CTL_param[];
+extern dal_param_t NAT_Application_param[];
 extern dal_param_t IntfGrp_param[];
 extern dal_param_t UPNP_param[];
 extern dal_param_t TFTPSerName_param[];
@@ -81,6 +82,7 @@
 extern zcfgRet_t zcfgFeDalNatDMZALG(const char *method, struct json_object *Jobj, char *replyMsg);
 extern zcfgRet_t zcfgFeDalNatAddrMapping(const char *method, struct json_object *Jobj, char *replyMsg);
 extern zcfgRet_t zcfgFeDalNatSessionCtl(const char *method, struct json_object *Jobj, char *replyMsg);
+extern zcfgRet_t zcfgFeDalNatApplication(const char *method, struct json_object *Jobj, char *replyMsg);
 extern zcfgRet_t zcfgFeDalIntrGrp(const char *method, struct json_object *Jobj, char *replyMsg);
 extern zcfgRet_t zcfgFeDalUPnP(const char *method, struct json_object *Jobj, char *replyMsg);
 extern zcfgRet_t zcfgFeDalTFTPSerName(const char *method, struct json_object *Jobj, char *replyMsg);
@@ -147,6 +149,7 @@
 {"NAT_DMZ_ALG",		NAT_DMZ_ALG_param,	zcfgFeDalNatDMZALG},
 {"NAT_ADDR_MAPPING",NAT_ADDR_MAPPING_param,	zcfgFeDalNatAddrMapping},
 {"NAT_SESSION_CTL", NAT_SESSION_CTL_param,	zcfgFeDalNatSessionCtl},
+{"NAT_APPLICATION",NAT_Application_param,	zcfgFeDalNatApplication},
 {"INTF_GP",			IntfGrp_param,		zcfgFeDalIntrGrp},
 {"UPNP",			UPNP_param, 		zcfgFeDalUPnP},
 {"TFTPSERNAME",		TFTPSerName_param,	zcfgFeDalTFTPSerName},
