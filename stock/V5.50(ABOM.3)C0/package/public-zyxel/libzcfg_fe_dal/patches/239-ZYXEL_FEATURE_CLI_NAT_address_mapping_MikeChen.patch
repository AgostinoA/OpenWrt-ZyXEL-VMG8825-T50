Index: libzcfg_fe_dal-1.0/network/nat/zcfg_fe_dal_nat_addr_mapping.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/network/nat/zcfg_fe_dal_nat_addr_mapping.c	2017-07-03 19:31:20.417482449 +0800
+++ libzcfg_fe_dal-1.0/network/nat/zcfg_fe_dal_nat_addr_mapping.c	2017-07-03 19:45:58.122715952 +0800
@@ -10,20 +10,59 @@
 
 #define CWMP_SOAP_MSG_DEBUG (1 << 1)
 
+extern int ip4Compare(char *ip1, char *ip2);
 dal_param_t NAT_ADDR_MAPPING_param[] =
 {
-	{"Type",		dalType_boolean,	0,	0,	NULL},
-	{"LocalStartIP",		dalType_string,	0,	16,	NULL},
-	{"LocalEndIP",		dalType_string,	0,	16,	NULL},
-	{"GlobalStartIP",		dalType_string,	0,	16,	NULL},
-	{"GlobalEndIP",		dalType_string,	0,	16,	NULL},
-	{"MappingSet",		dalType_string,	0,	6,	NULL},
-	{"MappingRuleName",		dalType_string,	0,	32,	NULL},
-	{"Description",		dalType_string,	0,	64,	NULL},
-	{"WANIntfName",		dalType_string,	0,	64,	NULL},
-	{"Interface",		dalType_string,	0,	64,	NULL},			
-	{NULL,		0,	0,	0,	NULL}
+	{"Index",				dalType_string,	0,	0,	NULL,	NULL,									 dal_Edit|dal_Delete},
+	{"Type",				dalType_string,	0,	0,	NULL,	"One-to-One|Many-to-One|Many-to-Many",	 dal_Add},
+	{"LocalStartIP",		dalType_string,	0,	0,	NULL,	NULL,									 dal_Add},
+	{"LocalEndIP",			dalType_string,	0,	0,	NULL,	NULL,									 0},
+	{"GlobalStartIP",		dalType_string,	0,	0,	NULL,	NULL,									 dal_Add},
+	{"GlobalEndIP",		dalType_string,	0,	0,	NULL,	NULL,									 0},
+	{"MappingRuleName",	dalType_string,	0,	0,	NULL,	NULL,									 dal_Add},
+	{"Interface",			dalType_RtWanWWan,	0,	0,	NULL,	NULL,									 dal_Add},
+	{NULL,				0,				0,	0,	NULL,	NULL,									 dal_Add}
 };
+
+//static char *getIPInterfaceTR181Name(char *name)
+//{
+//	struct json_object *IpIfaceObj = NULL;
+//	objIndex_t IpIfaceIid = {0};
+//	static char tr181IPIfaceName[32];
+//
+//	if (name == NULL)
+//		return NULL;
+//	memset(tr181IPIfaceName, 0, sizeof(tr181IPIfaceName));
+//	while(zcfgFeObjJsonGetNext(RDM_OID_IP_IFACE, &IpIfaceIid, &IpIfaceObj) == ZCFG_SUCCESS){
+//		if(!strcmp(name,json_object_get_string(json_object_object_get(IpIfaceObj, "X_ZYXEL_SrvName")))){
+//			sprintf(tr181IPIfaceName, "IP.Interface.%d",  IpIfaceIid.idx[0]);
+//			zcfgFeJsonObjFree(IpIfaceObj);
+//			return &tr181IPIfaceName[0];
+//		}
+//		zcfgFeJsonObjFree(IpIfaceObj);
+//	}
+//	return NULL;
+//}
+
+//static char *getIPInterfaceSrvName(char *ifname)
+//{
+//	struct json_object *IpIfaceObj = NULL;
+//	objIndex_t IpIfaceIid = {0};
+//	static char srvName[32];
+//
+//	if (ifname == NULL)
+//		return NULL;
+//	memset(srvName, 0, sizeof(srvName));
+//	IpIfaceIid.level = 1;
+//	sscanf(ifname, "IP.Interface.%hhu", &IpIfaceIid.idx[0]);
+//	if (zcfgFeObjJsonGet(RDM_OID_IP_IFACE, &IpIfaceIid, &IpIfaceObj) == ZCFG_SUCCESS){
+//		strcpy(srvName, json_object_get_string(json_object_object_get(IpIfaceObj, "X_ZYXEL_SrvName")));
+//		zcfgFeJsonObjFree(IpIfaceObj);
+//		return &srvName[0];
+//	}
+//	return NULL;
+//}
+
 zcfgRet_t zcfgFeDalNatAddrMappingAdd(struct json_object *Jobj, char *replyMsg)
 {
 	zcfgRet_t ret = ZCFG_SUCCESS;
@@ -45,7 +84,6 @@
 	while(paraName){
 		struct json_object *paramValue = json_object_object_get(Jobj, paraName);
 		if(!paramValue) {
-			printf("function:%s, Line =%d\n", __FUNCTION__,__LINE__);
 			paraName = (const char *)NAT_ADDR_MAPPING_param[n++].paraName;
 			continue;
 		}
@@ -73,15 +111,27 @@
 	int paramModified = 0, n = 0;
 	struct json_object *iidArray = NULL;
 	uint8_t iidIdx =0;
+	char *ifName;
 	paraName = (const char *)NAT_ADDR_MAPPING_param[n++].paraName;
 	
-	//IID_INIT(objIid);
-	iidArray = json_object_object_get(Jobj, "iid");
+	IID_INIT(objIid);
+	if (iidArray = json_object_object_get(Jobj, "iid")) {
 	for(iidIdx=0;iidIdx<6;iidIdx++){
 		objIid.idx[iidIdx] = json_object_get_int( json_object_array_get_idx(iidArray, iidIdx));
 		if(objIid.idx[iidIdx] != 0)
 			objIid.level = iidIdx+1;
 	}
+	} else if (iidArray = json_object_object_get(Jobj, "Index")) {
+		objIid.level = 1;
+		objIid.idx[0] = json_object_get_int(iidArray);
+		json_object_object_del(Jobj, "Index");
+	}
+	else {
+		if(replyMsg != NULL)
+			strcat(replyMsg, "internal error");
+		return ZCFG_INTERNAL_ERROR;
+	}
+
 	if((ret = zcfgFeObjJsonGet(RDM_OID_NAT_ADDR_MAPPING, &objIid, &NatAddrMappingJobj)) != ZCFG_SUCCESS) {
 		return ret;
 	}
@@ -91,15 +141,146 @@
 			paraName = (const char *)NAT_ADDR_MAPPING_param[n++].paraName;
 			continue;
 		}
+//		if (strcmp("Interface", paraName) == 0 && strstr("IP.Interface.", json_object_get_string(paramValue))) {
+//			ifName = getIPInterfaceTR181Name(json_object_get_string(paramValue));
+//			if (ifName) {
+//				json_object_object_add(NatAddrMappingJobj, "Interface", json_object_new_string(ifName));
+//				paramModified = 1;
+//				paraName = (const char *)NAT_ADDR_MAPPING_param[n++].paraName;
+//				continue;
+//			} else {
+//				if(replyMsg != NULL)
+//					strcat(replyMsg, "Invalid Interface");
+//				zcfgFeJsonObjFree(NatAddrMappingJobj);
+//				return ZCFG_INVALID_PARAM_VALUE;
+//			}
+//		}
 		json_object_object_add(NatAddrMappingJobj, paraName, JSON_OBJ_COPY(paramValue));
 		paramModified = 1;				
 		paraName = (const char *)NAT_ADDR_MAPPING_param[n++].paraName;
 	}
 
 	if(paramModified) {
-		if((ret = zcfgFeObjJsonSet(RDM_OID_NAT_ADDR_MAPPING, &objIid, NatAddrMappingJobj, NULL)) != ZCFG_SUCCESS);
+		char *type = json_object_get_string(json_object_object_get(NatAddrMappingJobj, "Type"));
+		if (strcmp("One-to-One", type) == 0) {
+			json_object_object_add(NatAddrMappingJobj, "LocalEndIP", json_object_new_string(""));
+			json_object_object_add(NatAddrMappingJobj, "GlobalEndIP", json_object_new_string(""));
+			if (!validateIPv4(json_object_get_string(json_object_object_get(NatAddrMappingJobj, "LocalStartIP")))
+						|| !validateIPv4(json_object_get_string(json_object_object_get(NatAddrMappingJobj, "GlobalStartIP")))) {
+				if(replyMsg != NULL)
+					strcat(replyMsg, "(ipv4 format error)");
+				zcfgFeJsonObjFree(NatAddrMappingJobj);
+				return ZCFG_INVALID_PARAM_VALUE;
+			}
+			if (strcmp("0.0.0.0", json_object_get_string(json_object_object_get(NatAddrMappingJobj, "LocalStartIP")))==0) {
+				if(replyMsg != NULL)
+					strcat(replyMsg, "LocalStartIP error");
+				zcfgFeJsonObjFree(NatAddrMappingJobj);
+				return ZCFG_INVALID_PARAM_VALUE;
+			}
+			if (strcmp("0.0.0.0", json_object_get_string(json_object_object_get(NatAddrMappingJobj, "GlobalStartIP")))==0) {
+				if(replyMsg != NULL)
+					strcat(replyMsg, "GlobalStartIP error");
+				zcfgFeJsonObjFree(NatAddrMappingJobj);
+				return ZCFG_INVALID_PARAM_VALUE;
+			}
+		}
+		else if (strcmp("Many-to-One", type) == 0) {
+			json_object_object_add(NatAddrMappingJobj, "GlobalEndIP", json_object_new_string(""));
+			if (!validateIPv4(json_object_get_string(json_object_object_get(NatAddrMappingJobj, "LocalStartIP")))
+						|| !validateIPv4(json_object_get_string(json_object_object_get(NatAddrMappingJobj, "LocalEndIP")))
+						|| !validateIPv4(json_object_get_string(json_object_object_get(NatAddrMappingJobj, "GlobalStartIP")))) {
+				if(replyMsg != NULL)
+					strcat(replyMsg, "(ipv4 format error)");
+				zcfgFeJsonObjFree(NatAddrMappingJobj);
+				return ZCFG_INVALID_PARAM_VALUE;
+			}
+			if (strcmp("0.0.0.0", json_object_get_string(json_object_object_get(NatAddrMappingJobj, "LocalStartIP")))==0) {
+				if(replyMsg != NULL)
+					strcat(replyMsg, "LocalStartIP error");
+				zcfgFeJsonObjFree(NatAddrMappingJobj);
+				return ZCFG_INVALID_PARAM_VALUE;
+			}
+			if (strcmp("0.0.0.0", json_object_get_string(json_object_object_get(NatAddrMappingJobj, "LocalEndIP")))==0) {
+				if(replyMsg != NULL)
+					strcat(replyMsg, "LocalEndIP error");
+				zcfgFeJsonObjFree(NatAddrMappingJobj);
+				return ZCFG_INVALID_PARAM_VALUE;
+			}
+			if (strcmp("0.0.0.0", json_object_get_string(json_object_object_get(NatAddrMappingJobj, "GlobalStartIP")))==0) {
+				if(replyMsg != NULL)
+					strcat(replyMsg, "GlobalStartIP error");
+				zcfgFeJsonObjFree(NatAddrMappingJobj);
+				return ZCFG_INVALID_PARAM_VALUE;
+			}
+
+			if (ip4Compare(json_object_get_string(json_object_object_get(NatAddrMappingJobj, "LocalStartIP")), json_object_get_string(json_object_object_get(NatAddrMappingJobj, "LocalEndIP")))!=1) {
+				if(replyMsg != NULL)
+					strcat(replyMsg, "Local IP range is invalid");
+				zcfgFeJsonObjFree(NatAddrMappingJobj);
+				return ZCFG_INVALID_PARAM_VALUE;
+			}
+		}
+		else if (strcmp("Many-to-Many", type) == 0) {
+			if (!validateIPv4(json_object_get_string(json_object_object_get(NatAddrMappingJobj, "LocalStartIP")))
+						|| !validateIPv4(json_object_get_string(json_object_object_get(NatAddrMappingJobj, "LocalEndIP")))
+						|| !validateIPv4(json_object_get_string(json_object_object_get(NatAddrMappingJobj, "GlobalStartIP")))
+						|| !validateIPv4(json_object_get_string(json_object_object_get(NatAddrMappingJobj, "GlobalEndIP")))) {
+				if(replyMsg != NULL)
+					strcat(replyMsg, "(ipv4 format error)");
+				zcfgFeJsonObjFree(NatAddrMappingJobj);
+				return ZCFG_INVALID_PARAM_VALUE;
+			}
+			if (strcmp("0.0.0.0", json_object_get_string(json_object_object_get(NatAddrMappingJobj, "LocalStartIP")))==0) {
+				if(replyMsg != NULL)
+					strcat(replyMsg, "LocalStartIP error");
+				zcfgFeJsonObjFree(NatAddrMappingJobj);
+				return ZCFG_INVALID_PARAM_VALUE;
+			}
+			if (strcmp("0.0.0.0", json_object_get_string(json_object_object_get(NatAddrMappingJobj, "LocalEndIP")))==0) {
+				if(replyMsg != NULL)
+					strcat(replyMsg, "LocalEndIP error");
+				zcfgFeJsonObjFree(NatAddrMappingJobj);
+				return ZCFG_INVALID_PARAM_VALUE;
+			}
+			if (strcmp("0.0.0.0", json_object_get_string(json_object_object_get(NatAddrMappingJobj, "GlobalStartIP")))==0) {
+				if(replyMsg != NULL)
+					strcat(replyMsg, "GlobalStartIP error");
+				zcfgFeJsonObjFree(NatAddrMappingJobj);
+				return ZCFG_INVALID_PARAM_VALUE;
+			}
+			if (strcmp("0.0.0.0", json_object_get_string(json_object_object_get(NatAddrMappingJobj, "GlobalEndIP")))==0) {
+				if(replyMsg != NULL)
+					strcat(replyMsg, "GlobalEndIP error");
+				zcfgFeJsonObjFree(NatAddrMappingJobj);
+				return ZCFG_INVALID_PARAM_VALUE;
+			}
+			if (ip4Compare(json_object_get_string(json_object_object_get(NatAddrMappingJobj, "LocalStartIP")), json_object_get_string(json_object_object_get(NatAddrMappingJobj, "LocalEndIP")))!=1) {
+				if(replyMsg != NULL)
+					strcat(replyMsg, "Local IP range is invalid");
+				zcfgFeJsonObjFree(NatAddrMappingJobj);
+				return ZCFG_INVALID_PARAM_VALUE;
+			}
+			if (ip4Compare(json_object_get_string(json_object_object_get(NatAddrMappingJobj, "GlobalStartIP")), json_object_get_string(json_object_object_get(NatAddrMappingJobj, "GlobalEndIP")))!=1) {
+				if(replyMsg != NULL)
+					strcat(replyMsg, "Global IP range is invalid");
+				zcfgFeJsonObjFree(NatAddrMappingJobj);
+				return ZCFG_INVALID_PARAM_VALUE;
 	}
-	json_object_put(NatAddrMappingJobj);
+		}
+		else {
+			if(replyMsg != NULL)
+				strcat(replyMsg, "Type error");
+			zcfgFeJsonObjFree(NatAddrMappingJobj);
+			return ZCFG_INVALID_PARAM_VALUE;
+		}
+
+		if((ret = zcfgFeObjJsonSet(RDM_OID_NAT_ADDR_MAPPING, &objIid, NatAddrMappingJobj, NULL)) != ZCFG_SUCCESS) {
+			if(replyMsg != NULL)
+				strcat(replyMsg, "Internal error");
+		}
+	}
+	zcfgFeJsonObjFree(NatAddrMappingJobj);
 	return ret;
 }
 zcfgRet_t zcfgFeDalNatAddrMappingDelete(struct json_object *Jobj, char *replyMsg){
@@ -109,21 +290,92 @@
 	struct json_object *iidArray = NULL;
 	uint8_t iidIdx =0;
 
-	
-	//IID_INIT(objIid);
-	iidArray = json_object_object_get(Jobj, "iid");
-	
+	IID_INIT(objIid);
+	if (iidArray = json_object_object_get(Jobj, "iid")) {
 	for(iidIdx=0;iidIdx<6;iidIdx++){
 		objIid.idx[iidIdx] = json_object_get_int( json_object_array_get_idx(iidArray, iidIdx));
 		if(objIid.idx[iidIdx] != 0)
 			objIid.level = iidIdx+1;
 	}
+	} else if (iidArray = json_object_object_get(Jobj, "Index")) {
+		objIid.level = 1;
+		objIid.idx[0] = json_object_get_int(iidArray);
+		json_object_object_del(Jobj, "Index");
+	}
+	else {
+		if(replyMsg != NULL)
+			strcat(replyMsg, "internal error");
+		return ZCFG_INTERNAL_ERROR;
+	}
 	
 	zcfgFeObjJsonDel(RDM_OID_NAT_ADDR_MAPPING, &objIid, NULL);
 	
 	return ret;
 	
 }
+
+void zcfgFeDalShowAddrMapping(struct json_object *Jarray){
+	int i, len = 0;
+	struct json_object *obj;
+
+	if(json_object_get_type(Jarray) != json_type_array){
+		printf("wrong Jobj format!\n");
+		return;
+	}
+
+	printf("%-5s %-15s %-15s %-15s %-15s %-15s %-15s %-15s\n",
+		    "Index", "MappingRuleName", "Interface", "Type", "LocalStartIP", "LocalEndIP", "GlobalStartIP", "GlobalEndIP");
+	len = json_object_array_length(Jarray);
+	for(i=0;i<len;i++){
+		obj = json_object_array_get_idx(Jarray, i);
+		printf("%-5s %-15s %-15s %-15s %-15s %-15s %-15s %-15s\n",
+			json_object_get_string(json_object_object_get(obj, "Index")),
+			json_object_get_string(json_object_object_get(obj, "MappingRuleName")),
+			json_object_get_string(json_object_object_get(obj, "Interface")),
+			json_object_get_string(json_object_object_get(obj, "Type")),
+			json_object_get_string(json_object_object_get(obj, "LocalStartIP")),
+			json_object_get_string(json_object_object_get(obj, "LocalEndIP")),
+			json_object_get_string(json_object_object_get(obj, "GlobalStartIP")),
+			json_object_get_string(json_object_object_get(obj, "GlobalEndIP")));
+	}
+}
+
+zcfgRet_t zcfgFeDalNatAddrMappingGet(struct json_object *Jobj, char *replyMsg)
+{
+	struct json_object *NatAddrMappingJobj = NULL;
+	struct json_object *paramJobj = NULL;
+	objIndex_t objIid = {0};
+	int index = 0;
+//	char *srvName;
+
+	IID_INIT(objIid);
+	while(zcfgFeObjJsonGetNext(RDM_OID_NAT_ADDR_MAPPING, &objIid, &NatAddrMappingJobj) == ZCFG_SUCCESS) {
+		++index;
+		paramJobj = json_object_new_object();
+		json_object_object_add(paramJobj, "Enable", JSON_OBJ_COPY(json_object_object_get(NatAddrMappingJobj, "Enable")));
+		json_object_object_add(paramJobj, "Type", JSON_OBJ_COPY(json_object_object_get(NatAddrMappingJobj, "Type")));
+		json_object_object_add(paramJobj, "LocalStartIP", JSON_OBJ_COPY(json_object_object_get(NatAddrMappingJobj, "LocalStartIP")));
+		json_object_object_add(paramJobj, "LocalEndIP", JSON_OBJ_COPY(json_object_object_get(NatAddrMappingJobj, "LocalEndIP")));
+		json_object_object_add(paramJobj, "GlobalStartIP", JSON_OBJ_COPY(json_object_object_get(NatAddrMappingJobj, "GlobalStartIP")));
+		json_object_object_add(paramJobj, "GlobalEndIP", JSON_OBJ_COPY(json_object_object_get(NatAddrMappingJobj, "GlobalEndIP")));
+		json_object_object_add(paramJobj, "MappingSet", JSON_OBJ_COPY(json_object_object_get(NatAddrMappingJobj, "MappingSet")));
+		json_object_object_add(paramJobj, "MappingRuleName", JSON_OBJ_COPY(json_object_object_get(NatAddrMappingJobj, "MappingRuleName")));
+		json_object_object_add(paramJobj, "Description", JSON_OBJ_COPY(json_object_object_get(NatAddrMappingJobj, "Description")));
+		json_object_object_add(paramJobj, "WANIntfName", JSON_OBJ_COPY(json_object_object_get(NatAddrMappingJobj, "WANIntfName")));
+
+//		srvName = getIPInterfaceSrvName(json_object_get_string(json_object_object_get(NatAddrMappingJobj, "Interface")));
+//		if (srvName)
+//			json_object_object_add(paramJobj, "Interface", json_object_new_string(srvName));
+//		else
+			json_object_object_add(paramJobj, "Interface", JSON_OBJ_COPY(json_object_object_get(NatAddrMappingJobj, "Interface")));
+		json_object_object_add(paramJobj, "Index", json_object_new_int(index));
+		json_object_array_add(Jobj, paramJobj);
+		zcfgFeJsonObjFree(NatAddrMappingJobj);
+	}
+	return ZCFG_SUCCESS;
+	
+}
+
 zcfgRet_t zcfgFeDalNatAddrMapping(const char *method, struct json_object *Jobj, char *replyMsg)
 {
 	zcfgRet_t ret = ZCFG_SUCCESS;
@@ -132,13 +384,16 @@
 		return ZCFG_INTERNAL_ERROR;
 
 	if(!strcmp(method, "PUT")) {
-		ret = zcfgFeDalNatAddrMappingEdit(Jobj, NULL);
+		ret = zcfgFeDalNatAddrMappingEdit(Jobj, replyMsg);
 	}
 	else if(!strcmp(method, "POST")) {
 		ret = zcfgFeDalNatAddrMappingAdd(Jobj, replyMsg);
 	}
 	else if(!strcmp(method, "DELETE")) {
-		ret = zcfgFeDalNatAddrMappingDelete(Jobj, NULL);
+		ret = zcfgFeDalNatAddrMappingDelete(Jobj, replyMsg);
+	}
+	else if(!strcmp(method, "GET")){
+		ret = zcfgFeDalNatAddrMappingGet(Jobj, replyMsg);
 	}
 
 	return ret;
Index: libzcfg_fe_dal-1.0/network/nat/zcfg_fe_dal_nat_port_triggering.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/network/nat/zcfg_fe_dal_nat_port_triggering.c	2017-07-03 19:31:21.237482450 +0800
+++ libzcfg_fe_dal-1.0/network/nat/zcfg_fe_dal_nat_port_triggering.c	2017-07-03 19:44:59.896863053 +0800
@@ -13,7 +13,7 @@
 dal_param_t NAT_PORT_TRIGGERING_param[] =
 {
 	{"Index",				dalType_int,			0,	0,		NULL,	NULL,			dal_Edit|dal_Delete},
-	{"Enable",			dalType_boolean,		0,	0,		NULL,	NULL,			0},
+	{"Enable",			dalType_boolean,		0,	0,		NULL,	NULL,			dal_Add},
 	{"Description",		dalType_string,		1,	256,		NULL,	NULL,			dal_Add},
 	{"Interface",			dalType_RtWanWWan,	0,	0,		NULL,	NULL,			dal_Add},
 	{"TriggerPortStart",	dalType_int,			1,	65535,	NULL,	NULL,			dal_Add},
@@ -281,13 +281,13 @@
 		return ZCFG_INTERNAL_ERROR;
 
 	if(!strcmp(method, "PUT")) {
-		ret = zcfgFeDalNatPortTriggeringEdit(Jobj, NULL);
+		ret = zcfgFeDalNatPortTriggeringEdit(Jobj, replyMsg);
 	}
 	else if(!strcmp(method, "POST")) {
 		ret = zcfgFeDalNatPortTriggeringAdd(Jobj, replyMsg);
 	}
 	else if(!strcmp(method, "DELETE")) {
-		ret = zcfgFeDalNatPortTriggeringDelete(Jobj, NULL);
+		ret = zcfgFeDalNatPortTriggeringDelete(Jobj, replyMsg);
 	}
 	else if(!strcmp(method, "GET")){
 		ret = zcfgFeDalNatPortTriggeringGet(Jobj, replyMsg);
Index: libzcfg_fe_dal-1.0/zcfg_fe_dal.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/zcfg_fe_dal.c	2017-07-03 19:31:21.249482450 +0800
+++ libzcfg_fe_dal-1.0/zcfg_fe_dal.c	2017-07-03 19:44:06.049611115 +0800
@@ -169,6 +169,7 @@
 extern void zcfgFeDalShowSPMgmtSrv(struct json_object *Jarray);
 extern void zcfgFeDalShowPortFwd(struct json_object *Jarray);
 extern void zcfgFeDalShowPortTrigger(struct json_object *Jarray);
+extern void zcfgFeDalShowAddrMapping(struct json_object *Jarray);
 extern void zcfgFeDalShowNetworkMAP(struct json_object *Jarray);
 extern void zcfgFeDalShowEthCtl(struct json_object *Jarray);
 extern void zcfgFeDalShowFirewallACL(struct json_object *Jarray);
@@ -221,7 +222,7 @@
 {"nat",				NatPortFwd_param,	zcfgFeDalNatPortMapping,zcfgFeDalShowPortFwd,		"get|add|edit|delete", "NAT"},
 {"nat_trigger",NAT_PORT_TRIGGERING_param,zcfgFeDalNatPortTriggering,zcfgFeDalShowPortTrigger,			"get|add|edit|delete", 	"NAT"}, //NAT
 {"NAT_DMZ_ALG",		NAT_DMZ_ALG_param,	zcfgFeDalNatDMZALG, 	NULL,						"edit",				""}, //NAT
-{"NAT_ADDR_MAPPING",NAT_ADDR_MAPPING_param,	zcfgFeDalNatAddrMapping,NULL,					"add|edit|delete",	 ""}, //NAT
+{"nat_addr_map",NAT_ADDR_MAPPING_param,	zcfgFeDalNatAddrMapping,zcfgFeDalShowAddrMapping,	"get|add|edit|delete",	 "NAT"}, //NAT
 {"NAT_SESSION_CTL", NAT_SESSION_CTL_param,	zcfgFeDalNatSessionCtl,NULL,					"edit",				""}, //NAT
 {"NAT_APPLICATION",NAT_Application_param,	zcfgFeDalNatApplication,NULL,					"add|delete",		""}, //NAT
 {"intf_group",		IntfGrp_param,		zcfgFeDalIntrGrp,		zcfgFeDalShowIntrGrp,		"add|edit|delete|get",	"Interface_Grouping"},//
@@ -1131,3 +1132,43 @@
 	return res;
 }
 
+/*
+Function Name: ip4Compare
+Description  : Compare 2 IP strings
+Returns      : 0 (ip1 = ip2), 1 (ip1 < ip2), 2 (ip1 > ip2), -1 error*/
+int ip4Compare(char *ip1, char *ip2)
+{
+	int i, ret=0;
+	char ipaddr1[20] = {0}, ipaddr2[20] = {0};
+	int ip11=0,ip12=0,ip13=0,ip14=0;
+	int ip21=0,ip22=0,ip23=0,ip24=0;
+	
+	if (ip1==NULL || ip2==NULL)
+		return -1;
+
+	strcpy(ipaddr1, ip1);
+	strcpy(ipaddr2, ip2);
+	sscanf(ipaddr1, "%d.%d.%d.%d", &ip11, &ip12, &ip13, &ip14);
+	sscanf(ipaddr2, "%d.%d.%d.%d", &ip21, &ip22, &ip23, &ip24);
+
+	if (ip11<ip21)
+		return 1;
+	else if (ip11>ip21)
+		return 2;
+
+	if (ip12<ip22)
+		return 1;
+	else if (ip12>ip22)
+		return 2;
+
+	if (ip13<ip23)
+		return 1;
+	else if (ip13>ip23)
+		return 2;
+
+	if (ip14<ip24)
+		return 1;
+	else if (ip14>ip24)
+		return 2;
+	return 0;
+}
