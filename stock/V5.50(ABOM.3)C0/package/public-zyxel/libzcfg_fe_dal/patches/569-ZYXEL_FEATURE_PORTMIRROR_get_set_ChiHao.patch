Index: libzcfg_fe_dal-1.0/js/zcfg_fe_dal_portmirror.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/js/zcfg_fe_dal_portmirror.c	2018-05-31 14:19:23.016537373 +0800
+++ libzcfg_fe_dal-1.0/js/zcfg_fe_dal_portmirror.c	2018-05-31 14:27:44.364408657 +0800
@@ -14,12 +14,47 @@
 #include "zcfg_fe_dal_common.h"
 
 dal_param_t PORT_MIRROR_param[]={		
-	{"Mirror_Interface", 	 dalType_string,	0,	0,	NULL},
-	{"Port_Mirror_Enable", 	 dalType_boolean,	0,	0,	NULL},
-	{"Log_Enable", 	 dalType_boolean,	0,	0,	NULL},
+	{"Index", 	 				dalType_int,	0,	0,	NULL},
+	{"LanPort", 	 dalType_string,	0,	0,	NULL,"LAN1|LAN2|LAN3|LAN4",0},
+	{"Status", 	 dalType_boolean,	0,	0,	NULL},
+	{"ZCFG_LOG_Enable", 	 dalType_boolean,	0,	0,	NULL},
 	{NULL,					0,	0,	0,	NULL},
 
 };
+void zcfgFeDalShowPORT_MIRROR(struct json_object *Jarray){
+	int i, len = 0;
+	struct json_object *obj,*obj2,*obj3;
+	int Index;
+	const char *Interface,*Direction, *LanPort,*Status;
+	
+	if(json_object_get_type(Jarray) != json_type_array){
+		printf("wrong Jobj format!\n");
+		return;
+	}	
+	obj = json_object_array_get_idx(Jarray, 0);
+	obj2 = json_object_object_get(obj, "portmirror");
+	
+	printf("%-7s %-10s %-12s %-10s %-10s\n",
+		    "Index","Interface","Direction","LanPort","Status");
+ 		
+	len = json_object_array_length(obj2);
+	for(i=0;i<len;i++){
+		obj3 = json_object_array_get_idx(obj2, i);
+		if(obj3 != NULL){
+			Index = json_object_get_int(json_object_object_get(obj3, "Index"));
+			Interface = json_object_get_string(json_object_object_get(obj3, "MonitorInterface"));
+			Direction = json_object_get_string(json_object_object_get(obj3, "Direction"));
+			LanPort = json_object_get_string(json_object_object_get(obj3, "LanPort"));
+			Status = json_object_get_string(json_object_object_get(obj3, "Status"));
+
+			printf("%-7d %-10s %-12s %-10s %-10s\n",Index,Interface,Direction,LanPort,Status);
+		}
+	}	
+ }
+
+
+
+
 
 zcfgRet_t zcfgFeDal_PortMirror_Edit(struct json_object *Jobj, char *replyMsg){
 	zcfgRet_t ret = ZCFG_SUCCESS;
@@ -27,21 +62,19 @@
 	objIndex_t ethIid = {0};
 	objIndex_t portMirrorIid = {0};
 	objIndex_t logIid = {0};
-	int len = 0, i;
+	int len = 0, i,index;
 	const char *LanPort = NULL, *ethName = NULL;
 	char buff[5] = {0};
 	bool status = false, log_enable = false, *loginlevel = NULL;
-	loginInfo = obj = json_object_array_get_idx(Jobj, 0);
-	loginlevel = json_object_get_string(json_object_object_get(loginInfo, "DAL_LOGIN_LEVEL"));
-	if(strcmp(loginlevel, "high")){
-		json_object_object_add(Jobj, "__multi_lang_replyMsg", json_object_new_string("zylang.PortMirror.login_privilege_high"));
-		return ZCFG_INVALID_PARAM_VALUE;
-	}
-	len = json_object_array_length(Jobj);
-	for(i=0; i<len-1; i++) {
-		obj = json_object_array_get_idx(Jobj, i);
-		LanPort = json_object_get_string(json_object_object_get(obj, "LanPort"));
-		IID_INIT(ethIid);
+
+	if(json_object_get_type(Jobj) == json_type_object){			//for CLI...
+		index = json_object_get_int(json_object_object_get(Jobj, "Index"));
+		loginlevel = json_object_get_string(json_object_object_get(Jobj, "DAL_LOGIN_LEVEL"));
+		if(strcmp(loginlevel, "high")){
+			json_object_object_add(Jobj, "__multi_lang_replyMsg", json_object_new_string("zylang.PortMirror.login_privilege_high"));
+			return ZCFG_INVALID_PARAM_VALUE;
+		}
+		LanPort = json_object_get_string(json_object_object_get(Jobj, "LanPort"));
 		while(zcfgFeObjJsonGetNext(RDM_OID_ETH_IFACE, &ethIid, &ethObj) == ZCFG_SUCCESS) {
 			if(!strcmp(LanPort, json_object_get_string(json_object_object_get(ethObj, "X_ZYXEL_LanPort")))) {
 				ethName = json_object_get_string(json_object_object_get(ethObj, "Name"));
@@ -51,24 +84,66 @@
 			}
 			zcfgFeJsonObjFree(ethObj);
 		}
-		status = json_object_get_boolean(json_object_object_get(obj, "Status"));
+		status = json_object_get_boolean(json_object_object_get(Jobj, "Status"));
 		portMirrorIid.level = 1;
-		portMirrorIid.idx[0] = i + 1;
+		portMirrorIid.idx[0] = index;
 		if(zcfgFeObjJsonGet(RDM_OID_PORT_MIRROR, &portMirrorIid, &portMirrorObj) == ZCFG_SUCCESS) {
 			json_object_object_add(portMirrorObj, "MirrorInterface", json_object_new_string(buff));
 			json_object_object_add(portMirrorObj, "Status", json_object_new_boolean(status));
 			zcfgFeObjJsonSet(RDM_OID_PORT_MIRROR, &portMirrorIid, portMirrorObj, NULL);
             zcfgFeJsonObjFree(portMirrorObj);
 		}
-	}
-	log_obj = json_object_array_get_idx(Jobj, len-1);
-	log_enable = json_object_get_boolean(json_object_object_get(log_obj, "Log_Enable"));
-	if(zcfgFeObjJsonGet(RDM_OID_LOG_SETTING, &logIid, &logObj) == ZCFG_SUCCESS) {
-		json_object_object_add(logObj, "ZCFG_LOG_Enable", json_object_new_boolean(log_enable));
 
-		zcfgFeObjJsonSet(RDM_OID_LOG_SETTING, &logIid, logObj, NULL);
-        zcfgFeJsonObjFree(logObj);
+	
+		log_enable = json_object_get_boolean(json_object_object_get(Jobj, "ZCFG_LOG_Enable"));
+		if(zcfgFeObjJsonGet(RDM_OID_LOG_SETTING, &logIid, &logObj) == ZCFG_SUCCESS) {
+			json_object_object_add(logObj, "ZCFG_LOG_Enable", json_object_new_boolean(log_enable));
+
+			zcfgFeObjJsonSet(RDM_OID_LOG_SETTING, &logIid, logObj, NULL);
+	        zcfgFeJsonObjFree(logObj);
+		}
 	}
+	else{
+		
+		loginInfo = obj = json_object_array_get_idx(Jobj, 0);
+		loginlevel = json_object_get_string(json_object_object_get(loginInfo, "DAL_LOGIN_LEVEL"));
+		if(strcmp(loginlevel, "high")){
+			json_object_object_add(Jobj, "__multi_lang_replyMsg", json_object_new_string("zylang.PortMirror.login_privilege_high"));
+			return ZCFG_INVALID_PARAM_VALUE;
+		}
+		len = json_object_array_length(Jobj);
+		for(i=0; i<len-1; i++) {
+			obj = json_object_array_get_idx(Jobj, i);
+			LanPort = json_object_get_string(json_object_object_get(obj, "LanPort"));
+			IID_INIT(ethIid);
+			while(zcfgFeObjJsonGetNext(RDM_OID_ETH_IFACE, &ethIid, &ethObj) == ZCFG_SUCCESS) {
+				if(!strcmp(LanPort, json_object_get_string(json_object_object_get(ethObj, "X_ZYXEL_LanPort")))) {
+					ethName = json_object_get_string(json_object_object_get(ethObj, "Name"));
+					strcpy(buff, ethName);
+					zcfgFeJsonObjFree(ethObj);
+					break;
+				}
+				zcfgFeJsonObjFree(ethObj);
+			}
+			status = json_object_get_boolean(json_object_object_get(obj, "Status"));
+			portMirrorIid.level = 1;
+			portMirrorIid.idx[0] = i + 1;
+			if(zcfgFeObjJsonGet(RDM_OID_PORT_MIRROR, &portMirrorIid, &portMirrorObj) == ZCFG_SUCCESS) {
+				json_object_object_add(portMirrorObj, "MirrorInterface", json_object_new_string(buff));
+				json_object_object_add(portMirrorObj, "Status", json_object_new_boolean(status));
+				zcfgFeObjJsonSet(RDM_OID_PORT_MIRROR, &portMirrorIid, portMirrorObj, NULL);
+				zcfgFeJsonObjFree(portMirrorObj);
+			}
+		}
+		log_obj = json_object_array_get_idx(Jobj, len-1);
+		log_enable = json_object_get_boolean(json_object_object_get(log_obj, "Log_Enable"));
+		if(zcfgFeObjJsonGet(RDM_OID_LOG_SETTING, &logIid, &logObj) == ZCFG_SUCCESS) {
+			json_object_object_add(logObj, "ZCFG_LOG_Enable", json_object_new_boolean(log_enable));
+			zcfgFeObjJsonSet(RDM_OID_LOG_SETTING, &logIid, logObj, NULL);
+			zcfgFeJsonObjFree(logObj);
+		}
+		
+	}	
 	return ret;
 }
 
@@ -81,17 +156,21 @@
 	const char *mirrorIntf = NULL, *ethName = NULL, *LanPort = NULL, *loginlevel = NULL;
 	bool direction = false;
 
+	
 	loginlevel = json_object_get_string(json_object_object_get(Jobj, "DAL_LOGIN_LEVEL"));
 	if(strcmp(loginlevel, "high")){
 		json_object_object_add(Jobj, "__multi_lang_replyMsg", json_object_new_string("zylang.PortMirror.login_privilege_high"));
 		return ZCFG_INVALID_PARAM_VALUE;
 	}
-	
 	port_mirror_array = json_object_new_array();
 	tmp_array = json_object_new_object();
 	json_object_array_add(Jarray, tmp_array);
+			
 	while(zcfgFeObjJsonGetNext(RDM_OID_PORT_MIRROR, &iid, &obj) == ZCFG_SUCCESS){
 		paramJobj = json_object_new_object();
+		
+		json_object_object_add(paramJobj, "Index", json_object_new_int(iid.idx[0]));
+		
 		mirrorIntf = json_object_get_string(json_object_object_get(obj, "MirrorInterface"));
 		IID_INIT(ethIid);
 		while(zcfgFeObjJsonGetNext(RDM_OID_ETH_IFACE, &ethIid, &ethObj) == ZCFG_SUCCESS){
@@ -124,6 +203,9 @@
 		json_object_object_add(tmp_array, "logSetting", logObj);	
 	}
 	json_object_object_add(tmp_array, "portmirror", port_mirror_array);		
+
+
+	
 	return ret;
 }
 
@@ -141,3 +223,7 @@
 	return ret;
 }
 
+
+
+
+
Index: libzcfg_fe_dal-1.0/zcfg_fe_dal.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/zcfg_fe_dal.c	2018-05-31 14:19:23.048537373 +0800
+++ libzcfg_fe_dal-1.0/zcfg_fe_dal.c	2018-05-31 14:27:46.443234432 +0800
@@ -273,6 +273,7 @@
 extern void zcfgFeDalShowEthWanLan(struct json_object *Jarray);
 extern void zcfgFeDalShowWlanScheduler(struct json_object *Jarray);
 extern void zcfgFeDalShowWlanSchAccess(struct json_object *Jarray);
+extern void zcfgFeDalShowPORT_MIRROR(struct json_object *Jarray);
 
 
 dal_handler_t dalHandler[] = {
@@ -364,7 +365,7 @@
 //Monitor
 {"Traffic_Status", Traffic_Status_param, zcfgFeDalTrafficStatus, 	NULL,						"get", 				""},
 {"VOIP_Status", VOIP_Status_param, zcfgFeDalVoIPStatus, 	NULL,						"get", 				""},
-{"port_mirror", PORT_MIRROR_param, zcfgFeDalPortMirror, 	NULL,						"edit",				""},
+{"port_mirror", PORT_MIRROR_param, zcfgFeDalPortMirror, 	zcfgFeDalShowPORT_MIRROR,						"edit|get",				"Status"},
 {"sensor", 		SENSOR_param, zcfgFeDalSensor, 				NULL,						"edit", 			""},
 
 //#ifdef CBT_CUSTOMIZATION // 20170711 Max Add
