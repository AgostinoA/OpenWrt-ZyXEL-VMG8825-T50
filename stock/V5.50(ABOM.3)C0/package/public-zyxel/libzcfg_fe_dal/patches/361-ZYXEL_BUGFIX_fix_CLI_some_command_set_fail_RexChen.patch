Index: libzcfg_fe_dal-1.0/maintenance/useraccount/zcfg_fe_dal_user_account.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/maintenance/useraccount/zcfg_fe_dal_user_account.c	2017-10-25 11:40:18.327759397 +0800
+++ libzcfg_fe_dal-1.0/maintenance/useraccount/zcfg_fe_dal_user_account.c	2017-10-25 11:40:18.423759397 +0800
@@ -23,7 +23,7 @@
     {"FirstIndex",			dalType_int,	 1, 	3,		NULL,	NULL,	dalcmd_Forbid}, // group index 
     {"SecondIndex", 		dalType_int,	 1, 	4,		NULL,	NULL,	dalcmd_Forbid}, // account index
 	{"Enabled", 			dalType_boolean, 0, 	0,		NULL,	NULL,	0}, //default true
-	{"EnableQuickStart",	dalType_boolean, 0, 	0,		NULL,	NULL,	0}, //default value based on schema.json
+	{"EnableQuickStart",	dalType_boolean, 0, 	0,		NULL,	NULL,	dalcmd_Forbid}, //default value based on schema.json
 	{"oldPw",				dalType_string,  0, 	0,		NULL,	NULL,	dal_Add_ignore},
 	{"Password",			dalType_string,  0, 	0,		NULL,	NULL,	dal_Add},
 	{"verifyNewpassword",	dalType_string,  0, 	0,		NULL,	NULL,	dal_Add},
Index: libzcfg_fe_dal-1.0/network/broadband/zcfg_fe_dal_advance.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/network/broadband/zcfg_fe_dal_advance.c	2017-10-25 11:40:17.991759395 +0800
+++ libzcfg_fe_dal-1.0/network/broadband/zcfg_fe_dal_advance.c	2017-10-25 11:39:00.631868200 +0800
@@ -59,7 +59,7 @@
 int kXdsl24kbyteInterleavingEnabled = 1048576;	//100000000000000000000
 
 zcfgRet_t praseAdslModulationCfg(char *key1, char *key2, char *key3, struct json_object *JsonCfg){
-	if(strstr(key1, key3) != NULL)
+	if(strstr(key1, key2) != NULL || strstr(key1, key3) != NULL)
 		json_object_object_add(JsonCfg, key2, json_object_new_boolean(true));
 	else if(!strcmp(key1,"ADSL_Modulation_All,"))
 		json_object_object_add(JsonCfg, key2, json_object_new_boolean(true));
@@ -83,7 +83,6 @@
 		printf("wrong Jobj format!\n");
 		return;
 	}
-	printf("Jarray = %s \n",json_object_to_json_string(Jarray));
 	obj = json_object_array_get_idx(Jarray, 0);
 	printf("DSL Capacities: \n");
 #ifdef CONFIG_TARGET_en75xx
@@ -337,6 +336,7 @@
 	const char *SRA = NULL;
 	const char *dslType = NULL;
 	int len = 0;
+	char tmpAdslModCfg[256] = {0};
 	paramJobj = json_object_new_object();
 	advPtmLinkIid.level = 1;
 	advPtmLinkIid.idx[0] = 1;
@@ -381,20 +381,22 @@
 #endif
 		AdslModCfg = json_object_get_string(json_object_object_get(advDSLLineObj, "X_ZYXEL_AdslModulationCfg"));
 		len = strlen(AdslModCfg);
-		if(AdslModCfg[len] != ',')
-			AdslModCfg[len] = ',';
-		if(strcmp(AdslModCfg,"ADSL_Modulation_All,")){
-		praseAdslModulationCfg(AdslModCfg, "Gdmt", "ADSL_G.dmt,", paramJobj);
-		praseAdslModulationCfg(AdslModCfg, "Glite", "ADSL_G.lite,", paramJobj);
-		praseAdslModulationCfg(AdslModCfg, "T1413", "ADSL_ANSI_T1.413,", paramJobj);
-		praseAdslModulationCfg(AdslModCfg, "AnnexL", "ADSL_re-adsl,", paramJobj);
-		praseAdslModulationCfg(AdslModCfg, "ADSL2", "ADSL_G.dmt.bis,", paramJobj);
+		if(AdslModCfg[len] != ','){
+			strcat(tmpAdslModCfg,AdslModCfg);
+			strcat(tmpAdslModCfg,",");
+		}
+		if(strcmp(tmpAdslModCfg,"ADSL_Modulation_All,")){
+			praseAdslModulationCfg(AdslModCfg, "Gdmt", "ADSL_G.dmt,", paramJobj);
+			praseAdslModulationCfg(AdslModCfg, "Glite", "ADSL_G.lite,", paramJobj);
+			praseAdslModulationCfg(AdslModCfg, "T1413", "ADSL_ANSI_T1.413,", paramJobj);
+			praseAdslModulationCfg(AdslModCfg, "AnnexL", "ADSL_re-adsl,", paramJobj);
+			praseAdslModulationCfg(AdslModCfg, "ADSL2", "ADSL_G.dmt.bis,", paramJobj);
 #ifdef CONFIG_ZYXEL_DSL_SUPPORT_ANNEX_B
-		praseAdslModulationCfg(AdslModCfg, "AnnexB", "ADSL_over_ISDN,", paramJobj);	//EN75XX_DSL_AnnexB
+			praseAdslModulationCfg(AdslModCfg, "AnnexB", "ADSL_over_ISDN,", paramJobj);	//EN75XX_DSL_AnnexB
 #endif
-		praseAdslModulationCfg(AdslModCfg, "ADSL2plus", "ADSL_2plus,", paramJobj);
-		praseAdslModulationCfg(AdslModCfg, "AnnexM", "AnnexM,", paramJobj);
-		praseAdslModulationCfg(AdslModCfg, "VDSL2", "VDSL2,", paramJobj);
+			praseAdslModulationCfg(AdslModCfg, "ADSL2plus", "ADSL_2plus,", paramJobj);
+			praseAdslModulationCfg(AdslModCfg, "AnnexM", "AnnexM,", paramJobj);
+			praseAdslModulationCfg(AdslModCfg, "VDSL2", "VDSL2,", paramJobj);
 		}
 		else{
 			json_object_object_add(paramJobj, "Gdmt", json_object_new_boolean(true));
Index: libzcfg_fe_dal-1.0/network/broadband/zcfg_fe_dal_broadband.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/network/broadband/zcfg_fe_dal_broadband.c	2017-10-25 11:40:18.415759397 +0800
+++ libzcfg_fe_dal-1.0/network/broadband/zcfg_fe_dal_broadband.c	2017-10-25 11:40:18.427759397 +0800
@@ -2328,6 +2328,7 @@
 	zcfgRet_t ret = ZCFG_SUCCESS;
 	struct json_object *pramJobj = NULL;
 	bool pppStatic = false;
+	int idleDisconnectTime = NULL;
 #ifdef ISKON_CUSTOMIZATION //Adam
 	int mark;
 #endif
@@ -2378,7 +2379,10 @@
 	replaceParam(pppIfaceObj, "Password", Jobj, "pppPassword");
 	replaceParam(pppIfaceObj, "MaxMRUSize", Jobj, "MaxMTUSize");
 	replaceParam(pppIfaceObj, "ConnectionTrigger", Jobj, "ConnectionTrigger");
-	replaceParam(pppIfaceObj, "IdleDisconnectTime", Jobj, "IdleDisconnectTime");
+	idleDisconnectTime = json_object_get_int(json_object_object_get(Jobj, "IdleDisconnectTime"));
+	if(json_object_object_get(Jobj, "IdleDisconnectTime")){
+		json_object_object_add(pppIfaceObj, "IdleDisconnectTime", json_object_new_int(60*idleDisconnectTime));
+	}
 	if(json_object_get_boolean(json_object_object_get(Jobj, "pppoePassThrough")) == true)
 		json_object_object_add(pppIfaceObj, "X_ZYXEL_ConnectionType", json_object_new_string("PPPoE_Bridged"));
 	else
Index: libzcfg_fe_dal-1.0/voip/sip/zcfg_fe_dal_sip_account.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/voip/sip/zcfg_fe_dal_sip_account.c	2017-10-25 11:40:17.999759395 +0800
+++ libzcfg_fe_dal-1.0/voip/sip/zcfg_fe_dal_sip_account.c	2017-10-25 11:40:18.427759397 +0800
@@ -1436,7 +1436,7 @@
 	int len = 0, i, count = 0;
 	obj = json_object_new_array();
 	if(json_object_get_string(json_object_object_get(Jobj, "ServiceProviderName"))){
-		ret = zcfgFeDalVoipLineGet(obj, NULL);
+		ret = zcfgFeDalVoipLineGet(NULL, obj, NULL);
 		len = json_object_array_length(obj);
 		for(i=0;i<len;i++){
 			objtmp = json_object_array_get_idx(obj, i);
Index: libzcfg_fe_dal-1.0/voip/sip/zcfg_fe_dal_sip_provider.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/voip/sip/zcfg_fe_dal_sip_provider.c	2017-10-25 11:40:18.267759397 +0800
+++ libzcfg_fe_dal-1.0/voip/sip/zcfg_fe_dal_sip_provider.c	2017-10-25 11:40:18.427759397 +0800
@@ -683,7 +683,7 @@
 			json_object_object_add(profRtpObj, "LocalPortMin", json_object_new_int(LocalPortMin));
 			json_object_object_add(profRtpObj, "LocalPortMax", json_object_new_int(LocalPortMax));
 		}
-		if(json_object_object_get(Jobj, "DSCPMark") != NULL)
+		if(json_object_object_get(Jobj, "RTPDSCPMark") != NULL)
 			json_object_object_add(profRtpObj, "DSCPMark", json_object_new_int(RTPDSCPMark));
 
 		if((setJson = zcfgFeJsonMultiObjAppend(RDM_OID_VOICE_PROF_RTP, &profIid, multiJobj, profRtpObj)) == NULL){
@@ -790,7 +790,7 @@
 
 	if(profNumPlanpObj != NULL){
 		if(json_object_object_get(Jobj, "InterDigitTimerStd") != NULL)
-			json_object_object_add(profNumPlanpObj, "InterDigitTimerStd", json_object_new_int(InterDigitTimerStd));
+			json_object_object_add(profNumPlanpObj, "InterDigitTimerStd", json_object_new_int(InterDigitTimerStd*1000));
 
 		if((setJson = zcfgFeJsonMultiObjAppend(RDM_OID_VOICE_PROF_NUM_PLAN, &profIid, multiJobj, profNumPlanpObj)) == NULL){
 			printf("%s:(ERROR) fail to append object oid(%d)\n", __FUNCTION__, RDM_OID_VOICE_PROF_NUM_PLAN);
Index: libzcfg_fe_dal-1.0/zcfg_fe_dal.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/zcfg_fe_dal.c	2017-10-25 11:40:18.287759397 +0800
+++ libzcfg_fe_dal-1.0/zcfg_fe_dal.c	2017-10-25 11:40:18.427759397 +0800
@@ -1672,13 +1672,44 @@
 	return true;
 } 
 
+bool isHexString(char hexStr[]){
+	int len = 0, i;
+
+	len = strlen(hexStr);
+	if(len > 4)
+		return false;
+	for(i=0;i<len;i++){
+		if((hexStr[i]<'0' || hexStr[i]>'9') && (hexStr[i]<'a' || hexStr[i]>'f') && (hexStr[i]<'A' || hexStr[i]>'F')){
+			return false;
+		}
+	}
+	return true;
+}
+
+bool IPv6IndentifierType(const char *ipv6indentifiertype){
+	char buff[64] = {0};
+	char p1[32] = {0}, p2[32] = {0}, p3[32] = {0}, p4[32] = {0};
+	int d1, d2, d3, d4;
+	strcpy(buff, ipv6indentifiertype);
+	if(buff[strlen(ipv6indentifiertype) - 1] == ':')
+		return false;
+	sscanf(buff, "%[^:]:%[^:]:%[^:]:%s", &p1, &p2, &p3, &p4);
+	if(!strcmp(p4,""))
+		return false;
+	if(isHexString(p1) == false || isHexString(p2) == false || isHexString(p3) == false || isHexString(p4) == false)
+		return false;
+
+	return true;
+}
+
 bool validateLocalIPv6(const char *ipStr){
-	char tmp[4] = {0};
+	char tmp[5] = {0};
 	strncpy(tmp, ipStr, 4);
 	if(strcasecmp(tmp, "fe80"))
 		return false;
 	if(!validateIPv6(ipStr))
 		return false;
+	return true;
 }
 
 bool validateIPv4(const char *ipStr){
@@ -2734,8 +2765,8 @@
 						stringPtr = json_object_get_string(pramJobj);
 						ptr_buf = strdup(stringPtr);
 						tmp = strtok_r(ptr_buf, ".", &sipname);
-						free(ptr_buf);
 						json_object_object_add(Jobj, paramList[i].paraName, json_object_new_string(sipname));
+						free(ptr_buf);
 						break;
 					case dalType_ICMPv6:
 						stringPtr = json_object_get_string(pramJobj);
