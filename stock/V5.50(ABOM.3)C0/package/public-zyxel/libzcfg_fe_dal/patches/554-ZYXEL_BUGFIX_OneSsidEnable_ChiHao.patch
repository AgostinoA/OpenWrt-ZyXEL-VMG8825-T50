Index: libzcfg_fe_dal-1.0/network/wireless/zcfg_fe_dal_wifi_macflt.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/network/wireless/zcfg_fe_dal_wifi_macflt.c	2018-05-18 17:13:26.567996775 +0800
+++ libzcfg_fe_dal-1.0/network/wireless/zcfg_fe_dal_wifi_macflt.c	2018-05-18 17:27:46.000593878 +0800
@@ -106,11 +106,70 @@
 zcfgRet_t zcfgFeDalWifiMACFilterEdit(struct json_object *Jobj, char *replyMsg){
 	zcfgRet_t ret = ZCFG_SUCCESS;
 	objIndex_t objIid;
-	struct json_object *WifiMACFilterJobj = NULL, *wifissidObj = NULL, *obj = NULL;
-	int index, objLen = 0, idx = 0, i;
+	struct json_object *WifiMACFilterJobj = NULL, *wifissidObj = NULL, *obj = NULL, *arrayobj= NULL;
+	int index, objLen = 0, idx = 0, i, arrayLen=0;
 	const char *mode = NULL, *ssid = NULL;
 
+	
+if(json_object_get_type(Jobj) == json_type_array){
+	arrayLen = json_object_array_length(Jobj);
+	for(i=0;i<arrayLen;i++){
+		
+			arrayobj = json_object_array_get_idx(Jobj, i);	
+
+			if(!json_object_object_get(arrayobj, "Index")){ 
+					ssid = json_object_get_string(json_object_object_get(arrayobj, "SSID"));
+					getwifiSSIDObj(&wifissidObj);
+					objLen = json_object_array_length(wifissidObj);
+					for(i=0;i<objLen;i++){
+						obj = json_object_array_get_idx(wifissidObj, i);
+						if(!strcmp(ssid,json_object_get_string(json_object_object_get(obj,"SSID")))){
+							idx = json_object_get_int(json_object_object_get(obj,"idx"));
+							json_object_object_add(arrayobj, "Index", json_object_new_int(idx));
+							break;
+						}
+					}
+					zcfgFeJsonObjFree(wifissidObj);
+				}
+			
+			
+			index = json_object_get_int(json_object_object_get(arrayobj, "Index"));		
+			IID_INIT(objIid);
+			
+			if(json_object_object_get(arrayobj, "MACMode")){
+				mode = json_object_get_string(json_object_object_get(arrayobj, "MACMode"));
+				if(!strcmp(mode, "Disable")){
+					json_object_object_add(arrayobj, "FilterMode", json_object_new_int(0));
+					}
+				else if(!strcmp(mode, "Deny")){
+					json_object_object_add(arrayobj, "FilterMode", json_object_new_int(1));
+					}
+				else if(!strcmp(mode, "Allow")){
+					json_object_object_add(arrayobj, "FilterMode", json_object_new_int(2));
+					}
+			}
+		 
+			objIid.level = 1;
+			objIid.idx[0] = index;
+			if((ret = zcfgFeObjJsonGet(RDM_OID_WIFI_STA_FILTER, &objIid, &WifiMACFilterJobj)) != ZCFG_SUCCESS) {
+				return ret;
+			}
+		    
+			
+			if(json_object_object_get(arrayobj,"FilterLists"))
+				json_object_object_add(WifiMACFilterJobj, "FilterLists",JSON_OBJ_COPY(json_object_object_get(arrayobj,"FilterLists")));
+			if(json_object_object_get(arrayobj,"FilterMode"))
+				json_object_object_add(WifiMACFilterJobj, "FilterMode", JSON_OBJ_COPY(json_object_object_get(arrayobj,"FilterMode")));
+
 
+			if((ret = zcfgFeObjJsonSet(RDM_OID_WIFI_STA_FILTER, &objIid, WifiMACFilterJobj, NULL)) != ZCFG_SUCCESS);
+			
+			json_object_put(WifiMACFilterJobj);
+		}
+		return ret;
+	}
+	
+else{	
 	if(!json_object_object_get(Jobj, "Index")){
 		ssid = json_object_get_string(json_object_object_get(Jobj, "SSID"));
 		getwifiSSIDObj(&wifissidObj);
@@ -125,6 +184,8 @@
 		}
 		zcfgFeJsonObjFree(wifissidObj);
 	}
+	
+	
 
 	index = json_object_get_int(json_object_object_get(Jobj, "Index"));
 	IID_INIT(objIid);
@@ -141,7 +202,7 @@
 			json_object_object_add(Jobj, "FilterMode", json_object_new_int(2));
 		}
 	}
-	
+		
 	objIid.level = 1;
 	objIid.idx[0] = index;
 	if((ret = zcfgFeObjJsonGet(RDM_OID_WIFI_STA_FILTER, &objIid, &WifiMACFilterJobj)) != ZCFG_SUCCESS) {
@@ -153,10 +214,14 @@
 	if(json_object_object_get(Jobj,"FilterMode"))
 		json_object_object_add(WifiMACFilterJobj, "FilterMode", JSON_OBJ_COPY(json_object_object_get(Jobj,"FilterMode")));
 
+   
 	if((ret = zcfgFeObjJsonSet(RDM_OID_WIFI_STA_FILTER, &objIid, WifiMACFilterJobj, NULL)) != ZCFG_SUCCESS);
 
 	json_object_put(WifiMACFilterJobj);
+
+	
 	return ret;
+   }
 }
 
 zcfgRet_t zcfgFeDalWifiMACFilterAdd(struct json_object *Jobj, char *replyMsg){
