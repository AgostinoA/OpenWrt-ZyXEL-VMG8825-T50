Index: libzcfg_fe_dal-1.0/network/dns/zcfg_fe_dal_d_dns.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/network/dns/zcfg_fe_dal_d_dns.c	2017-02-09 18:29:43.096384602 +0800
+++ libzcfg_fe_dal-1.0/network/dns/zcfg_fe_dal_d_dns.c	2017-02-09 18:43:22.539530643 +0800
@@ -12,19 +12,56 @@
 
 dal_param_t D_DNS_param[] =
 {
-	{"Enable", 				dalType_boolean,	0,	0,		NULL},
-	{"ServiceProvider", 	dalType_string, 	1, 	32,		NULL},
-	{"DDNSType", 			dalType_string, 	0, 	8,		NULL},
-	{"HostName", 			dalType_string, 	0, 	256,	NULL},
-	{"UserName", 			dalType_string, 	0, 	256, 	NULL},
-	{"Password", 			dalType_string, 	0, 	64, 	NULL},
-	{"IPAddressPolicy", 	dalType_int,		0,	0,		NULL},
-	{"UserIPAddress", 		dalType_v4Addr,		0,	0,		NULL},
-	{"Wildcard", 			dalType_boolean,	0,	0,		NULL},
-	{"Offline", 			dalType_boolean,	0,	0,		NULL},
-	{NULL, 					0, 					0, 	0, 		NULL}
+	{"Enable", 				dalType_boolean,	0,	0,		NULL, NULL,		0},
+	{"ServiceProvider", 	dalType_string, 	1, 	32,		NULL, "myzyxel|dyndns|zoneedit|noip|dtdns|freedns",		0},
+	{"DDNSType", 			dalType_string, 	0, 	8,		NULL, NULL,		dalcmd_Forbid},
+	{"HostName", 			dalType_string, 	0, 	256,	NULL, NULL,		0},
+	{"UserName", 			dalType_string, 	0, 	256, 	NULL, NULL,		0},
+	{"Password", 			dalType_string, 	0, 	64, 	NULL, NULL,		0},
+	{"IPAddressPolicy", 	dalType_int,		1,	1,		NULL, NULL,		0},
+	{"UserIPAddress", 		dalType_v4Addr,		0,	0,		NULL, NULL,		dalcmd_Forbid},
+	{"Wildcard", 			dalType_boolean,	0,	0,		NULL, NULL,		0},
+	{"Offline", 			dalType_boolean,	0,	0,		NULL, NULL,		0},
+	{NULL, 					0, 					0, 	0, 		NULL, NULL,		0}
 };
 
+void zcfgFeDalShowDDns(struct json_object *Jarray){
+	struct json_object *Jobj = NULL;
+		
+	if(json_object_get_type(Jarray) != json_type_array){
+		printf("%s: wrong Jobj format!\n", __FUNCTION__);
+		return;
+	}
+
+	Jobj = json_object_array_get_idx(Jarray, 0);
+	
+	printf("%-25s %u\n", "Enable", json_object_get_boolean(json_object_object_get(Jobj, "Enable")));
+	printf("%-25s %s\n", "ServiceProvider", json_object_get_string(json_object_object_get(Jobj, "ServiceProvider")));
+	printf("%-25s %s\n", "HostName", json_object_get_string(json_object_object_get(Jobj, "HostName")));
+	printf("%-25s %s\n", "UserName", json_object_get_string(json_object_object_get(Jobj, "UserName")));
+	printf("%-25s %s\n", "Password", json_object_get_string(json_object_object_get(Jobj, "Password")));
+	printf("%-25s %u\n", "Wildcard", json_object_get_boolean(json_object_object_get(Jobj, "Wildcard")));
+	printf("%-25s %u\n", "Offline", json_object_get_boolean(json_object_object_get(Jobj, "Offline")));
+	printf("\n");
+	printf("%-32s %s\n", "User Authentication Result :", json_object_get_string(json_object_object_get(Jobj, "AuthenticationResult")));
+	printf("%-32s %s\n", "Last Updated Time :", json_object_get_string(json_object_object_get(Jobj, "UpdatedTime")));
+	printf("%-32s %s\n", "Current Dynamic IP :", json_object_get_string(json_object_object_get(Jobj, "DynamicIP")));
+	
+}
+
+zcfgRet_t zcfgFeDalDDnsGet(struct json_object *Jarray, char *replyMsg){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	objIndex_t iid;
+	struct json_object *obj = NULL;
+	
+	IID_INIT(iid);
+	if(zcfgFeObjJsonGet(RDM_OID_D_DNS, &iid, &obj) == ZCFG_SUCCESS) {
+		json_object_array_add(Jarray, JSON_OBJ_COPY(obj));
+		zcfgFeJsonObjFree(obj);
+	}
+	
+	return ret;
+}
 
 zcfgRet_t zcfgFeDalDDnsEdit(struct json_object *Jobj, char *replyMsg)
 {
@@ -72,7 +109,7 @@
 		return ZCFG_INTERNAL_ERROR;
 
 	if(!strcmp(method, "PUT")) {
-		ret = zcfgFeDalDDnsEdit(Jobj, NULL);
+		ret = zcfgFeDalDDnsEdit(Jobj, replyMsg);
 	}
 	else if(!strcmp(method, "POST")) {
 		
@@ -80,6 +117,9 @@
 	else if(!strcmp(method, "DELETE")) {
 		
 	}
+	else if(!strcmp(method, "GET")) {
+		ret = zcfgFeDalDDnsGet(Jobj, replyMsg);
+	}
 
 	return ret;
 }
Index: libzcfg_fe_dal-1.0/zcfg_fe_dal.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/zcfg_fe_dal.c	2017-02-09 18:29:43.872384609 +0800
+++ libzcfg_fe_dal-1.0/zcfg_fe_dal.c	2017-02-09 18:43:19.733244703 +0800
@@ -159,20 +159,21 @@
 extern void zcfgFeDalShowFirewallACL(struct json_object *Jarray);
 extern void zcfgFeDalShowWifiGeneral(struct json_object *Jarray);
 extern void zcfgFeDalShowWan(struct json_object *Jarray);
+extern void zcfgFeDalShowDDns(struct json_object *Jarray);
 
 dal_handler_t dalHandler[] = {
-{"WAN",				WAN_param,			zcfgFeDalWan,			zcfgFeDalShowWan,			"add|edit|delete|get",	"Broadband"},
+{"WAN",				WAN_param,			zcfgFeDalWan,			zcfgFeDalShowWan,			"get",				"Broadband"},
 {"MGMT",			MGMT_param,			zcfgFeDalMgmt,			NULL,						"edit",				"TR-069_Client"},
 {"ETHWANLAN", 		ETHWANLAN_param, 	zcfgFeDalEthWanLan,		NULL,						"edit",				"Broadband"},
 {"DNS_ENTRY",		DNS_ENTRY_param,	zcfgFeDalDnsEntry,		NULL,						"add|edit|delete",	"DNS"},
-{"D_DNS",			D_DNS_param,		zcfgFeDalDDns,			NULL,						"edit",				"DNS"},
+{"D_DNS",			D_DNS_param,		zcfgFeDalDDns,			zcfgFeDalShowDDns,			"get|edit",				"DNS"},
 {"ADVANCE",			ADVANCE_param,		zcfgFeDalWanAdvance,	NULL,						"edit",				"Broadband"},
 {"WWANBACKUP", 		WWANBACKUP_param,	zcfgFeDalWwanBackup,	NULL,						"edit",				"Broadband"},
-{"STATICROUTE", 	STATICROUTE_param,	zcfgFeDalStaticRoute,	zcfgFeDalShowStaticRoute,	"add|edit|delete|get",	"Routing"},
+{"STATICROUTE", 	STATICROUTE_param,	zcfgFeDalStaticRoute,	zcfgFeDalShowStaticRoute,	"get|add|edit|delete",	"Routing"},
 {"DNSROUTE", 		DNSROUTE_param,		zcfgFeDalDnsRoute,		NULL,						"add|edit|delete",	"Routing"},
 {"POLICYROUTE", 	POLICYROUTE_param,	zcfgFeDalPolicyRoute,	NULL,						"add|edit|delete",	"Routing"},
 {"RIP", 			RIP_param,			zcfgFeDalRip,			NULL,						"edit",				"Routing"},
-{"NAT_PORT_MAPPING",NAT_PORT_MAPPING_param,	zcfgFeDalNatPortMapping,zcfgFeDalShowPortFwd,					"add|edit|delete|get", "NAT"},
+{"NAT_PORT_MAPPING",NAT_PORT_MAPPING_param,	zcfgFeDalNatPortMapping,zcfgFeDalShowPortFwd,	"get|add|edit|delete", "NAT"},
 {"NAT_PORT_TRIGGERING",NAT_PORT_TRIGGERING_param,zcfgFeDalNatPortTriggering,NULL,			"add|edit|delete", "NAT"},
 {"NAT_DMZ_ALG",		NAT_DMZ_ALG_param,	zcfgFeDalNatDMZALG, 	NULL,						"edit",				"NAT"},
 {"NAT_ADDR_MAPPING",NAT_ADDR_MAPPING_param,	zcfgFeDalNatAddrMapping,NULL,					"add|edit|delete", "NAT"},
@@ -232,7 +233,7 @@
 {"LOGIN_PRIVILEGE", LOGIN_PRIVILEGE_param,	zcfgFeDalLoginPrivilege,NULL, 					"edit",		"root_only"},
 {"QUICKSTART", 		QUICK_START_param,	zcfgFeDalQuickStart,	NULL,						"edit",				"root_only"},
 {"USER_ACCOUNT", 	USER_ACCOUNT_param,	zcfgFeDalUserAccount,	NULL,						"add|edit|delete",	"root_only"}, //temporarily root_only //User_Account
-{"NETWORK_MAP",		NETWORK_MAP_param, zcfgFeDalNetworkMAP,	zcfgFeDalShowNetworkMAP,		"add|edit|delete|get",	"root_only"}, //temporarily root_only //User_Account
+{"LanHosts",		NETWORK_MAP_param, zcfgFeDalNetworkMAP,	zcfgFeDalShowNetworkMAP,		"get",				"Status"},
 {NULL,				NULL,				NULL, 					NULL,						NULL,				 NULL}
 };
 
Index: libzcfg_fe_dal-1.0/js/zcfg_fe_dal_networkmap.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/js/zcfg_fe_dal_networkmap.c	2017-02-09 18:29:43.764384608 +0800
+++ libzcfg_fe_dal-1.0/js/zcfg_fe_dal_networkmap.c	2017-02-09 18:29:43.920384609 +0800
@@ -35,46 +35,54 @@
 	len = json_object_array_length(Jarray);
 	for(i=0;i<len;i++){
 		obj = json_object_array_get_idx(Jarray, i);
+
+		//if PhysAddress is empty, skip it.
+		if(!strcmp(json_object_get_string(json_object_object_get(obj, "PhysAddress")),""))
+			continue;
 		
-		if(!strcmp(json_object_get_string(json_object_object_get(obj, "Name")),"")){
+		if(!strcmp(json_object_get_string(json_object_object_get(obj, "HostName")),"")){
 			Name = "Unknown";
 		}
 		else
-			Name = json_object_get_string(json_object_object_get(obj, "Name"));
-		if(!strcmp(json_object_get_string(json_object_object_get(obj, "IPv6Address")),"")){
-			IPv6Address = "N/A";
+			Name = json_object_get_string(json_object_object_get(obj, "HostName"));
+		
+		if(!strcmp(json_object_get_string(json_object_object_get(obj, "IPAddress6")),"")){
+			if(!strcmp(json_object_get_string(json_object_object_get(obj, "IPLinkLocalAddress6")),"")){
+				IPv6Address = "N/A";
+			}
+			else{
+				IPv6Address = json_object_get_string(json_object_object_get(obj, "IPLinkLocalAddress6"));
+			}
 		}
 		else 
-			IPv6Address = json_object_get_string(json_object_object_get(obj, "IPv6Address"));
+			IPv6Address = json_object_get_string(json_object_object_get(obj, "IPAddress6"));
+		
 		printf("%-20s %-20s %-30s %-20s %-20s %-20s \n",
 			Name,
 			json_object_get_string(json_object_object_get(obj, "IPAddress")),
 			IPv6Address,
-			json_object_get_string(json_object_object_get(obj, "MACAddress")),
+			json_object_get_string(json_object_object_get(obj, "PhysAddress")),
 			json_object_get_string(json_object_object_get(obj, "AddressSource")),
-			json_object_get_string(json_object_object_get(obj, "ConnectionType")));
+			json_object_get_string(json_object_object_get(obj, "X_ZYXEL_ConnectionType")));
 	}
 }
 
-zcfgRet_t zcfgFeDalNetworkMAPGet(struct json_object *Jobj, char *replyMsg){
+zcfgRet_t zcfgFeDalNetworkMAPGet(struct json_object *Jarray, char *replyMsg){
 	zcfgRet_t ret = ZCFG_SUCCESS;
-	struct json_object *paramJobj = NULL;
-	struct json_object *NetworkMAPJobj = NULL;
-	objIndex_t NetworkMAPIid = {0};
-	while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_HOSTS_HOST, &NetworkMAPIid, &NetworkMAPJobj) == ZCFG_SUCCESS){
-		if(strcmp(json_object_get_string(json_object_object_get(NetworkMAPJobj, "PhysAddress")),"")){
-			paramJobj = json_object_new_object();
-			json_object_object_add(paramJobj, "Name", json_object_object_get(NetworkMAPJobj, "HostName"));
-			json_object_object_add(paramJobj, "IPAddress", json_object_object_get(NetworkMAPJobj, "IPAddress"));
-			json_object_object_add(paramJobj, "IPv6Address", json_object_object_get(NetworkMAPJobj, "IPLinkLocalAddress6"));
-			json_object_object_add(paramJobj, "MACAddress", json_object_object_get(NetworkMAPJobj, "PhysAddress"));
-			json_object_object_add(paramJobj, "AddressSource", json_object_object_get(NetworkMAPJobj, "AddressSource"));
-			json_object_object_add(paramJobj, "ConnectionType", json_object_object_get(NetworkMAPJobj, "X_ZYXEL_ConnectionType"));
-			json_object_array_add(Jobj, JSON_OBJ_COPY(paramJobj));
-			zcfgFeJsonObjFree(paramJobj);
-		}
+	struct json_object *obj = NULL;
+	objIndex_t iid = {0};
+
+	//update hosts list first
+	IID_INIT(iid);
+	if(zcfgFeObjJsonGet(RDM_OID_HOSTS, &iid, &obj) == ZCFG_SUCCESS){
+		zcfgFeJsonObjFree(obj);
+	}
+
+	IID_INIT(iid);
+	while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_HOSTS_HOST, &iid, &obj) == ZCFG_SUCCESS){
+		json_object_array_add(Jarray, JSON_OBJ_COPY(obj));
+		zcfgFeJsonObjFree(obj);
 	}	
-	zcfgFeJsonObjFree(NetworkMAPJobj);
 	return ret;
 }
 
