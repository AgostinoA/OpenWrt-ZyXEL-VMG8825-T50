Index: libzcfg_fe_dal-1.0/network/broadband/zcfg_fe_dal_wwanbackup.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/network/broadband/zcfg_fe_dal_wwanbackup.c	2017-07-18 18:34:24.897525749 +0800
+++ libzcfg_fe_dal-1.0/network/broadband/zcfg_fe_dal_wwanbackup.c	2017-07-18 18:36:56.870466800 +0800
@@ -13,26 +13,26 @@
 #include "zcfg_msg.h"
 #include "zcfg_fe_dal_common.h"
 
+#define CWMP_SOAP_MSG_DEBUG (1 << 1)
+
 dal_param_t WWANBACKUP_param[]={
 /* set IPV4 object */
+{"IPStatic", dalType_boolean,	0,	0,	NULL},
 {"IPAddress", dalType_v4Addr,	0,	0,	NULL},
 {"SubnetMask", dalType_v4Mask,	0,	0,	NULL},
-{"AddressingType", dalType_string, 0, 0, NULL},
-{"IPAction", dalType_string, 0, 0, NULL},
 /* set DNS object */
-{"DNS_Interface", dalType_string, 0, 0, NULL},
-{"DNS_X_ZYXEL_Type", dalType_string, 0, 0, NULL},
-{"DNSServer", dalType_string, 0, 0, NULL},
-{"DNS_Action", dalType_string, 0, 0, NULL},
+{"DNSStatic", dalType_boolean,	0,	0,	NULL},
+{"PrimDNSServer", dalType_v4Addr, 0, 0, NULL},
+{"SecDNSServer", dalType_v4Addr, 0, 0, NULL},
 /* set PPP object */
-{"PPP_Username", dalType_string, 0, 0, NULL},
-{"PPP_Password", dalType_string, 0, 0, NULL},
-{"PPP_ConnectionTrigger", dalType_string, 0, 0, NULL},
-{"PPP_IdleDisconnectTime", dalType_int, 0, 0, NULL},
+{"Username", dalType_string, 0, 0, NULL},
+{"Password", dalType_string, 0, 0, NULL},
+{"ConnectionTrigger", dalType_string, 0, "OnDemand|AlwaysOn", NULL},
+{"IdleDisconnectTime", dalType_int, 1, 4320, NULL},
 /* set Ping Check object, without apply */
 {"Ping_Enable", dalType_boolean, 0, 0, NULL},
-{"Ping_Interval", dalType_int, 0, 0, NULL},
-{"Ping_FailLimit", dalType_int, 0, 0, NULL},
+{"Ping_Interval", dalType_int, 20, 180, NULL},
+{"Ping_FailLimit", dalType_int, 2, 5, NULL},
 {"Ping_DefaultGateway", dalType_boolean, 0, 0, NULL},
 {"Ping_Destination", dalType_v4Addr,	0,	0,	NULL},
 /* set Budget Control object, without apply */
@@ -41,11 +41,11 @@
 {"Bdg_TimeValue", dalType_int, 0, 0, NULL},
 {"Bdg_ByteEnable", dalType_boolean, 0, 0, NULL},
 {"Bdg_ByteValue", dalType_int, 0, 0, NULL},
-{"Bdg_ByteMode", dalType_string, 0, 0, NULL},
+{"Bdg_ByteMode", dalType_string, 0, "DownUp|Down|Up", NULL},
 {"Bdg_PktEnable", dalType_boolean, 0, 0, NULL},
 {"Bdg_PktValue", dalType_int, 0, 0, NULL},
-{"Bdg_PktMode", dalType_string, 0, 0, NULL},
-{"Bdg_ResetDay", dalType_int, 0, 0, NULL},
+{"Bdg_PktMode", dalType_string, 0, "DownUp|Down|Up", NULL},
+{"Bdg_ResetDay", dalType_int, 0, 30, NULL},
 {"Bdg_TimeActionEnable", dalType_boolean, 0, 0, NULL},
 {"Bdg_TimeActionValue", dalType_int, 0, 0, NULL},
 {"Bdg_ByteActionEnable", dalType_boolean, 0, 0, NULL},
@@ -58,25 +58,31 @@
 {"ResetNow", dalType_boolean, 0, 0, NULL},
 /* set 3G object */
 {"Enable_3G", dalType_boolean, 0, 0, NULL},
-{"DialNumber_3G", dalType_string, 0, 0, NULL},
-{"APN_3G", dalType_string, 0, 0, NULL},
-{"PIN_3G", dalType_string, 0, 0, NULL},
+{"DialNumber", dalType_string, 0, 0, NULL},
+{"APN", dalType_string, 0, 0, NULL},
+{"PIN_Code", dalType_string, 0, 0, NULL},
 /* set Email object */
-{"EventIndex", dalType_int, 0, 0, NULL},
-{"Email_UP_Enable", dalType_boolean, 0, 0, NULL},
+{"Email_Enable", dalType_boolean, 0, 0, NULL},
+{"Email_Subject", dalType_string, 0, 0, NULL},
+{"Email_To", dalType_emailAddr, 0, 0, NULL},
+{"Email_SericeRef", dalType_emailList, 0, 0, NULL},
+
+/*{"Email_UP_Enable", dalType_boolean, 0, 0, NULL},
 {"Email_UP_Subject", dalType_string, 0, 0, NULL},
 {"Email_UP_To", dalType_string, 0, 0, NULL},
 {"Email_UP_SericeRef", dalType_string, 0, 0, NULL},
-{"EventIndex_down", dalType_int, 0, 0, NULL},
+
 {"Email_DN_Enable", dalType_boolean, 0, 0, NULL},
 {"Email_DN_Subject", dalType_string, 0, 0, NULL},
 {"Email_DN_To", dalType_string, 0, 0, NULL},
-{"Email_DN_SericeRef", dalType_string, 0, 0, NULL},
-{"EventIndex_b", dalType_int, 0, 0, NULL},
+{"Email_DN_SericeRef", dalType_string, 0, 0, NULL},*/
+
 {"Email_BG_Enable", dalType_boolean, 0, 0, NULL},
 {"Email_BG_Subject", dalType_string, 0, 0, NULL},
-{"Email_BG_To", dalType_string, 0, 0, NULL},
-{"Email_BG_SericeRef", dalType_string, 0, 0, NULL},
+{"Email_BG_To", dalType_emailAddr, 0, 0, NULL},
+{"Email_BG_SericeRef", dalType_emailList, 0, 0, NULL},
+{NULL,	0,					0,	0,		NULL}
+
 };
 
 void getIidLevel(objIndex_t *objIid){
@@ -121,16 +127,20 @@
 	const char *pin = NULL;
 	
 	enable = json_object_get_boolean(json_object_object_get(Jobj, "Enable_3G"));
-	dialNumber = json_object_get_string(json_object_object_get(Jobj, "DialNumber_3G"));
-	apn = json_object_get_string(json_object_object_get(Jobj, "APN_3G"));
-	pin = json_object_get_string(json_object_object_get(Jobj, "PIN_3G"));
+	dialNumber = json_object_get_string(json_object_object_get(Jobj, "DialNumber"));
+	apn = json_object_get_string(json_object_object_get(Jobj, "APN"));
+	pin = json_object_get_string(json_object_object_get(Jobj, "PIN_Code"));
 	
 	ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_ZY_W_W_A_N_BACKUP, &WWANIid, &WWANObj);
 
 	if(ret == ZCFG_SUCCESS){
+		if(json_object_object_get(Jobj, "Enable_3G"))
 		json_object_object_add(WWANObj, "Enable", json_object_new_boolean(enable));
+		if(json_object_object_get(Jobj, "DialNumber"))
 		json_object_object_add(WWANObj, "DialNumber", json_object_new_string(dialNumber));
+		if(json_object_object_get(Jobj, "APN"))
 		json_object_object_add(WWANObj, "APN", json_object_new_string(apn));
+		if(json_object_object_get(Jobj, "PIN_Code"))
 		json_object_object_add(WWANObj, "PIN", json_object_new_string(pin));
 
 		zcfgFeObjJsonSet(RDM_OID_ZY_W_W_A_N_BACKUP, &WWANIid, WWANObj, NULL);
@@ -147,7 +157,6 @@
 	objIndex_t ipv4Iid = {0};
 	const char *ipAddress = NULL;
 	const char *subnetMask = NULL;
-	const char *addressingType = NULL;
 	bool IPStatic = false;
 
 	IPStatic = json_object_get_boolean(json_object_object_get(Jobj, "IPStatic"));
@@ -172,23 +181,21 @@
 		if(ret == ZCFG_SUCCESS && ipv4Obj != NULL){
 			ipAddress = json_object_get_string(json_object_object_get(Jobj, "IPAddress"));
 			subnetMask = json_object_get_string(json_object_object_get(Jobj, "SubnetMask"));
-			addressingType = json_object_get_string(json_object_object_get(Jobj, "AddressingType"));
 
+			if(json_object_object_get(Jobj, "IPAddress"))
 			json_object_object_add(ipv4Obj, "IPAddress", json_object_new_string(ipAddress));
+			if(json_object_object_get(Jobj, "SubnetMask"))
 			json_object_object_add(ipv4Obj, "SubnetMask", json_object_new_string(subnetMask));
-			json_object_object_add(ipv4Obj, "AddressingType", json_object_new_string(addressingType));
+			json_object_object_add(ipv4Obj, "AddressingType", json_object_new_string("Static"));
 	
 			zcfgFeObjJsonSet(RDM_OID_IP_IFACE_V4_ADDR, &ipv4Iid, ipv4Obj, NULL);
 		}
 
 	}else{
 		if(ret == ZCFG_SUCCESS && ipv4Obj != NULL){//delete
-			addressingType = json_object_get_string(json_object_object_get(ipv4Obj, "AddressingType"));
-			if(!strcmp(addressingType,"Static")){
 				ret = zcfgFeObjJsonDel(RDM_OID_IP_IFACE_V4_ADDR, &ipv4Iid, NULL);
 			}
 		}
-	}
 		
 	zcfgFeJsonObjFree(ipv4Obj);
 	return ret;
@@ -200,14 +207,14 @@
 	struct json_object *obj = NULL;
 	objIndex_t dnsIid = {0};
 	objIndex_t iid = {0};
-	const char *dnsIface = NULL;
 	const char *CurDnsIface = NULL;
-	const char *type = NULL;
-	const char *dnsServer = NULL;
+	char dnsServer[32] = {0};
+	const char *primdns = NULL;
+	const char *secdns = NULL;
 	bool found = false;
 	bool DNSStatic = false;
 
-	DNSStatic = json_object_get_boolean(json_object_object_get(Jobj, "DNS_Static"));
+	DNSStatic = json_object_get_boolean(json_object_object_get(Jobj, "DNSStatic"));
 	
 	IID_INIT(dnsIid);
 	IID_INIT(iid);
@@ -236,24 +243,28 @@
 		}
 			
 		if(found == true && dnsObj != NULL){
-			dnsIface = json_object_get_string(json_object_object_get(Jobj, "DNS_Interface"));
-			type = json_object_get_string(json_object_object_get(Jobj, "DNS_X_ZYXEL_Type"));
-			dnsServer = json_object_get_string(json_object_object_get(Jobj, "DNS_DNSServer"));
+			primdns = json_object_get_string(json_object_object_get(Jobj, "PrimDNSServer"));
+			secdns = json_object_get_string(json_object_object_get(Jobj, "SecDNSServer"));
 			
-			json_object_object_add(dnsObj, "Interface", json_object_new_string(dnsIface));
-			json_object_object_add(dnsObj, "Type", json_object_new_string(type));
+			json_object_object_add(dnsObj, "Interface", json_object_new_string(ipIface));
+			json_object_object_add(dnsObj, "Type", json_object_new_string("Static"));
+			if(json_object_object_get(Jobj, "PrimDNSServer")){
+				if(!json_object_object_get(Jobj, "SecDNSServer"))
+					json_object_object_add(dnsObj, "DNSServer", json_object_new_string(primdns));
+				else{
+					strcat(dnsServer,primdns);
+					strcat(dnsServer,",");
+					strcat(dnsServer,secdns);
 			json_object_object_add(dnsObj, "DNSServer", json_object_new_string(dnsServer));
-			
+				}
+			}
 			zcfgFeObjJsonSet(RDM_OID_DNS_CLIENT_SRV, &dnsIid, dnsObj, NULL);
 		}
 	}else{
 		if(found == true && dnsObj != NULL){//delete
-			type = json_object_get_string(json_object_object_get(dnsObj, "Type"));
-			if(!strcmp(type,"Static")){
 				ret = zcfgFeObjJsonDel(RDM_OID_DNS_CLIENT_SRV, &dnsIid, NULL);
 			}
 		}
-	}
 
 	zcfgFeJsonObjFree(dnsObj);
 	return ret;
@@ -275,16 +286,22 @@
 	ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_PPP_IFACE, &pppIid, &pppObj);
 
 	if(ret == ZCFG_SUCCESS){
-		username = json_object_get_string(json_object_object_get(Jobj, "PPP_Username"));
-		passwrd = json_object_get_string(json_object_object_get(Jobj, "PPP_Password"));
-		connectionTrigger = json_object_get_string(json_object_object_get(Jobj, "PPP_ConnectionTrigger"));
-		idleDisconnectTime = json_object_get_int(json_object_object_get(Jobj, "PPP_IdleDisconnectTime"));
+		username = json_object_get_string(json_object_object_get(Jobj, "Username"));
+		passwrd = json_object_get_string(json_object_object_get(Jobj, "Password"));
+		connectionTrigger = json_object_get_string(json_object_object_get(Jobj, "ConnectionTrigger"));
+		idleDisconnectTime = json_object_get_int(json_object_object_get(Jobj, "IdleDisconnectTime"));
 
+		if(json_object_object_get(Jobj, "Username"))
 		json_object_object_add(pppObj, "Username", json_object_new_string(username));
+		if(json_object_object_get(Jobj, "Password"))
 		json_object_object_add(pppObj, "Password", json_object_new_string(passwrd));
+		if(json_object_object_get(Jobj, "ConnectionTrigger")){
+			if(!strcmp(connectionTrigger,"OnDemand"))
+				json_object_object_add(pppObj, "IdleDisconnectTime", json_object_new_int(idleDisconnectTime*60));
+			else 
+				json_object_object_add(pppObj, "IdleDisconnectTime", json_object_new_int(0));
 		json_object_object_add(pppObj, "ConnectionTrigger", json_object_new_string(connectionTrigger));
-		json_object_object_add(pppObj, "IdleDisconnectTime", json_object_new_int(idleDisconnectTime));
-
+		}
 		ret = zcfgFeObjJsonSetWithoutApply(RDM_OID_PPP_IFACE, &pppIid, pppObj, NULL);
 	}
 
@@ -312,10 +329,15 @@
 		pingGw = json_object_get_boolean(json_object_object_get(Jobj, "Ping_DefaultGateway"));
 		destination = json_object_get_string(json_object_object_get(Jobj, "Ping_Destination"));
 
+		if(json_object_object_get(Jobj, "Ping_Enable"))
 		json_object_object_add(pingObj, "Enable", json_object_new_boolean(enable));
+		if(json_object_object_get(Jobj, "Ping_Interval"))
 		json_object_object_add(pingObj, "Interval", json_object_new_int(interval));
+		if(json_object_object_get(Jobj, "Ping_FailLimit"))
 		json_object_object_add(pingObj, "FailLimit", json_object_new_int(failLimit));
+		if(json_object_object_get(Jobj, "Ping_DefaultGateway"))
 		json_object_object_add(pingObj, "DefaultGateway", json_object_new_boolean(pingGw));
+		if(json_object_object_get(Jobj, "Ping_Destination"))
 		json_object_object_add(pingObj, "Destination", json_object_new_string(destination));
 
 		ret = zcfgFeObjJsonSetWithoutApply(RDM_OID_ZY_W_W_A_N_PING_CHECK, &pingIid, pingObj, NULL);
@@ -375,25 +397,45 @@
 		logInterval = json_object_get_int(json_object_object_get(Jobj, "Bdg_LogInterval"));
 		resetNow = json_object_get_int(json_object_object_get(Jobj, "ResetNow"));
 
+		if(json_object_object_get(Jobj, "Bdg_Enable"))
 		json_object_object_add(budgetObj, "Enable", json_object_new_boolean(enable));
+		if(json_object_object_get(Jobj, "Bdg_TimeEnable"))
 		json_object_object_add(budgetObj, "TimeEnable", json_object_new_boolean(timeEnable));
+		if(json_object_object_get(Jobj, "Bdg_TimeValue"))
 		json_object_object_add(budgetObj, "TimeValue", json_object_new_int(timeValue));
+		if(json_object_object_get(Jobj, "Bdg_ByteEnable"))
 		json_object_object_add(budgetObj, "ByteEnable", json_object_new_boolean(byteEnable));
+		if(json_object_object_get(Jobj, "Bdg_ByteValue"))
 		json_object_object_add(budgetObj, "ByteValue", json_object_new_int(byteValue));
+		if(json_object_object_get(Jobj, "Bdg_ByteMode"))
 		json_object_object_add(budgetObj, "ByteMode", json_object_new_string(byteMode));
+		if(json_object_object_get(Jobj, "Bdg_PktEnable"))
 		json_object_object_add(budgetObj, "PktEnable", json_object_new_boolean(pktEnable));
+		if(json_object_object_get(Jobj, "Bdg_PktValue"))
 		json_object_object_add(budgetObj, "PktValue", json_object_new_int(pktValue));
+		if(json_object_object_get(Jobj, "Bdg_PktMode"))
 		json_object_object_add(budgetObj, "PktMode", json_object_new_string(pktMode));
+		if(json_object_object_get(Jobj, "Bdg_ResetDay"))
 		json_object_object_add(budgetObj, "ResetDay", json_object_new_int(resetDay));
+		if(json_object_object_get(Jobj, "Bdg_TimeActionEnable"))
 		json_object_object_add(budgetObj, "TimeActionEnable", json_object_new_boolean(timeActionEnable));
+		if(json_object_object_get(Jobj, "Bdg_TimeActionValue"))
 		json_object_object_add(budgetObj, "TimeActionValue", json_object_new_int(timeActionValue));
+		if(json_object_object_get(Jobj, "Bdg_ByteActionEnable"))
 		json_object_object_add(budgetObj, "ByteActionEnable", json_object_new_boolean(byteActionEnable));
+		if(json_object_object_get(Jobj, "Bdg_ByteActionValue"))
 		json_object_object_add(budgetObj, "ByteActionValue", json_object_new_int(byteActionValue));
+		if(json_object_object_get(Jobj, "Bdg_PktActionEnable"))
 		json_object_object_add(budgetObj, "PktActionEnable", json_object_new_boolean(pktActionEnable));
+		if(json_object_object_get(Jobj, "Bdg_PktActionValue"))
 		json_object_object_add(budgetObj, "PktActionValue", json_object_new_int(pktActionValue));
+		if(json_object_object_get(Jobj, "Bdg_DropWWAN"))
 		json_object_object_add(budgetObj, "DropWWAN", json_object_new_boolean(dropWWAN));
+		if(json_object_object_get(Jobj, "Bdg_LogEnable"))
 		json_object_object_add(budgetObj, "LogEnable", json_object_new_boolean(logEnable));
+		if(json_object_object_get(Jobj, "Bdg_LogInterval"))
 		json_object_object_add(budgetObj, "LogInterval", json_object_new_int(logInterval));
+		if(json_object_object_get(Jobj, "ResetNow"))
 		json_object_object_add(budgetObj, "ResetNow", json_object_new_int(resetNow));
 
 		ret = zcfgFeObjJsonSetWithoutApply(RDM_OID_ZY_W_W_A_N_BUDGET_CONTROL, &budgetIid, budgetObj, NULL);
@@ -445,14 +487,18 @@
 	}
 
 	if(found){
-		enable = json_object_get_boolean(json_object_object_get(Jobj, "Email_UP_Enable"));
-		subject = json_object_get_string(json_object_object_get(Jobj, "Email_UP_Subject"));
-		senTo = json_object_get_string(json_object_object_get(Jobj, "Email_UP_To"));
-		sericeRef = json_object_get_string(json_object_object_get(Jobj, "Email_UP_SericeRef"));
+		enable = json_object_get_boolean(json_object_object_get(Jobj, "Email_Enable"));
+		subject = json_object_get_string(json_object_object_get(Jobj, "Email_Subject"));
+		senTo = json_object_get_string(json_object_object_get(Jobj, "Email_To"));
+		sericeRef = json_object_get_string(json_object_object_get(Jobj, "Email_SericeRef"));
 		
+		if(json_object_object_get(Jobj, "Email_Enable"))
 		json_object_object_add(emailUPObj, "Enable", json_object_new_boolean(enable));
+		if(json_object_object_get(Jobj, "Email_To"))
 		json_object_object_add(emailUPObj, "EmailTo", json_object_new_string(senTo));
+		if(json_object_object_get(Jobj, "Email_Subject"))
 		json_object_object_add(emailUPObj, "EmailSubject", json_object_new_string(subject));
+		if(json_object_object_get(Jobj, "Email_SericeRef"))
 		json_object_object_add(emailUPObj, "SericeRef", json_object_new_string(sericeRef));
 		
 		zcfgFeObjJsonSet(RDM_OID_MAIL_EVENT_CFG, &emailUPIid, emailUPObj, NULL);
@@ -505,14 +551,18 @@
 	}
 
 	if(found){
-		enable = json_object_get_boolean(json_object_object_get(Jobj, "Email_DN_Enable"));
-		subject = json_object_get_string(json_object_object_get(Jobj, "Email_DN_Subject"));
-		senTo = json_object_get_string(json_object_object_get(Jobj, "Email_DN_To"));
-		sericeRef = json_object_get_string(json_object_object_get(Jobj, "Email_DN_SericeRef"));
+		enable = json_object_get_boolean(json_object_object_get(Jobj, "Email_Enable"));
+		subject = json_object_get_string(json_object_object_get(Jobj, "Email_Subject"));
+		senTo = json_object_get_string(json_object_object_get(Jobj, "Email_To"));
+		sericeRef = json_object_get_string(json_object_object_get(Jobj, "Email_SericeRef"));
 		
+		if(json_object_object_get(Jobj, "Email_Enable"))
 		json_object_object_add(emailDnObj, "Enable", json_object_new_boolean(enable));
+		if(json_object_object_get(Jobj, "Email_To"))
 		json_object_object_add(emailDnObj, "EmailTo", json_object_new_string(senTo));
+		if(json_object_object_get(Jobj, "Email_Subject"))
 		json_object_object_add(emailDnObj, "EmailSubject", json_object_new_string(subject));
+		if(json_object_object_get(Jobj, "Email_SericeRef"))
 		json_object_object_add(emailDnObj, "SericeRef", json_object_new_string(sericeRef));
 		
 		zcfgFeObjJsonSet(RDM_OID_MAIL_EVENT_CFG, &emailDnIid, emailDnObj, NULL);
@@ -571,9 +621,13 @@
 		senTo = json_object_get_string(json_object_object_get(Jobj, "Email_BG_To"));
 		sericeRef = json_object_get_string(json_object_object_get(Jobj, "Email_BG_SericeRef"));
 		
+		if(json_object_object_get(Jobj, "Email_BG_Enable"))
 		json_object_object_add(emailBgObj, "Enable", json_object_new_boolean(enable));
+		if(json_object_object_get(Jobj, "Email_BG_To"))
 		json_object_object_add(emailBgObj, "EmailTo", json_object_new_string(senTo));
+		if(json_object_object_get(Jobj, "Email_BG_Subject"))
 		json_object_object_add(emailBgObj, "EmailSubject", json_object_new_string(subject));
+		if(json_object_object_get(Jobj, "Email_BG_SericeRef"))
 		json_object_object_add(emailBgObj, "SericeRef", json_object_new_string(sericeRef));
 		
 		zcfgFeObjJsonSet(RDM_OID_MAIL_EVENT_CFG, &emailBgIid, emailBgObj, NULL);
@@ -594,7 +648,6 @@
 	ret = getIfPath(ipIface, pppIface);
 	
 	if(resetNow == false){
-		
 		if(ret == ZCFG_SUCCESS){
 			setIPv4Obj(Jobj, action, ipIface);
 			setDnsObj(Jobj, action, ipIface);
@@ -613,11 +666,260 @@
 	return ret;	
 }	
 
+zcfgRet_t zcfgFeDal_WwanBackup_Get(struct json_object *Jobj, struct json_object *Jarray, char *replyMsg){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	struct json_object *paramJobj = NULL, *ipIfaceV4Obj = NULL, *dnsObj = NULL, *pppIfaceObj = NULL, *pingObj = NULL, *emailObj = NULL, *budgetObj = NULL;
+	struct json_object *wwanBackupObj = NULL;
+	objIndex_t wwanBackupIid = {0}, ipIfaceV4Iid = {0}, dnsIid = {0}, pppIfaceIid = {0}, pingIid = {0}, emailIid = {0}, budgetIid = {0};
+	paramJobj = json_object_new_object();
+	const char *curIpIface = NULL, *curPPPIface = NULL, *ConnectionTrigger = NULL;
+	char *dnsServer = NULL, *secondaryDns = NULL, *primaryDns = NULL;
+	char ipIface[32] = {0}, pppIface[32] = {0};	
+	bool staticDns = false;
+	int disconnectTime = 0;
+
+	if(zcfgFeObjJsonGetWithoutUpdate(RDM_OID_ZY_W_W_A_N_BACKUP, &wwanBackupIid, &wwanBackupObj) == ZCFG_SUCCESS){
+		json_object_object_add(paramJobj, "BackupEnable", JSON_OBJ_COPY(json_object_object_get(wwanBackupObj, "Enable")));
+		json_object_object_add(paramJobj, "DialNumber", JSON_OBJ_COPY(json_object_object_get(wwanBackupObj, "DialNumber")));
+		json_object_object_add(paramJobj, "APN", JSON_OBJ_COPY(json_object_object_get(wwanBackupObj, "APN")));
+		json_object_object_add(paramJobj, "PIN", JSON_OBJ_COPY(json_object_object_get(wwanBackupObj, "PIN")));
+		json_object_object_add(paramJobj, "Manufacturer", JSON_OBJ_COPY(json_object_object_get(wwanBackupObj, "Manufacturer")));
+		curIpIface = json_object_get_string(json_object_object_get(wwanBackupObj, "Interface"));
+		curPPPIface = json_object_get_string(json_object_object_get(wwanBackupObj, "PPPInterface"));
+		strcpy(ipIface, curIpIface);
+		strcpy(pppIface, curPPPIface);
+
+		zcfgFeJsonObjFree(wwanBackupObj);
+	}
+
+	ipIfaceV4Iid.level = 2;
+	sscanf(ipIface, "IP.Interface.%hhu", &ipIfaceV4Iid.idx[0]);
+	ipIfaceV4Iid.idx[1] = 1;
+	if(zcfgFeObjJsonGetWithoutUpdate(RDM_OID_IP_IFACE_V4_ADDR, &ipIfaceV4Iid, &ipIfaceV4Obj) == ZCFG_SUCCESS){
+		json_object_object_add(paramJobj, "IPType", json_object_new_string("Static"));
+		json_object_object_add(paramJobj, "IPAddr", JSON_OBJ_COPY(json_object_object_get(ipIfaceV4Obj, "IPAddress")));
+		json_object_object_add(paramJobj, "SubMask", JSON_OBJ_COPY(json_object_object_get(ipIfaceV4Obj, "SubnetMask")));
+		zcfgFeJsonObjFree(ipIfaceV4Obj);
+	}
+	else
+		json_object_object_add(paramJobj, "IPType", json_object_new_string("Automatically"));
+
+	while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_DNS_CLIENT_SRV, &dnsIid, &dnsObj) == ZCFG_SUCCESS){
+		if(!strcmp(ipIface,json_object_get_string(json_object_object_get(dnsObj, "Interface")))){
+			dnsServer = json_object_get_string(json_object_object_get(dnsObj, "DNSServer"));
+			primaryDns = strtok_r(dnsServer, ",", &secondaryDns);
+			json_object_object_add(paramJobj, "DNSType", json_object_new_string("Static DNS"));
+			json_object_object_add(paramJobj, "PrimaryDns", json_object_new_string(primaryDns));
+			if(secondaryDns)
+				json_object_object_add(paramJobj, "SecondaryDns", json_object_new_string(secondaryDns));
+			else
+				json_object_object_add(paramJobj, "SecondaryDns", json_object_new_string(""));
+			staticDns = true;
+			zcfgFeJsonObjFree(dnsObj);
+			break;
+		}
+		zcfgFeJsonObjFree(dnsObj);
+	}
+	if(!staticDns)
+		json_object_object_add(paramJobj, "DNSType", json_object_new_string("Dynamically DNS"));
+
+	pppIfaceIid.level = 1;
+	sscanf(pppIface, "PPP.Interface.%hhu", &pppIfaceIid.idx[0]);
+	if(zcfgFeObjJsonGetWithoutUpdate(RDM_OID_PPP_IFACE, &pppIfaceIid, &pppIfaceObj) == ZCFG_SUCCESS){
+		json_object_object_add(paramJobj, "Username", JSON_OBJ_COPY(json_object_object_get(pppIfaceObj, "Username")));
+		json_object_object_add(paramJobj, "Password", JSON_OBJ_COPY(json_object_object_get(pppIfaceObj, "Password")));
+		ConnectionTrigger = json_object_get_string(json_object_object_get(pppIfaceObj, "ConnectionTrigger"));
+		if(!strcmp(ConnectionTrigger, "OnDemand")){
+			json_object_object_add(paramJobj, "ConnectionTrigger", json_object_new_string("On Demand"));
+			disconnectTime = json_object_get_int(json_object_object_get(pppIfaceObj, "IdleDisconnectTime"));
+			if(disconnectTime != 0)
+				disconnectTime = disconnectTime/60;
+			json_object_object_add(paramJobj, "DisconnectionTime",json_object_new_int(disconnectTime));
+		}
+		else
+			json_object_object_add(paramJobj, "ConnectionTrigger", json_object_new_string("Nailed Up"));
+		zcfgFeJsonObjFree(pppIfaceObj);
+	}
+	if(zcfgFeObjJsonGetWithoutUpdate(RDM_OID_ZY_W_W_A_N_PING_CHECK, &pingIid, &pingObj) == ZCFG_SUCCESS){
+		json_object_object_add(paramJobj, "PingEnable", JSON_OBJ_COPY(json_object_object_get(pingObj, "Enable")));
+		json_object_object_add(paramJobj, "Interval", JSON_OBJ_COPY(json_object_object_get(pingObj, "Interval")));
+		json_object_object_add(paramJobj, "FailLimit", JSON_OBJ_COPY(json_object_object_get(pingObj, "FailLimit")));
+		json_object_object_add(paramJobj, "DefaultGateway", JSON_OBJ_COPY(json_object_object_get(pingObj, "DefaultGateway")));
+		json_object_object_add(paramJobj, "Destination", JSON_OBJ_COPY(json_object_object_get(pingObj, "Destination")));
+		zcfgFeJsonObjFree(pingObj);
+	}
+
+	while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_MAIL_EVENT_CFG, &emailIid, &emailObj) == ZCFG_SUCCESS){
+		if(!strcmp("MAILSEND_EVENT_3G_UP", json_object_get_string(json_object_object_get(emailObj, "Event")))){
+			json_object_object_add(paramJobj, "3GUP_Enable", JSON_OBJ_COPY(json_object_object_get(emailObj, "Enable")));
+			json_object_object_add(paramJobj, "3GUP_EmailTo", JSON_OBJ_COPY(json_object_object_get(emailObj, "EmailTo")));
+			json_object_object_add(paramJobj, "3GUP_EmailSubject", JSON_OBJ_COPY(json_object_object_get(emailObj, "EmailSubject")));
+			json_object_object_add(paramJobj, "3GUP_SericeRef", JSON_OBJ_COPY(json_object_object_get(emailObj, "SericeRef")));
+		}
+		if(!strcmp("MAILSEND_EVENT_3G_BUDGET", json_object_get_string(json_object_object_get(emailObj, "Event")))){
+			json_object_object_add(paramJobj, "3GBUDGET_Enable", JSON_OBJ_COPY(json_object_object_get(emailObj, "Enable")));
+			json_object_object_add(paramJobj, "3GBUDGET_EmailTo", JSON_OBJ_COPY(json_object_object_get(emailObj, "EmailTo")));
+			json_object_object_add(paramJobj, "3GBUDGET_EmailSubject", JSON_OBJ_COPY(json_object_object_get(emailObj, "EmailSubject")));
+			json_object_object_add(paramJobj, "3GBUDGET_SericeRef", JSON_OBJ_COPY(json_object_object_get(emailObj, "SericeRef")));
+		}
+		zcfgFeJsonObjFree(emailObj);
+	}
+
+	if(zcfgFeObjJsonGetWithoutUpdate(RDM_OID_ZY_W_W_A_N_BUDGET_CONTROL, &budgetIid, &budgetObj) == ZCFG_SUCCESS){
+		json_object_object_add(paramJobj, "BUDGET_Enable", JSON_OBJ_COPY(json_object_object_get(budgetObj, "Enable")));
+		json_object_object_add(paramJobj, "BUDGET_TimeEnable", JSON_OBJ_COPY(json_object_object_get(budgetObj, "TimeEnable")));
+		json_object_object_add(paramJobj, "BUDGET_TimeValue", JSON_OBJ_COPY(json_object_object_get(budgetObj, "TimeValue")));
+		json_object_object_add(paramJobj, "BUDGET_ByteEnable", JSON_OBJ_COPY(json_object_object_get(budgetObj, "ByteEnable")));
+		json_object_object_add(paramJobj, "BUDGET_ByteValue", JSON_OBJ_COPY(json_object_object_get(budgetObj, "ByteValue")));
+		json_object_object_add(paramJobj, "BUDGET_ByteMode", JSON_OBJ_COPY(json_object_object_get(budgetObj, "ByteMode")));
+		json_object_object_add(paramJobj, "BUDGET_PktEnable", JSON_OBJ_COPY(json_object_object_get(budgetObj, "PktEnable")));
+		json_object_object_add(paramJobj, "BUDGET_PktValue", JSON_OBJ_COPY(json_object_object_get(budgetObj, "PktValue")));
+		json_object_object_add(paramJobj, "BUDGET_PktMode", JSON_OBJ_COPY(json_object_object_get(budgetObj, "PktMode")));
+		json_object_object_add(paramJobj, "BUDGET_ResetDay", JSON_OBJ_COPY(json_object_object_get(budgetObj, "ResetDay")));
+		json_object_object_add(paramJobj, "BUDGET_TimeActionEnable", JSON_OBJ_COPY(json_object_object_get(budgetObj, "TimeActionEnable")));
+		json_object_object_add(paramJobj, "BUDGET_TimeActionValue", JSON_OBJ_COPY(json_object_object_get(budgetObj, "TimeActionValue")));
+		json_object_object_add(paramJobj, "BUDGET_ByteActionEnable", JSON_OBJ_COPY(json_object_object_get(budgetObj, "ByteActionEnable")));
+		json_object_object_add(paramJobj, "BUDGET_ByteActionValue", JSON_OBJ_COPY(json_object_object_get(budgetObj, "ByteActionValue")));
+		json_object_object_add(paramJobj, "BUDGET_PktActionEnable", JSON_OBJ_COPY(json_object_object_get(budgetObj, "PktActionEnable")));
+		json_object_object_add(paramJobj, "BUDGET_PktActionValue", JSON_OBJ_COPY(json_object_object_get(budgetObj, "PktActionValue")));
+		json_object_object_add(paramJobj, "BUDGET_DropWWAN", JSON_OBJ_COPY(json_object_object_get(budgetObj, "DropWWAN")));
+		json_object_object_add(paramJobj, "BUDGET_LogEnable", JSON_OBJ_COPY(json_object_object_get(budgetObj, "LogEnable")));
+		json_object_object_add(paramJobj, "BUDGET_LogInterval", JSON_OBJ_COPY(json_object_object_get(budgetObj, "LogInterval")));
+		zcfgFeJsonObjFree(budgetObj);
+	}
+	json_object_array_add(Jarray, paramJobj);
+	return ret;
+}
+
+void zcfgFeDalShowWwanBackup(struct json_object *Jarray){
+	struct json_object *obj = NULL;
+	const char *password = NULL, *pin = NULL, *byteMode = NULL, *pktMode = NULL;
+	if(json_object_get_type(Jarray) != json_type_array){
+		printf("wrong Jobj format!\n");
+		return;
+	}
+	obj = json_object_array_get_idx(Jarray, 0);
+	password = json_object_get_string(json_object_object_get(obj, "Password"));
+	pin = json_object_get_string(json_object_object_get(obj, "PIN"));
+	if(!strcmp("DownUp", json_object_get_string(json_object_object_get(obj, "BUDGET_ByteMode"))))
+		byteMode = "Download/Upload";
+	else if(!strcmp("Down", json_object_get_string(json_object_object_get(obj, "BUDGET_ByteMode"))))
+		byteMode = "Download";
+	else if(!strcmp("Up", json_object_get_string(json_object_object_get(obj, "BUDGET_ByteMode"))))
+		byteMode = "Upload";
+	if(!strcmp("DownUp", json_object_get_string(json_object_object_get(obj, "BUDGET_PktMode"))))
+		pktMode = "Download/Upload";
+	else if(!strcmp("Down", json_object_get_string(json_object_object_get(obj, "BUDGET_PktMode"))))
+		pktMode = "Download";
+	else if(!strcmp("Up", json_object_get_string(json_object_object_get(obj, "BUDGET_PktMode"))))
+		pktMode = "Upload";
+	printf("Cellular Backup General: \n");
+	printf("%-30s %-10s \n","Cellular Backup:", json_object_get_string(json_object_object_get(obj, "BackupEnable")));
+	printf("\nTrigger Cellular backup when physical link of primary WAN is down \n");
+	printf("%-30s %-10s \n","Ping Check:", json_object_get_string(json_object_object_get(obj, "PingEnable")));
+	printf("%-30s %-10s \n","Check Cycle:", json_object_get_string(json_object_object_get(obj, "Interval")));
+	printf("%-30s %-10s \n","Consecutive Fail:", json_object_get_string(json_object_object_get(obj, "FailLimit")));
+	if(json_object_get_boolean(json_object_object_get(obj, "DefaultGateway")))
+		printf("Ping Default Gateway. \n");
+	else 
+		printf("%-30s %-10s \n","Ping Host:", json_object_get_string(json_object_object_get(obj, "Destination")));
+	
+	printf("\nCellular Connection Settings: \n");
+	if(!strcmp("",json_object_get_string(json_object_object_get(obj, "Manufacturer"))))
+		printf("%-30s %-10s \n","Card Description:", "N/A");
+	else
+		printf("%-30s %-10s \n","Card Description:", json_object_get_string(json_object_object_get(obj, "Manufacturer")));
+	printf("%-30s %-10s \n","Username:", json_object_get_string(json_object_object_get(obj, "Username")));
+	if(!strcmp("",password))
+		printf("%-30s \n","Password:");
+	else
+		printf("%-30s %-10s\n","Password :","********");
+	if(!strcmp("",pin))
+		printf("%-30s \n","PIN:");
+	else
+		printf("%-30s %-10s\n","PIN :","********");
+	printf("%-30s %-10s \n","Dial String:", json_object_get_string(json_object_object_get(obj, "DialNumber")));
+	printf("%-30s %-10s \n","APN:", json_object_get_string(json_object_object_get(obj, "APN")));
+	if(!strcmp("Nailed Up",json_object_get_string(json_object_object_get(obj, "ConnectionTrigger"))))
+		printf("%-30s %-10s \n","Connection:", json_object_get_string(json_object_object_get(obj, "ConnectionTrigger")));
+	else{
+		printf("%-30s %-10s \n","Connection:", json_object_get_string(json_object_object_get(obj, "ConnectionTrigger")));
+		printf("%-3s %-20s %-6s \n","","Max Idle Timeout:",json_object_get_string(json_object_object_get(obj, "DisconnectionTime")));
+	}
+	if(!strcmp("Automatically",json_object_get_string(json_object_object_get(obj, "IPType"))))
+		printf("Obtain an IP Address Automatically. \n");
+	else{ 
+		printf("Use the Following Static IP Address: \n");
+		printf("%-3s %-20s %-6s\n","","IP Address:",json_object_get_string(json_object_object_get(obj, "IPAddr")));
+		printf("%-3s %-20s %-6s\n","","Subnet Mask:",json_object_get_string(json_object_object_get(obj, "SubMask")));
+	}
+	if(!strcmp("Dynamically DNS",json_object_get_string(json_object_object_get(obj, "DNSType"))))
+		printf("Obtain DNS Info Dynamically. \n");
+	else{ 
+		printf("Use the Following Static DNS IP Address: \n");
+		printf("%-3s %-20s %-6s\n","","Primary DNS Server:",json_object_get_string(json_object_object_get(obj, "PrimaryDns")));
+		printf("%-3s %-20s %-6s\n","","Secondary DNS Server:",json_object_get_string(json_object_object_get(obj, "SecondaryDns")));
+	}
+	if(!json_object_get_boolean(json_object_object_get(obj, "3GUP_Enable")))
+		printf("%-30s %-10s \n","Enable E-mail Notification:", json_object_get_string(json_object_object_get(obj, "3GUP_Enable")));
+	else{
+		printf("%-30s %-10s \n","Enable E-mail Notification:", json_object_get_string(json_object_object_get(obj, "3GUP_Enable")));
+		printf("%-30s %-10s \n","Mail Account:", json_object_get_string(json_object_object_get(obj, "3GUP_SericeRef")));
+		printf("%-30s %-10s \n","Cellular Backup E-mail Title:", json_object_get_string(json_object_object_get(obj, "3GUP_EmailSubject")));
+		printf("%-30s %-10s \n","Send Notification to E-mail:", json_object_get_string(json_object_object_get(obj, "3GUP_EmailTo")));
+	}
+	
+	printf("\nBudget Setup: \n");
+	printf("%-30s %-10s \n","Enable Budget Control:", json_object_get_string(json_object_object_get(obj, "BUDGET_Enable")));
+	printf("%-10s %-8s %s %s\n","Time Budget:",json_object_get_string(json_object_object_get(obj, "BUDGET_TimeEnable")),json_object_get_string(json_object_object_get(obj, "BUDGET_TimeValue")),"hours per month.");
+	printf("%-10s %-8s %s %s%s %s\n","Data Budget:",json_object_get_string(json_object_object_get(obj, "BUDGET_ByteEnable")),json_object_get_string(json_object_object_get(obj, "BUDGET_ByteValue")),"Mbytes ", byteMode,"per month.");
+	printf("%-10s %-8s %s %s%s %s\n","Data Budget:",json_object_get_string(json_object_object_get(obj, "BUDGET_PktEnable")),json_object_get_string(json_object_object_get(obj, "BUDGET_PktValue")),"kPackets ", pktMode,"per month.");
+	if(strcmp("0",json_object_get_string(json_object_object_get(obj, "BUDGET_ResetDay"))))
+		printf("Reset all budget counters on last day of the month.\n");
+	else
+		printf("Reset all budget counters on %s day of the month.\n",json_object_get_string(json_object_object_get(obj, "BUDGET_ResetDay")));
+	printf("\nActions before over budget:\n");	
+	if(json_object_get_boolean(json_object_object_get(obj, "BUDGET_TimeActionEnable")))
+		printf("Enable %s of time budget.\n",json_object_get_string(json_object_object_get(obj, "BUDGET_TimeActionValue")));
+	else
+		printf("Disable %s of time budget.\n",json_object_get_string(json_object_object_get(obj, "BUDGET_TimeActionValue")));
+	if(json_object_get_boolean(json_object_object_get(obj, "BUDGET_ByteActionEnable")))
+		printf("Enable %s of data budget (Mbytes).\n",json_object_get_string(json_object_object_get(obj, "BUDGET_ByteActionValue")));
+	else
+		printf("Disable %s of data budget (Mbytes).\n",json_object_get_string(json_object_object_get(obj, "BUDGET_ByteActionValue")));
+	if(json_object_get_boolean(json_object_object_get(obj, "BUDGET_PktActionEnable")))
+		printf("Enable %s of data budget (Packets).\n",json_object_get_string(json_object_object_get(obj, "BUDGET_PktActionValue")));
+	else
+		printf("Disable %s of data budget (Packets).\n",json_object_get_string(json_object_object_get(obj, "BUDGET_PktActionValue")));
+	printf("\nActions when over budget:\n");
+	if(json_object_get_boolean(json_object_object_get(obj, "BUDGET_DropWWAN")))
+		printf("Current Cellular Connection Drop. \n");
+	else
+		printf("Current Cellular Connection Keep. \n");
+	if(json_object_get_boolean(json_object_object_get(obj, "BUDGET_LogEnable")))
+		printf("Enable Log: Interval %s minutes. \n",json_object_get_string(json_object_object_get(obj, "BUDGET_LogInterval")));
+	else
+		printf("Disable Log. \n");
+	if(!json_object_get_boolean(json_object_object_get(obj, "3GBUDGET_Enable")))
+		printf("%-30s %-10s \n","Enable E-mail Notification:", json_object_get_string(json_object_object_get(obj, "3GBUDGET_Enable")));
+	else{
+		printf("%-30s %-10s \n","Enable E-mail Notification:", json_object_get_string(json_object_object_get(obj, "3GBUDGET_Enable")));
+		printf("%-30s %-10s \n","Mail Account:", json_object_get_string(json_object_object_get(obj, "3GBUDGET_SericeRef")));
+		printf("%-30s %-10s \n","Cellular Backup E-mail Title:", json_object_get_string(json_object_object_get(obj, "3GBUDGET_EmailSubject")));
+		printf("%-30s %-10s \n","Send Notification to E-mail:", json_object_get_string(json_object_object_get(obj, "3GBUDGET_EmailTo")));
+	}
+	
+}
+
+
+
 zcfgRet_t zcfgFeDalWwanBackup(const char *method, struct json_object *Jobj,  struct json_object *Jarray, char *replyMsg){
 	zcfgRet_t ret = ZCFG_SUCCESS;
 
 	if(!strcmp(method, "PUT"))
 		ret = zcfgFeDal_WwanBackup_Edit(Jobj, NULL);
+	else if(!strcmp(method, "GET"))
+		ret = zcfgFeDal_WwanBackup_Get(Jobj, Jarray, NULL);
 	else
 		printf("Unknown method:%s\n", method);
 
Index: libzcfg_fe_dal-1.0/zcfg_fe_dal.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/zcfg_fe_dal.c	2017-07-18 18:34:25.209525744 +0800
+++ libzcfg_fe_dal-1.0/zcfg_fe_dal.c	2017-07-18 18:38:22.726466800 +0800
@@ -209,6 +209,7 @@
 extern void zcfgFeDalShowQosGeneral(struct json_object *Jarray);
 extern void zcfgFeDalShowQosShaper(struct json_object *Jarray);
 extern void zcfgFeDalShowQosQueue(struct json_object *Jarray);
+extern void zcfgFeDalShowWwanBackup(struct json_object *Jarray);
 dal_handler_t dalHandler[] = {
 {"wan",				WAN_param,			zcfgFeDalWan,			zcfgFeDalShowWan,			"get|add|edit|delete",	"Broadband"},
 {"tr69",			MGMT_param,			zcfgFeDalMgmt,			zcfgFeDalShowMgmt,			"get|edit",			"TR-069_Client"},
@@ -216,7 +217,7 @@
 {"dns",				DNS_ENTRY_param,	zcfgFeDalDnsEntry,		zcfgFeDalShowDnsEntry,		"get|add|edit|delete",	"DNS"}, //DNS
 {"ddns",			D_DNS_param,		zcfgFeDalDDns,			zcfgFeDalShowDDns,			"get|edit",			"DNS"},
 {"wan_adv",			ADVANCE_param,		zcfgFeDalWanAdvance,	zcfgFeDalShowWanAdvance,	"get|edit",				"Broadband"}, //Broadband
-{"WWANBACKUP", 		WWANBACKUP_param,	zcfgFeDalWwanBackup,	NULL,						"edit",				""}, //Broadband
+{"cellular", 		WWANBACKUP_param,	zcfgFeDalWwanBackup,	zcfgFeDalShowWwanBackup,	"get|edit",				"Broadband"}, //Broadband
 {"ethctl",			ETH_CTL_param,		zcfgFeDalEthCtl,		zcfgFeDalShowEthCtl,		"get|edit",				"ethctl"}, //ETHCTL command
 {"static_route", 	STATICROUTE_param,	zcfgFeDalStaticRoute,	zcfgFeDalShowStaticRoute,	"get|add|edit|delete",	"Routing"},
 {"dns_route", 		DNSROUTE_param,		zcfgFeDalDnsRoute,		zcfgFeDalShowDnsRoute,		"get|add|edit|delete",	"Routing"}, //Routing
@@ -397,6 +398,19 @@
 	return ZCFG_SUCCESS;
 }
 
+zcfgRet_t getEmailList(struct json_object **Jarray){
+	struct json_object *obj = NULL;
+	objIndex_t iid;
+	*Jarray = json_object_new_array();
+
+	IID_INIT(iid);
+	while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_MAIL_SERVICE, &iid, &obj) == ZCFG_SUCCESS){	
+		json_object_object_add(obj, "emailAddress", JSON_OBJ_COPY(json_object_object_get(obj, "EmailAddress")));
+		json_object_array_add(*Jarray, obj);
+	}
+	return ZCFG_SUCCESS;
+}
+
 
 //Suppose parameter need to check is string.
 zcfgRet_t dalcmdParamCheck(objIndex_t *Iid, const char *param, zcfg_offset_t oid, char *key, char *key1, char *replyMsg){
@@ -898,6 +912,44 @@
 	return false;
 }
 
+bool validateEmailAddr(const char *emailAddr){
+	char buff[128] = {0}, tmp1[128] = {0}, tmp2[128] = {0}, tmp3[128] = {0};
+    char *temp1 = NULL, *temp2 = NULL, *temp3 = NULL;
+	int i, count = 0;
+    strcpy(buff, emailAddr);
+    temp1 = strtok_r(buff, "@", &temp2);
+	if(!temp1)
+		return false;
+	strcpy(tmp1,temp1);
+	for(i = 0; tmp1[i] != 0; i++){
+		if(tmp1[i] < 45 || tmp1[i] == 47 || (57 < tmp1[i] && tmp1[i] < 65) || (90 < tmp1[i] && tmp1[i] < 95) || tmp1[i] == 96 || tmp1[i] > 122)
+        	return false;
+    }	
+    temp3 = strtok_r(temp2, ".", &temp2);
+	if(!strcmp(temp2,""))
+		return false;
+    while(temp3 != NULL){
+		if(strlen(temp3) < 2)
+			return false;
+		strcpy(tmp3,temp3);
+		if(count == 0){
+			for(i = 0; tmp3[i] != 0; i++){
+		        if(tmp3[i] < 45 || tmp3[i] == 46 || tmp3[i] == 47 || (57 < tmp3[i] && tmp3[i] < 65) || (90 < tmp3[i] && tmp3[i] < 95) || tmp3[i] == 96 || tmp3[i] > 122)
+					return false;
+		    }
+		}
+		else{
+			for(i = 0; tmp3[i] != 0; i++){
+		        if(tmp3[i] < 47 || (57 < tmp3[i] && tmp3[i] < 65) || (90 < tmp3[i] && tmp3[i] < 97) || tmp3[i] > 123)
+		            return false;
+		    }
+		}
+		count++;
+		temp3 = strtok_r(temp2, ".", &temp2);
+	}
+    return true;
+}
+
 bool validateIPv6(const char *ipStr){
 
 	struct in6_addr ip6addr;
Index: libzcfg_fe_dal-1.0/zcfg_fe_dal_common.h
===================================================================
--- libzcfg_fe_dal-1.0.orig/zcfg_fe_dal_common.h	2017-07-18 18:34:25.049525747 +0800
+++ libzcfg_fe_dal-1.0/zcfg_fe_dal_common.h	2017-07-18 18:38:42.577466800 +0800
@@ -98,7 +98,9 @@
 	dalType_VoipProvider,				//Service provider
 	dalType_MultiVoipLine,
 	dalType_ICMPv6,						//Firewall ICMPv6 list 
-	dalType_LocalCert
+	dalType_LocalCert,
+	dalType_emailAddr,					//call validateEmailAddr to check email is correct or not
+	dalType_emailList					//list Email account and check email validation
 };
 
 bool getSpecificObj(zcfg_offset_t oid, char *key, json_type type, void *value, objIndex_t *outIid, struct json_object **outJobj);
