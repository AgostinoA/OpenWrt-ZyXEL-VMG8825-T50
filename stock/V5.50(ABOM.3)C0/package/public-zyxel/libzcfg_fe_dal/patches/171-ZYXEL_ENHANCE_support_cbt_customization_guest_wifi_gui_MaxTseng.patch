Index: libzcfg_fe_dal-1.0/network/wireless/zcfg_fe_dal_wifi_general.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/network/wireless/zcfg_fe_dal_wifi_general.c	2017-05-09 15:34:50.331087741 +0800
+++ libzcfg_fe_dal-1.0/network/wireless/zcfg_fe_dal_wifi_general.c	2017-05-09 15:53:24.739093908 +0800
@@ -76,6 +76,17 @@
 struct json_object *wifiApObj = NULL;
 struct json_object *wifiSecObj = NULL;
 struct json_object *wifiSubnetObj = NULL;
+#ifdef CBT_CUSTOMIZATION // 20170425 Max Add
+struct json_object *guestSsidObj = NULL;
+struct json_object *guest5GSsidObj = NULL;
+struct json_object *guestApObj = NULL;
+struct json_object *guest5GApObj = NULL;
+struct json_object *guestSecObj = NULL;
+struct json_object *guest5GSecObj = NULL;
+struct json_object *guestSubnetObj = NULL;
+struct json_object *guest5GSubnetObj = NULL;
+struct json_object *guestDevInfoObj = NULL;
+#endif
 
 objIndex_t wifiRadioIid = {0};
 objIndex_t wifiSsidIid = {0};
@@ -83,6 +94,17 @@
 objIndex_t wifiApIid = {0};
 objIndex_t wifiSecIid = {0};
 objIndex_t wifiSubnetIid = {0};
+#ifdef CBT_CUSTOMIZATION // 20170425 Max Add
+objIndex_t guestSsidIid = {0};
+objIndex_t guest5GSsidIid = {0};
+objIndex_t guestApIid = {0};
+objIndex_t guest5GApIid = {0};
+objIndex_t guestSecIid = {0};
+objIndex_t guest5GSecIid = {0};
+objIndex_t guestSubnetIid = {0};
+objIndex_t guest5GSubnetIid = {0};
+objIndex_t guestDevInfoIid = {0};
+#endif
 
 
 unsigned int SLIDER_POS_NONE = 43;
@@ -97,6 +119,14 @@
 bool X_ZYXEL_Multicast_Fwd;
 unsigned int upRate;
 unsigned int downRate;
+#ifdef CBT_CUSTOMIZATION // 20170425 Max Add
+bool guestSameSsid;
+bool guestEnable;
+const char* guestSsid;
+const char* guest5GSsid;
+bool guestWifiConfig;
+unsigned int guestCountdownTime = 0;
+#endif
 //WiFi Radio
 bool div_wifiAdvance;
 unsigned int bandwidth;
@@ -107,6 +137,10 @@
 bool wlHide;
 const char* wlGwMode;
 bool wlEnableGuest;
+#ifdef CBT_CUSTOMIZATION
+bool guestSsidHide;
+bool guest5GSsidHide;
+#endif
 //WiFi Access Point Sec
 int secMode;
 const char* wep;
@@ -123,6 +157,9 @@
 const char* wpaMode;
 bool X_ZYXEL_AutoGenPSK;
 const char* psk_value;
+#ifdef CBT_CUSTOMIZATION
+const char* guestPskValue;
+#endif
 unsigned int RekeyingInterval;
 const char* RadiusServerIPAddr;
 unsigned int RadiusServerPort;
@@ -268,13 +305,64 @@
 
 zcfgRet_t setAllWlObjects(struct json_object *Jobj){
 	zcfgRet_t ret = ZCFG_SUCCESS;
-	
+#ifdef CBT_CUSTOMIZATION
+	if(guestWifiConfig == true){ // CBT Guest Wi-Fi
+		// 2.4G
+		if(guestApObj) zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_ACCESS_POINT, &guestApIid, guestApObj, NULL);
+		if(guestSecObj) zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_ACCESS_POINT_SEC, &guestSecIid, guestSecObj, NULL);
+		if(guestSsidObj) zcfgFeObjJsonSet(RDM_OID_WIFI_SSID, &guestSsidIid, guestSsidObj, NULL);
+		if(guestSubnetObj) zcfgFeObjJsonSet(RDM_OID_DHCPV4_SRV_SUBNET, &guestSubnetIid, guestSubnetObj, NULL);
+		// 5G
+		if(guest5GApObj) zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_ACCESS_POINT, &guest5GApIid, guest5GApObj, NULL);
+		if(guest5GSecObj) zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_ACCESS_POINT_SEC, &guest5GSecIid, guest5GSecObj, NULL);
+		if(guest5GSsidObj) zcfgFeObjJsonSet(RDM_OID_WIFI_SSID, &guest5GSsidIid, guest5GSsidObj, NULL);
+		if(guest5GSubnetObj) zcfgFeObjJsonSet(RDM_OID_DHCPV4_SRV_SUBNET, &guest5GSubnetIid, guest5GSubnetObj, NULL);
+	}else{ // general wireless
+		if (wifiRadioObj == NULL)
+		{
+			if(wifiSsidObj == NULL) 
+			{
+				if(wifiApObj == NULL)
+				{
+					if(wifiSecObj == NULL)
+					{
+						if(wifiApWpsObj)zcfgFeObjJsonSet(RDM_OID_WIFI_ACCESS_POINT_WPS, &wifiApWpsIid, wifiApWpsObj, NULL);
+					}
+					else {
+						if(wifiApWpsObj)zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_ACCESS_POINT_WPS, &wifiApWpsIid, wifiApWpsObj, NULL);
+						if(wifiSecObj) zcfgFeObjJsonSet(RDM_OID_WIFI_ACCESS_POINT_SEC, &wifiSecIid, wifiSecObj, NULL);
+					}
+				}
+				else {
+					if(wifiApWpsObj) zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_ACCESS_POINT_WPS, &wifiApWpsIid, wifiApWpsObj, NULL);
+					if(wifiSecObj) zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_ACCESS_POINT_SEC, &wifiSecIid, wifiSecObj, NULL);
+					if(wifiApObj) zcfgFeObjJsonSet(RDM_OID_WIFI_ACCESS_POINT, &wifiApIid, wifiApObj, NULL);
+				}
+			
+			}
+			else {
+				if(wifiApWpsObj) zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_ACCESS_POINT_WPS, &wifiApWpsIid, wifiApWpsObj, NULL);
+				if(wifiApObj) zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_ACCESS_POINT, &wifiApIid, wifiApObj, NULL);
+				if(wifiSecObj) zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_ACCESS_POINT_SEC, &wifiSecIid, wifiSecObj, NULL);
+				if(wifiSsidObj) zcfgFeObjJsonSet(RDM_OID_WIFI_SSID, &wifiSsidIid, wifiSsidObj, NULL);
+			}
+		}
+		else {
+			if(wifiApWpsObj) zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_ACCESS_POINT_WPS, &wifiApWpsIid, wifiApWpsObj, NULL);
+			if(wifiApObj) zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_ACCESS_POINT, &wifiApIid, wifiApObj, NULL);
+			if(wifiSecObj) zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_ACCESS_POINT_SEC, &wifiSecIid, wifiSecObj, NULL);
+			if(wifiSsidObj)zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_SSID, &wifiSsidIid, wifiSsidObj, NULL);
+			if(wifiRadioObj) zcfgFeObjJsonSet(RDM_OID_WIFI_RADIO, &wifiRadioIid, wifiRadioObj, NULL);
+		}
+		if(wifiSubnetObj) zcfgFeObjJsonSet(RDM_OID_DHCPV4_SRV_SUBNET, &wifiSubnetIid, wifiSubnetObj, NULL);
+	}
+#else
 	if(wifiApObj) zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_ACCESS_POINT, &wifiApIid, wifiApObj, NULL);
 	if(wifiSecObj) zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_ACCESS_POINT_SEC, &wifiSecIid, wifiSecObj, NULL);
 	if(wifiRadioObj) zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_RADIO, &wifiRadioIid, wifiRadioObj, NULL);
 	if(wifiSsidObj)zcfgFeObjJsonBlockedSet(RDM_OID_WIFI_SSID, &wifiSsidIid, wifiSsidObj, NULL);
 	if(wifiSubnetObj) zcfgFeObjJsonBlockedSet(RDM_OID_DHCPV4_SRV_SUBNET, &wifiSubnetIid, wifiSubnetObj, NULL);
-	
+#endif
 	return ret;
 }
 
@@ -287,13 +375,37 @@
 	if(wifiApObj) json_object_put(wifiApObj);
 	if(wifiSecObj) json_object_put(wifiSecObj);
 	if(wifiSubnetObj) json_object_put(wifiSubnetObj);
-	
+#ifdef CBT_CUSTOMIZATION // 20170426 Max Add
+	if(guestSsidObj) json_object_put(guestSsidObj);
+	if(guest5GSsidObj) json_object_put(guest5GSsidObj);
+	if(guestApObj) json_object_put(guestApObj);
+	if(guest5GApObj) json_object_put(guest5GApObj);
+	if(guestSecObj) json_object_put(guestSecObj);
+	if(guest5GSecObj) json_object_put(guest5GSecObj);
+	if(guestSubnetObj) json_object_put(guestSubnetObj);
+	if(guest5GSubnetObj) json_object_put(guest5GSubnetObj);
+	if(guestDevInfoObj) json_object_put(guestDevInfoObj);
+#endif
 	return ret;
 }
 
 
 void getBasicWlInfo(struct json_object *Jobj){
 	
+#ifdef CBT_CUSTOMIZATION // 20170425 Max Add
+	//true: CBT guest, false: general wireless or general guest
+	guestWifiConfig = json_object_get_boolean(json_object_object_get(Jobj, "cbtGuestWifi"));
+	if(guestWifiConfig == true){
+		guestEnable = json_object_get_boolean(json_object_object_get(Jobj, "cbtGuestEnable")); // Enable/Disable
+		guestSameSsid = json_object_get_boolean(json_object_object_get(Jobj, "cbtGuestSsidSame")); // 2.4G/5G the same SSID
+		guestSsid = json_object_get_string(json_object_object_get(Jobj, "cbtGuestWifiSsid")); // 2.4G SSID
+		guest5GSsid = json_object_get_string(json_object_object_get(Jobj, "cbtGuest5GWifiSsid")); // 5G SSID
+		guestSsidHide = json_object_get_boolean(json_object_object_get(Jobj, "cbtGuestSsidHide")); // 2.4G SSID hide
+		guest5GSsidHide = json_object_get_boolean(json_object_object_get(Jobj, "cbtGuest5GSsidHide")); // 5G SSID hide
+		guestPskValue = json_object_get_string(json_object_object_get(Jobj, "cbtGuestPskValue")); // 2.4G/5G password
+		guestCountdownTime = json_object_get_int(json_object_object_get(Jobj, "cbtGuestWifiTimes")); // countdown Time
+	}
+#endif
 	
 	wlEnable = json_object_get_boolean(json_object_object_get(Jobj, "wlEnable"));
 	SSID = json_object_get_string(json_object_object_get(Jobj, "SSID"));
@@ -369,13 +481,35 @@
 	wifiApObj = NULL;
 	wifiSecObj = NULL;
 	wifiSubnetObj = NULL;
+#ifdef CBT_CUSTOMIZATION // 20170425 Max Add
+	guestSsidObj = NULL;
+	guest5GSsidObj = NULL;
+	guestApObj = NULL;
+	guest5GApObj = NULL;
+	guestSecObj = NULL;
+	guest5GSecObj = NULL;
+	guestSubnetObj = NULL;
+	guest5GSubnetObj = NULL;
+	guestDevInfoObj = NULL;
+#endif
 	
 	IID_INIT(wifiRadioIid);
 	IID_INIT(wifiSsidIid);
 	IID_INIT(wifiApWpsIid);
 	IID_INIT(wifiApIid);
 	IID_INIT(wifiSecIid);
-	IID_INIT(wifiSubnetIid);	
+	IID_INIT(wifiSubnetIid);
+#ifdef CBT_CUSTOMIZATION // 20170425 Max Add
+	IID_INIT(guestSsidIid);
+	IID_INIT(guest5GSsidIid);
+	IID_INIT(guestApIid);
+	IID_INIT(guest5GApIid);
+	IID_INIT(guestSecIid);
+	IID_INIT(guest5GSecIid);
+	IID_INIT(guestSubnetIid);
+	IID_INIT(guest5GSubnetIid);
+	IID_INIT(guestDevInfoObj);
+#endif	
 }
 
 zcfgRet_t editWifiRadioObjects(struct json_object *Jobj){
@@ -422,7 +556,117 @@
 }
 
 zcfgRet_t editWifiSsidObjects(struct json_object *Jobj){
+#ifdef CBT_CUSTOMIZATION // 20170426 Max Add
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	struct json_object *iidArray = NULL;
+	uint8_t iidIdx =0;
+	const char *serialNum;
+	char tempSerial[6] = {0};
+	char temp5GSsid[32] = {0};
+	
+	if(guestWifiConfig == true){ // CBT guest Wi-Fi
+		
+		// 2.4G Iid
+		iidArray = json_object_object_get(Jobj, "cbtGuestWifiIid");
+		for(iidIdx=0;iidIdx<6;iidIdx++){
+			guestSsidIid.idx[iidIdx] = json_object_get_int( json_object_array_get_idx(iidArray, iidIdx));
+			if(guestSsidIid.idx[iidIdx] != 0)
+				guestSsidIid.level = iidIdx+1;
+		}
+		// 5G Iid
+		iidArray = json_object_object_get(Jobj, "cbtGuest5GWifiIid");
+		for(iidIdx=0;iidIdx<6;iidIdx++){
+			guest5GSsidIid.idx[iidIdx] = json_object_get_int( json_object_array_get_idx(iidArray, iidIdx));
+			if(guest5GSsidIid.idx[iidIdx] != 0)
+				guest5GSsidIid.level = iidIdx+1;
+		}
+
+		// 2.4G get data and set value to object
+		if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_SSID, &guestSsidIid, &guestSsidObj)) != ZCFG_SUCCESS) {
+			return ret;
+		}
+		json_object_object_add(guestSsidObj, "Enable", json_object_new_boolean(guestEnable));
+		json_object_object_add(guestSsidObj, "X_ZYXEL_Multicast_Fwd", json_object_new_boolean(X_ZYXEL_Multicast_Fwd));
+
+		if(upRate)
+			json_object_object_add(guestSsidObj, "X_ZYXEL_UpstreamRate", json_object_new_int(upRate));
+		else
+			json_object_object_add(guestSsidObj, "X_ZYXEL_UpstreamRate", json_object_new_int(0));
+
+		if(downRate)
+			json_object_object_add(guestSsidObj, "X_ZYXEL_DownstreamRate", json_object_new_int(downRate));
+		else
+			json_object_object_add(guestSsidObj, "X_ZYXEL_DownstreamRate", json_object_new_int(0));
+
+		json_object_object_add(guestSsidObj, "X_ZYXEL_GuestEnableTime", json_object_new_int(guestCountdownTime));
+
+		// 5G get data and set value to object
+		if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_SSID, &guest5GSsidIid, &guest5GSsidObj)) != ZCFG_SUCCESS) {
+			return ret;
+		}
+		json_object_object_add(guest5GSsidObj, "Enable", json_object_new_boolean(guestEnable));
+		json_object_object_add(guest5GSsidObj, "X_ZYXEL_Multicast_Fwd", json_object_new_boolean(X_ZYXEL_Multicast_Fwd));
+
+		if(upRate)
+			json_object_object_add(guest5GSsidObj, "X_ZYXEL_UpstreamRate", json_object_new_int(upRate));
+		else
+			json_object_object_add(guest5GSsidObj, "X_ZYXEL_UpstreamRate", json_object_new_int(0));
+
+		if(downRate)
+			json_object_object_add(guest5GSsidObj, "X_ZYXEL_DownstreamRate", json_object_new_int(downRate));
+		else
+			json_object_object_add(guest5GSsidObj, "X_ZYXEL_DownstreamRate", json_object_new_int(0));
+
+		json_object_object_add(guest5GSsidObj, "X_ZYXEL_GuestEnableTime", json_object_new_int(guestCountdownTime));
+
+		// The same SSID or not
+		if(guestSameSsid){ // 2.4G / 5G using the same SSID base on 2.4G SSID
+			json_object_object_add(guestSsidObj, "SSID", json_object_new_string(guestSsid));
+			json_object_object_add(guest5GSsidObj, "SSID", json_object_new_string(guestSsid));
+		}else{ // 2.4G / 5G using different SSID
+
+			json_object_object_add(guestSsidObj, "SSID", json_object_new_string(guestSsid));
+
+			//if(((ret = zyUtilIGetSerailNum(serialNum)) != ZCFG_SUCCESS) || strlen(serialNum) == 0)
+			//      return ret;
+			if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_DEV_INFO, &guestDevInfoIid, &guestDevInfoObj)) != ZCFG_SUCCESS) {
+				return ret;
+			}
+
+			serialNum = json_object_get_string(json_object_object_get(guestDevInfoObj, "SerialNumber"));
+
+			strncpy(tempSerial, serialNum + 8, 5);
+			sprintf(temp5GSsid, "Fioptics%s-Guest-5G", tempSerial);
+
+			json_object_object_add(guest5GSsidObj, "SSID", json_object_new_string(temp5GSsid));
+		}
 
+	}else{ // wireless general
+		iidArray = json_object_object_get(Jobj, "wlSsidIid");
+		for(iidIdx=0;iidIdx<6;iidIdx++){
+			wifiSsidIid.idx[iidIdx] = json_object_get_int( json_object_array_get_idx(iidArray, iidIdx));
+			if(wifiSsidIid.idx[iidIdx] != 0)
+				wifiSsidIid.level = iidIdx+1;
+		}
+
+		if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_SSID, &wifiSsidIid, &wifiSsidObj)) != ZCFG_SUCCESS) {
+			return ret;
+		}
+		json_object_object_add(wifiSsidObj, "Enable", json_object_new_boolean(wlEnable));
+		json_object_object_add(wifiSsidObj, "X_ZYXEL_Multicast_Fwd", json_object_new_boolean(X_ZYXEL_Multicast_Fwd));
+		json_object_object_add(wifiSsidObj, "SSID", json_object_new_string(SSID));
+
+		if(upRate)
+			json_object_object_add(wifiSsidObj, "X_ZYXEL_UpstreamRate", json_object_new_int(upRate));
+		else
+			json_object_object_add(wifiSsidObj, "X_ZYXEL_UpstreamRate", json_object_new_int(0));
+
+		if(downRate)
+			json_object_object_add(wifiSsidObj, "X_ZYXEL_DownstreamRate", json_object_new_int(downRate));
+		else
+			json_object_object_add(wifiSsidObj, "X_ZYXEL_DownstreamRate", json_object_new_int(0));
+	}
+#else
 	zcfgRet_t ret = ZCFG_SUCCESS;
 	struct json_object *iidArray = NULL;
 	uint8_t iidIdx =0;
@@ -450,7 +694,8 @@
 		json_object_object_add(wifiSsidObj, "X_ZYXEL_DownstreamRate", json_object_new_int(downRate));
 	else
 		json_object_object_add(wifiSsidObj, "X_ZYXEL_DownstreamRate", json_object_new_int(0));
-	
+#endif
+
 	return ret;
 }
 
@@ -459,10 +704,117 @@
 zcfgRet_t editWifiApObject(struct json_object *Jobj){
 
 	zcfgRet_t ret = ZCFG_SUCCESS;
-	struct json_object *iidArray = NULL;
-	
+	struct json_object *iidArray = NULL;	
 	uint8_t iidIdx =0;
+#ifdef CBT_CUSTOMIZATION // 20170426 Max Add
+	if(guestWifiConfig == true){ // CBT guest Wi-Fi
+		iidArray = json_object_object_get(Jobj, "cbtGuestWifiIid"); // 2.4G Iid
+		for(iidIdx=0;iidIdx<6;iidIdx++){
+			guestApIid.idx[iidIdx] = json_object_get_int( json_object_array_get_idx(iidArray, iidIdx));
+			if(guestApIid.idx[iidIdx] != 0)
+				guestApIid.level = iidIdx+1;
+		}
+		iidArray = json_object_object_get(Jobj, "cbtGuest5GWifiIid"); // 5G Iid
+		for(iidIdx=0;iidIdx<6;iidIdx++){
+			guest5GApIid.idx[iidIdx] = json_object_get_int( json_object_array_get_idx(iidArray, iidIdx));
+			if(guest5GApIid.idx[iidIdx] != 0)
+				guest5GApIid.level = iidIdx+1;
+		}
 
+		// 2.4G get data and set value to object
+		if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_ACCESS_POINT, &guestApIid, &guestApObj)) != ZCFG_SUCCESS) {
+			return ret;
+		}
+
+		json_object_object_add(guestApObj, "MaxAssociatedDevices", json_object_new_int(MaxAssociatedDevices));
+		if(guestSsidHide)
+			json_object_object_add(guestApObj, "SSIDAdvertisementEnabled", json_object_new_boolean(false));
+		else
+			json_object_object_add(guestApObj, "SSIDAdvertisementEnabled", json_object_new_boolean(true));
+		if(wlEnableGuest)
+		{
+			if(!strcmp(wlGwMode, "0"))
+			{
+				json_object_object_add(guestApObj, "IsolationEnable", json_object_new_boolean(true));
+				json_object_object_add(guestApObj, "X_ZYXEL_BssIdIsolation", json_object_new_boolean(true));
+			}
+			else
+			{
+				json_object_object_add(guestApObj, "IsolationEnable", json_object_new_boolean(false));
+				json_object_object_add(guestApObj, "X_ZYXEL_BssIdIsolation", json_object_new_boolean(true));
+			}
+		}
+		else
+		{
+			json_object_object_add(guestApObj, "IsolationEnable", json_object_new_boolean(false));
+			json_object_object_add(guestApObj, "X_ZYXEL_BssIdIsolation", json_object_new_boolean(false));
+		}
+
+		// 5G get data and set value to object
+		if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_ACCESS_POINT, &guest5GApIid, &guest5GApObj)) != ZCFG_SUCCESS) {
+			return ret;
+		}
+
+		json_object_object_add(guest5GApObj, "MaxAssociatedDevices", json_object_new_int(MaxAssociatedDevices));
+		if(guest5GSsidHide)
+			json_object_object_add(guest5GApObj, "SSIDAdvertisementEnabled", json_object_new_boolean(false));
+		else
+			json_object_object_add(guest5GApObj, "SSIDAdvertisementEnabled", json_object_new_boolean(true));
+		if(wlEnableGuest)
+		{
+			if(!strcmp(wlGwMode, "0"))
+			{
+				json_object_object_add(guest5GApObj, "IsolationEnable", json_object_new_boolean(true));
+				json_object_object_add(guest5GApObj, "X_ZYXEL_BssIdIsolation", json_object_new_boolean(true));
+			}
+			else
+			{
+				json_object_object_add(guest5GApObj, "IsolationEnable", json_object_new_boolean(false));
+				json_object_object_add(guest5GApObj, "X_ZYXEL_BssIdIsolation", json_object_new_boolean(true));
+			}
+		}
+		else
+		{
+			json_object_object_add(guest5GApObj, "IsolationEnable", json_object_new_boolean(false));
+			json_object_object_add(guest5GApObj, "X_ZYXEL_BssIdIsolation", json_object_new_boolean(false));
+		}
+	}else{ // general wireless
+		iidArray = json_object_object_get(Jobj, "wlApIid");
+		for(iidIdx=0;iidIdx<6;iidIdx++){
+			wifiApIid.idx[iidIdx] = json_object_get_int( json_object_array_get_idx(iidArray, iidIdx));
+			if(wifiApIid.idx[iidIdx] != 0)
+				wifiApIid.level = iidIdx+1;
+		}
+
+		if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_ACCESS_POINT, &wifiApIid, &wifiApObj)) != ZCFG_SUCCESS) {
+			return ret;
+		}
+
+		json_object_object_add(wifiApObj, "MaxAssociatedDevices", json_object_new_int(MaxAssociatedDevices));
+		if(wlHide)
+			json_object_object_add(wifiApObj, "SSIDAdvertisementEnabled", json_object_new_boolean(false));
+		else
+			json_object_object_add(wifiApObj, "SSIDAdvertisementEnabled", json_object_new_boolean(true));
+		if(wlEnableGuest)
+		{
+			if(!strcmp(wlGwMode, "0"))
+			{
+				json_object_object_add(wifiApObj, "IsolationEnable", json_object_new_boolean(true));
+				json_object_object_add(wifiApObj, "X_ZYXEL_BssIdIsolation", json_object_new_boolean(true));
+			}
+			else
+			{
+				json_object_object_add(wifiApObj, "IsolationEnable", json_object_new_boolean(false));
+				json_object_object_add(wifiApObj, "X_ZYXEL_BssIdIsolation", json_object_new_boolean(true));
+			}
+		}
+		else
+		{
+			json_object_object_add(wifiApObj, "IsolationEnable", json_object_new_boolean(false));
+			json_object_object_add(wifiApObj, "X_ZYXEL_BssIdIsolation", json_object_new_boolean(false));
+		}
+	}
+#else
 	iidArray = json_object_object_get(Jobj, "wlApIid");
 	for(iidIdx=0;iidIdx<6;iidIdx++){
 		wifiApIid.idx[iidIdx] = json_object_get_int( json_object_array_get_idx(iidArray, iidIdx));
@@ -497,6 +849,7 @@
 		json_object_object_add(wifiApObj, "IsolationEnable", json_object_new_boolean(false));
 		json_object_object_add(wifiApObj, "X_ZYXEL_BssIdIsolation", json_object_new_boolean(false));
 	}
+#endif
 	
 	return ret;
 }
@@ -508,6 +861,370 @@
 	uint8_t iidIdx =0;
 	char *psk_lowercase = NULL;
 
+#ifdef CBT_CUSTOMIZATION // 20170427 Max Add
+	if(guestWifiConfig == true){ // CBT guest Wi-Fi
+
+		iidArray = json_object_object_get(Jobj, "cbtGuestWifiIid"); // 2.4G Iid
+		for(iidIdx=0;iidIdx<6;iidIdx++){
+			guestSecIid.idx[iidIdx] = json_object_get_int(json_object_array_get_idx(iidArray, iidIdx));
+			if(guestSecIid.idx[iidIdx] != 0)
+				guestSecIid.level = iidIdx+1;
+		}
+
+		iidArray = json_object_object_get(Jobj, "cbtGuest5GWifiIid"); // 5G Iid
+		for(iidIdx=0;iidIdx<6;iidIdx++){
+			guest5GSecIid.idx[iidIdx] = json_object_get_int(json_object_array_get_idx(iidArray, iidIdx));
+			if(guest5GSecIid.idx[iidIdx] != 0)
+				guest5GSecIid.level = iidIdx+1;
+		}
+	
+		if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_ACCESS_POINT_SEC, &guestSecIid, &guestSecObj)) != ZCFG_SUCCESS) {
+			return ret;
+		}
+		if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_ACCESS_POINT_SEC, &guest5GSecIid, &guest5GSecObj)) != ZCFG_SUCCESS) {
+			return ret;
+		}
+	
+		if(secMode == SLIDER_POS_NONE){
+			json_object_object_add(guestSecObj, "ModeEnabled", json_object_new_string("None"));
+			json_object_object_add(guest5GSecObj, "ModeEnabled", json_object_new_string("None"));
+		}
+		else if(secMode == SLIDER_POS_BASIC)
+		{
+			if (!strcmp(wep,"128bit"))
+			{
+				json_object_object_add(guestSecObj, "ModeEnabled", json_object_new_string("WEP-128"));
+				json_object_object_add(guestSecObj, "X_ZYXEL_WepModeSelect", json_object_new_string("WEP-128"));
+				json_object_object_add(guest5GSecObj, "ModeEnabled", json_object_new_string("WEP-128"));
+				json_object_object_add(guest5GSecObj, "X_ZYXEL_WepModeSelect", json_object_new_string("WEP-128"));
+			}
+			else
+			{
+				json_object_object_add(guestSecObj, "ModeEnabled", json_object_new_string("WEP-64"));
+				json_object_object_add(guestSecObj, "X_ZYXEL_WepModeSelect", json_object_new_string("WEP-64"));
+				json_object_object_add(guest5GSecObj, "ModeEnabled", json_object_new_string("WEP-64"));
+				json_object_object_add(guest5GSecObj, "X_ZYXEL_WepModeSelect", json_object_new_string("WEP-64"));
+			}
+		
+			json_object_object_add(guestSecObj, "X_ZYXEL_WEPAuthentication", json_object_new_string("None"));
+			json_object_object_add(guestSecObj, "X_ZYXEL_WEPEncryption", json_object_new_string("WEPEncryption"));
+			json_object_object_add(guestSecObj, "X_ZYXEL_AutoGenWepKey", json_object_new_boolean(X_ZYXEL_AutoGenWepKey));
+			json_object_object_add(guest5GSecObj, "X_ZYXEL_WEPAuthentication", json_object_new_string("None"));
+			json_object_object_add(guest5GSecObj, "X_ZYXEL_WEPEncryption", json_object_new_string("WEPEncryption"));
+			json_object_object_add(guest5GSecObj, "X_ZYXEL_AutoGenWepKey", json_object_new_boolean(X_ZYXEL_AutoGenWepKey));
+		
+			if(X_ZYXEL_AutoGenWepKey)
+			{
+				json_object_object_add(guestSecObj, "X_ZYXEL_DefaultKeyID", json_object_new_int(1));
+				json_object_object_add(guest5GSecObj, "X_ZYXEL_DefaultKeyID", json_object_new_int(1));
+			
+				if (!strcmp(wep,"128bit"))
+				{
+					X_ZYXEL_Auto_WepKey26 = json_object_get_string(json_object_object_get(guestSecObj, "X_ZYXEL_Auto_WepKey26"));
+					json_object_object_add(guestSecObj, "WEPKey", json_object_new_string(X_ZYXEL_Auto_WepKey26));
+					X_ZYXEL_Auto_WepKey26 = json_object_get_string(json_object_object_get(guest5GSecObj, "X_ZYXEL_Auto_WepKey26"));
+					json_object_object_add(guest5GSecObj, "WEPKey", json_object_new_string(X_ZYXEL_Auto_WepKey26));
+				}
+				else
+				{
+					X_ZYXEL_Auto_WepKey10 = json_object_get_string(json_object_object_get(guestSecObj, "X_ZYXEL_Auto_WepKey10"));
+					json_object_object_add(guestSecObj, "WEPKey", json_object_new_string(X_ZYXEL_Auto_WepKey10));
+					X_ZYXEL_Auto_WepKey10 = json_object_get_string(json_object_object_get(guest5GSecObj, "X_ZYXEL_Auto_WepKey10"));
+					json_object_object_add(guest5GSecObj, "WEPKey", json_object_new_string(X_ZYXEL_Auto_WepKey10));
+				}
+			}
+			else
+			{
+				if (!strcmp(wep,"128bit"))
+				{
+					json_object_object_add(guestSecObj, "WEPKey", json_object_new_string(WEPKey));
+					json_object_object_add(guestSecObj, "X_ZYXEL_WEPKey2", json_object_new_string(X_ZYXEL_WEPKey2));
+					json_object_object_add(guestSecObj, "X_ZYXEL_WEPKey3", json_object_new_string(X_ZYXEL_WEPKey3));
+					json_object_object_add(guestSecObj, "X_ZYXEL_WEPKey4", json_object_new_string(X_ZYXEL_WEPKey4));
+					json_object_object_add(guest5GSecObj, "WEPKey", json_object_new_string(WEPKey));
+					json_object_object_add(guest5GSecObj, "X_ZYXEL_WEPKey2", json_object_new_string(X_ZYXEL_WEPKey2));
+					json_object_object_add(guest5GSecObj, "X_ZYXEL_WEPKey3", json_object_new_string(X_ZYXEL_WEPKey3));
+					json_object_object_add(guest5GSecObj, "X_ZYXEL_WEPKey4", json_object_new_string(X_ZYXEL_WEPKey4));
+				}
+				else
+				{
+					json_object_object_add(guestSecObj, "X_ZYXEL_WEP64Key1", json_object_new_string(X_ZYXEL_WEP64Key1));
+					json_object_object_add(guestSecObj, "X_ZYXEL_WEP64Key2", json_object_new_string(X_ZYXEL_WEP64Key2));
+					json_object_object_add(guestSecObj, "X_ZYXEL_WEP64Key3", json_object_new_string(X_ZYXEL_WEP64Key3));
+					json_object_object_add(guestSecObj, "X_ZYXEL_WEP64Key4", json_object_new_string(X_ZYXEL_WEP64Key4));
+					json_object_object_add(guest5GSecObj, "X_ZYXEL_WEP64Key1", json_object_new_string(X_ZYXEL_WEP64Key1));
+					json_object_object_add(guest5GSecObj, "X_ZYXEL_WEP64Key2", json_object_new_string(X_ZYXEL_WEP64Key2));
+					json_object_object_add(guest5GSecObj, "X_ZYXEL_WEP64Key3", json_object_new_string(X_ZYXEL_WEP64Key3));
+					json_object_object_add(guest5GSecObj, "X_ZYXEL_WEP64Key4", json_object_new_string(X_ZYXEL_WEP64Key4));
+				}
+			
+				json_object_object_add(guestSecObj, "wepid", json_object_new_string(wepid));
+				json_object_object_add(guest5GSecObj, "wepid", json_object_new_string(wepid));
+			
+				if(strlen(wepid) == 0){
+					json_object_object_add(guestSecObj, "X_ZYXEL_DefaultKeyID", json_object_new_int(1));
+					json_object_object_add(guest5GSecObj, "X_ZYXEL_DefaultKeyID", json_object_new_int(1));
+				}
+				else
+				{
+					json_object_object_add(guestSecObj, "X_ZYXEL_DefaultKeyID", json_object_new_int(wepid[3]-'0'));
+					json_object_object_add(guest5GSecObj, "X_ZYXEL_DefaultKeyID", json_object_new_int(wepid[3]-'0'));
+					//The value of wepid[3] is 1~4 but character, so it needs to be changed to number
+					if(wepid[3]-'0' <= 0 || wepid[3]-'0' > 4){
+						json_object_object_add(guestSecObj, "X_ZYXEL_DefaultKeyID", json_object_new_int(1));
+						json_object_object_add(guest5GSecObj, "X_ZYXEL_DefaultKeyID", json_object_new_int(1));
+					}
+				}
+			}
+		}
+		else if(secMode == SLIDER_POS_MORESECURE)
+		{
+			if(!strcmp(wpaMode,"wpa2psk") || !strcmp(wpaMode,"wpapsk") || !strcmp(wpaMode,"wpawpa2psk"))
+			{
+				if(!strcmp(wpaMode,"wpa2psk")){
+					json_object_object_add(guestSecObj, "ModeEnabled", json_object_new_string("WPA2-Personal"));
+					json_object_object_add(guest5GSecObj, "ModeEnabled", json_object_new_string("WPA2-Personal"));
+				}
+				else if(!strcmp(wpaMode,"wpapsk")){
+					json_object_object_add(guestSecObj, "ModeEnabled", json_object_new_string("WPA-Personal"));
+					json_object_object_add(guest5GSecObj, "ModeEnabled", json_object_new_string("WPA-Personal"));
+				}
+				else{
+					json_object_object_add(guestSecObj, "ModeEnabled", json_object_new_string("WPA-WPA2-Personal"));
+					json_object_object_add(guest5GSecObj, "ModeEnabled", json_object_new_string("WPA-WPA2-Personal"));
+				}
+		
+				json_object_object_add(guestSecObj, "X_ZYXEL_AutoGenPSK", json_object_new_boolean(X_ZYXEL_AutoGenPSK));
+				json_object_object_add(guest5GSecObj, "X_ZYXEL_AutoGenPSK", json_object_new_boolean(X_ZYXEL_AutoGenPSK));
+				
+				X_ZYXEL_Auto_PSK = json_object_get_string(json_object_object_get(guestSecObj, "X_ZYXEL_Auto_PSK"));
+				if(strcmp(X_ZYXEL_Auto_PSK, guestPskValue) == 0) // The same string means using auto generate psk
+				{
+					// X_ZYXEL_AutoGenPSK
+					X_ZYXEL_AutoGenPSK = true;
+					json_object_object_add(guestSecObj, "X_ZYXEL_AutoGenPSK", json_object_new_boolean(X_ZYXEL_AutoGenPSK));
+					json_object_object_add(guest5GSecObj, "X_ZYXEL_AutoGenPSK", json_object_new_boolean(X_ZYXEL_AutoGenPSK));
+					// 2.4G KeyPassphrase and PreSharedKey
+					json_object_object_add(guestSecObj, "KeyPassphrase", json_object_new_string(X_ZYXEL_Auto_PSK));
+					json_object_object_add(guestSecObj, "PreSharedKey", json_object_new_string(""));
+					// 5G KeyPassphrase and PreSharedKey
+					json_object_object_add(guest5GSecObj, "KeyPassphrase", json_object_new_string(X_ZYXEL_Auto_PSK));
+					json_object_object_add(guest5GSecObj, "PreSharedKey", json_object_new_string(""));
+				}
+				else {
+					// X_ZYXEL_AutoGenPSK
+					X_ZYXEL_AutoGenPSK = false;
+					json_object_object_add(guestSecObj, "X_ZYXEL_AutoGenPSK", json_object_new_boolean(X_ZYXEL_AutoGenPSK));
+					json_object_object_add(guest5GSecObj, "X_ZYXEL_AutoGenPSK", json_object_new_boolean(X_ZYXEL_AutoGenPSK));
+
+					if(strlen(psk_value) == 64) {
+						psk_lowercase = (char*)malloc(strlen(psk_value)+1);
+						memset(psk_lowercase, 0, strlen(psk_value)+1);
+						stolower(psk_value, psk_lowercase, strlen(psk_value));
+						json_object_object_add(guestSecObj, "KeyPassphrase", json_object_new_string(""));
+						json_object_object_add(guestSecObj, "PreSharedKey", json_object_new_string(psk_lowercase));
+						json_object_object_add(guest5GSecObj, "KeyPassphrase", json_object_new_string(""));
+						json_object_object_add(guest5GSecObj, "PreSharedKey", json_object_new_string(psk_lowercase));
+					}
+					else {
+						json_object_object_add(guestSecObj, "KeyPassphrase", json_object_new_string(guestPskValue));
+						json_object_object_add(guest5GSecObj, "KeyPassphrase", json_object_new_string(guestPskValue));
+					}
+				}
+			}
+			else if(!strcmp(wpaMode,"wpa2") || !strcmp(wpaMode,"wpa") || !strcmp(wpaMode,"wpawpa"))
+			{
+				if(!strcmp(wpaMode,"wpa2"))
+				{
+					json_object_object_add(guestSecObj, "ModeEnabled", json_object_new_string("WPA2-Enterprise"));
+					json_object_object_add(guestSecObj, "X_ZYXEL_Preauth", json_object_new_boolean(X_ZYXEL_Preauth));
+					json_object_object_add(guestSecObj, "X_ZYXEL_ReauthInterval", json_object_new_int(X_ZYXEL_ReauthInterval));
+					json_object_object_add(guest5GSecObj, "ModeEnabled", json_object_new_string("WPA2-Enterprise"));
+					json_object_object_add(guest5GSecObj, "X_ZYXEL_Preauth", json_object_new_boolean(X_ZYXEL_Preauth));
+					json_object_object_add(guest5GSecObj, "X_ZYXEL_ReauthInterval", json_object_new_int(X_ZYXEL_ReauthInterval));
+				}
+				else if(!strcmp(wpaMode,"wpa")){
+					json_object_object_add(guestSecObj, "ModeEnabled", json_object_new_string("WPA-Enterprise"));
+					json_object_object_add(guest5GSecObj, "ModeEnabled", json_object_new_string("WPA-Enterprise"));
+				}
+				else
+				{
+					json_object_object_add(guestSecObj, "ModeEnabled", json_object_new_string("WPA-WPA2-Enterprise"));
+					json_object_object_add(guestSecObj, "X_ZYXEL_Preauth", json_object_new_boolean(X_ZYXEL_Preauth));
+					json_object_object_add(guestSecObj, "X_ZYXEL_ReauthInterval", json_object_new_int(X_ZYXEL_ReauthInterval));
+					json_object_object_add(guest5GSecObj, "ModeEnabled", json_object_new_string("WPA-WPA2-Enterprise"));
+					json_object_object_add(guest5GSecObj, "X_ZYXEL_Preauth", json_object_new_boolean(X_ZYXEL_Preauth));
+					json_object_object_add(guest5GSecObj, "X_ZYXEL_ReauthInterval", json_object_new_int(X_ZYXEL_ReauthInterval));
+				}
+			
+				json_object_object_add(guestSecObj, "RadiusServerIPAddr", json_object_new_string(RadiusServerIPAddr));
+				json_object_object_add(guestSecObj, "RadiusServerPort", json_object_new_int(RadiusServerPort));
+				json_object_object_add(guestSecObj, "RadiusSecret", json_object_new_string(RadiusSecret));
+				json_object_object_add(guest5GSecObj, "RadiusServerIPAddr", json_object_new_string(RadiusServerIPAddr));
+				json_object_object_add(guest5GSecObj, "RadiusServerPort", json_object_new_int(RadiusServerPort));
+				json_object_object_add(guest5GSecObj, "RadiusSecret", json_object_new_string(RadiusSecret));
+			}
+		
+			if(!strcmp(encryp, "tkip")){
+				json_object_object_add(guestSecObj, "X_ZYXEL_Encryption", json_object_new_string("tkip"));
+				json_object_object_add(guest5GSecObj, "X_ZYXEL_Encryption", json_object_new_string("tkip"));
+			}
+			else if(!strcmp(encryp, "aes")){
+				json_object_object_add(guestSecObj, "X_ZYXEL_Encryption", json_object_new_string("aes"));
+				json_object_object_add(guest5GSecObj, "X_ZYXEL_Encryption", json_object_new_string("aes"));
+			}
+			else{
+				json_object_object_add(guestSecObj, "X_ZYXEL_Encryption", json_object_new_string("tkipaes"));
+				json_object_object_add(guest5GSecObj, "X_ZYXEL_Encryption", json_object_new_string("tkipaes"));
+			}
+		
+			json_object_object_add(guestSecObj, "RekeyingInterval", json_object_new_int(RekeyingInterval));
+			json_object_object_add(guest5GSecObj, "RekeyingInterval", json_object_new_int(RekeyingInterval));
+				
+		}
+	}else{ // general wireless
+		iidArray = json_object_object_get(Jobj, "wlSecIid");
+		for(iidIdx=0;iidIdx<6;iidIdx++){
+			wifiSecIid.idx[iidIdx] = json_object_get_int( json_object_array_get_idx(iidArray, iidIdx));
+			if(wifiSecIid.idx[iidIdx] != 0)
+				wifiSecIid.level = iidIdx+1;
+		}
+	
+		if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_ACCESS_POINT_SEC, &wifiSecIid, &wifiSecObj)) != ZCFG_SUCCESS) {
+			return ret;
+		}
+	
+		if(secMode == SLIDER_POS_NONE)
+			json_object_object_add(wifiSecObj, "ModeEnabled", json_object_new_string("None"));
+		else if(secMode == SLIDER_POS_BASIC)
+		{
+			if (!strcmp(wep,"128bit"))
+			{
+				json_object_object_add(wifiSecObj, "ModeEnabled", json_object_new_string("WEP-128"));
+				json_object_object_add(wifiSecObj, "X_ZYXEL_WepModeSelect", json_object_new_string("WEP-128"));
+			}
+			else
+			{
+				json_object_object_add(wifiSecObj, "ModeEnabled", json_object_new_string("WEP-64"));
+				json_object_object_add(wifiSecObj, "X_ZYXEL_WepModeSelect", json_object_new_string("WEP-64"));
+			}
+		
+			json_object_object_add(wifiSecObj, "X_ZYXEL_WEPAuthentication", json_object_new_string("None"));
+			json_object_object_add(wifiSecObj, "X_ZYXEL_WEPEncryption", json_object_new_string("WEPEncryption"));
+		
+			json_object_object_add(wifiSecObj, "X_ZYXEL_AutoGenWepKey", json_object_new_boolean(X_ZYXEL_AutoGenWepKey));
+		
+			if(X_ZYXEL_AutoGenWepKey)
+			{
+				json_object_object_add(wifiSecObj, "X_ZYXEL_DefaultKeyID", json_object_new_int(1));
+			
+				if (!strcmp(wep,"128bit"))
+				{
+					X_ZYXEL_Auto_WepKey26 = json_object_get_string(json_object_object_get(wifiSecObj, "X_ZYXEL_Auto_WepKey26"));
+					json_object_object_add(wifiSecObj, "WEPKey", json_object_new_string(X_ZYXEL_Auto_WepKey26));
+				}
+				else
+				{
+					X_ZYXEL_Auto_WepKey10 = json_object_get_string(json_object_object_get(wifiSecObj, "X_ZYXEL_Auto_WepKey10"));
+					json_object_object_add(wifiSecObj, "WEPKey", json_object_new_string(X_ZYXEL_Auto_WepKey10));
+				}
+			}
+			else
+			{
+				if (!strcmp(wep,"128bit"))
+				{
+					json_object_object_add(wifiSecObj, "WEPKey", json_object_new_string(WEPKey));
+					json_object_object_add(wifiSecObj, "X_ZYXEL_WEPKey2", json_object_new_string(X_ZYXEL_WEPKey2));
+					json_object_object_add(wifiSecObj, "X_ZYXEL_WEPKey3", json_object_new_string(X_ZYXEL_WEPKey3));
+					json_object_object_add(wifiSecObj, "X_ZYXEL_WEPKey4", json_object_new_string(X_ZYXEL_WEPKey4));
+				}
+				else
+				{
+					json_object_object_add(wifiSecObj, "X_ZYXEL_WEP64Key1", json_object_new_string(X_ZYXEL_WEP64Key1));
+					json_object_object_add(wifiSecObj, "X_ZYXEL_WEP64Key2", json_object_new_string(X_ZYXEL_WEP64Key2));
+					json_object_object_add(wifiSecObj, "X_ZYXEL_WEP64Key3", json_object_new_string(X_ZYXEL_WEP64Key3));
+					json_object_object_add(wifiSecObj, "X_ZYXEL_WEP64Key4", json_object_new_string(X_ZYXEL_WEP64Key4));
+				}
+			
+				json_object_object_add(wifiSecObj, "wepid", json_object_new_string(wepid));
+			
+				if(strlen(wepid) == 0)
+					json_object_object_add(wifiSecObj, "X_ZYXEL_DefaultKeyID", json_object_new_int(1));
+				else
+				{
+					json_object_object_add(wifiSecObj, "X_ZYXEL_DefaultKeyID", json_object_new_int(wepid[3]-'0'));
+					//The value of wepid[3] is 1~4 but character, so it needs to be changed to number
+					if(wepid[3]-'0' <= 0 || wepid[3]-'0' > 4)
+						json_object_object_add(wifiSecObj, "X_ZYXEL_DefaultKeyID", json_object_new_int(1));
+				}
+			}
+		}
+		else if(secMode == SLIDER_POS_MORESECURE)
+		{
+			if(!strcmp(wpaMode,"wpa2psk") || !strcmp(wpaMode,"wpapsk") || !strcmp(wpaMode,"wpawpa2psk"))
+			{
+				if(!strcmp(wpaMode,"wpa2psk"))
+					json_object_object_add(wifiSecObj, "ModeEnabled", json_object_new_string("WPA2-Personal"));
+				else if(!strcmp(wpaMode,"wpapsk"))
+					json_object_object_add(wifiSecObj, "ModeEnabled", json_object_new_string("WPA-Personal"));
+				else
+					json_object_object_add(wifiSecObj, "ModeEnabled", json_object_new_string("WPA-WPA2-Personal"));
+		
+				json_object_object_add(wifiSecObj, "X_ZYXEL_AutoGenPSK", json_object_new_boolean(X_ZYXEL_AutoGenPSK));
+		
+				if(X_ZYXEL_AutoGenPSK)
+				{
+					X_ZYXEL_Auto_PSK = json_object_get_string(json_object_object_get(wifiSecObj, "X_ZYXEL_Auto_PSK"));
+					json_object_object_add(wifiSecObj, "KeyPassphrase", json_object_new_string(X_ZYXEL_Auto_PSK));
+					json_object_object_add(wifiSecObj, "PreSharedKey", json_object_new_string(""));
+				}
+				else {
+					if(strlen(psk_value) == 64) {
+						psk_lowercase = (char*)malloc(strlen(psk_value)+1);
+						memset(psk_lowercase, 0, strlen(psk_value)+1);
+						stolower(psk_value, psk_lowercase, strlen(psk_value));
+						json_object_object_add(wifiSecObj, "KeyPassphrase", json_object_new_string(""));
+						json_object_object_add(wifiSecObj, "PreSharedKey", json_object_new_string(psk_lowercase));
+					}
+					else {
+						json_object_object_add(wifiSecObj, "KeyPassphrase", json_object_new_string(psk_value));
+					}
+				}
+			}
+			else if(!strcmp(wpaMode,"wpa2") || !strcmp(wpaMode,"wpa") || !strcmp(wpaMode,"wpawpa"))
+			{
+				if(!strcmp(wpaMode,"wpa2"))
+				{
+					json_object_object_add(wifiSecObj, "ModeEnabled", json_object_new_string("WPA2-Enterprise"));
+					json_object_object_add(wifiSecObj, "X_ZYXEL_Preauth", json_object_new_boolean(X_ZYXEL_Preauth));
+					json_object_object_add(wifiSecObj, "X_ZYXEL_ReauthInterval", json_object_new_int(X_ZYXEL_ReauthInterval));
+				}
+				else if(!strcmp(wpaMode,"wpa"))
+					json_object_object_add(wifiSecObj, "ModeEnabled", json_object_new_string("WPA-Enterprise"));
+				else
+				{
+					json_object_object_add(wifiSecObj, "ModeEnabled", json_object_new_string("WPA-WPA2-Enterprise"));
+					json_object_object_add(wifiSecObj, "X_ZYXEL_Preauth", json_object_new_boolean(X_ZYXEL_Preauth));
+					json_object_object_add(wifiSecObj, "X_ZYXEL_ReauthInterval", json_object_new_int(X_ZYXEL_ReauthInterval));
+				}
+			
+				json_object_object_add(wifiSecObj, "RadiusServerIPAddr", json_object_new_string(RadiusServerIPAddr));
+				json_object_object_add(wifiSecObj, "RadiusServerPort", json_object_new_int(RadiusServerPort));
+				json_object_object_add(wifiSecObj, "RadiusSecret", json_object_new_string(RadiusSecret));
+			}
+		
+			if(!strcmp(encryp, "tkip"))
+				json_object_object_add(wifiSecObj, "X_ZYXEL_Encryption", json_object_new_string("tkip"));
+			else if(!strcmp(encryp, "aes"))
+				json_object_object_add(wifiSecObj, "X_ZYXEL_Encryption", json_object_new_string("aes"));
+			else
+				json_object_object_add(wifiSecObj, "X_ZYXEL_Encryption", json_object_new_string("tkipaes"));
+		
+			json_object_object_add(wifiSecObj, "RekeyingInterval", json_object_new_int(RekeyingInterval));
+				
+		}
+	}
+#else
 	iidArray = json_object_object_get(Jobj, "wlSecIid");
 	for(iidIdx=0;iidIdx<6;iidIdx++){
 		wifiSecIid.idx[iidIdx] = json_object_get_int( json_object_array_get_idx(iidArray, iidIdx));
@@ -647,18 +1364,117 @@
 		
 		json_object_object_add(wifiSecObj, "RekeyingInterval", json_object_new_int(RekeyingInterval));
 				
-	}
-	
+	}	
+#endif
 	return ret;
 }
 
 zcfgRet_t cfgWifiSubnetObject(struct json_object *Jobj, const char* action){
 
 	zcfgRet_t ret = ZCFG_SUCCESS;
-	struct json_object *iidArray = NULL;
-	
+	struct json_object *iidArray = NULL;	
 	uint8_t iidIdx =0;
 	
+#ifdef CBT_CUSTOMIZATION // 20170427 Max Add
+	if(guestWifiConfig == true){ // CBT guest Wi-Fi
+		
+		iidArray = json_object_object_get(Jobj, "cbtGuestWifiIid"); // 2.4G Iid
+		if(iidArray != NULL)
+		{
+			for(iidIdx=0;iidIdx<6;iidIdx++){
+				guestSubnetIid.idx[iidIdx] = json_object_get_int( json_object_array_get_idx(iidArray, iidIdx));
+				if(guestSubnetIid.idx[iidIdx] != 0)
+					guestSubnetIid.level = iidIdx+1;
+			}
+		}
+		iidArray = json_object_object_get(Jobj, "cbtGuest5GWifiIid"); // 5G Iid
+		if(iidArray != NULL)
+		{
+			for(iidIdx=0;iidIdx<6;iidIdx++){
+				guest5GSubnetIid.idx[iidIdx] = json_object_get_int( json_object_array_get_idx(iidArray, iidIdx));
+				if(guest5GSubnetIid.idx[iidIdx] != 0)
+					guest5GSubnetIid.level = iidIdx+1;
+			}
+		}
+	
+		if(!strcmp(action, "DELETE"))
+		{
+			zcfgFeObjJsonDel(RDM_OID_DHCPV4_SRV_SUBNET, &guestSubnetIid, NULL);
+			zcfgFeObjJsonDel(RDM_OID_DHCPV4_SRV_SUBNET, &guest5GSubnetIid, NULL);
+			return ret;
+		}
+		else if(!strcmp(action, "POST"))
+		{
+			zcfgFeObjJsonAdd(RDM_OID_DHCPV4_SRV_SUBNET, &guestSubnetIid, NULL);
+			zcfgFeObjJsonAdd(RDM_OID_DHCPV4_SRV_SUBNET, &guest5GSubnetIid, NULL);
+			if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_DHCPV4_SRV_SUBNET, &guestSubnetIid, &guestSubnetObj)) != ZCFG_SUCCESS) {
+				return ret;
+			}
+			if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_DHCPV4_SRV_SUBNET, &guest5GSubnetIid, &guest5GSubnetObj)) != ZCFG_SUCCESS) {
+				return ret;
+			}
+		}
+		else if(!strcmp(action, "PUT"))
+		{
+			if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_DHCPV4_SRV_SUBNET, &guestSubnetIid, &guestSubnetObj)) != ZCFG_SUCCESS) {
+				return ret;
+			}
+			if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_DHCPV4_SRV_SUBNET, &guest5GSubnetIid, &guest5GSubnetObj)) != ZCFG_SUCCESS) {
+				return ret;
+			}
+		}
+	
+		json_object_object_add(guestSubnetObj, "Enable", json_object_new_boolean(wlSubnetState));
+		json_object_object_add(guestSubnetObj, "MinAddress", json_object_new_string(MinAddress));
+		json_object_object_add(guestSubnetObj, "MaxAddress", json_object_new_string(MaxAddress));
+		json_object_object_add(guestSubnetObj, "SubnetMask", json_object_new_string(SubnetMask));
+		json_object_object_add(guestSubnetObj, "LANIP", json_object_new_string(LANIP));
+		json_object_object_add(guestSubnetObj, "Interface", json_object_new_string(Interface));
+		json_object_object_add(guest5GSubnetObj, "Enable", json_object_new_boolean(wlSubnetState));
+		json_object_object_add(guest5GSubnetObj, "MinAddress", json_object_new_string(MinAddress));
+		json_object_object_add(guest5GSubnetObj, "MaxAddress", json_object_new_string(MaxAddress));
+		json_object_object_add(guest5GSubnetObj, "SubnetMask", json_object_new_string(SubnetMask));
+		json_object_object_add(guest5GSubnetObj, "LANIP", json_object_new_string(LANIP));
+		json_object_object_add(guest5GSubnetObj, "Interface", json_object_new_string(Interface));
+
+	}else{ // general wireless
+		iidArray = json_object_object_get(Jobj, "wlSubnetIid");
+		if(iidArray != NULL)
+		{
+			for(iidIdx=0;iidIdx<6;iidIdx++){
+				wifiSubnetIid.idx[iidIdx] = json_object_get_int( json_object_array_get_idx(iidArray, iidIdx));
+				if(wifiSubnetIid.idx[iidIdx] != 0)
+					wifiSubnetIid.level = iidIdx+1;
+			}
+		}
+	
+		if(!strcmp(action, "DELETE"))
+		{
+			zcfgFeObjJsonDel(RDM_OID_DHCPV4_SRV_SUBNET, &wifiSubnetIid, NULL);
+				return ret;
+		}
+		else if(!strcmp(action, "POST"))
+		{
+			zcfgFeObjJsonAdd(RDM_OID_DHCPV4_SRV_SUBNET, &wifiSubnetIid, NULL);
+			if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_DHCPV4_SRV_SUBNET, &wifiSubnetIid, &wifiSubnetObj)) != ZCFG_SUCCESS) {
+				return ret;
+			}
+		}
+		else if(!strcmp(action, "PUT"))
+		{
+			if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_DHCPV4_SRV_SUBNET, &wifiSubnetIid, &wifiSubnetObj)) != ZCFG_SUCCESS) {
+				return ret;
+			}
+		}
+	
+		json_object_object_add(wifiSubnetObj, "Enable", json_object_new_boolean(wlSubnetState));
+		json_object_object_add(wifiSubnetObj, "MinAddress", json_object_new_string(MinAddress));
+		json_object_object_add(wifiSubnetObj, "MaxAddress", json_object_new_string(MaxAddress));
+		json_object_object_add(wifiSubnetObj, "SubnetMask", json_object_new_string(SubnetMask));
+		json_object_object_add(wifiSubnetObj, "LANIP", json_object_new_string(LANIP));
+		json_object_object_add(wifiSubnetObj, "Interface", json_object_new_string(Interface));
+	}
+#else
 	iidArray = json_object_object_get(Jobj, "wlSubnetIid");
 	if(iidArray != NULL)
 	{
@@ -694,7 +1510,8 @@
 	json_object_object_add(wifiSubnetObj, "SubnetMask", json_object_new_string(SubnetMask));
 	json_object_object_add(wifiSubnetObj, "LANIP", json_object_new_string(LANIP));
 	json_object_object_add(wifiSubnetObj, "Interface", json_object_new_string(Interface));
-	
+#endif
+
 	return ret;
 }
 
@@ -795,6 +1612,42 @@
 	initGlobalWlObjects();
 	getBasicWlInfo(Jobj);
 
+#ifdef CBT_CUSTOMIZATION // 20170425 Max Add
+	if((ret = editWifiSsidObjects(Jobj)) != ZCFG_SUCCESS)
+		goto dalwlan_edit_fail;
+
+	/*if((ret = editWifiApWpsObject(Jobj)) != ZCFG_SUCCESS)
+		goto dalwlan_edit_fail;*/
+
+	if((ret = editWifiApObject(Jobj)) != ZCFG_SUCCESS)
+		goto dalwlan_edit_fail;
+
+	if((ret = editWifiSecObject(Jobj)) != ZCFG_SUCCESS)
+		goto dalwlan_edit_fail;
+
+	if(div_wifiSubnet)
+	{
+		if((!strcmp(subnetObjAction, "POST")) || (!strcmp(subnetObjAction, "PUT")) || (!strcmp(subnetObjAction, "DELETE"))) {
+			if((ret = cfgWifiSubnetObject(Jobj, subnetObjAction)) != ZCFG_SUCCESS)
+				goto dalwlan_edit_fail;
+		}
+	}
+		
+	if(guestWifiConfig == false){ // for wireless general
+		if(div_wifiAdvance)
+		{
+			if((ret = editWifiRadioObjects(Jobj)) != ZCFG_SUCCESS)
+				goto dalwlan_edit_fail;
+		}
+	}
+
+	//t2 = time(NULL);
+
+	//printf("before set, time=%d seconds\n", (int) difftime(t2, t1));
+
+	setAllWlObjects(Jobj);
+#else
+
 	//set by dalcmd, temporary solution
 	if(json_object_object_get(Jobj, "Index") != NULL){
 		if((ret = dalcmdWifiGeneralEdit(Jobj, replyMsg)) != ZCFG_SUCCESS)
@@ -830,7 +1683,7 @@
 	}
 	
 	setAllWlObjects(Jobj);
-
+#endif
 dalwlan_edit_fail:
 	freeAllWlObjects();
 	
