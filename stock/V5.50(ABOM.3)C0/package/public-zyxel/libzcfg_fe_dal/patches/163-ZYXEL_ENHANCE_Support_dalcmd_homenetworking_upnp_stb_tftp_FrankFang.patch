Index: libzcfg_fe_dal-1.0/network/homeNetworking/zcfg_fe_dal_stb_vendor_id.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/network/homeNetworking/zcfg_fe_dal_stb_vendor_id.c	2017-04-25 16:35:38.650397024 +0800
+++ libzcfg_fe_dal-1.0/network/homeNetworking/zcfg_fe_dal_stb_vendor_id.c	2017-04-25 18:38:08.534053001 +0800
@@ -22,6 +22,62 @@
 	{NULL,					0,	0,	0,	NULL},
 };
 
+void zcfgFeDalShowSTBVendorID(struct json_object *Jarray){
+	int i, j, len;
+	struct json_object *obj;
+
+	if(json_object_get_type(Jarray) != json_type_array){
+		printf("wrong Jobj format!\n");
+		return;
+	}
+
+	len = json_object_array_length(Jarray);
+	for(i=0;i<len;i++){
+		obj = json_object_array_get_idx(Jarray,i);
+		j=0;
+		while(STB_param[j].paraName!=NULL){
+			printf("STB Vendor ID %d: %-10s\n",j+1,json_object_get_string(json_object_object_get(obj,STB_param[j].paraName)));
+			j++;
+		}
+	}
+}
+
+zcfgRet_t zcfgFeDal_STB_VendorID_Get(struct json_object *Jarray, char *replyMsg){
+
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	objIndex_t iid;
+	struct json_object *obj = NULL;
+	struct json_object *STBObj = NULL;
+	const char *STBVendorID1 = NULL;
+	const char *STBVendorID2 = NULL;
+	const char *STBVendorID3 = NULL;
+	const char *STBVendorID4 = NULL;
+	const char *STBVendorID5 = NULL;
+
+	IID_INIT(iid);
+	ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_S_T_B_VENDOR_I_D,&iid,&obj);
+	if(ret==ZCFG_SUCCESS){
+		STBObj = json_object_new_object();
+
+		STBVendorID1 = json_object_get_string(json_object_object_get(obj, "STBVendorID1"));
+		STBVendorID2 = json_object_get_string(json_object_object_get(obj, "STBVendorID2"));
+		STBVendorID3 = json_object_get_string(json_object_object_get(obj, "STBVendorID3"));
+		STBVendorID4 = json_object_get_string(json_object_object_get(obj, "STBVendorID4"));
+		STBVendorID5 = json_object_get_string(json_object_object_get(obj, "STBVendorID5"));
+
+		json_object_object_add(STBObj, "STBVendorID1", json_object_new_string(STBVendorID1));
+		json_object_object_add(STBObj, "STBVendorID2", json_object_new_string(STBVendorID2));
+		json_object_object_add(STBObj, "STBVendorID3", json_object_new_string(STBVendorID3));
+		json_object_object_add(STBObj, "STBVendorID4", json_object_new_string(STBVendorID4));
+		json_object_object_add(STBObj, "STBVendorID5", json_object_new_string(STBVendorID5));
+		
+		json_object_array_add(Jarray, STBObj);
+		zcfgFeJsonObjFree(obj);
+	}
+
+	return ret;
+}
+
 zcfgRet_t zcfgFeDal_STB_VendorID_Edit(struct json_object *Jobj, char *replyMsg){
 	zcfgRet_t ret = ZCFG_SUCCESS;
 	struct json_object *STBObj = NULL;
@@ -41,26 +97,37 @@
 	IID_INIT(STBIid);
 	ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_S_T_B_VENDOR_I_D, &STBIid, &STBObj);
 	if(ret == ZCFG_SUCCESS){
-		json_object_object_add(STBObj, "STBVendorID1", json_object_new_string(STBVendorID1));
-		json_object_object_add(STBObj, "STBVendorID2", json_object_new_string(STBVendorID2));
-		json_object_object_add(STBObj, "STBVendorID3", json_object_new_string(STBVendorID3));
-		json_object_object_add(STBObj, "STBVendorID4", json_object_new_string(STBVendorID4));
-		json_object_object_add(STBObj, "STBVendorID5", json_object_new_string(STBVendorID5));
+		if(STBVendorID1!=NULL)
+			json_object_object_add(STBObj, "STBVendorID1", json_object_new_string(STBVendorID1));
+		if(STBVendorID2!=NULL)
+			json_object_object_add(STBObj, "STBVendorID2", json_object_new_string(STBVendorID2));
+		if(STBVendorID3!=NULL)
+			json_object_object_add(STBObj, "STBVendorID3", json_object_new_string(STBVendorID3));
+		if(STBVendorID4!=NULL)
+			json_object_object_add(STBObj, "STBVendorID4", json_object_new_string(STBVendorID4));
+		if(STBVendorID5!=NULL)
+			json_object_object_add(STBObj, "STBVendorID5", json_object_new_string(STBVendorID5));
+
 		zcfgFeObjJsonSet(RDM_OID_S_T_B_VENDOR_I_D, &STBIid, STBObj, NULL);
+		zcfgFeJsonObjFree(STBObj);
 	}
 
-	zcfgFeJsonObjFree(STBObj);
 	return ret;
 }
 
 zcfgRet_t zcfgFeDalSTBVendorID(const char *method, struct json_object *Jobj, char *replyMsg){
 	zcfgRet_t ret = ZCFG_SUCCESS;
 	
-	if(!strcmp(method, "PUT"))
+	if(!strcmp(method, "PUT")){
 		ret = zcfgFeDal_STB_VendorID_Edit(Jobj, NULL);
-	else
+	}
+	else if(!strcmp(method, "GET")){
+		ret = zcfgFeDal_STB_VendorID_Get(Jobj, NULL);
+	}
+	else{
 		printf("Unknown method:%s\n", method);
-
+	}
+	
 	return ret;
 }
 
Index: libzcfg_fe_dal-1.0/network/homeNetworking/zcfg_fe_dal_tftp_ser_name.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/network/homeNetworking/zcfg_fe_dal_tftp_ser_name.c	2017-04-25 16:35:38.650397024 +0800
+++ libzcfg_fe_dal-1.0/network/homeNetworking/zcfg_fe_dal_tftp_ser_name.c	2017-04-25 17:05:37.049835782 +0800
@@ -18,6 +18,41 @@
 	{NULL,					0,	0,	0,	NULL},
 };
 
+void zcfgFeDalShowTFTPSerName(struct json_object *Jarray){
+	int i, len;
+	struct json_object *obj;
+
+	if(json_object_get_type(Jarray) != json_type_array){
+		printf("wrong Jobj format!\n");
+		return;
+	}
+	
+	len = json_object_array_length(Jarray);
+	for(i=0;i<len;i++){
+		obj = json_object_array_get_idx(Jarray,i);
+		printf("%-20s %-10s\n","TFTP Server Name:",json_object_get_string(json_object_object_get(obj,"TFTPServerName")));
+	}
+}
+
+zcfgRet_t zcfgFeDal_TFTPSerName_Get(struct json_object *Jarray, char *replyMsg){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	struct json_object *tftpObj = NULL;
+	objIndex_t tftpIid = {0};
+	const char *parameterName = NULL;
+	struct json_object *paraObj = NULL;
+
+	IID_INIT(tftpIid);
+	ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_T_F_T_P_SRV_NAME, &tftpIid, &tftpObj);
+	if(ret == ZCFG_SUCCESS){
+		paraObj = json_object_new_object();
+		json_object_object_add(paraObj, "TFTPServerName", json_object_new_string(json_object_get_string(json_object_object_get(tftpObj, "TFTPServerName"))));
+		json_object_array_add(Jarray, paraObj);
+		zcfgFeJsonObjFree(tftpObj);
+	}
+
+	return ret;
+}
+
 zcfgRet_t zcfgFeDal_TFTPSerName_Edit(struct json_object *Jobj, char *replyMsg){
 	zcfgRet_t ret = ZCFG_SUCCESS;
 	struct json_object *tftpObj = NULL;
@@ -29,12 +64,11 @@
 
 	if(ret == ZCFG_SUCCESS){
 		tftpServerName = json_object_get_string(json_object_object_get(Jobj, "TFTPServerName"));
-
 		json_object_object_add(tftpObj, "TFTPServerName", json_object_new_string(tftpServerName));
 		ret = zcfgFeObjJsonSet(RDM_OID_T_F_T_P_SRV_NAME, &tftpIid, tftpObj, NULL);
+		zcfgFeJsonObjFree(tftpObj);
 	}
 	
-	zcfgFeJsonObjFree(tftpObj);
 	return ret;
 }
 
@@ -42,10 +76,15 @@
 zcfgRet_t zcfgFeDalTFTPSerName(const char *method, struct json_object *Jobj, char *replyMsg){
 	zcfgRet_t ret = ZCFG_SUCCESS;
 	
-	if(!strcmp(method, "PUT"))
+	if(!strcmp(method, "PUT")){
 		ret = zcfgFeDal_TFTPSerName_Edit(Jobj, NULL);
-	else
+	}
+	else if(!strcmp(method, "GET")){
+		ret = zcfgFeDal_TFTPSerName_Get(Jobj, NULL);
+	}
+	else{
 		printf("Unknown method:%s\n", method);
+	}
 
 	return ret;
 }
Index: libzcfg_fe_dal-1.0/network/homeNetworking/zcfg_fe_dal_upnp.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/network/homeNetworking/zcfg_fe_dal_upnp.c	2017-04-25 16:35:38.650397024 +0800
+++ libzcfg_fe_dal-1.0/network/homeNetworking/zcfg_fe_dal_upnp.c	2017-04-25 18:37:50.428163419 +0800
@@ -15,11 +15,59 @@
 
 dal_param_t UPNP_param[]={
 	{"Enable", dalType_boolean,	0,	0,	NULL},
-	{"X_ZYXEL_NATTEnable", dalType_boolean,	0,	0,	NULL},
+	{"NATTEnable", dalType_boolean,	0,	0,	NULL},
 	{NULL,					0,	0,	0,	NULL},
 
 };
 
+void zcfgFeDalShowUPnP(struct json_object *Jarray){
+	int i, len = 0;
+	struct json_object *obj;
+
+	if(json_object_get_type(Jarray) != json_type_array){
+		printf("wrong Jobj format!\n");
+		return;
+	}
+
+	len = json_object_array_length(Jarray);
+	for(i=0;i<len;i++){
+		obj = json_object_array_get_idx(Jarray,i);
+
+		if(json_object_get_boolean(json_object_object_get(obj,"Enable")))
+			printf("UPnP State: true \n");
+		else
+			printf("UPnP State: false \n");
+
+		if(json_object_get_boolean(json_object_object_get(obj,"NATTEnable")))
+			printf("UPnP NAT-T State: true \n");
+		else
+			printf("UPnP NAT-T State: false \n");
+	}
+}
+
+zcfgRet_t zcfgFeDal_UPnP_GET(struct json_object *Jarray, char *replyMsg){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	objIndex_t iid;
+	struct json_object *obj = NULL;
+	struct json_object *upnpObj = NULL;
+	bool enable = false;
+	bool natEnable = false;
+
+	IID_INIT(iid);
+	ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_UPNP_DEV, &iid, &obj);
+	if(ret == ZCFG_SUCCESS){
+		upnpObj = json_object_new_object();
+		enable = json_object_get_boolean(json_object_object_get(obj, "Enable"));
+		natEnable = json_object_get_boolean(json_object_object_get(obj, "X_ZYXEL_NATTEnable"));
+		json_object_object_add(upnpObj, "Enable", json_object_new_boolean(enable));
+		json_object_object_add(upnpObj, "NATTEnable", json_object_new_boolean(natEnable));
+		json_object_array_add(Jarray, upnpObj);
+		zcfgFeJsonObjFree(obj);
+	}
+	
+	return ret;
+}
+
 zcfgRet_t zcfgFeDal_UPnP_Edit(struct json_object *Jobj, char *replyMsg){
 	zcfgRet_t ret = ZCFG_SUCCESS;
 	struct json_object *upnpObj = NULL;
@@ -31,28 +79,49 @@
 	ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_UPNP_DEV, &upnpIid, &upnpObj);
 
 	if(ret == ZCFG_SUCCESS){
-		enable = json_object_get_boolean(json_object_object_get(Jobj, "Enable"));
-		natEnable = json_object_get_boolean(json_object_object_get(Jobj, "X_ZYXEL_NATTEnable"));
 
+		if(json_object_object_get(Jobj, "Enable")!=NULL){
+			enable = json_object_get_boolean(json_object_object_get(Jobj, "Enable"));
+		}
+		else{
+			enable = json_object_get_boolean(json_object_object_get(upnpObj, "Enable"));
+		}
+
+		if(json_object_object_get(Jobj, "NATTEnable")!=NULL){
+			natEnable = json_object_get_boolean(json_object_object_get(Jobj, "NATTEnable"));
+		}
+		else{
+			natEnable = json_object_get_boolean(json_object_object_get(upnpObj, "X_ZYXEL_NATTEnable"));
+		}
+
+		if(!enable){
+			printf("Note: If UPnP is disabled, UPnP NAT-T is also disabled..\n");
+			natEnable = false;
+		}
 
 		json_object_object_add(upnpObj, "Enable", json_object_new_boolean(enable));
 		json_object_object_add(upnpObj, "X_ZYXEL_NATTEnable", json_object_new_boolean(natEnable));
 
 		ret = zcfgFeObjJsonSet(RDM_OID_UPNP_DEV, &upnpIid, upnpObj, NULL);
+		zcfgFeJsonObjFree(upnpObj);
 	}
 	
-	zcfgFeJsonObjFree(upnpObj);
 	return ret;
 }
 
 
 zcfgRet_t zcfgFeDalUPnP(const char *method, struct json_object *Jobj, char *replyMsg){
 	zcfgRet_t ret = ZCFG_SUCCESS;
-	
-	if(!strcmp(method, "PUT"))
+
+	if(!strcmp(method, "PUT")){
 		ret = zcfgFeDal_UPnP_Edit(Jobj, NULL);
-	else
+	}
+	else if(!strcmp(method, "GET")){
+		ret = zcfgFeDal_UPnP_GET(Jobj, NULL);
+	}
+	else{
 		printf("Unknown method:%s\n", method);
+	}
 
 	return ret;
 }
Index: libzcfg_fe_dal-1.0/zcfg_fe_dal.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/zcfg_fe_dal.c	2017-04-25 16:35:39.586397028 +0800
+++ libzcfg_fe_dal-1.0/zcfg_fe_dal.c	2017-04-25 18:36:49.727817353 +0800
@@ -164,6 +164,9 @@
 extern void zcfgFeDalShowStaticDHCP(struct json_object *Jarray);
 extern void zcfgFeDalShowDnsEntry(struct json_object *Jarray);
 extern void zcfgFeDalShowIGMPMLD(struct json_object *Jarray);
+extern void zcfgFeDalShowUPnP(struct json_object *Jarray);
+extern void zcfgFeDalShowTFTPSerName(struct json_object *Jarray);
+extern void zcfgFeDalShowSTBVendorID(struct json_object *Jarray);
 
 dal_handler_t dalHandler[] = {
 {"WAN",				WAN_param,			zcfgFeDalWan,			zcfgFeDalShowWan,			"get",				"Broadband"},
@@ -184,10 +187,10 @@
 {"NAT_SESSION_CTL", NAT_SESSION_CTL_param,	zcfgFeDalNatSessionCtl,NULL,					"edit",				""}, //NAT
 {"NAT_APPLICATION",NAT_Application_param,	zcfgFeDalNatApplication,NULL,					"add|delete",		""}, //NAT
 {"INTF_GP",			IntfGrp_param,		zcfgFeDalIntrGrp,		zcfgFeDalShowIntrGrp,		"add|delete|get",	"Interface_Grouping"},//
-{"UPNP",			UPNP_param, 		zcfgFeDalUPnP,			NULL,						"edit", 			""},//Home_Networking
-{"TFTPSERNAME",		TFTPSerName_param,	zcfgFeDalTFTPSerName,	NULL,						"edit",				""},//Home_Networking
+{"UPNP",			UPNP_param, 		zcfgFeDalUPnP,			zcfgFeDalShowUPnP,			"edit|get",			"Home_Networking"},
+{"TFTPSERNAME",		TFTPSerName_param,	zcfgFeDalTFTPSerName,	zcfgFeDalShowTFTPSerName,	"edit|get",			"Home_Networking"},
 {"LANSETUP",		LANSETUP_param, 	zcfgFeDalLanSetup,		NULL,						"edit", 			"Home_Networking"},
-{"STB",				STB_param, 			zcfgFeDalSTBVendorID,	NULL,						"edit",				""},//Home_Networking
+{"STB",				STB_param, 			zcfgFeDalSTBVendorID,	zcfgFeDalShowSTBVendorID,	"edit|get",			"Home_Networking"},
 {"SUBNET",			SUBNET_param,		zcfgFeDalAddnlSubnet,	NULL,						"edit" ,			""},//Home_Networking
 {"STATICDHCP",		STATIC_DHCP_param,	zcfgFeDalStaticDHCP,	zcfgFeDalShowStaticDHCP,	"get|add|edit|delete",	"Home_Networking"},//Home_Networking
 {"VLANGRP", 		VLANGRP_param,		zcfgFeDalVlanGroup,		NULL,						"add|edit|delete",	""},//Vlan_Group
