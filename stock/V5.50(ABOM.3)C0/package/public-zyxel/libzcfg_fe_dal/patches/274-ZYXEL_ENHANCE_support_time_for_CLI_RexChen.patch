Index: libzcfg_fe_dal-1.0/maintenance/zcfg_fe_dal_time.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/maintenance/zcfg_fe_dal_time.c	2017-07-31 22:20:11.689168778 +0800
+++ libzcfg_fe_dal-1.0/maintenance/zcfg_fe_dal_time.c	2017-07-31 22:24:57.512261400 +0800
@@ -12,52 +12,371 @@
 
 dal_param_t TIME_param[] =
 {
-	{"NTPServer1", 			dalType_string,  0, 	0, 	NULL},
-	{"NTPServer2", 			dalType_string,  0, 	0, 	NULL},
-	{"NTPServer3", 			dalType_string,  0, 	0, 	NULL},
-	{"NTPServer4", 			dalType_string,  0, 	0, 	NULL},
-	{"NTPServer5", 			dalType_string,  0, 	0, 	NULL},
-	{"Enable", 				dalType_boolean,  0, 	0,	NULL},
-	{"X_ZYXEL_DaylightSavings",	dalType_boolean,	0, 	0,	NULL},
-	{"X_ZYXEL_TimeZone", 	dalType_string,	 0, 	0, 	NULL},
-	{"X_ZYXEL_Location", 	dalType_string,  0, 	0, 	NULL},
+	{"NTPServer1", 			dalType_serveraddr,  0, 	0, 	NULL,	"None|clock.fmt.he.net|clock.nyc.he.net|clock.sjc.he.net|clock.via.net|ntp1.tummy.com|time.cachenetworks.com|pool.ntp.org",	NULL},
+	{"NTPServer2", 			dalType_serveraddr,  0, 	0, 	NULL,	"None|clock.fmt.he.net|clock.nyc.he.net|clock.sjc.he.net|clock.via.net|ntp1.tummy.com|time.cachenetworks.com|pool.ntp.org",	NULL},
+	{"NTPServer3", 			dalType_serveraddr,  0, 	0, 	NULL,	"None|clock.fmt.he.net|clock.nyc.he.net|clock.sjc.he.net|clock.via.net|ntp1.tummy.com|time.cachenetworks.com|pool.ntp.org",	NULL},
+	{"NTPServer4", 			dalType_serveraddr,  0, 	0, 	NULL,	"None|clock.fmt.he.net|clock.nyc.he.net|clock.sjc.he.net|clock.via.net|ntp1.tummy.com|time.cachenetworks.com|pool.ntp.org",	NULL},
+	{"NTPServer5", 			dalType_serveraddr,  0, 	0, 	NULL,	"None|clock.fmt.he.net|clock.nyc.he.net|clock.sjc.he.net|clock.via.net|ntp1.tummy.com|time.cachenetworks.com|pool.ntp.org",	NULL},
+	{"DaylightSavings",		dalType_boolean,	0, 	0,	NULL},
+	{"X_ZYXEL_TimeZone", 	dalType_string,	 0, 	0, 	NULL,	NULL,	dalcmd_Forbid},
+	{"X_ZYXEL_Location", 	dalType_string,  0, 	0, 	NULL,	NULL,	dalcmd_Forbid},
+	{"TimeZone",			dalType_timezone,0,	0,	NULL},
+	//{"Start_Month",			dalType_string,	0,	0,	NULL,	"Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec"},
+	//{"Start_Day",			dalType_int,	1,	31,	NULL},
+	{"Start_Time",			dalType_HourMin,	0,	0,	NULL},
+	//{"End_Month",			dalType_string,	0,	0,	NULL,	"Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec"},
+	//{"End_Day",				dalType_int,	1,	31,	NULL},
+	{"End_Time",			dalType_HourMin,	0,	0,	NULL},
 	/*End*/
-	{"X_ZYXEL_EndDay", 		dalType_int,	 0,		0,	NULL},
-	{"X_ZYXEL_EndDayOfWeek", dalType_int,	 0,		0,	NULL},
-	{"X_ZYXEL_EndMin", 		dalType_int, 	 0, 	0,	NULL},
-	{"X_ZYXEL_EndHour", 	dalType_int, 	 0, 	0, 	NULL},
-	{"X_ZYXEL_EndMonth", 	dalType_int, 	 0, 	0, 	NULL},
-	{"X_ZYXEL_EndWeek", 	dalType_int,  	 0, 	0, 	NULL},
+	{"X_ZYXEL_EndDay", 		dalType_int,	 0,		0,	NULL,	NULL,	dalcmd_Forbid},
+	{"X_ZYXEL_EndDayOfWeek", dalType_int,	 0,		0,	NULL,	NULL,	dalcmd_Forbid},
+	{"X_ZYXEL_EndMin", 		dalType_int, 	 0, 	0,	NULL,	NULL,	dalcmd_Forbid},
+	{"X_ZYXEL_EndHour", 	dalType_int, 	 0, 	0, 	NULL,	NULL,	dalcmd_Forbid},
+	{"X_ZYXEL_EndMonth", 	dalType_int, 	 0, 	0, 	NULL,	NULL,	dalcmd_Forbid},
+	{"X_ZYXEL_EndWeek", 	dalType_int,  	 0, 	0, 	NULL,	NULL,	dalcmd_Forbid},
 	/*Start*/
-	{"X_ZYXEL_StartDay", 	dalType_int, 	 0, 	0, 	NULL},
-	{"X_ZYXEL_StartDayOfWeek", 	dalType_int, 0, 	0, 	NULL},
-	{"X_ZYXEL_StartMin", 	dalType_int,  	 0, 	0, 	NULL},
-	{"X_ZYXEL_StartHour", 	dalType_int, 	 0, 	0, 	NULL},
-	{"X_ZYXEL_StartHour", 	dalType_int, 	 0, 	0, 	NULL},
-	{"X_ZYXEL_StartMonth", 	dalType_int, 	 0, 	0, 	NULL},
-	{"X_ZYXEL_StartWeek", 	dalType_int, 	 0, 	0, 	NULL},
+	{"X_ZYXEL_StartDay", 	dalType_int, 	 0, 	0, 	NULL,	NULL,	dalcmd_Forbid},
+	{"X_ZYXEL_StartDayOfWeek", 	dalType_int, 0, 	0, 	NULL,	NULL,	dalcmd_Forbid},
+	{"X_ZYXEL_StartMin", 	dalType_int,  	 0, 	0, 	NULL,	NULL,	dalcmd_Forbid},
+	{"X_ZYXEL_StartHour", 	dalType_int, 	 0, 	0, 	NULL,	NULL,	dalcmd_Forbid},
+	{"X_ZYXEL_StartHour", 	dalType_int, 	 0, 	0, 	NULL,	NULL,	dalcmd_Forbid},
+	{"X_ZYXEL_StartMonth", 	dalType_int, 	 0, 	0, 	NULL,	NULL,	dalcmd_Forbid},
+	{"X_ZYXEL_StartWeek", 	dalType_int, 	 0, 	0, 	NULL,	NULL,	dalcmd_Forbid},
 	{NULL, 					0, 				 0, 	0, 	NULL}
 };
 
+zcfgRet_t NTPcheck(struct json_object *Jobj, char *replyMsg){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	struct json_object *obj = NULL;
+	objIndex_t Iid = {0};
+	char NTPtmp[5][32];
+	char buf[1024] = {0};
+	char *newntp1 = NULL, *newntp2 = NULL, *newntp3 = NULL, *newntp4 = NULL, *newntp5 = NULL, *tmp = NULL;
+	const char *ntp1 = NULL, *ntp2 = NULL, *ntp3 = NULL, *ntp4 = NULL, *ntp5 = NULL, *curntp1 = NULL, *curntp2 = NULL, *curntp3 = NULL, *curntp4 = NULL, *curntp5 = NULL;
+	int i, j, count = 0;
+	memset(NTPtmp,0,sizeof(NTPtmp));
+	ntp1 = json_object_get_string(json_object_object_get(Jobj, "NTPServer1"));
+	ntp2 = json_object_get_string(json_object_object_get(Jobj, "NTPServer2"));
+	ntp3 = json_object_get_string(json_object_object_get(Jobj, "NTPServer3"));
+	ntp4 = json_object_get_string(json_object_object_get(Jobj, "NTPServer4"));
+	ntp5 = json_object_get_string(json_object_object_get(Jobj, "NTPServer5"));
+	if(zcfgFeObjJsonGetWithoutUpdate(RDM_OID_TIME, &Iid, &obj) == ZCFG_SUCCESS){
+		curntp1 = json_object_get_string(json_object_object_get(obj, "NTPServer1"));
+		curntp2 = json_object_get_string(json_object_object_get(obj, "NTPServer2"));
+		curntp3 = json_object_get_string(json_object_object_get(obj, "NTPServer3"));
+		curntp4 = json_object_get_string(json_object_object_get(obj, "NTPServer4"));
+		curntp5 = json_object_get_string(json_object_object_get(obj, "NTPServer5"));
+		
+		if(json_object_object_get(Jobj, "NTPServer1")){
+			strcpy(NTPtmp[0], ntp1);
+			json_object_object_del(Jobj, "NTPServer1");
+		}
+		else
+			strcpy(NTPtmp[0], curntp1);
+		if(json_object_object_get(Jobj, "NTPServer2")){
+			strcpy(NTPtmp[1], ntp2);
+			json_object_object_del(Jobj, "NTPServer2");
+		}
+		else
+			strcpy(NTPtmp[1], curntp2);
+		if(json_object_object_get(Jobj, "NTPServer3")){
+			strcpy(NTPtmp[2], ntp3);
+			json_object_object_del(Jobj, "NTPServer3");
+		}
+		else
+			strcpy(NTPtmp[2], curntp3);
+		if(json_object_object_get(Jobj, "NTPServer4")){
+			strcpy(NTPtmp[3], ntp4);
+			json_object_object_del(Jobj, "NTPServer4");
+		}
+		else
+			strcpy(NTPtmp[3], curntp4);
+		if(json_object_object_get(Jobj, "NTPServer5")){
+			strcpy(NTPtmp[4], ntp5);
+			json_object_object_del(Jobj, "NTPServer5");
+		}
+		else
+			strcpy(NTPtmp[4], curntp5);
+		for(i=0;i<5;i++){
+			for(j=i;j<5;j++){
+				if(strcmp(NTPtmp[j],"None")){
+					if(!strcmp(NTPtmp[i], NTPtmp[j])){
+						strcat(replyMsg, " is duplicate.");			
+						return ZCFG_INVALID_PARAM_VALUE;	
+					}
+				}				
+			}
+		}
+		for(i=0;i<5;i++){
+			if(!strcmp(NTPtmp[i], "None"))
+				count++;
+			else{
+				strcat(buf, NTPtmp[i]);
+				strcat(buf, ",");
+			}
+		}
+		if(count>0){
+			for(i=0;i<count;i++){
+				strcat(buf, "None");
+				strcat(buf, ",");
+			}
+		}
+		newntp1 = strtok_r(buf, ",", &tmp);
+		newntp2 = strtok_r(NULL, ",", &tmp);
+		newntp3 = strtok_r(NULL, ",", &tmp);
+		newntp4 = strtok_r(NULL, ",", &tmp);
+		newntp5 = strtok_r(NULL, ",", &tmp);
+		json_object_object_add(Jobj, "NTPServer1", json_object_new_string(newntp1));
+		json_object_object_add(Jobj, "NTPServer2", json_object_new_string(newntp2));
+		json_object_object_add(Jobj, "NTPServer3", json_object_new_string(newntp3));
+		json_object_object_add(Jobj, "NTPServer4", json_object_new_string(newntp4));
+		json_object_object_add(Jobj, "NTPServer5", json_object_new_string(newntp5));
+		zcfgFeJsonObjFree(obj);
+	}
+
+	return ret;
+}
+
+
 zcfgRet_t zcfgFeDal_Time_Edit(struct json_object *Jobj, char *replyMsg){
 	zcfgRet_t ret = ZCFG_SUCCESS;
 	struct json_object *timeObj = NULL;
 	objIndex_t timeIid = {0};
-
+	const char *NTP1 = NULL, *NTP2 = NULL, *NTP3 = NULL, *NTP4 = NULL, *NTP5 = NULL, *timezone = NULL, *location = NULL, *starttime = NULL, *endtime = NULL;
+	bool DaylightSaving = false;
+	int EndDay = 0, EndDayOfWeek = 0, EndMin = 0, EndHour = 0, EndMonth = 0, EndWeek = 0, StartDay = 0, StartDayOfWeek = 0, StartMin = 0, StartHour = 0, StartMonth = 0, StartWeek = 0;
+	char buf_start[8] = {0}, buf_end[8] = {0};
 	IID_INIT(timeObj);
+	//Start for CLI//
+	NTPcheck(Jobj, replyMsg);
+	if(json_object_object_get(Jobj, "Start_Time")){
+		 starttime = json_object_get_string(json_object_object_get(Jobj, "Start_Time"));
+		 sscanf(starttime, "%d-%d-%d:%d", &StartMonth, &StartDay, &StartHour, &StartMin);
+		 StartWeek = 0;
+		 StartDayOfWeek = 0;		 
+	}
+	if(json_object_object_get(Jobj, "End_Time")){
+		 endtime = json_object_get_string(json_object_object_get(Jobj, "End_Time"));
+		 sscanf(endtime, "%d-%d-%d:%d", &EndMonth, &EndDay, &EndHour, &EndMin);
+		 EndWeek = 0;
+		 EndDayOfWeek = 0;
+	}
+	//End for CLI//
+	NTP1 = json_object_get_string(json_object_object_get(Jobj, "NTPServer1"));
+	NTP2 = json_object_get_string(json_object_object_get(Jobj, "NTPServer2"));
+	NTP3 = json_object_get_string(json_object_object_get(Jobj, "NTPServer3"));
+	NTP4 = json_object_get_string(json_object_object_get(Jobj, "NTPServer4"));
+	NTP5 = json_object_get_string(json_object_object_get(Jobj, "NTPServer5"));
+
+	DaylightSaving = json_object_get_boolean(json_object_object_get(Jobj, "DaylightSavings"));
+	timezone = json_object_get_string(json_object_object_get(Jobj, "X_ZYXEL_TimeZone"));
+	location = json_object_get_string(json_object_object_get(Jobj, "X_ZYXEL_Location"));
+	if(json_object_object_get(Jobj, "X_ZYXEL_EndDay"))
+		EndDay = json_object_get_int(json_object_object_get(Jobj, "X_ZYXEL_EndDay"));
+	if(json_object_object_get(Jobj, "X_ZYXEL_EndDayOfWeek"))
+		EndDayOfWeek = json_object_get_int(json_object_object_get(Jobj, "X_ZYXEL_EndDayOfWeek"));
+	if(json_object_object_get(Jobj, "X_ZYXEL_EndMin"))
+		EndMin = json_object_get_int(json_object_object_get(Jobj, "X_ZYXEL_EndMin"));
+	if(json_object_object_get(Jobj, "X_ZYXEL_EndHour"))
+		EndHour = json_object_get_int(json_object_object_get(Jobj, "X_ZYXEL_EndHour"));
+	if(json_object_object_get(Jobj, "X_ZYXEL_EndMonth"))
+		EndMonth = json_object_get_int(json_object_object_get(Jobj, "X_ZYXEL_EndMonth"));
+	if(json_object_object_get(Jobj, "X_ZYXEL_EndWeek"))
+		EndWeek = json_object_get_int(json_object_object_get(Jobj, "X_ZYXEL_EndWeek"));
+	if(json_object_object_get(Jobj, "X_ZYXEL_StartDay"))
+		StartDay = json_object_get_int(json_object_object_get(Jobj, "X_ZYXEL_StartDay"));
+	if(json_object_object_get(Jobj, "X_ZYXEL_StartDayOfWeek"))
+		StartDayOfWeek = json_object_get_int(json_object_object_get(Jobj, "X_ZYXEL_StartDayOfWeek"));
+	if(json_object_object_get(Jobj, "X_ZYXEL_StartMin"))
+		StartMin = json_object_get_int(json_object_object_get(Jobj, "X_ZYXEL_StartMin"));
+	if(json_object_object_get(Jobj, "X_ZYXEL_StartHour"))
+		StartHour = json_object_get_int(json_object_object_get(Jobj, "X_ZYXEL_StartHour"));
+	if(json_object_object_get(Jobj, "X_ZYXEL_StartMonth"))
+		StartMonth = json_object_get_int(json_object_object_get(Jobj, "X_ZYXEL_StartMonth"));
+	if(json_object_object_get(Jobj, "X_ZYXEL_StartWeek"))
+		StartWeek = json_object_get_int(json_object_object_get(Jobj, "X_ZYXEL_StartWeek"));
 	ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_TIME, &timeIid, &timeObj);
 
 	if(ret == ZCFG_SUCCESS){
-		json_object_object_foreach(Jobj, key, val){
-			json_object_object_add(timeObj, key, val);
-		}
+		json_object_object_add(timeObj, "NTPServer1", json_object_new_string(NTP1));
+		json_object_object_add(timeObj, "NTPServer2", json_object_new_string(NTP2));
+		json_object_object_add(timeObj, "NTPServer3", json_object_new_string(NTP3));
+		json_object_object_add(timeObj, "NTPServer4", json_object_new_string(NTP4));
+		json_object_object_add(timeObj, "NTPServer5", json_object_new_string(NTP5));
+		json_object_object_add(timeObj, "Enable", json_object_new_boolean(true));
+		if(json_object_object_get(Jobj, "DaylightSavings"))
+			json_object_object_add(timeObj, "X_ZYXEL_DaylightSavings", json_object_new_boolean(DaylightSaving));
+		if(json_object_object_get(Jobj, "X_ZYXEL_TimeZone"))
+			json_object_object_add(timeObj, "X_ZYXEL_TimeZone", json_object_new_string(timezone));
+		if(json_object_object_get(Jobj, "X_ZYXEL_Location"))
+			json_object_object_add(timeObj, "X_ZYXEL_Location", json_object_new_string(location));
+		if(json_object_object_get(Jobj, "X_ZYXEL_EndDay") || json_object_object_get(Jobj, "End_Time"))
+			json_object_object_add(timeObj, "X_ZYXEL_EndDay", json_object_new_int(EndDay));
+		if(json_object_object_get(Jobj, "X_ZYXEL_EndDayOfWeek") || json_object_object_get(Jobj, "End_Time"))
+			json_object_object_add(timeObj, "X_ZYXEL_EndDayOfWeek", json_object_new_int(EndDayOfWeek));
+		if(json_object_object_get(Jobj, "X_ZYXEL_EndMin") || json_object_object_get(Jobj, "End_Time"))
+			json_object_object_add(timeObj, "X_ZYXEL_EndMin", json_object_new_int(EndMin));
+		if(json_object_object_get(Jobj, "X_ZYXEL_EndHour") || json_object_object_get(Jobj, "End_Time"))
+			json_object_object_add(timeObj, "X_ZYXEL_EndHour", json_object_new_int(EndHour));
+		if(json_object_object_get(Jobj, "X_ZYXEL_EndMonth") || json_object_object_get(Jobj, "End_Time"))
+			json_object_object_add(timeObj, "X_ZYXEL_EndMonth", json_object_new_int(EndMonth));
+		if(json_object_object_get(Jobj, "X_ZYXEL_EndWeek") || json_object_object_get(Jobj, "End_Time"))
+			json_object_object_add(timeObj, "X_ZYXEL_EndWeek", json_object_new_int(EndWeek));
+		if(json_object_object_get(Jobj, "X_ZYXEL_StartDay") || json_object_object_get(Jobj, "Start_Time"))
+			json_object_object_add(timeObj, "X_ZYXEL_StartDay", json_object_new_int(StartDay));
+		if(json_object_object_get(Jobj, "X_ZYXEL_StartDayOfWeek") || json_object_object_get(Jobj, "Start_Time"))
+			json_object_object_add(timeObj, "X_ZYXEL_StartDayOfWeek", json_object_new_int(StartDayOfWeek));
+		if(json_object_object_get(Jobj, "X_ZYXEL_StartMin") || json_object_object_get(Jobj, "Start_Time"))
+			json_object_object_add(timeObj, "X_ZYXEL_StartMin", json_object_new_int(StartMin));
+		if(json_object_object_get(Jobj, "X_ZYXEL_StartHour") || json_object_object_get(Jobj, "Start_Time"))
+			json_object_object_add(timeObj, "X_ZYXEL_StartHour", json_object_new_int(StartHour));
+		if(json_object_object_get(Jobj, "X_ZYXEL_StartMonth") || json_object_object_get(Jobj, "Start_Time"))
+			json_object_object_add(timeObj, "X_ZYXEL_StartMonth", json_object_new_int(StartMonth));
+		if(json_object_object_get(Jobj, "X_ZYXEL_StartWeek") || json_object_object_get(Jobj, "Start_Time"))
+			json_object_object_add(timeObj, "X_ZYXEL_StartWeek", json_object_new_int(StartWeek));
 		ret = zcfgFeObjJsonBlockedSet(RDM_OID_TIME, &timeIid, timeObj, NULL);
+		}
+	zcfgFeJsonObjFree(timeObj);
+	return ret;
 	}
 
-	zcfgFeJsonObjFree(timeObj);
+zcfgRet_t zcfgFeDal_Time_Get(struct json_object *Jobj, struct json_object *Jarray, char *replyMsg){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	struct json_object *paramJobj = NULL;
+	struct json_object *obj = NULL;
+	objIndex_t Iid = {0};
+	const char *curlocaltime = NULL, *startmonthint = NULL, *endmonthint = NULL, *startweekint = NULL, *endweekint = NULL, *startnumweekint = NULL, *endnumweekint = NULL;
+	char *curdate = NULL, *curtime = NULL;
+	char startmonth[16] = {0}, endmonth[16] = {0}, startweek[16] = {0}, endweek[16] = {0}, numstartweek[8] = {0}, numendweek[8] = {0};
+	if(zcfgFeObjJsonGetWithoutUpdate(RDM_OID_TIME, &Iid, &obj) == ZCFG_SUCCESS){
+		paramJobj = json_object_new_object();
+		curlocaltime = json_object_get_string(json_object_object_get(obj, "CurrentLocalTime"));
+		curdate = strtok_r(curlocaltime, "T", &curtime);
+		startmonthint = json_object_get_int(json_object_object_get(obj, "X_ZYXEL_StartMonth"));
+		endmonthint = json_object_get_int(json_object_object_get(obj, "X_ZYXEL_EndMonth"));
+		startweekint = json_object_get_int(json_object_object_get(obj, "X_ZYXEL_StartDayOfWeek"));
+		endweekint = json_object_get_int(json_object_object_get(obj, "X_ZYXEL_EndDayOfWeek"));
+		startnumweekint = json_object_get_int(json_object_object_get(obj, "X_ZYXEL_StartWeek"));
+		endnumweekint = json_object_get_int(json_object_object_get(obj, "X_ZYXEL_EndWeek"));
+		if(startmonthint == 1) strcpy(startmonth, "January");
+		else if(startmonthint == 2) strcpy(startmonth, "February");
+		else if(startmonthint == 3) strcpy(startmonth, "March");
+		else if(startmonthint == 4) strcpy(startmonth, "April");
+		else if(startmonthint == 5) strcpy(startmonth, "May ");
+		else if(startmonthint == 6) strcpy(startmonth, "June");
+		else if(startmonthint == 7) strcpy(startmonth, "July");
+		else if(startmonthint == 8) strcpy(startmonth, "August");
+		else if(startmonthint == 9) strcpy(startmonth, "September");
+		else if(startmonthint == 10) strcpy(startmonth, "October");
+		else if(startmonthint == 11) strcpy(startmonth, "November");
+		else if(startmonthint == 12) strcpy(startmonth, "December");
+		if(endmonthint == 1) strcpy(endmonth, "January");
+		else if(endmonthint == 2) strcpy(endmonth, "February");
+		else if(endmonthint == 3) strcpy(endmonth, "March");
+		else if(endmonthint == 4) strcpy(endmonth, "April");
+		else if(endmonthint == 5) strcpy(endmonth, "May ");
+		else if(endmonthint == 6) strcpy(endmonth, "June");
+		else if(endmonthint == 7) strcpy(endmonth, "July");
+		else if(endmonthint == 8) strcpy(endmonth, "August");
+		else if(endmonthint == 9) strcpy(endmonth, "September");
+		else if(endmonthint == 10) strcpy(endmonth, "October");
+		else if(endmonthint == 11) strcpy(endmonth, "November");
+		else if(endmonthint == 12) strcpy(endmonth, "December");
+		if(startweekint == 0) strcpy(startweek, "Sunday");
+		else if(startweekint == 1) strcpy(startweek, "Monday");
+		else if(startweekint == 2) strcpy(startweek, "Tuesday");
+		else if(startweekint == 3) strcpy(startweek, "Wednesday");
+		else if(startweekint == 4) strcpy(startweek, "Thursday");
+		else if(startweekint == 5) strcpy(startweek, "Friday");
+		else if(startweekint == 6) strcpy(startweek, "Saturday");
+		if(endweekint == 0) strcpy(endweek, "Sunday");
+		else if(endweekint == 1) strcpy(endweek, "Monday");
+		else if(endweekint == 2) strcpy(endweek, "Tuesday");
+		else if(endweekint == 3) strcpy(endweek, "Wednesday");
+		else if(endweekint == 4) strcpy(endweek, "Thursday");
+		else if(endweekint == 5) strcpy(endweek, "Friday");
+		else if(endweekint == 6) strcpy(endweek, "Saturday");
+		if(startnumweekint == 1) strcpy(numstartweek, "First");
+		else if(startnumweekint == 2) strcpy(numstartweek, "Second");
+		else if(startnumweekint == 3) strcpy(numstartweek, "Third");
+		else if(startnumweekint == 4) strcpy(numstartweek, "Fourth");
+		else if(startnumweekint == 5) strcpy(numstartweek, "Last");
+		if(endnumweekint == 1) strcpy(numendweek, "First");
+		else if(endnumweekint == 2) strcpy(numendweek, "Second");
+		else if(endnumweekint == 3) strcpy(numendweek, "Third");
+		else if(endnumweekint == 4) strcpy(numendweek, "Fourth");
+		else if(endnumweekint == 5) strcpy(numendweek, "Last");
+		
+		
+		json_object_object_add(paramJobj, "Time", json_object_new_string(curtime));
+		json_object_object_add(paramJobj, "Date", json_object_new_string(curdate));
+		json_object_object_add(paramJobj, "TimeProtocol", json_object_new_string("SNTP (RFC-1769)"));
+		json_object_object_add(paramJobj, "NTPServer1", JSON_OBJ_COPY(json_object_object_get(obj, "NTPServer1")));
+		json_object_object_add(paramJobj, "NTPServer2", JSON_OBJ_COPY(json_object_object_get(obj, "NTPServer2")));
+		json_object_object_add(paramJobj, "NTPServer3", JSON_OBJ_COPY(json_object_object_get(obj, "NTPServer3")));
+		json_object_object_add(paramJobj, "NTPServer4", JSON_OBJ_COPY(json_object_object_get(obj, "NTPServer4")));
+		json_object_object_add(paramJobj, "NTPServer5", JSON_OBJ_COPY(json_object_object_get(obj, "NTPServer5")));
+		json_object_object_add(paramJobj, "TimeZone", JSON_OBJ_COPY(json_object_object_get(obj, "X_ZYXEL_Location")));
+		json_object_object_add(paramJobj, "TimeSaveEnable", JSON_OBJ_COPY(json_object_object_get(obj, "X_ZYXEL_DaylightSavings")));
+		json_object_object_add(paramJobj, "StartMonth", json_object_new_string(startmonth));
+		json_object_object_add(paramJobj, "StartWeek", json_object_new_string(numstartweek));
+		json_object_object_add(paramJobj, "StartDayOfWeek", json_object_new_string(startweek));
+		json_object_object_add(paramJobj, "StartDay", JSON_OBJ_COPY(json_object_object_get(obj, "X_ZYXEL_StartDay")));
+		json_object_object_add(paramJobj, "StartHour", JSON_OBJ_COPY(json_object_object_get(obj, "X_ZYXEL_StartHour")));
+		json_object_object_add(paramJobj, "StartMin", JSON_OBJ_COPY(json_object_object_get(obj, "X_ZYXEL_StartMin")));
+		json_object_object_add(paramJobj, "EndMonth", json_object_new_string(endmonth));
+		json_object_object_add(paramJobj, "EndWeek", json_object_new_string(numendweek));
+		json_object_object_add(paramJobj, "EndDayOfWeek", json_object_new_string(endweek));
+		json_object_object_add(paramJobj, "EndDay", JSON_OBJ_COPY(json_object_object_get(obj, "X_ZYXEL_EndDay")));
+		json_object_object_add(paramJobj, "EndHour", JSON_OBJ_COPY(json_object_object_get(obj, "X_ZYXEL_EndHour")));
+		json_object_object_add(paramJobj, "EndMin", JSON_OBJ_COPY(json_object_object_get(obj, "X_ZYXEL_EndMin")));
+		json_object_array_add(Jarray, paramJobj);
+		zcfgFeJsonObjFree(obj);
+	}
 	return ret;
 }
 
+void zcfgFeDalShowTime(struct json_object *Jarray){
+	struct json_object *obj = NULL;
+	if(json_object_get_type(Jarray) != json_type_array){
+		printf("wrong Jobj format!\n");
+		return;
+	}
+	obj = json_object_array_get_idx(Jarray, 0);
+	printf("%-30s %-10s\n","Current Time:",json_object_get_string(json_object_object_get(obj, "Time")));
+	printf("%-30s %-10s\n","Current Date:",json_object_get_string(json_object_object_get(obj, "Date")));
+	printf("%-30s %-10s\n","Time Protocol:",json_object_get_string(json_object_object_get(obj, "TimeProtocol")));
+	printf("%-30s %-10s\n","First Time Server Address:",json_object_get_string(json_object_object_get(obj, "NTPServer1")));
+	printf("%-30s %-10s\n","Second Time Server Address:",json_object_get_string(json_object_object_get(obj, "NTPServer2")));
+	printf("%-30s %-10s\n","Third Time Server Address:",json_object_get_string(json_object_object_get(obj, "NTPServer3")));
+	printf("%-30s %-10s\n","Fourth Time Server Address:",json_object_get_string(json_object_object_get(obj, "NTPServer4")));
+	printf("%-30s %-10s\n","Fifth Time Server Address:",json_object_get_string(json_object_object_get(obj, "NTPServer5")));
+	printf("%-30s %-10s\n","Time Zone:",json_object_get_string(json_object_object_get(obj, "TimeZone")));
+	printf("%-30s %-10s\n","Daylight Savings Enable:",json_object_get_string(json_object_object_get(obj, "TimeSaveEnable")));
+	if(json_object_get_boolean(json_object_object_get(obj, "TimeSaveEnable"))){
+		printf("Start Rule: \n");
+		if(json_object_get_int(json_object_object_get(obj, "StartDay")) != 0){
+			printf("%-2s %-10s %-10s\n","","Day: ",json_object_get_string(json_object_object_get(obj, "StartDay")));
+		}
+		else{
+			printf("%-2s %-10s %s %s\n","","Day: ",json_object_get_string(json_object_object_get(obj, "StartWeek")),json_object_get_string(json_object_object_get(obj, "StartDayOfWeek")));
+		}
+		printf("%-2s %-10s %-10s\n","","Month: ",json_object_get_string(json_object_object_get(obj, "StartMonth")));
+		printf("%-2s %-10s %s:%s\n","","Time: ",json_object_get_string(json_object_object_get(obj, "StartHour")),json_object_get_string(json_object_object_get(obj, "StartMin")));
+		printf("End Rule: \n");
+		if(json_object_get_int(json_object_object_get(obj, "EndDay")) != 0){
+			printf("%-2s %-10s %-10s\n","","Day: ",json_object_get_string(json_object_object_get(obj, "EndDay")));
+		}
+		else{
+			printf("%-2s %-10s %s %s\n","","Day: ",json_object_get_string(json_object_object_get(obj, "EndWeek")),json_object_get_string(json_object_object_get(obj, "EndDayOfWeek")));
+		}
+		printf("%-2s %-10s %-10s\n","","Month: ",json_object_get_string(json_object_object_get(obj, "EndMonth")));
+		printf("%-2s %-10s %s:%s\n","","Time: ",json_object_get_string(json_object_object_get(obj, "EndHour")),json_object_get_string(json_object_object_get(obj, "EndMin")));
+	}
+}
+
+
+
 zcfgRet_t zcfgFeDalTime(const char *method, struct json_object *Jobj, struct json_object *Jarray, char *replyMsg){
 	zcfgRet_t ret = ZCFG_SUCCESS;
 
@@ -65,7 +384,9 @@
 		return ZCFG_INTERNAL_ERROR;
 
 	if(!strcmp(method, "PUT")) {
-		ret = zcfgFeDal_Time_Edit(Jobj, NULL);
+		ret = zcfgFeDal_Time_Edit(Jobj, replyMsg);
+	}else if(!strcmp(method, "GET")){
+		ret = zcfgFeDal_Time_Get(Jobj, Jarray, replyMsg);
 	}else
 		printf("Unknown method:%s\n", method);
 
Index: libzcfg_fe_dal-1.0/zcfg_fe_dal.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/zcfg_fe_dal.c	2017-07-31 22:20:12.193168769 +0800
+++ libzcfg_fe_dal-1.0/zcfg_fe_dal.c	2017-07-31 22:23:24.347261400 +0800
@@ -216,6 +216,7 @@
 extern void zcfgFeDalShowWifiWmm(struct json_object *Jarray);
 extern void zcfgFeDalShowLanSetup(struct json_object *Jarray);
 extern void zcfgFeDalShowParentCtl(struct json_object *Jarray);
+extern void zcfgFeDalShowTime(struct json_object *Jarray);
 
 
 dal_handler_t dalHandler[] = {
@@ -261,7 +262,7 @@
 #endif
 {"WIFI_OTHERS",		WIFI_OTHERS_param,	zcfgFeDalWifiOthers,	NULL,						"edit",				""},//Wireless
 {"snmp",			SNMP_param, 		zcfgFeDalSNMP,			zcfgFeDalShowSNMP,			"edit|get",				"SNMP"},
-{"TIME",			TIME_param, 		zcfgFeDalTime,			NULL,						"edit",				""},//Time
+{"time",			TIME_param, 		zcfgFeDalTime,			zcfgFeDalShowTime,			"edit|get",				"Time"},//Time
 {"trust_domain",	TRUST_DOMAIN_param, zcfgFeDalTrustDomain,	zcfgFeDalShowTrustDomain,	"get|add|delete",		"Remote_MGMT"},//Remote_MGMT
 {"sp_trust_domain",	SP_TRUST_DOMAIN_param, zcfgFeDalSpTrustDomain, zcfgFeDalShowSpTrustDomain,	"get|add|delete",		"SP_Domain"},//SP_Domain
 #if BUILD_PACKAGE_ZyIMS
@@ -354,6 +355,102 @@
 {NULL,		NULL,		NULL}
 };
 
+dal_time_zone_t dalTimeZone[] = {
+{"(GMT-12:00) International Date Line West",				"International_Date_Line_West[GMT-12:00]",		"IDLW+12"},
+{"(GMT-11:00) Midway Island, Samoa",						"Midway_Island,Samoa[GMT-11:00]",	"SST+11"},
+{"(GMT-10:00) Hawaii",										"Hawaii[GMT-10:00]",	"HST+10"},
+{"(GMT-09:00) Alaska",										"Alaska[GMT-09:00]",	"AKST+9AKDT"},
+{"(GMT-08:00) Pacific Time, Tijuana",						"Pacific_Time,Tijuana[GMT-08:00]",	"PST+8PDT"},
+{"(GMT-07:00) Arizona, Mazatlan",							"Arizona,Mazatlan[GMT-07:00]",	"MST+7"},
+{"(GMT-07:00) Chihuahua",									"Chihuahua[GMT-07:00]",	"MST+7MDT"},
+{"(GMT-07:00) Mountain Time",								"Mountain_Time[GMT-07:00]",	"MST+7MDT2"},
+{"(GMT-06:00) Central America",								"Central_America[GMT-06:00]",	"CST+6CDT"},
+{"(GMT-06:00) Central Time",								"Central_Time[GMT-06:00]",	"CST+6CDT2"},
+{"(GMT-06:00) Guadalajara, Mexico City, Monterrey",			"Guadalajara,Mexico_City,Monterrey[GMT-06:00]",	"CST+6CDT3"},
+{"(GMT-06:00) Saskatchewan",								"Saskatchewan[GMT-06:00]",	"CST+6"},
+{"(GMT-05:00) Bogota, Lima, Quito",							"Bogota,Lima,Quito[GMT-05:00]",	"COT+5"},
+{"(GMT-05:00) Eastern Time",								"Eastern_Time[GMT-05:00]",	"EST+5EDT"},
+{"(GMT-05:00) Indiana",										"Indiana[GMT-05:00]",	"EST+5EDT2"},
+{"(GMT-04:00) Atlantic Time",								"Atlantic_Time[GMT-04:00]",	"AST+4ADT"},
+{"(GMT-04:00) Caracas, La Paz",								"Caracas,La_Paz[GMT-04:00]",	"BOT+4"},
+{"(GMT-04:00) Santiago",									"Santiago[GMT-04:00]",	"CLT+4CLST"},
+{"(GMT-04:00) Georgetown",									"Georgetown[GMT-04:00]",	"ART+4"},
+{"(GMT-03:30) Newfoundland",								"Newfoundland[GMT-03:30]",	"NST+3:30NDT"},
+{"(GMT-03:00) Brasilia",									"Brasilia[GMT-03:00]",	"BRT+3BRST"},
+{"(GMT-03:00) Buenos Aires",								"Buenos_Aires[GMT-03:00]",	"ART+3"},
+{"(GMT-03:00) Greenland",									"Greenland[GMT-03:00]",	"CGT+3"},
+{"(GMT-02:00) Mid-Atlantic",								"Mid-Atlantic[GMT-02:00]",	"MAT+2"},
+{"(GMT-01:00) Azores",										"Azores[GMT-01:00]",	"AZOT+1AZOST"},
+{"(GMT-01:00) Cape Verde Is.",								"Cape_Verde_Is[GMT-01:00]",	"CVT+1"},
+{"(GMT-00:00) Casablanca",									"Casablanca[GMT-00:00]",	"WET-0WEST"},
+{"(GMT-00:00) Monrovia",									"Monrovia[GMT-00:00]",	"WET-0"},
+{"(GMT-00:00) Greenwich Mean Time: Edinburgh, London",		"Greenwich_Mean_Time_Edinburgh,London[GMT-00:00]",	"GMT-0BST"},
+{"(GMT-00:00) Greenwich Mean Time: Dublin",					"Greenwich_Mean_Time_Dublin[GMT-00:00]",	"GMT-0IST"},
+{"(GMT-00:00) Lisbon",										"Lisbon[GMT-00:00]",	"WET-0WEST2"},
+{"(GMT+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna",	"Amsterdam,Berlin,Bern,Rome,Stockholm,Vienna[GMT+01:00]",	"CET-1CEST"},
+{"(GMT+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague",	"Belgrade,Bratislava,Budapest,Ljubljana,Prague[GMT+01:00]",	"CET-1CEST2"},
+{"(GMT+01:00) Brussels, Copenhagen, Madrid, Paris",			"Brussels,Copenhagen,Madrid,Paris[GMT+01:00]",	"CET-1CEST3"},
+{"(GMT+01:00) Sarajevo, Skopje, Warsaw, Zagreb",			"Sarajevo,Skopje,Warsaw,Zagreb[GMT+01:00]",	"CET-1CEST4"},
+{"(GMT+01:00) West Central Africa",							"West_Central_Africa[GMT+01:00]",	"WAT-1"},
+{"(GMT+02:00) Athens, Istanbul, Minsk",						"Athens,Istanbul,Minsk[GMT+02:00]",	"EET-2EEST"},
+{"(GMT+02:00) Bucharest",									"Bucharest[GMT+02:00]",	"EET-2EEST2"},
+{"(GMT+02:00) Cairo",										"Cairo[GMT+02:00]",	"EET-2EEST3"},
+{"(GMT+02:00) Harare, Pretoria",							"Harare,Pretoria[GMT+02:00]",	"CAT-2"},
+{"(GMT+02:00) Pretoria",									"Pretoria[GMT+02:00]",	"SAST-2"},
+{"(GMT+02:00) Helsinki, Kyiv, Riga, Sofia, Tallinn, Vilnius",		"Helsinki,Kyiv,Riga,Sofia,Tallinn,Vilnius[GMT+02:00]",	"EET-2EEST4"},
+{"(GMT+02:00) Jerusalem",									"Jerusalem[GMT+02:00]",	"IST-2IDT"},
+{"(GMT+03:00) Baghdad",										"Baghdad[GMT+03:00]",	"AST-3"},
+{"(GMT+03:00) Kuwait, Riyadh",								"Kuwait,Riyadh[GMT+03:00]",	"AST-3-2"},
+{"(GMT+03:00) Moscow, St. Petersburg, Volgograd",			"Moscow,St.Petersburg,Volgograd[GMT+03:00]",	"MSK-3MSD"},
+{"(GMT+03:00) Nairobi",										"Nairobi[GMT+03:00]",	"EAT-3"},
+{"(GMT+03:30) Tehran",										"Tehran[GMT+03:30]",	"IRST-3IRDT"},
+{"(GMT+04:00) Abu Dhabi, Muscat",							"Abu_Dhabi,Muscat[GMT+04:00]",	"GST-4"},
+{"(GMT+04:00) Baku",										"Baku[GMT+04:00]",	"AZT-4AZST"},
+{"(GMT+04:00) Yerevan",										"Yerevan[GMT+04:00]",	"AMT-4AMST"},
+{"(GMT+04:00) Tbilisi",										"Tbilisi[GMT+04:00]",	"GET-4"},
+{"(GMT+04:30) Kabul",										"Kabul[GMT+04:30]",	"AFT-4:30"},
+{"(GMT+05:00) Yekaterinburg",								"Yekaterinburg[GMT+05:00]",	"YEKT-5YEKST"},
+{"(GMT+05:00) Islamabad, Karachi",							"Islamabad,Karachi[GMT+05:00]",	"PKT-5"},
+{"(GMT+05:00) Tashkent",									"Tashkent[GMT+05:00]",	"UZT-5"},
+{"(GMT+05:30) Chennai, Kolkata, Mumbai, New Delhi",			"Chennai,Kolkata,Mumbai,New_Delhi[GMT+05:30]",	"IST-5:30"},
+{"(GMT+05:45) Kathmandu",									"Kathmandu[GMT+05:45]",	"NPT-5:45"},
+{"(GMT+06:00) Almaty, Astana",								"Almaty,Astana[GMT+06:00]",	"ALMT-6"},
+{"(GMT+06:00) Novosibirsk",									"Novosibirsk[GMT+06:00]",	"NOVT-6NOVST"},
+{"(GMT+06:00) Dhaka",										"Dhaka[GMT+06:00]",	"BST-6"},
+{"(GMT+06:00) Sri Jayawardenapura",							"Sri_Jayawardenapura[GMT+06:00]",	"LKT-6"},
+{"(GMT+06:30) Yangoon",										"Yangoon[GMT+06:30]",	"MMT-6:30"},
+{"(GMT+07:00) Bangkok, Hanoi",								"Bangkok,Hanoi[GMT+07:00]",	"ICT-7"},
+{"(GMT+07:00) Jakarta",										"Jakarta[GMT+07:00]",	"WIB-7"},
+{"(GMT+07:00) Krasnoyarsk",									"Krasnoyarsk[GMT+07:00]",	"KRAT-7KRAST"},
+{"(GMT+08:00) Hong Kong",									"Hong_Kong[GMT+08:00]",	"HKT-8"},
+{"(GMT+08:00) Beijing, Chongquing, Urumqi",					"Beijing,Chongquing,Urumqi[GMT+08:00]",	"CST-8"},
+{"(GMT+08:00) Irkutsk",										"Irkutsk[GMT+08:00]",	"IRKT-8IRST"},
+{"(GMT+08:00) Ulaan Bataar",								"Ulaan_Bataar[GMT+08:00]",	"LUAT-8"},
+{"(GMT+08:00) Kuala Lumpur",								"Kuala_Lumpur[GMT+08:00]",	"MYT-8"},
+{"(GMT+08:00) Singapore",									"Singapore[GMT+08:00]",	"SGT-8"},
+{"(GMT+08:00) Perth",										"Perth[GMT+08:00]",	"WST-8"},
+{"(GMT+08:00) Taipei",										"Taipei[GMT+08:00]",	"CST-8-2"},
+{"(GMT+09:00) Osaka, Sapporo, Tokyo",						"Osaka,Sapporo,Tokyo[GMT+09:00]",	"JST-9"},
+{"(GMT+09:00) Seoul",										"Seoul[GMT+09:00]",	"KST-9"},
+{"(GMT+09:00) Yakutsk",										"Yakutsk[GMT+09:00]",	"YAKT-9YAKST"},
+{"(GMT+09:30) Adelaide",									"Adelaide[GMT+09:30]",	"CST-9:30CDT"},
+{"(GMT+09:30) Darwin",										"Darwin[GMT+09:30]",	"CST-9:30"},
+{"(GMT+10:00) Brisbane",									"Brisbane[GMT+10:00]",	"EST-10"},
+{"(GMT+10:00) Canberra, Melbourne, Sydney",					"Canberra,Melbourne,Sydney[GMT+10:00]",	"EST-10EDT"},
+{"(GMT+10:00) Guam",										"Guam[GMT+10:00]",	"ChST-10"},
+{"(GMT+10:00) Port Moresby",								"Port_Moresby[GMT+10:00]",	"PGT-10"},
+{"(GMT+10:00) Hobart",										"Hobart[GMT+10:00]",	"EST-10EDT2"},
+{"(GMT+10:00) Vladivostok",									"Vladivostok[GMT+10:00]",	"VLAT-10VLAST"},
+{"(GMT+11:00) Magadan",										"Magadan[GMT+11:00]",	"MAGT-11MAGST-11"},
+{"(GMT+11:00) Solomon Is.",									"SolomonIs.[GMT+11:00]",	"SBT-11"},
+{"(GMT+11:00) New Caledonia",								"New_Caledonia[GMT+11:00]",	"NCT-11"},
+{"(GMT+12:00) Auckland, Wellington",						"Auckland,Wellington[GMT+12:00]",	"NZST-12NZDT"},
+{"(GMT+12:00) Kamchatka",									"Kamchatka[GMT+12:00]",	"PETT-12PETST"},
+{"(GMT+12:00) Marshall Is.",								"Marshall_Is.[GMT+12:00]",	"MHT-12"},
+{"(GMT+12:00) Fiji",										"Fiji[GMT+12:00]",	"FJT-12FJST"},
+{NULL,	NULL,	NULL}
+};
+
 bool getSpecificObj(zcfg_offset_t oid, char *key, json_type type, void *value, objIndex_t *outIid, struct json_object **outJobj)
 {
 	objIndex_t iid;
@@ -1252,6 +1349,36 @@
 	return true;
 }
 
+bool validateServerName(const char *servername){
+	char buf[128] = {0};
+	char *tmp = NULL, *prefix = NULL;
+	strcpy(buf,servername);
+	prefix = strtok_r(buf, ".", &tmp);
+	if(!strcmp(tmp,""))
+		return false;
+	return true;	
+}
+
+bool validatetime(const char *time){
+	char buf[32] = {0};
+	int month = 0, date = 0, hour = 0, minute = 0; 
+
+	if(sscanf(time, "%d-%d-%d:%d", &month, &date, &hour, &minute) != 4)
+		return false;
+	
+	if(month >12 || month < 0)
+		return false;
+	if(date > 31 || date <1)
+		return false;
+	if(hour > 23 || hour < 0)
+		return false;
+	if(minute > 60 || minute <0)
+		return false;
+	return true;	
+}
+
+
+
 zcfgRet_t insertLoginUserInfo(struct json_object *Jobj, const char *userName, const char *level){
 	struct json_object *subJobj;
 	
Index: libzcfg_fe_dal-1.0/zcfg_fe_dal_common.h
===================================================================
--- libzcfg_fe_dal-1.0.orig/zcfg_fe_dal_common.h	2017-07-31 22:20:12.193168769 +0800
+++ libzcfg_fe_dal-1.0/zcfg_fe_dal_common.h	2017-07-31 22:22:16.243261400 +0800
@@ -64,6 +64,12 @@
 	char			*type;
 }dal_firewall_protocol_t;
 
+typedef struct dal_time_zone_s {
+	char				*timezone;
+	char				*timezoneCLI;
+	char				*timezonevalue;
+}dal_time_zone_t;
+
 
 
 enum { 
@@ -107,7 +113,10 @@
 	dalType_DayofWeek,
 	dalType_TimeRangeList,
 	dalType_ParenCtlServiceList,
-	dalType_URLFilterList
+	dalType_URLFilterList,
+	dalType_timezone,
+	dalType_HourMin,
+	dalType_serveraddr
 };
 
 bool getSpecificObj(zcfg_offset_t oid, char *key, json_type type, void *value, objIndex_t *outIid, struct json_object **outJobj);
