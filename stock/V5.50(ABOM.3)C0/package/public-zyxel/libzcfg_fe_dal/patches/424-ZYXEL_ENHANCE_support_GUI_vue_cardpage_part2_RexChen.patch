Index: libzcfg_fe_dal-1.0/js/zcfg_fe_dal_networkmap.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/js/zcfg_fe_dal_networkmap.c	2018-01-16 12:11:15.912890394 +0800
+++ libzcfg_fe_dal-1.0/js/zcfg_fe_dal_networkmap.c	2018-01-16 12:14:54.952509575 +0800
@@ -700,26 +700,52 @@
 
 }
 
+/*
+ *  Function Name: zcfgFeDalCardPageStatusGet
+ *  Description: Only get useful parameter or object to GUI.
+ *
+ */
 zcfgRet_t zcfgFeDalCardPageStatusGet(struct json_object *Jobj, struct json_object *Jarray, char *replyMsg)
 {
 	zcfgRet_t ret = ZCFG_SUCCESS;
 	struct json_object *statusJobj = NULL;
 	struct json_object *devInfoObj = NULL;
-	struct json_object *ethIfaceJarray = NULL, *ethIfaceObj = NULL;
-	struct json_object *ssidJarray = NULL;
+	struct json_object *ethnewObj = NULL, *ethIfaceObj = NULL;
+	struct json_object *ssidJarray = NULL, *MainSSIDobj = NULL, *GuestSSIDObj = NULL, *newssidJarray = NULL;
 	struct json_object *dhcpv4SerObj = NULL;
 	struct json_object *partctlObj = NULL;
 	objIndex_t iid;
-	int count = 0;
+	int count = 0, maxBitRate = 0, len = 0, i;
+	const char *lanport = NULL, *lanMacAddr = NULL, *duplexMode = NULL, *operatingFrequencyBand = NULL;
+	char ethConnectionStatus[16] = {0};
+	bool ethPortExist = false, MainSSID = false, Guest24GSSIDEnable = false, Guest5GSSIDEnable = false, GuestSSIDEnable = false, support24G = false, support5G = false;
 	
 	IID_INIT(iid);
 	if((ret = zcfgFeObjJsonGet(RDM_OID_DEV_INFO, &iid, &devInfoObj)) != ZCFG_SUCCESS)
 		goto zcfgFeDalCardPageStatusGetFail;
 
-	ethIfaceJarray = json_object_new_array();
+	ethnewObj = json_object_new_object();
 	IID_INIT(iid);
 	while(zcfgFeObjJsonGetNext(RDM_OID_ETH_IFACE, &iid, &ethIfaceObj) == ZCFG_SUCCESS) {
-		json_object_array_add(ethIfaceJarray, ethIfaceObj);
+		lanport = json_object_get_string (json_object_object_get(ethIfaceObj, "X_ZYXEL_LanPort"));
+		if(!strncmp (lanport, "LAN", 3)) {
+			lanMacAddr = json_object_get_string (json_object_object_get(ethIfaceObj, "MACAddress"));
+			Jadds (ethnewObj, "LanMac", lanMacAddr);
+		}
+		else if (!strcmp (lanport, "ETHWAN")) {
+			ethPortExist = true;
+			maxBitRate = json_object_get_int (json_object_object_get(ethIfaceObj, "MaxBitRate"));
+			duplexMode = json_object_get_string (json_object_object_get(ethIfaceObj, "DuplexMode"));
+			if (maxBitRate != 0) {
+				sprintf (ethConnectionStatus, "%d/%s", maxBitRate, duplexMode);
+			}
+			else {
+				strcat (ethConnectionStatus, "Connection down");
+			}
+			Jadds (ethnewObj, "EthConnectionStatus", ethConnectionStatus);
+		}
+		Jaddb (ethnewObj, "ethPortExist", ethPortExist);
+		zcfgFeJsonObjFree (ethIfaceObj);
 	}
 
 	IID_INIT(iid);
@@ -734,16 +760,54 @@
 		zcfgFeJsonObjFree(partctlObj);		
 	}
 	getWifiInfo(&ssidJarray);
+	//Just GET Main SSID object to GUI
+	newssidJarray = json_object_new_array();
+	len = json_object_array_length (ssidJarray);
+	for (i = 0; i < len; i++) {
+		MainSSIDobj = json_object_array_get_idx(ssidJarray, i);
+		MainSSID = json_object_get_boolean (json_object_object_get(MainSSIDobj, "X_ZYXEL_MainSSID"));
+		if (MainSSID) {
+			json_object_array_add(newssidJarray, JSON_OBJ_COPY(MainSSIDobj));
+			GuestSSIDObj = json_object_array_get_idx(ssidJarray, i + 1);
+			json_object_array_add(newssidJarray, JSON_OBJ_COPY(GuestSSIDObj));
+			operatingFrequencyBand = json_object_get_string (json_object_object_get(GuestSSIDObj, "OperatingFrequencyBand"));
+			if (!strcmp (operatingFrequencyBand, "2.4GHz")) {
+				support24G = true;
+				Guest24GSSIDEnable = json_object_get_boolean (json_object_object_get(GuestSSIDObj, "Enable"));
+			}
+			else if (!strcmp (operatingFrequencyBand, "5GHz")) {
+				support5G = true;
+				Guest5GSSIDEnable = json_object_get_boolean (json_object_object_get(GuestSSIDObj, "Enable"));
+			}
+		}
+	}
+	
+	//Consider if some project only support 2.4G or 5G only in the future.
+	if (support24G && support5G) {	
+		if (Guest24GSSIDEnable && Guest5GSSIDEnable) {
+			GuestSSIDEnable = true;
+		} 
+	}
+	else if (!support24G && support5G) {
+		if (Guest5GSSIDEnable) {
+			GuestSSIDEnable = true;
+		}
+	}
+	else if (support24G && !support5G) {
+		if (Guest24GSSIDEnable) {
+			GuestSSIDEnable = true;
+		}
+	}
+			
 	statusJobj = json_object_new_object();
 	json_object_array_add(Jarray, statusJobj);
 	json_object_object_add(statusJobj, "DeviceInfo", devInfoObj);
-	json_object_object_add(statusJobj, "LanPortInfo", ethIfaceJarray);
-	json_object_object_add(statusJobj, "WiFiInfo", ssidJarray);
+	json_object_object_add(statusJobj, "LanPortInfo", ethnewObj);
+	json_object_object_add(statusJobj, "WiFiInfo", newssidJarray);
 	json_object_object_add(statusJobj, "Dhcp4SerPoolInfo", dhcpv4SerObj);
 	Jaddi(statusJobj,"partctlNum",count);
+	Jaddb(statusJobj,"GuestSSIDEnable",GuestSSIDEnable);
 	
-	//printf("%s %s %d \n",json_object_to_json_string(Jarray),__func__,__LINE__);
-
 	return ZCFG_SUCCESS;
 	
 zcfgFeDalCardPageStatusGetFail:	
