Index: libzcfg_fe_dal-1.0/Makefile
===================================================================
--- libzcfg_fe_dal-1.0.orig/Makefile	2016-10-07 08:27:04.174552344 +0800
+++ libzcfg_fe_dal-1.0/Makefile	2016-10-07 08:31:13.108208700 +0800
@@ -7,6 +7,7 @@
 FE_PATH = ./
 NETWORK_BR_PATH = ./network/broadband
 NETWORK_DNS_PATH = ./network/dns
+NETWORK_NAT_PATH = ./network/nat
 NETWORK_INTF_GP_PATH = ./network/interfaceGrouping
 NETWORK_VLANGRP_PATH = ./network/vlanGroup
 NETWORK_IGMPMLD_PATH = ./network/igmp_mld
@@ -17,6 +18,7 @@
 SOURCES += $(wildcard $(FE_PATH)/*.c)
 SOURCES += $(wildcard $(NETWORK_BR_PATH)/*.c)
 SOURCES += $(wildcard $(NETWORK_DNS_PATH)/*.c)
+SOURCES += $(wildcard $(NETWORK_NAT_PATH)/*.c)
 SOURCES += $(wildcard $(NETWORK_INTF_GP_PATH)/*.c)
 SOURCES += $(wildcard $(NETWORK_VLANGRP_PATH)/*.c)
 SOURCES += $(wildcard $(NETWORK_IGMPMLD_PATH)/*.c)
Index: libzcfg_fe_dal-1.0/network/nat/zcfg_fe_dal_nat_addr_mapping.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ libzcfg_fe_dal-1.0/network/nat/zcfg_fe_dal_nat_addr_mapping.c	2016-10-05 12:12:31.115147200 +0800
@@ -0,0 +1,142 @@
+
+#include <json/json.h>
+
+#include "zcfg_common.h"
+#include "zcfg_rdm_oid.h"
+#include "zcfg_rdm_obj.h"
+#include "zcfg_debug.h"
+#include "zcfg_fe_rdm_string.h"
+#include "zcfg_fe_dal_common.h"
+
+#define CWMP_SOAP_MSG_DEBUG (1 << 1)
+
+dal_param_t NAT_ADDR_MAPPING_param[] =
+{
+	{"Type",		dalType_boolean,	0,	0,	NULL},
+	{"LocalStartIP",		dalType_string,	0,	16,	NULL},
+	{"LocalEndIP",		dalType_string,	0,	16,	NULL},
+	{"GlobalStartIP",		dalType_string,	0,	16,	NULL},
+	{"GlobalEndIP",		dalType_string,	0,	16,	NULL},
+	{"MappingSet",		dalType_string,	0,	6,	NULL},
+	{"MappingRuleName",		dalType_string,	0,	32,	NULL},
+	{"Description",		dalType_string,	0,	64,	NULL},
+	{"WANIntfName",		dalType_string,	0,	64,	NULL},
+	{"Interface",		dalType_string,	0,	64,	NULL},			
+	{NULL,		0,	0,	0,	NULL}
+};
+zcfgRet_t zcfgFeDalNatAddrMappingAdd(struct json_object *Jobj, char *replyMsg)
+{
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	const char *paraName;
+	objIndex_t objIid;
+	struct json_object *NatAddrMappingJobj = NULL;
+	int n=0;
+	paraName = (const char *)NAT_ADDR_MAPPING_param[n++].paraName;
+
+	IID_INIT(objIid);
+	zcfgFeObjJsonAdd(RDM_OID_NAT_ADDR_MAPPING, &objIid, NULL);
+	if((ret = zcfgFeObjJsonGet(RDM_OID_NAT_ADDR_MAPPING, &objIid, &NatAddrMappingJobj)) != ZCFG_SUCCESS) {
+		printf("%s: Object retrieve fail\n", __FUNCTION__);
+		return ret;
+	}	
+	while(paraName){
+		struct json_object *paramValue = json_object_object_get(Jobj, paraName);
+		if(!paramValue) {
+			printf("function:%s, Line =%d\n", __FUNCTION__,__LINE__);
+			paraName = (const char *)NAT_ADDR_MAPPING_param[n++].paraName;
+			continue;
+		}
+		json_object_object_add(NatAddrMappingJobj, paraName, JSON_OBJ_COPY(paramValue));
+		paraName = (const char *)NAT_ADDR_MAPPING_param[n++].paraName;
+	}
+
+	if((ret = zcfgFeObjJsonSet(RDM_OID_NAT_ADDR_MAPPING, &objIid, NatAddrMappingJobj, NULL)) == ZCFG_SUCCESS)
+	{
+		sprintf(replyMsg, "[%d,%d,%d,%d,%d,%d]",objIid.idx[0],objIid.idx[1],objIid.idx[2],
+				objIid.idx[3],objIid.idx[4],objIid.idx[5]);
+		printf("reply msg %s\n",replyMsg);		
+	}
+	
+	json_object_put(NatAddrMappingJobj);
+	return ret;
+}
+zcfgRet_t zcfgFeDalNatAddrMappingEdit(struct json_object *Jobj, char *replyMsg)
+{
+
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	const char *paraName;
+	objIndex_t objIid;
+	struct json_object *NatAddrMappingJobj = NULL;
+	int paramModified = 0, n = 0;
+	struct json_object *iidArray = NULL;
+	uint8_t iidIdx =0;
+	paraName = (const char *)NAT_ADDR_MAPPING_param[n++].paraName;
+	
+	//IID_INIT(objIid);
+	iidArray = json_object_object_get(Jobj, "iid");
+	for(iidIdx=0;iidIdx<6;iidIdx++){
+		objIid.idx[iidIdx] = json_object_get_int( json_object_array_get_idx(iidArray, iidIdx));
+		if(objIid.idx[iidIdx] != 0)
+			objIid.level = iidIdx+1;
+	}
+	if((ret = zcfgFeObjJsonGet(RDM_OID_NAT_ADDR_MAPPING, &objIid, &NatAddrMappingJobj)) != ZCFG_SUCCESS) {
+		return ret;
+	}
+	while(paraName){
+		struct json_object *paramValue = json_object_object_get(Jobj, paraName);
+		if(!paramValue) {
+			paraName = (const char *)NAT_ADDR_MAPPING_param[n++].paraName;
+			continue;
+		}
+		json_object_object_add(NatAddrMappingJobj, paraName, JSON_OBJ_COPY(paramValue));
+		paramModified = 1;				
+		paraName = (const char *)NAT_ADDR_MAPPING_param[n++].paraName;
+	}
+
+	if(paramModified) {
+		if((ret = zcfgFeObjJsonSet(RDM_OID_NAT_ADDR_MAPPING, &objIid, NatAddrMappingJobj, NULL)) != ZCFG_SUCCESS);
+	}
+	json_object_put(NatAddrMappingJobj);
+	return ret;
+}
+zcfgRet_t zcfgFeDalNatAddrMappingDelete(struct json_object *Jobj, char *replyMsg){
+
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	objIndex_t objIid;
+	struct json_object *iidArray = NULL;
+	uint8_t iidIdx =0;
+
+	
+	//IID_INIT(objIid);
+	iidArray = json_object_object_get(Jobj, "iid");
+	
+	for(iidIdx=0;iidIdx<6;iidIdx++){
+		objIid.idx[iidIdx] = json_object_get_int( json_object_array_get_idx(iidArray, iidIdx));
+		if(objIid.idx[iidIdx] != 0)
+			objIid.level = iidIdx+1;
+	}
+	
+	zcfgFeObjJsonDel(RDM_OID_NAT_ADDR_MAPPING, &objIid, NULL);
+	
+	return ret;
+	
+}
+zcfgRet_t zcfgFeDalNatAddrMapping(const char *method, struct json_object *Jobj, char *replyMsg)
+{
+	zcfgRet_t ret = ZCFG_SUCCESS;
+
+	if(!method || !Jobj)
+		return ZCFG_INTERNAL_ERROR;
+
+	if(!strcmp(method, "PUT")) {
+		ret = zcfgFeDalNatAddrMappingEdit(Jobj, NULL);
+	}
+	else if(!strcmp(method, "POST")) {
+		ret = zcfgFeDalNatAddrMappingAdd(Jobj, replyMsg);
+	}
+	else if(!strcmp(method, "DELETE")) {
+		ret = zcfgFeDalNatAddrMappingDelete(Jobj, NULL);
+	}
+
+	return ret;
+}
Index: libzcfg_fe_dal-1.0/network/nat/zcfg_fe_dal_nat_dmz_alg.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ libzcfg_fe_dal-1.0/network/nat/zcfg_fe_dal_nat_dmz_alg.c	2016-10-05 12:12:31.115147200 +0800
@@ -0,0 +1,82 @@
+
+#include <json/json.h>
+
+#include "zcfg_common.h"
+#include "zcfg_rdm_oid.h"
+#include "zcfg_rdm_obj.h"
+#include "zcfg_debug.h"
+#include "zcfg_fe_rdm_string.h"
+#include "zcfg_fe_dal_common.h"
+
+#define CWMP_SOAP_MSG_DEBUG (1 << 1)
+
+dal_param_t NAT_DMZ_ALG_param[] =
+{
+	{"PortMappingNumberOfEntries",		dalType_int,	0,	100,	NULL},
+	{"X_ZYXEL_DMZHost",		dalType_string,	0,	32,	NULL},
+	{"X_ZYXEL_NAT_ALG",		dalType_boolean,	0,	0,	NULL},
+	{"X_ZYXEL_SIP_ALG",		dalType_boolean,	0,	0,	NULL},
+	{"X_ZYXEL_RTSP_ALG",		dalType_boolean,	0,	0,	NULL},
+	{"X_ZYXEL_PPTP_ALG",		dalType_boolean,	0,	0,	NULL},
+	{"X_ZYXEL_IPSEC_ALG",		dalType_boolean,	0,	0,	NULL},
+	{NULL,		0,	0,	0,	NULL}
+	
+};
+
+zcfgRet_t zcfgFeDalNatDMZALGEdit(struct json_object *Jobj, char *replyMsg)
+{
+
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	const char *paraName;
+	objIndex_t objIid;
+	struct json_object *natDmzAlgJobj = NULL;
+	int paramModified = 0, n = 0;
+
+	paraName = (const char *)NAT_DMZ_ALG_param[n++].paraName;
+	
+	IID_INIT(objIid);
+	if((ret = zcfgFeObjJsonGet(RDM_OID_NAT, &objIid, &natDmzAlgJobj)) != ZCFG_SUCCESS) {
+		printf("%s: Object retrieve fail\n", __FUNCTION__);
+		return ret;
+	}
+	
+	while(paraName){
+		struct json_object *paramValue = json_object_object_get(Jobj, paraName);
+		if(!paramValue) {
+			paraName = (const char *)NAT_DMZ_ALG_param[n++].paraName;
+			continue;
+		}
+
+		json_object_object_add(natDmzAlgJobj, paraName, JSON_OBJ_COPY(paramValue));
+		paramModified = 1;			
+
+		paraName = (const char *)NAT_DMZ_ALG_param[n++].paraName;
+	}
+
+	if(paramModified) {
+		if((ret = zcfgFeObjJsonSet(RDM_OID_NAT, &objIid, natDmzAlgJobj, NULL)) != ZCFG_SUCCESS)
+			printf("%s: Write object fail\n", __FUNCTION__);
+	}
+	
+	json_object_put(natDmzAlgJobj);
+	return ret;
+}
+zcfgRet_t zcfgFeDalNatDMZALG(const char *method, struct json_object *Jobj, char *replyMsg)
+{
+	zcfgRet_t ret = ZCFG_SUCCESS;
+
+	if(!method || !Jobj)
+		return ZCFG_INTERNAL_ERROR;
+
+	if(!strcmp(method, "PUT")) {
+		ret = zcfgFeDalNatDMZALGEdit(Jobj, NULL);
+	}
+	else if(!strcmp(method, "POST")) {
+		
+	}
+	else if(!strcmp(method, "DELETE")) {
+		
+	}
+
+	return ret;
+}
Index: libzcfg_fe_dal-1.0/network/nat/zcfg_fe_dal_nat_port_mapping.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ libzcfg_fe_dal-1.0/network/nat/zcfg_fe_dal_nat_port_mapping.c	2016-10-05 12:12:31.115147200 +0800
@@ -0,0 +1,152 @@
+
+#include <json/json.h>
+
+#include "zcfg_common.h"
+#include "zcfg_rdm_oid.h"
+#include "zcfg_rdm_obj.h"
+#include "zcfg_debug.h"
+#include "zcfg_fe_rdm_string.h"
+#include "zcfg_fe_dal_common.h"
+
+#define CWMP_SOAP_MSG_DEBUG (1 << 1)
+
+dal_param_t NAT_PORT_MAPPING_param[] =
+{
+	{"Enable",		dalType_boolean,	0,	0,	NULL},
+	{"Status",		dalType_string,	0,	19,	NULL},
+	{"Alias",		dalType_string,	0,	64,	NULL},
+	{"Interface",		dalType_string,	0,	256,	NULL},
+	{"X_ZYXEL_WANIP",		dalType_string,	0,	45,	NULL},
+	{"AllInterfaces",		dalType_boolean,	0,	0,	NULL},
+	{"LeaseDuration",		dalType_int,	0,	63737,	NULL},
+	{"RemoteHost",		dalType_string,	0,	45,	NULL},
+	{"ExternalPort",		dalType_int,	0,	63737,	NULL},
+	{"ExternalPortEndRange",		dalType_int,	0,	63737,	NULL},
+	{"InternalPort",		dalType_int,	0,	63737,	NULL},
+	{"X_ZYXEL_InternalPortEndRange",		dalType_int,	0,	63737,	NULL},
+	{"X_ZYXEL_StartTime",		dalType_string,	0,	31,	NULL},
+	{"X_ZYXEL_StopTime",		dalType_string,	0,	31,	NULL},
+	{"X_ZYXEL_AutoDetectWanStatus",		dalType_boolean,	0,	0,	NULL},
+	{"Protocol",		dalType_string,	0,	3,	NULL},
+	{"InternalClient",		dalType_string,	0,	256,	NULL},
+	{"Description",		dalType_string,	0,	256,	NULL},			
+	{NULL,		0,	0,	0,	NULL}
+};
+
+zcfgRet_t zcfgFeDalNatPortMappingAdd(struct json_object *Jobj, char *replyMsg)
+{
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	const char *paraName;
+	objIndex_t objIid;
+	struct json_object *NatPortMappingJobj = NULL;
+	int n=0;
+	paraName = (const char *)NAT_PORT_MAPPING_param[n++].paraName;
+
+	IID_INIT(objIid);
+	zcfgFeObjJsonAdd(RDM_OID_NAT_PORT_MAPPING, &objIid, NULL);
+	if((ret = zcfgFeObjJsonGet(RDM_OID_NAT_PORT_MAPPING, &objIid, &NatPortMappingJobj)) != ZCFG_SUCCESS) {
+		printf("%s: Object retrieve fail\n", __FUNCTION__);
+		return ret;
+	}	
+	while(paraName){
+		struct json_object *paramValue = json_object_object_get(Jobj, paraName);
+		if(!paramValue) {
+			printf("function:%s, Line =%d\n", __FUNCTION__,__LINE__);
+			paraName = (const char *)NAT_PORT_MAPPING_param[n++].paraName;
+			continue;
+		}
+		json_object_object_add(NatPortMappingJobj, paraName, JSON_OBJ_COPY(paramValue));
+		paraName = (const char *)NAT_PORT_MAPPING_param[n++].paraName;
+	}
+
+	if((ret = zcfgFeObjJsonSet(RDM_OID_NAT_PORT_MAPPING, &objIid, NatPortMappingJobj, NULL)) == ZCFG_SUCCESS)
+	{
+		sprintf(replyMsg, "[%d,%d,%d,%d,%d,%d]",objIid.idx[0],objIid.idx[1],objIid.idx[2],
+				objIid.idx[3],objIid.idx[4],objIid.idx[5]);
+		//printf("reply msg %s\n",replyMsg);		
+	}
+	
+	json_object_put(NatPortMappingJobj);
+	return ret;
+}
+zcfgRet_t zcfgFeDalNatPortMappingEdit(struct json_object *Jobj, char *replyMsg)
+{
+
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	const char *paraName;
+	objIndex_t objIid;
+	struct json_object *NatPortMappingJobj = NULL;
+	int paramModified = 0, n = 0;
+	struct json_object *iidArray = NULL;
+	uint8_t iidIdx =0;
+	paraName = (const char *)NAT_PORT_MAPPING_param[n++].paraName;
+	
+	//IID_INIT(objIid);
+	iidArray = json_object_object_get(Jobj, "iid");
+	for(iidIdx=0;iidIdx<6;iidIdx++){
+		objIid.idx[iidIdx] = json_object_get_int( json_object_array_get_idx(iidArray, iidIdx));
+		if(objIid.idx[iidIdx] != 0)
+			objIid.level = iidIdx+1;
+	}
+	if((ret = zcfgFeObjJsonGet(RDM_OID_NAT_PORT_MAPPING, &objIid, &NatPortMappingJobj)) != ZCFG_SUCCESS) {
+		return ret;
+	}
+	while(paraName){
+		struct json_object *paramValue = json_object_object_get(Jobj, paraName);
+		if(!paramValue) {
+			paraName = (const char *)NAT_PORT_MAPPING_param[n++].paraName;
+			continue;
+		}
+		json_object_object_add(NatPortMappingJobj, paraName, JSON_OBJ_COPY(paramValue));
+		paramModified = 1;				
+		paraName = (const char *)NAT_PORT_MAPPING_param[n++].paraName;
+	}
+
+	if(paramModified) {
+		if((ret = zcfgFeObjJsonSet(RDM_OID_NAT_PORT_MAPPING, &objIid, NatPortMappingJobj, NULL)) != ZCFG_SUCCESS);
+	}
+	json_object_put(NatPortMappingJobj);
+	return ret;
+}
+zcfgRet_t zcfgFeDalNatPortMappingDelete(struct json_object *Jobj, char *replyMsg)
+{
+
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	objIndex_t objIid;
+	struct json_object *iidArray = NULL;
+	uint8_t iidIdx =0;
+
+	
+	//IID_INIT(objIid);
+	iidArray = json_object_object_get(Jobj, "iid");
+	
+	for(iidIdx=0;iidIdx<6;iidIdx++){
+		objIid.idx[iidIdx] = json_object_get_int( json_object_array_get_idx(iidArray, iidIdx));
+		if(objIid.idx[iidIdx] != 0)
+			objIid.level = iidIdx+1;
+	}
+	
+	zcfgFeObjJsonDel(RDM_OID_NAT_PORT_MAPPING, &objIid, NULL);
+	
+	return ret;
+	
+}
+zcfgRet_t zcfgFeDalNatPortMapping(const char *method, struct json_object *Jobj, char *replyMsg)
+{
+	zcfgRet_t ret = ZCFG_SUCCESS;
+
+	if(!method || !Jobj)
+		return ZCFG_INTERNAL_ERROR;
+
+	if(!strcmp(method, "PUT")) {
+		ret = zcfgFeDalNatPortMappingEdit(Jobj, NULL);
+	}
+	else if(!strcmp(method, "POST")) {
+		ret = zcfgFeDalNatPortMappingAdd(Jobj, replyMsg);
+	}
+	else if(!strcmp(method, "DELETE")) {
+		ret = zcfgFeDalNatPortMappingDelete(Jobj, NULL);
+	}
+
+	return ret;
+}
Index: libzcfg_fe_dal-1.0/network/nat/zcfg_fe_dal_nat_port_triggering.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ libzcfg_fe_dal-1.0/network/nat/zcfg_fe_dal_nat_port_triggering.c	2016-10-05 12:12:31.115147200 +0800
@@ -0,0 +1,145 @@
+
+#include <json/json.h>
+
+#include "zcfg_common.h"
+#include "zcfg_rdm_oid.h"
+#include "zcfg_rdm_obj.h"
+#include "zcfg_debug.h"
+#include "zcfg_fe_rdm_string.h"
+#include "zcfg_fe_dal_common.h"
+
+#define CWMP_SOAP_MSG_DEBUG (1 << 1)
+
+dal_param_t NAT_PORT_TRIGGERING_param[] =
+{
+	{"Enable",		dalType_boolean,	0,	0,	NULL},
+	{"Status",		dalType_string,	0,	19,	NULL},
+	{"Name",		dalType_string,	0,	64,	NULL},
+	{"Interface",		dalType_string,	0,	256,	NULL},
+	{"TriggerPort",		dalType_int,	0,	63737,	NULL},
+	{"TriggerPortEndRange",		dalType_int,	0,	63737,	NULL},
+	{"OpenPort",		dalType_int,	0,	63737,	NULL},
+	{"OpenPortEndRange",		dalType_int,	0,	63737,	NULL},
+	{"Protocol",		dalType_string,	0,	3,	NULL},
+	{"TriggerProtocol",		dalType_string,	0,	3,	NULL},
+	{"Description",		dalType_string,	0,	256,	NULL},			
+	{NULL,		0,	0,	0,	NULL}
+};
+
+zcfgRet_t zcfgFeDalNatPortTriggeringAdd(struct json_object *Jobj, char *replyMsg)
+{
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	const char *paraName;
+	objIndex_t objIid;
+	struct json_object *NatPortTriggeringJobj = NULL;
+	int n=0;
+	paraName = (const char *)NAT_PORT_TRIGGERING_param[n++].paraName;
+
+	IID_INIT(objIid);
+	zcfgFeObjJsonAdd(RDM_OID_NAT_PORT_TRIGGERING, &objIid, NULL);
+	if((ret = zcfgFeObjJsonGet(RDM_OID_NAT_PORT_TRIGGERING, &objIid, &NatPortTriggeringJobj)) != ZCFG_SUCCESS) {
+		printf("%s: Object retrieve fail\n", __FUNCTION__);
+		return ret;
+	}	
+	while(paraName){
+		struct json_object *paramValue = json_object_object_get(Jobj, paraName);
+		if(!paramValue) {
+			printf("function:%s, Line =%d\n", __FUNCTION__,__LINE__);
+			paraName = (const char *)NAT_PORT_TRIGGERING_param[n++].paraName;
+			continue;
+		}
+		json_object_object_add(NatPortTriggeringJobj, paraName, JSON_OBJ_COPY(paramValue));
+		paraName = (const char *)NAT_PORT_TRIGGERING_param[n++].paraName;
+	}
+
+	if((ret = zcfgFeObjJsonSet(RDM_OID_NAT_PORT_TRIGGERING, &objIid, NatPortTriggeringJobj, NULL)) == ZCFG_SUCCESS)
+	{
+		sprintf(replyMsg, "[%d,%d,%d,%d,%d,%d]",objIid.idx[0],objIid.idx[1],objIid.idx[2],
+				objIid.idx[3],objIid.idx[4],objIid.idx[5]);
+		printf("reply msg %s\n",replyMsg);		
+	}
+	
+	json_object_put(NatPortTriggeringJobj);
+	return ret;
+}
+zcfgRet_t zcfgFeDalNatPortTriggeringEdit(struct json_object *Jobj, char *replyMsg)
+{
+
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	const char *paraName;
+	objIndex_t objIid;
+	struct json_object *NatPortTriggeringJobj = NULL;
+	int paramModified = 0, n = 0;
+	struct json_object *iidArray = NULL;
+	uint8_t iidIdx =0;
+	paraName = (const char *)NAT_PORT_TRIGGERING_param[n++].paraName;
+	
+	//IID_INIT(objIid);
+	iidArray = json_object_object_get(Jobj, "iid");
+	for(iidIdx=0;iidIdx<6;iidIdx++){
+		objIid.idx[iidIdx] = json_object_get_int( json_object_array_get_idx(iidArray, iidIdx));
+		if(objIid.idx[iidIdx] != 0)
+			objIid.level = iidIdx+1;
+	}
+	if((ret = zcfgFeObjJsonGet(RDM_OID_NAT_PORT_TRIGGERING, &objIid, &NatPortTriggeringJobj)) != ZCFG_SUCCESS) {
+		return ret;
+	}
+	while(paraName){
+		struct json_object *paramValue = json_object_object_get(Jobj, paraName);
+		if(!paramValue) {
+			paraName = (const char *)NAT_PORT_TRIGGERING_param[n++].paraName;
+			continue;
+		}
+		json_object_object_add(NatPortTriggeringJobj, paraName, JSON_OBJ_COPY(paramValue));
+		paramModified = 1;				
+		paraName = (const char *)NAT_PORT_TRIGGERING_param[n++].paraName;
+	}
+
+	if(paramModified) {
+		if((ret = zcfgFeObjJsonSet(RDM_OID_NAT_PORT_TRIGGERING, &objIid, NatPortTriggeringJobj, NULL)) != ZCFG_SUCCESS);
+	}
+	json_object_put(NatPortTriggeringJobj);
+	return ret;
+}
+zcfgRet_t zcfgFeDalNatPortTriggeringDelete(struct json_object *Jobj, char *replyMsg)
+{
+	
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	objIndex_t objIid;
+	struct json_object *iidArray = NULL;
+	uint8_t iidIdx =0;
+
+	
+	//IID_INIT(objIid);
+	iidArray = json_object_object_get(Jobj, "iid");
+	
+	for(iidIdx=0;iidIdx<6;iidIdx++){
+		objIid.idx[iidIdx] = json_object_get_int( json_object_array_get_idx(iidArray, iidIdx));
+		if(objIid.idx[iidIdx] != 0)
+			objIid.level = iidIdx+1;
+	}
+	
+	zcfgFeObjJsonDel(RDM_OID_NAT_PORT_TRIGGERING, &objIid, NULL);
+	
+	return ret;
+	
+}
+zcfgRet_t zcfgFeDalNatPortTriggering(const char *method, struct json_object *Jobj, char *replyMsg)
+{
+	zcfgRet_t ret = ZCFG_SUCCESS;
+
+	if(!method || !Jobj)
+		return ZCFG_INTERNAL_ERROR;
+
+	if(!strcmp(method, "PUT")) {
+		ret = zcfgFeDalNatPortTriggeringEdit(Jobj, NULL);
+	}
+	else if(!strcmp(method, "POST")) {
+		ret = zcfgFeDalNatPortTriggeringAdd(Jobj, replyMsg);
+	}
+	else if(!strcmp(method, "DELETE")) {
+		ret = zcfgFeDalNatPortTriggeringDelete(Jobj, NULL);
+	}
+
+	return ret;
+}
Index: libzcfg_fe_dal-1.0/network/nat/zcfg_fe_dal_nat_session.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ libzcfg_fe_dal-1.0/network/nat/zcfg_fe_dal_nat_session.c	2016-10-05 12:12:31.115147200 +0800
@@ -0,0 +1,78 @@
+
+#include <json/json.h>
+
+#include "zcfg_common.h"
+#include "zcfg_rdm_oid.h"
+#include "zcfg_rdm_obj.h"
+#include "zcfg_debug.h"
+#include "zcfg_fe_rdm_string.h"
+#include "zcfg_fe_dal_common.h"
+
+#define CWMP_SOAP_MSG_DEBUG (1 << 1)
+
+dal_param_t NAT_SESSION_CTL_param[] =
+{
+	{"MaxSessionPerSystem",		dalType_int,	0,	20480,	NULL},
+	{"MaxSessionPerHost",		dalType_int,	0,	20480,	NULL},
+	{NULL,		0,	0,	0,	NULL}
+	
+};
+
+zcfgRet_t zcfgFeDalNatSessionCtlEdit(struct json_object *Jobj, char *replyMsg)
+{
+
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	const char *paraName;
+	objIndex_t objIid;
+	struct json_object *natSessionJobj = NULL;
+	int paramModified = 0, n = 0;
+
+	paraName = (const char *)NAT_SESSION_CTL_param[n++].paraName;
+	
+	IID_INIT(objIid);
+	if((ret = zcfgFeObjJsonGet(RDM_OID_NAT_SESSION_CTL, &objIid, &natSessionJobj)) != ZCFG_SUCCESS) 
+	{
+		printf("%s: Object retrieve fail\n", __FUNCTION__);
+		return ret;
+	}
+	
+	while(paraName){
+		struct json_object *paramValue = json_object_object_get(Jobj, paraName);
+		if(!paramValue) {
+			paraName = (const char *)NAT_SESSION_CTL_param[n++].paraName;
+			continue;
+		}
+
+		json_object_object_add(natSessionJobj, paraName, JSON_OBJ_COPY(paramValue));
+		paramModified = 1;			
+
+		paraName = (const char *)NAT_SESSION_CTL_param[n++].paraName;
+	}
+
+	if(paramModified) {
+		if((ret = zcfgFeObjJsonSet(RDM_OID_NAT_SESSION_CTL, &objIid, natSessionJobj, NULL)) != ZCFG_SUCCESS)
+			printf("%s: Write object fail\n", __FUNCTION__);
+	}
+	
+	json_object_put(natSessionJobj);
+	return ret;
+}
+zcfgRet_t zcfgFeDalNatSessionCtl(const char *method, struct json_object *Jobj, char *replyMsg)
+{
+	zcfgRet_t ret = ZCFG_SUCCESS;
+
+	if(!method || !Jobj)
+		return ZCFG_INTERNAL_ERROR;
+
+	if(!strcmp(method, "PUT")) {
+		ret = zcfgFeDalNatSessionCtlEdit(Jobj, NULL);
+	}
+	else if(!strcmp(method, "POST")) {
+		
+	}
+	else if(!strcmp(method, "DELETE")) {
+		
+	}
+
+	return ret;
+}
Index: libzcfg_fe_dal-1.0/zcfg_fe_dal.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/zcfg_fe_dal.c	2016-10-07 08:27:04.182552343 +0800
+++ libzcfg_fe_dal-1.0/zcfg_fe_dal.c	2016-10-07 08:30:43.705472100 +0800
@@ -11,6 +11,11 @@
 extern dal_param_t MGMT_param[];
 extern dal_param_t DNS_ENTRY_param[];
 extern dal_param_t D_DNS_param[];
+extern dal_param_t NAT_PORT_MAPPING_param[];
+extern dal_param_t NAT_PORT_TRIGGERING_param[];
+extern dal_param_t NAT_DMZ_ALG_param[];
+extern dal_param_t NAT_ADDR_MAPPING_param[];
+extern dal_param_t NAT_SESSION_CTL_param[];
 extern dal_param_t IntfGrp_param[];
 extern dal_param_t VLANGRP_param[];
 extern dal_param_t IGMPMLD_param[];
@@ -25,6 +30,11 @@
 extern zcfgRet_t zcfgFeDalMgmt(const char *method, struct json_object *Jobj, char *replyMsg);
 extern zcfgRet_t zcfgFeDalDnsEntry(const char *method, struct json_object *Jobj, char *replyMsg);
 extern zcfgRet_t zcfgFeDalDDns(const char *method, struct json_object *Jobj, char *replyMsg);
+extern zcfgRet_t zcfgFeDalNatPortMapping(const char *method, struct json_object *Jobj, char *replyMsg);
+extern zcfgRet_t zcfgFeDalNatPortTriggering(const char *method, struct json_object *Jobj, char *replyMsg);
+extern zcfgRet_t zcfgFeDalNatDMZALG(const char *method, struct json_object *Jobj, char *replyMsg);
+extern zcfgRet_t zcfgFeDalNatAddrMapping(const char *method, struct json_object *Jobj, char *replyMsg);
+extern zcfgRet_t zcfgFeDalNatSessionCtl(const char *method, struct json_object *Jobj, char *replyMsg);
 extern zcfgRet_t zcfgFeDalIntrGrp(const char *method, struct json_object *Jobj, char *replyMsg);
 extern zcfgRet_t zcfgFeDalVlanGroup(const char *method, struct json_object *Jobj, char *replyMsg);
 extern zcfgRet_t zcfgFeDalIGMPMLD(const char *method, struct json_object *Jobj, char *replyMsg);
@@ -48,6 +58,11 @@
 {"MGMT",			MGMT_param,			zcfgFeDalMgmt},
 {"DNS_ENTRY",		DNS_ENTRY_param,	zcfgFeDalDnsEntry},
 {"D_DNS",			D_DNS_param,		zcfgFeDalDDns},
+{"NAT_PORT_MAPPING",NAT_PORT_MAPPING_param,	zcfgFeDalNatPortMapping},
+{"NAT_PORT_TRIGGERING",NAT_PORT_TRIGGERING_param,	zcfgFeDalNatPortTriggering},
+{"NAT_DMZ_ALG",		NAT_DMZ_ALG_param,	zcfgFeDalNatDMZALG},
+{"NAT_ADDR_MAPPING",NAT_ADDR_MAPPING_param,	zcfgFeDalNatAddrMapping},
+{"NAT_SESSION_CTL", NAT_SESSION_CTL_param,	zcfgFeDalNatSessionCtl},
 {"INTF_GP",			IntfGrp_param,		zcfgFeDalIntrGrp},
 {"VLANGRP", 		VLANGRP_param,		zcfgFeDalVlanGroup},
 {"IGMPMLD", 		IGMPMLD_param,		zcfgFeDalIGMPMLD},
