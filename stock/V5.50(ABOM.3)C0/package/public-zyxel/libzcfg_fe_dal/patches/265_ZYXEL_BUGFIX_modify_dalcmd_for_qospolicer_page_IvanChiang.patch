Index: libzcfg_fe_dal-1.0/network/qos/zcfg_fe_QosPolicer.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/network/qos/zcfg_fe_QosPolicer.c	2017-07-21 17:15:48.132968439 +0800
+++ libzcfg_fe_dal-1.0/network/qos/zcfg_fe_QosPolicer.c	2017-07-21 17:17:26.812936000 +0800
@@ -424,40 +424,140 @@
 	zcfgRet_t ret = ZCFG_SUCCESS;
 	char policer_name[30] = {0};
 	s_QosPolicer QosPolicer_Info;
+	char *token = NULL,*partial = NULL,*type = NULL;
 	json_object *policerObj = NULL;
 	objIndex_t policerIid = {0};
 	IID_INIT(policerIid);
+	int excessBurstSize = 0, peakrate = 0, peakburstsize = 0, commitrate = 0;
 
-#if(QOS_DAL_DEBUG == 1)			
-	printf("zcfgFeDalQosPolicerEdit\n");
-#endif
+	PolicerInfoInit(&QosPolicer_Info);
 	getQosPolicerBasicInfo(Jobj, &QosPolicer_Info);
 
-	// PUT RDM_OID_QOS_SHAPER
-	i = 0;
-	while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_QOS_POLICER, &policerIid, &policerObj) == ZCFG_SUCCESS) {
-		if(i == QosPolicer_Info.idx) {
-			prepareQosPolicerObj(&QosPolicer_Info, policerObj);
-			zcfgFeObjJsonSet(RDM_OID_QOS_POLICER, &policerIid, policerObj, NULL);
-			zcfgFeJsonObjFree(policerObj);
-
-			sprintf(policer_name, "Policer.%d", policerIid.idx[0]);
-			updateQosClass(e_ActionType_EDIT, policer_name, QosPolicer_Info.ChooseClassArray); //PUT QOS CLASS
-			//updatePolicerClassInfo(); // update qosPolicerClassTable
-			break;
+	zcfg_offset_t oid;		
+	oid = RDM_OID_QOS_POLICER;		
+	ret = convertIndextoIid(QosPolicer_Info.Index, &policerIid, oid, NULL, NULL, replyMsg);		
+	if(ret != ZCFG_SUCCESS)				
+		return ret;	
+	if(QosPolicer_Info.Name != NULL){		
+		ret = dalcmdParamCheck(&policerIid, QosPolicer_Info.Name , oid, "X_ZYXEL_Name", "Name",  replyMsg);		
+		if(ret != ZCFG_SUCCESS)			
+			return ret;	
+	}
+
+	if(zcfgFeObjJsonGetWithoutUpdate(RDM_OID_QOS_POLICER, &policerIid, &policerObj) == ZCFG_SUCCESS) {
+		if(json_object_object_get(Jobj, "MeterType") != NULL){
+			//Type is SingleRateThreeColor, need to ckeck ExcessBurstSizz and PartialConformingAction 
+			if(!strcmp(QosPolicer_Info.MeterType,"SingleRateThreeColor")){
+				excessBurstSize = json_object_get_int(json_object_object_get(policerObj, "ExcessBurstSize"));
+				partial = json_object_get_string(json_object_object_get(policerObj, "PartialConformingAction"));
+				if(excessBurstSize == 0 && json_object_object_get(Jobj, "ExcessBurstSize") == NULL){
+					printf("Need to enter ExcessBurstSize parameter.\n");
+					zcfgFeJsonObjFree(policerObj);
+					return ZCFG_INVALID_PARAM_VALUE;
+				}
+				
+				if(!strcmp(partial,"") && json_object_object_get(Jobj, "PartialConformingAction") == NULL){
+					printf("Need to enter PartialConformingAction parameter.\n");
+					zcfgFeJsonObjFree(policerObj);
+					return ZCFG_INVALID_PARAM_VALUE;
+				}
+				json_object_object_add(policerObj, "PeakRate", json_object_new_int(0));
+				json_object_object_add(policerObj, "PeakBurstSize", json_object_new_int(0));
+			}
+
+			//Type is TwoRateThreeColor, need to ckeck PeakRate ,PeakBurstSize ,PartialConformingAction and CommittedRate.  
+			if(!strcmp(QosPolicer_Info.MeterType,"TwoRateThreeColor")){
+				peakrate = json_object_get_int(json_object_object_get(policerObj, "PeakRate"));
+				peakburstsize = json_object_get_int(json_object_object_get(policerObj, "PeakBurstSize"));
+				partial = json_object_get_string(json_object_object_get(policerObj, "PartialConformingAction"));
+				commitrate = json_object_get_int(json_object_object_get(policerObj, "CommittedRate"));
+				if(peakrate == 0 && json_object_object_get(Jobj, "PeakRate") == NULL){
+					printf("Need to enter PeakRate parameter.\n");
+					zcfgFeJsonObjFree(policerObj);
+					return ZCFG_INVALID_PARAM_VALUE;
+				}
+				else{
+					if(json_object_object_get(Jobj, "PeakRate") == NULL){
+						if(json_object_object_get(policerObj, "CommittedRate") != NULL){
+							if( peakrate < QosPolicer_Info.CommittedRate){
+								printf("PeakRate need to equal or greater than CommittedRate.\n");
+								zcfgFeJsonObjFree(policerObj);
+								return ZCFG_INVALID_PARAM_VALUE;
+							}
+						}
+						else{
+							if( peakrate < commitrate){
+								printf("PeakRate need to equal or greater than CommittedRate.\n");
+								zcfgFeJsonObjFree(policerObj);
+								return ZCFG_INVALID_PARAM_VALUE;
+							}
+						}
+							
+					}
+					else{
+						if(json_object_object_get(policerObj, "CommittedRate") != NULL){
+							if(QosPolicer_Info.PeakRate < QosPolicer_Info.CommittedRate){
+								printf("PeakRate need to equal or greater than CommittedRate.\n");
+								zcfgFeJsonObjFree(policerObj);
+								return ZCFG_INVALID_PARAM_VALUE;
+							}
+						}
+						else{
+							if(QosPolicer_Info.PeakRate < commitrate){
+								printf("PeakRate need to equal or greater than CommittedRate.\n");
+								zcfgFeJsonObjFree(policerObj);
+								return ZCFG_INVALID_PARAM_VALUE;
+							}
+						}
+					}
+						
+				}
+				
+				if(peakburstsize == 0 && json_object_object_get(Jobj, "PeakBurstSize") == NULL){
+					printf("Need to enter PeakBurstSize parameter.\n");
+					zcfgFeJsonObjFree(policerObj);
+					return ZCFG_INVALID_PARAM_VALUE;
+				}
+				if(!strcmp(partial,"") && json_object_object_get(Jobj, "PartialConformingAction") == NULL){
+					printf("Need to enter PartialConformingAction parameter.\n");
+					zcfgFeJsonObjFree(policerObj);
+					return ZCFG_INVALID_PARAM_VALUE;
+				}
+				json_object_object_add(policerObj, "ExcessBurstSize", json_object_new_int(0));
+			}
+			//Type is SimpleTokenBucket, need to ckeck PeakRate ,PeakBurstSize ,PartialConformingAction,ExcessBurstSize. 
+			if(!strcmp(QosPolicer_Info.MeterType,"SimpleTokenBucket")){
+				json_object_object_add(policerObj, "ExcessBurstSize", json_object_new_int(0));
+				json_object_object_add(policerObj, "PeakRate", json_object_new_int(0));
+				json_object_object_add(policerObj, "PeakBurstSize", json_object_new_int(0));
+				json_object_object_add(policerObj, "PartialConformingAction", json_object_new_string(""));
+			}
+		}
+
+		prepareQosPolicerObj(Jobj,&QosPolicer_Info, policerObj);
+		zcfgFeObjJsonSet(RDM_OID_QOS_POLICER, &policerIid, policerObj, NULL);
+		sprintf(policer_name, "Policer.%d", policerIid.idx[0]);
+		token = strtok_r(QosPolicer_Info.Class, ",", &QosPolicer_Info.Class);
+		while(token != NULL){
+			checkOriginClass(policer_name, token);
+			updateQosClass(e_ActionType_EDIT, policer_name, token); //PUT QOS CLASS
+			token = strtok_r(QosPolicer_Info.Class, ",", &QosPolicer_Info.Class);
 		}
+		//updatePolicerClassInfo(); // update qosPolicerClassTable
 		zcfgFeJsonObjFree(policerObj);
-		i++;
+		return ret;
 	}
-	freeQosPolicerBasicInfo(&QosPolicer_Info);
 
-	return ret;
+	else{				
+		printf("%s():(ERROR) zcfgFeObjJsonGetWithoutUpdate get Qos Policer fail oid(%d)\n ",__FUNCTION__,RDM_OID_QOS_POLICER);
+		return ZCFG_INTERNAL_ERROR;		
+	}
 }
 
 zcfgRet_t zcfgFeDalQosPolicerDelete(struct json_object *Jobj, char *replyMsg) {
 	zcfgRet_t ret = ZCFG_SUCCESS;
-	int i = 0;
 	char policer_name[30] = {0};
+	char *token = NULL;
 	s_QosPolicerDel QosPolicerDel_Info;
 	json_object *policerObj = NULL;
 	objIndex_t policerIid = {0};
@@ -466,49 +566,45 @@
 #if(QOS_DAL_DEBUG == 1)			
 	printf("zcfgFeDalQosPolicerDelete\n");
 #endif	
+	PolicerDelInit(&QosPolicerDel_Info);
 	getQosPolicerDelInfo(Jobj, &QosPolicerDel_Info);
-
-	// delete case
-	i = 0;
-	while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_QOS_POLICER, &policerIid, &policerObj) == ZCFG_SUCCESS) {
-		if(i == QosPolicerDel_Info.idx) {
-			sprintf(policer_name, "Policer.%d", policerIid.idx[0]);
-			updateQosClass(e_ActionType_DELETE, policer_name, QosPolicerDel_Info.ChooseClassArray); //PUT QOS CLASS
-
-			zcfgFeObjJsonDel(RDM_OID_QOS_POLICER, &policerIid, NULL);
-			zcfgFeJsonObjFree(policerObj);
-
-			//updatePolicerClassInfo(); // update qosPolicerClassTable
-			break;
-		}
+	zcfg_offset_t oid;		
+	oid = RDM_OID_QOS_POLICER;		
+	ret = convertIndextoIid(QosPolicerDel_Info.Index, &policerIid, oid, NULL, NULL, replyMsg);		
+	if(ret != ZCFG_SUCCESS)				
+		return ret;	
+	if(zcfgFeObjJsonGetWithoutUpdate(RDM_OID_QOS_POLICER, &policerIid, &policerObj) == ZCFG_SUCCESS) {	
+		zcfgFeObjJsonDel(RDM_OID_QOS_POLICER, &policerIid, NULL);
+		sprintf(policer_name, "Policer.%d", policerIid.idx[0]);
+		updateQosClass(e_ActionType_DELETE, policer_name, NULL); //PUT QOS CLASS
+		//updatePolicerClassInfo(); // update qosPolicerClassTable
 		zcfgFeJsonObjFree(policerObj);
-		i++;
+		return ret;
+	}
+	else{					
+		printf("%s():(ERROR) zcfgFeObjJsonGetWithoutUpdate get Qos Policer fail oid(%d)\n ",__FUNCTION__,RDM_OID_QOS_POLICER);					
+		return ZCFG_INTERNAL_ERROR;			
 	}
-	freeQosPolicerDelInfo(&QosPolicerDel_Info);
-	
-	return ret;
 }
 
 zcfgRet_t zcfgFeDalQosPolicer(const char *method, struct json_object *Jobj, struct json_object *Jarray, char *replyMsg) {
 	zcfgRet_t ret = ZCFG_SUCCESS;
 
-	t1 = time(NULL);
-	
 	if(!strcmp(method, "POST")) {
-		ret = zcfgFeDalQosPolicerAdd(Jobj, NULL);
+		ret = zcfgFeDalQosPolicerAdd(Jobj, replyMsg);
 	}
 	else if(!strcmp(method, "PUT")) {
-		ret = zcfgFeDalQosPolicerEdit(Jobj, NULL);
+		ret = zcfgFeDalQosPolicerEdit(Jobj, replyMsg);
 	}
 	else if(!strcmp(method, "DELETE")) {
-		ret = zcfgFeDalQosPolicerDelete(Jobj, NULL);
+		ret = zcfgFeDalQosPolicerDelete(Jobj, replyMsg);
+	}
+	else if(!strcmp(method, "GET")) {		
+		ret = zcfgFeDalQosPolicerGet(Jobj, Jarray, NULL);
 	}
 	else {
 		printf("Unknown method:%s\n", method);
 	}
 
-	t2 = time(NULL);
-    printf("zcfgFeDalQosPolicer() Total time=%d seconds ret=%d\n", (int) difftime(t2, t1), ret);
-
 	return ret;
 }
\ No newline at end of file
