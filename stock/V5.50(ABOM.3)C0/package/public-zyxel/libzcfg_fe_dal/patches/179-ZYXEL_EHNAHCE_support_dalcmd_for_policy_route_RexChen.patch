Index: libzcfg_fe_dal-1.0/network/routing/zcfg_fe_dal_policy_route.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/network/routing/zcfg_fe_dal_policy_route.c	2017-05-16 15:18:14.187143919 +0800
+++ libzcfg_fe_dal-1.0/network/routing/zcfg_fe_dal_policy_route.c	2017-05-16 15:19:26.537706200 +0800
@@ -10,23 +10,22 @@
 
 dal_param_t POLICYROUTE_param[] =
 {
-	{"X_ZYXEL_PolicyRoute",					dalType_boolean,0,	0,	NULL},
-	{"Enable",								dalType_boolean,0,	0,	NULL},
-	{"X_ZYXEL_PolicyRouteName",				dalType_string,	0,	0,	NULL},
-	{"X_ZYXEL_SourceIpAddress",				dalType_string,	0,	0,	NULL},
-	{"X_ZYXEL_SourceSubnetMask",			dalType_string,	0,	0,	NULL},
-	{"X_ZYXEL_SourceMacAddress",			dalType_string,	0,	0,	NULL},
-	{"X_ZYXEL_SourceIfName",				dalType_string,	0,	0,	NULL},
-	{"X_ZYXEL_SourcePort",					dalType_string,	0,	0,	NULL},
-	{"X_ZYXEL_Protocol",					dalType_string,	0,	0,	NULL},
-	{"Interface",							dalType_string,	0,	0,	NULL},
+	{"Enable",							dalType_boolean,0,	0,	NULL,	NULL,	dal_Add},
+	//{"X_ZYXEL_PolicyRoute",				dalType_boolean,0,	0,	NULL},	write in dal
+	{"RouteName",						dalType_string,	0,	0,	NULL,	NULL,	dal_Add},
+	{"SourceIpAddress",					dalType_v4Addr,	0,	0,	NULL,	NULL,	dal_Add},
+	{"SourceSubnetMask",				dalType_v4Mask,	0,	0,	NULL,	NULL,	dal_Add},
+	{"Protocol",						dalType_string,	0,	0,	NULL	,"TCP|UDP",	dal_Add},
+	{"SourcePort",						dalType_int,	0,	0,	NULL,	NULL,	dal_Add},
+	{"SourceMacAddress",				dalType_string,	0,	0,	NULL,	NULL,	dal_Add},
+	{"SourceIfName",					dalType_LanPortListBr0NoWiFi,	0,	0,	NULL,	NULL,	dal_Add},	
+	{"WANInterface",					dalType_RtWanWWan,	0,	0,	NULL,	NULL,	dal_Add},
+	{"Index",							dalType_int,	0,	0,	NULL,	NULL,	dal_Delete|dal_Edit},
 	{NULL,									0,				0,	0,	NULL},
 };
 
 struct json_object *policyRTObj;
 
-objIndex_t policyRtIid = {0};
-
 bool X_ZYXEL_PolicyRoute;
 bool Enable;
 const char *X_ZYXEL_PolicyRouteName;
@@ -38,6 +37,34 @@
 const char *X_ZYXEL_Protocol;
 const char *Interface;
 
+void zcfgFeDalShowPolicyRoute(struct json_object *Jarray){
+	struct json_object *obj = NULL;
+	int len = 0, i;
+	if(json_object_get_type(Jarray) != json_type_array){
+		printf("wrong Jobj format!\n");
+		return;
+	}
+	printf("%s %s %d \n",json_object_to_json_string(Jarray), __func__,__LINE__);
+	printf("%-8s %-10s %-10s %-18s %-20s %-10s %-13s %-20s %-20s %-10s\n", 
+		"Index", "Status", "Name", "Source IP", "Source Subnet Mask", "Protocol", "Source Port", "Source MAC", "Source Interface", "WAN Interface");
+	len = json_object_array_length(Jarray);
+	for(i=0;i<len;i++){
+		obj = json_object_array_get_idx(Jarray, i);
+		printf("%-8s %-10s %-10s %-18s %-20s %-10s %-13s %-20s %-20s %-10s\n", 
+		json_object_get_string(json_object_object_get(obj, "index")),
+		json_object_get_string(json_object_object_get(obj, "status")),
+		json_object_get_string(json_object_object_get(obj, "name")),
+		json_object_get_string(json_object_object_get(obj, "ip")),
+		json_object_get_string(json_object_object_get(obj, "mask")),
+		json_object_get_string(json_object_object_get(obj, "protocol")),
+		json_object_get_string(json_object_object_get(obj, "port")),
+		json_object_get_string(json_object_object_get(obj, "mac")),
+		json_object_get_string(json_object_object_get(obj, "srcIntf")),
+		json_object_get_string(json_object_object_get(obj, "WANInterface")));
+	
+	}
+}
+
 
 void initPolicyRouteGlobalObjects(){
 	policyRTObj = NULL;
@@ -50,69 +77,121 @@
 }
 
 void getPolicyRouteBasicInfo(struct json_object *Jobj){
-	X_ZYXEL_PolicyRoute = json_object_get_boolean(json_object_object_get(Jobj, "X_ZYXEL_PolicyRoute"));
+	const char *protocol = NULL;
+	//X_ZYXEL_PolicyRoute = json_object_get_boolean(json_object_object_get(Jobj, "X_ZYXEL_PolicyRoute"));
 	Enable = json_object_get_boolean(json_object_object_get(Jobj, "Enable"));
-	X_ZYXEL_PolicyRouteName = json_object_get_string(json_object_object_get(Jobj, "X_ZYXEL_PolicyRouteName"));
-	X_ZYXEL_SourceIpAddress = json_object_get_string(json_object_object_get(Jobj, "X_ZYXEL_SourceIpAddress"));
-	X_ZYXEL_SourceSubnetMask = json_object_get_string(json_object_object_get(Jobj, "X_ZYXEL_SourceSubnetMask"));
-	X_ZYXEL_SourceMacAddress = json_object_get_string(json_object_object_get(Jobj, "X_ZYXEL_SourceMacAddress"));
-	X_ZYXEL_SourceIfName = json_object_get_string(json_object_object_get(Jobj, "X_ZYXEL_SourceIfName"));
-	X_ZYXEL_SourcePort = json_object_get_string(json_object_object_get(Jobj, "X_ZYXEL_SourcePort"));
-	X_ZYXEL_Protocol = json_object_get_string(json_object_object_get(Jobj, "X_ZYXEL_Protocol"));
-	Interface = json_object_get_string(json_object_object_get(Jobj, "Interface"));
-
-	return;
+	X_ZYXEL_PolicyRouteName = json_object_get_string(json_object_object_get(Jobj, "RouteName"));
+	X_ZYXEL_SourceIpAddress = json_object_get_string(json_object_object_get(Jobj, "SourceIpAddress"));
+	X_ZYXEL_SourceSubnetMask = json_object_get_string(json_object_object_get(Jobj, "SourceSubnetMask"));
+	X_ZYXEL_SourceMacAddress = json_object_get_string(json_object_object_get(Jobj, "SourceMacAddress"));
+	X_ZYXEL_SourceIfName = json_object_get_string(json_object_object_get(Jobj, "SourceIfName"));
+	X_ZYXEL_SourcePort = json_object_get_string(json_object_object_get(Jobj, "SourcePort"));
+	protocol = json_object_get_string(json_object_object_get(Jobj, "Protocol"));
+	if(json_object_object_get(Jobj, "Protocol")){
+		if(!strcmp(protocol, "TCP"))
+			X_ZYXEL_Protocol = 6;
+		else if(!strcmp(protocol, "UDP"))
+			X_ZYXEL_Protocol = 17;
 }
-
-void zcfgFeDalPolicyRouteObjIidGet(struct json_object *Jobj, char *type){
-	const char* path = NULL;
-	int RouterNum, ipv4fwdNum;
-
-	path = json_object_get_string(json_object_object_get(Jobj, type));
-	//printf("%s(): Edit Policy route path : %s \n ",__FUNCTION__,path);
-
-	sscanf(path,"Routing.Router.%d.IPv4Forwarding.%d",&RouterNum,&ipv4fwdNum);
-	//printf("Policy route - Policy Route Num: %d ipv4fwdNum: %d\n ",RouterNum,ipv4fwdNum);
-	IID_INIT(policyRtIid);
-	policyRtIid.level = 2;
-	policyRtIid.idx[0] = RouterNum;
-	policyRtIid.idx[1] = ipv4fwdNum;
+	Interface = json_object_get_string(json_object_object_get(Jobj, "WANInterface"));
 
 	return;
 }
 
-zcfgRet_t zcfgFeDalPolicyRouteObjEdit(struct json_object *Jobj){
+zcfgRet_t zcfgFeDalPolicyRouteObjEdit(struct json_object *Jobj, objIndex_t *Iid){
 	zcfgRet_t ret = ZCFG_SUCCESS;
-	//printf("%s():--- Edit PolicyRoute Json Object --- \n%s \n ",__FUNCTION__,json_object_to_json_string(Jobj));
-	if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_ROUTING_ROUTER_V4_FWD, &policyRtIid, &policyRTObj)) != ZCFG_SUCCESS){
+	if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_ROUTING_ROUTER_V4_FWD, Iid, &policyRTObj)) != ZCFG_SUCCESS){
 		printf("%s():(ERROR) zcfgFeObjJsonGetWithoutUpdate get Policy route fail oid(%d)\n ",__FUNCTION__,RDM_OID_ROUTING_ROUTER_V4_FWD);
 		return ZCFG_INTERNAL_ERROR;
 	}
 
 	if(policyRTObj != NULL){
-		json_object_object_add(policyRTObj, "X_ZYXEL_PolicyRoute", json_object_new_boolean(X_ZYXEL_PolicyRoute));
+		json_object_object_add(policyRTObj, "X_ZYXEL_PolicyRoute", json_object_new_boolean(true));
+		if(json_object_object_get(Jobj, "Enable"))
 		json_object_object_add(policyRTObj, "Enable", json_object_new_boolean(Enable));
+		if(json_object_object_get(Jobj, "RouteName"))
 		json_object_object_add(policyRTObj, "X_ZYXEL_PolicyRouteName", json_object_new_string(X_ZYXEL_PolicyRouteName));
+		if(json_object_object_get(Jobj, "SourceIpAddress"))
 		json_object_object_add(policyRTObj, "X_ZYXEL_SourceIpAddress", json_object_new_string(X_ZYXEL_SourceIpAddress));
+		if(json_object_object_get(Jobj, "SourceSubnetMask"))
 		json_object_object_add(policyRTObj, "X_ZYXEL_SourceSubnetMask", json_object_new_string(X_ZYXEL_SourceSubnetMask));
+		if(json_object_object_get(Jobj, "SourceMacAddress"))
 		json_object_object_add(policyRTObj, "X_ZYXEL_SourceMacAddress", json_object_new_string(X_ZYXEL_SourceMacAddress));
+		if(json_object_object_get(Jobj, "SourceIfName"))
 		json_object_object_add(policyRTObj, "X_ZYXEL_SourceIfName", json_object_new_string(X_ZYXEL_SourceIfName));
+		if(json_object_object_get(Jobj, "SourcePort"))
 		json_object_object_add(policyRTObj, "X_ZYXEL_SourcePort", json_object_new_string(X_ZYXEL_SourcePort));
-		json_object_object_add(policyRTObj, "X_ZYXEL_Protocol", json_object_new_string(X_ZYXEL_Protocol));
+		if(json_object_object_get(Jobj, "Protocol"))
+			json_object_object_add(policyRTObj, "X_ZYXEL_Protocol", json_object_new_int(X_ZYXEL_Protocol));
+		if(json_object_object_get(Jobj, "WANInterface"))
 		json_object_object_add(policyRTObj, "Interface", json_object_new_string(Interface));
 	}
 
 	return ret;
 }
+/*void convertIndextoIid(int idx, objIndex_t *Iid, zcfg_offset_t oid, char *key, void *ptr){
+	//idx get from GUI, Iid is final return value [1,x,0,0,0,0], oid is RDM_OID_... , ptr is a parameter which condition compare and I don't care parameter type
+	struct json_object *obj = NULL;
+	struct json_object *paramObj = NULL;
+	int count = 1, type = 0;
+	while(zcfgFeObjJsonGetNextWithoutUpdate(oid, Iid, &obj) == ZCFG_SUCCESS){
+		if(key != NULL){	// for parameter contidional check
+			paramObj = json_object_object_get(obj, key);
+			type = json_object_get_type(paramObj);
+			if(type == 1){		//bool value
+				bool *iptr = (bool*)(ptr);
+				if(json_object_get_boolean(paramObj) == iptr){
+					if(idx == count){
+						zcfgFeJsonObjFree(obj);
+						break;
+					}
+					count++;
+				}
+			}
+			else if(type == 3){		// int value
+				int *iptr = (int*)(ptr);
+				if(json_object_get_int(paramObj) == iptr){
+					if(idx == count){
+						zcfgFeJsonObjFree(obj);
+						break;
+					}
+					count++;
+				}
+			}
+			else if(type == 9){		// string value
+				char *iptr = (char*)(ptr);
+				if(!strcmp(iptr, json_object_get_string(paramObj))){
+					if(idx == count){
+						zcfgFeJsonObjFree(obj);
+						break;
+					}
+					count++;
+				}
+			}
+		}
+		else{				// without parameter check, just only for index to Iid
+			if(idx == count){
+				zcfgFeJsonObjFree(obj);
+				break;
+			}
+			count++;
+		}
+		zcfgFeJsonObjFree(obj);
+	}
+}*/
 
 zcfgRet_t zcfgFeDalPolicyRouteEdit(struct json_object *Jobj, char *replyMsg){
 	zcfgRet_t ret = ZCFG_SUCCESS;
-	//printf("%s():--- edit Policy Route Input Json Object --- \n%s \n ",__FUNCTION__,json_object_to_json_string(Jobj));
+	struct json_object *obj = NULL;
+	objIndex_t policyRtIid = {0};
+	int index = 0, count = 1;
+	zcfg_offset_t oid;
 	initPolicyRouteGlobalObjects();
 	getPolicyRouteBasicInfo(Jobj);
-	zcfgFeDalPolicyRouteObjIidGet(Jobj, "EditPath");
-
-	if((ret = zcfgFeDalPolicyRouteObjEdit(Jobj)) != ZCFG_SUCCESS){
+	oid = RDM_OID_ROUTING_ROUTER_V4_FWD;
+	index = json_object_get_int(json_object_object_get(Jobj, "Index"));	//Assume  index = 2
+	convertIndextoIid(index, &policyRtIid, oid, "X_ZYXEL_PolicyRoute", true);
+	if((ret = zcfgFeDalPolicyRouteObjEdit(Jobj, &policyRtIid)) != ZCFG_SUCCESS){
 		printf("%s:(ERROR) fail to edit Policy Route \n", __FUNCTION__);
 		goto exit;
 	}
@@ -127,30 +206,15 @@
 	return ret;
 }
 
-zcfgRet_t zcfgFeDalPolicyRouteDelete(struct json_object *Jobj, char *replyMsg){
-	zcfgRet_t ret = ZCFG_SUCCESS;
-	//printf("%s():--- delete Policy Route Input Json Object --- \n%s \n ",__FUNCTION__,json_object_to_json_string(Jobj));
-	initPolicyRouteGlobalObjects();
-	zcfgFeDalPolicyRouteObjIidGet(Jobj, "DeletePath");
 
-	if((ret = zcfgFeObjJsonDel(RDM_OID_ROUTING_ROUTER_V4_FWD, &policyRtIid, NULL)) != ZCFG_SUCCESS){
-		printf("%s: delete Policy route obj fail \n", __FUNCTION__);
-		goto exit;
-	}
-
-exit:
-	freeAllPolicyRouteObjects();
-	return ret;
-}
 
 zcfgRet_t zcfgFeDalPolicyRouteAdd(struct json_object *Jobj, char *replyMsg){
 	zcfgRet_t ret = ZCFG_SUCCESS;
+	objIndex_t policyRtIid = {0};
 	//printf("%s():--- Add Policy Route Input Json Object --- \n%s \n ",__FUNCTION__,json_object_to_json_string(Jobj));
 	initPolicyRouteGlobalObjects();
 	getPolicyRouteBasicInfo(Jobj);
 
-
-	IID_INIT(policyRtIid);
 	policyRtIid.level = 1;
 	policyRtIid.idx[0] = 1;
 
@@ -159,7 +223,7 @@
 		goto exit;
 	}
 
-	if((ret = zcfgFeDalPolicyRouteObjEdit(Jobj)) != ZCFG_SUCCESS){
+	if((ret = zcfgFeDalPolicyRouteObjEdit(Jobj, &policyRtIid)) != ZCFG_SUCCESS){
 		printf("%s:(ERROR) fail to edit Policy route \n", __FUNCTION__);
 		goto exit;
 	}
@@ -173,6 +237,59 @@
 	return ret;
 }
 
+zcfgRet_t zcfgFeDalPolicyRouteDelete(struct json_object *Jobj, char *replyMsg){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	struct json_object *policyRtObj = NULL;
+	objIndex_t policyRtIid = {0};
+	int index = 0, count = 1;
+	zcfg_offset_t oid;
+
+	oid = RDM_OID_ROUTING_ROUTER_V4_FWD;
+	index = json_object_get_int(json_object_object_get(Jobj, "Index"));	//Assume  index = 2
+	convertIndextoIid(index, &policyRtIid, oid, "X_ZYXEL_PolicyRoute", true);
+	ret = zcfgFeObjJsonDel(RDM_OID_ROUTING_ROUTER_V4_FWD, &policyRtIid, NULL);
+
+	return ret;
+}
+
+
+zcfgRet_t zcfgFeDalPolicyRouteGet(struct json_object *Jarray, char *replyMsg){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	struct json_object *paramJobj = NULL;
+	struct json_object *policyRtObj = NULL;
+	struct json_object *WanLanList = NULL;
+	struct json_object *obj = NULL;
+	objIndex_t policyRtIid = {0};
+	int index = 0, protocolnum = 0, len = 0,i;
+	const char *wanIntf = NULL;
+	getWanLanList(&WanLanList);
+	len = json_object_array_length(WanLanList);
+	while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_ROUTING_ROUTER_V4_FWD, &policyRtIid, &policyRtObj) == ZCFG_SUCCESS){
+		if(json_object_get_boolean(json_object_object_get(policyRtObj, "X_ZYXEL_PolicyRoute"))){
+			index++;
+			paramJobj = json_object_new_object();
+			json_object_object_add(paramJobj, "index", json_object_new_int(index));
+			json_object_object_add(paramJobj, "status", JSON_OBJ_COPY(json_object_object_get(policyRtObj, "Enable")));
+			json_object_object_add(paramJobj, "name", JSON_OBJ_COPY(json_object_object_get(policyRtObj, "X_ZYXEL_PolicyRouteName")));
+			json_object_object_add(paramJobj, "ip", JSON_OBJ_COPY(json_object_object_get(policyRtObj, "X_ZYXEL_SourceIpAddress")));
+			json_object_object_add(paramJobj, "mask", JSON_OBJ_COPY(json_object_object_get(policyRtObj, "X_ZYXEL_SourceSubnetMask")));
+			protocolnum = json_object_get_int(json_object_object_get(policyRtObj, "X_ZYXEL_Protocol"));
+			if(protocolnum == 6)
+				json_object_object_add(paramJobj, "protocol", json_object_new_string("TCP"));
+			else if(protocolnum == 17)
+				json_object_object_add(paramJobj, "protocol", json_object_new_string("UDP"));
+			json_object_object_add(paramJobj, "port", JSON_OBJ_COPY(json_object_object_get(policyRtObj, "X_ZYXEL_SourcePort")));
+			json_object_object_add(paramJobj, "WANInterface", JSON_OBJ_COPY(json_object_object_get(policyRtObj, "Interface")));
+			json_object_object_add(paramJobj, "mac", JSON_OBJ_COPY(json_object_object_get(policyRtObj, "X_ZYXEL_SourceMacAddress")));
+			json_object_object_add(paramJobj, "srcIntf", JSON_OBJ_COPY(json_object_object_get(policyRtObj, "X_ZYXEL_SourceIfName")));
+
+			json_object_array_add(Jarray, paramJobj);
+		}
+		zcfgFeJsonObjFree(policyRtObj);
+	}
+	return ret;
+}
+
 zcfgRet_t zcfgFeDalPolicyRoute(const char *method, struct json_object *Jobj, char *replyMsg)
 {
 	zcfgRet_t ret = ZCFG_SUCCESS;
@@ -189,6 +306,9 @@
 	else if(!strcmp(method, "DELETE")) {
 		ret = zcfgFeDalPolicyRouteDelete(Jobj, NULL);
 	}
+	else if(!strcmp(method, "GET")){
+		ret = zcfgFeDalPolicyRouteGet(Jobj, NULL);
+	}
 
 	return ret;
 }
Index: libzcfg_fe_dal-1.0/zcfg_fe_dal.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/zcfg_fe_dal.c	2017-05-16 15:18:15.155143924 +0800
+++ libzcfg_fe_dal-1.0/zcfg_fe_dal.c	2017-05-16 15:19:12.594706200 +0800
@@ -179,6 +179,7 @@
 extern void zcfgFeDalShowWanAdvance(struct json_object *Jarray);
 extern void zcfgFeDalShowSystemInfo(struct json_object *Jarray);
 extern void zcfgFeDalShowSNMP(struct json_object *Jarray);
+extern void zcfgFeDalShowPolicyRoute(struct json_object *Jarray);
 
 dal_handler_t dalHandler[] = {
 {"WAN",				WAN_param,			zcfgFeDalWan,			zcfgFeDalShowWan,			"get",				"Broadband"},
@@ -190,7 +191,7 @@
 {"WWANBACKUP", 		WWANBACKUP_param,	zcfgFeDalWwanBackup,	NULL,						"edit",				""}, //Broadband
 {"STATICROUTE", 	STATICROUTE_param,	zcfgFeDalStaticRoute,	zcfgFeDalShowStaticRoute,	"get|add|edit|delete",	"Routing"},
 {"DNSROUTE", 		DNSROUTE_param,		zcfgFeDalDnsRoute,		NULL,						"add|edit|delete",	""}, //Routing
-{"POLICYROUTE", 	POLICYROUTE_param,	zcfgFeDalPolicyRoute,	NULL,						"add|edit|delete",	""}, //Routing
+{"POLICYROUTE", 	POLICYROUTE_param,	zcfgFeDalPolicyRoute,	zcfgFeDalShowPolicyRoute,	"get|add|edit|delete",	"Routing"}, //Routing
 {"RIP", 			RIP_param,			zcfgFeDalRip,			NULL,						"edit",				""}, //Routing
 {"NatPortFwd",		NatPortFwd_param,	zcfgFeDalNatPortMapping,zcfgFeDalShowPortFwd,		"get|add|edit|delete", "NAT"},
 {"NAT_PORT_TRIGGERING",NAT_PORT_TRIGGERING_param,zcfgFeDalNatPortTriggering,NULL,			"add|edit|delete", 	""}, //NAT
@@ -288,6 +289,63 @@
 	return ret;
 }
 
+zcfgRet_t convertIndextoIid(int idx, objIndex_t *Iid, zcfg_offset_t oid, char *key, void *ptr){
+	struct json_object *obj = NULL;
+	struct json_object *paramObj = NULL;
+	int count = 1, type = 0;
+	while(zcfgFeObjJsonGetNextWithoutUpdate(oid, Iid, &obj) == ZCFG_SUCCESS){
+		if(key != NULL){	// for parameter contidional check
+			paramObj = json_object_object_get(obj, key);
+			type = json_object_get_type(paramObj);
+			if(type == 1){			//bool value
+				bool *iptr = (bool*)(ptr);
+				if(json_object_get_boolean(paramObj) == iptr){
+					if(idx == count){
+						json_object_put(obj);
+						obj = NULL;
+						break;
+					}
+					count++;
+				}
+			}
+			else if(type == 3){		// int value
+				int *iptr = (int*)(ptr);
+				if(json_object_get_int(paramObj) == iptr){
+					if(idx == count){
+						json_object_put(obj);
+						obj = NULL;
+						break;
+					}
+					count++;
+				}
+			}
+			else if(type == 9){		// string value
+				char *iptr = (char*)(ptr);
+				if(!strcmp(iptr, json_object_get_string(paramObj))){
+					if(idx == count){
+						json_object_put(obj);
+						obj = NULL;
+						break;
+					}
+					count++;
+				}
+			}
+		}
+		else{				// without parameter check, just only for index to Iid
+			if(idx == count){
+				json_object_put(obj);
+				obj = NULL;
+				break;
+			}
+			count++;
+		}
+		json_object_put(obj);
+		obj = NULL;
+	}
+	return ZCFG_SUCCESS;
+}
+
+
 zcfgRet_t getWanLanList(struct json_object **Jarray){
 	struct json_object *ipIfaceJarray, *pppIfaceJarray, *vlanTermJarray, *ethLinkJarray, *bridgeBrJarray;
 	struct json_object *ipIfaceObj, *pppIfaceObj, *vlanTermObj, *ethLinkObj, *bridgeBrObj;
Index: libzcfg_fe_dal-1.0/zcfg_fe_dal_common.h
===================================================================
--- libzcfg_fe_dal-1.0.orig/zcfg_fe_dal_common.h	2017-05-16 15:18:15.099143923 +0800
+++ libzcfg_fe_dal-1.0/zcfg_fe_dal_common.h	2017-05-16 15:18:52.570706200 +0800
@@ -48,7 +48,8 @@
 	dalType_LanName,
 	dalType_IntfGrpWanList,
 	dalType_IntfGrpLanPortList,
-	dalType_IntfGrpLanPortListNoWiFi
+	dalType_IntfGrpLanPortListNoWiFi,	// LAN1, LAN2, LAN3, LAN4
+	dalType_LanPortListBr0NoWiFi		// LAN1, LAN2, LAN3, LAN4, br0
 };
 
 
