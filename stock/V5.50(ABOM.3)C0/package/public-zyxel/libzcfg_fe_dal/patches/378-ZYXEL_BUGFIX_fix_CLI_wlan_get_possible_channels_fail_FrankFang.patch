Index: libzcfg_fe_dal-1.0/zcfg_fe_dal.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/zcfg_fe_dal.c	2017-11-20 15:55:38.014497477 +0800
+++ libzcfg_fe_dal-1.0/zcfg_fe_dal.c	2017-11-20 16:02:15.813289667 +0800
@@ -1543,18 +1543,42 @@
 	return 0;
 }
 
-zcfgRet_t getObjParamStr(zcfg_offset_t oid, objIndex_t *objIid, char *key, char *value){
+/*!
+ *  Get parameter value from RDM giving oid, iid, and parameter name
+ *
+ *  @param[in]     oid        Target oid
+ *  @param[in]     objIid     Target iid
+ *  @param[in]     key        Target parameter name
+ *  @param[out]    value      Parameter value
+ *
+ *  @return     true  - Get value success
+ *              false - Wrong input / Object not found / parameter not found
+ */
+zcfgRet_t getObjParamStr (zcfg_offset_t oid, objIndex_t *objIid, char *key, char *value)
+{
 	zcfgRet_t ret = ZCFG_SUCCESS;
 	objIndex_t iid;
 	struct json_object *Obj = NULL;
+
+	if (key == NULL)
+	{
+		dbg_printf("%s:%d: key can't be null, please give a specific parameter name \n",__FUNCTION__,__LINE__);
+		return ZCFG_REQUEST_REJECT;
+	}
+
+	if (value == NULL)
+	{
+		dbg_printf("%s:%d: value can't be null, please initiate it first \n",__FUNCTION__,__LINE__);
+		return ZCFG_REQUEST_REJECT;
+	}
 	
 	IID_INIT(iid);
 	iid.level = 1;
 	iid.idx[0] = objIid->idx[0];
-	if((ret = zcfgFeObjJsonGetWithoutUpdate(oid, &iid, &Obj)) != ZCFG_SUCCESS)
+	if ((ret = zcfgFeObjJsonGet(oid, &iid, &Obj)) != ZCFG_SUCCESS)
 		return ZCFG_NO_SUCH_OBJECT;
 
-	if(!json_object_object_get(Obj, key))
+	if (!json_object_object_get(Obj, key))
 		return ZCFG_NO_SUCH_PARAMETER;
 
 	strcpy(value,json_object_get_string(json_object_object_get(Obj, key)));
