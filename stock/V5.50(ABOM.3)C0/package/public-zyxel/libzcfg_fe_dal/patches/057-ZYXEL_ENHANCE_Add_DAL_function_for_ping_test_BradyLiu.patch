Index: libzcfg_fe_dal-1.0/maintenance/diagnostic/zcfg_fe_dal_pingtest.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ libzcfg_fe_dal-1.0/maintenance/diagnostic/zcfg_fe_dal_pingtest.c	2016-11-08 16:24:54.322174016 +0800
@@ -0,0 +1,213 @@
+
+#include <json/json.h>
+
+#include "zcfg_common.h"
+#include "zcfg_fe_rdm_string.h"
+#include "zcfg_fe_rdm_struct.h"
+#include "zcfg_rdm_oid.h"
+#include "zcfg_rdm_obj.h"
+#include "zcfg_debug.h"
+#include "zcfg_msg.h"
+#include "zcfg_fe_dal_common.h"
+#include "zcfg_webgui_flag.h"
+
+#define IP_DIAG_IPPING 0
+#define IP_DIAG_TRACE_RT 1
+#define DNS_DIAG_NS_LOOKUP 2
+
+dal_param_t PING_TEST_param[]={
+	{"type",								dalType_int,	0,	0,	NULL},
+	{"ProtocolVersion",						dalType_string,	0,	0,	NULL},
+	{"Host",								dalType_string,	0,	0,	NULL},
+	{"DiagnosticsState",					dalType_string,	0,	0,	NULL},
+	{"NumberOfRepetitions",					dalType_int,	0,	0,	NULL},
+	{"HostName",							dalType_string,	0,	0,	NULL},
+	{"DNSServer",							dalType_string,	0,	0,	NULL},
+	{NULL,									0,				0,	0,	NULL},
+};
+
+unsigned int type;
+const char* ProtocolVersion;
+const char* Host;
+const char* DiagnosticsState;
+unsigned int NumberOfRepetitions;
+const char* HostName;
+const char* DNSServer;
+
+struct json_object *diagIPPingJobj;
+struct json_object *diagTraceRTobj;
+struct json_object *dnsNSLookUpobj;
+
+objIndex_t IpDiagIPPingIid;
+objIndex_t IpDiagTraceRTIid;
+objIndex_t DNSDiagNSLookUpIid;
+
+void freeAllPingTestObjects(){
+	if(diagIPPingJobj) json_object_put(diagIPPingJobj);
+	if(diagTraceRTobj) json_object_put(diagTraceRTobj);
+	if(dnsNSLookUpobj) json_object_put(dnsNSLookUpobj);
+	return;
+}
+
+void initPingTestGlobalObjects(){
+	diagIPPingJobj = NULL;
+	diagTraceRTobj = NULL;
+	dnsNSLookUpobj = NULL;
+	return;
+}
+
+void getPingTestType(struct json_object *Jobj){
+	type = json_object_get_int(json_object_object_get(Jobj, "type"));
+
+	return;
+}
+
+void getIpDiagIPPingBasicInfo(struct json_object *Jobj){
+	ProtocolVersion = json_object_get_string(json_object_object_get(Jobj, "ProtocolVersion"));
+	Host = json_object_get_string(json_object_object_get(Jobj, "Host"));
+	DiagnosticsState = json_object_get_string(json_object_object_get(Jobj, "DiagnosticsState"));
+	NumberOfRepetitions = json_object_get_int(json_object_object_get(Jobj, "NumberOfRepetitions"));
+
+	return;
+}
+
+void getIpDiagTraceRTBasicInfo(struct json_object *Jobj){
+	ProtocolVersion = json_object_get_string(json_object_object_get(Jobj, "ProtocolVersion"));
+	Host = json_object_get_string(json_object_object_get(Jobj, "Host"));
+	DiagnosticsState = json_object_get_string(json_object_object_get(Jobj, "DiagnosticsState"));
+	NumberOfRepetitions = json_object_get_int(json_object_object_get(Jobj, "NumberOfRepetitions"));
+
+	return;
+}
+
+void getDNSDiagNSLookUpgBasicInfo(struct json_object *Jobj){
+	HostName = json_object_get_string(json_object_object_get(Jobj, "HostName"));
+	DiagnosticsState = json_object_get_string(json_object_object_get(Jobj, "DiagnosticsState"));
+	DNSServer = json_object_get_string(json_object_object_get(Jobj, "DNSServer"));
+
+	return;
+}
+
+zcfgRet_t zcfgFeDalIpDiagIPPingEdit(struct json_object *Jobj){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	printf("%s(): Enter.. \n ",__FUNCTION__);
+	getIpDiagIPPingBasicInfo(Jobj);
+
+	IID_INIT(IpDiagIPPingIid);
+	if((ret = zcfgFeObjJsonGet(RDM_OID_IP_DIAG_IPPING, &IpDiagIPPingIid, &diagIPPingJobj)) != ZCFG_SUCCESS) {
+		printf("%s:(ERROR) Get ip daig ip ping Obj fail\n", __FUNCTION__);
+		return ZCFG_INTERNAL_ERROR;
+	}
+
+	if(diagIPPingJobj != NULL){
+		json_object_object_add(diagIPPingJobj, "ProtocolVersion", json_object_new_string(ProtocolVersion));
+		json_object_object_add(diagIPPingJobj, "Host", json_object_new_string(Host));
+		json_object_object_add(diagIPPingJobj, "DiagnosticsState", json_object_new_string(DiagnosticsState));
+		json_object_object_add(diagIPPingJobj, "NumberOfRepetitions", json_object_new_int(NumberOfRepetitions));
+
+		if((ret = zcfgFeObjJsonSet(RDM_OID_IP_DIAG_IPPING, &IpDiagIPPingIid, diagIPPingJobj, NULL)) != ZCFG_SUCCESS)
+		{
+			printf("%s:(ERROR) Set ip daig ip ping fail\n", __FUNCTION__);
+			return ZCFG_INTERNAL_ERROR;
+		}
+	}
+
+	return ret;
+}
+
+zcfgRet_t zcfgFeDalIpDiagTraceRTEdit(struct json_object *Jobj){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	printf("%s(): Enter.. \n ",__FUNCTION__);
+	getIpDiagTraceRTBasicInfo(Jobj);
+
+	IID_INIT(IpDiagTraceRTIid);
+	if((ret = zcfgFeObjJsonGet(RDM_OID_IP_DIAG_TRACE_RT, &IpDiagTraceRTIid, &diagTraceRTobj)) != ZCFG_SUCCESS) {
+		printf("%s:(ERROR) Get ip daig trace RT Obj fail\n", __FUNCTION__);
+		return ZCFG_INTERNAL_ERROR;
+	}
+
+	if(diagTraceRTobj != NULL){
+		json_object_object_add(diagTraceRTobj, "ProtocolVersion", json_object_new_string(ProtocolVersion));
+		json_object_object_add(diagTraceRTobj, "Host", json_object_new_string(Host));
+		json_object_object_add(diagTraceRTobj, "DiagnosticsState", json_object_new_string(DiagnosticsState));
+		json_object_object_add(diagTraceRTobj, "NumberOfRepetitions", json_object_new_int(NumberOfRepetitions));
+
+		if((ret = zcfgFeObjJsonSet(RDM_OID_IP_DIAG_TRACE_RT, &IpDiagTraceRTIid, diagTraceRTobj, NULL)) != ZCFG_SUCCESS)
+		{
+			printf("%s:(ERROR) Set ip daig trace RT fail\n", __FUNCTION__);
+			return ZCFG_INTERNAL_ERROR;
+		}
+	}
+
+	return ret;
+}
+
+zcfgRet_t zcfgFeDalDNSDiagNSLookUpEdit(struct json_object *Jobj){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	printf("%s(): Enter.. \n ",__FUNCTION__);
+	getDNSDiagNSLookUpgBasicInfo(Jobj);
+
+	IID_INIT(DNSDiagNSLookUpIid);
+	if((ret = zcfgFeObjJsonGet(RDM_OID_DNS_DIAG_NS_LOOKUP_DIAG, &DNSDiagNSLookUpIid, &dnsNSLookUpobj)) != ZCFG_SUCCESS) {
+		printf("%s:(ERROR) Get DNS diag NS Lookup Obj fail\n", __FUNCTION__);
+		return ZCFG_INTERNAL_ERROR;
+	}
+
+	if(dnsNSLookUpobj != NULL){
+		json_object_object_add(dnsNSLookUpobj, "HostName", json_object_new_string(HostName));
+		json_object_object_add(dnsNSLookUpobj, "DiagnosticsState", json_object_new_string(DiagnosticsState));
+		json_object_object_add(dnsNSLookUpobj, "DNSServer", json_object_new_string(DNSServer));
+
+		if((ret = zcfgFeObjJsonSet(RDM_OID_DNS_DIAG_NS_LOOKUP_DIAG, &DNSDiagNSLookUpIid, dnsNSLookUpobj, NULL)) != ZCFG_SUCCESS)
+		{
+			printf("%s:(ERROR) Set DNS diag NS Lookup fail\n", __FUNCTION__);
+			return ZCFG_INTERNAL_ERROR;
+		}
+	}
+
+	return ret;
+}
+
+zcfgRet_t zcfgFeDalPingTestEdit(struct json_object *Jobj, char *replyMsg){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	printf("%s(): input --- %s \n ",__FUNCTION__,json_object_to_json_string(Jobj));
+
+	initPingTestGlobalObjects();
+	getPingTestType(Jobj);
+
+	if(type == IP_DIAG_IPPING ){
+		if((ret = zcfgFeDalIpDiagIPPingEdit(Jobj)) != ZCFG_SUCCESS){
+			printf("%s: config I pDiag IP Ping fail\n", __FUNCTION__);
+			goto exit;
+		}
+	}else if(type == IP_DIAG_TRACE_RT){
+		if((ret = zcfgFeDalIpDiagTraceRTEdit(Jobj)) != ZCFG_SUCCESS){
+			printf("%s: config Ip Diag Trace RT fail\n", __FUNCTION__);
+			goto exit;
+		}
+	}else if(type == DNS_DIAG_NS_LOOKUP){
+		if((ret = zcfgFeDalDNSDiagNSLookUpEdit(Jobj)) != ZCFG_SUCCESS){
+			printf("%s: config DNS Diag NSL ookUp fail\n", __FUNCTION__);
+			goto exit;
+		}
+	}
+
+exit:
+	freeAllPingTestObjects();
+	return ret;
+}
+
+zcfgRet_t zcfgFeDalPingTest(const char *method, struct json_object *Jobj, char *replyMsg)
+{
+	zcfgRet_t ret = ZCFG_SUCCESS;
+
+	if(!method || !Jobj)
+		return ZCFG_INTERNAL_ERROR;
+
+	if(!strcmp(method, "PUT")) {
+		ret = zcfgFeDalPingTestEdit(Jobj, NULL);
+	}
+
+	return ret;
+}
+
Index: libzcfg_fe_dal-1.0/Makefile
===================================================================
--- libzcfg_fe_dal-1.0.orig/Makefile	2016-11-08 09:47:13.449848096 +0800
+++ libzcfg_fe_dal-1.0/Makefile	2016-11-08 10:14:23.039911300 +0800
@@ -16,6 +16,7 @@
 NETWORK_WIRELESS_PATH = ./network/wireless
 NETWORK_USBSERVICE_PATH = ./network/usbService
 MAINTENANCE_MGMT = ./maintenance/mgmt
+MAINTENANCE_DIAGNOSTIC_PATH = ./maintenance/diagnostic
 MAINTENANCE_EMAIL_PATH = ./maintenance/mail
 MAINTENANCE_LOG_PATH = ./maintenance/logsetting
 MAINTENANCE = ./maintenance
@@ -33,6 +34,7 @@
 SOURCES += $(wildcard $(NETWORK_IGMPMLD_PATH)/*.c)
 SOURCES += $(wildcard $(NETWORK_USBSERVICE_PATH)/*.c)
 SOURCES += $(wildcard $(MAINTENANCE_MGMT)/*.c)
+SOURCES += $(wildcard $(MAINTENANCE_DIAGNOSTIC_PATH)/*.c)
 SOURCES += $(wildcard $(MAINTENANCE)/*.c)
 SOURCES += $(wildcard $(VOIP_SIP_PATH)/*.c)
 SOURCES += $(wildcard $(VOIP_SIP_PHONE_PATH)/*.c)
Index: libzcfg_fe_dal-1.0/zcfg_fe_dal.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/zcfg_fe_dal.c	2016-11-08 09:47:13.449848096 +0800
+++ libzcfg_fe_dal-1.0/zcfg_fe_dal.c	2016-11-08 16:25:49.353554375 +0800
@@ -49,6 +49,7 @@
 extern dal_param_t VOIP_CALLBLOCK_param[];
 extern dal_param_t MAIL_NOTIFICATION_param[];
 extern dal_param_t LOG_SETTING_param[];
+extern dal_param_t PING_TEST_param[];
 extern dal_param_t USB_FILESHARING_param[];
 extern dal_param_t USB_MEDIASERVER_param[];
 extern zcfgRet_t zcfgFeDalWan(const char *method, struct json_object *Jobj, char *replyMsg);
@@ -93,6 +94,7 @@
 extern zcfgRet_t zcfgFeDalVoipCallBlock(const char *method, struct json_object *Jobj, char *replyMsg);
 extern zcfgRet_t zcfgFeDalMailNotification(const char *method, struct json_object *Jobj, char *replyMsg);
 extern zcfgRet_t zcfgFeDalLogSetting(const char *method, struct json_object *Jobj, char *replyMsg);
+extern zcfgRet_t zcfgFeDalPingTest(const char *method, struct json_object *Jobj, char *replyMsg);
 extern zcfgRet_t zcfgFeDalUsbFilesharing(const char *method, struct json_object *Jobj, char *replyMsg);
 extern zcfgRet_t zcfgFeDalUsbMediaserver(const char *method, struct json_object *Jobj, char *replyMsg);
 
@@ -146,6 +148,7 @@
 {"CALLBLOCK",		VOIP_CALLBLOCK_param,zcfgFeDalVoipCallBlock},
 {"EMAIL",			MAIL_NOTIFICATION_param,zcfgFeDalMailNotification},
 {"LOGSETTING",		LOG_SETTING_param,	zcfgFeDalLogSetting},
+{"PINGTEST",		PING_TEST_param,	zcfgFeDalPingTest},
 {"USB_FILESHARING", 		USB_FILESHARING_param,	zcfgFeDalUsbFilesharing},
 {"USB_MEDIASERVER", 		USB_MEDIASERVER_param,	zcfgFeDalUsbMediaserver},
 {NULL,				NULL,				NULL}
