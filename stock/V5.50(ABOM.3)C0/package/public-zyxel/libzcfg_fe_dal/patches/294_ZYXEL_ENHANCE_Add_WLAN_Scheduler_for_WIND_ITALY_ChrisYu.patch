Index: libzcfg_fe_dal-1.0/network/wireless/zcfg_fe_dal_wifi_scheduler.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ libzcfg_fe_dal-1.0/network/wireless/zcfg_fe_dal_wifi_scheduler.c	2017-08-07 12:06:08.695045500 +0800
@@ -0,0 +1,192 @@
+
+#include <json/json.h>
+
+#include "zcfg_common.h"
+#include "zcfg_rdm_oid.h"
+#include "zcfg_rdm_obj.h"
+#include "zcfg_debug.h"
+#include "zcfg_fe_rdm_string.h"
+#include "zcfg_fe_dal_common.h"
+
+#define CWMP_SOAP_MSG_DEBUG (1 << 1)
+
+dal_param_t WLAN_SCHEDULER_param[] =
+{
+	//Schedule
+	{"Enable",		dalType_boolean,	0,	0,	NULL},
+	{"Name",		dalType_string,	0,	0,	NULL},
+	{"Description",		dalType_string,	0,	0,	NULL},
+	{"SSID",		dalType_string,	0,	0,	NULL},
+	{"Interface",		dalType_int,	0,	0,	NULL},
+	{"Days",		dalType_int,	0,	0,	NULL},
+	{"TimeStartHour",		dalType_int,	0,	0,	NULL},
+	{"TimeStartMin",		dalType_int,	0,	0,	NULL},
+	{"TimeStopHour",		dalType_int,	0,	0,	NULL},
+	{"TimeStopMin",		dalType_int,	0,	0,	NULL},		
+	{NULL,		0,	0,	0,	NULL}
+};
+
+zcfgRet_t zcfgFeDalWlanSchedulerAdd(struct json_object *Jobj, char *replyMsg)
+{
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	const char *paraName;
+	objIndex_t objIid;
+	struct json_object *WlanSchedulerJobj = NULL;
+	int n=0;
+	paraName = (const char *)WLAN_SCHEDULER_param[n++].paraName;
+
+	IID_INIT(objIid);
+	zcfgFeObjJsonAdd(RDM_OID_WLAN_SCHEDULER, &objIid, NULL);
+	if((ret = zcfgFeObjJsonGet(RDM_OID_WLAN_SCHEDULER, &objIid, &WlanSchedulerJobj)) != ZCFG_SUCCESS) {
+		printf("%s: Object retrieve fail\n", __FUNCTION__);
+		return ret;
+	}	
+	while(paraName){
+		struct json_object *paramValue = json_object_object_get(Jobj, paraName);
+		if(!paramValue) {
+			printf("function:%s, Line =%d\n", __FUNCTION__,__LINE__);
+			paraName = (const char *)WLAN_SCHEDULER_param[n++].paraName;
+			continue;
+		}
+		json_object_object_add(WlanSchedulerJobj, paraName, JSON_OBJ_COPY(paramValue));
+		paraName = (const char *)WLAN_SCHEDULER_param[n++].paraName;
+	}
+
+	if((ret = zcfgFeObjJsonSet(RDM_OID_WLAN_SCHEDULER, &objIid, WlanSchedulerJobj, NULL)) != ZCFG_SUCCESS)
+	{
+		return ret;
+	}
+	
+	json_object_put(WlanSchedulerJobj);
+	return ret;
+}
+zcfgRet_t zcfgFeDalWlanSchedulerEdit(struct json_object *Jobj, char *replyMsg)
+{
+
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	const char *paraName;
+	objIndex_t objIid;
+	struct json_object *WlanSchedulerJobj = NULL;
+	int paramModified = 0, n = 0;
+	struct json_object *iidArray = NULL;
+	uint8_t iidIdx =0;
+	paraName = (const char *)WLAN_SCHEDULER_param[n++].paraName;
+	
+	//IID_INIT(objIid);
+	iidArray = json_object_object_get(Jobj, "iid");
+	for(iidIdx=0;iidIdx<6;iidIdx++){
+		objIid.idx[iidIdx] = json_object_get_int( json_object_array_get_idx(iidArray, iidIdx));
+		if(objIid.idx[iidIdx] != 0)
+			objIid.level = iidIdx+1;
+	}
+	if((ret = zcfgFeObjJsonGet(RDM_OID_WLAN_SCHEDULER, &objIid, &WlanSchedulerJobj)) != ZCFG_SUCCESS) {
+		return ret;
+	}
+	while(paraName){
+		struct json_object *paramValue = json_object_object_get(Jobj, paraName);
+		if(!paramValue) {
+			paraName = (const char *)WLAN_SCHEDULER_param[n++].paraName;
+			continue;
+		}
+		json_object_object_add(WlanSchedulerJobj, paraName, JSON_OBJ_COPY(paramValue));
+		paramModified = 1;				
+		paraName = (const char *)WLAN_SCHEDULER_param[n++].paraName;
+	}
+
+	if(paramModified) {
+		if((ret = zcfgFeObjJsonSet(RDM_OID_WLAN_SCHEDULER, &objIid, WlanSchedulerJobj, NULL)) != ZCFG_SUCCESS);
+	}
+	json_object_put(WlanSchedulerJobj);
+	return ret;
+}
+
+zcfgRet_t zcfgFeDalWlanSchedulerActiveEdit(struct json_object *Jobj, char *replyMsg){ 
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	struct json_object *wlanSchedulerActiveObj = NULL;
+	struct json_object *reqObj = NULL;
+	int reqObjIdx = 1;
+	objIndex_t schedulerIid = {0};
+	
+	bool enable = false;
+	int Index = 0;
+
+	enum json_type jsonType;
+	
+	while((reqObj = json_object_array_get_idx(Jobj, reqObjIdx)) !=NULL){
+
+		Index = json_object_get_int(json_object_object_get(reqObj, "Index"));
+		enable = json_object_get_boolean(json_object_object_get(reqObj, "Enable"));
+		reqObjIdx++;
+	
+		IID_INIT(schedulerIid);
+		schedulerIid.level = 1;
+		schedulerIid.idx[0] = Index;
+	
+		ret = zcfgFeObjJsonGet(RDM_OID_WLAN_SCHEDULER, &schedulerIid, &wlanSchedulerActiveObj);
+		if(ret == ZCFG_SUCCESS) {
+			json_object_object_add(wlanSchedulerActiveObj, "Enable", json_object_new_boolean(enable));
+			ret = zcfgFeObjJsonSet(RDM_OID_WLAN_SCHEDULER, &schedulerIid, wlanSchedulerActiveObj, NULL);
+		}
+		
+		zcfgFeJsonObjFree(wlanSchedulerActiveObj);
+		zcfgFeJsonObjFree(reqObj);
+	}
+	
+	return ret;
+}
+
+zcfgRet_t zcfgFeDalWlanSchedulerDelete(struct json_object *Jobj, char *replyMsg)
+{
+	
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	objIndex_t objIid;
+	struct json_object *iidArray = NULL;
+	uint8_t iidIdx =0;
+
+	
+	//IID_INIT(objIid);
+	iidArray = json_object_object_get(Jobj, "iid");
+	
+	for(iidIdx=0;iidIdx<6;iidIdx++){
+		objIid.idx[iidIdx] = json_object_get_int( json_object_array_get_idx(iidArray, iidIdx));
+		if(objIid.idx[iidIdx] != 0)
+			objIid.level = iidIdx+1;
+	}
+	
+	ret = zcfgFeObjJsonDel(RDM_OID_WLAN_SCHEDULER, &objIid, NULL);
+	return ret;
+	
+}
+zcfgRet_t zcfgFeDalWlanScheduler(const char *method, struct json_object *Jobj, char *replyMsg)
+{
+	zcfgRet_t ret = ZCFG_SUCCESS;
+
+	if(!method || !Jobj)
+		return ZCFG_INTERNAL_ERROR;
+
+	if(!strcmp(method, "PUT")) {
+		ret = zcfgFeDalWlanSchedulerEdit(Jobj, NULL);
+	}
+	else if(!strcmp(method, "POST")) {
+		ret = zcfgFeDalWlanSchedulerAdd(Jobj, NULL);
+	}
+	else if(!strcmp(method, "DELETE")) {
+		ret = zcfgFeDalWlanSchedulerDelete(Jobj, NULL);
+	}
+
+	return ret;
+}
+
+zcfgRet_t zcfgFeDalWlanSchedulerActive(const char *method, struct json_object *Jobj, char *replyMsg)
+{
+	zcfgRet_t ret = ZCFG_SUCCESS;
+
+	if(!method || !Jobj)
+		return ZCFG_INTERNAL_ERROR;
+
+	if(!strcmp(method, "PUT")) {
+		ret = zcfgFeDalWlanSchedulerActiveEdit(Jobj, NULL);
+	}
+	return ret;
+}
+
Index: libzcfg_fe_dal-1.0/zcfg_fe_dal.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/zcfg_fe_dal.c	2017-08-07 15:35:14.811106227 +0800
+++ libzcfg_fe_dal-1.0/zcfg_fe_dal.c	2017-08-07 15:39:04.295807550 +0800
@@ -56,6 +56,7 @@
 extern dal_param_t WIFI_SONIQ_param[];
 #endif
 extern dal_param_t WIFI_OTHERS_param[];
+extern dal_param_t WLAN_SCHEDULER_param[];
 extern dal_param_t SNMP_param[];
 extern dal_param_t TIME_param[];
 extern dal_param_t TRUST_DOMAIN_param[];
@@ -129,6 +130,8 @@
 #ifdef BUILD_SONIQ
 extern zcfgRet_t zcfgFeDalWifiSoniq(const char *method, struct json_object *Jobj, struct json_object *Jarray, char *replyMsg);
 #endif
+extern zcfgRet_t zcfgFeDalWlanScheduler(const char *method, struct json_object *Jobj, char *replyMsg);
+extern zcfgRet_t zcfgFeDalWlanSchedulerActive(const char *method, struct json_object *Jobj, char *replyMsg);
 extern zcfgRet_t zcfgFeDalWifiOthers(const char *method, struct json_object *Jobj, struct json_object *Jarray, char *replyMsg);
 extern zcfgRet_t zcfgFeDalSNMP(const char *method, struct json_object *Jobj, struct json_object *Jarray, char *replyMsg);
 extern zcfgRet_t zcfgFeDalTime(const char *method, struct json_object *Jobj, struct json_object *Jarray, char *replyMsg);
@@ -266,6 +269,8 @@
 {"WIFI_SONIQ",		WIFI_SONIQ_param, 	zcfgFeDalWifiSoniq,		NULL,						"edit", 			""},//Wireless
 #endif
 {"wifi_others",		WIFI_OTHERS_param,	zcfgFeDalWifiOthers,	zcfgFeDalShowWifiOthers,	"edit|get",				"Wireless"},//
+{"WLAN_SCHEDULER",	WLAN_SCHEDULER_param, zcfgFeDalWlanScheduler,	NULL,						"add|edit|delete",	""},//Wireless
+{"WLAN_SCHEDULER_ACTIVE",	WLAN_SCHEDULER_param, zcfgFeDalWlanSchedulerActive,	NULL,			"edit",	""},//Wireless
 {"snmp",			SNMP_param, 		zcfgFeDalSNMP,			zcfgFeDalShowSNMP,			"edit|get",				"SNMP"},
 {"time",			TIME_param, 		zcfgFeDalTime,			zcfgFeDalShowTime,			"edit|get",				"Time"},//Time
 {"trust_domain",	TRUST_DOMAIN_param, zcfgFeDalTrustDomain,	zcfgFeDalShowTrustDomain,	"get|add|delete",		"Remote_MGMT"},//Remote_MGMT
