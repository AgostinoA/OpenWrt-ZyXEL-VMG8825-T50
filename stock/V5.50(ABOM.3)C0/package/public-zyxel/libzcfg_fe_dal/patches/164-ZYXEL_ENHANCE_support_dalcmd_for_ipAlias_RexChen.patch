Index: libzcfg_fe_dal-1.0/network/homeNetworking/zcfg_fe_dal_addnl_subnet.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/network/homeNetworking/zcfg_fe_dal_addnl_subnet.c	2017-04-26 09:00:43.526682689 +0800
+++ libzcfg_fe_dal-1.0/network/homeNetworking/zcfg_fe_dal_addnl_subnet.c	2017-04-26 09:04:05.816505600 +0800
@@ -14,19 +14,67 @@
 #include "zcfg_fe_dal_common.h"
 
 dal_param_t SUBNET_param[]={
-	{"selectedGrp",		dalType_string, 0,	0,	NULL},
-	{"ipAlias_Enable", 			dalType_boolean,	0,	0,	NULL},
-	{"ipAlias_X_ZYXEL_Alias",	dalType_boolean,	0,	0,	NULL},
-	{"ipAlias_IPAddress", 		dalType_string,	0,	0,	NULL},
-	{"ipAlias_SubnetMask", 		dalType_string,	0,	0,	NULL},
-	{"PubLan", 					dalType_boolean,	0,	0,	NULL},
-	{"PubLan_IP", 				dalType_string,	0,	0,	NULL},
-	{"PubLan_Mask", 			dalType_string,	0,	0,	NULL},
-	{"PubLan_DHCP", 			dalType_boolean,	0,	0,	NULL},
-	{"PubLan_ARP", 				dalType_boolean,	0,	0,	NULL},
-	{NULL,					0,	0,	0,	NULL},
+	{"GroupName",				dalType_LanName,	0,	0,	NULL,	NULL,	dal_Edit},
+	{"ipAlias_Enable", 			dalType_boolean,	0,	0,	NULL,	NULL,	dal_Edit},
+	{"ipAlias_IPAddress", 		dalType_v4Addr,		0,	0,	NULL,	NULL,	NULL},
+	{"ipAlias_SubnetMask", 		dalType_v4Mask,		0,	0,	NULL,	NULL,	NULL},
+	{"PubLan_Enable",			dalType_boolean,	0,	0,	NULL,	NULL,	dal_Edit},
+	{"PubLan_IP", 				dalType_v4Addr,		0,	0,	NULL,	NULL,	NULL},
+	{"PubLan_SubnetMask", 		dalType_v4Mask,		0,	0,	NULL,	NULL,	NULL},
+	{"PubLan_DHCP", 			dalType_boolean,	0,	0,	NULL,	NULL,	NULL},
+	{"PubLan_ARP", 				dalType_boolean,	0,	0,	NULL,	NULL,	NULL},
+	{NULL,						0,					0,	0,	NULL,	NULL,	NULL},
 };
 
+void zcfgFeDalShowAddnl(struct json_object *Jarray){
+	int i, len = 0;
+	struct json_object *obj = NULL;
+	const char *IPAddress = NULL;
+	const char *SubnetMask = NULL;
+	const char *X_ZYXEL_PubLan_IP = NULL;
+	const char *X_ZYXEL_PubLan_Mask = NULL;
+	
+	if(json_object_get_type(Jarray) != json_type_array){
+		printf("wrong Jobj format!\n");
+		return;
+	}
+	printf("%-15s %-42s %-70s \n","", "IP Alias Setup", "Public LAN");
+	printf("%-15s %-10s %-15s %-15s %-10s %-15s %-15s %-25s %-20s\n",
+		    "Group Name", "Active", "IPv4 Arrdess", "Subnet mask", "Active", "IPv4 Arrdess", "Subnet mask", "Offer Public IP by DHCP", "Enable ARP Proxy");
+	len = json_object_array_length(Jarray);
+	for(i=0;i<len;i++){
+		obj = json_object_array_get_idx(Jarray, i);
+
+		if(!strcmp(json_object_get_string(json_object_object_get(obj, "IPAddress")),""))
+			IPAddress = "N/A";
+		else
+			IPAddress = json_object_get_string(json_object_object_get(obj, "IPAddress"));
+		if(!strcmp(json_object_get_string(json_object_object_get(obj, "SubnetMask")),""))
+			SubnetMask = "N/A";
+		else
+			SubnetMask = json_object_get_string(json_object_object_get(obj, "SubnetMask"));
+		if(!strcmp(json_object_get_string(json_object_object_get(obj, "X_ZYXEL_PubLan_IP")),""))
+			X_ZYXEL_PubLan_IP = "N/A";
+		else
+			X_ZYXEL_PubLan_IP = json_object_get_string(json_object_object_get(obj, "X_ZYXEL_PubLan_IP"));
+		if(!strcmp(json_object_get_string(json_object_object_get(obj, "X_ZYXEL_PubLan_Mask")),""))
+			X_ZYXEL_PubLan_Mask = "N/A";
+		else
+			X_ZYXEL_PubLan_Mask = json_object_get_string(json_object_object_get(obj, "X_ZYXEL_PubLan_Mask"));
+
+		printf("%-15s %-10d %-15s %-15s %-10d %-15s %-15s %-25d %-20d\n",
+			json_object_get_string(json_object_object_get(obj, "Group_Name")),
+			json_object_get_boolean(json_object_object_get(obj, "Enable")),
+			IPAddress,
+			SubnetMask,
+			json_object_get_boolean(json_object_object_get(obj, "X_ZYXEL_PubLan")),
+			X_ZYXEL_PubLan_IP,
+			X_ZYXEL_PubLan_Mask,
+			json_object_get_boolean(json_object_object_get(obj, "X_ZYXEL_PubLan_DHCP")),
+			json_object_get_boolean(json_object_object_get(obj, "X_ZYXEL_PubLan_ARP")));
+	}
+}
+
 zcfgRet_t setIPAlias(struct json_object *Jobj, objIndex_t *ipIntfIid){
 	zcfgRet_t ret = ZCFG_SUCCESS;
 	struct json_object *ipAliasObj = NULL;
@@ -37,7 +85,6 @@
 	bool found = false, setParam = false;
 	const char *aliasAddr = NULL, *curAliasAddr = NULL;
 	const char *aliasSubMask = NULL, *curAliasSubMask = NULL;
-	bool X_ZYXEL_Alias = false;
 	char *X_ZYXEL_Dhcp4Subnet_Ref = NULL;
 	
 	aliasEnable = json_object_get_boolean(json_object_object_get(Jobj, "ipAlias_Enable"));
@@ -62,7 +109,6 @@
 	if(aliasEnable){
 		aliasAddr = json_object_get_string(json_object_object_get(Jobj, "ipAlias_IPAddress"));
 		aliasSubMask = json_object_get_string(json_object_object_get(Jobj, "ipAlias_SubnetMask"));
-		X_ZYXEL_Alias = json_object_get_boolean(json_object_object_get(Jobj, "ipAlias_X_ZYXEL_Alias"));
 
 		if(found){
 			if(strcmp(curAliasAddr, aliasAddr) || strcmp(curAliasSubMask, aliasSubMask)){
@@ -79,8 +125,10 @@
 
 		if(setParam){
 			json_object_object_add(ipAliasObj, "Enable", json_object_new_boolean(aliasEnable));
-			json_object_object_add(ipAliasObj, "X_ZYXEL_Alias", json_object_new_boolean(X_ZYXEL_Alias));
+			json_object_object_add(ipAliasObj, "X_ZYXEL_Alias", json_object_new_boolean(true));
+			if(json_object_object_get(Jobj, "ipAlias_IPAddress"))
 			json_object_object_add(ipAliasObj, "IPAddress", json_object_new_string(aliasAddr));
+			if(json_object_object_get(Jobj, "ipAlias_SubnetMask"))
 			json_object_object_add(ipAliasObj, "SubnetMask", json_object_new_string(aliasSubMask));
 
 			zcfgFeObjJsonSet(RDM_OID_IP_IFACE_V4_ADDR, &ipAliasIid, ipAliasObj, NULL);
@@ -92,7 +140,6 @@
 			ret = zcfgFeObjJsonDel(RDM_OID_IP_IFACE_V4_ADDR, &ipAliasIid, NULL);
 		}
 	}
-	
 	zcfgFeJsonObjFree(ipv4AddrObj);
 	return ret;
 }
@@ -105,13 +152,12 @@
 	const char *pubLanIP = NULL, *curPubLanIP = NULL;
 	const char *pubLanMask = NULL, *curPubLanMask = NULL;
 	
-	pubLan = json_object_get_boolean(json_object_object_get(Jobj, "PubLan"));
+	pubLan = json_object_get_boolean(json_object_object_get(Jobj, "PubLan_Enable"));
 	pubLanIP = json_object_get_string(json_object_object_get(Jobj, "PubLan_IP"));
-	pubLanMask = json_object_get_string(json_object_object_get(Jobj, "PubLan_Mask"));
+	pubLanMask = json_object_get_string(json_object_object_get(Jobj, "PubLan_SubnetMask"));
 	pubLanDHCP = json_object_get_boolean(json_object_object_get(Jobj, "PubLan_DHCP"));
 	pubLanARP = json_object_get_boolean(json_object_object_get(Jobj, "PubLan_ARP"));
 
-	
 	if(ipIntfObj){
 		curPubLan = json_object_get_boolean(json_object_object_get(ipIntfObj, "X_ZYXEL_PubLan"));
 		curPubLanIP = json_object_get_string(json_object_object_get(ipIntfObj, "X_ZYXEL_PubLan_IP"));
@@ -119,18 +165,17 @@
 		curPubDHCP = json_object_get_boolean(json_object_object_get(ipIntfObj, "X_ZYXEL_PubLan_DHCP"));
 		curPubARP = json_object_get_boolean(json_object_object_get(ipIntfObj, "X_ZYXEL_PubLan_ARP"));
 
-		if( pubLan != curPubLan || strcmp(pubLanIP, curPubLanIP)|| 
-			strcmp(pubLanMask, curPubLanMask)||
-			pubLanDHCP != curPubDHCP || pubLanARP != curPubARP){
-
 			json_object_object_add(ipIntfObj, "X_ZYXEL_PubLan", json_object_new_boolean(pubLan));
+		if(json_object_object_get(Jobj, "PubLan_IP"))
 			json_object_object_add(ipIntfObj, "X_ZYXEL_PubLan_IP", json_object_new_string(pubLanIP));
+		if(json_object_object_get(Jobj, "PubLan_SubnetMask"))
 			json_object_object_add(ipIntfObj, "X_ZYXEL_PubLan_Mask", json_object_new_string(pubLanMask));
+		if(json_object_object_get(Jobj, "PubLan_DHCP"))
 			json_object_object_add(ipIntfObj, "X_ZYXEL_PubLan_DHCP", json_object_new_boolean(pubLanDHCP));
+		if(json_object_object_get(Jobj, "PubLan_ARP"))
 			json_object_object_add(ipIntfObj, "X_ZYXEL_PubLan_ARP", json_object_new_boolean(pubLanARP));
 			
 			zcfgFeObjJsonSet(RDM_OID_IP_IFACE, ipIntfIid, ipIntfObj, NULL);
-		}
 		zcfgFeJsonObjFree(ipIntfObj);
 	}
 
@@ -141,30 +186,109 @@
 	struct json_object *ipIntfObj = NULL;
 	objIndex_t ipIntfIid = {0};
 	zcfgRet_t ret = ZCFG_SUCCESS;
-	const char *selectedGrp = NULL, *srvName = NULL, *ifName = NULL;
-	selectedGrp = json_object_get_string(json_object_object_get(Jobj, "selectedGrp"));
+	const char *GroupName = NULL, *srvName = NULL, *ifName = NULL;
+	GroupName = json_object_get_string(json_object_object_get(Jobj, "GroupName"));
 
 	IID_INIT(ipIntfIid);
 	while(zcfgFeObjJsonGetNext(RDM_OID_IP_IFACE, &ipIntfIid, &ipIntfObj) == ZCFG_SUCCESS) {
 		srvName = json_object_get_string(json_object_object_get(ipIntfObj, "X_ZYXEL_SrvName"));
 		ifName = json_object_get_string(json_object_object_get(ipIntfObj, "X_ZYXEL_IfName")); 
-		if((!strcmp(selectedGrp, "Default") || !strcmp(selectedGrp, srvName)) &&
+		if((!strcmp(GroupName, "Default") || !strcmp(GroupName, srvName)) &&
 			!strncmp(ifName, "br", 2)){
 			break;
 		}                                           
 		zcfgFeJsonObjFree(ipIntfObj);
     }
+	// For dalcmd to check ipv4 address and submask parameter.
+	if(json_object_get_boolean(json_object_object_get(Jobj, "ipAlias_Enable"))){
+		if(!json_object_object_get(Jobj, "ipAlias_IPAddress") || !json_object_object_get(Jobj, "ipAlias_SubnetMask")){
+			strcpy(replyMsg, "IP Alias IPv4 address or subnet mask error.");
+			zcfgFeJsonObjFree(ipIntfObj);
+			return ZCFG_INVALID_PARAM_VALUE;
+		}	
+	}
+	if(json_object_get_boolean(json_object_object_get(Jobj, "PubLan_Enable"))){
+		if(!json_object_object_get(Jobj, "PubLan_IP") || !json_object_object_get(Jobj, "PubLan_SubnetMask")){
+			strcpy(replyMsg, "Public LAN IPv4 address or subnet mask error.");
+			zcfgFeJsonObjFree(ipIntfObj);
+			return ZCFG_INVALID_PARAM_VALUE;
+		}
+	}
 	setIPAlias(Jobj, &ipIntfIid);
 	setPublicLan(Jobj, ipIntfObj, &ipIntfIid);
+	return ret;
+}
+	
+zcfgRet_t zcfgFeDal_Addnl_Subnet_Get(struct json_object *Jarray, char *replyMsg){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	struct json_object *bringObj = NULL;
+	struct json_object *WanLanList = NULL;
+	struct json_object *reqObject = NULL;
+	struct json_object *paramJobj = NULL;
+	struct json_object *ipv4AddrObj = NULL;
+	struct json_object *ipIfaceObj = NULL;
+	objIndex_t bringIid = {0};
+	objIndex_t ipv4AddrIid = {0};
+	objIndex_t ipIfaceIid = {0};
+	objIndex_t Iid = {0};
+	const char *bridge_name = NULL;
+	const char *wanlanlist_name = NULL;
+	int i, len = 0;
+
+	getWanLanList(&WanLanList);
+	len = json_object_array_length(WanLanList);
+	while(zcfgFeObjJsonGetNext(RDM_OID_BRIDGING_BR, &bringIid, &bringObj) == ZCFG_SUCCESS){
+		paramJobj = json_object_new_object();
+		bridge_name = json_object_get_string(json_object_object_get(bringObj, "X_ZYXEL_BridgeName"));
+		json_object_object_add(paramJobj, "Group_Name", json_object_new_string(bridge_name));
+		for(i=0;i<len;i++){
+			reqObject = json_object_array_get_idx(WanLanList, i);
+			wanlanlist_name = json_object_get_string(json_object_object_get(reqObject, "Name"));
+			if(!strcmp(bridge_name,wanlanlist_name)){
+				IID_INIT(ipv4AddrIid);
+				IID_INIT(Iid);
+				ipv4AddrIid.level = 1;
+				ipv4AddrIid.idx[0] = i + 1;
+				while(zcfgFeSubInObjJsonGetNextWithoutUpdate(RDM_OID_IP_IFACE_V4_ADDR, &ipv4AddrIid, &Iid, &ipv4AddrObj) == ZCFG_SUCCESS){
 	
+					if(json_object_get_boolean(json_object_object_get(ipv4AddrObj, "X_ZYXEL_Alias"))){
+						json_object_object_add(paramJobj, "Enable", JSON_OBJ_COPY(json_object_object_get(ipv4AddrObj, "Enable")));
+						json_object_object_add(paramJobj, "IPAddress", JSON_OBJ_COPY(json_object_object_get(ipv4AddrObj, "IPAddress")));
+						json_object_object_add(paramJobj, "SubnetMask", JSON_OBJ_COPY(json_object_object_get(ipv4AddrObj, "SubnetMask")));
+						break;
+					}
+					else{
+						json_object_object_add(paramJobj, "Enable", json_object_new_boolean(false));
+						json_object_object_add(paramJobj, "IPAddress", json_object_new_string(""));
+						json_object_object_add(paramJobj, "SubnetMask", json_object_new_string(""));
+					}
+					zcfgFeJsonObjFree(ipv4AddrObj);
+				}
+				IID_INIT(ipIfaceIid);
+				ipIfaceIid.level = 1;
+				ipIfaceIid.idx[0] = i + 1;
+				if(zcfgFeObjJsonGet(RDM_OID_IP_IFACE, &ipIfaceIid, &ipIfaceObj) == ZCFG_SUCCESS){
+					json_object_object_add(paramJobj, "X_ZYXEL_PubLan", JSON_OBJ_COPY(json_object_object_get(ipIfaceObj, "X_ZYXEL_PubLan")));
+					json_object_object_add(paramJobj, "X_ZYXEL_PubLan_IP", JSON_OBJ_COPY(json_object_object_get(ipIfaceObj, "X_ZYXEL_PubLan_IP")));
+					json_object_object_add(paramJobj, "X_ZYXEL_PubLan_Mask", JSON_OBJ_COPY(json_object_object_get(ipIfaceObj, "X_ZYXEL_PubLan_Mask")));
+					json_object_object_add(paramJobj, "X_ZYXEL_PubLan_DHCP", JSON_OBJ_COPY(json_object_object_get(ipIfaceObj, "X_ZYXEL_PubLan_DHCP")));
+					json_object_object_add(paramJobj, "X_ZYXEL_PubLan_ARP", JSON_OBJ_COPY(json_object_object_get(ipIfaceObj, "X_ZYXEL_PubLan_ARP")));
+				}
+			}				
+		}
+		json_object_array_add(Jarray, paramJobj);
+		zcfgFeJsonObjFree(bringObj);
+		printf("%s \n",json_object_to_json_string(Jarray));
+	}
 	return ret;
 }
 
 zcfgRet_t zcfgFeDalAddnlSubnet(const char *method, struct json_object *Jobj, char *replyMsg){
 	zcfgRet_t ret = ZCFG_SUCCESS;
-	
 	if(!strcmp(method, "PUT"))
-		ret = zcfgFeDal_Addnl_Subnet_Edit(Jobj, NULL);
+		ret = zcfgFeDal_Addnl_Subnet_Edit(Jobj, replyMsg);
+	else if(!strcmp(method,"GET"))
+		ret = zcfgFeDal_Addnl_Subnet_Get(Jobj, NULL);
 	else
 		printf("Unknown method:%s\n", method);
 
Index: libzcfg_fe_dal-1.0/zcfg_fe_dal.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/zcfg_fe_dal.c	2017-04-26 09:00:43.758682690 +0800
+++ libzcfg_fe_dal-1.0/zcfg_fe_dal.c	2017-04-26 09:03:07.359505600 +0800
@@ -167,6 +167,7 @@
 extern void zcfgFeDalShowUPnP(struct json_object *Jarray);
 extern void zcfgFeDalShowTFTPSerName(struct json_object *Jarray);
 extern void zcfgFeDalShowSTBVendorID(struct json_object *Jarray);
+extern void zcfgFeDalShowAddnl(struct json_object *Jarray);
 
 dal_handler_t dalHandler[] = {
 {"WAN",				WAN_param,			zcfgFeDalWan,			zcfgFeDalShowWan,			"get",				"Broadband"},
@@ -191,7 +192,7 @@
 {"TFTPSERNAME",		TFTPSerName_param,	zcfgFeDalTFTPSerName,	zcfgFeDalShowTFTPSerName,	"edit|get",			"Home_Networking"},
 {"LANSETUP",		LANSETUP_param, 	zcfgFeDalLanSetup,		NULL,						"edit", 			"Home_Networking"},
 {"STB",				STB_param, 			zcfgFeDalSTBVendorID,	zcfgFeDalShowSTBVendorID,	"edit|get",			"Home_Networking"},
-{"SUBNET",			SUBNET_param,		zcfgFeDalAddnlSubnet,	NULL,						"edit" ,			""},//Home_Networking
+{"IpAlias",			SUBNET_param,		zcfgFeDalAddnlSubnet,	zcfgFeDalShowAddnl,			"get|edit" ,			"Home_Networking"},//Home_Networking
 {"STATICDHCP",		STATIC_DHCP_param,	zcfgFeDalStaticDHCP,	zcfgFeDalShowStaticDHCP,	"get|add|edit|delete",	"Home_Networking"},//Home_Networking
 {"VLANGRP", 		VLANGRP_param,		zcfgFeDalVlanGroup,		NULL,						"add|edit|delete",	""},//Vlan_Group
 {"IGMPMLD", 		IGMPMLD_param,		zcfgFeDalIGMPMLD,		zcfgFeDalShowIGMPMLD,		"get|edit",			"IGMP/MLD"},//IGMP_MLD
