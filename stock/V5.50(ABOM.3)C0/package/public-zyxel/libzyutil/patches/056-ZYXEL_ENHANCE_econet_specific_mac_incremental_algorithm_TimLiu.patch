Index: libzyutil-1.0/ECONET/libzyutil_wrapper.c
===================================================================
--- libzyutil-1.0.orig/ECONET/libzyutil_wrapper.c	2017-08-01 19:34:00.631038752 +0800
+++ libzyutil-1.0/ECONET/libzyutil_wrapper.c	2017-08-03 06:21:38.121401855 +0800
@@ -244,6 +244,71 @@
 	return ZCFG_SUCCESS;
 }
 
+/*!
+ *  Get Nth MAC base on base MAC and GDM MASK.
+ *  Let MAC`s increment can in the range og GDM MASK.
+ *  For example: when GDM MASK is 0xf8, MAC can be x2,x3,x4,x5,x6,x7,x0,x1
+ *
+ *  @param[inout]  pucaMacAddr   input Base MAC and out N`th MAC, should be 6 bytes.
+ *  @param[in]     n             Get N`th MAC.
+ *  @param[in]     _macQuantity  Mac quantity.
+ *
+ *  @note  The MAC length should be 6 bytes.
+ */
+static void getNthMacAddr_special( unsigned char *pucaMacAddr, unsigned long n, unsigned char _gdm_mask)
+{
+	unsigned char mac_mask = (~_gdm_mask)&0xff;
+	unsigned int macsequence = pucaMacAddr[5]&mac_mask;
+    pucaMacAddr[5] = (pucaMacAddr[5]&_gdm_mask) | ((macsequence + n) & mac_mask);
+}
+
+/*!
+ *  Get Nth MAC.
+ *
+ *  @param[out]    pucaMacAddr   out N`th MAC, should be 6 bytes.
+ *  @param[in]     n             Get N`th MAC.
+ *
+ *  @note  The MAC length should be 6 bytes.
+ */
+zcfgRet_t zyUtilIGetNthMAC(char *mac, int nth)
+{
+	unsigned char targetMac[MRD_MAC_ADDR_LEN]={0};
+	int _macQuantity=0;
+	struct mrd mrd_buff;
+
+#if defined(ZYXEL_LAN_WAN_WLAN_SHARE_THE_SAME_MAC)
+	unsigned char _gdm_mask = 0xf8;
+#else
+	unsigned char _gdm_mask = 0xf0;
+#endif
+
+	if(0 != zyUtilGetMrdInfo(&mrd_buff))
+		return ZCFG_INTERNAL_ERROR;
+	memcpy(targetMac, mrd_buff.ETHER_ADDR, MRD_MAC_ADDR_LEN);
+	if( ZCFG_SUCCESS != zyUtilIGetNumberOfMAC(&_macQuantity) )
+		return ZCFG_INTERNAL_ERROR;
+
+	//Make sure the MAC we used are in the same MASK.
+#if defined(ZYXEL_LAN_WAN_WLAN_SHARE_THE_SAME_MAC)
+	if( _macQuantity != 8 ) {
+		_macQuantity = 8;
+	}
+#else
+	if( _macQuantity != 16 ) {
+		_macQuantity = 16;
+	}
+#endif
+
+	if( nth >= _macQuantity )
+		return ZCFG_INTERNAL_ERROR;
+
+	getNthMacAddr_special(targetMac, nth, _gdm_mask);
+	//printf("%2d`s MAC Address with GDM MASK 0x%02X: %02X %02X %02X %02X %02X %02X\n", (unsigned int)nth, _gdm_mask, targetMac[0],targetMac[1],targetMac[2],targetMac[3],targetMac[4],targetMac[5]);
+	memcpy(mac, targetMac, MRD_MAC_ADDR_LEN);
+
+	return ZCFG_SUCCESS;
+}
+
 zcfgRet_t zyUtilIGetModelID(char *model_id)
 {
 	struct mrd mrd_buff;
Index: libzyutil-1.0/libzyutil_wrapper.h
===================================================================
--- libzyutil-1.0.orig/libzyutil_wrapper.h	2017-08-01 19:34:00.635038752 +0800
+++ libzyutil-1.0/libzyutil_wrapper.h	2017-08-02 16:43:13.180182260 +0800
@@ -8,6 +8,7 @@
 #define zyUtilIGetSerailNum zyUtilIGetSerialNumber
 zcfgRet_t zyUtilIGetBaseMAC(char *mac);
 zcfgRet_t zyUtilIGetNumberOfMAC(int *num);
+zcfgRet_t zyUtilIGetNthMAC(char *mac, int nth);
 zcfgRet_t zyUtilIGetModelID(char *model_id);
 zcfgRet_t zyUtilIGetProductName(char *pdname);
 zcfgRet_t zyUtilIGetFirmwareVersion(char *fwversion);
Index: libzyutil-1.0/BROADCOM/libzyutil_wrapper.c
===================================================================
--- libzyutil-1.0.orig/BROADCOM/libzyutil_wrapper.c	2017-08-01 19:34:00.603038752 +0800
+++ libzyutil-1.0/BROADCOM/libzyutil_wrapper.c	2017-08-03 05:12:48.538814639 +0800
@@ -217,6 +217,21 @@
 	return ZCFG_SUCCESS;
 }
 
+/*!
+ *  Get Nth MAC.
+ *  Broadcom platform do not need to use this function.
+ *
+ *  @param[out]    pucaMacAddr   out N`th MAC, should be 6 bytes.
+ *  @param[in]     n             Get N`th MAC.
+ *
+ *  @note  The MAC length should be 6 bytes.
+ */
+zcfgRet_t zyUtilIGetNthMAC(char *mac, int nth)
+{
+	//TODO, fill here if you need.
+	return ZCFG_INTERNAL_ERROR;
+}
+
 zcfgRet_t zyUtilIGetNumberOfMAC(int *num)
 {
 	NVRAM_DATA nvramData;
