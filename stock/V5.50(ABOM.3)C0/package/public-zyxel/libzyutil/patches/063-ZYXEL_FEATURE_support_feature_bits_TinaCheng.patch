Index: libzyutil-1.0/libzyutil_zyxelfeaturebits.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ libzyutil-1.0/libzyutil_zyxelfeaturebits.c	2017-08-29 10:06:20.304180820 +0800
@@ -0,0 +1,342 @@
+#include <sys/types.h>
+#include <fcntl.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <ctype.h>
+#include <unistd.h>
+#define _GNU_SOURCE
+
+#include <linux/zy_feature_bits.h>
+#include "zcfg_common.h"
+#include "zcfg_debug.h"
+#include "libzyutil_zyxelfeaturebits.h"
+
+/*!
+ *  Get the value of Zyxel Feature Bits (/proc/zyxel/zy_feature_bits).
+ *
+ *  @param[out] value       Value of zy_feature_bits.
+ *  @return zcfgRet_t       ZCFG_SUCCESS:success(0), ZCFG_INTERNAL_ERROR:fail(-5).
+ */
+static zcfgRet_t _zyxelfeaturebits_allValueGet(unsigned int *value);
+static zcfgRet_t _zyxelfeaturebits_allValueGet(unsigned int *value)
+{
+    FILE *fp;
+    char str[9];
+
+    *value = 0;
+    fp = fopen(PROC_ZY_FEATURE_BITS, "r");
+    if ( !fp )
+    {
+        zcfgLog(ZCFG_LOG_ERR, "%s : Cannot open %s.\n", __func__, PROC_ZY_FEATURE_BITS);
+        return ZCFG_INTERNAL_ERROR;
+    }
+
+    memset(str, 0, sizeof(str));
+    if (fgets(str, sizeof(str), fp) == NULL)
+    {
+        fclose(fp);
+        zcfgLog(ZCFG_LOG_ERR, "%s : Get string fail.\n", __func__);
+        return ZCFG_INTERNAL_ERROR;
+    }
+
+    sscanf(str, "%08x", value);
+    fclose(fp);
+
+    return ZCFG_SUCCESS;
+}
+/*!
+ *  Get the offset value of Zyxel Feature Bits.
+ *
+ *  @param[in] offset       Offset of specify bit.
+ *  @param[out] value       1:support, 0:not support.
+ *  @return zcfgRet_t       ZCFG_SUCCESS:success(0), ZCFG_INTERNAL_ERROR:fail(-5).
+ */
+static zcfgRet_t _zyxelfeaturebits_offsetValueGet(unsigned int offset, int *value);
+static zcfgRet_t _zyxelfeaturebits_offsetValueGet(unsigned int offset, int *value)
+{
+    zcfgRet_t ret = ZCFG_SUCCESS;
+    unsigned int featurebits;
+
+    *value = 0;
+    ret = _zyxelfeaturebits_allValueGet(&featurebits);
+    if (ret == ZCFG_INTERNAL_ERROR)
+    {
+        return ret;
+    }
+
+    *value = ((featurebits & offset) ? 1 : 0);
+
+    return ret;
+}
+/*!
+ *  Get the mask value of Zyxel Feature Bits.
+ *
+ *  @param[in] mask         Mask of specify bits.
+ *  @param[out] value       Specify bits of zy_feature_bits.
+ *  @return zcfgRet_t       ZCFG_SUCCESS:success(0), ZCFG_INTERNAL_ERROR:fail(-5).
+ */
+static zcfgRet_t _zyxelfeaturebits_maskValueGet(unsigned int mask, unsigned int *value);
+static zcfgRet_t _zyxelfeaturebits_maskValueGet(unsigned int mask, unsigned int *value)
+{
+    zcfgRet_t ret = ZCFG_SUCCESS;
+    unsigned int featurebits;
+
+    *value = 0;
+    ret = _zyxelfeaturebits_allValueGet(&featurebits);
+    if (ret == ZCFG_INTERNAL_ERROR)
+    {
+        return ret;
+    }
+
+    mask &= 0xFFFFFFFF;
+    *value = (mask & featurebits);
+
+    return ret;
+}
+/*!
+ *  Check if it support ADSL Annex A.
+ *
+ *  @param[out] value       1:support, 0:not support.
+ *  @return zcfgRet_t       ZCFG_SUCCESS:success(0), ZCFG_INTERNAL_ERROR:fail(-5).
+ */
+zcfgRet_t libzyutil_zyxelfeaturebits_adslAnnexAGet(int *value)
+{
+    zcfgRet_t ret = ZCFG_SUCCESS;
+
+    if (value == NULL)
+    {
+        zcfgLog(ZCFG_LOG_ERR, "%s : value == NULL.\n", __func__);
+        return ZCFG_INTERNAL_ERROR;
+    }
+
+    ret = _zyxelfeaturebits_offsetValueGet(ZYFEATUREBITS_ADSL_ANNEXA, value);
+    return ret;
+}
+/*!
+ *  Check if it support ADSL Annex B.
+ *
+ *  @param[out] value       1:support, 0:not support.
+ *  @return zcfgRet_t       ZCFG_SUCCESS:success(0), ZCFG_INTERNAL_ERROR:fail(-5).
+ */
+zcfgRet_t libzyutil_zyxelfeaturebits_adslAnnexBGet(int *value)
+{
+    zcfgRet_t ret = ZCFG_SUCCESS;
+
+    if (value == NULL)
+    {
+        zcfgLog(ZCFG_LOG_ERR, "%s : value == NULL.\n", __func__);
+        return ZCFG_INTERNAL_ERROR;
+    }
+
+    ret = _zyxelfeaturebits_offsetValueGet(ZYFEATUREBITS_ADSL_ANNEXB, value);
+    return ret;
+}
+/*!
+ *  Check if it support ADSL Annex C.
+ *
+ *  @param[out] value       1:support, 0:not support.
+ *  @return zcfgRet_t       ZCFG_SUCCESS:success(0), ZCFG_INTERNAL_ERROR:fail(-5).
+ */
+zcfgRet_t libzyutil_zyxelfeaturebits_adslAnnexCGet(int *value)
+{
+    zcfgRet_t ret = ZCFG_SUCCESS;
+
+    if (value == NULL)
+    {
+        zcfgLog(ZCFG_LOG_ERR, "%s : value == NULL.\n", __func__);
+        return ZCFG_INTERNAL_ERROR;
+    }
+
+    ret = _zyxelfeaturebits_offsetValueGet(ZYFEATUREBITS_ADSL_ANNEXC, value);
+    return ret;
+}
+/*!
+ *  Check if it support VDSL 17a.
+ *
+ *  @param[out] value       1:support, 0:not support.
+ *  @return zcfgRet_t       ZCFG_SUCCESS:success(0), ZCFG_INTERNAL_ERROR:fail(-5).
+ */
+zcfgRet_t libzyutil_zyxelfeaturebits_vdsl17aGet(int *value)
+{
+    zcfgRet_t ret = ZCFG_SUCCESS;
+
+    if (value == NULL)
+    {
+        zcfgLog(ZCFG_LOG_ERR, "%s : value == NULL.\n", __func__);
+        return ZCFG_INTERNAL_ERROR;
+    }
+
+    ret = _zyxelfeaturebits_offsetValueGet(ZYFEATUREBITS_VDSL_17A, value);
+    return ret;
+}
+/*!
+ *  Check if it support VDSL 35b.
+ *
+ *  @param[out] value       1:support, 0:not support.
+ *  @return zcfgRet_t       ZCFG_SUCCESS:success(0), ZCFG_INTERNAL_ERROR:fail(-5).
+ */
+zcfgRet_t libzyutil_zyxelfeaturebits_vdsl35bGet(int *value)
+{
+    zcfgRet_t ret = ZCFG_SUCCESS;
+
+    if (value == NULL)
+    {
+        zcfgLog(ZCFG_LOG_ERR, "%s : value == NULL.\n", __func__);
+        return ZCFG_INTERNAL_ERROR;
+    }
+
+    ret = _zyxelfeaturebits_offsetValueGet(ZYFEATUREBITS_VDSL_35B, value);
+    return ret;
+}
+/*!
+ *  Check if it support VDSL G.fast.
+ *
+ *  @param[out] value       1:support, 0:not support.
+ *  @return zcfgRet_t       ZCFG_SUCCESS:success(0), ZCFG_INTERNAL_ERROR:fail(-5).
+ */
+zcfgRet_t libzyutil_zyxelfeaturebits_vdslGfastGet(int *value)
+{
+    zcfgRet_t ret = ZCFG_SUCCESS;
+
+    if (value == NULL)
+    {
+        zcfgLog(ZCFG_LOG_ERR, "%s : value == NULL.\n", __func__);
+        return ZCFG_INTERNAL_ERROR;
+    }
+
+    ret = _zyxelfeaturebits_offsetValueGet(ZYFEATUREBITS_VDSL_GFAST, value);
+    return ret;
+}
+/*!
+ *  Check if it support Wifi 2.4G.
+ *
+ *  @param[out] value       1:support, 0:not support.
+ *  @return zcfgRet_t       ZCFG_SUCCESS:success(0), ZCFG_INTERNAL_ERROR:fail(-5).
+ */
+zcfgRet_t libzyutil_zyxelfeaturebits_wifi24GGet(int *value)
+{
+    zcfgRet_t ret = ZCFG_SUCCESS;
+
+    if (value == NULL)
+    {
+        zcfgLog(ZCFG_LOG_ERR, "%s : value == NULL.\n", __func__);
+        return ZCFG_INTERNAL_ERROR;
+    }
+
+    ret = _zyxelfeaturebits_offsetValueGet(ZYFEATUREBITS_WIFI_24G, value);
+    return ret;
+}
+/*!
+ *  Check if it support Wifi 2.4G FEM.
+ *
+ *  @param[out] value       1:support, 0:not support.
+ *  @return zcfgRet_t       ZCFG_SUCCESS:success(0), ZCFG_INTERNAL_ERROR:fail(-5).
+ */
+zcfgRet_t libzyutil_zyxelfeaturebits_wifi24GFemGet(int *value)
+{
+    zcfgRet_t ret = ZCFG_SUCCESS;
+
+    if (value == NULL)
+    {
+        zcfgLog(ZCFG_LOG_ERR, "%s : value == NULL.\n", __func__);
+        return ZCFG_INTERNAL_ERROR;
+    }
+
+    ret = _zyxelfeaturebits_offsetValueGet(ZYFEATUREBITS_WIFI_24G_FEM, value);
+    return ret;
+}
+/*!
+ *  Check if it support Wifi 2.4G external antenna.
+ *
+ *  @param[out] value       1:support, 0:not support.
+ *  @return zcfgRet_t       ZCFG_SUCCESS:success(0), ZCFG_INTERNAL_ERROR:fail(-5).
+ */
+zcfgRet_t libzyutil_zyxelfeaturebits_wifi24GExAntGet(int *value)
+{
+    zcfgRet_t ret = ZCFG_SUCCESS;
+
+    if (value == NULL)
+    {
+        zcfgLog(ZCFG_LOG_ERR, "%s : value == NULL.\n", __func__);
+        return ZCFG_INTERNAL_ERROR;
+    }
+
+    ret = _zyxelfeaturebits_offsetValueGet(ZYFEATUREBITS_WIFI_24G_EXT_ANT, value);
+    return ret;
+}
+/*!
+ *  Check if it support Wifi 5G.
+ *
+ *  @param[out] value       1:support, 0:not support.
+ *  @return zcfgRet_t       ZCFG_SUCCESS:success(0), ZCFG_INTERNAL_ERROR:fail(-5).
+ */
+zcfgRet_t libzyutil_zyxelfeaturebits_wifi5GGet(int *value)
+{
+    zcfgRet_t ret = ZCFG_SUCCESS;
+
+    if (value == NULL)
+    {
+        zcfgLog(ZCFG_LOG_ERR, "%s : value == NULL.\n", __func__);
+        return ZCFG_INTERNAL_ERROR;
+    }
+
+    ret = _zyxelfeaturebits_offsetValueGet(ZYFEATUREBITS_WIFI_5G, value);
+    return ret;
+}
+/*!
+ *  Check if it support Wifi 5G FEM.
+ *
+ *  @param[out] value       1:support, 0:not support.
+ *  @return zcfgRet_t       ZCFG_SUCCESS:success(0), ZCFG_INTERNAL_ERROR:fail(-5).
+ */
+zcfgRet_t libzyutil_zyxelfeaturebits_wifi5GFemGet(int *value)
+{
+    zcfgRet_t ret = ZCFG_SUCCESS;
+
+    if (value == NULL)
+    {
+        zcfgLog(ZCFG_LOG_ERR, "%s : value == NULL.\n", __func__);
+        return ZCFG_INTERNAL_ERROR;
+    }
+
+    ret = _zyxelfeaturebits_offsetValueGet(ZYFEATUREBITS_WIFI_5G_FEM, value);
+    return ret;
+}
+/*!
+ *  Check if it support Wifi 5G external antenna.
+ *
+ *  @param[out] value       1:support, 0:not support.
+ *  @return zcfgRet_t       ZCFG_SUCCESS:success(0), ZCFG_INTERNAL_ERROR:fail(-5).
+ */
+zcfgRet_t libzyutil_zyxelfeaturebits_wifi5GExAntGet(int *value)
+{
+    zcfgRet_t ret = ZCFG_SUCCESS;
+
+    if (value == NULL)
+    {
+        zcfgLog(ZCFG_LOG_ERR, "%s : value == NULL.\n", __func__);
+        return ZCFG_INTERNAL_ERROR;
+    }
+
+    ret = _zyxelfeaturebits_offsetValueGet(ZYFEATUREBITS_WIFI_5G_EXT_ANT, value);
+    return ret;
+}
+/*!
+ *  Check if it support VoIP.
+ *
+ *  @param[out] value       1:support, 0:not support.
+ *  @return zcfgRet_t       ZCFG_SUCCESS:success(0), ZCFG_INTERNAL_ERROR:fail(-5).
+ */
+zcfgRet_t libzyutil_zyxelfeaturebits_voipGet(int *value)
+{
+    zcfgRet_t ret = ZCFG_SUCCESS;
+
+    if (value == NULL)
+    {
+        zcfgLog(ZCFG_LOG_ERR, "%s : value == NULL.\n", __func__);
+        return ZCFG_INTERNAL_ERROR;
+    }
+
+    ret = _zyxelfeaturebits_offsetValueGet(ZYFEATUREBITS_VOIP, value);
+    return ret;
+}
Index: libzyutil-1.0/libzyutil_zyxelfeaturebits.h
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ libzyutil-1.0/libzyutil_zyxelfeaturebits.h	2017-08-28 17:51:10.641837401 +0800
@@ -0,0 +1,114 @@
+/*
+ *	libzyutil_zyxelfeaturebits.h - Public APIs of Zyxel Feature Bits.
+ *	Copyright (C) 2017 Zyxel Communications Corp.
+ */
+
+#ifndef _LIBZYUTIL_ZYXELFEATUREBITS_H
+#define _LIBZYUTIL_ZYXELFEATUREBITS_H
+
+#include "zcfg_common.h"
+
+#define PROC_ZY_FEATURE_BITS    "/proc/zyxel/zy_feature_bits"
+
+/*!
+ *  ZYFEATUREBITS_XXX :
+ *  Zyxel Feature Bits offset are defined in linux header
+ *  /linux-brcm963xx_xxx/linux-3.4.11/include/linux/zy_feature_bits.h,
+ *  which is used by /bcmdrivers/opensource/include/bcm963xx/board.h
+ *  and
+ *  /libzyutil-1.0/libzyutil_zyxelfeaturebits.h
+ */
+
+/*!
+ *  Check if it support ADSL Annex A.
+ *
+ *  @param[out] value       1:support, 0:not support.
+ *  @return zcfgRet_t       ZCFG_SUCCESS:success(0), ZCFG_INTERNAL_ERROR:fail(-5).
+ */
+zcfgRet_t libzyutil_zyxelfeaturebits_adslAnnexAGet(int *value);
+/*!
+ *  Check if it support ADSL Annex B.
+ *
+ *  @param[out] value       1:support, 0:not support.
+ *  @return zcfgRet_t       ZCFG_SUCCESS:success(0), ZCFG_INTERNAL_ERROR:fail(-5).
+ */
+zcfgRet_t libzyutil_zyxelfeaturebits_adslAnnexBGet(int *value);
+/*!
+ *  Check if it support ADSL Annex C.
+ *
+ *  @param[out] value       1:support, 0:not support.
+ *  @return zcfgRet_t       ZCFG_SUCCESS:success(0), ZCFG_INTERNAL_ERROR:fail(-5).
+ */
+zcfgRet_t libzyutil_zyxelfeaturebits_adslAnnexCGet(int *value);
+/*!
+ *  Check if it support VDSL 17a.
+ *
+ *  @param[out] value       1:support, 0:not support.
+ *  @return zcfgRet_t       ZCFG_SUCCESS:success(0), ZCFG_INTERNAL_ERROR:fail(-5).
+ */
+zcfgRet_t libzyutil_zyxelfeaturebits_vdsl17aGet(int *value);
+/*!
+ *  Check if it support VDSL 35b.
+ *
+ *  @param[out] value       1:support, 0:not support.
+ *  @return zcfgRet_t       ZCFG_SUCCESS:success(0), ZCFG_INTERNAL_ERROR:fail(-5).
+ */
+zcfgRet_t libzyutil_zyxelfeaturebits_vdsl35bGet(int *value);
+/*!
+ *  Check if it support VDSL G.fast.
+ *
+ *  @param[out] value       1:support, 0:not support.
+ *  @return zcfgRet_t       ZCFG_SUCCESS:success(0), ZCFG_INTERNAL_ERROR:fail(-5).
+ */
+zcfgRet_t libzyutil_zyxelfeaturebits_vdslGfastGet(int *value);
+/*!
+ *  Check if it support Wifi 2.4G.
+ *
+ *  @param[out] value       1:support, 0:not support.
+ *  @return zcfgRet_t       ZCFG_SUCCESS:success(0), ZCFG_INTERNAL_ERROR:fail(-5).
+ */
+zcfgRet_t libzyutil_zyxelfeaturebits_wifi24GGet(int *value);
+/*!
+ *  Check if it support Wifi 2.4G FEM.
+ *
+ *  @param[out] value       1:support, 0:not support.
+ *  @return zcfgRet_t       ZCFG_SUCCESS:success(0), ZCFG_INTERNAL_ERROR:fail(-5).
+ */
+zcfgRet_t libzyutil_zyxelfeaturebits_wifi24GFemGet(int *value);
+/*!
+ *  Check if it support Wifi 2.4G external antenna.
+ *
+ *  @param[out] value       1:support, 0:not support.
+ *  @return zcfgRet_t       ZCFG_SUCCESS:success(0), ZCFG_INTERNAL_ERROR:fail(-5).
+ */
+zcfgRet_t libzyutil_zyxelfeaturebits_wifi24GExAntGet(int *value);
+/*!
+ *  Check if it support Wifi 5G.
+ *
+ *  @param[out] value       1:support, 0:not support.
+ *  @return zcfgRet_t       ZCFG_SUCCESS:success(0), ZCFG_INTERNAL_ERROR:fail(-5).
+ */
+zcfgRet_t libzyutil_zyxelfeaturebits_wifi5GGet(int *value);
+/*!
+ *  Check if it support Wifi 5G FEM.
+ *
+ *  @param[out] value       1:support, 0:not support.
+ *  @return zcfgRet_t       ZCFG_SUCCESS:success(0), ZCFG_INTERNAL_ERROR:fail(-5).
+ */
+zcfgRet_t libzyutil_zyxelfeaturebits_wifi5GFemGet(int *value);
+/*!
+ *  Check if it support Wifi 5G external antenna.
+ *
+ *  @param[out] value       1:support, 0:not support.
+ *  @return zcfgRet_t       ZCFG_SUCCESS:success(0), ZCFG_INTERNAL_ERROR:fail(-5).
+ */
+zcfgRet_t libzyutil_zyxelfeaturebits_wifi5GExAntGet(int *value);
+/*!
+ *  Check if it support VoIP.
+ *
+ *  @param[out] value       1:support, 0:not support.
+ *  @return zcfgRet_t       ZCFG_SUCCESS:success(0), ZCFG_INTERNAL_ERROR:fail(-5).
+ */
+zcfgRet_t libzyutil_zyxelfeaturebits_voipGet(int *value);
+
+#endif	/* _LIBZYUTIL_ZYXELFEATUREBITS_H */
Index: libzyutil-1.0/Makefile
===================================================================
--- libzyutil-1.0.orig/Makefile	2017-08-28 17:51:10.609837398 +0800
+++ libzyutil-1.0/Makefile	2017-08-28 17:51:10.641837401 +0800
@@ -54,6 +54,10 @@
 ZCFLAGS += -DZYXEL=1 -std=gnu99
 LIB_OBJS = common.o flash.o skconn.o
 
+ifneq ($(strip $(ZYXEL_FEATURE_BITS)),)
+LIB_OBJS += libzyutil_zyxelfeaturebits.o
+endif
+
 PKG_NAME = libzyutil
 LIB_OBJS += $(ZCFG_PLATFORM)/$(PKG_NAME)_wrapper.o
 ZCFLAGS += -D$(ZCFG_PLATFORM)_PLATFORM
