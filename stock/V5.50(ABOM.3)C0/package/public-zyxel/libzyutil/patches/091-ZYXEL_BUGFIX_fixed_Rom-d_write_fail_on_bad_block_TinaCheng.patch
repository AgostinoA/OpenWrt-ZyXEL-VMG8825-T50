Index: libzyutil-1.0/flash.c
===================================================================
--- libzyutil-1.0.orig/flash.c	2018-06-29 17:06:08.725054776 +0800
+++ libzyutil-1.0/flash.c	2018-06-29 17:06:56.252727426 +0800
@@ -2,6 +2,7 @@
 
 #include "zcfg_common.h"
 #include "zyutil.h"
+#include "zlog_api.h"
 
 #include <sys/types.h>
 #include <sys/stat.h>
@@ -11,6 +12,14 @@
 #include <mtd/mtd-user.h>
 #include <errno.h>
 #include "zcfg_system.h"
+
+//#define ENABLE_DEBUG
+#ifdef ENABLE_DEBUG
+#define DEBUG_PRINT(fmt, args...)    printf(fmt, ## args)
+#else
+#define DEBUG_PRINT(fmt, args...)    /* do nothing */
+#endif
+
 #if 0 //#ifdef ZYXEL_WWAN
 #define ZY_WWANPACKAGE_MAXSIZE	131072  // (1024*128) bytes
 #define WWANPACKAGE_HEADER_LEN	32  // theoretically speaking 31 is match
@@ -51,6 +60,7 @@
 	ssize_t result;
 
 	result = read(fd, buf, count);
+
 	if (count != result) {
 		if (result < 0) {
 			printf("While reading data from %s: %m\n", filename);
@@ -101,7 +111,7 @@
 				mtd[len-1] = '\0';
 				sprintf(mtddev, "/dev/%s", mtd);
 				ret = ZCFG_SUCCESS;
-				printf("Find MTD Device %s with name %s\n", mtddev, mtdname);
+				printf("Find MTD Device %s with name %s.\n", mtddev, mtdname);
 				break;
 			}
 
@@ -136,6 +146,211 @@
 	return mtd.size;
 }
 
+#if 1 //201806__ZYXEL__, fixed write fail on bad block
+/*!
+ *  Write data from buffer to flash.
+ *
+ *  @param[in]  (char *)    Flash (MTD device name)
+ *              (void *)    Buffer
+ *              uint32_t    Buffer size
+ *  @return     zcfgRet_t   ZCFG_INTERNAL_ERROR/ZCFG_SUCCESS
+ *
+ *  NOTE:
+ *  20180622 -  Rewrite this function.
+ *              Set one block size as an unit of erase/read/compare action.
+ *              And every time write a page size to flash (flash's character).
+ *              Btw, a block needs to unlock before erase/write it.
+ */
+zcfgRet_t zyUtilWriteBufToFlash(char *devName, void *buf, uint32_t buf_size)
+{
+    int devFd = -1;
+    ssize_t result;
+    size_t buf_size_to_write, written, bufOfs;
+    struct mtd_info_user mtd;
+    struct erase_info_user erase;
+    void *dest = NULL;
+    int pagesize = 0, unit_to_write = 0, unit_to_use = 0, meet_bad = 0, bad_blk_count = 0;
+    loff_t cur_ofs = 0;
+
+    if ((devName == NULL) || (buf == NULL) || (buf_size <= 0))
+    {
+        ZLOG_ERROR("Incorrect buffer data!\n");
+        return ZCFG_INTERNAL_ERROR;
+    }
+
+    /* Open MTD device */
+    if ((devFd = zyUtilOpen(devName, O_SYNC | O_RDWR)) == -1)
+    {
+        ZLOG_ERROR("Failed to open %s!\n",devName);
+        return ZCFG_INTERNAL_ERROR;
+    }
+
+    /* Get info of the flash device */
+    if (ioctl(devFd, MEMGETINFO, &mtd) < 0)
+    {
+        ZLOG_ERROR("Failed to get MTD information of %s!\n",devName);
+        close(devFd);
+        return ZCFG_INTERNAL_ERROR;
+    }
+
+    ZLOG_DEBUG("[%s_%d] devName=%s, buf_size=%d, MTD info: \n"
+                "type=0x%08x, flags=0x%08x, size=0x%08x \n"
+                "erasesize=0x%08x, writesize=0x%08x, oobsize=0x%08x\n", \
+                __FILE__, __LINE__, devName, buf_size,
+                mtd.type, mtd.flags, mtd.size, mtd.erasesize, mtd.writesize, mtd.oobsize);
+
+    /* Check if partition size enough */
+    if (buf_size > mtd.size)
+    {
+        ZLOG_ERROR("MTD device %s space is not enough!\n", devName);
+        close(devFd);
+        return ZCFG_INTERNAL_ERROR;
+    }
+
+    /* Basic initial */
+    dest = malloc(mtd.erasesize);
+    unit_to_use = erase.length = mtd.erasesize; //block size, e.g. 0x20000
+    buf_size_to_write = (size_t)buf_size;
+    bufOfs = 0;
+
+    /* First to erase device anyway */
+    for (erase.start = 0; erase.start < mtd.size; erase.start += mtd.erasesize)
+    {
+        ioctl(devFd, MEMUNLOCK, &erase);
+        if (ioctl(devFd, MEMERASE, &erase))
+        {
+            ZLOG_DEBUG("[%s_%d] Failed to erase %s block at offset 0x%08x.\n", __FILE__, __LINE__, devName, erase.start);
+        } //else do nothing
+    }
+
+    for (erase.start = 0; ((erase.start < mtd.size) && (buf_size_to_write > 0)); erase.start += mtd.erasesize)
+    {
+        int ret;
+        loff_t offset = erase.start;
+
+        ZLOG_DEBUG("[%s_%d] Going to offset=0x%08x, still %d size need to write.\n", __FILE__, __LINE__, erase.start, buf_size_to_write);
+
+        /* Bad block checking */
+        ret = ioctl(devFd, MEMGETBADBLOCK, &offset);
+        if (ret)
+        {
+            ZLOG_DEBUG("[%s_%d] Skip this block.\n", __FILE__, __LINE__);
+            cur_ofs = lseek(devFd, erase.length, SEEK_CUR);
+            DEBUG_PRINT("[%s_%d] Shift pointer to ofs 0x%08x.\n", __FILE__, __LINE__, (unsigned int)cur_ofs);
+            bad_blk_count++;
+            continue;
+        } //else do nothing
+
+        DEBUG_PRINT("[%s_%d] Erase 0x%08x-0x%08x ...\n", __FILE__, __LINE__, (unsigned int)erase.start, (unsigned int)(erase.start + erase.length));
+
+        /* Write data */
+        {
+            if (buf_size_to_write < erase.length) //data not write yet
+            {
+                unit_to_use = buf_size_to_write; //unit_to_use is how many we want to write to this block
+            } //else do nothing
+
+            /* Unlock a block before write */
+            ioctl(devFd, MEMUNLOCK, &erase);
+
+            pagesize = mtd.writesize;
+            written = 0;
+            meet_bad = 0;
+            unit_to_write = unit_to_use;
+
+            // Wite by page size (mtd.writesize)
+            while (unit_to_write)
+            {
+                ZLOG_DEBUG("[%s_%d] unit_to_use=0x%08x, unit_to_write=0x%08x, pagesize=0x%08x, bufOfs=0x%08x, written=0x%08x\n", \
+                                __FILE__, __LINE__, unit_to_use, unit_to_write, pagesize, bufOfs, written);
+
+                if (unit_to_write < mtd.writesize)
+                {
+                    pagesize = unit_to_write;
+                } //else do nothing
+
+                result = write(devFd, (buf + bufOfs + written), pagesize);
+                if (result != pagesize)
+                {
+                    // Write fail
+                    meet_bad = 1;
+                    ZLOG_DEBUG("[%s_%d] Write to flash fail.\n", __FILE__, __LINE__);
+                    cur_ofs = lseek(devFd, (offset + erase.length), SEEK_SET); //next block
+                    DEBUG_PRINT("[%s_%d] Shift pointer to ofs 0x%08x\n", __FILE__, __LINE__, (unsigned int)cur_ofs);
+                    break;
+                } //else do nothing
+                unit_to_write -= pagesize;
+                written += pagesize;
+            }
+        } //Write data end
+
+        /* Data confirm */
+        if (!meet_bad)
+        {
+            memset(dest, 0xff, sizeof(mtd.erasesize));
+            cur_ofs = lseek(devFd, offset, SEEK_SET);
+            DEBUG_PRINT("[%s_%d] Shift pointer back to ofs 0x%08x to reading.\n", __FILE__, __LINE__, (unsigned int)cur_ofs);
+
+            // Read data
+            result = read(devFd, dest, sizeof(unsigned char)*unit_to_use);
+            DEBUG_PRINT("[%s_%d] Read return %d\n", __FILE__, __LINE__, result);
+
+            if (result != unit_to_use)
+            {
+                meet_bad = 1;
+                ZLOG_DEBUG("[%s_%d] Read from flash fail.\n", __FILE__, __LINE__);
+                cur_ofs = lseek(devFd, (off_t)(-result), SEEK_CUR);
+                DEBUG_PRINT("[%s_%d] Shift pointer back to ofs 0x%08x.\n", __FILE__, __LINE__, (unsigned int)cur_ofs);
+            }
+            else
+            {
+                // Compare data
+                ret = memcmp((buf + bufOfs), dest, sizeof(unsigned char)*unit_to_use);
+                if (ret)
+                {
+                    meet_bad = 1;
+                    ZLOG_DEBUG("[%s_%d] Flash data does not match with buffer 0x%08x-0x%08x.\n", \
+                                __FILE__, __LINE__, (unsigned int)bufOfs, (unsigned int)(bufOfs + unit_to_use));
+                } //else do nothing
+            }
+        } //Data confirm end
+
+        /* If bad block happen, then jump to next block */
+        if (meet_bad == 1)
+        {
+            ioctl(devFd, MEMERASE, &erase);
+            continue; //go to next block without reading & comparing
+        } //else do nothing
+
+        bufOfs += unit_to_use;
+        buf_size_to_write -= unit_to_use;
+
+    } //end of for(;;)
+
+    ZLOG_DEBUG("[%s_%d] MTD device %s has %d bad block(s).\n", __FILE__, __LINE__, devName, bad_blk_count);
+
+    /* No good block to write */
+    if ((erase.start == mtd.size) && (buf_size_to_write != 0))
+    {
+        for (erase.start = 0; erase.start < mtd.size; erase.start += mtd.erasesize)
+        {
+            ioctl(devFd, MEMUNLOCK, &erase);
+            if (ioctl(devFd, MEMERASE, &erase))
+            {
+                ZLOG_DEBUG("[%s_%d] Failed to erase block on %s at 0x%08x\n", __FILE__, __LINE__, devName, erase.start);
+            } //else do nothing
+        }
+        ZLOG_ERROR("Erase %s due to incomplete writing to flash.\n", devName);
+        free(dest);
+        close(devFd);
+        return ZCFG_INTERNAL_ERROR;
+    } //else do nothing
+
+    free(dest);
+    close(devFd);
+    return ZCFG_SUCCESS;
+}
+#else
 zcfgRet_t zyUtilWriteBufToFlash(char *devName, void *buf, uint32_t buf_size)
 {
 	int devFd = -1, i = 0;
@@ -236,6 +451,7 @@
 	close(devFd);
     return ZCFG_SUCCESS;
 }
+#endif
 
 #ifndef NEW_MTD_DRIVER 
 int zyUtilReadBufFromFlash(char *devName, void *buf, uint32_t buf_size)
@@ -375,13 +591,11 @@
 #else
 int zyUtilReadBufFromFlash(char *devName, void *buf, uint32_t buf_size)
 {
-	int oobinfochanged = 0;
 	unsigned long start_addr = 0;
 	unsigned long ofs, end_addr = 0;
 	unsigned long long blockstart = 1;
 	int devFd = -1;
 	struct mtd_info_user mtd;
-	struct nand_oobinfo old_oobinfo;
 	int ret, pagesize, badblock = 0;
 	unsigned char readbuf[4096];
 
@@ -412,10 +626,6 @@
 		return -1;
 	}
 
-#if 0
-	/* Read the real oob length */
-	oob.length = mtd.oobsize;
-#endif
 	/* No ecc*/
 	if(ioctl(devFd, MTDFILEMODE, (void *) MTD_FILE_MODE_RAW) != 0) {
 		perror("MTDFILEMODE");
@@ -464,30 +674,14 @@
 			buf_size -= pagesize;
 		}
 	}
-#ifndef NEW_MTD_DRIVER
-	/* reset oobinfo */
-	if(oobinfochanged == 1) {
-		if(ioctl(devFd, MEMSETOOBSEL, &old_oobinfo) != 0) {
-			perror ("MEMSETOOBSEL");
-			close(devFd);
-			return -1;
-		}
-	}
-#endif
+
 	/* Close the output file and MTD device */
 	close(devFd);
 
 	return 0;
 
 closeall:
-#ifndef NEW_MTD_DRIVER
-	/* The new mode change is per file descriptor ! */
-	if(oobinfochanged == 1) {
-		if(ioctl(devFd, MEMSETOOBSEL, &old_oobinfo) != 0)  {
-			perror("MEMSETOOBSEL");
-		}
-	}
-#endif
+
 	close(devFd);
 	return -1;
 }
@@ -499,7 +693,7 @@
 	int fd;
 	struct mtd_info_user mtdInfo;
 	struct erase_info_user mtdEraseInfo;
-	
+
 	/* Open MTD device */
 	if((fd = zyUtilOpen(mtd, O_SYNC | O_RDWR)) == -1) {
 		fprintf(stderr, "Could not open mtd device: %s\n", mtd);
@@ -517,16 +711,12 @@
 	mtdEraseInfo.length = mtdInfo.erasesize;
 
 	/* Erase flash */
-	for (mtdEraseInfo.start = 0;
-		 mtdEraseInfo.start < mtdInfo.size;
-		 mtdEraseInfo.start += mtdInfo.erasesize) {
-
+	for (mtdEraseInfo.start = 0; mtdEraseInfo.start < mtdInfo.size; mtdEraseInfo.start += mtdInfo.erasesize)
+	{
 		ioctl(fd, MEMUNLOCK, &mtdEraseInfo);
-		if(ioctl(fd, MEMERASE, &mtdEraseInfo)) {
-			fprintf(stderr, "Could not erase MTD device: %s\n", mtd);
-			close(fd);
-			return ZCFG_INTERNAL_ERROR;
-			//exit(1);
+		if (ioctl(fd, MEMERASE, &mtdEraseInfo))
+		{
+            fprintf(stderr, "Failed to erase %s block at 0x%08x.\n", mtd, mtdEraseInfo.start);
 		}
 	}
 
