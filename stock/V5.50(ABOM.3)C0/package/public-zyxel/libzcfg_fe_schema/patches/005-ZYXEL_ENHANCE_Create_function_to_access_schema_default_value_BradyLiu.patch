Index: libzcfg_fe_schema-1.0/zcfg_fe_schema.c
===================================================================
--- libzcfg_fe_schema-1.0.orig/zcfg_fe_schema.c	2017-01-18 11:10:36.609500963 +0800
+++ libzcfg_fe_schema-1.0/zcfg_fe_schema.c	2017-01-19 18:16:33.336342417 +0800
@@ -5,10 +5,12 @@
 #include "zcfg_fe_schema.h"
 #include "zcfg_fe_rdm_access.h"
 #include "zcfg_debug.h"
+#include "zcfg_rdm_oid.h"
 
 extern void *schemaShmAddr;
 extern void *objNameShmAddr;
 extern void *paramNameShmAddr;
+extern void *objDefaultValPtr;
 extern int schemaShmSize;
 
 bool attrSetRollback = false;
@@ -106,6 +108,69 @@
  *  Description: Used to set parameter attribute
  *
  */
+
+zcfgRet_t zcfgFeGetSchemaParameterByOid(uint32_t oid, struct json_object* defaultJobj){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	objIndex_t objIid;
+	objInfo_t *objInfo;
+	char *string = NULL;
+	bool dftBool;
+
+	struct json_object* setValue = NULL;
+
+	if((schemaShmAddr == NULL) || (objDefaultValPtr == NULL))
+		zcfgFeSharedMemInit();
+
+	objInfo = GET_OBJ_INFO_BY_OID(oid);
+
+	GET_PAMAMETERS_IN_OBJECT(objInfo, paramInfo, paramName){
+		switch (paramInfo->type) {
+			case json_type_boolean:
+				/*Use default value defined in schema*/
+				dftBool = paramInfo->iniVal;
+				if(dftBool == 1) {
+					setValue = json_object_new_boolean(true);
+				}
+				else {
+					setValue = json_object_new_boolean(false);
+				}
+
+				json_object_object_add(defaultJobj, paramName, setValue);
+				break;
+			case json_type_int:
+				/*Use default value defined in schema*/
+				setValue = json_object_new_int(paramInfo->iniVal);
+				json_object_object_add(defaultJobj, paramName, setValue);
+				break;
+			case json_type_uint8:
+			case json_type_uint16:
+			case json_type_uint32:
+			case json_type_ulong:
+				/*Use default value defined in schema*/
+				setValue = json_object_new_int(paramInfo->iniVal);
+
+				json_object_object_add(defaultJobj, paramName, setValue);
+				break;
+			case json_type_string:
+			case json_type_time:
+			case json_type_base64:
+			case json_type_hex:
+				/*Use default value defined in schema*/
+				string = objDefaultValPtr + paramInfo->iniVal;
+				setValue = json_object_new_string(string);
+
+				json_object_object_add(defaultJobj, paramName, setValue);
+				break;
+			default:
+				zcfgLog(ZCFG_LOG_ERR, "%s(): Get parameter[%s] error.\n", __FUNCTION__, paramName);
+				return ZCFG_INTERNAL_ERROR;
+				break;
+		}
+	}
+
+	return ret;
+}
+
 zcfgRet_t zcfgFeParamAttrSet(zcfg_offset_t rdmObjId, char *parameterName, uint32_t attr)
 {
 	int ret = 0;
Index: libzcfg_fe_schema-1.0/zcfg_fe_schema.h
===================================================================
--- libzcfg_fe_schema-1.0.orig/zcfg_fe_schema.h	2017-01-18 11:10:36.649500962 +0800
+++ libzcfg_fe_schema-1.0/zcfg_fe_schema.h	2017-01-18 11:12:23.581593800 +0800
@@ -10,6 +10,7 @@
 int zcfgFeObjAttrGet(zcfg_offset_t);
 int zcfgFeParamAttrGetByName(zcfg_offset_t, char *);
 int zcfgFeParamTypeGetByName(zcfg_offset_t, char *);
+zcfgRet_t zcfgFeGetSchemaParameterByOid(uint32_t oid, struct json_object* defaultJobj);
 zcfgRet_t zcfgFeAllParamNameGet(zcfg_offset_t, struct json_object **);
 zcfgRet_t zcfgFeParamAttrSet(zcfg_offset_t, char *, uint32_t);
 zcfgRet_t zcfgFeMultiParamAttrAppend(zcfg_offset_t, json_object *, char *, int);
