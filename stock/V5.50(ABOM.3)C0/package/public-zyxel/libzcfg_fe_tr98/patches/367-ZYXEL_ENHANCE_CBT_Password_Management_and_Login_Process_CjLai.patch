Index: libzcfg_fe_tr98-1.0/Makefile
===================================================================
--- libzcfg_fe_tr98-1.0.orig/Makefile	2016-09-05 15:10:31.702201566 +0800
+++ libzcfg_fe_tr98-1.0/Makefile	2016-09-05 15:12:03.178424100 +0800
@@ -61,6 +61,12 @@
 CFLAGS += -DZyXEL_DHCP_OPTION125
 endif
 
+#CBT
+ifeq ($(CONFIG_CBT_CUSTOMIZATION),y)
+CFLAGS += -DCBT_CUSTOMIZATION
+endif
+
+
 ifeq ($(CONFIG_ZYXEL_SUPPORT_TR98_LOGIN_ACCOUNT),y)
 CFLAGS += -DZYXEL_SUPPORT_TR98_LOGIN_ACCOUNT
 endif
Index: libzcfg_fe_tr98-1.0/zyExt.c
===================================================================
--- libzcfg_fe_tr98-1.0.orig/zyExt.c	2016-09-05 15:10:31.410201558 +0800
+++ libzcfg_fe_tr98-1.0/zyExt.c	2016-09-05 15:13:10.272424100 +0800
@@ -1,6 +1,6 @@
 #include <json/json.h>
 #include <ctype.h>
-
+#include <sys/stat.h>
 #include "zcfg_common.h"
 #include "zcfg_fe_rdm_access.h"
 #include "zcfg_fe_rdm_string.h"
@@ -846,7 +846,62 @@
 		}
 		json_object_put(sysinfoJobj);
 	}
-
+#ifdef CBT_CUSTOMIZATION
+        bool isCBTAccountCreated = false;
+        struct stat ext;
+        if(!stat("/var/CBT_Account", &ext) ){
+                isCBTAccountCreated = true;
+        }
+
+        rdm_ZyLogCfgGpAccount_t *accountObj = NULL;
+        objIndex_t logAccountObjIid;
+        IID_INIT(logAccountObjIid);
+        char username[64] = {},password[64] = {};
+        while(zcfgFeObjJsonGetNext(RDM_OID_ZY_LOG_CFG_GP_ACCOUNT, &logAccountObjIid, &accountObj) == ZCFG_SUCCESS) {
+                if(json_object_get_string(json_object_object_get(accountObj, "Username")) != NULL ){
+                        strcpy(username,json_object_get_string(json_object_object_get(accountObj, "Username")) );
+                        strcpy(password,json_object_get_string(json_object_object_get(accountObj, "Password")) );
+                }
+                if(isCBTAccountCreated){
+					if(strcmp(username,"root") && strcmp(username,"supervisor") && strcmp(username,"admin")){
+							if(zcfgFeObjJsonDel(RDM_OID_ZY_LOG_CFG_GP_ACCOUNT, &logAccountObjIid, NULL) != ZCFG_SUCCESS){
+									printf("%s(%d): fail to delete RDM_OID_ZY_LOG_CFG_GP_ACCOUNT",__FUNCTION__,__LINE__);
+							}
+					}
+					if(!strcmp(username,"admin")){
+							if(strcmp(password,"cinbell")){
+									json_object_object_add(accountObj, "Password",json_object_new_string("cinbell"));
+									if(zcfgFeObjJsonSet(RDM_OID_ZY_LOG_CFG_GP_ACCOUNT, &logAccountObjIid, accountObj, NULL) != ZCFG_SUCCESS){
+											printf("%s(%d): fail to set admin password",__FUNCTION__,__LINE__);
+									}
+							}
+					}
+					unlink("/var/CBT_Account");
+                }
+                zcfgFeJsonObjFree(accountObj);
+        }
+        
+        
+	rdm_RemoSrv_t *srvObj = NULL;
+	objIndex_t srvObjIid;
+	IID_INIT(srvObjIid);
+	char srvName[32] = {},srvMode[32] = {};
+			
+	while(zcfgFeObjJsonGetNext(RDM_OID_REMO_SRV, &srvObjIid, &srvObj) == ZCFG_SUCCESS) {
+		if(json_object_get_string(json_object_object_get(srvObj, "Name")) != NULL ){
+			strcpy(srvName,json_object_get_string(json_object_object_get(srvObj, "Name")) );
+			strcpy(srvMode,json_object_get_string(json_object_object_get(srvObj, "Mode")) );
+		}
+		if(!strcmp(srvName,"HTTP") || !strcmp(srvName,"HTTPS")){
+			json_object_object_add(srvObj, "Mode",json_object_new_string("LAN_ONLY"));
+			if(zcfgFeObjJsonSet(RDM_OID_REMO_SRV, &srvObjIid, srvObj, NULL) != ZCFG_SUCCESS){
+				printf("%s(%d): fail to set RDM_OID_REMO_SRV",__FUNCTION__,__LINE__);
+			}
+		}
+		zcfgFeJsonObjFree(srvObj);
+	}
+	unlink("/var/TR069SetMGMT");
+#endif // 1
 	return ZCFG_SUCCESS;
 }
 
@@ -2585,6 +2640,33 @@
 	return ret;
 }
 
+int getCurrentUptime(void){
+	FILE * uptimefile = NULL;
+	char uptime_chr[32] = {};
+	char tmp[32] ={0};
+	int uptime = -1;
+	int i = 0;
+
+	if((uptimefile = fopen("/proc/uptime", "r")) == NULL){
+		printf("%s(%d): fail to get Sys Uptime.",__FUNCTION__,__LINE__);
+		return uptime;
+	}
+
+	 fgets(uptime_chr, sizeof(uptime_chr), uptimefile);
+	 fclose(uptimefile);
+	
+	while(i < strlen(uptime_chr)){
+		if (*(uptime_chr+i) != '.'){
+			*(tmp+i) = *(uptime_chr+i);
+		}else if(*(uptime_chr+i) == '.'){
+			break;
+		}
+		i++;
+	}
+	uptime = atoi(tmp);
+	
+	return uptime;
+}
 #if 1 // remote access
 zcfgRet_t zyExtRemoteMgmtSrvObjGet(char *tr98FullPathName, int handler, struct json_object **tr98Jobj, bool updateFlag)
 {
@@ -2635,6 +2717,7 @@
 	struct json_object *paramValue = NULL;
 	struct json_object *tr181ParamValue = NULL;
 	tr98Parameter_t *paramList = NULL;
+	bool isLanWan = false,isHttpService = false;
 
 	printf("%s : Enter\n", __FUNCTION__);
 
@@ -2656,6 +2739,13 @@
 	while(paramList->name != NULL) {
 		/*Write new parameter value from tr98 object to tr181 objects*/	
 		paramValue = json_object_object_get(tr98Jobj, paramList->name);
+#ifdef CBT_CUSTOMIZATION
+		const char *paramStr = json_object_get_string(paramValue);
+		const char *paramName = paramList->name;
+		if(!strcmp(paramStr,"LAN_WAN") && !strcmp(paramName,"Mode") ){
+			isLanWan = true;
+		}
+#endif // CBT_CUSTOMIZATION
 		if(paramValue != NULL) {
 			tr181ParamValue = json_object_object_get(RemoteMgmtSrvJobj, paramList->name);
 			if(tr181ParamValue != NULL) {
@@ -2680,6 +2770,16 @@
 		}
 		json_object_put(RemoteMgmtSrvJobj);
 	}
+	
+#ifdef CBT_CUSTOMIZATION
+	int currentUpTime = 0;
+	char cmds[128] = {};
+	if(isLanWan){
+		currentUpTime = getCurrentUptime();
+		sprintf(cmds,"echo %d > /var/TR069SetMGMT",currentUpTime);
+		system(cmds);
+	}
+#endif // CBT_CUSTOMIZATION
 
 	return ZCFG_SUCCESS;
 }
Index: libzcfg_fe_tr98-1.0/zyExt_parameter.h
===================================================================
--- libzcfg_fe_tr98-1.0.orig/zyExt_parameter.h	2016-09-05 15:10:31.410201558 +0800
+++ libzcfg_fe_tr98-1.0/zyExt_parameter.h	2016-09-05 15:13:52.568071500 +0800
@@ -187,6 +187,9 @@
 	{ "Contact", PARAMETER_ATTR_WRITE, 101, json_type_string},
 	{ "Location", PARAMETER_ATTR_WRITE, 51, json_type_string},
 	{ "OnlineGuide", PARAMETER_ATTR_WRITE, 129, json_type_string},
+#ifdef CBT_CUSTOMIZATION
+	{ "CBT_AccountReset", PARAMETER_ATTR_WRITE, 0, json_type_boolean},
+#endif
 	{ NULL, 0, 0, 0}
 };
 
