Index: libzcfg_fe_tr98-1.0/zcfg_fe_msg.c
===================================================================
--- libzcfg_fe_tr98-1.0.orig/zcfg_fe_msg.c	2015-11-05 18:07:17.015418001 +0800
+++ libzcfg_fe_tr98-1.0/zcfg_fe_msg.c	2015-11-05 18:07:26.010727600 +0800
@@ -179,13 +179,13 @@
 		if(attr) {
 			*attr = queriedData->attr;
 			parmAttr = *attr;
-			printf("%s: attr 0x%x\n", __FUNCTION__, *attr);
+			//printf("%s: attr 0x%x\n", __FUNCTION__, *attr);
 		}
 		dataParmName = (char *)(queriedData + 1);
 		strcpy(queriedParmName, dataParmName);
 
-		zcfgLog(ZCFG_LOG_INFO, "%s: queried %u %hu,%hu,%hu,%hu,%hu,%hu %s 0x%x\n", __FUNCTION__, *oid, objIid->idx[0],
-         objIid->idx[1], objIid->idx[2], objIid->idx[3], objIid->idx[4], objIid->idx[5], queriedParmName, parmAttr);
+		//zcfgLog(ZCFG_LOG_INFO, "%s: queried %u %hu,%hu,%hu,%hu,%hu,%hu %s 0x%x\n", __FUNCTION__, *oid, objIid->idx[0],
+        // objIid->idx[1], objIid->idx[2], objIid->idx[3], objIid->idx[4], objIid->idx[5], queriedParmName, parmAttr);
 	}
 
 	free(recvBuf);
Index: libzcfg_fe_tr98-1.0/zcfg_fe_tr98.c
===================================================================
--- libzcfg_fe_tr98-1.0.orig/zcfg_fe_tr98.c	2015-11-05 18:07:17.419418014 +0800
+++ libzcfg_fe_tr98-1.0/zcfg_fe_tr98.c	2015-11-05 18:07:15.763141500 +0800
@@ -800,7 +800,7 @@
 	return ZCFG_SUCCESS;
 #endif
 
-	zcfgLog(ZCFG_LOG_INFO, "%s\n", __FUNCTION__);
+	//zcfgLog(ZCFG_LOG_INFO, "%s\n", __FUNCTION__);
 	//printf("Enter %s()\n", __FUNCTION__);
 
 	if(!tr98PathName || !tr181PathName || strlen(tr98PathName) == 0)
@@ -818,12 +818,12 @@
 
 	IID_INIT(tr181ObjIid);
 	if((ret = zcfgObjMappingGet(ZCFG_MSG_REQUEST_TR98_OBJMAPPING, nameSeqNum, &objIid, &oid, &tr181ObjIid)) != ZCFG_SUCCESS) {
-		zcfgLog(ZCFG_LOG_INFO, "%s: 98To181 mapping query fail\n", __FUNCTION__);
+		//zcfgLog(ZCFG_LOG_INFO, "%s: 98To181 mapping query fail\n", __FUNCTION__);
 		return ret;
 	}
 
 	if((ret = zcfgFeObjIdToName(oid, &tr181ObjIid, queriedTr181PathName)) != ZCFG_SUCCESS) {
-		zcfgLog(ZCFG_LOG_INFO, "%s: ObjId to Name fail\n", __FUNCTION__);
+		//zcfgLog(ZCFG_LOG_INFO, "%s: ObjId to Name fail\n", __FUNCTION__);
 		return ret;	
 	}
 
@@ -890,7 +890,7 @@
 	objIndex_t objIid;
 	tr98NameObj_t *entry = NULL;
 
-	zcfgLog(ZCFG_LOG_INFO, "%s\n", __FUNCTION__);
+	//zcfgLog(ZCFG_LOG_INFO, "%s\n", __FUNCTION__);
 
 	if(!tr98PathName || !seqnum || !tr98ObjIid || (strlen(tr98PathName) <= 0))
 		return ZCFG_INTERNAL_ERROR;
@@ -944,7 +944,7 @@
 	//zcfgLog(ZCFG_LOG_INFO, "%s: parsed, %s\n", __FUNCTION__, pathName);
 
 	if(level >= SUPPORTED_INDEX_LEVEL) {
-		zcfgLog(ZCFG_LOG_INFO, "%s: Object index error\n", __FUNCTION__);
+		//zcfgLog(ZCFG_LOG_INFO, "%s: Object index error\n", __FUNCTION__);
 		return ZCFG_NO_SUCH_OBJECT;
 	}
 
@@ -956,8 +956,8 @@
 	if(!IS_SEQNUM_RIGHT((entry->nameSeqNum)))
 		return ZCFG_NO_SUCH_OBJECT;
 
-	zcfgLog(ZCFG_LOG_INFO, "%s: seqnum, %u %hu,%hu,%hu,%hu,%hu,%hu\n", __FUNCTION__, entry->nameSeqNum,
-		objIid.idx[0], objIid.idx[1], objIid.idx[2], objIid.idx[3], objIid.idx[4], objIid.idx[5]);
+	//zcfgLog(ZCFG_LOG_INFO, "%s: seqnum, %u %hu,%hu,%hu,%hu,%hu,%hu\n", __FUNCTION__, entry->nameSeqNum,
+	//	objIid.idx[0], objIid.idx[1], objIid.idx[2], objIid.idx[3], objIid.idx[4], objIid.idx[5]);
 
 	*seqnum = (zcfg_name_t)entry->nameSeqNum;
 	memcpy(tr98ObjIid, &objIid, sizeof(objIndex_t));
@@ -1859,7 +1859,7 @@
 	int handler = 0;
 	tr98Parameter_t *paramList = NULL;
 
-	zcfgLog(ZCFG_LOG_INFO, "%s\n", __FUNCTION__);
+	//zcfgLog(ZCFG_LOG_INFO, "%s\n", __FUNCTION__);
 
 	if((ret = zcfgFeTr98ClassNameGet((char *)tr98ObjName, tr98ClassName)) != ZCFG_SUCCESS) {
 		return ret;
@@ -1905,7 +1905,7 @@
 	IID_INIT(tr98ObjIid);
 	if(zcfgFe98NameToSeqnum((const char *)tr98ObjName, &seqnum, &tr98ObjIid) == ZCFG_SUCCESS) {
 		if((ret = zcfgFeParmAttrQry(seqnum, &tr98ObjIid, name, &oid, &objIid, queriedParmName, &attr)) != ZCFG_SUCCESS) {
-			zcfgLog(ZCFG_LOG_INFO, "%s: parm attr query fail, %u %s\n", __FUNCTION__, seqnum, name);
+			//zcfgLog(ZCFG_LOG_INFO, "%s: parm attr query fail, %u %s\n", __FUNCTION__, seqnum, name);
 			return ret;
 			//printf("%s: parm attr query fail, %u %s\n", __FUNCTION__, seqnum, name);
 			//return 0;
