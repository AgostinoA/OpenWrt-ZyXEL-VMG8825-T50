Index: libzcfg_fe_tr98-1.0/lanDev.c
===================================================================
--- libzcfg_fe_tr98-1.0.orig/lanDev.c	2018-09-05 19:56:12.970279505 +0800
+++ libzcfg_fe_tr98-1.0/lanDev.c	2018-09-05 19:56:12.986279505 +0800
@@ -3222,6 +3222,8 @@
 	while(paramList->name != NULL) {
 		paramValue = json_object_object_get(dhcpOptJobj, paramList->name);
 		if(paramValue != NULL) {
+			json_object_object_add(*tr98Jobj, paramList->name, JSON_OBJ_COPY(paramValue));
+#if 0
 			if(!strcmp(paramList->name, "Value")){
 				const char *paramObjStr = json_object_get_string(paramValue);
 				int paramObjStrLen = strlen(paramObjStr);
@@ -3232,6 +3234,7 @@
 			}else{
 				json_object_object_add(*tr98Jobj, paramList->name, JSON_OBJ_COPY(paramValue));
 			}
+#endif
 			paramList++;
 			continue;
 		}
@@ -3278,16 +3281,20 @@
 
 	printf("%s: %s\n", __FUNCTION__, tr181Obj);
 	tr98Jobj = zcfgFeRetrieveSpv(tr98FullPathName);
+#if 0
 	char optValue[256] = {0};
 	char *decodeOptValue = NULL;
 	int decodeOptValueLen = 0;
 	const char *valueStr = json_object_get_string(json_object_object_get(tr98Jobj, "Value"));
 	if(valueStr){
+
+		printf("%s: spv value: %s\n", __FUNCTION__, valueStr);
 		strncpy(optValue, valueStr, sizeof(optValue)-1);
+		printf("%s: decode value: %s\n", __FUNCTION__, optValue);
 		decodeOptValue = base64_decode((unsigned char *)optValue, &decodeOptValueLen);
 		printf("%s: base64 decoded: %s\n", __FUNCTION__, decodeOptValueLen ? decodeOptValue : "null" );
 	}
-
+#endif
 	dhcpOptJobj = json_object_new_object();
 
 	paramList = tr98Obj[handler].parameter;
@@ -3300,8 +3307,13 @@
 		}
 
 		/*Write value from Config to Device.DHCPv4.Server.Pool.i.Option.i*/
-		if(!strcmp(paramList->name, "Value") && decodeOptValueLen){
-			json_object_object_add(dhcpOptJobj, paramList->name, json_object_new_string(decodeOptValue));
+		if(!strcmp(paramList->name, "Value")){
+			const char *valueStr = json_object_get_string(paramValue);
+			if(strlen(valueStr) > 255){
+				ret = ZCFG_INVALID_PARAM_VALUE;
+			}else{
+				json_object_object_add(dhcpOptJobj, paramList->name, JSON_OBJ_COPY(paramValue));
+			}
 		}else{
 			json_object_object_add(dhcpOptJobj, paramList->name, JSON_OBJ_COPY(paramValue));
 		}
@@ -3309,8 +3321,13 @@
 		paramList++;
 	} /*Edn while*/
 
-	if(decodeOptValue)
-		free(decodeOptValue);
+	//if(decodeOptValue)
+		//free(decodeOptValue);
+
+	if(ret != ZCFG_SUCCESS){
+		json_object_put(dhcpOptJobj);
+		return ret;
+	}
 
 	/*Set DHCPv4.Server.Pool.i.Option.i */
 	if(multiJobj){
@@ -4064,6 +4081,8 @@
 	while(parmList->name){
 		paramObj = json_object_object_get(dhcp4SvrOpt, parmList->name);
 		if(paramObj){
+			json_object_object_add(*tr98Jobj, parmList->name, JSON_OBJ_COPY(paramObj));
+#if 0
 			if(!strcmp(parmList->name, "Value")){
 				const char *paramObjStr = json_object_get_string(paramObj);
 				int paramObjStrLen = strlen(paramObjStr);
@@ -4074,6 +4093,7 @@
 			}else{
 				json_object_object_add(*tr98Jobj, parmList->name, JSON_OBJ_COPY(paramObj));
 			}
+#endif
 		}
 		parmList++;
 	}
@@ -4083,7 +4103,7 @@
 }
 
 //InternetGatewayDevice.LANDevice.{i}.LANHostConfigManagement.DHCPConditionalServingPool.{i}.DHCPOption.{i}.
-zcfgRet_t lanDhcpCondServPoolOptObjSet(char *tr98FullPathName, int handler, struct json_object *tr98Jobj, struct json_object *multiJobj)
+zcfgRet_t lanDhcpCondServPoolOptObjSet(char *tr98FullPathName, int handler, struct json_object *tr98Jobj, struct json_object *multiJobj, char *paramfault)
 {
 	char mappingPathName[128] = {0};
 
@@ -4110,6 +4130,8 @@
 	}
 
 	tr98Jobj = zcfgFeRetrieveSpv(tr98FullPathName);
+
+#if 0
 	char optValue[256] = {0};
 	char *decodeOptValue = NULL;
 	int decodeOptValueLen = 0;
@@ -4119,23 +4141,33 @@
 		decodeOptValue = base64_decode((unsigned char *)optValue, &decodeOptValueLen);
 		printf("%s: base64 decoded: %s\n", __FUNCTION__, decodeOptValueLen ? decodeOptValue : "null" );
 	}
-
+#endif
 	dhcp4SvrOpt = json_object_new_object();
 
 	while(parmList->name){
 		paramObj = json_object_object_get(tr98Jobj, parmList->name);
 		if(paramObj){
-			if(!strcmp(parmList->name, "Value") && decodeOptValueLen){
-				json_object_object_add(dhcp4SvrOpt, parmList->name, json_object_new_string(decodeOptValue));
+			if(!strcmp(parmList->name, "Value")){
+				const char *valueStr = json_object_get_string(paramObj);
+				if(strlen(valueStr) > 255){
+					rst = ZCFG_INVALID_PARAM_VALUE;
+				}else
+					json_object_object_add(dhcp4SvrOpt, parmList->name, JSON_OBJ_COPY(paramObj));
 			}else{
-			json_object_object_add(dhcp4SvrOpt, parmList->name, JSON_OBJ_COPY(paramObj));
+				json_object_object_add(dhcp4SvrOpt, parmList->name, JSON_OBJ_COPY(paramObj));
 			}
 		}
 		parmList++;
 	}
 
-	if(decodeOptValue)
-		free(decodeOptValue);
+	//if(decodeOptValue)
+	//	free(decodeOptValue);
+
+	if(rst != ZCFG_SUCCESS){
+		json_object_put(dhcp4SvrOpt);
+		return rst;
+	}
+
 
 	if(multiJobj){
 		zcfgFeJsonMultiObjAppend(RDM_OID_DHCPV4_SRV_POOL_OPT, &objIid, multiJobj, dhcp4SvrOpt);
Index: libzcfg_fe_tr98-1.0/lanDev_parameter.h
===================================================================
--- libzcfg_fe_tr98-1.0.orig/lanDev_parameter.h	2018-09-05 19:56:12.954279505 +0800
+++ libzcfg_fe_tr98-1.0/lanDev_parameter.h	2018-09-05 19:56:12.986279505 +0800
@@ -156,8 +156,8 @@
 tr98Parameter_t para_DhcpOpt[] = {
 	{ "Enable", PARAMETER_ATTR_WRITE, 0, json_type_boolean},
 	{ "Tag", PARAMETER_ATTR_WRITE, 0, json_type_uint32},
-	//{ "Value", PARAMETER_ATTR_WRITE, json_type_base64},
-	{ "Value", PARAMETER_ATTR_WRITE, 256, json_type_string},
+	{ "Value", PARAMETER_ATTR_WRITE, 256+(256/2), json_type_base64},
+	//{ "Value", PARAMETER_ATTR_WRITE, 256, json_type_string},
 	{ NULL, 0, 0, 0}
 };
 
@@ -202,7 +202,8 @@
 tr98Parameter_t para_DhcpCondServPoolDhcpOpt[] = {	
 	{ "Enable", PARAMETER_ATTR_WRITE, 0, json_type_boolean},	
 	{ "Tag", PARAMETER_ATTR_WRITE, 0, json_type_uint32},	
-	{ "Value", PARAMETER_ATTR_WRITE, 256, json_type_string},
+	//{ "Value", PARAMETER_ATTR_WRITE, 256, json_type_string},
+	{ "Value", PARAMETER_ATTR_WRITE, 256+(256/2), json_type_base64},
 	{ NULL, 0, 0, 0}
 };
 
Index: libzcfg_fe_tr98-1.0/zcfg_fe_tr98.c
===================================================================
--- libzcfg_fe_tr98-1.0.orig/zcfg_fe_tr98.c	2018-09-05 19:56:12.978279505 +0800
+++ libzcfg_fe_tr98-1.0/zcfg_fe_tr98.c	2018-09-05 19:56:12.986279505 +0800
@@ -2481,6 +2481,64 @@
 	return outputStrLen;
 }
 
+
+bool base64Char(char bs64)
+{
+	bool ret = true;
+
+
+	if (bs64 >= 0x30 && bs64 < 0x3a)
+		return ret;
+
+	else if (bs64 >= 0x41 && bs64 <= 0x5a)
+		return ret;
+
+	else if (bs64 >= 0x61 && bs64 <= 122)
+		return ret;
+
+	else if (bs64 == '+' || bs64 == '=' || bs64 == '/')
+		return ret;
+
+	else return false;
+}
+
+char *base64StrParticularCharHandle(const char *base64Str)
+{
+	char *modifiedStr = NULL, *base64StrP;
+	int modified = 0, running = 0;
+	int n1 = 0, p1 = 0, base64StrLen;
+	bool itsbase64Char;
+
+	if(base64Str && (base64StrLen = strlen(base64Str))){
+		modifiedStr = (char *)malloc(base64StrLen+1);
+		memset(modifiedStr, 0, base64StrLen+1);
+		running = 1;
+		base64StrP = base64Str;
+	}else{
+		return NULL;
+	}
+
+
+	while(running){
+
+		itsbase64Char = base64Char(*(base64StrP+p1));
+
+		*(modifiedStr+n1) = itsbase64Char ? *(base64StrP+p1) : *(modifiedStr+n1);
+		n1 = itsbase64Char ? n1+1 : n1;
+
+		p1++;
+		running = (*(base64StrP+p1) == '\0') ? 0 : 1;
+
+	}
+
+	if(n1 != base64StrLen){
+		return modifiedStr;
+	}else{
+		free(modifiedStr);
+		return NULL;
+	}
+}
+
 char *base64_encode(unsigned char *input, int length)
 {
 	BIO *bmem, *b64;
@@ -3340,6 +3398,35 @@
 		case json_type_ulong:
 			setValue = json_object_new_int((uint32_t)atoi(value));
 			break;
+		case json_type_base64:
+			{
+				char *modifiedValue = base64StrParticularCharHandle((const char *)value);
+				char *optValue = NULL;
+				int decodeOptValueLen = 0;
+				if(modifiedValue){
+					optValue = modifiedValue;
+				}else{
+					int valueLen = strlen(value);
+					if(!valueLen){
+						setValue = json_object_new_string("");
+						break;
+					}
+					optValue = malloc(valueLen+1);
+					memset(optValue, 0, valueLen+1);
+					strncpy(optValue, value, valueLen);
+				}
+				char *decodeOptValue = base64_decode((unsigned char *)optValue, &decodeOptValueLen);
+				printf("%s: base64 decoded: %s\n", __FUNCTION__, decodeOptValue ? decodeOptValue : "null" );
+
+				setValue = json_object_new_string(decodeOptValue);
+
+				if(optValue)
+					free(optValue);
+
+				if(decodeOptValue)
+					free(decodeOptValue);
+			}
+			break;
 		case json_type_string:
 			setValue = json_object_new_string(value);
 			break;
@@ -4482,7 +4569,8 @@
 	}
 	
 	type = paramList->type;
-	if(type == json_type_string) {
+	if(type == json_type_string || type == json_type_base64)
+	{
 		if(strlen(value) >= paramList->len) {
 			return ZCFG_INVALID_PARAM_VALUE_LENGTH;
 		}
Index: libzcfg_fe_tr98-1.0/zcfg_fe_tr98.h
===================================================================
--- libzcfg_fe_tr98-1.0.orig/zcfg_fe_tr98.h	2018-09-05 19:56:12.978279505 +0800
+++ libzcfg_fe_tr98-1.0/zcfg_fe_tr98.h	2018-09-05 19:56:12.986279505 +0800
@@ -262,6 +262,8 @@
 int charHex2Int(char );
 int hexStr2AscStr(const char *, char *);
 int ascStr2HexStr(const char *, char *);
+bool base64Char(char );
+char *base64StrParticularCharHandle(const char *);
 #ifdef ZCFG_TR181_RPC_OBJECT_HANDLE_ROUT
 void zcfgFeTr181SpvHandleRoutInit();
 zcfgRet_t zcfgFeMultiObjJsonSpvHandleRout(struct json_object *multiJobj, char *faultString);
Index: libzcfg_fe_tr98-1.0/wanDev.c
===================================================================
--- libzcfg_fe_tr98-1.0.orig/wanDev.c	2018-09-05 19:56:12.922279505 +0800
+++ libzcfg_fe_tr98-1.0/wanDev.c	2018-09-05 20:07:16.426282711 +0800
@@ -4884,11 +4884,13 @@
 				} 
                 *b = 0;
 				
-				encodeStr = base64_encode(tmpbuf, strlen(tmpbuf));
-				json_object_object_add(*tr98Jobj, paramList->name, json_object_new_string(encodeStr));
-				free(encodeStr);
+				//encodeStr = base64_encode(tmpbuf, strlen(tmpbuf));
+				//json_object_object_add(*tr98Jobj, paramList->name, json_object_new_string(encodeStr));
+				//free(encodeStr);
+				json_object_object_add(*tr98Jobj, paramList->name, json_object_new_string(tmpbuf));
 			}
 			else if(!strcmp(paramList->name, "Value")){
+#if 0
 				const char *paramValueStr = NULL;
 				char *encodeStr = NULL;
 				
@@ -4896,6 +4898,8 @@
 				encodeStr = base64_encode(paramValueStr, strlen(paramValueStr));
 				json_object_object_add(*tr98Jobj, paramList->name, json_object_new_string(encodeStr));
 				free(encodeStr);
+#endif
+				json_object_object_add(*tr98Jobj, paramList->name, JSON_OBJ_COPY(paramValue));
 			}
 			else{
 				json_object_object_add(*tr98Jobj, paramList->name, JSON_OBJ_COPY(paramValue));
@@ -4981,7 +4985,21 @@
 					if((paramValueStr != NULL) && (paramValueStr[0] != '\0')
 						&& (strlen(paramValueStr) != 0) && (paramValueStr[0] != ' '))
 					{
-						decodeStr = base64_decode( paramValueStr, &decodeStr_len);
+						if(json_object_get_type(paramValue) == json_type_base64){
+							decodeStr = base64_decode( paramValueStr, &decodeStr_len);
+						}else{
+							int paramValueStrLen = strlen(paramValueStr);
+							decodeStr = malloc(paramValueStrLen+1);
+							strncpy(decodeStr, paramValueStr, paramValueStrLen);
+							*(decodeStr+paramValueStrLen) = '\0';
+							decodeStr_len = paramValueStrLen;
+						}
+
+						if(decodeStr_len > 125){
+							free(decodeStr);
+							return ZCFG_INVALID_PARAM_VALUE;
+						}
+
 						if ((decodeStr != NULL) && (decodeStr != '\0') && 
 							 (decodeStr_len != 0))
 						{
@@ -4995,7 +5013,6 @@
 							if (dhcpOptStrlen > 1)
 								dhcpOptStrlen = dhcpOptStrlen/2;
 						}
-							
 					}
 					char hexStrlen[4]={0} ;
 					//prefix length of 2 digits hex numbers
@@ -5019,13 +5036,15 @@
 					
 					paramValueStr = json_object_get_string(paramValue);
 					
-					if((paramValueStr != NULL) && (paramValueStr[0] != '\0')
+					if((json_object_get_type(paramValue) == json_type_base64) && (paramValueStr != NULL) && (paramValueStr[0] != '\0')
 						&& (strlen(paramValueStr) != 0) && (paramValueStr[0] != ' '))
 					{
 						decodeStr = base64_decode( paramValueStr, &decodeStr_len);
 						json_object_object_add(optObj, paramList->name, json_object_new_string(decodeStr));
+						free(decodeStr);
+					}else{
+						json_object_object_add(optObj, paramList->name, JSON_OBJ_COPY(paramValue));
 					}
-					free(decodeStr);
 				}
 				else if(paramValue != NULL) {
 					json_object_object_add(optObj, paramList->name, JSON_OBJ_COPY(paramValue));
Index: libzcfg_fe_tr98-1.0/wanDev_parameter.h
===================================================================
--- libzcfg_fe_tr98-1.0.orig/wanDev_parameter.h	2018-09-05 19:56:12.222279501 +0800
+++ libzcfg_fe_tr98-1.0/wanDev_parameter.h	2018-09-05 20:08:46.918283149 +0800
@@ -496,10 +496,12 @@
 	{ NULL, 0, 0, 0}
 };
 
+
 tr98Parameter_t para_SentDhcpOpt[] = {
 	{ "Enable", PARAMETER_ATTR_WRITE, 0, json_type_boolean},
 	{ "Tag", PARAMETER_ATTR_WRITE, 0, json_type_uint32},
-	{ "Value", PARAMETER_ATTR_WRITE, 256, json_type_string},
+	//{ "Value", PARAMETER_ATTR_WRITE, 256, json_type_string},
+	{ "Value", PARAMETER_ATTR_WRITE, 256+(256/2), json_type_base64},
 	{ NULL, 0, 0, 0}
 };
 
@@ -507,7 +509,8 @@
 	{ "Enable", PARAMETER_ATTR_WRITE, 0, json_type_boolean},
 	{ "Order", PARAMETER_ATTR_WRITE, 0, json_type_uint32},
 	{ "Tag", PARAMETER_ATTR_WRITE, 0, json_type_uint32},
-	{ "Value", PARAMETER_ATTR_READONLY, 256, json_type_uint32},
+	//{ "Value", PARAMETER_ATTR_READONLY, 256, json_type_uint32},
+	{ "Value", PARAMETER_ATTR_READONLY, 256+(256/2), json_type_base64},
 	{ NULL, 0, 0, 0}
 };
 
