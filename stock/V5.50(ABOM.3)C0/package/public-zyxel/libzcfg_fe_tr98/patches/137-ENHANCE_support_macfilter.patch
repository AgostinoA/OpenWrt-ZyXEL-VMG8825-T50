Index: libzcfg_fe_tr98-1.0/zcfg_fe_tr98.c
===================================================================
--- libzcfg_fe_tr98-1.0.orig/zcfg_fe_tr98.c	2015-06-08 17:56:34.164177587 +0800
+++ libzcfg_fe_tr98-1.0/zcfg_fe_tr98.c	2015-06-08 17:59:06.086539209 +0800
@@ -227,6 +227,8 @@
 {e_TR98_LOG_SETTING             , &tr98Obj[e_TR98_LOG_SETTING             -e_TR98_START]},
 {e_TR98_LOG_CLASSIFY            , &tr98Obj[e_TR98_LOG_CLASSIFY            -e_TR98_START]},
 {e_TR98_LOG_CATEGORY	     , &tr98Obj[e_TR98_LOG_CATEGORY	     -e_TR98_START]},
+{e_TR98_MACFILTER	     , &tr98Obj[e_TR98_MACFILTER	     -e_TR98_START]},
+{e_TR98_MACFILTER_WHITELIST	     , &tr98Obj[e_TR98_MACFILTER_WHITELIST	     -e_TR98_START]},
 #endif
 #if OBSOLETED
 #else
Index: libzcfg_fe_tr98-1.0/zcfg_fe_tr98_handle.h
===================================================================
--- libzcfg_fe_tr98-1.0.orig/zcfg_fe_tr98_handle.h	2015-06-08 17:56:34.036179197 +0800
+++ libzcfg_fe_tr98-1.0/zcfg_fe_tr98_handle.h	2015-06-08 17:58:56.933906609 +0800
@@ -188,6 +188,9 @@
 #define TR98_FIREWALL_CHAIN_RULE      "InternetGatewayDevice.Firewall.Chain.i.Rule.i"
 #define TR98_SCHEDULE                 "InternetGatewayDevice.X_ZYXEL_EXT.Schedule.i"
 
+#define TR98_MACFILTER		  		  "InternetGatewayDevice.X_ZYXEL_EXT.MacFilter"
+#define TR98_MACFILTER_WHITELIST	  "InternetGatewayDevice.X_ZYXEL_EXT.MacFilter.WhiteList.i"
+
 #ifdef ONECONNECT
 #define TR98_ONECONNECT_EXT            	   "InternetGatewayDevice.LANDevice.i.Hosts.Host.i.X_ZYXEL_EXT"
 //#define TR98_ONECONNECT_SPEEDTEST          "InternetGatewayDevice.X_ZYXEL_EXT.SpeedTestInfo"
@@ -387,6 +390,8 @@
 {TR98_LOG_SETTING,                    ATTR_INDEX_CREA,              para_LogSetting,              zyExtLogSettingObjGet,         zyExtLogSettingObjSet,        NULL,             NULL,            NULL, NULL, NULL},
 {TR98_LOG_CLASSIFY,		ATTR_INDEX_CREA,		para_LogClassify,		zyExtLogClassifyObjGet,		 NULL,					 NULL,				NULL,			NULL},
 {TR98_LOG_CATEGORY,                    ATTR_INDEX_CREA,              para_LogCategory,              zyExtLogCategoryObjGet,         zyExtLogCategoryObjSet,        NULL,             NULL,            NULL, NULL, NULL},
+{TR98_MACFILTER,		    0, 	para_MacFilter,		zyExtMacFilterObjGet,		 zyExtMacFilterObjSet,		   NULL,             NULL,            NULL},
+{TR98_MACFILTER_WHITELIST,		    ATTR_INDEX_CREA, 	para_MacFilter_WhiteList,		zyExtMacFilterWhiteListObjGet,		 zyExtMacFilterWhiteListObjSet,		   zyExtMacFilterWhiteListObjAdd,             zyExtMacFilterWhiteListObjDel,            NULL, NULL, NULL},
 #endif
 #if OBSOLETED
 #else
Index: libzcfg_fe_tr98-1.0/zyExt.c
===================================================================
--- libzcfg_fe_tr98-1.0.orig/zyExt.c	2015-06-08 17:56:33.968180051 +0800
+++ libzcfg_fe_tr98-1.0/zyExt.c	2015-06-08 17:58:32.549316195 +0800
@@ -1,4 +1,5 @@
 #include <json/json.h>
+#include <ctype.h>
 
 #include "zcfg_common.h"
 #include "zcfg_fe_rdm_access.h"
@@ -1146,3 +1147,503 @@
 
 	return ZCFG_SUCCESS;
 }
+
+/* InternetGatewayDevice.X_ZYXEL_EXT.MacFilter */
+zcfgRet_t zyExtMacFilterObjGet(char *tr98FullPathName, int handler, struct json_object **tr98Jobj, bool updateFlag)
+{
+	zcfgRet_t ret;
+	//char tr181Obj[128] = {0};
+	//char mapObj[128] = {0};
+	uint32_t  macFilterOid = 0;
+	objIndex_t macFilterIid;
+	struct json_object *macFilterObj = NULL;
+	struct json_object *paramValue = NULL;
+	tr98Parameter_t *paramList = NULL;
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+
+	IID_INIT(macFilterIid);
+	/*if(zcfgFe98To181MappingNameGet(tr98FullPathName, mapObj) != ZCFG_SUCCESS) {
+		printf("%d:Get %s failed\n", __LINE__, tr98FullPathName);
+		return ZCFG_INVALID_OBJECT;
+	}*/
+	//snprintf(tr181Obj, sizeof(tr181Obj),"Device.%s", mapObj);
+	macFilterOid = RDM_OID_ZY_MAC_FILTER;
+
+	if((ret = feObjJsonGet(macFilterOid, &macFilterIid, &macFilterObj, updateFlag)) != ZCFG_SUCCESS)
+		return ret;	
+
+	/*fill up tr98 firewall object*/
+	*tr98Jobj = json_object_new_object();
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		paramValue = json_object_object_get(macFilterObj, paramList->name);
+		if(paramValue != NULL) {
+			json_object_object_add(*tr98Jobj, paramList->name, JSON_OBJ_COPY(paramValue));
+			paramList++;
+			continue;
+		}
+		/*Not defined in tr181, give it a default value*/
+		zcfgLog(ZCFG_LOG_DEBUG, "Can't find parameter %s in TR181\n", paramList->name);
+		paramList++;
+	}
+	json_object_put(macFilterObj);
+	return ZCFG_SUCCESS;
+}
+
+/* InternetGatewayDevice.X_ZYXEL_EXT.MacFilter */
+zcfgRet_t zyExtMacFilterObjSet(char *tr98FullPathName, int handler, struct json_object *tr98Jobj, struct json_object *multiJobj, char *paramfault)
+{
+	zcfgRet_t ret;
+	//char tr181Obj[128] = {0};
+	//char mapObj[128] = {0};
+	uint32_t  macFilterOid = 0;
+	objIndex_t macFilterIid;
+	struct json_object *macFilterObj = NULL;
+	struct json_object *paramValue = NULL;
+	struct json_object *tr181ParamValue = NULL;
+	struct json_object *tmpObj = NULL;
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+
+	IID_INIT(macFilterIid);
+	/*if(zcfgFe98To181MappingNameGet(tr98FullPathName, mapObj) != ZCFG_SUCCESS) {
+		printf("%d:Get %s failed\n", __LINE__, tr98FullPathName);
+		return ZCFG_INVALID_OBJECT;
+	}*/
+	
+	//snprintf(tr181Obj, sizeof(tr181Obj),"Device.%s", mapObj);
+	macFilterOid = RDM_OID_ZY_MAC_FILTER;
+	if((ret = zcfgFeObjJsonGet(macFilterOid, &macFilterIid, &macFilterObj)) != ZCFG_SUCCESS)
+		return ret;
+	
+	if(multiJobj){
+		tmpObj = macFilterObj;
+		macFilterObj = NULL;
+		macFilterObj = zcfgFeJsonMultiObjAppend(macFilterOid, &macFilterIid, multiJobj, tmpObj);
+	}
+
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		/*Write new parameter value from tr98 object to tr181 objects*/
+		paramValue = json_object_object_get(tr98Jobj, paramList->name);
+		if(paramValue != NULL) {
+			tr181ParamValue = json_object_object_get(macFilterObj, paramList->name);
+			if(tr181ParamValue != NULL) {
+				json_object_object_add(macFilterObj, paramList->name, JSON_OBJ_COPY(paramValue));
+				paramList++;
+				continue;
+			}
+		}
+		paramList++;	
+	} /*Edn while*/
+	
+	/*Set */
+	if(multiJobj){
+		json_object_put(tmpObj);
+	}
+	else{
+		if((ret = zcfgFeObjJsonSet(macFilterOid, &macFilterIid, macFilterObj, NULL)) != ZCFG_SUCCESS ) {
+			json_object_put(macFilterObj);
+			return ret;
+		}
+		json_object_put(macFilterObj);
+	}
+	
+	return ZCFG_SUCCESS;
+}
+
+#if 0
+zcfgRet_t zyExtMacFilterObjNotify(char *tr98ObjName, char *tr181ParamName, struct json_object *tr181ParamVal, int handler, struct json_object **tr98NotifyInfo)
+{
+	bool found = false;
+	char tr98Notify[256] = "";
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+
+	if(*tr98NotifyInfo == NULL) {
+		*tr98NotifyInfo = json_object_new_object();
+	}
+
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		if(strcmp(tr181ParamName, paramList->name) == 0) {
+			found = true;
+			sprintf(tr98Notify, "%s.%s", tr98ObjName, paramList->name);
+			break;
+		}
+		paramList++;
+	}
+
+	if(found) {
+		json_object_object_add(*tr98NotifyInfo, tr98Notify, JSON_OBJ_COPY(tr181ParamVal));
+	}
+
+	return ZCFG_SUCCESS;
+}
+
+int zyExtMacFilterObjAttrGet(char *tr98FullPathName, int handler, char *paramName)
+{
+	char tr181Obj[128] = {0};
+	char mapObj[128] = {0};
+	uint32_t  devInfoOid = 0;
+	objIndex_t devInfoIid;
+	int attrValue = ZCFG_NO_SUCH_PARAMETER;
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+
+	if(zcfgFe98To181MappingNameGet(tr98FullPathName, mapObj) != ZCFG_SUCCESS) {
+		return ZCFG_INVALID_OBJECT;
+	}
+	
+
+	IID_INIT(devInfoIid);
+	snprintf(tr181Obj, sizeof(tr181Obj),"Device.%s", mapObj);
+	devInfoOid = zcfgFeObjNameToObjId(tr181Obj, &devInfoIid);
+		
+
+	/*fill up tr98 devInfo object*/
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		if(strcmp(paramList->name, paramName)){
+			paramList++;
+			continue;
+		}
+		
+		/*special case*/
+
+		attrValue = zcfgFeParamAttrGetByName(devInfoOid, paramList->name);
+		if(attrValue < 0 ) {
+			attrValue = 0;
+		}
+		break;
+	}
+	
+	return attrValue;
+}
+
+zcfgRet_t zyExtMacFilterObjAttrSet(char *tr98FullPathName, int handler, char *paramName, int newNotify, struct json_object *multiAttrJobj)
+{
+	zcfgRet_t ret;
+	char tr181Obj[128] = {0};
+	char mapObj[128] = {0};
+	uint32_t  devInfoOid = 0;
+	objIndex_t devInfoIid;
+	int attrValue = 0;
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+	if(zcfgFe98To181MappingNameGet(tr98FullPathName, mapObj) != ZCFG_SUCCESS) {
+		return ZCFG_INVALID_OBJECT;
+	}
+	
+
+	IID_INIT(devInfoIid);
+	snprintf(tr181Obj, sizeof(tr181Obj),"Device.%s", mapObj);
+	devInfoOid = zcfgFeObjNameToObjId(tr181Obj, &devInfoIid);
+
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		/*find the matched parameter*/
+		if(strcmp(paramList->name, paramName)){
+			paramList++;
+			continue;
+		}
+		/*special case*/
+		
+		attrValue = zcfgFeParamAttrGetByName(devInfoOid, paramList->name);
+		if(attrValue < 0) {
+			ret = ZCFG_INVALID_ARGUMENTS;
+			break;
+		}
+
+		/*Write new parameter attribute from tr98 object to tr181 objects*/
+		attrValue = zcfgFeNotifyAttrValSet(attrValue, newNotify);
+		ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, paramList->name, attrValue);
+		if( ret != ZCFG_SUCCESS){
+			zcfgLog(ZCFG_LOG_ERR, "%s(): set %d %s attribute fail\n", __FUNCTION__, devInfoOid, paramList->name);
+		}
+		break;
+
+	} /*Edn while*/
+	
+	return ret;
+}
+#endif
+
+/* InternetGatewayDevice.X_ZYXEL_EXT.MacFilter.WhiteList.i */
+zcfgRet_t zyExtMacFilterWhiteListObjGet(char *tr98FullPathName, int handler, struct json_object **tr98Jobj, bool updateFlag)
+{
+	zcfgRet_t ret;
+	char levelObjFormate[128] = "InternetGatewayDevice.X_ZYXEL_EXT.MacFilter.WhiteList.%hhu";
+	uint32_t  levelOid = 0;
+	objIndex_t levelIid;
+	struct json_object *levelObj = NULL;
+	struct json_object *paramValue = NULL;
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+	IID_INIT(levelIid);
+	levelIid.level = 1;
+	if(sscanf(tr98FullPathName, levelObjFormate, levelIid.idx) != 1) return ZCFG_INVALID_OBJECT;	
+	levelOid = RDM_OID_ZY_MAC_FILTER_WHITE_LIST;
+
+	if((ret = feObjJsonGet(levelOid, &levelIid, &levelObj, updateFlag)) != ZCFG_SUCCESS)
+		return ret;
+
+	/*fill up tr98 level object*/
+	*tr98Jobj = json_object_new_object();
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		paramValue = json_object_object_get(levelObj, paramList->name);
+		if(paramValue != NULL) {
+			json_object_object_add(*tr98Jobj, paramList->name, JSON_OBJ_COPY(paramValue));
+			paramList++;
+			continue;
+		}
+		/*Not defined in tr181, give it a default value*/
+		zcfgLog(ZCFG_LOG_DEBUG, "Can't find parameter %s in TR181\n", paramList->name);
+		paramList++;
+	}
+	json_object_put(levelObj);
+	return ZCFG_SUCCESS;
+}
+
+zcfgRet_t zyExtMacFilterWhiteListObjSet(char *tr98FullPathName, int handler, struct json_object *tr98Jobj, struct json_object *multiJobj, char *paramfault)
+{
+	zcfgRet_t ret;
+	char whiteListObjFormate[128] = "InternetGatewayDevice.X_ZYXEL_EXT.MacFilter.WhiteList.%hhu";
+	uint32_t  whiteListOid = 0;
+	objIndex_t whiteListIid;
+	struct json_object *whiteListObj = NULL;
+	struct json_object *paramValue = NULL;
+	struct json_object *tr181ParamValue = NULL;
+	struct json_object *tmpObj = NULL;
+	tr98Parameter_t *paramList = NULL;
+	int index = 0;
+	char macAddr[18] = {0};
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+
+	IID_INIT(whiteListIid);
+	whiteListIid.level = 1;
+	if(sscanf(tr98FullPathName, whiteListObjFormate, whiteListIid.idx) != 1) return ZCFG_INVALID_OBJECT;	
+	whiteListOid = RDM_OID_ZY_MAC_FILTER_WHITE_LIST;
+
+	if((ret = zcfgFeObjJsonGet(whiteListOid, &whiteListIid, &whiteListObj)) != ZCFG_SUCCESS)
+		return ret;
+	if(multiJobj){
+		tmpObj = whiteListObj;
+		whiteListObj = NULL;
+		whiteListObj = zcfgFeJsonMultiObjAppend(whiteListOid, &whiteListIid, multiJobj, tmpObj);
+	}
+
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		/*Write new parameter value from tr98 object to tr181 objects*/
+		paramValue = json_object_object_get(tr98Jobj, paramList->name);
+		if(paramValue != NULL) {
+			tr181ParamValue = json_object_object_get(whiteListObj, paramList->name);
+			if(tr181ParamValue != NULL) {
+				// -------- check validity of MAC start --------
+				if(strcmp(paramList->name, "MACAddress") == 0){
+					strcpy(macAddr, json_object_get_string(paramValue));
+					if(strcmp(macAddr, "") != 0){
+						for(; index < 17; index++) {
+							if(index % 3 != 2 && !isxdigit(macAddr[index])){
+								json_object_put(whiteListObj);
+								return ZCFG_INVALID_ARGUMENTS;
+							}
+							else if(index % 3 == 2 && macAddr[index] != ':'){
+								json_object_put(whiteListObj);
+								return ZCFG_INVALID_ARGUMENTS;
+							}
+						}
+						if(macAddr[17] != '\0'){
+							json_object_put(whiteListObj);
+							return ZCFG_INVALID_ARGUMENTS;
+						}
+					}
+				}
+				// -------- check validity of MAC end --------
+				json_object_object_add(whiteListObj, paramList->name, JSON_OBJ_COPY(paramValue));
+				paramList++;
+				continue;
+			}
+		}		
+		paramList++;	
+	} /*Edn while*/
+	
+	/*Set */
+	if(multiJobj){
+		json_object_put(tmpObj);
+	}
+	else{
+		if((ret = zcfgFeObjJsonSet(whiteListOid, &whiteListIid, whiteListObj, NULL)) != ZCFG_SUCCESS ) {
+			json_object_put(whiteListObj);
+			return ret;
+		}
+		json_object_put(whiteListObj);
+	}
+	
+	return ZCFG_SUCCESS;
+}
+
+zcfgRet_t zyExtMacFilterWhiteListObjAdd(char *tr98FullPathName, int *idx)
+{
+	zcfgRet_t ret;
+	objIndex_t objIid;
+
+	printf("%s : Enter\n", __FUNCTION__);
+
+	IID_INIT(objIid);
+	ret = zcfgFeObjStructAdd(RDM_OID_ZY_MAC_FILTER_WHITE_LIST, &objIid, NULL);
+	*idx = objIid.idx[0];
+
+	return ret;
+}
+
+zcfgRet_t zyExtMacFilterWhiteListObjDel(char *tr98FullPathName)
+{
+	zcfgRet_t ret;
+	char levelObjFormate[128] = "InternetGatewayDevice.X_ZYXEL_EXT.MacFilter.WhiteList.%hhu";
+	uint32_t  levelOid = 0;
+	objIndex_t levelIid;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+
+	IID_INIT(levelIid);
+	levelIid.level = 1;
+	if(sscanf(tr98FullPathName, levelObjFormate, levelIid.idx) != 1) return ZCFG_INVALID_OBJECT;	
+	levelOid = RDM_OID_ZY_MAC_FILTER_WHITE_LIST;
+
+
+	ret = zcfgFeObjStructDel(levelOid, &levelIid, NULL);
+	if (ret != ZCFG_SUCCESS) {
+		zcfgLog(ZCFG_LOG_DEBUG, "%s : Delete X_ZYXEL_EXT.MacFilter.WhiteList.%hhu Fail\n", __FUNCTION__, levelIid.idx[0]);
+	}
+
+	return ret;
+}
+#if 0
+zcfgRet_t zyExtMacFilterWhiteListObjNotify(char *tr98ObjName, char *tr181ParamName, struct json_object *tr181ParamVal, int handler, struct json_object **tr98NotifyInfo)
+{
+	bool found = false;
+	char tr98Notify[256] = "";
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+
+	if(*tr98NotifyInfo == NULL) {
+		*tr98NotifyInfo = json_object_new_object();
+	}
+
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		if(strcmp(tr181ParamName, paramList->name) == 0) {
+			found = true;
+			sprintf(tr98Notify, "%s.%s", tr98ObjName, paramList->name);
+			break;
+		}
+		paramList++;
+	}
+
+	if(found) {
+		json_object_object_add(*tr98NotifyInfo, tr98Notify, JSON_OBJ_COPY(tr181ParamVal));
+	}
+
+	return ZCFG_SUCCESS;
+}
+
+int zyExtMacFilterWhiteListObjAttrGet(char *tr98FullPathName, int handler, char *paramName)
+{
+	char tr181Obj[128] = {0};
+	char mapObj[128] = {0};
+	uint32_t  devInfoOid = 0;
+	objIndex_t devInfoIid;
+	int attrValue = ZCFG_NO_SUCH_PARAMETER;
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+
+	if(zcfgFe98To181MappingNameGet(tr98FullPathName, mapObj) != ZCFG_SUCCESS) {
+		return ZCFG_INVALID_OBJECT;
+	}
+	
+
+	IID_INIT(devInfoIid);
+	snprintf(tr181Obj, sizeof(tr181Obj),"Device.%s", mapObj);
+	devInfoOid = zcfgFeObjNameToObjId(tr181Obj, &devInfoIid);
+		
+
+	/*fill up tr98 devInfo object*/
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		if(strcmp(paramList->name, paramName)){
+			paramList++;
+			continue;
+		}
+		
+		/*special case*/
+
+		attrValue = zcfgFeParamAttrGetByName(devInfoOid, paramList->name);
+		if(attrValue < 0 ) {
+			attrValue = 0;
+		}
+		break;
+	}
+	
+	return attrValue;
+}
+
+zcfgRet_t zyExtMacFilterWhiteListObjAttrSet(char *tr98FullPathName, int handler, char *paramName, int newNotify, struct json_object *multiAttrJobj)
+{
+	zcfgRet_t ret;
+	char tr181Obj[128] = {0};
+	char mapObj[128] = {0};
+	uint32_t  devInfoOid = 0;
+	objIndex_t devInfoIid;
+	int attrValue = 0;
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+	if(zcfgFe98To181MappingNameGet(tr98FullPathName, mapObj) != ZCFG_SUCCESS) {
+		return ZCFG_INVALID_OBJECT;
+	}
+	
+
+	IID_INIT(devInfoIid);
+	snprintf(tr181Obj, sizeof(tr181Obj),"Device.%s", mapObj);
+	devInfoOid = zcfgFeObjNameToObjId(tr181Obj, &devInfoIid);
+
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		/*find the matched parameter*/
+		if(strcmp(paramList->name, paramName)){
+			paramList++;
+			continue;
+		}
+		/*special case*/
+		
+		attrValue = zcfgFeParamAttrGetByName(devInfoOid, paramList->name);
+		if(attrValue < 0) {
+			ret = ZCFG_INVALID_ARGUMENTS;
+			break;
+		}
+
+		/*Write new parameter attribute from tr98 object to tr181 objects*/
+		attrValue = zcfgFeNotifyAttrValSet(attrValue, newNotify);
+		ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, paramList->name, attrValue);
+		if( ret != ZCFG_SUCCESS){
+			zcfgLog(ZCFG_LOG_ERR, "%s(): set %d %s attribute fail\n", __FUNCTION__, devInfoOid, paramList->name);
+		}
+		break;
+
+	} /*Edn while*/
+	
+	return ret;
+}
+#endif	
+	
Index: libzcfg_fe_tr98-1.0/zyExt.h
===================================================================
--- libzcfg_fe_tr98-1.0.orig/zyExt.h	2015-06-08 17:56:33.888181057 +0800
+++ libzcfg_fe_tr98-1.0/zyExt.h	2015-06-08 17:58:38.984116067 +0800
@@ -10,6 +10,8 @@
 extern tr98Parameter_t para_LogSetting[];
 extern tr98Parameter_t para_LogClassify[];
 extern tr98Parameter_t para_LogCategory[];
+extern tr98Parameter_t para_MacFilter[];
+extern tr98Parameter_t para_MacFilter_WhiteList[];
 
 /*Handler Function*/
 
@@ -48,3 +50,17 @@
 extern zcfgRet_t zyExtLogClassifyObjGet(char *, int , struct json_object **, bool );
 extern zcfgRet_t zyExtLogCategoryObjGet(char *, int , struct json_object **, bool );
 extern zcfgRet_t zyExtLogCategoryObjSet(char *, int , struct json_object *, struct json_object *);
+
+extern zcfgRet_t zyExtMacFilterObjGet(char *, int, struct json_object **, bool);
+extern zcfgRet_t zyExtMacFilterObjSet(char *, int , struct json_object *, struct json_object *);
+/*extern zcfgRet_t zyExtMacFilterNotify(char *, char *, struct json_object *, int, struct json_object **);
+extern int firewallObjAttrGet(char *, int, char *);
+extern zcfgRet_t zyExtMacFilterAttrSet(char *, int, char *, int , struct json_object *);*/
+
+extern zcfgRet_t zyExtMacFilterWhiteListObjGet(char *, int, struct json_object **, bool);
+extern zcfgRet_t zyExtMacFilterWhiteListObjSet(char *, int , struct json_object *, struct json_object *);
+extern zcfgRet_t zyExtMacFilterWhiteListObjAdd(char *, int *);
+extern zcfgRet_t zyExtMacFilterWhiteListObjDel(char *);
+/*extern zcfgRet_t zyExtMacFilterWhiteListObjNotify(char *, char *, struct json_object *, int, struct json_object **);
+extern int firewallLevelObjAttrGet(char *, int, char *);
+extern zcfgRet_t zyExtMacFilterWhiteListObjAttrSet(char *, int, char *, int , struct json_object *);*/
Index: libzcfg_fe_tr98-1.0/zyExt_parameter.h
===================================================================
--- libzcfg_fe_tr98-1.0.orig/zyExt_parameter.h	2015-06-08 17:56:33.512185784 +0800
+++ libzcfg_fe_tr98-1.0/zyExt_parameter.h	2015-06-08 17:58:44.232147370 +0800
@@ -53,7 +53,7 @@
 	{ "AutoShowQuickStart", PARAMETER_ATTR_WRITE, 0, json_type_boolean},
 	{ NULL, 0, 0}
 };
-#endif
+#endif
 
 tr98Parameter_t para_LogSetting[] = {
 	{ "Enable", PARAMETER_ATTR_WRITE, 0, json_type_boolean},
@@ -74,3 +74,17 @@
 	{ "Level", PARAMETER_ATTR_WRITE, 0, json_type_uint32},
 	{ NULL, 0, 0}
 };
+tr98Parameter_t para_MacFilter[] = {
+	{ "MaxNumberOfEntries", PARAMETER_ATTR_WRITE, 0, json_type_uint32},
+	{ "Enable", PARAMETER_ATTR_WRITE, 0, json_type_boolean},
+	{ "Restrict", PARAMETER_ATTR_WRITE, 0, json_type_boolean},
+	{ NULL, 0, 0, 0}
+};
+
+tr98Parameter_t para_MacFilter_WhiteList[] = {
+	{ "Enable", PARAMETER_ATTR_WRITE, 0, json_type_boolean},
+	{ "MACAddress", PARAMETER_ATTR_WRITE, 18, json_type_string},
+	{ "HostName", PARAMETER_ATTR_WRITE, 32, json_type_string},
+	{ NULL, 0, 0, 0}
+};
+
