Index: libzcfg_fe_tr98-1.0/diag.c
===================================================================
--- libzcfg_fe_tr98-1.0.orig/diag.c	2017-10-11 15:20:27.000000000 +0800
+++ libzcfg_fe_tr98-1.0/diag.c	2017-10-11 15:21:08.398667242 +0800
@@ -76,7 +76,7 @@
 			paramList++;
 			continue;
 		}
-		
+
 		paramValue = json_object_object_get(ipPingObj, paramList->name);
 		if(paramValue != NULL) {
 			json_object_object_add(*tr98Jobj, paramList->name, JSON_OBJ_COPY(paramValue));
@@ -132,7 +132,7 @@
 
 	paramList = tr98Obj[handler].parameter;
 	while(paramList->name != NULL) {
-		/*Write new parameter value from tr98 object to tr181 objects*/		
+		/*Write new parameter value from tr98 object to tr181 objects*/
 		if(!strcmp(paramList->name, "Interface")) {
 			sprintf(paramfault, "%s.%s", tr98FullPathName, paramList->name);
 			paramValue = json_object_object_get(tr98Jobj, paramList->name);
@@ -168,14 +168,14 @@
 					}
 					memset(iface, 0, sizeof(iface));
 					strcpy(iface, higherLayer);
-					
+
 					if(!strstr(iface, "IP.Interface")) {
 						if(!multiJobj)
 							json_object_put(ipPingObj);
 						return ZCFG_INVALID_PARAM_VALUE;
 					}
 				}
-					
+
 				if(strstr(iface, "IP.Interface") != NULL) {
 					json_object_object_add(ipPingObj, paramList->name, json_object_new_string(iface));
 				}
@@ -202,7 +202,7 @@
 #if 0
 			if(paramValue != NULL) {
 				if(!strcmp(json_object_get_string(paramValue), "Requested")){
-					if(myEid == ZCFG_EID_TR69){
+					if(zcfg_msg_eidGet() == ZCFG_EID_TR69){
 						json_object_object_add(ipPingObj, "X_ZYXEL_Creator", json_object_new_string(CREATOR_ACS));
 					}
 				}
@@ -224,7 +224,7 @@
 
 		printf("Can't find parameter %s in TR181\n", paramList->name);
 
-		paramList++;	
+		paramList++;
 	}
 
 	/*Set Device.Routing.Router.1.IPv4Forwarding.i*/
@@ -351,7 +351,7 @@
 
 	paramList = tr98Obj[handler].parameter;
 	while(paramList->name != NULL) {
-		/*Write new parameter value from tr98 object to tr181 objects*/		
+		/*Write new parameter value from tr98 object to tr181 objects*/
 		if(!strcmp(paramList->name, "Interface")) {
 			sprintf(paramfault, "%s.%s", tr98FullPathName, paramList->name);
 			const char *tmpTr98Iface = json_object_get_string(json_object_object_get(tr98Jobj, paramList->name));
@@ -415,7 +415,7 @@
 
 		printf("Can't find parameter %s in TR181\n", paramList->name);
 
-		paramList++;	
+		paramList++;
 	}
 
 	json_object_object_add(traceRtObj, "X_ZYXEL_Creator", json_object_new_string("ACS"));
@@ -609,7 +609,7 @@
 				continue;
 			}
 		}
-		
+
 		paramValue = json_object_object_get(dlDiagObj, paramList->name);
 		if(paramValue != NULL) {
 			json_object_object_add(*tr98Jobj, paramList->name, JSON_OBJ_COPY(paramValue));
@@ -917,7 +917,7 @@
 					memset(iface, 0, sizeof(iface));
 					strcpy(iface, higherLayer);
 				}
-	
+
 				strcpy(devIpIface, iface);
 				json_object_object_add(ulDiagObj, paramList->name, json_object_new_string(devIpIface));
 			}
@@ -926,7 +926,7 @@
 			json_object_object_add(ulDiagObj, paramList->name, JSON_OBJ_COPY(paramValue));
 		}
 		nParm++;
-		paramList++;	
+		paramList++;
 	}
 
 	json_object_object_add(ulDiagObj, "X_ZYXEL_Creator", json_object_new_string("ACS"));
@@ -1199,7 +1199,7 @@
 			paramList++;
 			continue;
 		}
-		
+
 		paramValue = json_object_object_get(udpEchoDiagObj, paramList->name);
 		if(paramValue != NULL) {
 			json_object_object_add(*tr98Jobj, paramList->name, JSON_OBJ_COPY(paramValue));
@@ -1250,7 +1250,7 @@
 
 	paramList = tr98Obj[handler].parameter;
 	while(paramList->name != NULL) {
-		/*Write new parameter value from tr98 object to tr181 objects*/		
+		/*Write new parameter value from tr98 object to tr181 objects*/
 		if(!strcmp(paramList->name, "Interface")) {
 			sprintf(paramfault, "%s.%s", tr98FullPathName, paramList->name);
 			paramValue = json_object_object_get(tr98Jobj, paramList->name);
@@ -1276,14 +1276,14 @@
 					}
 					memset(iface, 0, sizeof(iface));
 					strcpy(iface, higherLayer);
-					
+
 					if(!strstr(iface, "IP.Interface")) {
 						if(!multiJobj)
 							json_object_put(udpEchoDiagObj);
 						return ZCFG_INVALID_PARAM_VALUE;
 					}
 				}
-					
+
 				if(strstr(iface, "IP.Interface") != NULL) {
 					json_object_object_add(udpEchoDiagObj, paramList->name, json_object_new_string(iface));
 				}
@@ -1299,7 +1299,7 @@
 			paramValue = json_object_object_get(tr98Jobj, "DiagnosticsState");
 			if(paramValue != NULL) {
 				if(!strcmp(json_object_get_string(paramValue), "Requested")){
-					if(myEid == ZCFG_EID_TR69){
+					if(zcfg_msg_eidGet() == ZCFG_EID_TR69){
 						json_object_object_add(udpEchoDiagObj, "X_ZYXEL_Creator", json_object_new_string(CREATOR_ACS));
 					}
 				}
@@ -1318,7 +1318,7 @@
 
 		printf("Can't find parameter %s in TR181\n", paramList->name);
 
-		paramList++;	
+		paramList++;
 	}
 
 	/*Set Device.Routing.Router.1.IPv4Forwarding.i*/
Index: libzcfg_fe_tr98-1.0/lanDev.c
===================================================================
--- libzcfg_fe_tr98-1.0.orig/lanDev.c	2017-10-11 15:20:27.000000000 +0800
+++ libzcfg_fe_tr98-1.0/lanDev.c	2017-10-11 15:21:08.398667242 +0800
@@ -66,7 +66,7 @@
 
 #ifdef WIFISECURITY_AUTH_WITH_EAP
 
-#define TR98_PARM_LAN_DEV_WLAN_CFG "{\	
+#define TR98_PARM_LAN_DEV_WLAN_CFG "{\
 		\"BeaconType\": { \"Basic\": { }, \"WPA\": { }, \"11i\": { }, \"WPAand11i\": { }, \"Emp\": { } },\
 		\"DeviceOperationMode\": { \"InfrastructureAccessPoint\": { }, \"Emp\": { } },\
 		\"BasicEncryptionModes\": { \"None\": { }, \"WEPEncryption\": { } },\
@@ -79,7 +79,7 @@
 
 #else
 
-#define TR98_PARM_LAN_DEV_WLAN_CFG "{\	
+#define TR98_PARM_LAN_DEV_WLAN_CFG "{\
 		\"BeaconType\": { \"Basic\": { }, \"WPA\": { }, \"11i\": { }, \"WPAand11i\": { } },\
 		\"DeviceOperationMode\": { \"InfrastructureAccessPoint\": { }, \"Emp\": { } },\
 		\"BasicEncryptionModes\": { \"None\": { }, \"WEPEncryption\": { } },\
@@ -99,7 +99,7 @@
 	objIndex_t objIid;
 	int numOfBridge = 0;
 	rdm_Bridging_t *bridgingObj = NULL;
-	
+
 	IID_INIT(objIid);
 	zcfgFeObjStructGet(RDM_OID_BRIDGING, &objIid, (void **)&bridgingObj);
 	numOfBridge = bridgingObj->BridgeNumberOfEntries;
@@ -118,7 +118,7 @@
 
         strcpy(lanIp, ip);
         strcpy(subnetMask, mask);
-        
+
 	i = 0;
 	pch = strtok(lanIp, ".");
 	while (pch != NULL){
@@ -126,7 +126,7 @@
 		pch = strtok(NULL, ".");
 		i++;
 	}
-		
+
 	i = 0;
 	pch = strtok(subnetMask, ".");
 	while (pch != NULL){
@@ -134,19 +134,19 @@
 		pch = strtok(NULL, ".");
 		i++;
 	}
-		
+
 	int bcast2 = 255, bcast3 = 255;
 	int n2 = 0, n3=0;
-	int hosts2, hosts3;	
+	int hosts2, hosts3;
 	char dhcpStart[16] = {0};
 	char dhcpEnd[16] = {0};
-		
+
 	if (maskArr[0] == 255 && maskArr[1] == 0 &&  maskArr[2] == 0 && maskArr[3] == 0) {
 	/* 255.0.0.0 is only class A supported */
 		endArr[1] = 255;
 		endArr[2] = 255;
 	}
-	else if ((maskArr[0] == 255 && maskArr[1] == 255 && maskArr[3] == 0) && 
+	else if ((maskArr[0] == 255 && maskArr[1] == 255 && maskArr[3] == 0) &&
 		(maskArr[2] == 0 || maskArr[2] == 128 || maskArr[2] == 192 || maskArr[2] == 224 || maskArr[2]== 240 || maskArr[2] == 248 ||  maskArr[2] == 252)){
 		/* 255.255.0.0 is only class B supported */
 		n2 = ipArr[2] & maskArr[2];
@@ -161,20 +161,20 @@
 		bcast3 = n3 + hosts3;
 	}
 	else
-		return false;         
+		return false;
 
 	if (ipArr[3] == bcast3){
 		printf("warning !! Invalid IP address");
 		return false;
 	}
-	
+
 	for (i = 0; i < 2; i++){/*set the first 2 octets of addresses*/
 		sprintf(tmpstr, "%d.", startArr[i]);
 		strcat(dhcpStart, tmpstr);
 		sprintf(tmpstr, "%d.", endArr[i]);
 		strcat(dhcpEnd, tmpstr);
 	}
-		
+
 	/*set the third octets of addresses*/
 	if (ipArr[2] == (bcast2-1)) {
 		startArr[2] = n2;
@@ -191,7 +191,7 @@
 	else {
 		startArr[2] = ipArr[2];
 		endArr[2] = bcast2 -1;
-	}	
+	}
 
 	sprintf(tmpstr, "%d.", startArr[2]);
 	strcat(dhcpStart, tmpstr);
@@ -206,7 +206,7 @@
 	else {
 		startArr[3] = ipArr[3] + 1;
 		endArr[3] = bcast3 -1;
-	}      
+	}
 
 	sprintf(tmpstr, "%d", startArr[3]);
 	strcat(dhcpStart, tmpstr);
@@ -324,7 +324,7 @@
 					}
 				}
 				strncpy(theHostlist->hostinfo.hwa, hwa, sizeof(theHostlist->hostinfo.hwa)-1);
-				
+
 				theHostlist->hostinfo.tag |= TAG_DHCP;
 				theHostlist->hostinfo.lease = lease;
 			}
@@ -363,7 +363,7 @@
 		fclose(assocfp);
 		unlink(assoctmp);
 	}
-	
+
 	return ZCFG_SUCCESS;
 }
 #endif
@@ -380,7 +380,7 @@
 	}
 
 	sprintf(ethLinkPathName, "Ethernet.Link.%d", objIid.idx[0]);
-	
+
 	/*Set LowerLayer for Ethernet.Link*/
 	if((ret = zcfgFeObjStructGet(RDM_OID_ETH_LINK, &objIid, (void **)&ethLinkObj)) == ZCFG_SUCCESS){
 		ethLinkObj->Enable= true;
@@ -392,8 +392,8 @@
 	}
 	else
 		return ret;
-	
-	return ret;	
+
+	return ret;
 }
 
 /*  TR98 Object Name : InternetGatewayDevice.LANDevice.i.Hosts
@@ -443,12 +443,12 @@
 			continue;
 		}
 
-		// all LAN dev should be br+ ,no eth0, eth1, eth2... 
+		// all LAN dev should be br+ ,no eth0, eth1, eth2...
 		if(strstr(dev, "br") == NULL)
 			continue;
-		
+
 		hostNum++;
-	}	
+	}
 	fclose(arpfp);
 
 	/*fill up tr98 Host object*/
@@ -462,7 +462,7 @@
 	struct json_object *hostsObj = NULL;
 	struct json_object *paramValue = NULL;
 	tr98Parameter_t *paramList = NULL;
-#else	
+#else
 	char tr181Name[32] = {0};
 	char tr98TmpName[32] = {0};
 	char mappingPathName[32] = {0};
@@ -473,18 +473,18 @@
 #endif
 
 	zcfgLog(ZCFG_LOG_DEBUG, "%s : Enter\n", __FUNCTION__);
-	
+
 #if MODIFY_HOSTS_AND_HOST_FUN // modify 20150809
 	IID_INIT(objIid);
 	if((ret = feObjJsonGet(RDM_OID_HOSTS, &objIid, &hostsObj, updateFlag)) != ZCFG_SUCCESS){
 		return ret;
 	}
-	
+
 	/*fill up tr98 object from related tr181 objects*/
 	*tr98Jobj = json_object_new_object();
 	paramList = tr98Obj[handler].parameter;
 	while(paramList->name != NULL){
-		/*Write parameter value from tr181 objects to tr98 object*/ 	
+		/*Write parameter value from tr181 objects to tr98 object*/
 		paramValue = json_object_object_get(hostsObj, paramList->name);
 		if(paramValue != NULL){
 			json_object_object_add(*tr98Jobj, paramList->name, JSON_OBJ_COPY(paramValue));
@@ -494,30 +494,30 @@
 
 		/*Not defined in tr181, give it a default value*/
 		printf("Can't find parameter %s in TR181\n", paramList->name);
-		paramList++;	
+		paramList++;
 	}
-	
+
 	json_object_put(hostsObj);
 #else
 	strcpy(tr98TmpName, tr98FullPathName);
 	ptr = strstr(tr98TmpName, ".Hosts");
 	*ptr = '\0';
-	
+
 	/* mappingPathName will be Ethernet.Link.i */
 	if((ret = zcfgFe98To181MappingNameGet(tr98TmpName, mappingPathName)) != ZCFG_SUCCESS) {
 		/*No such object*/
 		printf("No such object\n");
 		return ret;
 	}
-	
+
 	strcpy(tr181Name, mappingPathName);
 	if((ret = zcfgFeTr181IfaceStackHigherLayerGet(tr181Name, higherLayerPath)) != ZCFG_SUCCESS)
 		return ret;
-		
+
 	if(strstr(higherLayerPath, "IP.Interface") != NULL) {
 		IID_INIT(objIid);
 		objIid.level = 1;
-		
+
 		while(feObjStructGetNext(RDM_OID_HOSTS_HOST, &objIid, (void **)&stHost, updateFlag) == ZCFG_SUCCESS){
 			if(strcmp(stHost->Layer3Interface, higherLayerPath) == 0){
 				hostNum++;
@@ -525,12 +525,12 @@
 			zcfgFeObjStructFree(stHost);
 		}
 	}
-	
+
 	*tr98Jobj = json_object_new_object();
 	json_object_object_add(*tr98Jobj, "HostNumberOfEntries", json_object_new_int(hostNum));
 #endif
 #endif
-	
+
 	return ZCFG_SUCCESS;
 }
 
@@ -539,7 +539,7 @@
 	char tr98Notify[256] = {0};
 	tr98Parameter_t *paramList = NULL;
 	char *attrParamNamePtr = NULL;
-	
+
 	zcfgLog(ZCFG_LOG_INFO, "Enter %s\n", __FUNCTION__);
 
 	if(*tr98NotifyInfo == NULL) {
@@ -575,7 +575,7 @@
 	if(zcfgFe98To181MappingNameGet(tr98FullPathName, mapObj) != ZCFG_SUCCESS) {
 		return ZCFG_INVALID_OBJECT;
 	}
-	
+
 	paramList = tr98Obj[handler].parameter;
 	while(paramList->name != NULL) {
 		if(strcmp(paramList->name, paramName)){
@@ -583,13 +583,13 @@
 			continue;
 		}
 		attrValue = zcfgFeParamAttrGetByName(RDM_OID_HOSTS, paramList->name);
-		
+
 		if(attrValue < 0 ) {
 			attrValue = 0;
 		}
 		break;
 	}
-	
+
 	return attrValue;
 }
 
@@ -601,7 +601,7 @@
 	tr98Parameter_t *paramList = NULL;
 
 	zcfgLog(ZCFG_LOG_INFO, "Enter %s\n", __FUNCTION__);
-	
+
 	paramList = tr98Obj[handler].parameter;
 	while(paramList->name != NULL) {
 		if(strcmp(paramList->name, paramName)){
@@ -654,12 +654,12 @@
 	uint32_t hostNum = 0;
 	hostlist_t *hostlist = NULL;
 	hostlist_t *theHostlist = NULL;
-	
+
 	zcfgLog(ZCFG_LOG_INFO, "%s()\n", __FUNCTION__);
-	
+
 	//Refresh Hosts device list
 	lanDevHostListUpdate(&hostlist, 1);
-	
+
 	sscanf(tr98FullPathName, "%*[^.].%*[^.].%*d.Hosts.Host.%d", &idx);
 
 	/*ARP table*/
@@ -689,25 +689,25 @@
 			continue;
 		}
 
-		// all LAN dev should be br+ ,no eth0, eth1, eth2... 
+		// all LAN dev should be br+ ,no eth0, eth1, eth2...
 		if(strstr(dev, "br") == NULL)
 			continue;
 
 		hostNum++;
 		if(idx == hostNum) {
 			theHostlist = findHostFromList(hostlist, hwa);
-	
+
 			/*fill up tr98 Host object*/
 			*tr98Jobj = json_object_new_object();
 			json_object_object_add(*tr98Jobj, "MACAddress", json_object_new_string(hwa));
-			json_object_object_add(*tr98Jobj, "IPAddress", json_object_new_string(ip));	
+			json_object_object_add(*tr98Jobj, "IPAddress", json_object_new_string(ip));
 			json_object_object_add(*tr98Jobj, "ClientID", json_object_new_string(""));
 			json_object_object_add(*tr98Jobj, "UserClassID", json_object_new_string(""));
-	
+
 			if(theHostlist){
 				json_object_object_add(*tr98Jobj, "HostName", json_object_new_string(theHostlist->hostinfo.hostname));
 				json_object_object_add(*tr98Jobj, "VendorClassID", json_object_new_string(theHostlist->hostinfo.vid));
-				
+
 				if(theHostlist->hostinfo.tag & TAG_DHCP){
 					json_object_object_add(*tr98Jobj, "AddressSource", json_object_new_string(ADDRSRC_DHCP));
 					json_object_object_add(*tr98Jobj, "LeaseTimeRemaining", json_object_new_int(theHostlist->hostinfo.lease));
@@ -715,7 +715,7 @@
 					json_object_object_add(*tr98Jobj, "AddressSource", json_object_new_string(ADDRSRC_STATIC));
 					json_object_object_add(*tr98Jobj, "LeaseTimeRemaining", json_object_new_int(0));
 				}
-				
+
 				if(theHostlist->hostinfo.tag & TAG_WIFI){
 					json_object_object_add(*tr98Jobj, "InterfaceType", json_object_new_string(CONNTYPE_WIRELESS));
 				}else if(type ==1/*ether*/ || type==2/*ppp*/){
@@ -724,8 +724,8 @@
 				else{
 					json_object_object_add(*tr98Jobj, "InterfaceType", json_object_new_string(CONNTYPE_OTHER));
 				}
-					
-				if(theHostlist->hostinfo.tag & TAG_LOSTWIFI) 
+
+				if(theHostlist->hostinfo.tag & TAG_LOSTWIFI)
 					json_object_object_add(*tr98Jobj, "Active", json_object_new_boolean(0));
 				else
 					json_object_object_add(*tr98Jobj, "Active", json_object_new_boolean(1));
@@ -735,7 +735,7 @@
 				json_object_object_add(*tr98Jobj, "AddressSource", json_object_new_string(ADDRSRC_STATIC));
 				json_object_object_add(*tr98Jobj, "LeaseTimeRemaining", json_object_new_int(0));
 				json_object_object_add(*tr98Jobj, "Active", json_object_new_boolean(1));
-			
+
 				if(type ==1/*ether*/ || type==2/*ppp*/){
 					json_object_object_add(*tr98Jobj, "InterfaceType", json_object_new_string(CONNTYPE_ETH));
 				}
@@ -743,16 +743,16 @@
 					json_object_object_add(*tr98Jobj, "InterfaceType", json_object_new_string(CONNTYPE_OTHER));
 				}
 			}
-			
+
 			break;
 		}
-	}	
+	}
 	fclose(arpfp);
 
 	freeHostList(hostlist);
 #else
 	zcfgRet_t ret;
-	objIndex_t objIid; 
+	objIndex_t objIid;
 	tr98Parameter_t *paramList = NULL;
 	char *ptr = NULL;
 	struct json_object *hostJobj = NULL;
@@ -768,9 +768,9 @@
 	uint32_t hostNum = 0;
 	rdm_HostsHost_t *stHost = NULL;
 #endif
-	
+
 	zcfgLog(ZCFG_LOG_DEBUG, "%s : Enter\n", __FUNCTION__);
-	
+
 #if MODIFY_HOSTS_AND_HOST_FUN // modify 20150809
 	/*Get related tr181 objects*/
 	IID_INIT(objIid);
@@ -783,12 +783,12 @@
 	strcpy(tr98TmpName, tr98FullPathName);
 	ptr = strstr(tr98TmpName, ".Hosts");
 	*ptr = '\0';
-	
+
 	/* tr98TmpName will be InternetGatewayDevice.LANDevice.i */
 	if((ret = zcfgFe98To181MappingNameGet(tr98TmpName, mappingPathName)) != ZCFG_SUCCESS){
 		return ret;
 	}
-	
+
 	strcpy(tr181Name, mappingPathName);
 	if((ret = zcfgFeTr181IfaceStackHigherLayerGet(tr181Name, higherLayerPath)) != ZCFG_SUCCESS)
 		return ret;
@@ -798,7 +798,7 @@
 		IID_INIT(hostIid);
 		objIid.level = 1;
 		sscanf(tr98FullPathName, "%*[^.].%*[^.].%*d.Hosts.Host.%d", &idx);
-		
+
 		while(feObjStructGetNext(RDM_OID_HOSTS_HOST, &objIid, (void **)&stHost, updateFlag) == ZCFG_SUCCESS){
 			if(strcmp(stHost->Layer3Interface, higherLayerPath) == 0){
 				hostNum++;
@@ -813,11 +813,11 @@
 	}
 	else
 		return;
-	
+
 	if((ret = feObjJsonGet(RDM_OID_HOSTS_HOST, &hostIid, &hostJobj, updateFlag)) != ZCFG_SUCCESS)
 		return ret;
 #endif
-	
+
 	/*fill up tr98 Host object*/
 	*tr98Jobj = json_object_new_object();
 	paramList = tr98Obj[handler].parameter;
@@ -858,12 +858,12 @@
 			paramList++;
 			continue;
 		}
-		
+
 		/*Not defined in tr181, give it a default value*/
 		ztrdbg(ZTR_DL_INFO, "%s: Can't find parameter %s in TR181\n", __FUNCTION__, paramList->name);
 		paramList++;
 	}
-	
+
 	json_object_put(hostJobj);
 #endif
 
@@ -981,7 +981,7 @@
 	if(zcfgFe98To181MappingNameGet(tr98FullPathName, mapObj) != ZCFG_SUCCESS) {
 		return ZCFG_INVALID_OBJECT;
 	}
-	
+
 	paramList = tr98Obj[handler].parameter;
 	while(paramList->name != NULL) {
 		if(strcmp(paramList->name, paramName)){
@@ -2776,10 +2776,10 @@
 				json_object_object_add(staticAddrJobj, paramList->name, JSON_OBJ_COPY(paramValue));
 				paramList++;
 				continue;
-			}		
+			}
 		}
 
-		paramList++;	
+		paramList++;
 	} /*Edn while*/
 
 	/*Set Device.DHCPv4.Server.Pool.i.StaticAddress.i */
@@ -3087,7 +3087,7 @@
 		dhcpOptJobj = NULL;
 		dhcpOptJobj = zcfgFeJsonMultiObjAppend(RDM_OID_DHCPV4_SRV_POOL_OPT, &dhcpOptIid, multiJobj, tmpObj);
 	}
-	
+
 	paramList = tr98Obj[handler].parameter;
 	while(paramList->name != NULL) {
 		/*Write new parameter value from tr98 object to tr181 objects*/
@@ -3535,7 +3535,7 @@
 		*idx = tr98ObjIid.idx[1];
 	}
 #endif
-	
+
 	return ret;
 }
 
@@ -3916,7 +3916,7 @@
 			}		
 		}
 
-		paramList++;	
+		paramList++;
 	} /*Edn while*/
 
 	/*Set Device.Ethernet.Interface.i */
@@ -3956,7 +3956,7 @@
 			sprintf(tr98Notify, "%s.%s", tr98ObjName, paramList->name);
 			break;
 		}
-		
+
 		paramList++;
 	}
 
@@ -3981,12 +3981,12 @@
 	if(zcfgFe98To181MappingNameGet(tr98FullPathName, mapObj) != ZCFG_SUCCESS) {
 		return ZCFG_INVALID_OBJECT;
 	}
-	
+
 
 	IID_INIT(devInfoIid);
 	snprintf(tr181Obj, sizeof(tr181Obj),"Device.%s", mapObj);
 	devInfoOid = zcfgFeObjNameToObjId(tr181Obj, &devInfoIid);
-		
+
 
 	/*fill up tr98 devInfo object*/
 	paramList = tr98Obj[handler].parameter;
@@ -3995,17 +3995,17 @@
 			paramList++;
 			continue;
 		}
-		
+
 		/*special case*/
-		
+
 		attrValue = zcfgFeParamAttrGetByName(devInfoOid, paramList->name);
-		
+
 		if(attrValue < 0 ) {
 			attrValue = 0;
 		}
 		break;
 	}
-	
+
 	return attrValue;
 }
 
@@ -4023,7 +4023,7 @@
 	if(zcfgFe98To181MappingNameGet(tr98FullPathName, mapObj) != ZCFG_SUCCESS) {
 		return ZCFG_INVALID_OBJECT;
 	}
-	
+
 
 	IID_INIT(devInfoIid);
 	snprintf(tr181Obj, sizeof(tr181Obj),"Device.%s", mapObj);
@@ -4047,14 +4047,14 @@
 		/*Write new parameter attribute from tr98 object to tr181 objects*/
 		attrValue = zcfgFeNotifyAttrValSet(attrValue, newNotify);
 		ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, paramList->name, attrValue);
-		
+
 		if( ret != ZCFG_SUCCESS){
 			zcfgLog(ZCFG_LOG_ERR, "%s(): set %d %s attribute fail\n", __FUNCTION__, devInfoOid, paramList->name);
 		}
 		break;
 
 	} /*Edn while*/
-	
+
 	return ret;
 }
 
@@ -4080,7 +4080,7 @@
 	tr98Parameter_t *paramList = NULL;
 
 	strcpy(tr98TmpName, tr98FullPathName);
-	
+
 	if((ret = zcfgFe98To181MappingNameGet(tr98TmpName, mappingPathName)) != ZCFG_SUCCESS){
 		printf("98 to 181 Mapping Fail!!\n");
 		return ret;
@@ -4091,7 +4091,7 @@
 	ethIntfStatOid = zcfgFeObjNameToObjId(tr181Obj, &ethIntfStatIid);
 	if((ret = feObjJsonGet(ethIntfStatOid, &ethIntfStatIid, &ethIntfStatJobj, updateFlag)) != ZCFG_SUCCESS)
 		return ret;
-	
+
 	/*fill up tr98 LANEthernetInterfaceConfig.i.Stats object*/
 	*tr98Jobj = json_object_new_object();
 	paramList = tr98Obj[handler].parameter;
@@ -4102,13 +4102,13 @@
 			paramList++;
 			continue;
 		}
-		
+
 		/*Not defined in tr181, give it a default value*/
 		ztrdbg(ZTR_DL_INFO, "%s: Can't find parameter %s in TR181\n", __FUNCTION__, paramList->name);
 		paramList++;
 	}
 
-	json_object_put(ethIntfStatJobj);	
+	json_object_put(ethIntfStatJobj);
 	return ZCFG_SUCCESS;
 }
 /*   TR98 Object Name : InternetGatewayDevice.LANDevice.i.WLANConfiguration.i
@@ -4144,7 +4144,7 @@
 	char tmp[256] = {0}, *pch = NULL;
 
 	if((ret = zcfgFe98To181MappingNameGet(tr98FullPathName, wifiSsid)) != ZCFG_SUCCESS) {
-		/*  The instance number of WLANConfiguration.i will be continuous because of the tr98 to tr181 mapping table. 
+		/*  The instance number of WLANConfiguration.i will be continuous because of the tr98 to tr181 mapping table.
 		 *  Therefore, just return "ZCFG_NO_MORE_INSTANCE" when there is no related mapping of tr181 for
 		 *  this WLANConfiguration object.
 		 */
@@ -4200,7 +4200,7 @@
 			json_object_put(ssidJobj);
 			json_object_put(apJobj);
 			return ret;
-		}		
+		}
 	}
 
 	/*fill up tr98 LANEthernetInterfaceConfig object*/
@@ -4375,7 +4375,7 @@
 			if(paramValue != NULL) {
 				if(strstr(json_object_get_string(paramValue), "WPA-WPA2") != NULL) {
 					paramValue = json_object_new_string("WPAand11i");
-				}				
+				}
 				else if(strstr(json_object_get_string(paramValue), "WPA2") != NULL) {
 					paramValue = json_object_new_string("11i");
 				}
@@ -4419,7 +4419,7 @@
 
 	json_object_put(radioJobj);
 	json_object_put(ssidStatsJobj);
-	json_object_put(ssidJobj);	
+	json_object_put(ssidJobj);
 	json_object_put(apJobj);
 	json_object_put(apSecJobj);
 
@@ -4441,12 +4441,12 @@
 	tr98Parameter_t *paramList = NULL;
 
 	zcfgLog(ZCFG_LOG_INFO, "%s : Enter\n", __FUNCTION__);
-	
+
 	if((ret = zcfgFe98To181MappingNameGet(tr98FullPathName, tr181PathName)) != ZCFG_SUCCESS){
 		zcfgLog(ZCFG_LOG_INFO, "%s : Get TR181 mapping name fail.\n", __FUNCTION__);
 		return ret;
 	}
-	
+
 	IID_INIT(wlanCfgStatIid);
 	sprintf(tr181Obj, "Device.%s", tr181PathName);
 	wlanCfgStatOid = zcfgFeObjNameToObjId(tr181Obj, &wlanCfgStatIid);
@@ -4454,7 +4454,7 @@
 		zcfgLog(ZCFG_LOG_INFO, "%s : Get wlanCfgStatJobj fail.\n", __FUNCTION__);
 		return ret;
 	}
-	
+
 	*tr98Jobj = json_object_new_object();
 	paramList = tr98Obj[handler].parameter;
 	while(paramList->name != NULL) {
@@ -4464,13 +4464,13 @@
 			paramList++;
 			continue;
 		}
-		
+
 		/*Not defined in tr181, give it a default value*/
 		ztrdbg(ZTR_DL_INFO, "%s: Can't find parameter %s in TR181\n", __FUNCTION__, paramList->name);
 		paramList++;
 	}
 
-	json_object_put(wlanCfgStatJobj);	
+	json_object_put(wlanCfgStatJobj);
 	return ZCFG_SUCCESS;
 }
 
@@ -4492,7 +4492,7 @@
 		basicAuthMode = json_object_get_string(json_object_object_get(tr98Jobj, "BasicAuthenticationMode"));
 		basicEncryptModes = json_object_get_string(json_object_object_get(tr98Jobj, "BasicEncryptionModes"));
 
-		if((basicAuthMode && !strcmp(basicAuthMode, "None")) && 
+		if((basicAuthMode && !strcmp(basicAuthMode, "None")) &&
 			(basicEncryptModes && !strcmp(basicEncryptModes, "None")))
 			json_object_object_add(apSecJobj, "ModeEnabled", json_object_new_string("None"));
 		else if(wepKeyLen == 5 || wepKeyLen == 10){
@@ -4591,10 +4591,10 @@
 		const char *basicAuthMode = json_object_get_string(json_object_object_get(tr98Jobj, "BasicAuthenticationMode"));
 		const char *basicEncryptModes = json_object_get_string(json_object_object_get(tr98Jobj, "BasicEncryptionModes"));
 
-		if(( (basicAuthMode && strcmp(basicAuthMode, "None")) || (basicEncryptModes && strcmp(basicEncryptModes, "None")) ) 
+		if(( (basicAuthMode && strcmp(basicAuthMode, "None")) || (basicEncryptModes && strcmp(basicEncryptModes, "None")) )
 				&& (apIid->idx[0] == WIFI24_FIRST_AP))
 			json_object_object_add(tr98Jobj, "X_ZYXEL_OperatingChannelBandwidth", json_object_new_string("20MHz"));
-		else if(( (basicAuthMode && strcmp(basicAuthMode, "None")) || (basicEncryptModes && strcmp(basicEncryptModes, "None")) ) 
+		else if(( (basicAuthMode && strcmp(basicAuthMode, "None")) || (basicEncryptModes && strcmp(basicEncryptModes, "None")) )
 				&& (apIid->idx[0] == WIFI5_FIRST_AP))
 			json_object_object_add(tr98Jobj, "X_ZYXEL_OperatingChannelBandwidth", json_object_new_string("20MHz"));
 		else if(strcmp(opBandwidth, tr181OpBandwidth) && (apIid->idx[0] != WIFI24_FIRST_AP) && (apIid->idx[0] != WIFI5_FIRST_AP))
@@ -4777,7 +4777,7 @@
 	objIndex_t wpsIid;
 
 	if(zcfgFe98To181MappingNameGet(tr98FullPathName, wifiSsid) != ZCFG_SUCCESS) {
-		/*  The instance number of WLANConfiguration.i will be continuous because of the tr98 to tr181 mapping table. 
+		/*  The instance number of WLANConfiguration.i will be continuous because of the tr98 to tr181 mapping table.
 		 *  Therefore, just return "ZCFG_NO_MORE_INSTANCE" when there is no related mapping of tr181 for
 		 *  this WLANConfiguration object.
 		 */
@@ -4862,7 +4862,7 @@
 			sprintf(keyParamName, "X_ZYXEL_WEPKey%d", defaultKeyIndex);
 
 		wepKey = json_object_object_get(apSecJobj, keyParamName);
-		wepKeyLen = wepKey ? strlen(json_object_get_string(wepKey)) : 0;		
+		wepKeyLen = wepKey ? strlen(json_object_get_string(wepKey)) : 0;
 
 		sprintf(keyParamName, "X_ZYXEL_WEP64Key%d", defaultKeyIndex);
 
@@ -5118,7 +5118,7 @@
 				zcfgLog(ZCFG_LOG_ERR, "%s : Recover WiFi.AccessPoint.i Fail\n", __FUNCTION__);
 			goto finish;
 		}
-		
+
 		if((ret = zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_SSID, &ssidIid, ssidJobj, NULL)) != ZCFG_SUCCESS ) {
 
 			if(zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_ACCESS_POINT, &apIid, apJobjBak, NULL) != ZCFG_SUCCESS)
@@ -5126,7 +5126,7 @@
 
 			if(zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_ACCESS_POINT_SEC, &apIid, apSecJobjBak, NULL) != ZCFG_SUCCESS)
 				zcfgLog(ZCFG_LOG_ERR, "%s : Recover WiFi.AccessPoint.i.Security Fail\n", __FUNCTION__);
-						
+
 			goto finish;
 		}
 
@@ -5205,7 +5205,7 @@
 			/*Write new parameter attribute from tr98 object to tr181 objects*/
 			attrValue = zcfgFeNotifyAttrValSet(attrValue, newNotify);
 			ret = zcfgFeMultiParamAttrAppend(wlanCfgOid, multiAttrJobj, attrParamNamePtr, attrValue);
-		
+
 			if( ret != ZCFG_SUCCESS){
 			zcfgLog(ZCFG_LOG_ERR, "%s(): set %d %s attribute fail\n", __FUNCTION__, wlanCfgOid, attrParamNamePtr);
 			}
@@ -5241,7 +5241,7 @@
 		//}
 		break;
 	}
-	
+
 	return attrValue;
 }
 
@@ -5251,7 +5251,7 @@
 	tr98Parameter_t *paramList = NULL;
 	char *attrParamNamePtr = NULL;
 	char attrParamName[100] = {0};
-	
+
 	zcfgLog(ZCFG_LOG_INFO, "Enter %s\n", __FUNCTION__);
 
 	if(*tr98NotifyInfo == NULL) {
@@ -5371,7 +5371,7 @@
 	*tr98Jobj = json_object_new_object();
 	paramList = tr98Obj[handler].parameter;
 	while(paramList->name != NULL) {
-		/*Write parameter value from tr181 objects to tr98 object*/	
+		/*Write parameter value from tr181 objects to tr98 object*/
 		/*spetial case*/
 		if(!strcmp(paramList->name, "ConfigMethodsEnabled")) {
 			paramValue = json_object_object_get(apWpsJobj, "X_ZYXEL_WPS_EnablePBC");
@@ -5391,12 +5391,12 @@
 			}
 			if (ConfigMethodsEnabled[strlen(ConfigMethodsEnabled)-1] == ',')
 				ConfigMethodsEnabled[strlen(ConfigMethodsEnabled)-1] = '\0';
-			
+
 			json_object_object_add(*tr98Jobj, paramList->name, json_object_new_string(ConfigMethodsEnabled));
 			paramList++;
 			continue;
 		}
-		
+
 		paramValue = json_object_object_get(apWpsJobj, paramList->name);
 		if(paramValue != NULL) {
 			if(!strcmp(paramList->name, "Enable")){
@@ -5467,7 +5467,7 @@
 	struct json_object *paramValue = NULL;
 	struct json_object *tr181ParamValue = NULL;
 	struct json_object *tmpObj = NULL;
-	tr98Parameter_t *paramList = NULL;	
+	tr98Parameter_t *paramList = NULL;
 	//bool tr98WpsEnable, tr181WpsEnable;
 	bool tr98WpsEnable;
 	//int tr98WpsMthSupport = 0;
@@ -5511,7 +5511,7 @@
 			json_object_put(apJobj);
 			return ret;
 		}
-		json_object_put(apJobj);		
+		json_object_put(apJobj);
 	}
 
 	// Sync with WebGUI
@@ -5540,7 +5540,7 @@
 
 		apWpsEnable = json_object_get_boolean(json_object_object_get(apFirstWpsJobj, "Enable"));
 		json_object_put(apFirstWpsJobj);
-	
+
 		if((paramValue = json_object_object_get(tr98Jobj, "Enable"))) {
 			bool tr98ApWpsEnable = json_object_get_boolean(paramValue);
 			if(tr98ApWpsEnable != apWpsEnable) {
@@ -5548,7 +5548,7 @@
 				json_object_put(apWpsJobj);
 				return ZCFG_INVALID_PARAM_VALUE;
 			}
-		}			
+		}
 	}
 
 	if((ret = zcfgFeObjJsonGet(RDM_OID_WIFI_ACCESS_POINT_SEC, &apIid, &apSecJobj)) != ZCFG_SUCCESS) {
@@ -5569,12 +5569,12 @@
 	}
 
 	ret = ZCFG_SUCCESS;
-	
+
 
 	tr98WpsEnable = json_object_get_boolean(json_object_object_get(tr98Jobj, "Enable"));
 	tr98WpsMthSupportStr =	json_object_get_string(json_object_object_get(tr98Jobj, "ConfigMethodsSupported"));
 	tr98WpsMthEnabledStr =	json_object_get_string(json_object_object_get(tr98Jobj, "ConfigMethodsEnabled"));
-	
+
 #if 0
 	tr181WpsEnable = json_object_get_boolean(json_object_object_get(apWpsJobj, "Enable"));
 	if(!tr181WpsEnable && tr98WpsEnable && strstr(tr181ModeEnabled, "WEP")) {
@@ -5606,12 +5606,12 @@
 
 	if(tr98WpsMthEnabled == WPS_PIN) wpsPin = WPS_STA_PIN;
 #else
-	
+
 #endif
 
 	paramList = tr98Obj[handler].parameter;
 	while(paramList->name != NULL) {
-		/*Write new parameter value from tr98 object to tr181 objects*/		
+		/*Write new parameter value from tr98 object to tr181 objects*/
 		paramValue = json_object_object_get(tr98Jobj, paramList->name);
 		if(!paramValue) {
 			paramList++;
@@ -5687,7 +5687,7 @@
 		json_object_object_add(apWpsJobj, "ConfigMethodsEnabled", json_object_new_string("PIN"));
 		goto write_parameters_complete;
 	}
- 
+
 	if(tr98WpsMthEnabled == WPS_PBC) {
 		json_object_object_add(apWpsJobj, "X_ZYXEL_WPS_EnablePBC", json_object_new_boolean(true));
 		json_object_object_add(apWpsJobj, "X_ZYXEL_WPS_StationPin", json_object_new_string("00000000"));
@@ -5702,7 +5702,7 @@
 		}
 		sprintf(wpsStationPinStr, "%04d", wpsStationPin);
 
-		json_object_object_add(apWpsJobj, "X_ZYXEL_WPS_EnableStaPin", json_object_new_boolean(true));				
+		json_object_object_add(apWpsJobj, "X_ZYXEL_WPS_EnableStaPin", json_object_new_boolean(true));
 		json_object_object_add(apWpsJobj, "X_ZYXEL_WPS_StationPin", json_object_new_string(wpsStationPinStr));
 	}
 #endif
@@ -5712,7 +5712,7 @@
 	if(multiJobj){
 		json_object_put(tmpObj);
 	}
-	else if(ret == ZCFG_SUCCESS) {		
+	else if(ret == ZCFG_SUCCESS) {
 		if((ret = zcfgFeObjJsonSet(RDM_OID_WIFI_ACCESS_POINT_WPS, &apIid, apWpsJobj, NULL)) != ZCFG_SUCCESS ) {
 			json_object_put(apWpsJobj);
 			return ret;
@@ -5734,7 +5734,7 @@
 {
 #ifdef SOL_TR69_NO_LAN_HOST
 	int idx = 0;
-	uint32_t hostNum = 0;	
+	uint32_t hostNum = 0;
 	FILE *arpfp = NULL;
 	char line[512]={0};
 	int type, flags;
@@ -5750,9 +5750,9 @@
 
 	//Refresh Hosts device list
 	lanDevHostListUpdate(&hostlist, 0);
-	
+
 	sscanf(tr98FullPathName, "%*[^.].%*[^.].%*d.WLANConfiguration.%*d.AssociatedDevice.%d", &idx);
-	
+
 	/*ARP table*/
 	zcfgLog(ZCFG_LOG_INFO, "%s(): open %s\n", __FUNCTION__, ARPFILE);
 	arpfp = fopen(ARPFILE, "r");
@@ -5780,12 +5780,12 @@
 			continue;
 		}
 
-		// all LAN dev should be br+ ,no eth0, eth1, eth2... 
+		// all LAN dev should be br+ ,no eth0, eth1, eth2...
 		if(strstr(dev, "br") == NULL)
 			continue;
 
 		theHostlist = findHostFromList(hostlist, hwa);
-	
+
 		if(theHostlist){
 			hostNum++;
 			if(idx == hostNum) {
@@ -5796,7 +5796,7 @@
 				break;
 			}
 		}
-	}	
+	}
 	fclose(arpfp);
 
 	freeHostList(hostlist);
@@ -5841,7 +5841,7 @@
 		zcfgLog(ZCFG_LOG_ERR, "%s : Get WiFi.SSID Fail\n", __FUNCTION__);
 		return ret;
 	}
-	json_object_put(ssidJobj);	
+	json_object_put(ssidJobj);
 
 	IID_INIT(apIid);
 	while((ret = feObjJsonGetNext(RDM_OID_WIFI_ACCESS_POINT, &apIid, &apJobj, TR98_GET_WITHOUT_UPDATE)) == ZCFG_SUCCESS) {
@@ -5897,7 +5897,7 @@
 				foundIP = true;
 				break;
 			}
-		}	
+		}
 	}
 	if(arpfp != NULL)
 		fclose(arpfp);
@@ -5906,8 +5906,8 @@
 	*tr98Jobj = json_object_new_object();
 	paramList = tr98Obj[handler].parameter;
 	while(paramList->name != NULL) {
-		/*Write parameter value from tr181 objects to tr98 object*/		
-		
+		/*Write parameter value from tr181 objects to tr98 object*/
+
 		/*special case*/
 		if(!strcmp(paramList->name, "AssociatedDeviceMACAddress")) {
 			paramValue = json_object_object_get(assocDevJobj, "MACAddress");
@@ -5926,26 +5926,26 @@
 			paramList++;
 			continue;
 		}
-		
+
 		paramValue = json_object_object_get(assocDevJobj, paramList->name);
 		if(paramValue != NULL) {
 			json_object_object_add(*tr98Jobj, paramList->name, JSON_OBJ_COPY(paramValue));
 			paramList++;
 			continue;
 		}
-			
+
 
 		/*Not defined in tr181, give it a default value*/
 		printf("Can't find parameter %s in TR181\n", paramList->name);
-		paramList++;	
+		paramList++;
 	}
 
 	json_object_put(assocDevJobj);
 
 	return ZCFG_SUCCESS;
-	
+
 #endif
-	
+
 	return ZCFG_SUCCESS;
 }
 
@@ -5970,7 +5970,7 @@
 	bool found = false;
 	struct json_object *paramValue = NULL;
 	tr98Parameter_t *paramList = NULL;
-	
+
 	printf("%s : Enter\n", __FUNCTION__);
 
 	strcpy(wlanConfigPath, tr98FullPathName);
@@ -5988,7 +5988,7 @@
 		zcfgLog(ZCFG_LOG_ERR, "%s : Get WiFi.SSID Fail\n", __FUNCTION__);
 		return ret;
 	}
-	json_object_put(ssidJobj);	
+	json_object_put(ssidJobj);
 
 	IID_INIT(apIid);
 	while((ret = feObjJsonGetNext(RDM_OID_WIFI_ACCESS_POINT, &apIid, &apJobj, TR98_GET_WITHOUT_UPDATE)) == ZCFG_SUCCESS) {
@@ -6019,7 +6019,7 @@
 	*tr98Jobj = json_object_new_object();
 	paramList = tr98Obj[handler].parameter;
 	while(paramList->name != NULL) {
-		/*Write parameter value from tr181 objects to tr98 object*/		
+		/*Write parameter value from tr181 objects to tr98 object*/
 		paramValue = json_object_object_get(assocDevStatJobj, paramList->name);
 		if(paramValue != NULL) {
 			json_object_object_add(*tr98Jobj, paramList->name, JSON_OBJ_COPY(paramValue));
@@ -6029,7 +6029,7 @@
 
 		/*Not defined in tr181, give it a default value*/
 		printf("Can't find parameter %s in TR181\n", paramList->name);
-		paramList++;	
+		paramList++;
 	}
 
 	json_object_put(assocDevStatJobj);
@@ -6081,11 +6081,11 @@
 	if(zcfgFe98To181MappingNameGet(tr98FullPathName, mapObj) != ZCFG_SUCCESS) {
 		return ZCFG_INVALID_OBJECT;
 	}
-	
+
 	IID_INIT(iid);
 	snprintf(tr181Obj, sizeof(tr181Obj),"Device.%s", mapObj);
 	oid = zcfgFeObjNameToObjId(tr181Obj, &iid);
-	
+
 	/*fill up tr98 devInfo object*/
 	paramList = tr98Obj[handler].parameter;
 	while(paramList->name != NULL) {
@@ -6093,7 +6093,7 @@
 			paramList++;
 			continue;
 		}
-		
+
 		/*special case*/
 
 		attrValue = zcfgFeParamAttrGetByName(oid, paramList->name);
@@ -6102,7 +6102,7 @@
 		}
 		break;
 	}
-	
+
 	return attrValue;
 }
 
@@ -6120,7 +6120,7 @@
 	if(zcfgFe98To181MappingNameGet(tr98FullPathName, mapObj) != ZCFG_SUCCESS) {
 		return ZCFG_INVALID_OBJECT;
 	}
-	
+
 	IID_INIT(iid);
 	snprintf(tr181Obj, sizeof(tr181Obj),"Device.%s", mapObj);
 	oid = zcfgFeObjNameToObjId(tr181Obj, &iid);
@@ -6133,7 +6133,7 @@
 			continue;
 		}
 		/*special case*/
-		
+
 		attrValue = zcfgFeParamAttrGetByName(oid, paramList->name);
 		if(attrValue < 0) {
 			ret = ZCFG_INVALID_ARGUMENTS;
@@ -6148,7 +6148,7 @@
 		}
 		break;
 	}
-	
+
 	return ret;
 }
 #endif
@@ -6170,7 +6170,7 @@
 	objIndex_t apIid;
 	struct json_object *apJobj = NULL, *apSecJobj = NULL;
 	struct json_object *paramValue = NULL;
-	tr98Parameter_t *paramList = NULL;	
+	tr98Parameter_t *paramList = NULL;
 
 	sscanf(tr98FullPathName, "%*[^.].%*[^.].%*d.%*[^.].%*d.PreSharedKey.%d", &idx);
 
@@ -6214,15 +6214,15 @@
 	*tr98Jobj = json_object_new_object();
 	paramList = tr98Obj[handler].parameter;
 	while(paramList->name != NULL) {
-		/*Write parameter value from tr181 objects to tr98 object*/		
+		/*Write parameter value from tr181 objects to tr98 object*/
 		if(!strcmp(paramList->name, "PreSharedKey")) {
 			json_object_object_add(*tr98Jobj, paramList->name, json_object_new_string(""));
 			paramList++;
-			continue;	
+			continue;
 		}else if(!strcmp(paramList->name, "KeyPassphrase")) {
 			json_object_object_add(*tr98Jobj, paramList->name, json_object_new_string(""));
 			paramList++;
-			continue;	
+			continue;
 		}
 
 		paramValue = json_object_object_get(apSecJobj, paramList->name);
@@ -6260,7 +6260,7 @@
 	struct json_object *paramValue = NULL;
 	struct json_object *tr181ParamValue = NULL;
 	struct json_object *tmpObj = NULL;
-	tr98Parameter_t *paramList = NULL;	
+	tr98Parameter_t *paramList = NULL;
 	bool setAutoGenPsk = false;
 	const char *setPreSharedKey = NULL;
 	const char *setKeyPassPhrase = NULL;
@@ -6303,7 +6303,7 @@
 			json_object_put(apJobj);
 			return ret;
 		}
-		json_object_put(apJobj);		
+		json_object_put(apJobj);
 	}
 
 	if(multiJobj){
@@ -6316,7 +6316,7 @@
 
 	paramList = tr98Obj[handler].parameter;
 	while(paramList->name != NULL) {
-		/*Write new parameter value from tr98 object to tr181 objects*/		
+		/*Write new parameter value from tr98 object to tr181 objects*/
 		paramValue = json_object_object_get(tr98Jobj, paramList->name);
 		if(paramValue != NULL) {
 			tr181ParamValue = json_object_object_get(apSecJobj, paramList->name);
@@ -6357,7 +6357,7 @@
 			}
 		}
 		ztrdbg(ZTR_DL_INFO, "%s: Can't find parameter %s in TR181\n", __FUNCTION__, paramList->name);
-		paramList++;	
+		paramList++;
 	}
 
 	/*Set Device.WiFi.AccessPoint.i.Security*/
@@ -6394,14 +6394,14 @@
 	objIndex_t apIid;
 	struct json_object *apJobj = NULL, *apSecJobj = NULL;
 	struct json_object *paramValue = NULL;
-	tr98Parameter_t *paramList = NULL;	
+	tr98Parameter_t *paramList = NULL;
 
 	sscanf(tr98FullPathName, "%*[^.].%*[^.].%*d.%*[^.].%*d.WEPKey.%d", &idx);
 
 	/*There should be only one WEPKey Object*/
 	if(idx > 4)
 		return ZCFG_NO_MORE_INSTANCE;
-	
+
 	strcpy(tr98TmpName, tr98FullPathName);
 	ptr = strstr(tr98TmpName, ".WEPKey");
 	*ptr = '\0';
@@ -6446,7 +6446,7 @@
 			paramList++;
 			continue;
 		}
-		/*Write parameter value from tr181 objects to tr98 object*/		
+		/*Write parameter value from tr181 objects to tr98 object*/
 		paramValue = json_object_object_get(apSecJobj, paramList->name);
 		if(paramValue != NULL) {
 			json_object_object_add(*tr98Jobj, paramList->name, JSON_OBJ_COPY(paramValue));
@@ -6478,13 +6478,13 @@
 	/*Get related tr181 objects*/
 	IID_INIT(objIid);
 	if((ret = feObjJsonGet(RDM_OID_WIFI_DIAGNOSTIC, &objIid, &jobj, updateFlag)) != ZCFG_SUCCESS)
-		return ret;	
+		return ret;
 
 	/*fill up tr98 object from related tr181 objects*/
 	*tr98Jobj = json_object_new_object();
 	paramList = tr98Obj[handler].parameter;
 	while(paramList->name != NULL) {
-		/*Write parameter value from tr181 objects to tr98 object*/		
+		/*Write parameter value from tr181 objects to tr98 object*/
 		paramValue = json_object_object_get(jobj, paramList->name);
 		if(paramValue != NULL) {
 			json_object_object_add(*tr98Jobj, paramList->name, JSON_OBJ_COPY(paramValue));
@@ -6494,7 +6494,7 @@
 
 		/*Not defined in tr181, give it a default value*/
 		printf("Can't find parameter %s in TR181\n", paramList->name);
-		paramList++;	
+		paramList++;
 	}
 
 	json_object_put(jobj);
@@ -6527,17 +6527,17 @@
 
 	paramList = tr98Obj[handler].parameter;
 	while(paramList->name != NULL) {
-		/*Write new parameter value from tr98 object to tr181 objects*/	
+		/*Write new parameter value from tr98 object to tr181 objects*/
 		paramValue = json_object_object_get(tr98Jobj, paramList->name);
 		if(paramValue != NULL) {
 			if(!strcmp(paramList->name, "DiagnosticsState")) {
 				if(!strcmp(json_object_get_string(paramValue), "Requested")){
-					if(myEid == ZCFG_EID_TR69){
+					if(zcfg_msg_eidGet() == ZCFG_EID_TR69){
 						json_object_object_add(jobj, "X_ZYXEL_Creator", json_object_new_string(CREATOR_ACS));
 					}
 				}
 			}
-			
+
 			tr181ParamValue = json_object_object_get(jobj, paramList->name);
 			if(tr181ParamValue != NULL) {
 				json_object_object_add(jobj, paramList->name, JSON_OBJ_COPY(paramValue));
@@ -6548,7 +6548,7 @@
 
 		printf("Can't find parameter %s in TR181\n", paramList->name);
 
-		paramList++;	
+		paramList++;
 	}
 
 	if(multiJobj){
@@ -6608,11 +6608,11 @@
 	if(zcfgFe98To181MappingNameGet(tr98FullPathName, mapObj) != ZCFG_SUCCESS) {
 		return ZCFG_INVALID_OBJECT;
 	}
-	
+
 	IID_INIT(iid);
 	snprintf(tr181Obj, sizeof(tr181Obj),"Device.%s", mapObj);
 	oid = zcfgFeObjNameToObjId(tr181Obj, &iid);
-	
+
 	/*fill up tr98 devInfo object*/
 	paramList = tr98Obj[handler].parameter;
 	while(paramList->name != NULL) {
@@ -6620,7 +6620,7 @@
 			paramList++;
 			continue;
 		}
-		
+
 		/*special case*/
 
 		attrValue = zcfgFeParamAttrGetByName(oid, paramList->name);
@@ -6629,7 +6629,7 @@
 		}
 		break;
 	}
-	
+
 	return attrValue;
 }
 
@@ -6647,7 +6647,7 @@
 	if(zcfgFe98To181MappingNameGet(tr98FullPathName, mapObj) != ZCFG_SUCCESS) {
 		return ZCFG_INVALID_OBJECT;
 	}
-	
+
 	IID_INIT(iid);
 	snprintf(tr181Obj, sizeof(tr181Obj),"Device.%s", mapObj);
 	oid = zcfgFeObjNameToObjId(tr181Obj, &iid);
@@ -6660,7 +6660,7 @@
 			continue;
 		}
 		/*special case*/
-		
+
 		attrValue = zcfgFeParamAttrGetByName(oid, paramList->name);
 		if(attrValue < 0) {
 			ret = ZCFG_INVALID_ARGUMENTS;
@@ -6675,7 +6675,7 @@
 		}
 		break;
 	}
-	
+
 	return ret;
 }
 
@@ -6689,20 +6689,20 @@
 	tr98Parameter_t *paramList = NULL;
 
 	printf("%s : Enter\n", __FUNCTION__);
-	
+
 	IID_INIT(iid);
 	iid.level = 1;
 	sscanf(tr98FullPathName, "InternetGatewayDevice.X_ZYXEL_NeighboringWiFiDiagnostic.Result.%hhu", &iid.idx[0]);
-	
+
 	if((ret = feObjJsonGet(RDM_OID_WIFI_DIAGNOSTIC_RESULTS, &iid, &jobj, TR98_GET_WITHOUT_UPDATE)) != ZCFG_SUCCESS){
-		return ret;	
+		return ret;
 	}
 
 	/*fill up tr98 object from related tr181 objects*/
 	*tr98Jobj = json_object_new_object();
 	paramList = tr98Obj[handler].parameter;
 	while(paramList->name != NULL) {
-		/*Write parameter value from tr181 objects to tr98 object*/		
+		/*Write parameter value from tr181 objects to tr98 object*/
 		paramValue = json_object_object_get(jobj, paramList->name);
 		if(paramValue != NULL) {
 			json_object_object_add(*tr98Jobj, paramList->name, JSON_OBJ_COPY(paramValue));
@@ -6712,7 +6712,7 @@
 
 		/*Not defined in tr181, give it a default value*/
 		printf("Can't find parameter %s in TR181\n", paramList->name);
-		paramList++;	
+		paramList++;
 	}
 
 	json_object_put(jobj);
@@ -6764,10 +6764,10 @@
 	iid.level = 1;
 	sscanf(tr98FullPathName, "InternetGatewayDevice.X_ZYXEL_NeighboringWiFiDiagnostic.Result.%hhu", &iid.idx[0]);
 	if((ret = feObjJsonGet(oid, &iid, &jobj, TR98_GET_WITHOUT_UPDATE)) != ZCFG_SUCCESS)
-		return ret; 
-	
+		return ret;
+
 	json_object_put(jobj);
-	
+
 	/*fill up tr98 devInfo object*/
 	paramList = tr98Obj[handler].parameter;
 	while(paramList->name != NULL) {
@@ -6775,7 +6775,7 @@
 			paramList++;
 			continue;
 		}
-		
+
 		/*special case*/
 
 		attrValue = zcfgFeParamAttrGetByName(oid, paramList->name);
@@ -6784,7 +6784,7 @@
 		}
 		break;
 	}
-	
+
 	return attrValue;
 }
 
@@ -6803,8 +6803,8 @@
 	iid.level = 1;
 	sscanf(tr98FullPathName, "InternetGatewayDevice.X_ZYXEL_NeighboringWiFiDiagnostic.Result.%hhu", &iid.idx[0]);
 	if((ret = feObjJsonGet(oid, &iid, &jobj, TR98_GET_WITHOUT_UPDATE)) != ZCFG_SUCCESS)
-		return ret; 
-	
+		return ret;
+
 	json_object_put(jobj);
 
 	paramList = tr98Obj[handler].parameter;
@@ -6815,7 +6815,7 @@
 			continue;
 		}
 		/*special case*/
-		
+
 		attrValue = zcfgFeParamAttrGetByName(oid, paramList->name);
 		if(attrValue < 0) {
 			ret = ZCFG_INVALID_ARGUMENTS;
@@ -6830,7 +6830,7 @@
 		}
 		break;
 	}
-	
+
 	return ret;
 }
 
@@ -6849,14 +6849,14 @@
 	struct json_object *paramValue = NULL;
 	struct json_object *tr181ParamValue = NULL;
 	struct json_object *tmpObj = NULL;
-	tr98Parameter_t *paramList = NULL;	
+	tr98Parameter_t *paramList = NULL;
 
 	sscanf(tr98FullPathName, "%*[^.].%*[^.].%*d.%*[^.].%*d.WEPKey.%d", &idx);
 
 	/*There should be only one WEPKey Object*/
 	if(idx > 4)
 		return ZCFG_NO_MORE_INSTANCE;
-	
+
 	strcpy(tr98TmpName, tr98FullPathName);
 	ptr = strstr(tr98TmpName, ".WEPKey");
 	*ptr = '\0';
@@ -6886,7 +6886,7 @@
 			json_object_put(apJobj);
 			return ret;
 		}
-		json_object_put(apJobj);		
+		json_object_put(apJobj);
 	}
 
 	if(multiJobj){
@@ -6915,7 +6915,7 @@
 					}else{
 						json_object_object_add(apSecJobj, paramList->name, JSON_OBJ_COPY(paramValue));
 					}
-					json_object_object_add(apSecJobj, "X_ZYXEL_WepModeSelect", json_object_new_string("WEP-128"));					
+					json_object_object_add(apSecJobj, "X_ZYXEL_WepModeSelect", json_object_new_string("WEP-128"));
 					paramList++;
 					continue;
 				}
@@ -6928,7 +6928,7 @@
 			}
 		}
 		ztrdbg(ZTR_DL_INFO, "%s: Can't find parameter %s in TR181\n", __FUNCTION__, paramList->name);
-		paramList++;	
+		paramList++;
 	}
 
 	/*Set Device.WiFi.AccessPoint.i.Security*/
@@ -6947,7 +6947,7 @@
 	return ZCFG_SUCCESS;
 }
 
-/*  
+/*
  *   TR98 Object Name : InternetGatewayDevice.LANDevice.i.LANHostConfigManagement.IPInterface.i.X_ZYXEL_IPv6Address.i.
  *
  *   Related object in TR181:
@@ -6978,7 +6978,7 @@
 
 	*ptr = '\0';
 	if(zcfgFe98To181MappingNameGet(tr98FullPathName, ipIface) != ZCFG_SUCCESS) {
-		/*	The instance number of WANIPConnection.i will be continuous. Therefore, 
+		/*	The instance number of WANIPConnection.i will be continuous. Therefore,
 		 *	just return "ZCFG_NO_MORE_INSTANCE" when there is no related mapping of tr181 for
 		 *	this WANIPConnection object.
 		 */
@@ -7002,7 +7002,7 @@
 		return ret;
 	}
 
-	
+
 	/*Fill up tr98 WANIPConnection.i object*/
 	*tr98Jobj = json_object_new_object();
 	paramList = tr98Obj[handler].parameter;
@@ -7044,9 +7044,9 @@
 
 	json_object_put(ipv6AddrJobj);
 
-	return ZCFG_SUCCESS;	
+	return ZCFG_SUCCESS;
 }
-/*	
+/*
  *	 TR98 Object Name : InternetGatewayDevice.LANDevice.i.LANHostConfigManagement.IPInterface.i.X_ZYXEL_IPv6Address.i.
  *
  *	 Related object in TR181:
@@ -7064,7 +7064,7 @@
 	struct json_object *ipv6AddrJobj = NULL;
 	struct json_object *paramValue = NULL;
 	struct json_object *tr181ParamValue = NULL;
-	struct json_object *tmpObj = NULL;	
+	struct json_object *tmpObj = NULL;
 	tr98Parameter_t *paramList = NULL;
 	uint8_t ipv6Instance = 0;
 	char *ptr = NULL;
@@ -7072,7 +7072,7 @@
 	uint8_t prefixInstance = 0;
 
 	zcfgLog(ZCFG_LOG_INFO, "%s : Enter\n", __FUNCTION__);
-	
+
 	strcpy(tr98ConnObjName, tr98FullPathName);
 	ptr = strstr(tr98ConnObjName, ".X_ZYXEL_IPv6Address");
 	sscanf(ptr, ".X_ZYXEL_IPv6Address.%hhu", &ipv6Instance);
@@ -7087,7 +7087,7 @@
 	sscanf(ipIface, "IP.Interface.%hhu", &ipv6AddrIid.idx[0]);
 	ipv6AddrIid.level = 2;
 	ipv6AddrIid.idx[1] = ipv6Instance;
-	
+
 	if((ret = zcfgFeObjJsonGet(RDM_OID_IP_IFACE_V6_ADDR, &ipv6AddrIid, &ipv6AddrJobj)) != ZCFG_SUCCESS) {
 		zcfgLog(ZCFG_LOG_ERR, "%s : Get IP.Interface.%d.IPv6Address.%d Fail\n", __FUNCTION__, ipv6AddrIid.idx[0], ipv6AddrIid.idx[1]);
 		return ret;
@@ -7102,7 +7102,7 @@
 
 	paramList = tr98Obj[handler].parameter;
 	while(paramList->name != NULL) {
-		/*Write new parameter value from tr98 object to tr181 objects*/ 	
+		/*Write new parameter value from tr98 object to tr181 objects*/
 		paramValue = json_object_object_get(tr98Jobj, paramList->name);
 		if(paramValue != NULL) {
 			/*special case*/
@@ -7119,7 +7119,7 @@
 						continue;
 					}
 				}
-			}			
+			}
 			/*Write value from WANIPConnection to Device.IP.Interface.i*/
 			tr181ParamValue = json_object_object_get(ipv6AddrJobj, paramList->name);
 			if(tr181ParamValue != NULL) {
@@ -7131,12 +7131,12 @@
 			/*special case*/
 
 		}
-		paramList++;	
+		paramList++;
 	}
 
 
 	/*Set Device.IP.Interface.i*/
-	if(multiJobj){		
+	if(multiJobj){
 		json_object_put(tmpObj);
 	}
 	else{
@@ -7155,7 +7155,7 @@
 }
 
 
-/*  
+/*
  *   TR98 Object Name : InternetGatewayDevice.LANDevice.i.LANHostConfigManagement.IPInterface.i.X_ZYXEL_IPv6Address.i.
  *
  *   Related object in TR181:
@@ -7195,7 +7195,7 @@
 	return ZCFG_SUCCESS;
 }
 
-/*  
+/*
  *   TR98 Object Name : InternetGatewayDevice.LANDevice.i.LANHostConfigManagement.IPInterface.i.X_ZYXEL_IPv6Address.i.
  *
  *   Related object in TR181:
@@ -7210,7 +7210,7 @@
 	char *ptr = NULL;
 	uint8_t ipv6Instance = 0;
 	char ipIface[32] = {0};
-	
+
 	zcfgLog(ZCFG_LOG_INFO, "%s : Enter\n", __FUNCTION__);
 	strcpy(tr98ConnObjName, tr98FullPathName);
 	ptr = strstr(tr98ConnObjName, ".X_ZYXEL_IPv6Address");
@@ -7235,7 +7235,7 @@
 	return ret;
 }
 
-/*  
+/*
  *   TR98 Object Name : InternetGatewayDevice.LANDevice.i.LANHostConfigManagement.IPInterface.i.X_ZYXEL_IPv6Prefix.i.
  *
  *   Related object in TR181:
@@ -7262,7 +7262,7 @@
 	*ptr = '\0';
 
 	if(zcfgFe98To181MappingNameGet(tr98FullPathName, ipIface) != ZCFG_SUCCESS) {
-		/*  The instance number of WANIPConnection.i will be continuous. Therefore, 
+		/*  The instance number of WANIPConnection.i will be continuous. Therefore,
 		 *  just return "ZCFG_NO_MORE_INSTANCE" when there is no related mapping of tr181 for
 		 *  this WANIPConnection object.
 		 */
@@ -7272,7 +7272,7 @@
 	sscanf(ipIface, "IP.Interface.%hhu", &ipv6PrefixIid.idx[0]);
 	ipv6PrefixIid.level = 2;
 	ipv6PrefixIid.idx[1] = ipv6Instance;
-	
+
 	if((ret = feObjJsonGet(RDM_OID_IP_IFACE_V6_PREFIX, &ipv6PrefixIid, &ipv6PrefixJobj, updateFlag)) != ZCFG_SUCCESS) {
 		zcfgLog(ZCFG_LOG_ERR, "%s : Get IP.Interface.%d.IPv6Prefix.%d Fail\n", __FUNCTION__, ipv6PrefixIid.idx[0], ipv6PrefixIid.idx[1]);
 		return ret;
@@ -7296,9 +7296,9 @@
 
 	json_object_put(ipv6PrefixJobj);
 
-	return ZCFG_SUCCESS;	
+	return ZCFG_SUCCESS;
 }
-/*  
+/*
  *   TR98 Object Name : InternetGatewayDevice.LANDevice.i.LANHostConfigManagement.IPInterface.i.X_ZYXEL_IPv6Prefix.i.
  *
  *   Related object in TR181:
@@ -7315,13 +7315,13 @@
 	struct json_object *ipv6PrefixJobj = NULL;
 	struct json_object *paramValue = NULL;
 	struct json_object *tr181ParamValue = NULL;
-	struct json_object *tmpObj = NULL;	
+	struct json_object *tmpObj = NULL;
 	tr98Parameter_t *paramList = NULL;
 	uint8_t ipv6Instance = 0;
 	char *ptr = NULL;
 
 	zcfgLog(ZCFG_LOG_INFO, "%s : Enter\n", __FUNCTION__);
-	
+
 	strcpy(tr98ConnObjName, tr98FullPathName);
 	ptr = strstr(tr98ConnObjName, ".X_ZYXEL_IPv6Prefix");
 	sscanf(ptr, ".X_ZYXEL_IPv6Prefix.%hhu", &ipv6Instance);
@@ -7336,7 +7336,7 @@
 	sscanf(ipIface, "IP.Interface.%hhu", &ipv6PrefixIid.idx[0]);
 	ipv6PrefixIid.level = 2;
 	ipv6PrefixIid.idx[1] = ipv6Instance;
-	
+
 	if((ret = zcfgFeObjJsonGet(RDM_OID_IP_IFACE_V6_PREFIX, &ipv6PrefixIid, &ipv6PrefixJobj)) != ZCFG_SUCCESS) {
 		zcfgLog(ZCFG_LOG_ERR, "%s : Get IP.Interface.%d.IPv6Prefix.%d Fail\n", __FUNCTION__, ipv6PrefixIid.idx[0], ipv6PrefixIid.idx[1]);
 		return ret;
@@ -7351,7 +7351,7 @@
 
 	paramList = tr98Obj[handler].parameter;
 	while(paramList->name != NULL) {
-		/*Write new parameter value from tr98 object to tr181 objects*/		
+		/*Write new parameter value from tr98 object to tr181 objects*/
 		paramValue = json_object_object_get(tr98Jobj, paramList->name);
 		if(paramValue != NULL) {
 			/*Write value from WANIPConnection to Device.IP.Interface.i*/
@@ -7364,7 +7364,7 @@
 
 			/*special case*/
 		}
-		paramList++;	
+		paramList++;
 	}
 
 
@@ -7387,7 +7387,7 @@
 	return ret;
 }
 
-/*  
+/*
  *   TR98 Object Name : InternetGatewayDevice.LANDevice.i.LANHostConfigManagement.IPInterface.i.X_ZYXEL_IPv6Prefix.i.
  *
  *   Related object in TR181:
@@ -7426,7 +7426,7 @@
 	return ZCFG_SUCCESS;
 }
 
-/*  
+/*
  *   TR98 Object Name : InternetGatewayDevice.LANDevice.i.LANHostConfigManagement.IPInterface.i.X_ZYXEL_IPv6Prefix.i.
  *
  *   Related object in TR181:
@@ -7441,7 +7441,7 @@
 	char *ptr = NULL;
 	uint8_t ipv6Instance = 0;
 	char ipIface[32] = {0};
-	
+
 	zcfgLog(ZCFG_LOG_INFO, "%s : Enter\n", __FUNCTION__);
 	strcpy(tr98ConnObjName, tr98FullPathName);
 	ptr = strstr(tr98ConnObjName, ".X_ZYXEL_IPv6Prefix");
@@ -7466,7 +7466,7 @@
 	return ret;
 }
 
-/*  
+/*
  *   TR98 Object Name : InternetGatewayDevice.LANDevice.i.LANHostConfigManagement.IPInterface.i.X_ZYXEL_RouterAdvertisement.
  *
  *   Related object in TR181:
@@ -7491,13 +7491,13 @@
 	*ptr = '\0';
 
 	if(zcfgFe98To181MappingNameGet(tr98ConnObjName, ipIface) != ZCFG_SUCCESS) {
-		/*  The instance number of WANIPConnection.i will be continuous. Therefore, 
+		/*  The instance number of WANIPConnection.i will be continuous. Therefore,
 		 *  just return "ZCFG_NO_MORE_INSTANCE" when there is no related mapping of tr181 for
 		 *  this WANIPConnection object.
 		 */
 		return ZCFG_NO_MORE_INSTANCE;
 	}
-	
+
 	IID_INIT(ifsetIid);
 	while((ret = feObjJsonGetNext(RDM_OID_RT_ADV_INTF_SET, &ifsetIid, &ifsetJobj, updateFlag)) == ZCFG_SUCCESS) {
 		strcpy(ifBuf, json_object_get_string(json_object_object_get(ifsetJobj, "Interface")));
@@ -7530,10 +7530,10 @@
 
 	json_object_put(ifsetJobj);
 
-	return ZCFG_SUCCESS;	
+	return ZCFG_SUCCESS;
 }
 
-/*  
+/*
  *   TR98 Object Name : InternetGatewayDevice.LANDevice.i.LANHostConfigManagement.IPInterface.i.X_ZYXEL_RouterAdvertisement.
  *
  *   Related object in TR181:
@@ -7550,12 +7550,12 @@
 	struct json_object *ifsetJobj = NULL, *ipIfaceJobj = NULL;
 	struct json_object *paramValue = NULL;
 	struct json_object *tr181ParamValue = NULL;
-	struct json_object *tmpObj = NULL;	
+	struct json_object *tmpObj = NULL;
 	tr98Parameter_t *paramList = NULL;
 	char *ptr = NULL;
 
 	zcfgLog(ZCFG_LOG_INFO, "%s : Enter\n", __FUNCTION__);
-	
+
 	strcpy(tr98ConnObjName, tr98FullPathName);
 	ptr = strstr(tr98ConnObjName, ".X_ZYXEL_RouterAdvertisement");
 	*ptr = '\0';
@@ -7606,7 +7606,7 @@
 
 	paramList = tr98Obj[handler].parameter;
 	while(paramList->name != NULL) {
-		/*Write new parameter value from tr98 object to tr181 objects*/		
+		/*Write new parameter value from tr98 object to tr181 objects*/
 		paramValue = json_object_object_get(tr98Jobj, paramList->name);
 		if(paramValue != NULL) {
 			if(!strcmp(paramList->name, "AdvManagedFlag")){
@@ -7631,7 +7631,7 @@
 
 			/*special case*/
 		}
-		paramList++;	
+		paramList++;
 	}
 
 
@@ -7659,7 +7659,7 @@
 	if((n = strlen(str1))) {char *ptr = str1+n; sprintf(ptr, ",%s", str2);}\
 	else strcat(str1, str2);}
 
-/*  
+/*
  *   TR98 Object Name : InternetGatewayDevice.LANDevice.i.LANHostConfigManagement.IPInterface.i.X_ZYXEL_DHCPv6Server.
  *
  *   Related object in TR181:
@@ -7690,13 +7690,13 @@
 	*ptr = '\0';
 
 	if(zcfgFe98To181MappingNameGet(tr98ConnObjName, ipIface) != ZCFG_SUCCESS) {
-		/*  The instance number of WANIPConnection.i will be continuous. Therefore, 
+		/*  The instance number of WANIPConnection.i will be continuous. Therefore,
 		 *  just return "ZCFG_NO_MORE_INSTANCE" when there is no related mapping of tr181 for
 		 *  this WANIPConnection object.
 		 */
 		return ZCFG_NO_MORE_INSTANCE;
 	}
-	
+
 	IID_INIT(srvpoolIid);
 	while((ret = feObjJsonGetNext(RDM_OID_DHCPV6_SRV_POOL, &srvpoolIid, &srvpoolJobj, updateFlag)) == ZCFG_SUCCESS) {
 		strcpy(ifBuf, json_object_get_string(json_object_object_get(srvpoolJobj, "Interface")));
@@ -7747,7 +7747,7 @@
 								else
 									snprintf(tr98Prefix, sizeof(tr98Prefix),"%s.X_ZYXEL_IPv6Prefix.%d", ipIface, prefixInstance);
 							}
-						}			
+						}
 #endif
 						token = strtok_r(token_tmp, ",", &token_tmp);
 					}
@@ -7772,10 +7772,10 @@
 
 	json_object_put(srvpoolJobj);
 
-	return ZCFG_SUCCESS;	
+	return ZCFG_SUCCESS;
 }
 
-/*  
+/*
  *   TR98 Object Name : InternetGatewayDevice.LANDevice.i.LANHostConfigManagement.IPInterface.i.X_ZYXEL_DHCPv6Server.
  *
  *   Related object in TR181:
@@ -7794,13 +7794,13 @@
 	struct json_object *srvpoolJobj = NULL;
 	struct json_object *paramValue = NULL;
 	struct json_object *tr181ParamValue = NULL;
-	struct json_object *tmpObj = NULL;	
+	struct json_object *tmpObj = NULL;
 	tr98Parameter_t *paramList = NULL;
 	char *ptr = NULL;
 	uint8_t prefixInstance = 0;
 
 	zcfgLog(ZCFG_LOG_INFO, "%s : Enter\n", __FUNCTION__);
-	
+
 	strcpy(tr98ConnObjName, tr98FullPathName);
 	ptr = strstr(tr98ConnObjName, ".X_ZYXEL_DHCPv6Server");
 	*ptr = '\0';
@@ -7833,7 +7833,7 @@
 
 	paramList = tr98Obj[handler].parameter;
 	while(paramList->name != NULL) {
-		/*Write new parameter value from tr98 object to tr181 objects*/		
+		/*Write new parameter value from tr98 object to tr181 objects*/
 		paramValue = json_object_object_get(tr98Jobj, paramList->name);
 		if(paramValue != NULL) {
 			/*special case*/
@@ -7865,7 +7865,7 @@
 
 			/*special case*/
 		}
-		paramList++;	
+		paramList++;
 	}
 
 
@@ -7914,7 +7914,7 @@
 	*tr98Jobj = json_object_new_object();
 	paramList = tr98Obj[handler].parameter;
 	while(paramList->name != NULL){
-		/*Write parameter value from tr181 objects to tr98 object*/		
+		/*Write parameter value from tr181 objects to tr98 object*/
 		paramValue = json_object_object_get(vendorSpecJobj, paramList->name);
 		if(paramValue != NULL){
 			json_object_object_add(*tr98Jobj, paramList->name, JSON_OBJ_COPY(paramValue));
@@ -7924,11 +7924,11 @@
 
 		/*Not defined in tr181, give it a default value*/
 		printf("Can't find parameter %s in TR181\n", paramList->name);
-		paramList++;	
+		paramList++;
 	}
-	
+
 	json_object_put(vendorSpecJobj);
-	
+
 	return ZCFG_SUCCESS;
 }
 
@@ -7957,7 +7957,7 @@
 
 	paramList = tr98Obj[handler].parameter;
 	while(paramList->name != NULL){
-		/*Write new parameter value from tr98 object to tr181 objects*/	
+		/*Write new parameter value from tr98 object to tr181 objects*/
 		paramValue = json_object_object_get(tr98Jobj, paramList->name);
 		if(paramValue != NULL){
 			tr181ParamValue = json_object_object_get(vendorSpecJobj, paramList->name);
@@ -7969,7 +7969,7 @@
 		}
 		printf("Can't find parameter %s in TR181\n", paramList->name);
 
-		paramList++;	
+		paramList++;
 	}
 
 	if(multiJobj){
@@ -7982,7 +7982,7 @@
 		}
 		json_object_put(vendorSpecJobj);
 	}
-	
+
 	return ZCFG_SUCCESS;
 }
 
@@ -8015,7 +8015,7 @@
 	*tr98Jobj = json_object_new_object();
 	paramList = tr98Obj[handler].parameter;
 	while(paramList->name != NULL){
-		/*Write parameter value from tr181 objects to tr98 object*/ 	
+		/*Write parameter value from tr181 objects to tr98 object*/
 		paramValue = json_object_object_get(vendorSpecProfJobj, paramList->name);
 		if(paramValue != NULL){
 			json_object_object_add(*tr98Jobj, paramList->name, JSON_OBJ_COPY(paramValue));
@@ -8025,7 +8025,7 @@
 
 		/*Not defined in tr181, give it a default value*/
 		printf("Can't find parameter %s in TR181\n", paramList->name);
-		paramList++;	
+		paramList++;
 	}
 
 	json_object_put(vendorSpecProfJobj);
@@ -8062,7 +8062,7 @@
 
 	paramList = tr98Obj[handler].parameter;
 	while(paramList->name != NULL){
-		/*Write new parameter value from tr98 object to tr181 objects*/	
+		/*Write new parameter value from tr98 object to tr181 objects*/
 		paramValue = json_object_object_get(tr98Jobj, paramList->name);
 		if(paramValue != NULL){
 			tr181ParamValue = json_object_object_get(vendorSpecProfJobj, paramList->name);
@@ -8075,7 +8075,7 @@
 
 		printf("Can't find parameter %s in TR181\n", paramList->name);
 
-		paramList++;	
+		paramList++;
 	}
 
 	if(multiJobj){
