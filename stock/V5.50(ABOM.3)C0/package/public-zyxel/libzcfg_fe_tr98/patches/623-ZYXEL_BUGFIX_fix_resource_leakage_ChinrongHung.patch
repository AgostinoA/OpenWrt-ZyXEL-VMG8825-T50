diff -urN libzcfg_fe_tr98-1.0.org/zcfg_fe_tr98.c libzcfg_fe_tr98-1.0/zcfg_fe_tr98.c
--- libzcfg_fe_tr98-1.0.org/zcfg_fe_tr98.c	2019-05-08 15:27:34.475473000 +0800
+++ libzcfg_fe_tr98-1.0/zcfg_fe_tr98.c	2019-05-22 09:13:29.608868872 +0800
@@ -38,6 +38,7 @@
 #include "zcfg_webgui_flag.h"
 #include "zcfg_fe_tr98_handle.h"
 #include "zcfg_tr98_common.h"
+#include <zos_api.h>
 
 #ifdef ZCFG_PARM_NAMEMAPPING
 #define TR98MAPPING_PREFIX "Tr98_"
@@ -624,10 +625,8 @@
 			}
 		}
 	}
-	if(buf){
-		free(buf);
-		buf = NULL;
-	}
+	ZOS_FREE(buf);
+
 
 	if(no && (nolen=strlen(no))>0){
 		buf = malloc(nolen+1);
@@ -666,9 +665,7 @@
 	}
 
 complete:
-	if(buf){
-		free(buf);
-	}
+	ZOS_FREE(buf);
 
 	return ret;
 }
@@ -1004,7 +1001,7 @@
 
 	if(*(tmpName + strlen(tmpName) - 1) == '.') {
 		ztrdbg(ZTR_DL_ERR,  "%s : Invalid object Name %s ended with '.'\n", __FUNCTION__, objName);
-		free(tmpName);
+		ZOS_FREE(tmpName);
 		return ZCFG_INVALID_OBJECT;
 	}
 
@@ -1031,7 +1028,7 @@
 		token = strtok(NULL, ".");
 	}
 
-	free(tmpName);
+	ZOS_FREE(tmpName);
 	
 	return ZCFG_SUCCESS;
 }
@@ -1263,12 +1260,12 @@
 	}
 
 	if(!strlen(transWanIface)) {
-		free(wanIfacesTok);
-		free(transWanIface);
+		ZOS_FREE(wanIfacesTok);
+		ZOS_FREE(transWanIface);
 		return NULL;
 	}
 
-	free(wanIfacesTok);
+	ZOS_FREE(wanIfacesTok);
 
 	return transWanIface;
 }
@@ -1323,7 +1320,10 @@
 		if(zcfgFeTr181IfaceStackHigherLayerGet(wanLinkName, hLIntfName) ==  ZCFG_SUCCESS) {
 			wanLinkName = hLIntfName;
 		}
-		else return 0;
+		else{
+			ZOS_FREE(linkIid);
+			return 0;
+		} 			
 	}
 	else {
 		//might recognize another
@@ -1351,7 +1351,7 @@
 	}
 	else {
 		//might recognize another
-
+		ZOS_FREE(linkIid);
 		return 0;
 	}
 	linkIid->level = 1;
@@ -1359,7 +1359,9 @@
 	//if(zcfgFeObjStructGet(linkOid, linkIid, (void **)&linkObj) != ZCFG_SUCCESS) {
 	if(zcfgFeObjJsonGet(linkOid, linkIid, (struct json_object **)&linkObj) != ZCFG_SUCCESS) {
 		zcfgLog(ZCFG_LOG_ERR, "%s : Get Link Fail\n", __FUNCTION__);
-		if(!retObjIndex) free(linkIid);
+		if(!retObjIndex){
+			ZOS_FREE(linkIid);
+		}
 
 		return 0;
 	}
@@ -1372,7 +1374,9 @@
 		if(retObj) *retObj = linkObj;
 		else relObj(linkObj);
 
-		if(!retObjIndex) free(linkIid);
+		if(!retObjIndex) {
+			ZOS_FREE(linkIid);
+		}
 
 	}
 	else {
@@ -1392,7 +1396,9 @@
 			*applied = 1;
 			zcfgLog(ZCFG_LOG_INFO, "%s : Set %s complete\n", __FUNCTION__, wanLinkName);
 		}
-		if(!retObjIndex) free(linkIid);
+		if(!retObjIndex) {
+			ZOS_FREE(linkIid);
+		}
 	}
 
 	return linkOid;
@@ -2559,7 +2565,7 @@
 	if(n1 != base64StrLen){
 		return modifiedStr;
 	}else{
-		free(modifiedStr);
+		ZOS_FREE(modifiedStr);
 		return NULL;
 	}
 }
@@ -2765,9 +2771,16 @@
 	remove(ZCFG_TR98_MAP_CONVERTED);
 
 	fmap = fopen(ZCFG_TR98_MAP_ADDOBJNAME, "r");
+	if(!fmap){
+		printf("%s: open mapping files fail\n", __FUNCTION__);
+		return ZCFG_INTERNAL_ERROR;
+	}
+
 	fmapconvert = fopen(ZCFG_TR98_MAP_CONVERT, "w+");
-	if(!fmap || !fmapconvert){
+	if(!fmapconvert){
 		printf("%s: open mapping files fail\n", __FUNCTION__);
+		fclose(fmap);
+		fmap = NULL;
 		return ZCFG_INTERNAL_ERROR;
 	}
 
@@ -2832,6 +2845,8 @@
 
 	fclose(fmapconvert);
 	fclose(fmap);
+	fmapconvert = NULL;
+	fmap = NULL;
 
 
 	if(!(zcfgTr98MapConvert = json_object_from_file(ZCFG_TR98_MAP_CONVERT))) {
@@ -2921,9 +2936,16 @@
 	remove(ZCFG_TR181_MAP_CONVERTED);
 
 	fmap = fopen(ZCFG_TR181_MAP_ADDOBJNAME, "r");
+	if(!fmap){
+		printf("%s: open mapping files fail\n", __FUNCTION__);
+		return ZCFG_INTERNAL_ERROR;
+	}
+
 	fmapconvert = fopen(ZCFG_TR181_MAP_CONVERT, "w+");
-	if(!fmap || !fmapconvert){
+	if(!fmapconvert){
 		printf("%s: open mapping files fail\n", __FUNCTION__);
+		fclose(fmap);
+		fmap = NULL;
 		return ZCFG_INTERNAL_ERROR;
 	}
 
@@ -2989,6 +3011,8 @@
 
 	fclose(fmapconvert);
 	fclose(fmap);
+	fmapconvert = NULL;
+	fmap = NULL;
 
 	struct json_object *zcfgTr181MapConvert = NULL, *zcfgTr181MapConverted = NULL;
 
@@ -3223,8 +3247,7 @@
 	if(!objectPathList || !(objPathListLen = strlen(objectPathList))){
 		printf("%s: clear objectPathList\n", __FUNCTION__);
 		if(rootQuryBlackObjPathIdx){
-			free(rootQuryBlackObjPathIdx);
-			rootQuryBlackObjPathIdx = NULL;
+			ZOS_FREE(rootQuryBlackObjPathIdx);
 		}
 		return 0;
 	}
@@ -3252,18 +3275,18 @@
 	}
 
 	if(!objPathIdxOk){
-		free(objPathIdxNew);
-		free(objectPathListSave);
+		ZOS_FREE(objPathIdxNew);
+		ZOS_FREE(objectPathListSave);
 	}else if(!save){
-		free(objPathIdxNew);
-		free(objectPathListSave);
+		ZOS_FREE(objPathIdxNew);
+		ZOS_FREE(objectPathListSave);
 		return objPathIdxOk;
 	}else{
 		if(rootQuryBlackObjPathIdx)
-			free(rootQuryBlackObjPathIdx);
+			ZOS_FREE(rootQuryBlackObjPathIdx);
 		rootQuryBlackObjPathIdx = objPathIdxNew;
 
-		free(objectPathListSave);
+		ZOS_FREE(objectPathListSave);
 	}
 
 	return objPathIdxOk;
@@ -3618,11 +3641,8 @@
 
 				setValue = json_object_new_string(decodeOptValue);
 
-				if(optValue)
-					free(optValue);
-
-				if(decodeOptValue)
-					free(decodeOptValue);
+				ZOS_FREE(optValue);
+				ZOS_FREE(decodeOptValue);
 			}
 			break;
 		case json_type_string:
@@ -3960,7 +3980,7 @@
 			memset(tr98NotifyName, 0, TR98_MAX_OBJ_NAME_LENGTH + MAX_PARMNAME_LEN);
 			if((ret = zcfgFe98ParmMappingToName(notifyName, tr98NotifyName)) != ZCFG_SUCCESS) {
 
-				free(tr98NotifyName);
+				ZOS_FREE(tr98NotifyName);
 				return ret;
 			}
 
@@ -3971,7 +3991,7 @@
 			json_object_object_add(*tr98NotifyInfo, tr98NotifyName, JSON_OBJ_COPY(tr181ParamVal));
 			}
 
-			free(tr98NotifyName);
+			ZOS_FREE(tr98NotifyName);
 		}
 #endif
 		else { /*Not found, maybe one by one mapping*/
@@ -4599,8 +4619,9 @@
 				if(ret == ZCFG_SUCCESS) {
 					zcfgSetParmAttrAdd(setParmAttrLst, setParmAttr);
 				}
-				else
-					free(setParmAttr);
+				else{
+					ZOS_FREE(setParmAttr);
+				}
 
 				n++;
 			}
