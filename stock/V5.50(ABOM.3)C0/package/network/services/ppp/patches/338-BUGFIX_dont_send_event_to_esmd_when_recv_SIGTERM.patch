Index: ppp-2.4.3/pppd/ipcp.c
===================================================================
--- ppp-2.4.3.orig/pppd/ipcp.c	2016-02-15 13:44:07.019588692 +0800
+++ ppp-2.4.3/pppd/ipcp.c	2016-02-15 14:03:52.734997949 +0800
@@ -1993,22 +1993,24 @@
      * to queue up outgoing packets (for now).=
      */
 #if 1   /* send ZCFG_MSG_WAN_CONNECTION_LOST to ESMD for notification, ZyXEL, John  */
-	struct json_object *ppp_arg = NULL;
-	const char *payload = NULL;
-	int payloadLen = 0;
+	if(status != EXIT_USER_REQUEST){ //If terminate request is from user, dont send event to esmd
+		struct json_object *ppp_arg = NULL;
+		const char *payload = NULL;
+		int payloadLen = 0;
 
-	ppp_arg = json_object_new_object();
-    json_object_object_add(ppp_arg, "ip", json_object_new_string(ip_ntoa(ipcp_gotoptions[f->unit].ouraddr)));
-    json_object_object_add(ppp_arg, "linkname", json_object_new_string(linkname));
-    json_object_object_add(ppp_arg, "type", json_object_new_string("ipv4"));
-    json_object_object_add(ppp_arg, "state", json_object_new_string("down"));
+		ppp_arg = json_object_new_object();
+	    json_object_object_add(ppp_arg, "ip", json_object_new_string(ip_ntoa(ipcp_gotoptions[f->unit].ouraddr)));
+	    json_object_object_add(ppp_arg, "linkname", json_object_new_string(linkname));
+	    json_object_object_add(ppp_arg, "type", json_object_new_string("ipv4"));
+	    json_object_object_add(ppp_arg, "state", json_object_new_string("down"));
 
-    notice("Json PPP %s", json_object_to_json_string(ppp_arg));
-    payload = json_object_to_json_string(ppp_arg);
-    payloadLen = strlen(payload) + 1;
-    pppdMsgSend(ZCFG_MSG_PPPD_EVENT , ZCFG_EID_ESMD, payloadLen, payload);
+	    notice("Json PPP %s", json_object_to_json_string(ppp_arg));
+	    payload = json_object_to_json_string(ppp_arg);
+	    payloadLen = strlen(payload) + 1;
+	    pppdMsgSend(ZCFG_MSG_PPPD_EVENT , ZCFG_EID_ESMD, payloadLen, payload);
 
-    json_object_put(ppp_arg);
+	    json_object_put(ppp_arg);
+	}
 #endif
     if (demand) {
 	sifnpmode(f->unit, PPP_IP, NPMODE_QUEUE);
