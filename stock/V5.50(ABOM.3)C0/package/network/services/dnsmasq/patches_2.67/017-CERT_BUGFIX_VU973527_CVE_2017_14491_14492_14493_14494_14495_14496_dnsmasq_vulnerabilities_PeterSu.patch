Index: dnsmasq-2.67/src/dnsmasq.c
===================================================================
--- dnsmasq-2.67.orig/src/dnsmasq.c	2017-10-05 14:04:09.815226781 +0800
+++ dnsmasq-2.67/src/dnsmasq.c	2017-10-05 14:28:13.472533410 +0800
@@ -88,8 +88,12 @@
     
   if (daemon->edns_pktsz < PACKETSZ)
     daemon->edns_pktsz = PACKETSZ;
-  daemon->packet_buff_sz = daemon->edns_pktsz > DNSMASQ_PACKETSZ ? 
-    daemon->edns_pktsz : DNSMASQ_PACKETSZ;
+  /* CVE-2017-14491 
+	Min buffer size: we check after adding each record, so there must be 
+     memory for the largest packet, and the largest record so the
+     min for DNS is PACKETSZ+MAXDNAME+RRFIXEDSZ which is < 1000.
+     This might be increased is EDNS packet size if greater than the minimum. */ 
+  daemon->packet_buff_sz = daemon->edns_pktsz + MAXDNAME + RRFIXEDSZ;
   daemon->packet = safe_malloc(daemon->packet_buff_sz);
 
   daemon->addrbuff = safe_malloc(ADDRSTRLEN);
Index: dnsmasq-2.67/src/dnsmasq.h
===================================================================
--- dnsmasq-2.67.orig/src/dnsmasq.h	2017-10-05 14:04:09.815226781 +0800
+++ dnsmasq-2.67/src/dnsmasq.h	2017-10-05 14:09:53.176549137 +0800
@@ -1036,7 +1036,7 @@
 unsigned short rand16(void);
 int legal_hostname(char *c);
 char *canonicalise(char *s, int *nomem);
-unsigned char *do_rfc1035_name(unsigned char *p, char *sval);
+unsigned char *do_rfc1035_name(unsigned char *p, char *sval, char *limit);
 void *safe_malloc(size_t size);
 void safe_pipe(int *fd, int read_noblock);
 void *whine_malloc(size_t size);
@@ -1383,4 +1383,4 @@
 int chkClose(int fd, const char *func, const int line);
 #define close(fd) chkClose(fd, __FUNCTION__, __LINE__)
 #endif
-#endif
\ No newline at end of file
+#endif
Index: dnsmasq-2.67/src/forward.c
===================================================================
--- dnsmasq-2.67.orig/src/forward.c	2017-10-05 14:04:09.831226656 +0800
+++ dnsmasq-2.67/src/forward.c	2017-10-05 14:37:50.880468988 +0800
@@ -753,7 +753,10 @@
       (msg.msg_flags & MSG_TRUNC) ||
       (header->hb3 & HB3_QR))
     return;
-  
+ 
+  /* CVE-2017-13704: Clear buffer beyond request to avoid risk of information disclosure. */
+  memset(daemon->packet + n, 0, daemon->edns_pktsz - n);
+ 
   source_addr.sa.sa_family = listen->family;
 #ifdef HAVE_IPV6
   if (listen->family == AF_INET6)
@@ -968,7 +971,10 @@
   
       if (size < (int)sizeof(struct dns_header))
 	continue;
-      
+     
+      /* CVE-2017-13704: Clear buffer beyond request to avoid risk of information disclosure. */
+      memset(payload + size, 0, 65536 - size);
+ 
       check_subnet = 0;
 
       /* save state of "cd" flag in query */
Index: dnsmasq-2.67/src/option.c
===================================================================
--- dnsmasq-2.67.orig/src/option.c	2017-10-05 14:04:09.791226970 +0800
+++ dnsmasq-2.67/src/option.c	2017-10-05 14:45:32.557216632 +0800
@@ -1386,7 +1386,7 @@
 		    }
 		  
 		  p = newp;
-		  end = do_rfc1035_name(p + len, dom);
+		  end = do_rfc1035_name(p + len, dom, NULL);
 		  *end++ = 0;
 		  len = end - p;
 		  free(dom);
Index: dnsmasq-2.67/src/radv.c
===================================================================
--- dnsmasq-2.67.orig/src/radv.c	2013-10-25 17:37:30.000000000 +0800
+++ dnsmasq-2.67/src/radv.c	2017-10-05 14:46:26.972833155 +0800
@@ -185,6 +185,9 @@
       /* look for link-layer address option for logging */
       if (sz >= 16 && packet[8] == ICMP6_OPT_SOURCE_MAC && (packet[9] * 8) + 8 <= sz)
 	{
+	  if ((packet[9] * 8 - 2) * 3 - 1 >= MAXDNAME) {
+	    return;
+	  }
 	  print_mac(daemon->namebuff, &packet[10], (packet[9] * 8) - 2);
 	  mac = daemon->namebuff;
 	}
Index: dnsmasq-2.67/src/rfc1035.c
===================================================================
--- dnsmasq-2.67.orig/src/rfc1035.c	2013-10-25 17:37:30.000000000 +0800
+++ dnsmasq-2.67/src/rfc1035.c	2017-10-05 14:58:07.159997574 +0800
@@ -44,7 +44,7 @@
 	/* end marker */
 	{
 	  /* check that there are the correct no of bytes after the name */
-	  if (!CHECK_LEN(header, p, plen, extrabytes))
+	  if (!CHECK_LEN(header, p1 ? p1 : p, plen, extrabytes))
 	    return 0;
 	  
 	  if (isExtract)
@@ -794,6 +794,8 @@
 	    {
 	      unsigned int i, len = *p1;
 	      unsigned char *p2 = p1;
+	      if ((p1 + len - p) >= rdlen)
+	        return 0; /* bad packet */
 	      /* make counted string zero-term  and sanitise */
 	      for (i = 0; i < len; i++)
 		{
@@ -1307,10 +1309,21 @@
   long lval;
   char *sval;
 
+#define CHECK_LIMIT(size) \
+  if (limit && p + (size) > (unsigned char*)limit) \
+    { \
+      va_end(ap); \
+      goto truncated; \
+    }
+
   if (truncp && *truncp)
     return 0;
  
   va_start(ap, format);   /* make ap point to 1st unamed argument */
+
+  /* nameoffset (1 or 2) + type (2) + class (2) + ttl (4) + 0 (2) */
+  CHECK_LIMIT(12);
+
   
   if (nameoffset > 0)
     {
@@ -1320,7 +1333,12 @@
     {
       char *name = va_arg(ap, char *);
       if (name)
-	p = do_rfc1035_name(p, name);
+	p = do_rfc1035_name(p, name, limit);
+        if (!p)
+          {
+            va_end(ap);
+            goto truncated;
+          }
       if (nameoffset < 0)
 	{
 	  PUTSHORT(-nameoffset | 0xc000, p);
@@ -1341,6 +1359,7 @@
       {
 #ifdef HAVE_IPV6
       case '6':
+	CHECK_LIMIT(IN6ADDRSZ);
 	sval = va_arg(ap, char *); 
 	memcpy(p, sval, IN6ADDRSZ);
 	p += IN6ADDRSZ;
@@ -1348,30 +1367,40 @@
 #endif
 	
       case '4':
+	CHECK_LIMIT(INADDRSZ);
 	sval = va_arg(ap, char *); 
 	memcpy(p, sval, INADDRSZ);
 	p += INADDRSZ;
 	break;
 	
       case 's':
+	CHECK_LIMIT(2);
 	usval = va_arg(ap, int);
 	PUTSHORT(usval, p);
 	break;
 	
       case 'l':
+	CHECK_LIMIT(4);
 	lval = va_arg(ap, long);
 	PUTLONG(lval, p);
 	break;
 	
       case 'd':
-	/* get domain-name answer arg and store it in RDATA field */
-	if (offset)
-	  *offset = p - (unsigned char *)header;
-	p = do_rfc1035_name(p, va_arg(ap, char *));
-	*p++ = 0;
+        /* get domain-name answer arg and store it in RDATA field */
+        if (offset)
+          *offset = p - (unsigned char *)header;
+        p = do_rfc1035_name(p, va_arg(ap, char *), limit);
+        if (!p)
+          {
+            va_end(ap);
+            goto truncated;
+          }
+        CHECK_LIMIT(1);
+        *p++ = 0;
 	break;
 	
       case 't':
+	CHECK_LIMIT(usval);
 	usval = va_arg(ap, int);
 	sval = va_arg(ap, char *);
 	if (usval != 0)
@@ -1384,20 +1413,24 @@
 	usval = sval ? strlen(sval) : 0;
 	if (usval > 255)
 	  usval = 255;
+	CHECK_LIMIT(usval + 1);
 	*p++ = (unsigned char)usval;
 	memcpy(p, sval, usval);
 	p += usval;
 	break;
       }
 
+#undef CHECK_LIMIT
   va_end(ap);	/* clean up variable argument pointer */
   
   j = p - sav - 2;
+  /* this has already been checked against limit before */
   PUTSHORT(j, sav);     /* Now, store real RDLength */
   
   /* check for overflow of buffer */
   if (limit && ((unsigned char *)limit - p) < 0)
     {
+truncated:
       if (truncp)
 	*truncp = 1;
       return 0;
Index: dnsmasq-2.67/src/rfc2131.c
===================================================================
--- dnsmasq-2.67.orig/src/rfc2131.c	2017-10-05 14:04:09.791226970 +0800
+++ dnsmasq-2.67/src/rfc2131.c	2017-10-05 15:00:05.219197609 +0800
@@ -203,7 +203,7 @@
 	  for (offset = 0; offset < (len - 5); offset += elen + 5)
 	    {
 	      elen = option_uint(opt, offset + 4 , 1);
-	      if (option_uint(opt, offset, 4) == BRDBAND_FORUM_IANA)
+		  if (option_uint(opt, offset, 4) == BRDBAND_FORUM_IANA && offset + elen + 5 <= len)
 		{
 		  unsigned char *x = option_ptr(opt, offset + 5);
 		  unsigned char *y = option_ptr(opt, offset + elen + 5);
@@ -2515,10 +2515,10 @@
 
 	      if (fqdn_flags & 0x04)
 		{
-		  p = do_rfc1035_name(p, hostname);
+		  p = do_rfc1035_name(p, hostname, NULL);
 		  if (domain)
 		    {
-		      p = do_rfc1035_name(p, domain);
+		      p = do_rfc1035_name(p, domain, NULL);
 		      *p++ = 0;
 		    }
 		}
Index: dnsmasq-2.67/src/rfc3315.c
===================================================================
--- dnsmasq-2.67.orig/src/rfc3315.c	2013-10-25 17:37:30.000000000 +0800
+++ dnsmasq-2.67/src/rfc3315.c	2017-10-05 15:14:20.361449268 +0800
@@ -203,6 +203,9 @@
   /* RFC-6939 */
   if ((opt = opt6_find(opts, end, OPTION6_CLIENT_MAC, 3)))
     {
+      if (opt6_len(opt) - 2 > DHCP_CHADDR_MAX) {
+        return 0;
+      }
       state->mac_type = opt6_uint(opt, 0, 2);
       state->mac_len = opt6_len(opt) - 2;
       memcpy(&state->mac[0], opt6_ptr(opt, 2), state->mac_len);
@@ -210,6 +213,9 @@
   
   for (opt = opts; opt; opt = opt6_next(opt, end))
     {
+      if (opt6_ptr(opt, 0) + opt6_len(opt) >= end) {
+        return 0;
+      }
       int o = new_opt6(opt6_type(opt));
       if (opt6_type(opt) == OPTION6_RELAY_MSG)
 	{
@@ -1399,10 +1405,10 @@
       if ((p = expand(len + 2)))
 	{
 	  *(p++) = state->fqdn_flags;
-	  p = do_rfc1035_name(p, state->hostname);
+	  p = do_rfc1035_name(p, state->hostname, NULL);
 	  if (state->send_domain)
 	    {
-	      p = do_rfc1035_name(p, state->send_domain);
+	      p = do_rfc1035_name(p, state->send_domain, NULL);
 	      *p = 0;
 	    }
 	}
Index: dnsmasq-2.67/src/util.c
===================================================================
--- dnsmasq-2.67.orig/src/util.c	2017-10-05 14:04:09.599228472 +0800
+++ dnsmasq-2.67/src/util.c	2017-10-05 15:16:31.828582260 +0800
@@ -205,15 +205,21 @@
   return ret;
 }
 
-unsigned char *do_rfc1035_name(unsigned char *p, char *sval)
+unsigned char *do_rfc1035_name(unsigned char *p, char *sval, char *limit)
 {
   int j;
   
   while (sval && *sval)
     {
+      if (limit && p + 1 > (unsigned char*)limit)
+        return p;
+
       unsigned char *cp = p++;
-      for (j = 0; *sval && (*sval != '.'); sval++, j++)
-	*p++ = *sval;
+      for (j = 0; *sval && (*sval != '.'); sval++, j++) {
+          if (limit && p + 1 > (unsigned char*)limit)
+            return p;
+	        *p++ = *sval;
+      }
       *cp  = j;
       if (*sval)
 	sval++;
