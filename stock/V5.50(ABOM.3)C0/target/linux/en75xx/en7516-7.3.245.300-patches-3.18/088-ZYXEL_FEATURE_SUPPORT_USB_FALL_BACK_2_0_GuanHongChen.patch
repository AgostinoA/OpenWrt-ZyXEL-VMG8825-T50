Index: linux-3.18.21/drivers/usb/host/Kconfig
===================================================================
--- linux-3.18.21.orig/drivers/usb/host/Kconfig	2018-09-06 15:47:23.857827915 +0800
+++ linux-3.18.21/drivers/usb/host/Kconfig	2018-09-06 11:07:46.554139400 +0800
@@ -805,3 +805,7 @@
 	  This option is of interest only to developers who need to validate
 	  their USB hardware designs.  It is not needed for normal use.  If
 	  unsure, say N.
+
+config ZYXEL_SUPPORT_USB_FALL_BACK_2_0
+	bool "USB3.0 can be fall back to USB2.0 manually"
+	default n
Index: linux-3.18.21/drivers/usb/host/xhci-mtk-power.c
===================================================================
--- linux-3.18.21.orig/drivers/usb/host/xhci-mtk-power.c	2018-09-06 15:47:22.693827915 +0800
+++ linux-3.18.21/drivers/usb/host/xhci-mtk-power.c	2018-09-06 11:12:17.013080500 +0800
@@ -16,7 +16,21 @@
 
 	g_num_u3_port = SSUSB_U3_PORT_NUM(readl(SSUSB_IP_CAP));
 	g_num_u2_port = SSUSB_U2_PORT_NUM(readl(SSUSB_IP_CAP));
-	
+
+#ifdef	CONFIG_ZYXEL_SUPPORT_USB_FALL_BACK_2_0
+	if (get_USB3_Enable() != 0)
+	{
+		for(i=1; i<=g_num_u3_port; i++)
+		{
+			port_id=i;
+			addr = &xhci->op_regs->port_status_base + NUM_PORT_REGS*(port_id-1 & 0xff);
+			temp = readl(addr);
+			temp = xhci_port_state_to_neutral(temp);
+			temp |= PORT_POWER;
+			writel(temp, addr);
+		}
+	}
+#else
 	for(i=1; i<=g_num_u3_port; i++){
 		port_id=i;
 		addr = &xhci->op_regs->port_status_base + NUM_PORT_REGS*(port_id-1 & 0xff);
@@ -25,6 +39,8 @@
 		temp |= PORT_POWER;
 		writel(temp, addr);
 	}
+#endif
+
 	for(i=1; i<=g_num_u2_port; i++){
 		port_id=i+g_num_u3_port;
 		addr = &xhci->op_regs->port_status_base + NUM_PORT_REGS*(port_id-1 & 0xff);
@@ -40,20 +56,39 @@
 	int i;
 	u32 temp;
 
+#ifdef	CONFIG_ZYXEL_SUPPORT_USB_FALL_BACK_2_0
+	if (get_USB3_Enable()!= 0)
+	{
+		g_num_u3_port = SSUSB_U3_PORT_NUM(readl(SSUSB_IP_CAP));
+	}
+#else
 	g_num_u3_port = SSUSB_U3_PORT_NUM(readl(SSUSB_IP_CAP));
+#endif
 	g_num_u2_port = SSUSB_U2_PORT_NUM(readl(SSUSB_IP_CAP));
 
 	//2.	Enable xHC
 	writel(readl(SSUSB_IP_PW_CTRL) | (SSUSB_IP_SW_RST), SSUSB_IP_PW_CTRL);
 	writel(readl(SSUSB_IP_PW_CTRL) & (~SSUSB_IP_SW_RST), SSUSB_IP_PW_CTRL);
 	writel(readl(SSUSB_IP_PW_CTRL_1) & (~SSUSB_IP_PDN), SSUSB_IP_PW_CTRL_1);
-	
+
 	//1.	Enable target ports 
+#ifdef	CONFIG_ZYXEL_SUPPORT_USB_FALL_BACK_2_0
+	if (get_USB3_Enable()!= 0)
+	{
+		for(i=0; i<g_num_u3_port; i++)
+		{
+			temp = readl(SSUSB_U3_CTRL(i));
+			temp = temp & (~SSUSB_U3_PORT_PDN) & (~SSUSB_U3_PORT_DIS);
+			writel(temp, SSUSB_U3_CTRL(i));
+		}
+	}
+#else
 	for(i=0; i<g_num_u3_port; i++){
 		temp = readl(SSUSB_U3_CTRL(i));
 		temp = temp & (~SSUSB_U3_PORT_PDN) & (~SSUSB_U3_PORT_DIS);
 		writel(temp, SSUSB_U3_CTRL(i));
 	}
+#endif
 	for(i=0; i<g_num_u2_port; i++){
 		temp = readl(SSUSB_U2_CTRL(i));
 		temp = temp & (~SSUSB_U2_PORT_PDN) & (~SSUSB_U2_PORT_DIS);
@@ -74,15 +109,34 @@
 void disablePortClockPower(void){
 	int i;
 	u32 temp;
-
+#ifdef CONFIG_ZYXEL_SUPPORT_USB_FALL_BACK_2_0
+	if (get_USB3_Enable()!= 0)
+	{
+		g_num_u3_port = SSUSB_U3_PORT_NUM(readl(SSUSB_IP_CAP));
+	}
+#else
 	g_num_u3_port = SSUSB_U3_PORT_NUM(readl(SSUSB_IP_CAP));
+#endif
 	g_num_u2_port = SSUSB_U2_PORT_NUM(readl(SSUSB_IP_CAP));
-	
+
+#ifdef CONFIG_ZYXEL_SUPPORT_USB_FALL_BACK_2_0
+	if (get_USB3_Enable()!= 0)
+	{
+		for(i=0; i<g_num_u3_port; i++)
+		{
+			temp = readl(SSUSB_U3_CTRL(i));
+			temp = temp | (SSUSB_U3_PORT_PDN);
+			writel(temp, SSUSB_U3_CTRL(i));
+		}
+	}
+#else
 	for(i=0; i<g_num_u3_port; i++){
 		temp = readl(SSUSB_U3_CTRL(i));
 		temp = temp | (SSUSB_U3_PORT_PDN);
 		writel(temp, SSUSB_U3_CTRL(i));
 	}
+#endif
+
 	for(i=0; i<g_num_u2_port; i++){
 		temp = readl(SSUSB_U2_CTRL(i));
 		temp = temp | (SSUSB_U2_PORT_PDN);
Index: linux-3.18.21/drivers/usb/host/xhci-plat.c
===================================================================
--- linux-3.18.21.orig/drivers/usb/host/xhci-plat.c	2018-09-06 15:47:22.693827915 +0800
+++ linux-3.18.21/drivers/usb/host/xhci-plat.c	2018-09-06 11:11:34.685080500 +0800
@@ -120,8 +120,10 @@
 	if (!request_mem_region(hcd->rsrc_start, hcd->rsrc_len,
 		driver->description)) {
 		dev_dbg(&pdev->dev, "controller already in use\n");
+#ifndef CONFIG_ZYXEL_SUPPORT_USB_FALL_BACK_2_0
 		ret = -EBUSY;
 		goto put_hcd;
+#endif
 	}
 
 	hcd->regs = ioremap(hcd->rsrc_start, hcd->rsrc_len);
Index: linux-3.18.21/drivers/usb/host/xhci.c
===================================================================
--- linux-3.18.21.orig/drivers/usb/host/xhci.c	2018-09-06 15:47:22.693827915 +0800
+++ linux-3.18.21/drivers/usb/host/xhci.c	2018-09-06 15:00:03.803151200 +0800
@@ -54,6 +54,20 @@
 module_param(quirks, uint, S_IRUGO);
 MODULE_PARM_DESC(quirks, "Bit flags for quirks to be enabled as default");
 
+#ifdef CONFIG_ZYXEL_SUPPORT_USB_FALL_BACK_2_0
+static int USB3_Enable;
+module_param(USB3_Enable, int, S_IRUGO | S_IWUSR);
+MODULE_PARM_DESC(USB3_Enable, "USB3.0 can be fall back to USB2.0 manually");
+
+int get_USB3_Enable(void)
+{
+	if (USB3_Enable == 0)
+		return 0;
+	else
+		return 1;
+}
+#endif
+
 /* TODO: copied from ehci-hcd.c - can this be refactored? */
 /*
  * xhci_handshake - spin reading hc until handshake completes or fails
@@ -5164,6 +5178,9 @@
 static void __exit xhci_hcd_cleanup(void)
 {
 	platform_device_unregister(xhci_platform_dev);
+#ifdef	CONFIG_ZYXEL_SUPPORT_USB_FALL_BACK_2_0
+	disablePortClockPower();
+#endif
 }
 module_exit(xhci_hcd_cleanup);
 #endif
Index: linux-3.18.21/drivers/usb/host/xhci.h
===================================================================
--- linux-3.18.21.orig/drivers/usb/host/xhci.h	2018-09-06 15:47:22.697827915 +0800
+++ linux-3.18.21/drivers/usb/host/xhci.h	2018-09-06 15:20:51.098682100 +0800
@@ -1900,4 +1900,8 @@
 struct xhci_slot_ctx *xhci_get_slot_ctx(struct xhci_hcd *xhci, struct xhci_container_ctx *ctx);
 struct xhci_ep_ctx *xhci_get_ep_ctx(struct xhci_hcd *xhci, struct xhci_container_ctx *ctx, unsigned int ep_index);
 
+#ifdef CONFIG_ZYXEL_SUPPORT_USB_FALL_BACK_2_0
+int get_USB3_Enable(void);
+#endif
+
 #endif /* __LINUX_XHCI_HCD_H */
