Index: libzcfg_fe_rdm_string-1.0/zcfg_fe_rdm_string.c
===================================================================
--- libzcfg_fe_rdm_string-1.0.orig/zcfg_fe_rdm_string.c	2016-09-07 10:51:04.553184994 +0800
+++ libzcfg_fe_rdm_string-1.0/zcfg_fe_rdm_string.c	2016-09-07 10:51:04.565184994 +0800
@@ -475,6 +475,49 @@
 	}
 }
 
+/*
+ * Parameters: objIid: obj index to retrieve
+ *             rtdIid: retrieved obj index while no objIid
+ *             rtdObj: retrieved obj
+ */
+zcfgRet_t zcfgFeJsonMultiObjRetrieve(struct json_object *multiJobj, zcfg_offset_t oid, objIndex_t *objIid, objIndex_t *rtdIid, struct json_object **rtdObj)
+{
+	char identity[20] = {0};
+	char index[36] = {0};
+	struct json_object *oldObj;
+
+	if(!multiJobj || !rtdObj)
+		return ZCFG_INTERNAL_ERROR;
+
+	*rtdObj = NULL;
+
+	sprintf(identity, "%d", oid);
+
+	if(objIid){
+		sprintf(index, "%hhu.%hhu.%hhu.%hhu.%hhu.%hhu.%hhu", objIid->level, objIid->idx[0], objIid->idx[1], objIid->idx[2],
+				objIid->idx[3], objIid->idx[4], objIid->idx[5]);
+	}
+
+	oldObj = json_object_object_get(multiJobj, identity);
+	if(oldObj){
+		if(objIid){
+			*rtdObj = json_object_object_get(oldObj, index);
+			return (*rtdObj) ? ZCFG_SUCCESS : ZCFG_NO_SUCH_OBJECT;
+		}
+	}else
+		return ZCFG_NO_SUCH_OBJECT;
+
+	struct lh_entry *entry = (json_object_get_object(oldObj))->head;
+	*rtdObj = entry ? (struct json_object *)entry->v : 0;
+	if(*rtdObj && rtdIid){
+		const char *entryIdxStr = (const char *)entry->k;
+		sscanf(entryIdxStr, "%hhu.%hhu.%hhu.%hhu.%hhu.%hhu.%hhu", &rtdIid->level, &rtdIid->idx[0], &rtdIid->idx[1], &rtdIid->idx[2],
+				&rtdIid->idx[3], &rtdIid->idx[4], &rtdIid->idx[5]);
+	}
+
+	return (*rtdObj) ? ZCFG_SUCCESS : ZCFG_NO_SUCH_OBJECT;
+}
+
 zcfgRet_t zcfgFeJsonMultiObjAddParam(struct json_object *multiobj, zcfg_offset_t oid, objIndex_t *objIid, const char *parmName, struct json_object *paramObj)
 {
 	struct json_object *oldObj = NULL, *indexObj = NULL;
Index: libzcfg_fe_rdm_string-1.0/zcfg_fe_rdm_string.h
===================================================================
--- libzcfg_fe_rdm_string-1.0.orig/zcfg_fe_rdm_string.h	2016-09-07 10:51:04.553184994 +0800
+++ libzcfg_fe_rdm_string-1.0/zcfg_fe_rdm_string.h	2016-09-07 10:42:32.771761300 +0800
@@ -28,6 +28,7 @@
 zcfgRet_t zcfgFeMultiObjJsonBlockedSet(struct json_object *multiJobj, char *feedbackMsg);
 #endif
 zcfgRet_t zcfgFeJsonMultiObjAddParam(struct json_object *, zcfg_offset_t , objIndex_t *, const char *, struct json_object *);
+zcfgRet_t zcfgFeJsonMultiObjRetrieve(struct json_object *multiJobj, zcfg_offset_t oid, objIndex_t *objIid, objIndex_t *rtdIid, struct json_object **rtdObj);
 
 #define zcfgFeJsonObjNew() json_object_new_object()
 #define zcfgFeJsonObjFree(jobj) json_object_put(jobj); jobj = NULL
@@ -37,4 +38,5 @@
 	for(struct lh_entry *entry = json_object_get_object(obj)->head; ({ if(entry) { key = (char*)entry->k; paramList = (char *)json_object_get_string((struct json_object*)entry->v); } ; entry; }); entry = entry->next )
 #define zcfgNotifyStrToJsonObj(listStr) json_tokener_parse(listStr)
 
+#define zcfgFeJsonMultiObjSetBlock(multiobj) { if(multiobj) json_object_object_add(multiobj, "block", json_object_new_boolean(true)); }
 #define zcfgFeJsonMultiObjSetDelayApply(multiobj) { if(multiobj) json_object_object_add(multiobj, "delayapply", json_object_new_boolean(true)); }
\ No newline at end of file
