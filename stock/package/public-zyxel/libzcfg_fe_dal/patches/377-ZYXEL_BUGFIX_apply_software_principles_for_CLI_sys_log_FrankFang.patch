Index: libzcfg_fe_dal-1.0/maintenance/logsetting/zcfg_fe_dal_sys_log.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/maintenance/logsetting/zcfg_fe_dal_sys_log.c	2017-11-17 13:39:11.608125557 +0800
+++ libzcfg_fe_dal-1.0/maintenance/logsetting/zcfg_fe_dal_sys_log.c	2017-11-17 15:16:17.144344154 +0800
@@ -30,7 +30,23 @@
 	{NULL,				dalType_int,	0,	0,	NULL,	NULL,	0},
 };
 
-zcfgRet_t getSysLogFromFlash(struct json_object *result, int logFileSize, char *catName, char *logFileName){
+/*!
+ *  Get logs from the log file under /data.
+ *
+ *  @param[inout]  result          in: a JSON object of json_type_array
+ *                                 out: logs, each array entry contains a log entry
+ *  @param[in]     logFileSize     number of lines in logFileName
+ *  @param[in]     catName         name of category. Now only support "All"
+ *  @param[in]     logFileName     name of the regular log file e.g. syslog.log
+ *
+ *  @return     true  - add log entry success.
+ *              false - at least one parameter value is invalid.
+ *
+ *  @note     catName is the names in LOG_CATEGORY e.g. "dhcpc", "tr69" instead of the names in
+ *            LOG_CLASSIFY e.g. "syslog", "securitylog"
+ */
+zcfgRet_t flashSysLogGet(struct json_object *result, int logFileSize, char *catName, char *logFileName)
+{
 	zcfgRet_t ret = ZCFG_SUCCESS;
 	int i = LOG_ROTATE;
 	int len = 0;
@@ -40,6 +56,32 @@
 	char *tmpLine = NULL;
 	FILE *tmpFp;
 
+	if (logFileName == NULL)
+	{
+		dbg_printf("%s:%d: logFileName cannot be NULL \n",__FUNCTION__,__LINE__);
+		return ZCFG_INVALID_PARAM_VALUE;
+	}
+	if (catName == NULL)
+	{
+		dbg_printf("%s:%d: catName cannot be NULL \n",__FUNCTION__,__LINE__);
+		return ZCFG_INVALID_PARAM_VALUE;
+	}
+	else if (strcmp(catName,"All"))
+	{
+		dbg_printf("%s:%d: catName supports \"All\" only \n",__FUNCTION__,__LINE__);
+		return ZCFG_INVALID_PARAM_VALUE;
+	}
+	if (logFileSize < 0)
+	{
+		dbg_printf("%s:%d: log file size is less then zero \n",__FUNCTION__,__LINE__);
+		return ZCFG_INVALID_PARAM_VALUE;
+	}
+	if (result == NULL)
+	{
+		dbg_printf("%s:%d: Need to init result \n",__FUNCTION__,__LINE__);
+		return ZCFG_INVALID_PARAM_VALUE;
+	}
+
 	while (1)
 	{
         i--;
@@ -82,9 +124,22 @@
 	}
 	
 	return ret;
-}
+}// flashSysLogGet
 
-zcfgRet_t getSysLogInfoByCategory(char *fileName, char *description, char *category){
+/*!
+ *  Get log file name and description by category.
+ *
+ *  @param[out]    fileName        log file name e.g. syslog.log and securitylog.log
+ *  @param[out]    description     description of the log e.g. "System Log" and "Security Log"
+ *  @param[in]     category        LOG_CLASSIFY name, e.g. syslog and securitylog
+ *
+ *  @return     true  - get log entry success.
+ *              false - parameter value invalid or category match fail.
+ *
+ *  @note     Please ref. RDM_OID_LOG_CLASSIFY
+ */
+zcfgRet_t sysLogInfoGet(char *fileName, char *description, char *category)
+{
 	zcfgRet_t ret = ZCFG_SUCCESS;
 	objIndex_t iid;
 	struct json_object *obj = NULL;
@@ -92,10 +147,10 @@
 	char *logDescr = NULL;
 	bool foundLogCat = false;
 
-	if ((fileName == NULL) || (category == NULL))
+	if ((fileName == NULL) || (description == NULL) || (category == NULL))
 	{
-		dbg_printf("%s:%d: fileName or category cannot be NULL\n",__FUNCTION__,__LINE__);
-		return ZCFG_INTERNAL_ERROR;	
+		dbg_printf("%s:%d: fileName or description or category cannot be NULL\n",__FUNCTION__,__LINE__);
+		return ZCFG_INVALID_PARAM_VALUE;
 	}
 
 	IID_INIT(iid);
@@ -123,7 +178,7 @@
 	zcfgFeJsonObjFree(obj);
 
 	return ret;
-}
+}// sysLogInfoGet
 
 void zcfgFeDalShowSysLog(struct json_object *Jarray){
 	int i, len = 0;
@@ -193,7 +248,7 @@
 
 	// get file name e.g. syslog.log / get description e.g. System Log
 	cat = json_object_get_string(json_object_object_get(Jobj,"category"));
-	ret = getSysLogInfoByCategory(fileName,logDescript,cat);
+	ret = sysLogInfoGet(fileName,logDescript,cat);
 	if (ret != ZCFG_SUCCESS)
 	{
 		dbg_printf("%s:%d: ret=%d\n",__FUNCTION__,__LINE__,ret);
@@ -238,7 +293,7 @@
 	// if no rotate file, get log data from flash
 	if (!rotateExist && flashExist)
 	{
-		getSysLogFromFlash(contentObj, fileLine, NULL, fileName);
+		flashSysLogGet(contentObj, fileLine, "ALL", fileName);
 	}
 
 	if(rotateExist)
@@ -293,7 +348,7 @@
 
 	// get file name e.g. syslog.log
 	cat = json_object_get_string(json_object_object_get(Jobj,"category"));
-	ret = getSysLogInfoByCategory(fileName,logDescript,cat);
+	ret = sysLogInfoGet(fileName,logDescript,cat);
 	if (ret != ZCFG_SUCCESS)
 	{
 		dbg_printf("%s:%d: ret=%d\n", __FUNCTION__,__LINE__,ret);
