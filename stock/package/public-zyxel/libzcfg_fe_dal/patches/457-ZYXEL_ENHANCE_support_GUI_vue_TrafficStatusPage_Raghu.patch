Index: libzcfg_fe_dal-1.0/Makefile
===================================================================
--- libzcfg_fe_dal-1.0.orig/Makefile	2018-02-08 17:43:07.580582717 +0800
+++ libzcfg_fe_dal-1.0/Makefile	2018-02-08 17:43:08.032582732 +0800
@@ -35,6 +35,7 @@
 SECURITY_PARENTALCTL_PATH = ./security/parentalControl
 SECURITY_SCHEDULERRULE_PATH = ./security/schedulerRule
 SECURITY_CERTIFICATE_PATH = ./security/certificate
+MONITOR_PATH = ./monitor
 JS_PATH = ./js
 SOURCES += $(wildcard $(FE_PATH)/*.c)
 SOURCES += $(wildcard $(NETWORK_BR_PATH)/*.c)
@@ -70,6 +71,7 @@
 SOURCES += $(wildcard $(SECURITY_PARENTALCTL_PATH)/*.c)
 SOURCES += $(wildcard $(SECURITY_SCHEDULERRULE_PATH)/*.c)
 SOURCES += $(wildcard $(SECURITY_CERTIFICATE_PATH)/*.c)
+SOURCES += $(wildcard $(MONITOR_PATH)/*.c)
 SOURCES += $(wildcard $(JS_PATH)/*.c)
 OBJS = $(patsubst %.c, %.o, $(SOURCES))
 
Index: libzcfg_fe_dal-1.0/monitor/zcfg_fe_dal_monitor.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ libzcfg_fe_dal-1.0/monitor/zcfg_fe_dal_monitor.c	2018-02-08 17:44:19.270637121 +0800
@@ -0,0 +1,135 @@
+#include <json/json.h>
+
+#include "zcfg_common.h"
+#include "zcfg_rdm_oid.h"
+#include "zcfg_rdm_obj.h"
+#include "zcfg_debug.h"
+#include "zcfg_fe_rdm_string.h"
+#include "zcfg_fe_dal_common.h"
+
+
+dal_param_t Traffic_Status_param[] = 
+{
+	{"TrafficStatus",		dalType_string,	0,	0,	NULL},
+	{NULL,		0,	0,	0,	NULL}
+};
+
+
+/*
+ *  Function Name: zcfgFeDalTrafficStatusGet
+ *  Description: get All Req Intf Objs to Vue GUI for Traffic status
+ *
+ */
+zcfgRet_t zcfgFeDalTrafficStatusGet(struct json_object *Jobj, struct json_object *Jarray, char *replyMsg)
+{
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	struct json_object *getAllReqIntfObjs = NULL;
+	struct json_object *ipIfaceObj = NULL, *ipIfaceArray = NULL, *ipIfaceStObj = NULL, *ipIfaceStArray = NULL;
+	struct json_object *pppIfaceObj = NULL, *pppIfaceArray = NULL,  *pppIfaceSt = NULL,  *pppIfaceStArray = NULL;
+	struct json_object *ethIfaceObj = NULL, *ethIfaceArray = NULL,  *ethIfaceSt = NULL,  *ethIfaceStArray = NULL;
+	struct json_object *bridgingPTObj = NULL, *bridgingPTArray = NULL,  *bridgingStatus = NULL,  *bridgingStatusArray = NULL;
+	struct json_object *wifiSsidObj = NULL, *wifiSsidArray = NULL;
+	struct json_object *wifiRadioObj = NULL, *wifiRadiArray = NULL;
+	struct json_object *hostsObj = NULL, *hostsArray = NULL;
+	struct json_object *changeIconNameObj = NULL, *changeIconNameArray = NULL;	
+	objIndex_t iid;
+
+	
+	ipIfaceArray = json_object_new_array();
+	IID_INIT(iid);
+	while(zcfgFeObjJsonGetNext(RDM_OID_IP_IFACE, &iid, &ipIfaceObj) == ZCFG_SUCCESS) {
+		json_object_array_add(ipIfaceArray, ipIfaceObj);
+	}
+	
+	ipIfaceStArray = json_object_new_array();
+	IID_INIT(iid);
+	while(zcfgFeObjJsonGetNext(RDM_OID_IP_IFACE_STAT, &iid, &ipIfaceStObj) == ZCFG_SUCCESS) {
+		json_object_array_add(ipIfaceStArray, ipIfaceStObj);
+	}
+	pppIfaceArray = json_object_new_array();
+	IID_INIT(iid);
+	while(zcfgFeObjJsonGetNext(RDM_OID_PPP_IFACE, &iid, &pppIfaceObj) == ZCFG_SUCCESS) {
+		json_object_array_add(pppIfaceArray, pppIfaceObj);
+	}
+	
+	pppIfaceStArray = json_object_new_array();
+	IID_INIT(iid);
+	while(zcfgFeObjJsonGetNext(RDM_OID_PPP_IFACE_STAT, &iid, &pppIfaceSt) == ZCFG_SUCCESS) {
+		json_object_array_add(pppIfaceStArray, pppIfaceSt);
+	}
+	ethIfaceArray = json_object_new_array();
+	IID_INIT(iid);
+	while(zcfgFeObjJsonGetNext(RDM_OID_ETH_IFACE, &iid, &ethIfaceObj) == ZCFG_SUCCESS) {
+		json_object_array_add(ethIfaceArray, ethIfaceObj);
+	}
+	
+	ethIfaceStArray = json_object_new_array();
+	IID_INIT(iid);
+	while(zcfgFeObjJsonGetNext(RDM_OID_ETH_INTF_ST, &iid, &ethIfaceSt) == ZCFG_SUCCESS) {
+		json_object_array_add(ethIfaceStArray, ethIfaceSt);
+	}
+	bridgingPTArray = json_object_new_array();
+	IID_INIT(iid);
+	while(zcfgFeObjJsonGetNext(RDM_OID_BRIDGING_BR_PORT, &iid, &bridgingPTObj) == ZCFG_SUCCESS) {
+		json_object_array_add(bridgingPTArray, bridgingPTObj);
+	}
+	
+	bridgingStatusArray = json_object_new_array();
+	IID_INIT(iid);
+	while(zcfgFeObjJsonGetNext(RDM_OID_BRIDGING_BR_PORT_ST, &iid, &bridgingStatus) == ZCFG_SUCCESS) {
+		json_object_array_add(bridgingStatusArray, bridgingStatus);
+	}
+	wifiSsidArray = json_object_new_array();
+	IID_INIT(iid);
+	while(zcfgFeObjJsonGetNext(RDM_OID_WIFI_SSID, &iid, &wifiSsidObj) == ZCFG_SUCCESS) {
+		json_object_array_add(wifiSsidArray, wifiSsidObj);
+	}
+	
+	wifiRadiArray = json_object_new_array();
+	IID_INIT(iid);
+	while(zcfgFeObjJsonGetNext(RDM_OID_WIFI_RADIO, &iid, &wifiRadioObj) == ZCFG_SUCCESS) {
+		json_object_array_add(wifiRadiArray, wifiRadioObj);
+	}
+	hostsArray = json_object_new_array();
+	IID_INIT(iid);
+	while(zcfgFeObjJsonGetNext(RDM_OID_HOSTS_HOST, &iid, &hostsObj) == ZCFG_SUCCESS) {
+		json_object_array_add(hostsArray, hostsObj);
+	}
+	
+	changeIconNameArray = json_object_new_array();
+	IID_INIT(iid);
+	while(zcfgFeObjJsonGetNext(RDM_OID_CHANGE_ICON_NAME, &iid, &changeIconNameObj) == ZCFG_SUCCESS) {
+		json_object_array_add(changeIconNameArray, changeIconNameObj);
+	}
+	
+
+	getAllReqIntfObjs = json_object_new_object();
+	json_object_array_add(Jarray, getAllReqIntfObjs);
+	json_object_object_add(getAllReqIntfObjs, "ipIface", ipIfaceArray);
+	json_object_object_add(getAllReqIntfObjs, "ipIfaceSt", ipIfaceStArray);
+	json_object_object_add(getAllReqIntfObjs, "pppIface", pppIfaceArray);
+	json_object_object_add(getAllReqIntfObjs, "pppIfaceSt", pppIfaceStArray);
+	json_object_object_add(getAllReqIntfObjs, "ethIface", ethIfaceArray);
+	json_object_object_add(getAllReqIntfObjs, "ethIfaceSt", ethIfaceStArray);		
+	json_object_object_add(getAllReqIntfObjs, "bridgingPT", bridgingPTArray);
+	json_object_object_add(getAllReqIntfObjs, "bridgingStatus", bridgingStatusArray);		
+	json_object_object_add(getAllReqIntfObjs, "wifiSsid", wifiSsidArray);
+	json_object_object_add(getAllReqIntfObjs, "wifiRadio", wifiRadiArray);
+	json_object_object_add(getAllReqIntfObjs, "hosts", hostsArray);
+	json_object_object_add(getAllReqIntfObjs, "changeIconName", changeIconNameArray);	
+	return ZCFG_SUCCESS;
+	
+}
+ zcfgRet_t zcfgFeDalTrafficStatus(const char *method, struct json_object *Jobj, struct json_object *Jarray, char *replyMsg)
+ {
+	zcfgRet_t ret = ZCFG_SUCCESS;
+
+	if(!method || !Jobj)
+		return ZCFG_INTERNAL_ERROR;
+
+	if(!strcmp(method, "GET")){
+		ret = zcfgFeDalTrafficStatusGet(Jobj, Jarray, NULL);
+	}
+
+	return ret;	 
+ }
\ No newline at end of file
Index: libzcfg_fe_dal-1.0/zcfg_fe_dal.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/zcfg_fe_dal.c	2018-02-08 17:43:07.976582730 +0800
+++ libzcfg_fe_dal-1.0/zcfg_fe_dal.c	2018-02-08 17:43:08.036582732 +0800
@@ -101,6 +101,7 @@
 extern dal_param_t USER_ACCOUNT_param[];
 extern dal_param_t NETWORK_MAP_param[];
 extern dal_param_t SYS_LOG_param[];
+extern dal_param_t Traffic_Status_param[];
 //#ifdef CBT_CUSTOMIZATION // 20170711 Max Add
 #ifdef ZYXEL_WEB_WIRELESS_NEW_VERSION_ONE
 extern dal_param_t WIFI_CBT_param[];
@@ -195,6 +196,7 @@
 extern zcfgRet_t zcfgFeDalCbtWifi(const char *method, struct json_object *Jobj, char *replyMsg);
 extern zcfgRet_t zcfgFeDalCbtWifiAdv(const char *method, struct json_object *Jobj, char *replyMsg);
 #endif
+extern zcfgRet_t zcfgFeDalTrafficStatus(const char *method, struct json_object *Jobj, struct json_object *Jarray, char *replyMsg);
 
 extern void zcfgFeDalShowStaticRoute(struct json_object *Jarray);
 extern void zcfgFeDalShowRip(struct json_object *Jarray);
@@ -347,6 +349,8 @@
 {"lanhosts",		NETWORK_MAP_param, zcfgFeDalNetworkMAP,	zcfgFeDalShowNetworkMAP,		"get",				"Status"},
 {"status",			NETWORK_MAP_param, zcfgFeDalStatus, 		NULL,						"",					""}, //temporarily GUI only
 {"cardpage_status", NETWORK_MAP_param, zcfgFeDalCardPageStatus, NULL,						"", 				""}, //temporarily cardpage only
+//Monitor
+{"Traffic_Status", Traffic_Status_param, zcfgFeDalTrafficStatus, 	NULL,						"get", 				""},
 //#ifdef CBT_CUSTOMIZATION // 20170711 Max Add
 #ifdef ZYXEL_WEB_WIRELESS_NEW_VERSION_ONE
 {"WIFI_CBT",		WIFI_CBT_param,		zcfgFeDalCbtWifi,		NULL,		"edit",		""},
