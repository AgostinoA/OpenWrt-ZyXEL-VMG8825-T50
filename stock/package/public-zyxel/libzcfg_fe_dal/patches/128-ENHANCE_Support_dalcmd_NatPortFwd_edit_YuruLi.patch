Index: libzcfg_fe_dal-1.0/network/nat/zcfg_fe_dal_nat_port_mapping.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/network/nat/zcfg_fe_dal_nat_port_mapping.c	2017-02-10 10:58:04.116875320 +0800
+++ libzcfg_fe_dal-1.0/network/nat/zcfg_fe_dal_nat_port_mapping.c	2017-02-10 15:33:29.065430549 +0800
@@ -10,21 +10,23 @@
 
 #define CWMP_SOAP_MSG_DEBUG (1 << 1)
 
-dal_param_t NAT_PORT_MAPPING_param[] =
+dal_param_t NatPortFwd_param[] =
 {
-	{"Enable",		dalType_boolean,	0,	0,	NULL,	NULL,	0},
-	{"Interface",		dalType_string,	0,	256,	NULL,	NULL,	0},
-	{"OriginatingIpAddress",	dalType_string, 0, 45, NULL,	NULL,	0},
-	{"ExternalPort",		dalType_int,	0,	63737,	NULL,	NULL,	0},
-	{"ExternalPortEndRange",		dalType_int,	0,	63737,	NULL,	NULL,	0},
-	{"InternalPort",		dalType_int,	0,	63737,	NULL,	NULL,	0},
-	{"X_ZYXEL_InternalPortEndRange",		dalType_int,	0,	63737,	NULL,	NULL,	0},
-	{"X_ZYXEL_SetOriginatingIP",	dalType_boolean, 0, 0, NULL,	NULL,	0},
-	{"Protocol",		dalType_string,	0,	3,	NULL,	NULL,	0},
-	{"InternalClient",		dalType_string,	0,	256,	NULL,	NULL,	0},
-	{"Description",		dalType_string,	0,	256,	NULL,	NULL,	0},			
-	{"Index",		dalType_int,	0,	0,	NULL,	NULL,	dal_Edit|dal_Delete},
-	{NULL,		0,	0,	0,	NULL}
+	{"Index",						dalType_int,		0,	0,		NULL,	NULL,				dal_Edit|dal_Delete},
+	{"Description",					dalType_string,		1,	256,	NULL,	NULL,				dal_Add},
+	{"Enable",						dalType_boolean,	0,	0,		NULL,	NULL,				0},
+	{"Interface",					dalType_RtWanWWan,	0,	0,		NULL,	NULL,				dal_Add},
+	{"ExternalPort",				dalType_int,		1,	65535,	NULL,	NULL,				dal_Add},
+	{"ExternalPortEndRange",		dalType_int,		1,	65535,	NULL,	NULL,				dal_Add},
+	{"InternalPort",				dalType_int,		1,	65535,	NULL,	NULL,				dal_Add},
+	//{"X_ZYXEL_InternalPortEndRange",dalType_int,		1,	63737,	NULL,	NULL,	0},
+	{"InternalPortEndRange",		dalType_int,		1,	65535,	NULL,	NULL,				dal_Add},
+	//{"X_ZYXEL_SetOriginatingIP",	dalType_boolean, 	0, 0, 		NULL,	NULL,	0},
+	{"SetOriginatingIP",			dalType_boolean, 	0,	0, 		NULL,	NULL,				0},
+	{"OriginatingIpAddress",		dalType_v4Addr, 	0, 	0, 		NULL,	NULL,				0},
+	{"Protocol",					dalType_string,		0,	0,		NULL,	"TCP|UDP|ALL",		0},
+	{"InternalClient",				dalType_v4Addr,		0,	256,	NULL,	NULL,				dal_Add},
+	{NULL,							0,					0,	0,		NULL,	NULL,				dal_Add}
 };
 void zcfgFeDalShowPortFwd(struct json_object *Jarray){
 	int i, len = 0;
@@ -37,26 +39,28 @@
 		return;
 	}
 	printf("%-5s %-15s %-7s %-15s %-17s %-15s %-10s %-10s %-25s %-25s %-10s\n",
-		    "Index", "Service Name", "Enable", "Originating IP", "Server IP Address", "WAN Interface", "Start Port", "End Port", "Translation Start Port", "Translation End Port", "Protocol");
+		    "Index", "Description", "Enable", "Originating IP", "Server IP Address", "WAN Interface", "Start Port", "End Port", "Translation Start Port", "Translation End Port", "Protocol");
 	len = json_object_array_length(Jarray);
 	for(i=0;i<len;i++){
 		obj = json_object_array_get_idx(Jarray, i);
-		if(!strcmp(json_object_get_string(json_object_object_get(obj, "Orig_IP")),"")){
+		if(!json_object_get_boolean(json_object_object_get(obj, "SetOriginatingIP")) ||
+		   !strcmp(json_object_get_string(json_object_object_get(obj, "OriginatingIpAddress")),"")){
 			origIP = "N/A";
 		}
 		else
-			origIP = json_object_get_string(json_object_object_get(obj, "Orig_IP"));
+			origIP = json_object_get_string(json_object_object_get(obj, "OriginatingIpAddress"));			
+		
 		printf("%-5s %-15s %-7d %-15s %-17s %-15s %-10s %-10s %-25s %-25s %-10s\n",
-			json_object_get_string(json_object_object_get(obj, "idx")),
-			json_object_get_string(json_object_object_get(obj, "Service_Name")),
-			json_object_get_boolean(json_object_object_get(obj, "Active")),
+			json_object_get_string(json_object_object_get(obj, "Index")),
+			json_object_get_string(json_object_object_get(obj, "Description")),
+			json_object_get_boolean(json_object_object_get(obj, "Enable")),
 			origIP,
-			json_object_get_string(json_object_object_get(obj, "Server_IP_Addr")),
-			json_object_get_string(json_object_object_get(obj, "Wan_Interface")),
-			json_object_get_string(json_object_object_get(obj, "Start_Port")),
-			json_object_get_string(json_object_object_get(obj, "End_Port")),
-			json_object_get_string(json_object_object_get(obj, "Trans_Start_Port")),
-			json_object_get_string(json_object_object_get(obj, "Trans_End_Port")),
+			json_object_get_string(json_object_object_get(obj, "InternalClient")),
+			json_object_get_string(json_object_object_get(obj, "Interface")),
+			json_object_get_string(json_object_object_get(obj, "ExternalPort")),
+			json_object_get_string(json_object_object_get(obj, "ExternalPortEndRange")),
+			json_object_get_string(json_object_object_get(obj, "InternalPort")),
+			json_object_get_string(json_object_object_get(obj, "InternalPortEndRange")),
 			json_object_get_string(json_object_object_get(obj, "Protocol")));
 	}
 }
@@ -80,6 +84,15 @@
 	const char *internalclient = NULL;
 	const char *description = NULL;
 
+	//Don' t allow Description prefix is "APP:", it is used for NAT applications rule.
+	if(json_object_object_get(Jobj, "Description") != NULL){
+		if(!strncmp(json_object_get_string(json_object_object_get(Jobj, "Description")), "APP:", 4)){
+			if(replyMsg != NULL)
+				strcpy(replyMsg, "Invalid NatPortFwd Description.");
+			return ZCFG_REQUEST_REJECT;
+		}
+	}
+
 	IID_INIT(objIid);
 	ret = zcfgFeObjJsonAdd(RDM_OID_NAT_PORT_MAPPING, &objIid, NULL);
 	if(ret == ZCFG_SUCCESS){
@@ -92,31 +105,62 @@
 		externalport = json_object_get_int(json_object_object_get(Jobj, "ExternalPort"));
 		externalportendrange = json_object_get_int(json_object_object_get(Jobj, "ExternalPortEndRange"));
 		internalport = json_object_get_int(json_object_object_get(Jobj, "InternalPort"));
-		internalportendrange = json_object_get_int(json_object_object_get(Jobj, "X_ZYXEL_InternalPortEndRange"));
-		setoriginatingip = json_object_get_boolean(json_object_object_get(Jobj, "X_ZYXEL_SetOriginatingIP"));
+		internalportendrange = json_object_get_int(json_object_object_get(Jobj, "InternalPortEndRange"));
+		setoriginatingip = json_object_get_boolean(json_object_object_get(Jobj, "SetOriginatingIP"));
 		protocol = json_object_get_string(json_object_object_get(Jobj, "Protocol"));
 		internalclient = json_object_get_string(json_object_object_get(Jobj, "InternalClient"));
 		description = json_object_get_string(json_object_object_get(Jobj, "Description"));
-	
-		json_object_object_add(NatPortMappingJobj, "Enable", json_object_new_boolean(enable));
-		json_object_object_add(NatPortMappingJobj, "Interface", json_object_new_string(interface));
-		json_object_object_add(NatPortMappingJobj, "OriginatingIpAddress", json_object_new_string(originatingipaddress));
-		json_object_object_add(NatPortMappingJobj, "ExternalPort", json_object_new_int(externalport));
-		json_object_object_add(NatPortMappingJobj, "ExternalPortEndRange", json_object_new_int(externalportendrange));
-		json_object_object_add(NatPortMappingJobj, "InternalPort", json_object_new_int(internalport));
-		json_object_object_add(NatPortMappingJobj, "X_ZYXEL_InternalPortEndRange", json_object_new_int(internalportendrange));
-		json_object_object_add(NatPortMappingJobj, "X_ZYXEL_SetOriginatingIP", json_object_new_boolean(setoriginatingip));
-		json_object_object_add(NatPortMappingJobj, "Protocol", json_object_new_string(protocol));
-		json_object_object_add(NatPortMappingJobj, "InternalClient", json_object_new_string(internalclient));
-		json_object_object_add(NatPortMappingJobj, "Description", json_object_new_string(description));
+
+		//check prot range
+		if(internalport > internalportendrange){
+			if(replyMsg != NULL)
+				strcpy(replyMsg, "Internal port range is invalid.");
+			
+			zcfgFeJsonObjFree(NatPortMappingJobj);
+			zcfgFeObjJsonDel(RDM_OID_NAT_PORT_MAPPING, &objIid, NULL);
+			return ZCFG_INVALID_PARAM_VALUE;
+		}
+		if(externalport > externalportendrange){
+			if(replyMsg != NULL)
+				strcpy(replyMsg, "External port range is invalid.");
+			
+			zcfgFeJsonObjFree(NatPortMappingJobj);
+			zcfgFeObjJsonDel(RDM_OID_NAT_PORT_MAPPING, &objIid, NULL);
+			return ZCFG_INVALID_PARAM_VALUE;
+		}
+
+		if(json_object_object_get(Jobj, "Enable") != NULL)
+			json_object_object_add(NatPortMappingJobj, "Enable", json_object_new_boolean(enable));
+		if(json_object_object_get(Jobj, "Interface") != NULL)
+			json_object_object_add(NatPortMappingJobj, "Interface", json_object_new_string(interface));
+		if(json_object_object_get(Jobj, "ExternalPort") != NULL)
+			json_object_object_add(NatPortMappingJobj, "ExternalPort", json_object_new_int(externalport));
+		if(json_object_object_get(Jobj, "ExternalPortEndRange") != NULL)
+			json_object_object_add(NatPortMappingJobj, "ExternalPortEndRange", json_object_new_int(externalportendrange));
+		if(json_object_object_get(Jobj, "InternalPort") != NULL)
+			json_object_object_add(NatPortMappingJobj, "InternalPort", json_object_new_int(internalport));
+		if(json_object_object_get(Jobj, "InternalPortEndRange") != NULL)
+			json_object_object_add(NatPortMappingJobj, "X_ZYXEL_InternalPortEndRange", json_object_new_int(internalportendrange));
+		if(json_object_object_get(Jobj, "SetOriginatingIP") != NULL)
+			json_object_object_add(NatPortMappingJobj, "X_ZYXEL_SetOriginatingIP", json_object_new_boolean(setoriginatingip));
+		if(json_object_object_get(Jobj, "OriginatingIpAddress") != NULL)
+			json_object_object_add(NatPortMappingJobj, "OriginatingIpAddress", json_object_new_string(originatingipaddress));
+		if(json_object_object_get(Jobj, "Protocol") != NULL)
+			json_object_object_add(NatPortMappingJobj, "Protocol", json_object_new_string(protocol));
+		if(json_object_object_get(Jobj, "InternalClient") != NULL)
+			json_object_object_add(NatPortMappingJobj, "InternalClient", json_object_new_string(internalclient));
+		if(json_object_object_get(Jobj, "Description") != NULL)
+			json_object_object_add(NatPortMappingJobj, "Description", json_object_new_string(description));
+
 		ret = zcfgFeObjJsonSet(RDM_OID_NAT_PORT_MAPPING, &objIid, NatPortMappingJobj, NULL);
+
+		zcfgFeJsonObjFree(NatPortMappingJobj);
 	}
-	zcfgFeJsonObjFree(NatPortMappingJobj);
+	
 	return ret;
 }
 zcfgRet_t zcfgFeDalNatPortMappingEdit(struct json_object *Jobj, char *replyMsg)
 {
-
 	zcfgRet_t ret = ZCFG_SUCCESS;
 	struct json_object *NatPortMappingJobj = NULL;
 	objIndex_t objIid = {0};
@@ -132,71 +176,96 @@
 	const char *internalclient = NULL;
 	const char *description = NULL;
 	int index = 0;
-	int count = 0;
 	bool found = false;
-	bool tmp = false;
-	
+
 	index = json_object_get_int(json_object_object_get(Jobj, "Index"));
-	while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_NAT_PORT_MAPPING, &objIid, &NatPortMappingJobj) == ZCFG_SUCCESS){
-		if(strncmp(json_object_get_string(json_object_object_get(NatPortMappingJobj, "Description")),"APP:",4)){
-			if(index == objIid.idx[0]){
-				tmp = true;
-				break;
-			}
-		}
-	}
-	if(!tmp){
-		printf("Cannot find the rule.\n");
-		return ret;
-	}
 	IID_INIT(objIid);
-	while(ret = zcfgFeObjJsonGetNext(RDM_OID_NAT_PORT_MAPPING, &objIid, &NatPortMappingJobj) == ZCFG_SUCCESS) {
-		if(count == index-1){
+	objIid.level = 1;
+	objIid.idx[0] = index;
+	if(zcfgFeObjJsonGetWithoutUpdate(RDM_OID_NAT_PORT_MAPPING, &objIid, &NatPortMappingJobj) == ZCFG_SUCCESS){
+		if(strncmp(json_object_get_string(json_object_object_get(NatPortMappingJobj, "Description")),"APP:",4)){
 			found = true;
-			break;
 		}
-		else
-			count++;
 	}
+
+	if(!found){
+		if(replyMsg != NULL)
+			strcpy(replyMsg, "Can not find the rule.");
+		if(NatPortMappingJobj != NULL)
+			zcfgFeJsonObjFree(NatPortMappingJobj);
+		return ZCFG_NOT_FOUND;
+	}
+	
 	if(found){
+		//Don' t allow Description prefix is "APP:", it is used for NAT applications rule.
+		if(json_object_object_get(Jobj, "Description") != NULL){
+			if(!strncmp(json_object_get_string(json_object_object_get(Jobj, "Description")), "APP:", 4)){
+				if(replyMsg != NULL)
+					strcpy(replyMsg, "Invalid NatPortFwd Description");
+				
+				zcfgFeJsonObjFree(NatPortMappingJobj);
+				return ZCFG_REQUEST_REJECT;
+			}
+		}
+		
 		enable = json_object_get_boolean(json_object_object_get(Jobj, "Enable"));
 		interface = json_object_get_string(json_object_object_get(Jobj, "Interface"));
 		originatingipaddress = json_object_get_string(json_object_object_get(Jobj, "OriginatingIpAddress"));		
 		externalport = json_object_get_int(json_object_object_get(Jobj, "ExternalPort"));
 		externalportendrange = json_object_get_int(json_object_object_get(Jobj, "ExternalPortEndRange"));
 		internalport = json_object_get_int(json_object_object_get(Jobj, "InternalPort"));
-		internalportendrange = json_object_get_int(json_object_object_get(Jobj, "X_ZYXEL_InternalPortEndRange"));
-		setoriginatingip = json_object_get_boolean(json_object_object_get(Jobj, "X_ZYXEL_SetOriginatingIP"));
+		internalportendrange = json_object_get_int(json_object_object_get(Jobj, "InternalPortEndRange"));
+		setoriginatingip = json_object_get_boolean(json_object_object_get(Jobj, "SetOriginatingIP"));
 		protocol = json_object_get_string(json_object_object_get(Jobj, "Protocol"));
 		internalclient = json_object_get_string(json_object_object_get(Jobj, "InternalClient"));
 		description = json_object_get_string(json_object_object_get(Jobj, "Description"));
+		
 		if(json_object_object_get(Jobj, "Enable") != NULL)
-		json_object_object_add(NatPortMappingJobj, "Enable", json_object_new_boolean(enable));
+			json_object_object_add(NatPortMappingJobj, "Enable", json_object_new_boolean(enable));
 		if(json_object_object_get(Jobj, "Interface") != NULL)
-		json_object_object_add(NatPortMappingJobj, "Interface", json_object_new_string(interface));
-		if(json_object_object_get(Jobj, "OriginatingIpAddress") != NULL)
-		json_object_object_add(NatPortMappingJobj, "OriginatingIpAddress", json_object_new_string(originatingipaddress));
+			json_object_object_add(NatPortMappingJobj, "Interface", json_object_new_string(interface));
 		if(json_object_object_get(Jobj, "ExternalPort") != NULL)
-		json_object_object_add(NatPortMappingJobj, "ExternalPort", json_object_new_int(externalport));
+			json_object_object_add(NatPortMappingJobj, "ExternalPort", json_object_new_int(externalport));
 		if(json_object_object_get(Jobj, "ExternalPortEndRange") != NULL)
-		json_object_object_add(NatPortMappingJobj, "ExternalPortEndRange", json_object_new_int(externalportendrange));
+			json_object_object_add(NatPortMappingJobj, "ExternalPortEndRange", json_object_new_int(externalportendrange));
 		if(json_object_object_get(Jobj, "InternalPort") != NULL)
-		json_object_object_add(NatPortMappingJobj, "InternalPort", json_object_new_int(internalport));
-		if(json_object_object_get(Jobj, "X_ZYXEL_InternalPortEndRange") != NULL)
-		json_object_object_add(NatPortMappingJobj, "X_ZYXEL_InternalPortEndRange", json_object_new_int(internalportendrange));
-		if(json_object_object_get(Jobj, "X_ZYXEL_SetOriginatingIP") != NULL)
-		json_object_object_add(NatPortMappingJobj, "X_ZYXEL_SetOriginatingIP", json_object_new_boolean(setoriginatingip));
+			json_object_object_add(NatPortMappingJobj, "InternalPort", json_object_new_int(internalport));
+		if(json_object_object_get(Jobj, "InternalPortEndRange") != NULL)
+			json_object_object_add(NatPortMappingJobj, "X_ZYXEL_InternalPortEndRange", json_object_new_int(internalportendrange));
+		if(json_object_object_get(Jobj, "SetOriginatingIP") != NULL)
+			json_object_object_add(NatPortMappingJobj, "X_ZYXEL_SetOriginatingIP", json_object_new_boolean(setoriginatingip));
+		if(json_object_object_get(Jobj, "OriginatingIpAddress") != NULL)
+			json_object_object_add(NatPortMappingJobj, "OriginatingIpAddress", json_object_new_string(originatingipaddress));
 		if(json_object_object_get(Jobj, "Protocol") != NULL)
-		json_object_object_add(NatPortMappingJobj, "Protocol", json_object_new_string(protocol));
+			json_object_object_add(NatPortMappingJobj, "Protocol", json_object_new_string(protocol));
 		if(json_object_object_get(Jobj, "InternalClient") != NULL)
-		json_object_object_add(NatPortMappingJobj, "InternalClient", json_object_new_string(internalclient));
+			json_object_object_add(NatPortMappingJobj, "InternalClient", json_object_new_string(internalclient));
 		if(json_object_object_get(Jobj, "Description") != NULL)
-		json_object_object_add(NatPortMappingJobj, "Description", json_object_new_string(description));
+			json_object_object_add(NatPortMappingJobj, "Description", json_object_new_string(description));
+
+		//check prot range
+		externalport = json_object_get_int(json_object_object_get(NatPortMappingJobj, "ExternalPort"));
+		externalportendrange = json_object_get_int(json_object_object_get(NatPortMappingJobj, "ExternalPortEndRange"));
+		internalport = json_object_get_int(json_object_object_get(NatPortMappingJobj, "InternalPort"));
+		internalportendrange = json_object_get_int(json_object_object_get(NatPortMappingJobj, "X_ZYXEL_InternalPortEndRange"));
+		
+		if(internalport > internalportendrange){
+			if(replyMsg != NULL)
+				strcpy(replyMsg, "Internal port range is invalid.");
+			zcfgFeJsonObjFree(NatPortMappingJobj);
+			return ZCFG_INVALID_PARAM_VALUE;
+		}
+		if(externalport > externalportendrange){
+			if(replyMsg != NULL)
+				strcpy(replyMsg, "External port range is invalid.");
+			zcfgFeJsonObjFree(NatPortMappingJobj);
+			return ZCFG_INVALID_PARAM_VALUE;
+		}
 
 		ret = zcfgFeObjJsonSet(RDM_OID_NAT_PORT_MAPPING, &objIid, NatPortMappingJobj, NULL);
+		zcfgFeJsonObjFree(NatPortMappingJobj);
 	}
-
-	zcfgFeJsonObjFree(NatPortMappingJobj);
+	
 	return ret;
 }
 zcfgRet_t zcfgFeDalNatPortMappingDelete(struct json_object *Jobj, char *replyMsg)
@@ -205,29 +274,32 @@
 	zcfgRet_t ret = ZCFG_SUCCESS;
 	struct json_object *NatPortMappingJobj = NULL;
 	objIndex_t objIid = {0};
-	int index = 0;
-	int count = 0;
 	bool found = false;
 	
-	index = json_object_get_int(json_object_object_get(Jobj, "Index"));
 	IID_INIT(objIid);
-	while(zcfgFeObjJsonGetNext(RDM_OID_NAT_PORT_MAPPING, &objIid, &NatPortMappingJobj) == ZCFG_SUCCESS) {
-		if(count == index-1){
+	objIid.level = 1;
+	objIid.idx[0] = json_object_get_int(json_object_object_get(Jobj, "Index"));
+	if(zcfgFeObjJsonGetWithoutUpdate(RDM_OID_NAT_PORT_MAPPING, &objIid, &NatPortMappingJobj) == ZCFG_SUCCESS) {
+		if(strncmp(json_object_get_string(json_object_object_get(NatPortMappingJobj, "Description")),"APP:",4)){
 			found = true;
-			break;
 		}
-		else
-			count++;
+		zcfgFeJsonObjFree(NatPortMappingJobj);
 	}
+	
 	if(found){
 		ret = zcfgFeObjJsonDel(RDM_OID_NAT_PORT_MAPPING, &objIid, NULL);
 	}
+	else{
+		if(replyMsg != NULL)
+			strcpy(replyMsg, "Can't find rule");
+		return ZCFG_NOT_FOUND;
+	}
+	
 	
-	zcfgFeJsonObjFree(NatPortMappingJobj);
 	return ret;
 	
 }
-zcfgRet_t zcfgFeDalNatPortMappingGet(struct json_object *Jobj, char *replyMsg){
+zcfgRet_t zcfgFeDalNatPortMappingGet(struct json_object *Jarray, char *replyMsg){
 	zcfgRet_t ret = ZCFG_SUCCESS;
 	struct json_object *paramJobj = NULL;
 	struct json_object *PortFwdJobj = NULL;
@@ -235,23 +307,23 @@
 	while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_NAT_PORT_MAPPING, &PortFwdIid, &PortFwdJobj) == ZCFG_SUCCESS){
 		if(strncmp(json_object_get_string(json_object_object_get(PortFwdJobj, "Description")),"APP:",4)){
 			paramJobj = json_object_new_object();
-			json_object_object_add(paramJobj, "Active", json_object_object_get(PortFwdJobj, "Enable"));
-			json_object_object_add(paramJobj, "Protocol", json_object_object_get(PortFwdJobj, "Protocol"));
-			json_object_object_add(paramJobj, "Service_Name", json_object_object_get(PortFwdJobj, "Description"));
-			json_object_object_add(paramJobj, "Wan_Interface", json_object_object_get(PortFwdJobj, "Interface"));
-			json_object_object_add(paramJobj, "Start_Port", json_object_object_get(PortFwdJobj, "ExternalPort"));
-			json_object_object_add(paramJobj, "End_Port", json_object_object_get(PortFwdJobj, "ExternalPortEndRange"));
-			json_object_object_add(paramJobj, "Trans_Start_Port", json_object_object_get(PortFwdJobj, "InternalPort"));
-			json_object_object_add(paramJobj, "Trans_End_Port", json_object_object_get(PortFwdJobj, "X_ZYXEL_InternalPortEndRange"));
-			json_object_object_add(paramJobj, "Server_IP_Addr", json_object_object_get(PortFwdJobj, "InternalClient"));
-			json_object_object_add(paramJobj, "Config_Orig_IP", json_object_object_get(PortFwdJobj, "X_ZYXEL_SetOriginatingIP"));
-			json_object_object_add(paramJobj, "Orig_IP", json_object_object_get(PortFwdJobj, "OriginatingIpAddress"));
-			json_object_object_add(paramJobj, "idx", json_object_new_int(PortFwdIid.idx[0]));	//get idx for webgui
-			json_object_array_add(Jobj, JSON_OBJ_COPY(paramJobj));
-			zcfgFeJsonObjFree(paramJobj);
+			json_object_object_add(paramJobj, "Enable", JSON_OBJ_COPY(json_object_object_get(PortFwdJobj, "Enable")));
+			json_object_object_add(paramJobj, "Protocol", JSON_OBJ_COPY(json_object_object_get(PortFwdJobj, "Protocol")));
+			json_object_object_add(paramJobj, "Description", JSON_OBJ_COPY(json_object_object_get(PortFwdJobj, "Description")));
+			json_object_object_add(paramJobj, "Interface", JSON_OBJ_COPY(json_object_object_get(PortFwdJobj, "Interface")));
+			json_object_object_add(paramJobj, "ExternalPort", JSON_OBJ_COPY(json_object_object_get(PortFwdJobj, "ExternalPort")));
+			json_object_object_add(paramJobj, "ExternalPortEndRange", JSON_OBJ_COPY(json_object_object_get(PortFwdJobj, "ExternalPortEndRange")));
+			json_object_object_add(paramJobj, "InternalPort", JSON_OBJ_COPY(json_object_object_get(PortFwdJobj, "InternalPort")));
+			json_object_object_add(paramJobj, "InternalPortEndRange", JSON_OBJ_COPY(json_object_object_get(PortFwdJobj, "X_ZYXEL_InternalPortEndRange")));
+			json_object_object_add(paramJobj, "InternalClient", JSON_OBJ_COPY(json_object_object_get(PortFwdJobj, "InternalClient")));
+			json_object_object_add(paramJobj, "SetOriginatingIP", JSON_OBJ_COPY(json_object_object_get(PortFwdJobj, "X_ZYXEL_SetOriginatingIP")));
+			json_object_object_add(paramJobj, "OriginatingIpAddress", JSON_OBJ_COPY(json_object_object_get(PortFwdJobj, "OriginatingIpAddress")));
+			json_object_object_add(paramJobj, "Index", json_object_new_int(PortFwdIid.idx[0]));
+			json_object_array_add(Jarray, paramJobj);
 		}
+		zcfgFeJsonObjFree(PortFwdJobj);
 	}	
-	zcfgFeJsonObjFree(PortFwdJobj);
+	
 	return ret;
 }
 
@@ -263,16 +335,16 @@
 		return ZCFG_INTERNAL_ERROR;
 
 	if(!strcmp(method, "PUT")) {
-		ret = zcfgFeDalNatPortMappingEdit(Jobj, NULL);
+		ret = zcfgFeDalNatPortMappingEdit(Jobj, replyMsg);
 	}
 	else if(!strcmp(method, "POST")) {
 		ret = zcfgFeDalNatPortMappingAdd(Jobj, replyMsg);
 	}
 	else if(!strcmp(method, "DELETE")) {
-		ret = zcfgFeDalNatPortMappingDelete(Jobj, NULL);
+		ret = zcfgFeDalNatPortMappingDelete(Jobj, replyMsg);
 	}
 	else if(!strcmp(method, "GET")){
-		ret = zcfgFeDalNatPortMappingGet(Jobj, NULL);
+		ret = zcfgFeDalNatPortMappingGet(Jobj, replyMsg);
 	}
 
 	return ret;
Index: libzcfg_fe_dal-1.0/zcfg_fe_dal.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/zcfg_fe_dal.c	2017-02-10 13:22:57.880978064 +0800
+++ libzcfg_fe_dal-1.0/zcfg_fe_dal.c	2017-02-10 13:25:57.873887642 +0800
@@ -18,7 +18,7 @@
 extern dal_param_t DNSROUTE_param[];
 extern dal_param_t POLICYROUTE_param[];
 extern dal_param_t RIP_param[];
-extern dal_param_t NAT_PORT_MAPPING_param[];
+extern dal_param_t NatPortFwd_param[];
 extern dal_param_t NAT_PORT_TRIGGERING_param[];
 extern dal_param_t NAT_DMZ_ALG_param[];
 extern dal_param_t NAT_ADDR_MAPPING_param[];
@@ -173,7 +173,7 @@
 {"DNSROUTE", 		DNSROUTE_param,		zcfgFeDalDnsRoute,		NULL,						"add|edit|delete",	"Routing"},
 {"POLICYROUTE", 	POLICYROUTE_param,	zcfgFeDalPolicyRoute,	NULL,						"add|edit|delete",	"Routing"},
 {"RIP", 			RIP_param,			zcfgFeDalRip,			NULL,						"edit",				"Routing"},
-{"NAT_PORT_MAPPING",NAT_PORT_MAPPING_param,	zcfgFeDalNatPortMapping,zcfgFeDalShowPortFwd,	"get|add|edit|delete", "NAT"},
+{"NatPortFwd",		NatPortFwd_param,	zcfgFeDalNatPortMapping,zcfgFeDalShowPortFwd,		"get|add|edit|delete", "NAT"},
 {"NAT_PORT_TRIGGERING",NAT_PORT_TRIGGERING_param,zcfgFeDalNatPortTriggering,NULL,			"add|edit|delete", "NAT"},
 {"NAT_DMZ_ALG",		NAT_DMZ_ALG_param,	zcfgFeDalNatDMZALG, 	NULL,						"edit",				"NAT"},
 {"NAT_ADDR_MAPPING",NAT_ADDR_MAPPING_param,	zcfgFeDalNatAddrMapping,NULL,					"add|edit|delete", "NAT"},
