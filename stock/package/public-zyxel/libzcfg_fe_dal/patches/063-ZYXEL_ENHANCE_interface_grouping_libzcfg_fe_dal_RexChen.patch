Index: libzcfg_fe_dal-1.0/network/interfaceGrouping/zcfg_fe_dal_intfGrp.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/network/interfaceGrouping/zcfg_fe_dal_intfGrp.c	2016-11-15 00:10:06.726202487 +0800
+++ libzcfg_fe_dal-1.0/network/interfaceGrouping/zcfg_fe_dal_intfGrp.c	2016-11-15 00:12:44.619966500 +0800
@@ -437,7 +437,7 @@
 void MacAddrWithStarProc(char *star_str, char *single_mac, char *mac_translate) {
 	short k = 0;
 	char len = 0;
-	char key[] = "0123456789";
+	const char key[] = "0123456789";
 	char single_mac_cpy[30] = {0};
 	char *tmp_str = NULL;
 
@@ -690,14 +690,8 @@
 	zcfgFeObjJsonBlockedSet(RDM_OID_BRIDGING_BR_PORT, &newBrPortIid, newBrPortObj, NULL);
 	/*===============================================================================*/
 
-	//printf("5. PUT RDM_OID_ETH_LINK\n");
-	//PUT RDM_OID_ETH_LINK
-	char Br_str[] = "Bridging.Bridge.";
-	char Br_str2[] = ".Port.1";
-	memset(tmp, 0, sizeof(tmp));
-	sprintf(tmp, "%d", newBrIid.idx[0]);
-	strcat(Br_str, tmp);
-	strcat(Br_str, Br_str2);
+	char Br_str[64] = {0};
+	sprintf(Br_str,"Bridging.Bridge.%d.Port.1",newBrIid.idx[0]);
 
 	json_object_object_add(newEthLinkObj, "Enable", json_object_new_boolean(true));
 	json_object_object_add(newEthLinkObj, "LowerLayers", json_object_new_string(Br_str));
@@ -705,18 +699,12 @@
 	zcfgFeObjJsonBlockedSet(RDM_OID_ETH_LINK, &newEthLinkIid, newEthLinkObj, NULL);
 	/*==============================================================================*/
 
-	//printf("6. PUT RDM_OID_IP_IFACE\n");
-	//PUT RDM_OID_IP_IFACE
-	char Eth_str[] = "Ethernet.Link.";
-	char Eth_str2[60] = {0};
-	memset(tmp, 0, sizeof(tmp));
-	sprintf(tmp, "%d", newEthLinkIid.idx[0]);
-	strcat(Eth_str2, Eth_str);
-	strcat(Eth_str2, tmp);
+	char Eth_str[60] = {0};
+	sprintf(Eth_str,"Ethernet.Link.%d",newEthLinkIid.idx[0]);
 
 	json_object_object_add(newIpObj, "Enable", json_object_new_boolean(true));
 	json_object_object_add(newIpObj, "IPv4Enable", json_object_new_boolean(true));
-	json_object_object_add(newIpObj, "LowerLayers", json_object_new_string(Eth_str2));
+	json_object_object_add(newIpObj, "LowerLayers", json_object_new_string(Eth_str));
 	json_object_object_add(newIpObj, "X_ZYXEL_Group_WAN_IpIface", json_object_new_string(IntfGrp_info.wanIntf)); //binding wan interface
 	json_object_object_add(newIpObj, "X_ZYXEL_ConnectionType", json_object_new_string("IP_Routed"));  //inherit connection type of wan interface
 	json_object_object_add(newIpObj, "X_ZYXEL_SrvName", json_object_new_string(IntfGrp_info.X_ZYXEL_BridgeName));  //inherit connection type of wan interface
@@ -724,10 +712,6 @@
 	zcfgFeObjJsonBlockedSet(RDM_OID_IP_IFACE, &newIpIid, newIpObj, NULL);
     /*==============================================================================*/
 
-	//printf("7. POST RDM_OID_IP_IFACE_V4_ADDR\n");
-	/* POST RDM_OID_IP_IFACE_V4_ADDR */
-
-	//Find IP Index
 	if((ret = FindIPidx(&IP_idx, newBrIid)) != ZCFG_SUCCESS) {
 		return ret;
 	}
@@ -739,12 +723,8 @@
 	if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_IP_IFACE_V4_ADDR, &v4AddrIid, &v4AddrObj)) != ZCFG_SUCCESS) {
 		return ret;
 	}
-	strcat(IPAddress_str1, "192.168.");
-	strcat(IPAddress_str2, ".1");
-	memset(tmp,0, sizeof(tmp));
-	sprintf(tmp, "%d", IP_idx);
-	strcat(IPAddress_str1, tmp);
-	strcat(IPAddress_str1, IPAddress_str2);
+
+	sprintf(IPAddress_str1,"192.168.%d.1",IP_idx);
 	strcat(SubnetMask_str, "255.255.255.0");
 	json_object_object_add(v4AddrObj, "Enable", json_object_new_boolean(true));
 	json_object_object_add(v4AddrObj, "IPAddress", json_object_new_string(IPAddress_str1));
@@ -822,26 +802,13 @@
 	if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_DHCPV4_SRV_POOL, &dhcpV4SrvIid, &dhcpV4SrvObj)) != ZCFG_SUCCESS) {
 		return ret;
 	}
-	char DhcpAddrAlloc[] = "192.168.";
 	char DhcpAddrMin[30] = {0};
 	char DhcpAddrMax[30] = {0};
 	char IpIntf_str[30] = "IP.Interface.";
 
-	memset(tmp, 0, sizeof(tmp));
-	sprintf(tmp, "%d", IP_idx);
-	strcat(tmp, ".2");
-	memcpy(DhcpAddrMin, DhcpAddrAlloc, sizeof(DhcpAddrAlloc));
-	strcat(DhcpAddrMin, tmp);
-
-	memset(tmp, 0, sizeof(tmp));
-	sprintf(tmp, "%d", IP_idx);
-	strcat(tmp, ".254");
-	memcpy(DhcpAddrMax, DhcpAddrAlloc, sizeof(DhcpAddrAlloc));
-	strcat(DhcpAddrMax, tmp);
-
-	memset(tmp, 0, sizeof(tmp));
-	sprintf(tmp, "%d", newIpIid.idx[0]);
-	strcat(IpIntf_str, tmp);
+	sprintf(DhcpAddrMin,"192.168.%d.2",IP_idx);
+	sprintf(DhcpAddrMax,"192.168.%d.254",IP_idx);
+	sprintf(IpIntf_str,"IP.Interface.%d",newIpIid.idx[0]);
 
 	json_object_object_add(dhcpV4SrvObj, "Enable", json_object_new_boolean(true));
 	json_object_object_add(dhcpV4SrvObj, "MinAddress", json_object_new_string(DhcpAddrMin));
