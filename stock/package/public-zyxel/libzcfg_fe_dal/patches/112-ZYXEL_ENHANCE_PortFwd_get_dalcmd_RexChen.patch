Index: libzcfg_fe_dal-1.0/network/nat/zcfg_fe_dal_nat_port_mapping.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/network/nat/zcfg_fe_dal_nat_port_mapping.c	2017-02-03 09:22:00.473117637 +0800
+++ libzcfg_fe_dal-1.0/network/nat/zcfg_fe_dal_nat_port_mapping.c	2017-02-03 09:25:36.387300600 +0800
@@ -26,6 +26,40 @@
 	{"Index",		dalType_int,	0,	0,	NULL},
 	{NULL,		0,	0,	0,	NULL}
 };
+void zcfgFeDalShowPortFwd(struct json_object *Jarray){
+	int i, len = 0;
+	struct json_object *obj;
+	const char *origIP = NULL;
+	
+
+	if(json_object_get_type(Jarray) != json_type_array){
+		printf("wrong Jobj format!\n");
+		return;
+	}
+	printf("%-20s %-7s %-20s %-17s %-15s %-10s %-10s %-25s %-25s %-10s\n",
+		    "Service Name", "Enable", "Originating IP", "Server IP Address", "WAN Interface", "Start Port", "End Port", "Translation Start Port", "Translation End Port", "Protocol");
+	len = json_object_array_length(Jarray);
+	for(i=0;i<len;i++){
+		obj = json_object_array_get_idx(Jarray, i);
+		if(!strcmp(json_object_get_string(json_object_object_get(obj, "Orig_IP")),"")){
+			origIP = "N/A";
+		}
+		else
+			origIP = json_object_get_string(json_object_object_get(obj, "Orig_IP"));
+		printf("%-20s %-7d %-20s %-17s %-15s %-10s %-10s %-25s %-25s %-10s\n",
+			json_object_get_string(json_object_object_get(obj, "Service_Name")),
+			json_object_get_boolean(json_object_object_get(obj, "Active")),
+			origIP,
+			json_object_get_string(json_object_object_get(obj, "Server_IP_Addr")),
+			json_object_get_string(json_object_object_get(obj, "Wan_Interface")),
+			json_object_get_string(json_object_object_get(obj, "Start_Port")),
+			json_object_get_string(json_object_object_get(obj, "End_Port")),
+			json_object_get_string(json_object_object_get(obj, "Trans_Start_Port")),
+			json_object_get_string(json_object_object_get(obj, "Trans_End_Port")),
+			json_object_get_string(json_object_object_get(obj, "Protocol")));
+	}
+}
+
 
 zcfgRet_t zcfgFeDalNatPortMappingAdd(struct json_object *Jobj, char *replyMsg)
 {
@@ -170,6 +204,34 @@
 	return ret;
 	
 }
+zcfgRet_t zcfgFeDalNatPortMappingGet(struct json_object *Jobj, char *replyMsg){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	struct json_object *paramJobj = NULL;
+	struct json_object *PortFwdJobj = NULL;
+	objIndex_t PortFwdIid = {0};
+	while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_NAT_PORT_MAPPING, &PortFwdIid, &PortFwdJobj) == ZCFG_SUCCESS){
+		if(strncmp(json_object_get_string(json_object_object_get(PortFwdJobj, "Description")),"APP:",4)){
+			paramJobj = json_object_new_object();
+			json_object_object_add(paramJobj, "Active", json_object_object_get(PortFwdJobj, "Enable"));
+			json_object_object_add(paramJobj, "Protocol", json_object_object_get(PortFwdJobj, "Protocol"));
+			json_object_object_add(paramJobj, "Service_Name", json_object_object_get(PortFwdJobj, "Description"));
+			json_object_object_add(paramJobj, "Wan_Interface", json_object_object_get(PortFwdJobj, "Interface"));
+			json_object_object_add(paramJobj, "Start_Port", json_object_object_get(PortFwdJobj, "ExternalPort"));
+			json_object_object_add(paramJobj, "End_Port", json_object_object_get(PortFwdJobj, "ExternalPortEndRange"));
+			json_object_object_add(paramJobj, "Trans_Start_Port", json_object_object_get(PortFwdJobj, "InternalPort"));
+			json_object_object_add(paramJobj, "Trans_End_Port", json_object_object_get(PortFwdJobj, "X_ZYXEL_InternalPortEndRange"));
+			json_object_object_add(paramJobj, "Server_IP_Addr", json_object_object_get(PortFwdJobj, "InternalClient"));
+			json_object_object_add(paramJobj, "Config_Orig_IP", json_object_object_get(PortFwdJobj, "X_ZYXEL_SetOriginatingIP"));
+			json_object_object_add(paramJobj, "Orig_IP", json_object_object_get(PortFwdJobj, "OriginatingIpAddress"));
+			json_object_object_add(paramJobj, "idx", json_object_new_int(PortFwdIid.idx[0]));	//get idx for webgui
+			json_object_array_add(Jobj, JSON_OBJ_COPY(paramJobj));
+
+		}
+	}	
+	zcfgFeJsonObjFree(PortFwdJobj);
+	return ret;
+}
+
 zcfgRet_t zcfgFeDalNatPortMapping(const char *method, struct json_object *Jobj, char *replyMsg)
 {
 	zcfgRet_t ret = ZCFG_SUCCESS;
@@ -186,6 +248,9 @@
 	else if(!strcmp(method, "DELETE")) {
 		ret = zcfgFeDalNatPortMappingDelete(Jobj, NULL);
 	}
+	else if(!strcmp(method, "GET")){
+		ret = zcfgFeDalNatPortMappingGet(Jobj, NULL);
+	}
 
 	return ret;
 }
Index: libzcfg_fe_dal-1.0/zcfg_fe_dal.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/zcfg_fe_dal.c	2017-02-03 09:22:00.745117638 +0800
+++ libzcfg_fe_dal-1.0/zcfg_fe_dal.c	2017-02-03 09:25:03.962619200 +0800
@@ -148,6 +148,7 @@
 
 extern void zcfgFeDalShowStaticRoute(struct json_object *Jarray);
 extern void zcfgFeDalShowMgmtSrv(struct json_object *Jarray);
+extern void zcfgFeDalShowPortFwd(struct json_object *Jarray);
 
 
 dal_handler_t dalHandler[] = {
@@ -162,7 +163,7 @@
 {"DNSROUTE", 		DNSROUTE_param,		zcfgFeDalDnsRoute,		NULL,						"add|edit|delete",	"Routing"},
 {"POLICYROUTE", 	POLICYROUTE_param,	zcfgFeDalPolicyRoute,	NULL,						"add|edit|delete",	"Routing"},
 {"RIP", 			RIP_param,			zcfgFeDalRip,			NULL,						"edit",				"Routing"},
-{"NAT_PORT_MAPPING",NAT_PORT_MAPPING_param,	zcfgFeDalNatPortMapping,NULL,					"add|edit|delete", "NAT"},
+{"NAT_PORT_MAPPING",NAT_PORT_MAPPING_param,	zcfgFeDalNatPortMapping,zcfgFeDalShowPortFwd,					"add|edit|delete|get", "NAT"},
 {"NAT_PORT_TRIGGERING",NAT_PORT_TRIGGERING_param,zcfgFeDalNatPortTriggering,NULL,			"add|edit|delete", "NAT"},
 {"NAT_DMZ_ALG",		NAT_DMZ_ALG_param,	zcfgFeDalNatDMZALG, 	NULL,						"edit",				"NAT"},
 {"NAT_ADDR_MAPPING",NAT_ADDR_MAPPING_param,	zcfgFeDalNatAddrMapping,NULL,					"add|edit|delete", "NAT"},
