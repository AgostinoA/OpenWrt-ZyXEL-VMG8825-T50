Index: libzcfg_fe_dal-1.0/network/qos/zcfg_fe_QosClass.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/network/qos/zcfg_fe_QosClass.c	2017-09-08 19:16:20.496265019 +0800
+++ libzcfg_fe_dal-1.0/network/qos/zcfg_fe_QosClass.c	2017-09-08 19:40:42.486434700 +0800
@@ -18,7 +18,7 @@
 dal_param_t QosClass_param[] = {
 	{"idx",										dalType_int,				0, 0, 		NULL,NULL,													NULL},
 	{"Index",									dalType_int, 				0, 0, 		NULL,NULL,													dal_Add_ignore|dal_Edit|dal_Delete},
-	{"Queue",									dalType_QueueList,			0, 0, 		NULL,NULL,													dal_Add},
+	{"Queue",									dalType_QueueList,			0, 0, 		NULL,NULL,													NULL},
 	{"Enable",									dalType_boolean,			0, 0, 		NULL,NULL,													dal_Add},
 	{"Name",									dalType_string, 			0, 0,		NULL,NULL,													dal_Add},
 	{"Order",									dalType_int, 				0, 0, 		NULL,NULL,													dal_Add},
@@ -31,10 +31,11 @@
 	{"SourceIPPrefix",							dalType_v6AddrPrefix, 		0, 0, 		NULL,NULL,													NULL},
 	{"SourceIPExclude",							dalType_boolean, 			0, 0, 		NULL,NULL,													NULL},
 	{"SourcePortEnable",						dalType_boolean,			0, 0, 		NULL,NULL,													NULL},
-	{"SourcePort",								dalType_int, 				0, 65535, 	NULL,NULL,													NULL},
-	{"SourcePortRangeMax",						dalType_int, 				0, 65535, 	NULL,NULL,													NULL},
+	{"SourcePort",								dalType_int, 				-1,65535, 	NULL,NULL,													dalcmd_Forbid},
+	{"SourcePortRangeMax",						dalType_int, 				-1,65535, 	NULL,NULL,													dalcmd_Forbid},
+	{"SourcePortRange",							dalType_PortRange, 			0, 0, 	    NULL,NULL,													NULL},
 	{"SourcePortExclude",						dalType_boolean, 			0, 0, 		NULL,NULL,													NULL},
-	{"SourceMACEnable",							dalType_boolean,			0, 0, 		NULL,NULL,													dal_Add},
+	{"SourceMACEnable",							dalType_boolean,			0, 0, 		NULL,NULL,													NULL},
 	{"SourceMACAddress",						dalType_string, 			0, 0, 		NULL,NULL,													NULL},
 	{"SourceMACMask",							dalType_string, 			0, 0, 		NULL,NULL,													NULL},
 	{"SourceMACExclude",						dalType_boolean, 			0, 0, 		NULL,NULL,													NULL},
@@ -44,10 +45,11 @@
 	{"DestIPPrefix",							dalType_v6AddrPrefix, 		0, 0, 		NULL,NULL,													NULL},
 	{"DestIPExclude",							dalType_boolean, 			0, 0, 		NULL,NULL,													NULL},
 	{"DestPortEnable",							dalType_boolean, 			0, 0, 		NULL,NULL,													NULL},
-	{"DestPort",								dalType_int, 				0, 65535, 	NULL,NULL,													NULL},
-	{"DestPortRangeMax",						dalType_int, 				0, 65535, 	NULL,NULL,													NULL},
+	{"DestPort",								dalType_int, 				-1,65535, 	NULL,NULL,													dalcmd_Forbid},
+	{"DestPortRangeMax",						dalType_int, 				-1,65535, 	NULL,NULL,													dalcmd_Forbid},
+	{"DestPortRange",							dalType_PortRange, 			0, 0, 	    NULL,NULL,													NULL},
 	{"DestPortExclude",							dalType_boolean, 			0, 0, 		NULL,NULL,													NULL},
-	{"DestMACEnable",							dalType_boolean, 			0, 0, 		NULL,NULL,													dal_Add},
+	{"DestMACEnable",							dalType_boolean, 			0, 0, 		NULL,NULL,													NULL},
 	{"DestMACAddress",							dalType_string, 			0, 0, 		NULL,NULL,													NULL},
 	{"DestMACMask",								dalType_string,				0, 0, 		NULL,NULL,													NULL},
 	{"DestMACExclude",							dalType_boolean, 			0, 0, 		NULL,NULL,													NULL},
@@ -85,13 +87,13 @@
 	{"VLANIDExclude",							dalType_boolean,			0, 0, 		NULL,NULL,													NULL},
 	{"TCPACK",									dalType_int, 				0, 0, 		NULL,NULL,													NULL},
 	{"TCPACKExclude",							dalType_boolean, 			0, 0, 		NULL,NULL,													NULL},
-	{"DSCPMark",								dalType_int, 				-1,63,		NULL,NULL,													dal_Add},
+	{"DSCPMark",								dalType_int, 				-1,63,		NULL,NULL,													NULL},
 #ifndef ZYXEL_WEB_GUI_ECONET_QoS_STYLE
-	{"VLANIDAction",							dalType_int, 				0, 3, 		NULL,NULL,													dal_Add},
+	{"VLANIDAction",							dalType_int, 				0, 3, 		NULL,NULL,													NULL},
 	{"VLANIDMark",								dalType_int, 				1, 4094, 	NULL,NULL,													NULL},
 #endif
 	{"EthernetPriorityMark",					dalType_int, 				-1,7, 		NULL,NULL,													NULL},
-	{"ForwardingPolicy",						dalType_RouteIntf, 			0, 0, 		NULL,NULL,													dal_Add},
+	{"ForwardingPolicy",						dalType_RouteIntf, 			0, 0, 		NULL,NULL,													NULL},
 	{"defaultQ",								dalType_boolean, 			0, 0, 		NULL,NULL,													NULL},	
 	{NULL,										0,							0, 0,		NULL,NULL,													NULL}
 };
@@ -200,10 +202,10 @@
 
 extern uint32_t StrToIntConv(char *str);
 
-void getQosClassBasicInfo(struct json_object *Jobj, s_QosClass *ClassObj_Info) {
+void getQosClassBasicInfo(const char *method, struct json_object *Jobj, s_QosClass *ClassObj_Info) {
 	int tmp_idx = 0,Class_Order = 0;
 	char *sourcelen = NULL, *destlen = NULL, *tmp1 = NULL, *tmp2 = NULL, *op125 = NULL, *tmp3 = NULL;
-	char *sourceaddr = NULL, *destaddr = NULL, *protocol = NULL;
+	char *sourceaddr = NULL, *destaddr = NULL, *protocol = NULL, *srcport = NULL,*dstport = NULL;
 	char *routeintf = NULL, *queue = NULL;
 	char *clientIDtype = NULL, *clientID = NULL, *ethertype = NULL;
 	char *clear = "";
@@ -243,6 +245,17 @@
 				ClassObj_Info->defaultQ = false;
 			sscanf(queue, "%d", &(ClassObj_Info->Queue));
 		}
+		else{
+			if(!strcmp(method,"POST")){
+#ifdef ZYXEL_WEB_GUI_ECONET_QoS_STYLE
+				ClassObj_Info->defaultQ = false;
+				ClassObj_Info->Queue = 4;
+#else
+				ClassObj_Info->defaultQ = true;
+				ClassObj_Info->Queue = 0;
+#endif
+			}
+		}
 	}
 	if(json_object_object_get(Jobj, "Enable"))
 		ClassObj_Info->Enable = json_object_get_boolean(json_object_object_get(Jobj, "Enable"));
@@ -302,8 +315,26 @@
 	if(json_object_object_get(Jobj, "SourcePortEnable")){
 		ClassObj_Info->SourcePortEnable = json_object_get_boolean(json_object_object_get(Jobj, "SourcePortEnable"));
 		if(ClassObj_Info->SourcePortEnable == true){	
-			ClassObj_Info->SourcePort = json_object_get_int(json_object_object_get(Jobj, "SourcePort"));
-			ClassObj_Info->SourcePortRangeMax = json_object_get_int(json_object_object_get(Jobj, "SourcePortRangeMax"));
+			if(json_object_object_get(Jobj, "SourcePortRange")){
+				srcport = (char*)json_object_get_string(json_object_object_get(Jobj, "SourcePortRange"));
+				if(strchr(srcport, ':') != NULL){
+					sscanf(srcport, "%d:%d", &(ClassObj_Info->SourcePort), &(ClassObj_Info->SourcePortRangeMax));
+					if(ClassObj_Info->SourcePort == -1)
+						ClassObj_Info->SourcePortRangeMax = -1;
+				}
+				else{
+					ClassObj_Info->SourcePort = atoi(srcport);
+					ClassObj_Info->SourcePortRangeMax = -1;
+				}
+			}
+			else{
+				if(json_object_object_get(Jobj, "SourcePort"))
+					ClassObj_Info->SourcePort = json_object_get_int(json_object_object_get(Jobj, "SourcePort"));
+				if(json_object_object_get(Jobj, "SourcePortRangeMax"))
+					ClassObj_Info->SourcePortRangeMax = json_object_get_int(json_object_object_get(Jobj, "SourcePortRangeMax"));
+				else
+					ClassObj_Info->SourcePortRangeMax = -1;
+			}
 			ClassObj_Info->SourcePortExclude = json_object_get_boolean(json_object_object_get(Jobj, "SourcePortExclude"));
 		}
 		else{
@@ -348,8 +379,26 @@
 	if(json_object_object_get(Jobj, "DestPortEnable")){
 		ClassObj_Info->DestPortEnable = json_object_get_boolean(json_object_object_get(Jobj, "DestPortEnable"));
 		if(ClassObj_Info->DestPortEnable == true){	
-			ClassObj_Info->DestPort = json_object_get_int(json_object_object_get(Jobj, "DestPort"));
-			ClassObj_Info->DestPortRangeMax = json_object_get_int(json_object_object_get(Jobj, "DestPortRangeMax"));
+			if(json_object_object_get(Jobj, "DestPortRange")){
+				dstport = (char*)json_object_get_string(json_object_object_get(Jobj, "DestPortRange"));
+				if(strchr(dstport, ':') != NULL){
+					sscanf(dstport, "%d:%d", &(ClassObj_Info->DestPort), &(ClassObj_Info->DestPortRangeMax));
+					if(ClassObj_Info->DestPort == -1)
+						ClassObj_Info->DestPortRangeMax = -1;
+				}
+				else{
+					ClassObj_Info->DestPort = atoi(dstport);
+					ClassObj_Info->DestPortRangeMax = -1;
+				}
+			}
+			else{
+				if(json_object_object_get(Jobj, "DestPort"))
+					ClassObj_Info->DestPort = json_object_get_int(json_object_object_get(Jobj, "DestPort"));
+				if(json_object_object_get(Jobj, "DestPortRangeMax"))
+					ClassObj_Info->DestPortRangeMax = json_object_get_int(json_object_object_get(Jobj, "DestPortRangeMax"));
+				else
+					ClassObj_Info->DestPortRangeMax = -1;
+			}
 			ClassObj_Info->DestPortExclude = json_object_get_boolean(json_object_object_get(Jobj, "DestPortExclude"));
 		}
 		else{
@@ -523,10 +572,13 @@
 			ClassObj_Info->VLANIDExclude = false;
 		}
 	}
-	if(json_object_object_get(Jobj, "TCPACK"))
+
+	if(json_object_object_get(Jobj, "TCPACK")){
 		ClassObj_Info->TCPACK = json_object_get_boolean(json_object_object_get(Jobj, "TCPACK"));
-	if(json_object_object_get(Jobj, "TCPACKExclude"))
-		ClassObj_Info->TCPACKExclude = json_object_get_boolean(json_object_object_get(Jobj, "TCPACKExclude"));
+		if(json_object_object_get(Jobj, "TCPACKExclude"))
+			ClassObj_Info->TCPACKExclude = json_object_get_boolean(json_object_object_get(Jobj, "TCPACKExclude"));
+	}
+
 	if(json_object_object_get(Jobj, "DSCPMark"))
 		ClassObj_Info->DSCPMark = json_object_get_int(json_object_object_get(Jobj, "DSCPMark"));
 #ifdef ZYXEL_WEB_GUI_ECONET_QoS_STYLE
@@ -1163,7 +1215,7 @@
 	return true;
 }
 
-zcfgRet_t zcfgFeDalQosClassAdd(struct json_object *Jobj, char *replyMsg) {
+zcfgRet_t zcfgFeDalQosClassAdd(const char *method, struct json_object *Jobj, char *replyMsg) {
 	zcfgRet_t ret = ZCFG_SUCCESS;
 	e_ActionType action = e_ActionType_ADD; //ADD, EDIT, DELETE
 	s_QosClass ClassObj_Info;
@@ -1172,7 +1224,7 @@
 	IID_INIT(classIid);
 	memset(&ClassObj_Info,0,sizeof(ClassObj_Info));
 
-	getQosClassBasicInfo(Jobj, &ClassObj_Info);
+	getQosClassBasicInfo(method,Jobj, &ClassObj_Info);
 	zcfg_offset_t oid;		
 	oid = RDM_OID_QOS_CLS;		
 	if(ClassObj_Info.Name != NULL){	
@@ -1221,7 +1273,7 @@
 	}
 }
 
-zcfgRet_t zcfgFeDalQosClassEdit(struct json_object *Jobj, char *replyMsg) {
+zcfgRet_t zcfgFeDalQosClassEdit(const char *method, struct json_object *Jobj, char *replyMsg) {
 	zcfgRet_t ret = ZCFG_SUCCESS;
 	e_ActionType action = e_ActionType_EDIT; //ADD, EDIT, DELETE
 	int ethertype = 0;
@@ -1231,7 +1283,8 @@
 	IID_INIT(classIid);
 	memset(&ClassObj_Info,0,sizeof(ClassObj_Info));
 
-	getQosClassBasicInfo(Jobj, &ClassObj_Info);
+	getQosClassBasicInfo(method, Jobj, &ClassObj_Info);
+	
 	zcfg_offset_t oid;		
 	oid = RDM_OID_QOS_CLS;
 	if(json_object_object_get(Jobj, "idx") == NULL){
@@ -1262,8 +1315,9 @@
 	// PUT RDM_OID_QOS_CLS
 	if(zcfgFeObjJsonGetWithoutUpdate(RDM_OID_QOS_CLS, &classIid, &classObj) == ZCFG_SUCCESS) {
 		if(json_object_object_get(Jobj, "Ethertype")){	
-			//NA(-1),ARP(2054),PPPoE_DISC(34915),PPPoE_SES(34916), clear value for IP(2048),IPv6(34525) or 802.1Q(33024)
-			if( ClassObj_Info.Ethertype == -1 || ClassObj_Info.Ethertype == 2054 || ClassObj_Info.Ethertype == 34915 || ClassObj_Info.Ethertype == 34916){
+			ethertype = json_object_get_int(json_object_object_get(classObj, "Ethertype"));
+			//different ethertype, all related parameter need to be default
+			if(ClassObj_Info.Ethertype != ethertype){
 				json_object_object_add(classObj, "SourceIP", json_object_new_string(""));				
 				json_object_object_add(classObj, "SourceMask", json_object_new_string(""));				
 				json_object_object_add(classObj, "SourceIPExclude", json_object_new_boolean(false));				
@@ -1297,191 +1351,13 @@
 				json_object_object_add(classObj, "DSCPExclude", json_object_new_boolean(false));
 				json_object_object_add(classObj, "TCPACK", json_object_new_boolean(false));				
 				json_object_object_add(classObj, "TCPACKExclude", json_object_new_boolean(false));	
-			}
-			
-			//IP(2048)
-			if(ClassObj_Info.Ethertype == 2048){
-				ethertype = json_object_get_int(json_object_object_get(classObj, "Ethertype"));
-				if(ClassObj_Info.Ethertype != ethertype){
-					//original type is IPv6
-					if(ethertype == 34525){
-						json_object_object_add(classObj, "SourceIP", json_object_new_string(""));				
-						json_object_object_add(classObj, "SourceMask", json_object_new_string(""));	
-						json_object_object_add(classObj, "DestIP", json_object_new_string(""));
-						json_object_object_add(classObj, "DestMask", json_object_new_string(""));
-						//check the value is correct
-						if(json_object_object_get(Jobj, "SourceIPEnable") == NULL){
-							printf("Type is IP, need to enter SourceIPEnable.\n");					
-							zcfgFeJsonObjFree(classObj);
-							return ZCFG_INVALID_PARAM_VALUE;
-						}
-						if(json_object_object_get(Jobj, "DestIPEnable") == NULL){
-							printf("Type is IP, need to enter DestIPEnable.\n");					
-							zcfgFeJsonObjFree(classObj);
-							return ZCFG_INVALID_PARAM_VALUE;
-						}
-					}
-					else{
-						//original type is 802.1Q
-						if(ethertype == 33024){
-							json_object_object_add(classObj, "EthernetPriorityCheck", json_object_new_int(-1));				
-							json_object_object_add(classObj, "EthernetPriorityExclude", json_object_new_boolean(false));	
-							json_object_object_add(classObj, "VLANIDCheck", json_object_new_int(-1));
-							json_object_object_add(classObj, "VLANIDExclude", json_object_new_boolean(false));	
-						}
-						//check the value is correct
-						if(json_object_object_get(Jobj, "SourceIPEnable") == NULL){
-							printf("Type is IP, need to enter SourceIPEnable.\n");					
-							zcfgFeJsonObjFree(classObj);					
-							return ZCFG_INVALID_PARAM_VALUE;
-						}
-						if(json_object_object_get(Jobj, "DestIPEnable") == NULL){
-							printf("Type is IP, need to enter DestIPEnable.\n");					
-							zcfgFeJsonObjFree(classObj);					
-							return ZCFG_INVALID_PARAM_VALUE;
-						}
-
-						if(json_object_object_get(Jobj, "ProtocolEnable") == NULL){
-							printf("Type is IP, need to enter ProtocolEnable.\n");					
-							zcfgFeJsonObjFree(classObj);					
-							return ZCFG_INVALID_PARAM_VALUE;
-						}
-						if(json_object_object_get(Jobj, "DhcpEnable") == NULL){
-							printf("Type is IP, need to enter DhcpEnable.\n");					
-							zcfgFeJsonObjFree(classObj);					
-							return ZCFG_INVALID_PARAM_VALUE;
-						}
-						if(json_object_object_get(Jobj, "IPLengthEnable") == NULL){
-							printf("Type is IP, need to enter IPLengthEnable.\n");					
-							zcfgFeJsonObjFree(classObj);					
-							return ZCFG_INVALID_PARAM_VALUE;
-						}
-						if(json_object_object_get(Jobj, "DSCPCheckEnable") == NULL){
-							printf("Type is IP, need to enter DSCPCheckEnable.\n");					
-							zcfgFeJsonObjFree(classObj);					
-							return ZCFG_INVALID_PARAM_VALUE;
-						}
-					}
-				}
-			}
-	
-			//IPv6(34525)
-			if(ClassObj_Info.Ethertype == 34525){
-				ethertype = json_object_get_string(json_object_object_get(classObj, "Ethertype"));
-				if(ClassObj_Info.Ethertype != ethertype){
-					//original type is IP
-					if(ethertype == 2048){
-						json_object_object_add(classObj, "SourceIP", json_object_new_string(""));				
-						json_object_object_add(classObj, "SourceMask", json_object_new_string(""));	
-						json_object_object_add(classObj, "DestIP", json_object_new_string(""));
-						json_object_object_add(classObj, "DestMask", json_object_new_string(""));
-						//check the value is correct
-						if(json_object_object_get(Jobj, "SourceIPEnable") == NULL){
-							printf("Type is IP, need to enter SourceIPEnable.\n");					
-							zcfgFeJsonObjFree(classObj);					
-							return ZCFG_INVALID_PARAM_VALUE;
-						}
-						if(json_object_object_get(Jobj, "DestIPEnable") == NULL){
-							printf("Type is IP, need to enter DestIPEnable.\n");					
-							zcfgFeJsonObjFree(classObj);					
-							return ZCFG_INVALID_PARAM_VALUE;
-						}
-					}
-					else{
-						//original type is 802.1Q
-						if(ethertype == 33024){
-							json_object_object_add(classObj, "EthernetPriorityCheck", json_object_new_int(-1));				
-							json_object_object_add(classObj, "EthernetPriorityExclude", json_object_new_boolean(false));	
-							json_object_object_add(classObj, "VLANIDCheck", json_object_new_int(-1));
-							json_object_object_add(classObj, "VLANIDExclude", json_object_new_boolean(false));	
-						}
-						//check the value is correct
-						if(json_object_object_get(Jobj, "SourceIPEnable") == NULL){
-							printf("Type is IPv6, need to enter SourceIPEnable.\n");					
-							zcfgFeJsonObjFree(classObj);					
-							return ZCFG_INVALID_PARAM_VALUE;
-						}
-						if(json_object_object_get(Jobj, "DestIPEnable") == NULL){
-							printf("Type is IPv6, need to enter DestIPEnable.\n");					
-							zcfgFeJsonObjFree(classObj);					
-							return ZCFG_INVALID_PARAM_VALUE;
-						}
-
-						if(json_object_object_get(Jobj, "ProtocolEnable") == NULL){
-							printf("Type is IPv6, need to enter ProtocolEnable.\n");					
-							zcfgFeJsonObjFree(classObj);					
-							return ZCFG_INVALID_PARAM_VALUE;
-						}
-						if(json_object_object_get(Jobj, "IPLengthEnable") == NULL){
-							printf("Type is IPv6, need to enter IPLengthEnable.\n");					
-							zcfgFeJsonObjFree(classObj);					
-							return ZCFG_INVALID_PARAM_VALUE;
-						}
-						if(json_object_object_get(Jobj, "DSCPCheckEnable") == NULL){
-							printf("Type is IPv6, need to enter DSCPCheckEnable.\n");					
-							zcfgFeJsonObjFree(classObj);					
-							return ZCFG_INVALID_PARAM_VALUE;
-						}
-					}
-				}
-			}
-
-			//802.1Q(33024)
-			if(ClassObj_Info.Ethertype == 33024){
-				ethertype = json_object_get_string(json_object_object_get(classObj, "Ethertype"));
-				if(ClassObj_Info.Ethertype != ethertype){
-					//original type is IP or IPv6
-					if(ethertype == 2048 || ethertype == 34525){
-						json_object_object_add(classObj, "SourceIP", json_object_new_string(""));				
-						json_object_object_add(classObj, "SourceMask", json_object_new_string(""));				
-						json_object_object_add(classObj, "SourceIPExclude", json_object_new_boolean(false));				
-						json_object_object_add(classObj, "SourcePort", json_object_new_int(-1));
-						json_object_object_add(classObj, "SourcePortRangeMax", json_object_new_int(-1));				
-						json_object_object_add(classObj, "SourcePortExclude", json_object_new_boolean(false));							
-						json_object_object_add(classObj, "DestIP", json_object_new_string(""));
-						json_object_object_add(classObj, "DestMask", json_object_new_string(""));				
-						json_object_object_add(classObj, "DestIPExclude", json_object_new_boolean(false));				
-						json_object_object_add(classObj, "DestPort", json_object_new_int(-1));
-						json_object_object_add(classObj, "DestPortRangeMax", json_object_new_int(-1));				
-						json_object_object_add(classObj, "DestPortExclude", json_object_new_boolean(false));	
-						json_object_object_add(classObj, "X_ZYXEL_Service", json_object_new_string(""));
-						json_object_object_add(classObj, "X_ZYXEL_ServiceExclude", json_object_new_boolean(false));
-						json_object_object_add(classObj, "Protocol", json_object_new_int(-1));				
-						json_object_object_add(classObj, "ProtocolExclude", json_object_new_boolean(false));
-						json_object_object_add(classObj, "IPLengthMin", json_object_new_int(0));
-						json_object_object_add(classObj, "IPLengthMax", json_object_new_int(0));
-						json_object_object_add(classObj, "IPLengthExclude", json_object_new_boolean(false));
-						json_object_object_add(classObj, "DSCPCheck", json_object_new_int(-1));				
-						json_object_object_add(classObj, "DSCPExclude", json_object_new_boolean(false));
-						json_object_object_add(classObj, "TCPACK", json_object_new_boolean(false));				
-						json_object_object_add(classObj, "TCPACKExclude", json_object_new_boolean(false));
-						if(ethertype == 2048){
-							json_object_object_add(classObj, "SourceVendorClassID", json_object_new_string(""));
-							json_object_object_add(classObj, "SourceVendorClassIDExclude", json_object_new_boolean(false));				
-							json_object_object_add(classObj, "SourceClientID", json_object_new_string(""));	
-							json_object_object_add(classObj, "SourceClientIDType", json_object_new_string(""));
-							json_object_object_add(classObj, "SourceClientIDExclude", json_object_new_boolean(false));
-							json_object_object_add(classObj, "SourceUserClassID", json_object_new_string(""));				
-							json_object_object_add(classObj, "SourceUserClassIDExclude", json_object_new_boolean(false));				
-							json_object_object_add(classObj, "SourceVendorSpecificInfoEnterprise", json_object_new_int(0));
-							json_object_object_add(classObj, "SourceVendorSpecificInfo", json_object_new_string(""));				
-							json_object_object_add(classObj, "SourceVendorSpecificInfoExclude", json_object_new_boolean(false));
-						}
-					}
-					//check the value is correct
-					if(json_object_object_get(Jobj, "EthernetPriorityEnable") == NULL){
-						printf("Type is 802.1Q, need to enter EthernetPriorityEnable.\n");					
-						zcfgFeJsonObjFree(classObj);					
-						return ZCFG_INVALID_PARAM_VALUE;
-					}
-					if(json_object_object_get(Jobj, "VLANIDCheckEnable") == NULL){
-						printf("Type is 802.1Q, need to enter VLANIDCheckEnable.\n");					
-						zcfgFeJsonObjFree(classObj);					
-						return ZCFG_INVALID_PARAM_VALUE;
-					}
-				}
+				json_object_object_add(classObj, "EthernetPriorityCheck", json_object_new_int(-1));				
+				json_object_object_add(classObj, "EthernetPriorityExclude", json_object_new_boolean(false));	
+				json_object_object_add(classObj, "VLANIDCheck", json_object_new_int(-1));
+				json_object_object_add(classObj, "VLANIDExclude", json_object_new_boolean(false));	
 			}
 		}
+
 		// update RDM_OID_QOS_QUE - TrafficClasses
 		if(json_object_object_get(Jobj, "idx") == NULL){
 			update_traffic_class_in_qos_queue(classIid.idx[0], ClassObj_Info.Queue, ClassObj_Info.defaultQ, classIid, action);
@@ -1537,10 +1413,10 @@
 	zcfgRet_t ret = ZCFG_SUCCESS;
 
 	if(!strcmp(method, "POST")) {
-		ret = zcfgFeDalQosClassAdd(Jobj, replyMsg);
+		ret = zcfgFeDalQosClassAdd(method,Jobj, replyMsg);
 	}
 	else if(!strcmp(method, "PUT")) {
-		ret = zcfgFeDalQosClassEdit(Jobj, replyMsg);
+		ret = zcfgFeDalQosClassEdit(method,Jobj, replyMsg);
 	}
 	else if(!strcmp(method, "DELETE")) {
 		ret = zcfgFeDalQosClassDelete(Jobj, replyMsg);
