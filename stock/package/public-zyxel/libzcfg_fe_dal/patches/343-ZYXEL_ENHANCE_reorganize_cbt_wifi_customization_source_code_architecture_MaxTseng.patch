Index: libzcfg_fe_dal-1.0/network/wireless/zcfg_fe_dal_wifi_adv_cbt.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ libzcfg_fe_dal-1.0/network/wireless/zcfg_fe_dal_wifi_adv_cbt.c	2017-09-21 14:41:47.412017023 +0800
@@ -0,0 +1,423 @@
+#include <ctype.h>
+#include <json/json.h>
+#include <time.h>
+
+#include "zcfg_common.h"
+#include "zcfg_fe_rdm_string.h"
+#include "zcfg_fe_rdm_struct.h"
+#include "zcfg_rdm_oid.h"
+#include "zcfg_rdm_obj.h"
+#include "zcfg_debug.h"
+#include "zcfg_msg.h"
+#include "zcfg_fe_dal_common.h"
+
+#ifdef CBT_CUSTOMIZATION
+
+struct json_object *cbtWifiRadioAdvObj = NULL;
+struct json_object *cbt5GWifiRadioAdvObj = NULL;
+struct json_object *cbtWifiApWpsAdvObj = NULL;
+struct json_object *cbt5GWifiApWpsAdvObj = NULL;
+struct json_object *cbtWifiApAdvObj = NULL;
+struct json_object *cbt5GWifiApAdvObj = NULL;
+
+objIndex_t cbtWifiRadioAdvIid = {0};
+objIndex_t cbt5GWifiRadioAdvIid = {0};
+objIndex_t cbtWifiApWpsAdvIid = {0};
+objIndex_t cbt5GWifiApWpsAdvIid = {0};
+objIndex_t cbtWifiApAdvIid = {0};
+objIndex_t cbt5GWifiApAdvIid = {0};
+
+// RDM_OID_WIFI_RADIO
+int cbtWifiChannel;
+int cbt5GWifiChannel;
+const char* cbtWifiMode;
+const char* cbt5GWifiMode;
+unsigned int cbtWifiRtsThrshld;
+unsigned int cbt5GWifiRtsThrshld;
+unsigned int cbtWifiFrgThrshld;
+unsigned int cbt5GWifiFrgThrshld;
+unsigned int cbtWifiTxPwrPcnt;
+unsigned int cbt5GWifiTxPwrPcnt;
+unsigned int cbtWifiBcnIntvl;
+unsigned int cbt5GWifiBcnIntvl;
+unsigned int cbtWifiDtmIntvl;
+unsigned int cbt5GWifiDtmIntvl;
+const char* cbtWifiProtect;
+const char* cbt5GWifiProtect;
+const char* cbtWifiPreamble;
+const char* cbt5GWifiPreamble;
+bool cbtWifiObssCox;
+bool cbt5GWifiObssCox;
+
+// RDM_OID_WIFI_ACCESS_POINT
+bool cbtWifiHideSsid;
+bool cbt5GWifiHideSsid;
+bool cbtWifiWmm;
+bool cbt5GWifiWmm;
+bool cbtWifiWmmApsd;
+bool cbt5GWifiWmmApsd;
+
+// RDM_OID_WIFI_ACCESS_POINT_WPS
+bool cbtWifiWps;
+bool cbt5GWifiWps;
+
+time_t t1, t2;
+
+dal_param_t WIFI_ADV_CBT_param[]={
+	//WiFi Radio
+	{"cbtWifiChannel",			dalType_int,	0,	0,	NULL},
+	{"cbt5GWifiChannel",		dalType_int,	0,	0,	NULL},
+	{"cbtWifiMode",				dalType_string, 0,	0,	NULL},
+	{"cbt5GWifiMode",			dalType_string, 0,	0,	NULL},
+	{"cbtWifiRtsThrshld",		dalType_int,	0,	0,	NULL},
+	{"cbt5GWifiRtsThrshld",		dalType_int,	0,	0,	NULL},
+	{"cbtWifiFrgThrshld",		dalType_int,	0,	0,	NULL},
+	{"cbt5GWifiFrgThrshld",		dalType_int,	0,	0,	NULL},
+	{"cbtWifiTxPwrPcnt",		dalType_int,	0,	0,	NULL},
+	{"cbt5GWifiTxPwrPcnt",		dalType_int,	0,	0,	NULL},
+	{"cbtWifiBcnIntvl",			dalType_int,	0,	0,	NULL},
+	{"cbt5GWifiBcnIntvl",		dalType_int,	0,	0,	NULL},
+	{"cbtWifiDtmIntvl",			dalType_int,	0,	0,	NULL},
+	{"cbt5GWifiDtmIntvl",		dalType_int,	0,	0,	NULL},
+	{"cbtWifiProtect",			dalType_string, 0,	0,	NULL},
+	{"cbt5GWifiProtect",		dalType_string, 0,	0,	NULL},
+	{"cbtWifiPreamble",			dalType_string, 0,	0,	NULL},
+	{"cbt5GWifiPreamble",		dalType_string, 0,	0,	NULL},
+	{"cbtWifiObssCox",			dalType_boolean,0,	0,	NULL},
+	{"cbt5GWifiObssCox",		dalType_boolean,0,	0,	NULL},
+	// WiFi Access Point
+	{"cbtWifiHideSsid",			dalType_boolean,0,	0,	NULL},
+	{"cbt5GWifiHideSsid",		dalType_boolean,0,	0,	NULL},
+	{"cbtWifiWmm",				dalType_boolean,0,	0,	NULL},
+	{"cbt5GWifiWmm",			dalType_boolean,0,	0,	NULL},
+	{"cbtWifiWmmApsd",			dalType_boolean,0,	0,	NULL},
+	{"cbt5GWifiWmmApsd",		dalType_boolean,0,	0,	NULL},
+	// WiFi Access Point WPS
+	{"cbtWifiWps",				dalType_boolean,0,	0,	NULL},
+	{"cbt5GWifiWps",			dalType_boolean,0,	0,	NULL},
+	{NULL,		0,	0,	0,	NULL},
+};
+
+void initCbtWifiAdvObjects(){
+	
+	cbtWifiRadioAdvObj = NULL;
+	cbt5GWifiRadioAdvObj = NULL;
+	cbtWifiApWpsAdvObj = NULL;
+	cbt5GWifiApWpsAdvObj = NULL;
+	cbtWifiApAdvObj = NULL;
+	cbt5GWifiApAdvObj = NULL;
+	
+	IID_INIT(cbtWifiRadioAdvIid);
+	IID_INIT(cbt5GWifiRadioAdvIid);
+	IID_INIT(cbtWifiApWpsAdvIid);
+	IID_INIT(cbt5GWifiApWpsAdvIid);
+	IID_INIT(cbtWifiApAdvIid);
+	IID_INIT(cbt5GWifiApAdvIid);
+}
+
+zcfgRet_t freeAllCbtWifiAdvObjects(){
+	
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	
+	if(cbtWifiRadioAdvObj) json_object_put(cbtWifiRadioAdvObj);
+	if(cbt5GWifiRadioAdvObj) json_object_put(cbt5GWifiRadioAdvObj);
+	if(cbtWifiApWpsAdvObj) json_object_put(cbtWifiApWpsAdvObj);
+	if(cbt5GWifiApWpsAdvObj) json_object_put(cbt5GWifiApWpsAdvObj);
+	if(cbtWifiApAdvObj) json_object_put(cbtWifiApAdvObj);
+	if(cbt5GWifiApAdvObj) json_object_put(cbt5GWifiApAdvObj);
+	
+	return ret;
+}
+
+void getCbtWifiAdvInfo(struct json_object *Jobj){
+	// Hide SSID
+	cbtWifiHideSsid = json_object_get_boolean(json_object_object_get(Jobj, "cbtWifiHideSsid"));
+	cbt5GWifiHideSsid = json_object_get_boolean(json_object_object_get(Jobj, "cbt5GWifiHideSsid"));
+	// Channel
+	cbtWifiChannel = json_object_get_int(json_object_object_get(Jobj, "cbtWifiChannel"));
+	cbt5GWifiChannel = json_object_get_int(json_object_object_get(Jobj, "cbt5GWifiChannel"));
+	// 802.11 Mode
+	cbtWifiMode = json_object_get_string(json_object_object_get(Jobj, "cbtWifiMode"));
+	cbt5GWifiMode = json_object_get_string(json_object_object_get(Jobj, "cbt5GWifiMode"));
+	// RTS/CTS Threshold
+	cbtWifiRtsThrshld = json_object_get_int(json_object_object_get(Jobj, "cbtWifiRtsThreshold"));
+	cbt5GWifiRtsThrshld = json_object_get_int(json_object_object_get(Jobj, "cbt5GWifiRtsThreshold"));
+	// Fragmentation Threshold
+	cbtWifiFrgThrshld = json_object_get_int(json_object_object_get(Jobj, "cbtWifiFrgThreshold"));
+	cbt5GWifiFrgThrshld = json_object_get_int(json_object_object_get(Jobj, "cbt5GWifiFrgThreshold"));
+	// Output Power
+	cbtWifiTxPwrPcnt = json_object_get_int(json_object_object_get(Jobj, "cbtWifiTxPwrPcnt"));
+	cbt5GWifiTxPwrPcnt = json_object_get_int(json_object_object_get(Jobj, "cbt5GWifiTxPwrPcnt"));
+	// Beacon Interval
+	cbtWifiBcnIntvl = json_object_get_int(json_object_object_get(Jobj, "cbtWifiBcnIntvl"));
+	cbt5GWifiBcnIntvl = json_object_get_int(json_object_object_get(Jobj, "cbt5GWifiBcnIntvl"));
+	// DTIM Interval
+	cbtWifiDtmIntvl = json_object_get_int(json_object_object_get(Jobj, "cbtWifiDtmIntvl"));
+	cbt5GWifiDtmIntvl = json_object_get_int(json_object_object_get(Jobj, "cbt5GWifiDtmIntvl"));
+	// 802.11 Protection
+	cbtWifiProtect = json_object_get_string(json_object_object_get(Jobj, "cbtWifiProtect"));
+	cbt5GWifiProtect = json_object_get_string(json_object_object_get(Jobj, "cbt5GWifiProtect"));
+	// Preamble
+	cbtWifiPreamble = json_object_get_string(json_object_object_get(Jobj, "cbtWifiPreamble"));
+	cbt5GWifiPreamble = json_object_get_string(json_object_object_get(Jobj, "cbt5GWifiPreamble"));
+	// WPS
+	cbtWifiWps = json_object_get_boolean(json_object_object_get(Jobj, "cbtWifiWps"));
+	cbt5GWifiWps = json_object_get_boolean(json_object_object_get(Jobj, "cbt5GWifiWps"));
+	// OBSS Coexistence
+	cbtWifiObssCox = json_object_get_boolean(json_object_object_get(Jobj, "cbtWifiObssCox"));
+	cbt5GWifiObssCox = json_object_get_boolean(json_object_object_get(Jobj, "cbt5GWifiObssCox"));
+	// WMM
+	cbtWifiWmm = json_object_get_boolean(json_object_object_get(Jobj, "cbtWifiWmm"));
+	cbt5GWifiWmm = json_object_get_boolean(json_object_object_get(Jobj, "cbt5GWifiWmm"));
+	// WMM Automatic Power Save Delivery
+	cbtWifiWmmApsd = json_object_get_boolean(json_object_object_get(Jobj, "cbtWifiWmmApsd"));
+	cbt5GWifiWmmApsd = json_object_get_boolean(json_object_object_get(Jobj, "cbt5GWifiWmmApsd"));
+
+	return;
+}
+
+zcfgRet_t setAllCbtWifiAdvObjects(struct json_object *Jobj){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	
+	// 2.4G set data model
+	if(cbtWifiApWpsAdvObj)
+		zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_ACCESS_POINT_WPS, &cbtWifiApWpsAdvIid, cbtWifiApWpsAdvObj, NULL);
+
+	if(cbtWifiApAdvObj)
+		zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_ACCESS_POINT, &cbtWifiApAdvIid, cbtWifiApAdvObj, NULL);
+
+	if(cbtWifiRadioAdvObj)
+		zcfgFeObjJsonSet(RDM_OID_WIFI_RADIO, &cbtWifiRadioAdvIid, cbtWifiRadioAdvObj, NULL);
+
+	// 5G set data model
+	if(cbt5GWifiApWpsAdvObj)
+		zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_ACCESS_POINT_WPS, &cbt5GWifiApWpsAdvIid, cbt5GWifiApWpsAdvObj, NULL);
+
+	if(cbt5GWifiApAdvObj)
+		zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_ACCESS_POINT, &cbt5GWifiApAdvIid, cbt5GWifiApAdvObj, NULL);
+
+	if(cbt5GWifiRadioAdvObj)
+		zcfgFeObjJsonSet(RDM_OID_WIFI_RADIO, &cbt5GWifiRadioAdvIid, cbt5GWifiRadioAdvObj, NULL);
+	
+	return ret;
+}
+
+zcfgRet_t editCbtWifiRadioObject(struct json_object *Jobj){
+
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	struct json_object *iidArray = NULL;
+	uint8_t iidIdx = 0;
+
+	// 2.4G Iid
+	iidArray = json_object_object_get(Jobj, "cbtWifiAdvRadIid");
+	for(iidIdx = 0; iidIdx < 6; iidIdx++){
+		cbtWifiRadioAdvIid.idx[iidIdx] = json_object_get_int(json_object_array_get_idx(iidArray, iidIdx));
+		if(cbtWifiRadioAdvIid.idx[iidIdx] != 0)
+			cbtWifiRadioAdvIid.level = iidIdx + 1;
+	}
+	// 5G Iid
+	iidArray = json_object_object_get(Jobj, "cbt5GWifiAdvRadIid");
+	for(iidIdx = 0; iidIdx < 6; iidIdx++){
+		cbt5GWifiRadioAdvIid.idx[iidIdx] = json_object_get_int(json_object_array_get_idx(iidArray, iidIdx));
+		if(cbt5GWifiRadioAdvIid.idx[iidIdx] != 0)
+			cbt5GWifiRadioAdvIid.level = iidIdx + 1;
+	}
+
+	// 2.4G data
+	if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_RADIO, &cbtWifiRadioAdvIid, &cbtWifiRadioAdvObj)) != ZCFG_SUCCESS) {
+		return ret;
+	}
+
+	if(cbtWifiChannel == 0){
+		json_object_object_add(cbtWifiRadioAdvObj, "AutoChannelEnable", json_object_new_boolean(true));
+	}else{
+		json_object_object_add(cbtWifiRadioAdvObj, "AutoChannelEnable", json_object_new_boolean(false));
+		json_object_object_add(cbtWifiRadioAdvObj, "Channel", json_object_new_int(cbtWifiChannel));
+	}
+
+	json_object_object_add(cbtWifiRadioAdvObj, "X_ZYXEL_RTS_CTS_Threshold", json_object_new_int(cbtWifiRtsThrshld));
+	json_object_object_add(cbtWifiRadioAdvObj, "X_ZYXEL_Fragment_Threshold", json_object_new_int(cbtWifiFrgThrshld));
+	json_object_object_add(cbtWifiRadioAdvObj, "X_ZYXEL_Beacon_Interval", json_object_new_int(cbtWifiBcnIntvl));
+	json_object_object_add(cbtWifiRadioAdvObj, "X_ZYXEL_DTIM_Interval", json_object_new_int(cbtWifiDtmIntvl));
+	json_object_object_add(cbtWifiRadioAdvObj, "X_ZYXEL_Wireless_Mode", json_object_new_string(cbtWifiMode));
+	json_object_object_add(cbtWifiRadioAdvObj, "TransmitPower", json_object_new_int(cbtWifiTxPwrPcnt));
+
+	if(!strcmp(cbtWifiProtect, "off"))
+		json_object_object_add(cbtWifiRadioAdvObj, "X_ZYXEL_Protection", json_object_new_boolean(false));
+	else
+		json_object_object_add(cbtWifiRadioAdvObj, "X_ZYXEL_Protection", json_object_new_boolean(true));
+	
+	json_object_object_add(cbtWifiRadioAdvObj, "X_ZYXEL_Preamble", json_object_new_string(cbtWifiPreamble));
+	json_object_object_add(cbtWifiRadioAdvObj, "X_ZYXEL_OBSS_coex", json_object_new_boolean(cbtWifiObssCox));
+
+	// 5G data
+	if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_RADIO, &cbt5GWifiRadioAdvIid, &cbt5GWifiRadioAdvObj)) != ZCFG_SUCCESS) {
+		return ret;
+	}
+
+	if(cbt5GWifiChannel == 0){
+		json_object_object_add(cbt5GWifiRadioAdvObj, "AutoChannelEnable", json_object_new_boolean(true));
+	}else{
+		json_object_object_add(cbt5GWifiRadioAdvObj, "AutoChannelEnable", json_object_new_boolean(false));
+		json_object_object_add(cbt5GWifiRadioAdvObj, "Channel", json_object_new_int(cbt5GWifiChannel));
+	}
+
+	json_object_object_add(cbt5GWifiRadioAdvObj, "X_ZYXEL_RTS_CTS_Threshold", json_object_new_int(cbt5GWifiRtsThrshld));
+	json_object_object_add(cbt5GWifiRadioAdvObj, "X_ZYXEL_Fragment_Threshold", json_object_new_int(cbt5GWifiFrgThrshld));
+	json_object_object_add(cbt5GWifiRadioAdvObj, "X_ZYXEL_Beacon_Interval", json_object_new_int(cbt5GWifiBcnIntvl));
+	json_object_object_add(cbt5GWifiRadioAdvObj, "X_ZYXEL_DTIM_Interval", json_object_new_int(cbt5GWifiDtmIntvl));
+	json_object_object_add(cbt5GWifiRadioAdvObj, "X_ZYXEL_Wireless_Mode", json_object_new_string(cbt5GWifiMode));
+	json_object_object_add(cbt5GWifiRadioAdvObj, "TransmitPower", json_object_new_int(cbt5GWifiTxPwrPcnt));
+
+	if(!strcmp(cbt5GWifiProtect, "off"))
+		json_object_object_add(cbt5GWifiRadioAdvObj, "X_ZYXEL_Protection", json_object_new_boolean(false));
+	else
+		json_object_object_add(cbt5GWifiRadioAdvObj, "X_ZYXEL_Protection", json_object_new_boolean(true));
+
+	json_object_object_add(cbt5GWifiRadioAdvObj, "X_ZYXEL_Preamble", json_object_new_string(cbt5GWifiPreamble));
+	json_object_object_add(cbt5GWifiRadioAdvObj, "X_ZYXEL_OBSS_coex", json_object_new_boolean(cbt5GWifiObssCox));
+
+	return ret;
+}
+
+zcfgRet_t editCbtWifiApWpsObject(struct json_object *Jobj){
+
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	struct json_object *iidArray = NULL;
+	uint8_t iidIdx = 0;
+
+	// 2.4G Iid
+	iidArray = json_object_object_get(Jobj, "cbtWifiAdvApIid");
+	for(iidIdx = 0; iidIdx < 6; iidIdx++){
+		cbtWifiApWpsAdvIid.idx[iidIdx] = json_object_get_int(json_object_array_get_idx(iidArray, iidIdx));
+		if(cbtWifiApWpsAdvIid.idx[iidIdx] != 0)
+			cbtWifiApWpsAdvIid.level = iidIdx + 1;
+	}
+	// 5G Iid
+	iidArray = json_object_object_get(Jobj, "cbt5GWifiAdvApIid");
+	for(iidIdx = 0; iidIdx < 6; iidIdx++){
+		cbt5GWifiApWpsAdvIid.idx[iidIdx] = json_object_get_int(json_object_array_get_idx(iidArray, iidIdx));
+		if(cbt5GWifiApWpsAdvIid.idx[iidIdx] != 0)
+			cbt5GWifiApWpsAdvIid.level = iidIdx + 1;
+	}
+
+	// 2.4G data
+	if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_ACCESS_POINT_WPS, &cbtWifiApWpsAdvIid, &cbtWifiApWpsAdvObj)) != ZCFG_SUCCESS) {
+		return ret;
+	}
+
+	json_object_object_add(cbtWifiApWpsAdvObj, "Enable", json_object_new_boolean(cbtWifiWps));
+
+	// 5G data
+	if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_ACCESS_POINT_WPS, &cbt5GWifiApWpsAdvIid, &cbt5GWifiApWpsAdvObj)) != ZCFG_SUCCESS) {
+		return ret;
+	}
+
+	json_object_object_add(cbt5GWifiApWpsAdvObj, "Enable", json_object_new_boolean(cbt5GWifiWps));
+
+	return ret;
+}
+
+zcfgRet_t editCbtWifiApObject(struct json_object *Jobj){
+
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	struct json_object *iidArray = NULL;
+	uint8_t iidIdx = 0;
+
+	// 2.4G Iid
+	iidArray = json_object_object_get(Jobj, "cbtWifiAdvApIid");
+	for(iidIdx = 0; iidIdx < 6; iidIdx++){
+		cbtWifiApAdvIid.idx[iidIdx] = json_object_get_int(json_object_array_get_idx(iidArray, iidIdx));
+		if(cbtWifiApAdvIid.idx[iidIdx] != 0)
+			cbtWifiApAdvIid.level = iidIdx + 1;
+	}
+	// 5G Iid
+	iidArray = json_object_object_get(Jobj, "cbt5GWifiAdvApIid");
+	for(iidIdx = 0; iidIdx < 6; iidIdx++){
+		cbt5GWifiApAdvIid.idx[iidIdx] = json_object_get_int(json_object_array_get_idx(iidArray, iidIdx));
+		if(cbt5GWifiApAdvIid.idx[iidIdx] != 0)
+			cbt5GWifiApAdvIid.level = iidIdx + 1;
+	}
+
+	// 2.4G data
+	if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_ACCESS_POINT, &cbtWifiApAdvIid, &cbtWifiApAdvObj)) != ZCFG_SUCCESS) {
+		return ret;
+	}
+
+	if(cbtWifiHideSsid)
+		json_object_object_add(cbtWifiApAdvObj, "SSIDAdvertisementEnabled", json_object_new_boolean(false));
+	else
+		json_object_object_add(cbtWifiApAdvObj, "SSIDAdvertisementEnabled", json_object_new_boolean(true));
+
+	json_object_object_add(cbtWifiApAdvObj, "WMMEnable", json_object_new_boolean(cbtWifiWmm));
+	json_object_object_add(cbtWifiApAdvObj, "UAPSDEnable", json_object_new_boolean(cbtWifiWmmApsd));
+
+	// 5G data
+	if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_ACCESS_POINT, &cbt5GWifiApAdvIid, &cbt5GWifiApAdvObj)) != ZCFG_SUCCESS) {
+		return ret;
+	}
+
+	if(cbt5GWifiHideSsid)
+		json_object_object_add(cbt5GWifiApAdvObj, "SSIDAdvertisementEnabled", json_object_new_boolean(false));
+	else
+		json_object_object_add(cbt5GWifiApAdvObj, "SSIDAdvertisementEnabled", json_object_new_boolean(true));
+
+	json_object_object_add(cbt5GWifiApAdvObj, "WMMEnable", json_object_new_boolean(cbt5GWifiWmm));
+	json_object_object_add(cbt5GWifiApAdvObj, "UAPSDEnable", json_object_new_boolean(cbt5GWifiWmmApsd));
+
+	return ret;
+}
+
+zcfgRet_t zcfgFeDalCbtWifiAdvEdit(struct json_object *Jobj, char *replyMsg){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	
+	initCbtWifiAdvObjects();
+	getCbtWifiAdvInfo(Jobj);
+	
+	t2 = time(NULL);
+	printf("line=%d, time=%d\n", __LINE__, (int) difftime(t2, t1));
+
+	if((ret = editCbtWifiRadioObject(Jobj)) != ZCFG_SUCCESS){
+		printf("editCbtWifiRadioObject fail\n", __LINE__);
+		goto dalwlan_edit_fail;
+	}
+
+	if((ret = editCbtWifiApWpsObject(Jobj)) != ZCFG_SUCCESS){
+		printf("editCbtWifiApWpsObject fail\n", __LINE__);
+		goto dalwlan_edit_fail;
+	}
+
+	if((ret = editCbtWifiApObject(Jobj)) != ZCFG_SUCCESS){
+		printf("editCbtWifiApObject fail\n", __LINE__);
+		goto dalwlan_edit_fail;
+	}
+		
+	t2 = time(NULL);
+	printf("before set, time=%d seconds\n", (int) difftime(t2, t1));
+	
+	setAllCbtWifiAdvObjects(Jobj);
+	
+	sleep(5); //CBT case , the WiFi 2.4 and 5G setting at same time. The delay 5sec for next get.
+
+dalwlan_edit_fail:
+	freeAllCbtWifiAdvObjects();
+	
+	return ret;
+}
+
+zcfgRet_t zcfgFeDalCbtWifiAdv(const char *method, struct json_object *Jobj, char *replyMsg){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	
+	t1 = time(NULL);
+	
+	if(!strcmp(method, "PUT"))
+		ret = zcfgFeDalCbtWifiAdvEdit(Jobj, NULL);
+	else
+		printf("Unknown method:%s\n", method);
+	
+	t2 = time(NULL);
+    printf("zcfgFeDalCbtWifiAdv() Total time=%d seconds ret=%d\n", (int) difftime(t2, t1), ret);
+
+	return ret;
+}
+#endif
\ No newline at end of file
Index: libzcfg_fe_dal-1.0/network/wireless/zcfg_fe_dal_wifi_cbt.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ libzcfg_fe_dal-1.0/network/wireless/zcfg_fe_dal_wifi_cbt.c	2017-09-21 14:42:35.104016012 +0800
@@ -0,0 +1,672 @@
+#include <ctype.h>
+#include <json/json.h>
+#include <time.h>
+
+#include "zcfg_common.h"
+#include "zcfg_fe_rdm_string.h"
+#include "zcfg_fe_rdm_struct.h"
+#include "zcfg_rdm_oid.h"
+#include "zcfg_rdm_obj.h"
+#include "zcfg_debug.h"
+#include "zcfg_msg.h"
+#include "zcfg_fe_dal_common.h"
+
+#ifdef CBT_CUSTOMIZATION
+
+// RDM Json Object
+struct json_object *cbtSsidObj = NULL;
+struct json_object *cbt5GSsidObj = NULL;
+struct json_object *cbtSecObj = NULL;
+struct json_object *cbt5GSecObj = NULL;
+struct json_object *cbtDevInfoObj = NULL;
+struct json_object *cbtSecTmpObj = NULL;
+struct json_object *cbt5GSecTmpObj = NULL;
+
+// RDM Iid
+objIndex_t cbtSsidIid = {0};
+objIndex_t cbt5GSsidIid = {0};
+objIndex_t cbtSecIid = {0};
+objIndex_t cbt5GSecIid = {0};
+objIndex_t cbtDevInfoIid = {0};
+objIndex_t cbtSecTmpIid = {0};
+objIndex_t cbt5GSecTmpIid = {0};
+
+//WiFi Access Point Sec
+const char* CBT_X_ZYXEL_Auto_PSK;
+const char* cbtWpaMode;
+bool CBT_X_ZYXEL_AutoGenPSK;
+
+// CBT parameter
+bool cbtSameSsid;
+bool cbtWifiEnable;
+const char* cbtWifiSsid;
+const char* cbt5GWifiSsid;
+bool cbtGuestWifiConfig;
+bool cbtWifiConfig;
+unsigned int cbtGuestCountdownTime = 0;
+bool cbtSameSsidChange;
+const char* cbtWifiPskValue;
+
+time_t t1, t2;
+
+dal_param_t WIFI_CBT_param[]={
+	// APSec
+	{"wpaMode",		dalType_string,	0,	0,	NULL},
+	// CBT parameter
+	{"cbtGuestSsidSame",		dalType_boolean,	0,	0,	NULL,		NULL,			0},
+	{"cbtGuestEnable",		dalType_boolean,	0,	0,	NULL,		NULL,			0},
+	{"cbtGuestWifiSsid",		dalType_string, 0,	0,	NULL,		NULL,			0},
+	{"cbtGuest5GWifiSsid",		dalType_string, 0,	0,	NULL,		NULL,			0},
+	{"cbtGuestWifi",		dalType_boolean,	0,	0,	NULL,		NULL,			0},
+	{"cbtWifi",		dalType_boolean,	0,	0,	NULL,		NULL,			0},
+	{"cbtGuestWifiTimes",		dalType_int,	0,	0,	NULL,		NULL,			0},
+	{"cbtGuestPskValue",		dalType_string,	0,	0,	NULL,		NULL,			0},
+	{NULL,		0,	0,	0,	NULL},
+};
+
+void initCbtWifiObjects(){
+	
+	cbtSsidObj = NULL;
+	cbt5GSsidObj = NULL;
+	cbtSecObj = NULL;
+	cbt5GSecObj = NULL;
+	cbtDevInfoObj = NULL;
+	cbtSecTmpObj = NULL;
+	cbt5GSecTmpObj = NULL;
+	
+	IID_INIT(cbtSsidIid);
+	IID_INIT(cbt5GSsidIid);
+	IID_INIT(cbtSecIid);
+	IID_INIT(cbt5GSecIid);
+	IID_INIT(cbtDevInfoIid);
+	IID_INIT(cbtSecTmpIid);
+	IID_INIT(cbt5GSecTmpIid);
+}
+
+zcfgRet_t freeAllCbtWifiObjects(){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	
+	if(cbtSsidObj) json_object_put(cbtSsidObj);
+	if(cbt5GSsidObj) json_object_put(cbt5GSsidObj);
+	if(cbtSecObj) json_object_put(cbtSecObj);
+	if(cbt5GSecObj) json_object_put(cbt5GSecObj);
+	if(cbtDevInfoObj) json_object_put(cbtDevInfoObj);
+	if(cbtSecTmpObj) json_object_put(cbtSecTmpObj);
+	if(cbt5GSecTmpObj) json_object_put(cbt5GSecTmpObj);
+
+	return ret;
+}
+
+void getCbtBasicWifiInfo(struct json_object *Jobj){
+	
+	cbtGuestWifiConfig = json_object_get_boolean(json_object_object_get(Jobj, "cbtGuestWifi"));
+	cbtWifiConfig = json_object_get_boolean(json_object_object_get(Jobj, "cbtWifi"));
+	cbtWifiEnable = json_object_get_boolean(json_object_object_get(Jobj, "cbtGuestEnable")); // Enable/Disable
+	cbtSameSsid = json_object_get_boolean(json_object_object_get(Jobj, "cbtGuestSsidSame")); // 2.4G/5G the same SSID
+	cbtWifiSsid = json_object_get_string(json_object_object_get(Jobj, "cbtGuestWifiSsid")); // 2.4G SSID
+	cbt5GWifiSsid = json_object_get_string(json_object_object_get(Jobj, "cbtGuest5GWifiSsid")); // 5G SSID
+	cbtWifiPskValue = json_object_get_string(json_object_object_get(Jobj, "cbtGuestPskValue")); // 2.4G/5G password
+	cbtGuestCountdownTime = json_object_get_int(json_object_object_get(Jobj, "cbtGuestWifiTimes")); // countdown Time
+	cbtWpaMode = json_object_get_string(json_object_object_get(Jobj, "wpaMode"));
+#ifdef BUILD_SONIQ
+	if(cbtMeshCheckSsidNeedSync(Jobj) == true) {
+		cbtSameSsid = true;
+	}
+#endif
+	
+	return;
+}
+
+void cbtStrtolower(char *str, char *buf, size_t size)
+{
+
+	int n;
+
+	for(n = 0; n < size && str[n] != '\0'; n++) {
+		buf[n] = tolower(str[n]);
+	}
+	buf[n] = '\0';
+
+	return;
+
+}
+
+// RDM_OID_WIFI_SSID
+zcfgRet_t editCbtWifiSsidObjects(struct json_object *Jobj){
+
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	struct json_object *iidArray = NULL;
+	uint8_t iidIdx =0;
+	const char *serialNum;
+	char tempSerial[6] = {0};
+	char temp5GSsid[32] = {0};
+	char originalSsid[32] = {0};
+	
+	if(cbtGuestWifiConfig == true){ // CBT WiFi or CBT Guest WiFi
+		
+		// 2.4G Iid
+		iidArray = json_object_object_get(Jobj, "cbtGuestWifiIid");
+		for(iidIdx=0;iidIdx<6;iidIdx++){
+			cbtSsidIid.idx[iidIdx] = json_object_get_int( json_object_array_get_idx(iidArray, iidIdx));
+			if(cbtSsidIid.idx[iidIdx] != 0)
+				cbtSsidIid.level = iidIdx+1;
+		}
+		// 5G Iid
+		iidArray = json_object_object_get(Jobj, "cbtGuest5GWifiIid");
+		for(iidIdx=0;iidIdx<6;iidIdx++){
+			cbt5GSsidIid.idx[iidIdx] = json_object_get_int( json_object_array_get_idx(iidArray, iidIdx));
+			if(cbt5GSsidIid.idx[iidIdx] != 0)
+				cbt5GSsidIid.level = iidIdx+1;
+		}
+
+		// 2.4G get data and set value to object
+		if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_SSID, &cbtSsidIid, &cbtSsidObj)) != ZCFG_SUCCESS) {
+			return ret;
+		}
+		json_object_object_add(cbtSsidObj, "Enable", json_object_new_boolean(cbtWifiEnable));
+		json_object_object_add(cbtSsidObj, "X_ZYXEL_GuestEnableTime", json_object_new_int(cbtGuestCountdownTime));
+
+		// 5G get data and set value to object
+		if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_SSID, &cbt5GSsidIid, &cbt5GSsidObj)) != ZCFG_SUCCESS) {
+			return ret;
+		}
+		json_object_object_add(cbt5GSsidObj, "Enable", json_object_new_boolean(cbtWifiEnable));
+		json_object_object_add(cbt5GSsidObj, "X_ZYXEL_GuestEnableTime", json_object_new_int(cbtGuestCountdownTime));
+
+		// The same SSID or not
+		if(cbtSameSsid){ // 2.4G / 5G using the same SSID base on 2.4G SSID
+			json_object_object_add(cbtSsidObj, "SSID", json_object_new_string(cbtWifiSsid));
+			json_object_object_add(cbt5GSsidObj, "SSID", json_object_new_string(cbtWifiSsid));
+		}else{ // 2.4G / 5G using different SSID
+
+			json_object_object_add(cbtSsidObj, "SSID", json_object_new_string(cbtWifiSsid));
+
+			if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_DEV_INFO, &cbtDevInfoIid, &cbtDevInfoObj)) != ZCFG_SUCCESS) {
+				return ret;
+			}
+
+			serialNum = json_object_get_string(json_object_object_get(cbtDevInfoObj, "SerialNumber"));
+
+			strncpy(tempSerial, serialNum + 8, 5);
+			if(cbtWifiConfig){ // WiFi
+				sprintf(originalSsid, "Fioptics%s", tempSerial);
+
+				if(!strcmp(cbtWifiSsid, originalSsid)) // default SSID
+					sprintf(temp5GSsid, "Fioptics%s-5G", tempSerial);
+				else // user define SSID
+					sprintf(temp5GSsid, "%s-5G", cbtWifiSsid);
+
+			}else{ // Guest WiFi
+				sprintf(originalSsid, "Fioptics%s-Guest", tempSerial);
+
+				if(!strcmp(cbtWifiSsid, originalSsid)) // default SSID
+					sprintf(temp5GSsid, "Fioptics%s-Guest-5G", tempSerial);
+				else // user default SSID
+					sprintf(temp5GSsid, "%s-5G", cbtWifiSsid);
+
+			}
+
+			json_object_object_add(cbt5GSsidObj, "SSID", json_object_new_string(temp5GSsid));
+		}
+
+		// TR-181 parameter
+		if(cbtWifiConfig){ // WiFi, X_ZYXEL_MasterMain
+
+			cbtSameSsidChange = json_object_get_boolean(json_object_object_get(cbtSsidObj, "X_ZYXEL_MasterMain"));
+			if(cbtSameSsidChange == cbtSameSsid)
+				cbtSameSsidChange = false;
+			else
+				cbtSameSsidChange = true;
+
+			json_object_object_add(cbtSsidObj, "X_ZYXEL_MasterMain", json_object_new_boolean(cbtSameSsid));
+			json_object_object_add(cbt5GSsidObj, "X_ZYXEL_MasterMain", json_object_new_boolean(cbtSameSsid));
+		}else{ // Guest WiFi, X_ZYXEL_MasterGuest
+
+			cbtSameSsidChange = json_object_get_boolean(json_object_object_get(cbtSsidObj, "X_ZYXEL_MasterGuest"));
+			if(cbtSameSsidChange == cbtSameSsid)
+				cbtSameSsidChange = false;
+			else
+				cbtSameSsidChange = true;
+
+			json_object_object_add(cbtSsidObj, "X_ZYXEL_MasterGuest", json_object_new_boolean(cbtSameSsid));
+			json_object_object_add(cbt5GSsidObj, "X_ZYXEL_MasterGuest", json_object_new_boolean(cbtSameSsid));
+		}
+
+	}
+
+	return ret;
+}
+
+// RDM_OID_WIFI_ACCESS_POINT_SEC
+zcfgRet_t editCbtWifiSecObject(struct json_object *Jobj){
+
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	struct json_object *iidArray = NULL;
+	uint8_t iidIdx =0;
+	char *psk_lowercase = NULL;
+
+	char tmpPsk[128] = {0};
+	int cbtGuestWifiNumber = 0;
+	struct json_object *guiCustObj = NULL;
+	objIndex_t guiObjIid;
+
+	if(cbtGuestWifiConfig == true){ // CBT guest Wi-Fi
+
+		iidArray = json_object_object_get(Jobj, "cbtGuestWifiIid"); // 2.4G Iid
+		for(iidIdx=0;iidIdx<6;iidIdx++){
+			cbtSecIid.idx[iidIdx] = json_object_get_int(json_object_array_get_idx(iidArray, iidIdx));
+			if(cbtSecIid.idx[iidIdx] != 0)
+				cbtSecIid.level = iidIdx+1;
+		}
+
+		iidArray = json_object_object_get(Jobj, "cbtGuest5GWifiIid"); // 5G Iid
+		for(iidIdx=0;iidIdx<6;iidIdx++){
+			cbt5GSecIid.idx[iidIdx] = json_object_get_int(json_object_array_get_idx(iidArray, iidIdx));
+			if(cbt5GSecIid.idx[iidIdx] != 0)
+				cbt5GSecIid.level = iidIdx+1;
+		}
+	
+		if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_ACCESS_POINT_SEC, &cbtSecIid, &cbtSecObj)) != ZCFG_SUCCESS) {
+			return ret;
+		}
+		if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_ACCESS_POINT_SEC, &cbt5GSecIid, &cbt5GSecObj)) != ZCFG_SUCCESS) {
+			return ret;
+		}
+		
+		if(!strcmp(cbtWpaMode,"wpa2psk") || !strcmp(cbtWpaMode,"wpapsk") || !strcmp(cbtWpaMode,"wpawpa2psk")){
+			
+			if(!strcmp(cbtWpaMode,"wpa2psk")){
+				json_object_object_add(cbtSecObj, "ModeEnabled", json_object_new_string("WPA2-Personal"));
+				json_object_object_add(cbt5GSecObj, "ModeEnabled", json_object_new_string("WPA2-Personal"));
+			}
+			else if(!strcmp(cbtWpaMode,"wpapsk")){
+				json_object_object_add(cbtSecObj, "ModeEnabled", json_object_new_string("WPA-Personal"));
+				json_object_object_add(cbt5GSecObj, "ModeEnabled", json_object_new_string("WPA-Personal"));
+			}
+			else{
+				json_object_object_add(cbtSecObj, "ModeEnabled", json_object_new_string("WPA-WPA2-Personal"));
+				json_object_object_add(cbt5GSecObj, "ModeEnabled", json_object_new_string("WPA-WPA2-Personal"));
+			}
+
+			// CBT guest WiFi security mode is the same with WiFi security mode
+			if(cbtWifiConfig){
+
+				IID_INIT(guiObjIid);
+				if(zcfgFeObjJsonGetWithoutUpdate(RDM_OID_GUI_CUSTOMIZATION, &guiObjIid, &guiCustObj) == ZCFG_SUCCESS){
+					cbtGuestWifiNumber = json_object_get_int(json_object_object_get(guiCustObj, "CbtGuestWifi"));
+					free(guiCustObj);
+				}else{
+					zcfgLog(ZCFG_LOG_ERR, "%s: fail to get RDM_OID_GUI_CUSTOMIZATION\n", __FUNCTION__);
+					printf("%s: fail to get RDM_OID_GUI_CUSTOMIZATION\n", __FUNCTION__);
+					cbtGuestWifiNumber = 1; // set 1 when get fail
+				}
+
+				cbtSecTmpIid.idx[0] = cbtGuestWifiNumber + 1;
+				cbt5GSecTmpIid.idx[0] = cbtGuestWifiNumber + 5;
+
+				for(iidIdx = 1; iidIdx < 6; iidIdx++){
+					cbtSecTmpIid.idx[iidIdx] = cbtSecIid.idx[iidIdx];
+					cbt5GSecTmpIid.idx[iidIdx] = cbt5GSecIid.idx[iidIdx];
+				}
+				cbtSecTmpIid.level = cbtSecIid.level;
+				cbt5GSecTmpIid.level = cbt5GSecIid.level;
+
+				if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_ACCESS_POINT_SEC, &cbtSecTmpIid, &cbtSecTmpObj)) != ZCFG_SUCCESS)
+					return ret;
+
+				if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_ACCESS_POINT_SEC, &cbt5GSecTmpIid, &cbt5GSecTmpObj)) != ZCFG_SUCCESS)
+					return ret;
+
+				if(!strcmp(cbtWpaMode,"wpa2psk")){
+					json_object_object_add(cbtSecTmpObj, "ModeEnabled", json_object_new_string("WPA2-Personal"));
+					json_object_object_add(cbt5GSecTmpObj, "ModeEnabled", json_object_new_string("WPA2-Personal"));
+				}
+				else if(!strcmp(cbtWpaMode,"wpapsk")){
+					json_object_object_add(cbtSecTmpObj, "ModeEnabled", json_object_new_string("WPA-Personal"));
+					json_object_object_add(cbt5GSecTmpObj, "ModeEnabled", json_object_new_string("WPA-Personal"));
+				}
+				else{
+					json_object_object_add(cbtSecTmpObj, "ModeEnabled", json_object_new_string("WPA-WPA2-Personal"));
+					json_object_object_add(cbt5GSecTmpObj, "ModeEnabled", json_object_new_string("WPA-WPA2-Personal"));
+				}
+			}
+				
+			CBT_X_ZYXEL_Auto_PSK = json_object_get_string(json_object_object_get(cbtSecObj, "X_ZYXEL_Auto_PSK"));
+			if(strcmp(CBT_X_ZYXEL_Auto_PSK, cbtWifiPskValue) == 0) // The same string means using auto generate psk
+			{
+				// X_ZYXEL_AutoGenPSK
+				CBT_X_ZYXEL_AutoGenPSK = true;
+
+				// 2.4G KeyPassphrase and PreSharedKey
+				json_object_object_add(cbtSecObj, "X_ZYXEL_AutoGenPSK", json_object_new_boolean(CBT_X_ZYXEL_AutoGenPSK));
+				json_object_object_add(cbtSecObj, "KeyPassphrase", json_object_new_string(CBT_X_ZYXEL_Auto_PSK));
+				json_object_object_add(cbtSecObj, "PreSharedKey", json_object_new_string(""));
+
+				// 5G KeyPassphrase and PreSharedKey
+				//if(cbtSameSsid == true){
+					json_object_object_add(cbt5GSecObj, "X_ZYXEL_AutoGenPSK", json_object_new_boolean(CBT_X_ZYXEL_AutoGenPSK));
+					json_object_object_add(cbt5GSecObj, "KeyPassphrase", json_object_new_string(CBT_X_ZYXEL_Auto_PSK));
+					json_object_object_add(cbt5GSecObj, "PreSharedKey", json_object_new_string(""));
+				/*}else{ // 20170720 Max Noted: remove CBT 5G wifi password add "-5G" at the end of 2.4G password
+					CBT_X_ZYXEL_AutoGenPSK = false;
+
+					json_object_object_add(cbt5GSecObj, "X_ZYXEL_AutoGenPSK", json_object_new_boolean(CBT_X_ZYXEL_AutoGenPSK));
+					sprintf(tmpPsk, "%s%s", CBT_X_ZYXEL_Auto_PSK, "-5G");
+					json_object_object_add(cbt5GSecObj, "KeyPassphrase", json_object_new_string(tmpPsk));
+				}*/
+			}else {
+				// X_ZYXEL_AutoGenPSK
+				CBT_X_ZYXEL_AutoGenPSK = false;
+				json_object_object_add(cbtSecObj, "X_ZYXEL_AutoGenPSK", json_object_new_boolean(CBT_X_ZYXEL_AutoGenPSK));
+				json_object_object_add(cbt5GSecObj, "X_ZYXEL_AutoGenPSK", json_object_new_boolean(CBT_X_ZYXEL_AutoGenPSK));
+
+				if(strlen(cbtWifiPskValue) == 64) {
+					psk_lowercase = (char*)malloc(strlen(cbtWifiPskValue)+1);
+					memset(psk_lowercase, 0, strlen(cbtWifiPskValue)+1);
+					cbtStrtolower(cbtWifiPskValue, psk_lowercase, strlen(cbtWifiPskValue));
+					json_object_object_add(cbtSecObj, "KeyPassphrase", json_object_new_string(""));
+					json_object_object_add(cbtSecObj, "PreSharedKey", json_object_new_string(psk_lowercase));
+					json_object_object_add(cbt5GSecObj, "KeyPassphrase", json_object_new_string(""));
+					json_object_object_add(cbt5GSecObj, "PreSharedKey", json_object_new_string(psk_lowercase));
+				}
+				else {
+					// 2.4G PSK
+					json_object_object_add(cbtSecObj, "KeyPassphrase", json_object_new_string(cbtWifiPskValue));
+						
+					// 5G PSK
+					//if(cbtSameSsid == true){
+						json_object_object_add(cbt5GSecObj, "KeyPassphrase", json_object_new_string(cbtWifiPskValue));
+					/*}else{ // 20170720 Max Noted: remove CBT 5G wifi password add "-5G" at the end of 2.4G password
+						sprintf(tmpPsk, "%s%s", cbtWifiPskValue, "-5G");
+						json_object_object_add(cbt5GSecObj, "KeyPassphrase", json_object_new_string(tmpPsk));
+					}*/
+				}
+			}
+		}
+	}
+	
+	return ret;
+}
+
+zcfgRet_t setAllCbtWifiObjects(struct json_object *Jobj){
+
+	zcfgRet_t ret = ZCFG_SUCCESS;
+
+	if(cbtWifiConfig == true){ // Guest WiFi follow WiFi security mode
+		if(cbtSecTmpObj) zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_ACCESS_POINT_SEC, &cbtSecTmpIid, cbtSecTmpObj, NULL);
+		if(cbt5GSecTmpObj) zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_ACCESS_POINT_SEC, &cbt5GSecTmpIid, cbt5GSecTmpObj, NULL);
+	}
+
+	// 2.4G and 5G APSec
+	if(cbtSecObj) zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_ACCESS_POINT_SEC, &cbtSecIid, cbtSecObj, NULL);
+	if(cbt5GSecObj) zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_ACCESS_POINT_SEC, &cbt5GSecIid, cbt5GSecObj, NULL);
+
+	// 2.4G SSID
+	if(cbtSsidObj) zcfgFeObjJsonSet(RDM_OID_WIFI_SSID, &cbtSsidIid, cbtSsidObj, NULL);
+	// 5G SSID
+	if(cbt5GSsidObj) zcfgFeObjJsonSet(RDM_OID_WIFI_SSID, &cbt5GSsidIid, cbt5GSsidObj, NULL);
+
+
+	return ret;
+}
+
+zcfgRet_t zcfgFeDalCbtWifiEdit(struct json_object *Jobj, char *replyMsg){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+
+	initCbtWifiObjects();
+	getCbtBasicWifiInfo(Jobj);
+
+	t2 = time(NULL);
+	printf("line=%d, time=%d\n", __LINE__, (int) difftime(t2, t1));
+
+	if((ret = editCbtWifiSsidObjects(Jobj)) != ZCFG_SUCCESS)
+		goto dalwlan_edit_fail;
+	
+	if((ret = editCbtWifiSecObject(Jobj)) != ZCFG_SUCCESS)
+		goto dalwlan_edit_fail;
+
+	t2 = time(NULL);
+	printf("before set, time=%d seconds\n", (int) difftime(t2, t1));
+	
+	setAllCbtWifiObjects(Jobj);
+	
+	sleep(5); //CBT case , the WiFi 2.4 and 5G setting at same time. The delay 5sec for next get.
+
+dalwlan_edit_fail:
+	freeAllCbtWifiObjects();
+	
+	return ret;
+}
+
+#ifdef BUILD_SONIQ
+void cbtDalWlanGetMainSsidIndex(int *main2gFound, int *main5gFound)
+{
+	char *str;
+	struct json_object *obj = NULL;
+	objIndex_t iid;
+
+	IID_INIT(iid);
+	while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_WIFI_SSID, &iid, &obj) == ZCFG_SUCCESS) {
+		if (json_object_get_int(json_object_object_get(obj, "X_ZYXEL_MainSSID")) == true) {
+			str = (char*)json_object_get_string(json_object_object_get(obj, "LowerLayers"));
+			if (strncmp(str, "WiFi.Radio.1", strlen("WiFi.Radio.1")) == 0) {
+				*main2gFound = iid.idx[0];
+			}
+			else if (strncmp(str, "WiFi.Radio.2", strlen("WiFi.Radio.2")) == 0) {
+				*main5gFound = iid.idx[0];
+			}
+		}
+		json_object_put(obj);
+		obj = NULL;
+	}
+	return;
+}
+
+static int cbtNeedCopy(int main2gIndex, int main5gIndex, objIndex_t *iid)
+{
+	struct json_object *soniqObj = NULL;
+	objIndex_t soniqIid = {0};
+	bool soniqEnabled = false;
+
+	IID_INIT(soniqIid);
+
+	if (zcfgFeObjJsonGet(RDM_OID_WIFI_QSTEER, &soniqIid, &soniqObj) == ZCFG_SUCCESS) {
+		soniqEnabled = json_object_get_int(json_object_object_get(soniqObj, "Enable"));
+		zcfgFeJsonObjFree(soniqObj);
+		if (soniqEnabled == false) {
+			return false;
+		}
+	}
+	else {
+		return false;
+	}
+	if (iid->idx[0] == main2gIndex) { //2g main
+		return true;
+	}
+	else if (iid->idx[0] == (main2gIndex + 1)) { //2g guest1
+		return true;
+	}
+
+	return false;
+}
+
+zcfgRet_t cbtMeshDalWlanCopy2gto5g(struct json_object *Jobj)
+{
+	struct json_object *ssidObj = NULL, *ssidObj5g = NULL, *apObj = NULL, *apObj5g = NULL, *apSecObj = NULL, *apSecObj5g = NULL;
+	objIndex_t ssidObjIid = {0}, ssidObj5gIid = {0}, apObjIid = {0}, apObj5gIid = {0}, apSecObjIid = {0}, apSecObj5gIid = {0};
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	int main2gFound = 0, main5gFound = 0;
+	char *str2g, *str5g;
+
+	cbtDalWlanGetMainSsidIndex(&main2gFound, &main5gFound);
+
+	/* ssidObj */
+	IID_INIT(ssidObjIid);
+	zcfgDalGetIid(Jobj, "wlSsidIid", &ssidObjIid);
+
+	if (cbtNeedCopy(main2gFound, main5gFound, &ssidObjIid) == true) {
+		if ((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_SSID, &ssidObjIid, &ssidObj)) != ZCFG_SUCCESS) {
+			goto error;
+		}
+		IID_INIT(ssidObj5gIid);
+		ssidObj5gIid.idx[0] = ssidObjIid.idx[0] - main2gFound + main5gFound;
+		ssidObj5gIid.level = 1;
+		if ((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_SSID, &ssidObj5gIid, &ssidObj5g)) != ZCFG_SUCCESS) {
+			goto error;
+		}
+
+		replaceParam(ssidObj5g, "SSID", ssidObj, "SSID");
+
+		zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_SSID, &ssidObj5gIid, ssidObj5g, NULL);
+		json_object_put(ssidObj);
+		ssidObj = NULL;
+		json_object_put(ssidObj5g);
+		ssidObj5g = NULL;
+	}
+
+	/* apObj */
+	IID_INIT(apObjIid);
+	zcfgDalGetIid(Jobj, "wlApIid", &apObjIid);
+
+	if (cbtNeedCopy(main2gFound, main5gFound, &apObjIid) == true) {
+		if ((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_ACCESS_POINT, &apObjIid, &apObj)) != ZCFG_SUCCESS) {
+			goto error;
+		}
+		IID_INIT(apObj5gIid);
+		apObj5gIid.idx[0] = apObjIid.idx[0] - main2gFound + main5gFound;
+		apObj5gIid.level = 1;
+		if ((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_ACCESS_POINT, &apObj5gIid, &apObj5g)) != ZCFG_SUCCESS) {
+			goto error;
+		}
+
+		replaceParam(apObj5g, "SSIDAdvertisementEnabled", apObj, "SSIDAdvertisementEnabled");
+		replaceParam(apObj5g, "IsolationEnable", apObj, "IsolationEnable");
+		replaceParam(apObj5g, "X_ZYXEL_BssIdIsolation", apObj, "X_ZYXEL_BssIdIsolation");
+
+		zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_ACCESS_POINT, &apObj5gIid, apObj5g, NULL);
+		json_object_put(apObj);
+		apObj = NULL;
+		json_object_put(apObj5g);
+		apObj5g = NULL;
+	}
+
+	/* apSecObj */
+	IID_INIT(apSecObjIid);
+	zcfgDalGetIid(Jobj, "wlSecIid", &apSecObjIid);
+
+	if (cbtNeedCopy(main2gFound, main5gFound, &apSecObjIid) == true) {
+		if ((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_ACCESS_POINT_SEC, &apSecObjIid, &apSecObj)) != ZCFG_SUCCESS) {
+			goto error;
+		}
+		IID_INIT(apSecObj5gIid);
+		apSecObj5gIid.idx[0] = apSecObjIid.idx[0] - main2gFound + main5gFound;
+		apSecObj5gIid.level = 1;
+		if ((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_ACCESS_POINT_SEC, &apSecObj5gIid, &apSecObj5g)) != ZCFG_SUCCESS) {
+			goto error;
+		}
+
+		/*
+ 		*  special case: 2.4G security mode does not support on 5G
+		*  		"ModesSupported": "None,WPA-Personal,WPA2-Personal,WPA-WPA2-Personal,"
+		*  		"ModeEnabled": "WEP-128"
+ 		*/
+		str2g = (char*)json_object_get_string(json_object_object_get(apSecObj, "ModeEnabled"));
+		str5g = (char*)json_object_get_string(json_object_object_get(apSecObj5g, "ModesSupported"));
+		if (strstr(str5g, str2g) != NULL) {
+			replaceParam(apSecObj5g, "ModeEnabled", apSecObj, "ModeEnabled");
+			replaceParam(apSecObj5g, "WEPKey", apSecObj, "WEPKey");
+			replaceParam(apSecObj5g, "X_ZYXEL_WEPKey2", apSecObj, "X_ZYXEL_WEPKey2");
+			replaceParam(apSecObj5g, "X_ZYXEL_WEPKey3", apSecObj, "X_ZYXEL_WEPKey3");
+			replaceParam(apSecObj5g, "X_ZYXEL_WEPKey4", apSecObj, "X_ZYXEL_WEPKey4");
+			replaceParam(apSecObj5g, "X_ZYXEL_WEP64Key1", apSecObj, "X_ZYXEL_WEP64Key1");
+			replaceParam(apSecObj5g, "X_ZYXEL_WEP64Key2", apSecObj, "X_ZYXEL_WEP64Key2");
+			replaceParam(apSecObj5g, "X_ZYXEL_WEP64Key3", apSecObj, "X_ZYXEL_WEP64Key3");
+			replaceParam(apSecObj5g, "X_ZYXEL_WEP64Key4", apSecObj, "X_ZYXEL_WEP64Key4");
+			replaceParam(apSecObj5g, "X_ZYXEL_DefaultKeyID", apSecObj, "X_ZYXEL_DefaultKeyID");
+			replaceParam(apSecObj5g, "X_ZYXEL_WepModeSelect", apSecObj, "X_ZYXEL_WepModeSelect");
+			replaceParam(apSecObj5g, "PreSharedKey", apSecObj, "PreSharedKey");
+			replaceParam(apSecObj5g, "KeyPassphrase", apSecObj, "KeyPassphrase");
+			replaceParam(apSecObj5g, "RekeyingInterval", apSecObj, "RekeyingInterval");
+			replaceParam(apSecObj5g, "X_ZYXEL_AutoGenPSK", apSecObj, "X_ZYXEL_AutoGenPSK");
+			replaceParam(apSecObj5g, "X_ZYXEL_Auto_PSK", apSecObj, "X_ZYXEL_Auto_PSK");
+			replaceParam(apSecObj5g, "X_ZYXEL_Auto_PSK_Length", apSecObj, "X_ZYXEL_Auto_PSK_Length");
+			replaceParam(apSecObj5g, "X_ZYXEL_AutoGenPSK_algorithm", apSecObj, "X_ZYXEL_AutoGenPSK_algorithm");
+			replaceParam(apSecObj5g, "X_ZYXEL_AutoGenWepKey", apSecObj, "X_ZYXEL_AutoGenWepKey");
+			replaceParam(apSecObj5g, "X_ZYXEL_Auto_WepKey26", apSecObj, "X_ZYXEL_Auto_WepKey26");
+			replaceParam(apSecObj5g, "X_ZYXEL_Auto_WepKey10", apSecObj, "X_ZYXEL_Auto_WepKey10");
+			replaceParam(apSecObj5g, "X_ZYXEL_PassphraseType", apSecObj, "X_ZYXEL_PassphraseType");
+			replaceParam(apSecObj5g, "X_ZYXEL_WEPAuthentication", apSecObj, "X_ZYXEL_WEPAuthentication");
+			replaceParam(apSecObj5g, "X_ZYXEL_WEPEncryption", apSecObj, "X_ZYXEL_WEPEncryption");
+			replaceParam(apSecObj5g, "X_ZYXEL_WPAAuthentication", apSecObj, "X_ZYXEL_WPAAuthentication");
+			replaceParam(apSecObj5g, "X_ZYXEL_11iAuthentication", apSecObj, "X_ZYXEL_11iAuthentication");
+			replaceParam(apSecObj5g, "X_ZYXEL_Encryption", apSecObj, "X_ZYXEL_Encryption");
+			replaceParam(apSecObj5g, "X_ZYXEL_WPAEncryption", apSecObj, "X_ZYXEL_WPAEncryption");
+			replaceParam(apSecObj5g, "X_ZYXEL_11iEncryption", apSecObj, "X_ZYXEL_11iEncryption");
+			replaceParam(apSecObj5g, "X_ZYXEL_Preauth", apSecObj, "X_ZYXEL_Preauth");
+			replaceParam(apSecObj5g, "X_ZYXEL_ReauthInterval", apSecObj, "X_ZYXEL_ReauthInterval");
+
+			zcfgFeObjJsonBlockedSet(RDM_OID_WIFI_ACCESS_POINT_SEC, &apSecObj5gIid, apSecObj5g, NULL);
+		}
+		json_object_put(apSecObj);
+		apSecObj = NULL;
+		json_object_put(apSecObj5g);
+		apSecObj5g = NULL;
+	}
+
+error:
+	json_object_put(ssidObj);
+	json_object_put(ssidObj5g);
+	json_object_put(apObj);
+	json_object_put(apObj5g);
+	json_object_put(apSecObj);
+	json_object_put(apSecObj5g);
+
+	return ret;
+}
+
+bool cbtMeshCheckSsidNeedSync(struct json_object *Jobj)
+{
+	objIndex_t ssidObjIid = {0};
+	int main2gFound = 0, main5gFound = 0;
+
+	cbtDalWlanGetMainSsidIndex(&main2gFound, &main5gFound);
+
+	/* ssidObj */
+	IID_INIT(ssidObjIid);
+#ifdef CBT_CUSTOMIZATION
+	zcfgDalGetIid(Jobj, "cbtGuestWifiIid", &ssidObjIid);
+#else
+	zcfgDalGetIid(Jobj, "wlSsidIid", &ssidObjIid);
+#endif
+
+	if (cbtNeedCopy(main2gFound, main5gFound, &ssidObjIid) == true) {
+		return true;
+	}
+	else {
+		return false;
+	}
+}
+#endif
+
+zcfgRet_t zcfgFeDalCbtWifi(const char *method, struct json_object *Jobj, char *replyMsg){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+
+	t1 = time(NULL);
+	
+	if(!strcmp(method, "PUT")){
+		ret = zcfgFeDalCbtWifiEdit(Jobj, NULL);
+
+#ifdef BUILD_SONIQ
+		cbtMeshDalWlanCopy2gto5g(Jobj);
+#endif
+
+	}
+	else
+		printf("Unknown method:%s\n", method);
+
+	t2 = time(NULL);
+	printf("zcfgFeDalCbtWifi() Total time=%d seconds ret=%d\n", (int) difftime(t2, t1), ret);
+
+	return ret;
+}
+#endif
\ No newline at end of file
Index: libzcfg_fe_dal-1.0/network/wireless/zcfg_fe_dal_wifi_general.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/network/wireless/zcfg_fe_dal_wifi_general.c	2017-09-21 14:31:50.212029682 +0800
+++ libzcfg_fe_dal-1.0/network/wireless/zcfg_fe_dal_wifi_general.c	2017-09-21 14:37:53.884021973 +0800
@@ -89,17 +89,6 @@
 struct json_object *wifiApObj = NULL;
 struct json_object *wifiSecObj = NULL;
 struct json_object *wifiSubnetObj = NULL;
-#ifdef CBT_CUSTOMIZATION // 20170425 Max Add
-struct json_object *guestSsidObj = NULL;
-struct json_object *guest5GSsidObj = NULL;
-struct json_object *guestApObj = NULL;
-struct json_object *guest5GApObj = NULL;
-struct json_object *guestSecObj = NULL;
-struct json_object *guest5GSecObj = NULL;
-struct json_object *guestDevInfoObj = NULL;
-struct json_object *guestSecTmpObj = NULL;
-struct json_object *guest5GSecTmpObj = NULL;
-#endif
 
 #ifdef ZYXEL_ONESSID
 struct json_object *wifiOneSsidObj = NULL;
@@ -112,17 +101,6 @@
 objIndex_t wifiApIid = {0};
 objIndex_t wifiSecIid = {0};
 objIndex_t wifiSubnetIid = {0};
-#ifdef CBT_CUSTOMIZATION // 20170425 Max Add
-objIndex_t guestSsidIid = {0};
-objIndex_t guest5GSsidIid = {0};
-objIndex_t guestApIid = {0};
-objIndex_t guest5GApIid = {0};
-objIndex_t guestSecIid = {0};
-objIndex_t guest5GSecIid = {0};
-objIndex_t guestDevInfoIid = {0};
-objIndex_t guestSecTmpIid = {0};
-objIndex_t guest5GSecTmpIid = {0};
-#endif
 
 #ifdef WIFI_ONESSID_SECURITY_SYNC
 
@@ -151,16 +129,6 @@
 bool X_ZYXEL_Multicast_Fwd;
 unsigned int upRate;
 unsigned int downRate;
-#ifdef CBT_CUSTOMIZATION // 20170425 Max Add
-bool guestSameSsid;
-bool guestEnable;
-const char* guestSsid;
-const char* guest5GSsid;
-bool cbtGuestWifiConfig;
-bool cbtWifiConfig;
-unsigned int guestCountdownTime = 0;
-bool cbtSameSsidChange;
-#endif
 //WiFi Radio
 bool div_wifiAdvance;
 unsigned int bandwidth;
@@ -171,10 +139,6 @@
 bool wlHide;
 const char* wlGwMode;
 bool wlEnableGuest;
-#ifdef CBT_CUSTOMIZATION
-bool guestSsidHide;
-bool guest5GSsidHide;
-#endif
 //WiFi Access Point Sec
 const char *secLv;
 int secMode;
@@ -192,9 +156,6 @@
 const char* wpaMode;
 bool X_ZYXEL_AutoGenPSK;
 const char* psk_value;
-#ifdef CBT_CUSTOMIZATION
-const char* guestPskValue;
-#endif
 unsigned int RekeyingInterval;
 const char* RadiusServerIPAddr;
 unsigned int RadiusServerPort;
@@ -369,67 +330,6 @@
 
 zcfgRet_t setAllWlObjects(struct json_object *Jobj){
 	zcfgRet_t ret = ZCFG_SUCCESS;
-#ifdef CBT_CUSTOMIZATION
-	if(cbtGuestWifiConfig == true){ // CBT Guest Wi-Fi
-
-		if(cbtWifiConfig == true){
-			if(guestSecTmpObj) zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_ACCESS_POINT_SEC, &guestSecTmpIid, guestSecTmpObj, NULL);
-			if(guest5GSecTmpObj) zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_ACCESS_POINT_SEC, &guest5GSecTmpIid, guest5GSecTmpObj, NULL);
-		}
-
-		// 2.4G AP, APSec
-		if(guestApObj) zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_ACCESS_POINT, &guestApIid, guestApObj, NULL);
-		if(guestSecObj) zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_ACCESS_POINT_SEC, &guestSecIid, guestSecObj, NULL);
-
-		// 5G AP, APSec
-		if(guest5GApObj) zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_ACCESS_POINT, &guest5GApIid, guest5GApObj, NULL);
-		if(guest5GSecObj) zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_ACCESS_POINT_SEC, &guest5GSecIid, guest5GSecObj, NULL);
-
-		// 2.4G SSID
-		if(guestSsidObj) zcfgFeObjJsonSet(RDM_OID_WIFI_SSID, &guestSsidIid, guestSsidObj, NULL);
-		// 5G SSID
-		if(guest5GSsidObj) zcfgFeObjJsonSet(RDM_OID_WIFI_SSID, &guest5GSsidIid, guest5GSsidObj, NULL);
-
-	}else{ // general wireless
-		if (wifiRadioObj == NULL)
-		{
-			if(wifiSsidObj == NULL) 
-			{
-				if(wifiApObj == NULL)
-				{
-					if(wifiSecObj == NULL)
-					{
-						if(wifiApWpsObj)zcfgFeObjJsonSet(RDM_OID_WIFI_ACCESS_POINT_WPS, &wifiApWpsIid, wifiApWpsObj, NULL);
-					}
-					else {
-						if(wifiApWpsObj)zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_ACCESS_POINT_WPS, &wifiApWpsIid, wifiApWpsObj, NULL);
-						if(wifiSecObj) zcfgFeObjJsonSet(RDM_OID_WIFI_ACCESS_POINT_SEC, &wifiSecIid, wifiSecObj, NULL);
-					}
-				}
-				else {
-					if(wifiApWpsObj) zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_ACCESS_POINT_WPS, &wifiApWpsIid, wifiApWpsObj, NULL);
-					if(wifiSecObj) zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_ACCESS_POINT_SEC, &wifiSecIid, wifiSecObj, NULL);
-					if(wifiApObj) zcfgFeObjJsonSet(RDM_OID_WIFI_ACCESS_POINT, &wifiApIid, wifiApObj, NULL);
-				}
-			
-			}
-			else {
-				if(wifiApWpsObj) zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_ACCESS_POINT_WPS, &wifiApWpsIid, wifiApWpsObj, NULL);
-				if(wifiApObj) zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_ACCESS_POINT, &wifiApIid, wifiApObj, NULL);
-				if(wifiSecObj) zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_ACCESS_POINT_SEC, &wifiSecIid, wifiSecObj, NULL);
-				if(wifiSsidObj) zcfgFeObjJsonSet(RDM_OID_WIFI_SSID, &wifiSsidIid, wifiSsidObj, NULL);
-			}
-		}
-		else {
-			if(wifiApWpsObj) zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_ACCESS_POINT_WPS, &wifiApWpsIid, wifiApWpsObj, NULL);
-			if(wifiApObj) zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_ACCESS_POINT, &wifiApIid, wifiApObj, NULL);
-			if(wifiSecObj) zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_ACCESS_POINT_SEC, &wifiSecIid, wifiSecObj, NULL);
-			if(wifiSsidObj)zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_SSID, &wifiSsidIid, wifiSsidObj, NULL);
-			if(wifiRadioObj) zcfgFeObjJsonSet(RDM_OID_WIFI_RADIO, &wifiRadioIid, wifiRadioObj, NULL);
-		}
-		if(wifiSubnetObj) zcfgFeObjJsonSet(RDM_OID_DHCPV4_SRV_SUBNET, &wifiSubnetIid, wifiSubnetObj, NULL);
-	}
-#else
 
 	if(wifiApObj) zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_ACCESS_POINT, &wifiApIid, wifiApObj, NULL);
 	if(wifiSecObj) zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_ACCESS_POINT_SEC, &wifiSecIid, wifiSecObj, NULL);
@@ -442,7 +342,6 @@
 #ifdef ZYXEL_ONESSID
 	if(wifiOneSsidObj) zcfgFeObjJsonBlockedSet(RDM_OID_WIFI_ONE_SSID, &wifiOneSsidIid, wifiOneSsidObj, NULL);
 #endif
-#endif
 	return ret;
 }
 
@@ -462,39 +361,13 @@
 	if(syncWifiSecObj) json_object_put(syncWifiSecObj);
 #endif //WIFI_ONESSID_SECURITY_SYNC
 	if(wifiSubnetObj) json_object_put(wifiSubnetObj);
-#ifdef CBT_CUSTOMIZATION // 20170426 Max Add
-	if(guestSsidObj) json_object_put(guestSsidObj);
-	if(guest5GSsidObj) json_object_put(guest5GSsidObj);
-	if(guestApObj) json_object_put(guestApObj);
-	if(guest5GApObj) json_object_put(guest5GApObj);
-	if(guestSecObj) json_object_put(guestSecObj);
-	if(guest5GSecObj) json_object_put(guest5GSecObj);
-	if(guestDevInfoObj) json_object_put(guestDevInfoObj);
-	if(guestSecTmpObj) json_object_put(guestSecTmpObj);
-	if(guest5GSecTmpObj) json_object_put(guest5GSecTmpObj);
-#endif
+
 	return ret;
 }
 
 
 void getBasicWlInfo(struct json_object *Jobj){
 
-#ifdef CBT_CUSTOMIZATION // 20170425 Max Add
-	//true: CBT guest, false: general wireless or general guest
-	cbtGuestWifiConfig = json_object_get_boolean(json_object_object_get(Jobj, "cbtGuestWifi"));
-	cbtWifiConfig = json_object_get_boolean(json_object_object_get(Jobj, "cbtWifi"));
-	if(cbtGuestWifiConfig == true){
-		guestEnable = json_object_get_boolean(json_object_object_get(Jobj, "cbtGuestEnable")); // Enable/Disable
-		guestSameSsid = json_object_get_boolean(json_object_object_get(Jobj, "cbtGuestSsidSame")); // 2.4G/5G the same SSID
-		guestSsid = json_object_get_string(json_object_object_get(Jobj, "cbtGuestWifiSsid")); // 2.4G SSID
-		guest5GSsid = json_object_get_string(json_object_object_get(Jobj, "cbtGuest5GWifiSsid")); // 5G SSID
-		guestSsidHide = json_object_get_boolean(json_object_object_get(Jobj, "cbtGuestSsidHide")); // 2.4G SSID hide
-		guest5GSsidHide = json_object_get_boolean(json_object_object_get(Jobj, "cbtGuest5GSsidHide")); // 5G SSID hide
-		guestPskValue = json_object_get_string(json_object_object_get(Jobj, "cbtGuestPskValue")); // 2.4G/5G password
-		guestCountdownTime = json_object_get_int(json_object_object_get(Jobj, "cbtGuestWifiTimes")); // countdown Time
-	}
-#endif
-
 #ifdef ZYXEL_ONESSID
 /*
 	if(!json_object_object_get(Jobj, "oneSsidEnable")){
@@ -587,17 +460,6 @@
 	syncWifiSecObj = NULL;
 #endif //WIFI_ONESSID_SECURITY_SYNC
 	wifiSubnetObj = NULL;
-#ifdef CBT_CUSTOMIZATION // 20170425 Max Add
-	guestSsidObj = NULL;
-	guest5GSsidObj = NULL;
-	guestApObj = NULL;
-	guest5GApObj = NULL;
-	guestSecObj = NULL;
-	guest5GSecObj = NULL;
-	guestDevInfoObj = NULL;
-	guestSecTmpObj = NULL;
-	guest5GSecTmpObj = NULL;
-#endif
 	
 #ifdef ZYXEL_ONESSID
 	wifiOneSsidObj = NULL;
@@ -611,17 +473,7 @@
 	IID_INIT(wifiApIid);
 	IID_INIT(wifiSecIid);
 	IID_INIT(wifiSubnetIid);
-#ifdef CBT_CUSTOMIZATION // 20170425 Max Add
-	IID_INIT(guestSsidIid);
-	IID_INIT(guest5GSsidIid);
-	IID_INIT(guestApIid);
-	IID_INIT(guest5GApIid);
-	IID_INIT(guestSecIid);
-	IID_INIT(guest5GSecIid);
-	IID_INIT(guestDevInfoIid);
-	IID_INIT(guestSecTmpIid);
-	IID_INIT(guest5GSecTmpIid);
-#endif	
+
 }
 
 zcfgRet_t editWifiRadioObjects(struct json_object *Jobj){
@@ -678,128 +530,6 @@
 	zcfgRet_t ret = ZCFG_SUCCESS;
 	struct json_object *iidArray = NULL;
 	uint8_t iidIdx =0;
-#ifdef CBT_CUSTOMIZATION // 20170426 Max Add
-	const char *serialNum;
-	char tempSerial[6] = {0};
-	char temp5GSsid[32] = {0};
-	char originalSsid[32] = {0};
-	
-	if(cbtGuestWifiConfig == true){ // CBT guest Wi-Fi
-		
-		// 2.4G Iid
-		iidArray = json_object_object_get(Jobj, "cbtGuestWifiIid");
-		for(iidIdx=0;iidIdx<6;iidIdx++){
-			guestSsidIid.idx[iidIdx] = json_object_get_int( json_object_array_get_idx(iidArray, iidIdx));
-			if(guestSsidIid.idx[iidIdx] != 0)
-				guestSsidIid.level = iidIdx+1;
-		}
-		// 5G Iid
-		iidArray = json_object_object_get(Jobj, "cbtGuest5GWifiIid");
-		for(iidIdx=0;iidIdx<6;iidIdx++){
-			guest5GSsidIid.idx[iidIdx] = json_object_get_int( json_object_array_get_idx(iidArray, iidIdx));
-			if(guest5GSsidIid.idx[iidIdx] != 0)
-				guest5GSsidIid.level = iidIdx+1;
-		}
-
-		// 2.4G get data and set value to object
-		if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_SSID, &guestSsidIid, &guestSsidObj)) != ZCFG_SUCCESS) {
-			return ret;
-		}
-		json_object_object_add(guestSsidObj, "Enable", json_object_new_boolean(guestEnable));
-		json_object_object_add(guestSsidObj, "X_ZYXEL_Multicast_Fwd", json_object_new_boolean(X_ZYXEL_Multicast_Fwd));
-
-		if(upRate)
-			json_object_object_add(guestSsidObj, "X_ZYXEL_UpstreamRate", json_object_new_int(upRate));
-		else
-			json_object_object_add(guestSsidObj, "X_ZYXEL_UpstreamRate", json_object_new_int(0));
-
-		if(downRate)
-			json_object_object_add(guestSsidObj, "X_ZYXEL_DownstreamRate", json_object_new_int(downRate));
-		else
-			json_object_object_add(guestSsidObj, "X_ZYXEL_DownstreamRate", json_object_new_int(0));
-
-		json_object_object_add(guestSsidObj, "X_ZYXEL_GuestEnableTime", json_object_new_int(guestCountdownTime));
-
-		// 5G get data and set value to object
-		if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_SSID, &guest5GSsidIid, &guest5GSsidObj)) != ZCFG_SUCCESS) {
-			return ret;
-		}
-		json_object_object_add(guest5GSsidObj, "Enable", json_object_new_boolean(guestEnable));
-		json_object_object_add(guest5GSsidObj, "X_ZYXEL_Multicast_Fwd", json_object_new_boolean(X_ZYXEL_Multicast_Fwd));
-
-		if(upRate)
-			json_object_object_add(guest5GSsidObj, "X_ZYXEL_UpstreamRate", json_object_new_int(upRate));
-		else
-			json_object_object_add(guest5GSsidObj, "X_ZYXEL_UpstreamRate", json_object_new_int(0));
-
-		if(downRate)
-			json_object_object_add(guest5GSsidObj, "X_ZYXEL_DownstreamRate", json_object_new_int(downRate));
-		else
-			json_object_object_add(guest5GSsidObj, "X_ZYXEL_DownstreamRate", json_object_new_int(0));
-
-		json_object_object_add(guest5GSsidObj, "X_ZYXEL_GuestEnableTime", json_object_new_int(guestCountdownTime));
-
-		// The same SSID or not
-		if(guestSameSsid){ // 2.4G / 5G using the same SSID base on 2.4G SSID
-			json_object_object_add(guestSsidObj, "SSID", json_object_new_string(guestSsid));
-			json_object_object_add(guest5GSsidObj, "SSID", json_object_new_string(guestSsid));
-		}else{ // 2.4G / 5G using different SSID
-
-			json_object_object_add(guestSsidObj, "SSID", json_object_new_string(guestSsid));
-
-			if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_DEV_INFO, &guestDevInfoIid, &guestDevInfoObj)) != ZCFG_SUCCESS) {
-				return ret;
-			}
-
-			serialNum = json_object_get_string(json_object_object_get(guestDevInfoObj, "SerialNumber"));
-
-			strncpy(tempSerial, serialNum + 8, 5);
-			if(cbtWifiConfig){ // WiFi
-				sprintf(originalSsid, "Fioptics%s", tempSerial);
-
-				if(!strcmp(guestSsid, originalSsid)) // default SSID
-					sprintf(temp5GSsid, "Fioptics%s-5G", tempSerial);
-				else // user define SSID
-					sprintf(temp5GSsid, "%s-5G", guestSsid);
-
-			}else{ // Guest WiFi
-				sprintf(originalSsid, "Fioptics%s-Guest", tempSerial);
-
-				if(!strcmp(guestSsid, originalSsid)) // default SSID
-					sprintf(temp5GSsid, "Fioptics%s-Guest-5G", tempSerial);
-				else // user default SSID
-					sprintf(temp5GSsid, "%s-5G", guestSsid);
-
-			}
-
-			json_object_object_add(guest5GSsidObj, "SSID", json_object_new_string(temp5GSsid));
-		}
-
-		// TR-181 parameter
-		if(cbtWifiConfig){ // WiFi, X_ZYXEL_MasterMain
-
-			cbtSameSsidChange = json_object_get_boolean(json_object_object_get(guestSsidObj, "X_ZYXEL_MasterMain"));
-			if(cbtSameSsidChange == guestSameSsid)
-				cbtSameSsidChange = false;
-			else
-				cbtSameSsidChange = true;
-
-			json_object_object_add(guestSsidObj, "X_ZYXEL_MasterMain", json_object_new_boolean(guestSameSsid));
-			json_object_object_add(guest5GSsidObj, "X_ZYXEL_MasterMain", json_object_new_boolean(guestSameSsid));
-		}else{ // Guest WiFi, X_ZYXEL_MasterGuest
-
-			cbtSameSsidChange = json_object_get_boolean(json_object_object_get(guestSsidObj, "X_ZYXEL_MasterGuest"));
-			if(cbtSameSsidChange == guestSameSsid)
-				cbtSameSsidChange = false;
-			else
-				cbtSameSsidChange = true;
-
-			json_object_object_add(guestSsidObj, "X_ZYXEL_MasterGuest", json_object_new_boolean(guestSameSsid));
-			json_object_object_add(guest5GSsidObj, "X_ZYXEL_MasterGuest", json_object_new_boolean(guestSameSsid));
-		}
-
-	}else{ // wireless general
-#endif
 #ifdef WIFI_ONESSID_SECURITY_SYNC
 
 	int getIndex = wifiSsidIid.idx[0] ;
@@ -841,10 +571,6 @@
 	else
 		json_object_object_add(wifiSsidObj, "X_ZYXEL_DownstreamRate", json_object_new_int(0));
 
-#ifdef CBT_CUSTOMIZATION // 20170426 Max Add
-	}
-#endif
-
 	return ret;
 }
 
@@ -908,291 +634,6 @@
 	uint8_t iidIdx =0;
 	char *psk_lowercase = NULL;
 
-#ifdef CBT_CUSTOMIZATION // 20170427 Max Add
-	char tmpPsk[128] = {0};
-	int cbtGuestWifiNumber = 0;
-	struct json_object *guiCustObj = NULL;
-	objIndex_t guiObjIid;
-
-	if(cbtGuestWifiConfig == true){ // CBT guest Wi-Fi
-
-		iidArray = json_object_object_get(Jobj, "cbtGuestWifiIid"); // 2.4G Iid
-		for(iidIdx=0;iidIdx<6;iidIdx++){
-			guestSecIid.idx[iidIdx] = json_object_get_int(json_object_array_get_idx(iidArray, iidIdx));
-			if(guestSecIid.idx[iidIdx] != 0)
-				guestSecIid.level = iidIdx+1;
-		}
-
-		iidArray = json_object_object_get(Jobj, "cbtGuest5GWifiIid"); // 5G Iid
-		for(iidIdx=0;iidIdx<6;iidIdx++){
-			guest5GSecIid.idx[iidIdx] = json_object_get_int(json_object_array_get_idx(iidArray, iidIdx));
-			if(guest5GSecIid.idx[iidIdx] != 0)
-				guest5GSecIid.level = iidIdx+1;
-		}
-	
-		if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_ACCESS_POINT_SEC, &guestSecIid, &guestSecObj)) != ZCFG_SUCCESS) {
-			return ret;
-		}
-		if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_ACCESS_POINT_SEC, &guest5GSecIid, &guest5GSecObj)) != ZCFG_SUCCESS) {
-			return ret;
-		}
-	
-		if(secMode == SLIDER_POS_NONE){
-			json_object_object_add(guestSecObj, "ModeEnabled", json_object_new_string("None"));
-			json_object_object_add(guest5GSecObj, "ModeEnabled", json_object_new_string("None"));
-		}
-		else if(secMode == SLIDER_POS_BASIC)
-		{
-			if (!strcmp(wep,"128bit"))
-			{
-				json_object_object_add(guestSecObj, "ModeEnabled", json_object_new_string("WEP-128"));
-				json_object_object_add(guestSecObj, "X_ZYXEL_WepModeSelect", json_object_new_string("WEP-128"));
-				json_object_object_add(guest5GSecObj, "ModeEnabled", json_object_new_string("WEP-128"));
-				json_object_object_add(guest5GSecObj, "X_ZYXEL_WepModeSelect", json_object_new_string("WEP-128"));
-			}
-			else
-			{
-				json_object_object_add(guestSecObj, "ModeEnabled", json_object_new_string("WEP-64"));
-				json_object_object_add(guestSecObj, "X_ZYXEL_WepModeSelect", json_object_new_string("WEP-64"));
-				json_object_object_add(guest5GSecObj, "ModeEnabled", json_object_new_string("WEP-64"));
-				json_object_object_add(guest5GSecObj, "X_ZYXEL_WepModeSelect", json_object_new_string("WEP-64"));
-			}
-		
-			json_object_object_add(guestSecObj, "X_ZYXEL_WEPAuthentication", json_object_new_string("None"));
-			json_object_object_add(guestSecObj, "X_ZYXEL_WEPEncryption", json_object_new_string("WEPEncryption"));
-			json_object_object_add(guestSecObj, "X_ZYXEL_AutoGenWepKey", json_object_new_boolean(X_ZYXEL_AutoGenWepKey));
-			json_object_object_add(guest5GSecObj, "X_ZYXEL_WEPAuthentication", json_object_new_string("None"));
-			json_object_object_add(guest5GSecObj, "X_ZYXEL_WEPEncryption", json_object_new_string("WEPEncryption"));
-			json_object_object_add(guest5GSecObj, "X_ZYXEL_AutoGenWepKey", json_object_new_boolean(X_ZYXEL_AutoGenWepKey));
-		
-			if(X_ZYXEL_AutoGenWepKey)
-			{
-				json_object_object_add(guestSecObj, "X_ZYXEL_DefaultKeyID", json_object_new_int(1));
-				json_object_object_add(guest5GSecObj, "X_ZYXEL_DefaultKeyID", json_object_new_int(1));
-			
-				if (!strcmp(wep,"128bit"))
-				{
-					X_ZYXEL_Auto_WepKey26 = json_object_get_string(json_object_object_get(guestSecObj, "X_ZYXEL_Auto_WepKey26"));
-					json_object_object_add(guestSecObj, "WEPKey", json_object_new_string(X_ZYXEL_Auto_WepKey26));
-					X_ZYXEL_Auto_WepKey26 = json_object_get_string(json_object_object_get(guest5GSecObj, "X_ZYXEL_Auto_WepKey26"));
-					json_object_object_add(guest5GSecObj, "WEPKey", json_object_new_string(X_ZYXEL_Auto_WepKey26));
-				}
-				else
-				{
-					X_ZYXEL_Auto_WepKey10 = json_object_get_string(json_object_object_get(guestSecObj, "X_ZYXEL_Auto_WepKey10"));
-					json_object_object_add(guestSecObj, "WEPKey", json_object_new_string(X_ZYXEL_Auto_WepKey10));
-					X_ZYXEL_Auto_WepKey10 = json_object_get_string(json_object_object_get(guest5GSecObj, "X_ZYXEL_Auto_WepKey10"));
-					json_object_object_add(guest5GSecObj, "WEPKey", json_object_new_string(X_ZYXEL_Auto_WepKey10));
-				}
-			}
-			else
-			{
-				if (!strcmp(wep,"128bit"))
-				{
-					json_object_object_add(guestSecObj, "WEPKey", json_object_new_string(WEPKey));
-					json_object_object_add(guestSecObj, "X_ZYXEL_WEPKey2", json_object_new_string(X_ZYXEL_WEPKey2));
-					json_object_object_add(guestSecObj, "X_ZYXEL_WEPKey3", json_object_new_string(X_ZYXEL_WEPKey3));
-					json_object_object_add(guestSecObj, "X_ZYXEL_WEPKey4", json_object_new_string(X_ZYXEL_WEPKey4));
-					json_object_object_add(guest5GSecObj, "WEPKey", json_object_new_string(WEPKey));
-					json_object_object_add(guest5GSecObj, "X_ZYXEL_WEPKey2", json_object_new_string(X_ZYXEL_WEPKey2));
-					json_object_object_add(guest5GSecObj, "X_ZYXEL_WEPKey3", json_object_new_string(X_ZYXEL_WEPKey3));
-					json_object_object_add(guest5GSecObj, "X_ZYXEL_WEPKey4", json_object_new_string(X_ZYXEL_WEPKey4));
-				}
-				else
-				{
-					json_object_object_add(guestSecObj, "X_ZYXEL_WEP64Key1", json_object_new_string(X_ZYXEL_WEP64Key1));
-					json_object_object_add(guestSecObj, "X_ZYXEL_WEP64Key2", json_object_new_string(X_ZYXEL_WEP64Key2));
-					json_object_object_add(guestSecObj, "X_ZYXEL_WEP64Key3", json_object_new_string(X_ZYXEL_WEP64Key3));
-					json_object_object_add(guestSecObj, "X_ZYXEL_WEP64Key4", json_object_new_string(X_ZYXEL_WEP64Key4));
-					json_object_object_add(guest5GSecObj, "X_ZYXEL_WEP64Key1", json_object_new_string(X_ZYXEL_WEP64Key1));
-					json_object_object_add(guest5GSecObj, "X_ZYXEL_WEP64Key2", json_object_new_string(X_ZYXEL_WEP64Key2));
-					json_object_object_add(guest5GSecObj, "X_ZYXEL_WEP64Key3", json_object_new_string(X_ZYXEL_WEP64Key3));
-					json_object_object_add(guest5GSecObj, "X_ZYXEL_WEP64Key4", json_object_new_string(X_ZYXEL_WEP64Key4));
-				}
-			
-				json_object_object_add(guestSecObj, "wepid", json_object_new_string(wepid));
-				json_object_object_add(guest5GSecObj, "wepid", json_object_new_string(wepid));
-			
-				if(strlen(wepid) == 0){
-					json_object_object_add(guestSecObj, "X_ZYXEL_DefaultKeyID", json_object_new_int(1));
-					json_object_object_add(guest5GSecObj, "X_ZYXEL_DefaultKeyID", json_object_new_int(1));
-				}
-				else
-				{
-					json_object_object_add(guestSecObj, "X_ZYXEL_DefaultKeyID", json_object_new_int(wepid[3]-'0'));
-					json_object_object_add(guest5GSecObj, "X_ZYXEL_DefaultKeyID", json_object_new_int(wepid[3]-'0'));
-					//The value of wepid[3] is 1~4 but character, so it needs to be changed to number
-					if(wepid[3]-'0' <= 0 || wepid[3]-'0' > 4){
-						json_object_object_add(guestSecObj, "X_ZYXEL_DefaultKeyID", json_object_new_int(1));
-						json_object_object_add(guest5GSecObj, "X_ZYXEL_DefaultKeyID", json_object_new_int(1));
-					}
-				}
-			}
-		}
-		else if(secMode == SLIDER_POS_MORESECURE)
-		{
-			if(!strcmp(wpaMode,"wpa2psk") || !strcmp(wpaMode,"wpapsk") || !strcmp(wpaMode,"wpawpa2psk"))
-			{
-				if(!strcmp(wpaMode,"wpa2psk")){
-					json_object_object_add(guestSecObj, "ModeEnabled", json_object_new_string("WPA2-Personal"));
-					json_object_object_add(guest5GSecObj, "ModeEnabled", json_object_new_string("WPA2-Personal"));
-				}
-				else if(!strcmp(wpaMode,"wpapsk")){
-					json_object_object_add(guestSecObj, "ModeEnabled", json_object_new_string("WPA-Personal"));
-					json_object_object_add(guest5GSecObj, "ModeEnabled", json_object_new_string("WPA-Personal"));
-				}
-				else{
-					json_object_object_add(guestSecObj, "ModeEnabled", json_object_new_string("WPA-WPA2-Personal"));
-					json_object_object_add(guest5GSecObj, "ModeEnabled", json_object_new_string("WPA-WPA2-Personal"));
-				}
-
-				// CBT guest WiFi security mode is the same with WiFi security mode
-				if(cbtWifiConfig){
-
-					IID_INIT(guiObjIid);
-					if(zcfgFeObjJsonGetWithoutUpdate(RDM_OID_GUI_CUSTOMIZATION, &guiObjIid, &guiCustObj) == ZCFG_SUCCESS){
-						cbtGuestWifiNumber = json_object_get_int(json_object_object_get(guiCustObj, "CbtGuestWifi"));
-						free(guiCustObj);
-					}else{
-						zcfgLog(ZCFG_LOG_ERR, "%s: fail to get RDM_OID_GUI_CUSTOMIZATION\n", __FUNCTION__);
-						printf("%s: fail to get RDM_OID_GUI_CUSTOMIZATION\n", __FUNCTION__);
-						cbtGuestWifiNumber = 1; // set 1 when get fail
-					}
-
-					guestSecTmpIid.idx[0] = cbtGuestWifiNumber + 1;
-					guest5GSecTmpIid.idx[0] = cbtGuestWifiNumber + 5;
-
-					for(iidIdx = 1; iidIdx < 6; iidIdx++){
-						guestSecTmpIid.idx[iidIdx] = guestSecIid.idx[iidIdx];
-						guest5GSecTmpIid.idx[iidIdx] = guest5GSecIid.idx[iidIdx];
-					}
-					guestSecTmpIid.level = guestSecIid.level;
-					guest5GSecTmpIid.level = guest5GSecIid.level;
-
-					if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_ACCESS_POINT_SEC, &guestSecTmpIid, &guestSecTmpObj)) != ZCFG_SUCCESS)
-						return ret;
-
-					if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_ACCESS_POINT_SEC, &guest5GSecTmpIid, &guest5GSecTmpObj)) != ZCFG_SUCCESS)
-						return ret;
-
-					if(!strcmp(wpaMode,"wpa2psk")){
-						json_object_object_add(guestSecTmpObj, "ModeEnabled", json_object_new_string("WPA2-Personal"));
-						json_object_object_add(guest5GSecTmpObj, "ModeEnabled", json_object_new_string("WPA2-Personal"));
-					}
-					else if(!strcmp(wpaMode,"wpapsk")){
-						json_object_object_add(guestSecTmpObj, "ModeEnabled", json_object_new_string("WPA-Personal"));
-						json_object_object_add(guest5GSecTmpObj, "ModeEnabled", json_object_new_string("WPA-Personal"));
-					}
-					else{
-						json_object_object_add(guestSecTmpObj, "ModeEnabled", json_object_new_string("WPA-WPA2-Personal"));
-						json_object_object_add(guest5GSecTmpObj, "ModeEnabled", json_object_new_string("WPA-WPA2-Personal"));
-					}
-				}
-				
-				X_ZYXEL_Auto_PSK = json_object_get_string(json_object_object_get(guestSecObj, "X_ZYXEL_Auto_PSK"));
-				if(strcmp(X_ZYXEL_Auto_PSK, guestPskValue) == 0) // The same string means using auto generate psk
-				{
-					// X_ZYXEL_AutoGenPSK
-					X_ZYXEL_AutoGenPSK = true;
-
-					// 2.4G KeyPassphrase and PreSharedKey
-					json_object_object_add(guestSecObj, "X_ZYXEL_AutoGenPSK", json_object_new_boolean(X_ZYXEL_AutoGenPSK));
-					json_object_object_add(guestSecObj, "KeyPassphrase", json_object_new_string(X_ZYXEL_Auto_PSK));
-					json_object_object_add(guestSecObj, "PreSharedKey", json_object_new_string(""));
-
-					// 5G KeyPassphrase and PreSharedKey
-					//if(guestSameSsid == true){
-						json_object_object_add(guest5GSecObj, "X_ZYXEL_AutoGenPSK", json_object_new_boolean(X_ZYXEL_AutoGenPSK));
-						json_object_object_add(guest5GSecObj, "KeyPassphrase", json_object_new_string(X_ZYXEL_Auto_PSK));
-						json_object_object_add(guest5GSecObj, "PreSharedKey", json_object_new_string(""));
-					/*}else{ // 20170720 Max Noted: remove CBT 5G wifi password add "-5G" at the end of 2.4G password
-						X_ZYXEL_AutoGenPSK = false;
-
-						json_object_object_add(guest5GSecObj, "X_ZYXEL_AutoGenPSK", json_object_new_boolean(X_ZYXEL_AutoGenPSK));
-						sprintf(tmpPsk, "%s%s", X_ZYXEL_Auto_PSK, "-5G");
-						json_object_object_add(guest5GSecObj, "KeyPassphrase", json_object_new_string(tmpPsk));
-					}*/
-				}else {
-					// X_ZYXEL_AutoGenPSK
-					X_ZYXEL_AutoGenPSK = false;
-					json_object_object_add(guestSecObj, "X_ZYXEL_AutoGenPSK", json_object_new_boolean(X_ZYXEL_AutoGenPSK));
-					json_object_object_add(guest5GSecObj, "X_ZYXEL_AutoGenPSK", json_object_new_boolean(X_ZYXEL_AutoGenPSK));
-
-					if(strlen(guestPskValue) == 64) {
-						psk_lowercase = (char*)malloc(strlen(guestPskValue)+1);
-						memset(psk_lowercase, 0, strlen(guestPskValue)+1);
-						stolower(guestPskValue, psk_lowercase, strlen(guestPskValue));
-						json_object_object_add(guestSecObj, "KeyPassphrase", json_object_new_string(""));
-						json_object_object_add(guestSecObj, "PreSharedKey", json_object_new_string(psk_lowercase));
-						json_object_object_add(guest5GSecObj, "KeyPassphrase", json_object_new_string(""));
-						json_object_object_add(guest5GSecObj, "PreSharedKey", json_object_new_string(psk_lowercase));
-					}
-					else {
-						// 2.4G PSK
-						json_object_object_add(guestSecObj, "KeyPassphrase", json_object_new_string(guestPskValue));
-						
-						// 5G PSK
-						//if(guestSameSsid == true){
-							json_object_object_add(guest5GSecObj, "KeyPassphrase", json_object_new_string(guestPskValue));
-						/*}else{ // 20170720 Max Noted: remove CBT 5G wifi password add "-5G" at the end of 2.4G password
-							sprintf(tmpPsk, "%s%s", guestPskValue, "-5G");
-							json_object_object_add(guest5GSecObj, "KeyPassphrase", json_object_new_string(tmpPsk));
-						}*/
-					}
-				}
-			}
-			else if(!strcmp(wpaMode,"wpa2") || !strcmp(wpaMode,"wpa") || !strcmp(wpaMode,"wpawpa"))
-			{
-				if(!strcmp(wpaMode,"wpa2"))
-				{
-					json_object_object_add(guestSecObj, "ModeEnabled", json_object_new_string("WPA2-Enterprise"));
-					json_object_object_add(guestSecObj, "X_ZYXEL_Preauth", json_object_new_boolean(X_ZYXEL_Preauth));
-					json_object_object_add(guestSecObj, "X_ZYXEL_ReauthInterval", json_object_new_int(X_ZYXEL_ReauthInterval));
-					json_object_object_add(guest5GSecObj, "ModeEnabled", json_object_new_string("WPA2-Enterprise"));
-					json_object_object_add(guest5GSecObj, "X_ZYXEL_Preauth", json_object_new_boolean(X_ZYXEL_Preauth));
-					json_object_object_add(guest5GSecObj, "X_ZYXEL_ReauthInterval", json_object_new_int(X_ZYXEL_ReauthInterval));
-				}
-				else if(!strcmp(wpaMode,"wpa")){
-					json_object_object_add(guestSecObj, "ModeEnabled", json_object_new_string("WPA-Enterprise"));
-					json_object_object_add(guest5GSecObj, "ModeEnabled", json_object_new_string("WPA-Enterprise"));
-				}
-				else
-				{
-					json_object_object_add(guestSecObj, "ModeEnabled", json_object_new_string("WPA-WPA2-Enterprise"));
-					json_object_object_add(guestSecObj, "X_ZYXEL_Preauth", json_object_new_boolean(X_ZYXEL_Preauth));
-					json_object_object_add(guestSecObj, "X_ZYXEL_ReauthInterval", json_object_new_int(X_ZYXEL_ReauthInterval));
-					json_object_object_add(guest5GSecObj, "ModeEnabled", json_object_new_string("WPA-WPA2-Enterprise"));
-					json_object_object_add(guest5GSecObj, "X_ZYXEL_Preauth", json_object_new_boolean(X_ZYXEL_Preauth));
-					json_object_object_add(guest5GSecObj, "X_ZYXEL_ReauthInterval", json_object_new_int(X_ZYXEL_ReauthInterval));
-				}
-			
-				json_object_object_add(guestSecObj, "RadiusServerIPAddr", json_object_new_string(RadiusServerIPAddr));
-				json_object_object_add(guestSecObj, "RadiusServerPort", json_object_new_int(RadiusServerPort));
-				json_object_object_add(guestSecObj, "RadiusSecret", json_object_new_string(RadiusSecret));
-				json_object_object_add(guest5GSecObj, "RadiusServerIPAddr", json_object_new_string(RadiusServerIPAddr));
-				json_object_object_add(guest5GSecObj, "RadiusServerPort", json_object_new_int(RadiusServerPort));
-				json_object_object_add(guest5GSecObj, "RadiusSecret", json_object_new_string(RadiusSecret));
-			}
-		
-			if(!strcmp(encryp, "tkip")){
-				json_object_object_add(guestSecObj, "X_ZYXEL_Encryption", json_object_new_string("tkip"));
-				json_object_object_add(guest5GSecObj, "X_ZYXEL_Encryption", json_object_new_string("tkip"));
-			}
-			else if(!strcmp(encryp, "aes")){
-				json_object_object_add(guestSecObj, "X_ZYXEL_Encryption", json_object_new_string("aes"));
-				json_object_object_add(guest5GSecObj, "X_ZYXEL_Encryption", json_object_new_string("aes"));
-			}
-			else{
-				json_object_object_add(guestSecObj, "X_ZYXEL_Encryption", json_object_new_string("tkipaes"));
-				json_object_object_add(guest5GSecObj, "X_ZYXEL_Encryption", json_object_new_string("tkipaes"));
-			}
-		
-			json_object_object_add(guestSecObj, "RekeyingInterval", json_object_new_int(RekeyingInterval));
-			json_object_object_add(guest5GSecObj, "RekeyingInterval", json_object_new_int(RekeyingInterval));
-				
-		}
-	}else{ // general wireless
-#endif
 	// Index: from dalcmd
 	if(json_object_object_get(Jobj, "Index")){
 		wifiSecIid.idx[0] = json_object_get_int(json_object_object_get(Jobj, "Index"));
@@ -1456,9 +897,6 @@
 	   
 	}
 #endif //WIFI_ONESSID_SECURITY_SYNC
-#ifdef CBT_CUSTOMIZATION // 20170427 Max Add
-	}	
-#endif
 	return ret;
 }
 
@@ -1639,10 +1077,6 @@
 	
 	/*if((ret = editWifiApWpsObject(Jobj)) != ZCFG_SUCCESS)
 		goto dalwlan_edit_fail;*/
-
-#ifdef CBT_CUSTOMIZATION // 20170525 Max Add
-	if(cbtGuestWifiConfig == false){ // for wireless general
-#endif
 	
 	if((ret = editWifiApObject(Jobj)) != ZCFG_SUCCESS)
 		goto dalwlan_edit_fail;
@@ -1661,9 +1095,6 @@
 			goto dalwlan_edit_fail;
 	}
 	
-#ifdef CBT_CUSTOMIZATION // 20170525 Max Add
-	}
-#endif
 	setAllWlObjects(Jobj);
 
 dalwlan_edit_fail:
Index: libzcfg_fe_dal-1.0/network/wireless/zcfg_fe_dal_wifi_others.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/network/wireless/zcfg_fe_dal_wifi_others.c	2017-09-21 14:31:50.076029685 +0800
+++ libzcfg_fe_dal-1.0/network/wireless/zcfg_fe_dal_wifi_others.c	2017-09-21 14:40:43.964018368 +0800
@@ -50,26 +50,10 @@
 struct json_object *wifiRadioOthersObj = NULL;
 struct json_object *wifiApWpsOthersObj = NULL;
 struct json_object *wifiSecOthersObj = NULL;
-#ifdef CBT_CUSTOMIZATION
-struct json_object *cbtWifiRadioAdvObj = NULL;
-struct json_object *cbt5GWifiRadioAdvObj = NULL;
-struct json_object *cbtWifiApWpsAdvObj = NULL;
-struct json_object *cbt5GWifiApWpsAdvObj = NULL;
-struct json_object *cbtWifiApAdvObj = NULL;
-struct json_object *cbt5GWifiApAdvObj = NULL;
-#endif
 
 objIndex_t wifiRadioOthersIid = {0};
 objIndex_t wifiApWpsOthersIid = {0};
 objIndex_t wifiSecOthersIid = {0};
-#ifdef CBT_CUSTOMIZATION
-objIndex_t cbtWifiRadioAdvIid = {0};
-objIndex_t cbt5GWifiRadioAdvIid = {0};
-objIndex_t cbtWifiApWpsAdvIid = {0};
-objIndex_t cbt5GWifiApWpsAdvIid = {0};
-objIndex_t cbtWifiApAdvIid = {0};
-objIndex_t cbt5GWifiApAdvIid = {0};
-#endif
 
 //WiFi Radio
 unsigned int wlRtsThrshld;
@@ -98,38 +82,6 @@
 bool atf;
 const char* InActiveChan = NULL;
 const char* singleSKU = NULL;
-#ifdef CBT_CUSTOMIZATION
-bool cbtAdvSetting;
-bool cbtWifiHideSsid;
-bool cbt5GWifiHideSsid;
-int cbtWifiChannel;
-int cbt5GWifiChannel;
-const char* cbtWifiMode;
-const char* cbt5GWifiMode;
-unsigned int cbtWifiRtsThrshld;
-unsigned int cbt5GWifiRtsThrshld;
-unsigned int cbtWifiFrgThrshld;
-unsigned int cbt5GWifiFrgThrshld;
-unsigned int cbtWifiTxPwrPcnt;
-unsigned int cbt5GWifiTxPwrPcnt;
-unsigned int cbtWifiBcnIntvl;
-unsigned int cbt5GWifiBcnIntvl;
-unsigned int cbtWifiDtmIntvl;
-unsigned int cbt5GWifiDtmIntvl;
-const char* cbtWifiProtect;
-const char* cbt5GWifiProtect;
-const char* cbtWifiPreamble;
-const char* cbt5GWifiPreamble;
-bool cbtWifiWps;
-bool cbt5GWifiWps;
-bool cbtWifiObssCox;
-bool cbt5GWifiObssCox;
-bool cbtWifiWmm;
-bool cbt5GWifiWmm;
-bool cbtWifiWmmApsd;
-bool cbt5GWifiWmmApsd;
-#endif
-
 
 void zcfgFeDalShowWifiOthers(struct json_object *Jarray){
 	int i, len = 0;
@@ -240,39 +192,10 @@
 
 zcfgRet_t setAllWlOthersObjects(struct json_object *Jobj){
 	zcfgRet_t ret = ZCFG_SUCCESS;
-
-#ifdef CBT_CUSTOMIZATION
-	if(cbtAdvSetting == true){
-
-		// 2.4G set data model
-		if(cbtWifiApWpsAdvObj)
-			zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_ACCESS_POINT_WPS, &cbtWifiApWpsAdvIid, cbtWifiApWpsAdvObj, NULL);
-
-		if(cbtWifiApAdvObj)
-			zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_ACCESS_POINT, &cbtWifiApAdvIid, cbtWifiApAdvObj, NULL);
-
-		if(cbtWifiRadioAdvObj)
-			zcfgFeObjJsonSet(RDM_OID_WIFI_RADIO, &cbtWifiRadioAdvIid, cbtWifiRadioAdvObj, NULL);
-
-		// 5G set data model
-		if(cbt5GWifiApWpsAdvObj)
-			zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_ACCESS_POINT_WPS, &cbt5GWifiApWpsAdvIid, cbt5GWifiApWpsAdvObj, NULL);
-
-		if(cbt5GWifiApAdvObj)
-			zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_ACCESS_POINT, &cbt5GWifiApAdvIid, cbt5GWifiApAdvObj, NULL);
-
-		if(cbt5GWifiRadioAdvObj)
-			zcfgFeObjJsonSet(RDM_OID_WIFI_RADIO, &cbt5GWifiRadioAdvIid, cbt5GWifiRadioAdvObj, NULL);
-	}else{
-#endif
 	
 	if(wifiApWpsOthersObj) zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_ACCESS_POINT_WPS, &wifiApWpsOthersIid, wifiApWpsOthersObj, NULL);
 	if(wifiSecOthersObj) zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_ACCESS_POINT_SEC, &wifiSecOthersIid, wifiSecOthersObj, NULL);
 	if(wifiRadioOthersObj) zcfgFeObjJsonBlockedSet(RDM_OID_WIFI_RADIO, &wifiRadioOthersIid, wifiRadioOthersObj, NULL);
-
-#ifdef CBT_CUSTOMIZATION
-	}
-#endif
 	
 	return ret;
 }
@@ -284,68 +207,10 @@
 	if(wifiRadioOthersObj) json_object_put(wifiRadioOthersObj); 
 	if(wifiApWpsOthersObj) json_object_put(wifiApWpsOthersObj);
 	if(wifiSecOthersObj) json_object_put(wifiSecOthersObj);
-
-#ifdef CBT_CUSTOMIZATION
-	if(cbtWifiRadioAdvObj) json_object_put(cbtWifiRadioAdvObj);
-	if(cbt5GWifiRadioAdvObj) json_object_put(cbt5GWifiRadioAdvObj);
-	if(cbtWifiApWpsAdvObj) json_object_put(cbtWifiApWpsAdvObj);
-	if(cbt5GWifiApWpsAdvObj) json_object_put(cbt5GWifiApWpsAdvObj);
-	if(cbtWifiApAdvObj) json_object_put(cbtWifiApAdvObj);
-	if(cbt5GWifiApAdvObj) json_object_put(cbt5GWifiApAdvObj);
-#endif
 	
 	return ret;
 }
 
-#ifdef CBT_CUSTOMIZATION
-void cbtGetBasicWlAdvInfo(struct json_object *Jobj){
-	// Hide SSID
-	cbtWifiHideSsid = json_object_get_boolean(json_object_object_get(Jobj, "cbtWifiHideSsid"));
-	cbt5GWifiHideSsid = json_object_get_boolean(json_object_object_get(Jobj, "cbt5GWifiHideSsid"));
-	// Channel
-	cbtWifiChannel = json_object_get_int(json_object_object_get(Jobj, "cbtWifiChannel"));
-	cbt5GWifiChannel = json_object_get_int(json_object_object_get(Jobj, "cbt5GWifiChannel"));
-	// 802.11 Mode
-	cbtWifiMode = json_object_get_string(json_object_object_get(Jobj, "cbtWifiMode"));
-	cbt5GWifiMode = json_object_get_string(json_object_object_get(Jobj, "cbt5GWifiMode"));
-	// RTS/CTS Threshold
-	cbtWifiRtsThrshld = json_object_get_int(json_object_object_get(Jobj, "cbtWifiRtsThreshold"));
-	cbt5GWifiRtsThrshld = json_object_get_int(json_object_object_get(Jobj, "cbt5GWifiRtsThreshold"));
-	// Fragmentation Threshold
-	cbtWifiFrgThrshld = json_object_get_int(json_object_object_get(Jobj, "cbtWifiFrgThreshold"));
-	cbt5GWifiFrgThrshld = json_object_get_int(json_object_object_get(Jobj, "cbt5GWifiFrgThreshold"));
-	// Output Power
-	cbtWifiTxPwrPcnt = json_object_get_int(json_object_object_get(Jobj, "cbtWifiTxPwrPcnt"));
-	cbt5GWifiTxPwrPcnt = json_object_get_int(json_object_object_get(Jobj, "cbt5GWifiTxPwrPcnt"));
-	// Beacon Interval
-	cbtWifiBcnIntvl = json_object_get_int(json_object_object_get(Jobj, "cbtWifiBcnIntvl"));
-	cbt5GWifiBcnIntvl = json_object_get_int(json_object_object_get(Jobj, "cbt5GWifiBcnIntvl"));
-	// DTIM Interval
-	cbtWifiDtmIntvl = json_object_get_int(json_object_object_get(Jobj, "cbtWifiDtmIntvl"));
-	cbt5GWifiDtmIntvl = json_object_get_int(json_object_object_get(Jobj, "cbt5GWifiDtmIntvl"));
-	// 802.11 Protection
-	cbtWifiProtect = json_object_get_string(json_object_object_get(Jobj, "cbtWifiProtect"));
-	cbt5GWifiProtect = json_object_get_string(json_object_object_get(Jobj, "cbt5GWifiProtect"));
-	// Preamble
-	cbtWifiPreamble = json_object_get_string(json_object_object_get(Jobj, "cbtWifiPreamble"));
-	cbt5GWifiPreamble = json_object_get_string(json_object_object_get(Jobj, "cbt5GWifiPreamble"));
-	// WPS
-	cbtWifiWps = json_object_get_boolean(json_object_object_get(Jobj, "cbtWifiWps"));
-	cbt5GWifiWps = json_object_get_boolean(json_object_object_get(Jobj, "cbt5GWifiWps"));
-	// OBSS Coexistence
-	cbtWifiObssCox = json_object_get_boolean(json_object_object_get(Jobj, "cbtWifiObssCox"));
-	cbt5GWifiObssCox = json_object_get_boolean(json_object_object_get(Jobj, "cbt5GWifiObssCox"));
-	// WMM
-	cbtWifiWmm = json_object_get_boolean(json_object_object_get(Jobj, "cbtWifiWmm"));
-	cbt5GWifiWmm = json_object_get_boolean(json_object_object_get(Jobj, "cbt5GWifiWmm"));
-	// WMM Automatic Power Save Delivery
-	cbtWifiWmmApsd = json_object_get_boolean(json_object_object_get(Jobj, "cbtWifiWmmApsd"));
-	cbt5GWifiWmmApsd = json_object_get_boolean(json_object_object_get(Jobj, "cbt5GWifiWmmApsd"));
-
-	return;
-}
-#endif
-
 void getBasicWlOthersInfo(struct json_object *Jobj){
 	//WiFi Radio
 	wlRtsThrshld = json_object_get_int(json_object_object_get(Jobj, "wlRtsThrshld"));
@@ -383,108 +248,12 @@
 	wifiRadioOthersObj = NULL;
 	wifiApWpsOthersObj = NULL;
 	wifiSecOthersObj = NULL;
-#ifdef CBT_CUSTOMIZATION
-	cbtWifiRadioAdvObj = NULL;
-	cbt5GWifiRadioAdvObj = NULL;
-	cbtWifiApWpsAdvObj = NULL;
-	cbt5GWifiApWpsAdvObj = NULL;
-	cbtWifiApAdvObj = NULL;
-	cbt5GWifiApAdvObj = NULL;
-#endif
 	
 	IID_INIT(wifiRadioOthersIid);
 	IID_INIT(wifiApWpsOthersIid);
 	IID_INIT(wifiSecOthersIid);
-#ifdef CBT_CUSTOMIZATION
-	IID_INIT(cbtWifiRadioAdvIid);
-	IID_INIT(cbt5GWifiRadioAdvIid);
-	IID_INIT(cbtWifiApWpsAdvIid);
-	IID_INIT(cbt5GWifiApWpsAdvIid);
-	IID_INIT(cbtWifiApAdvIid);
-	IID_INIT(cbt5GWifiApAdvIid);
-#endif
 }
 
-#ifdef CBT_CUSTOMIZATION
-zcfgRet_t cbtEditwifiRadioAdvObject(struct json_object *Jobj){
-
-	zcfgRet_t ret = ZCFG_SUCCESS;
-	struct json_object *iidArray = NULL;
-	uint8_t iidIdx = 0;
-
-	// 2.4G Iid
-	iidArray = json_object_object_get(Jobj, "cbtWifiAdvRadIid");
-	for(iidIdx = 0; iidIdx < 6; iidIdx++){
-		cbtWifiRadioAdvIid.idx[iidIdx] = json_object_get_int(json_object_array_get_idx(iidArray, iidIdx));
-		if(cbtWifiRadioAdvIid.idx[iidIdx] != 0)
-			cbtWifiRadioAdvIid.level = iidIdx + 1;
-	}
-	// 5G Iid
-	iidArray = json_object_object_get(Jobj, "cbt5GWifiAdvRadIid");
-	for(iidIdx = 0; iidIdx < 6; iidIdx++){
-		cbt5GWifiRadioAdvIid.idx[iidIdx] = json_object_get_int(json_object_array_get_idx(iidArray, iidIdx));
-		if(cbt5GWifiRadioAdvIid.idx[iidIdx] != 0)
-			cbt5GWifiRadioAdvIid.level = iidIdx + 1;
-	}
-
-	// 2.4G data
-	if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_RADIO, &cbtWifiRadioAdvIid, &cbtWifiRadioAdvObj)) != ZCFG_SUCCESS) {
-		return ret;
-	}
-
-	if(cbtWifiChannel == 0){
-		json_object_object_add(cbtWifiRadioAdvObj, "AutoChannelEnable", json_object_new_boolean(true));
-	}else{
-		json_object_object_add(cbtWifiRadioAdvObj, "AutoChannelEnable", json_object_new_boolean(false));
-		json_object_object_add(cbtWifiRadioAdvObj, "Channel", json_object_new_int(cbtWifiChannel));
-	}
-
-	json_object_object_add(cbtWifiRadioAdvObj, "X_ZYXEL_RTS_CTS_Threshold", json_object_new_int(cbtWifiRtsThrshld));
-	json_object_object_add(cbtWifiRadioAdvObj, "X_ZYXEL_Fragment_Threshold", json_object_new_int(cbtWifiFrgThrshld));
-	json_object_object_add(cbtWifiRadioAdvObj, "X_ZYXEL_Beacon_Interval", json_object_new_int(cbtWifiBcnIntvl));
-	json_object_object_add(cbtWifiRadioAdvObj, "X_ZYXEL_DTIM_Interval", json_object_new_int(cbtWifiDtmIntvl));
-	json_object_object_add(cbtWifiRadioAdvObj, "X_ZYXEL_Wireless_Mode", json_object_new_string(cbtWifiMode));
-	json_object_object_add(cbtWifiRadioAdvObj, "TransmitPower", json_object_new_int(cbtWifiTxPwrPcnt));
-
-	if(!strcmp(cbtWifiProtect, "off"))
-		json_object_object_add(cbtWifiRadioAdvObj, "X_ZYXEL_Protection", json_object_new_boolean(false));
-	else
-		json_object_object_add(cbtWifiRadioAdvObj, "X_ZYXEL_Protection", json_object_new_boolean(true));
-	
-	json_object_object_add(cbtWifiRadioAdvObj, "X_ZYXEL_Preamble", json_object_new_string(cbtWifiPreamble));
-	json_object_object_add(cbtWifiRadioAdvObj, "X_ZYXEL_OBSS_coex", json_object_new_boolean(cbtWifiObssCox));
-
-	// 5G data
-	if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_RADIO, &cbt5GWifiRadioAdvIid, &cbt5GWifiRadioAdvObj)) != ZCFG_SUCCESS) {
-		return ret;
-	}
-
-	if(cbt5GWifiChannel == 0){
-		json_object_object_add(cbt5GWifiRadioAdvObj, "AutoChannelEnable", json_object_new_boolean(true));
-	}else{
-		json_object_object_add(cbt5GWifiRadioAdvObj, "AutoChannelEnable", json_object_new_boolean(false));
-		json_object_object_add(cbt5GWifiRadioAdvObj, "Channel", json_object_new_int(cbt5GWifiChannel));
-	}
-
-	json_object_object_add(cbt5GWifiRadioAdvObj, "X_ZYXEL_RTS_CTS_Threshold", json_object_new_int(cbt5GWifiRtsThrshld));
-	json_object_object_add(cbt5GWifiRadioAdvObj, "X_ZYXEL_Fragment_Threshold", json_object_new_int(cbt5GWifiFrgThrshld));
-	json_object_object_add(cbt5GWifiRadioAdvObj, "X_ZYXEL_Beacon_Interval", json_object_new_int(cbt5GWifiBcnIntvl));
-	json_object_object_add(cbt5GWifiRadioAdvObj, "X_ZYXEL_DTIM_Interval", json_object_new_int(cbt5GWifiDtmIntvl));
-	json_object_object_add(cbt5GWifiRadioAdvObj, "X_ZYXEL_Wireless_Mode", json_object_new_string(cbt5GWifiMode));
-	json_object_object_add(cbt5GWifiRadioAdvObj, "TransmitPower", json_object_new_int(cbt5GWifiTxPwrPcnt));
-
-	if(!strcmp(cbt5GWifiProtect, "off"))
-		json_object_object_add(cbt5GWifiRadioAdvObj, "X_ZYXEL_Protection", json_object_new_boolean(false));
-	else
-		json_object_object_add(cbt5GWifiRadioAdvObj, "X_ZYXEL_Protection", json_object_new_boolean(true));
-
-	json_object_object_add(cbt5GWifiRadioAdvObj, "X_ZYXEL_Preamble", json_object_new_string(cbt5GWifiPreamble));
-	json_object_object_add(cbt5GWifiRadioAdvObj, "X_ZYXEL_OBSS_coex", json_object_new_boolean(cbt5GWifiObssCox));
-
-	return ret;
-}
-#endif
-
 zcfgRet_t editwifiRadioOthersObjects(struct json_object *Jobj){
 
 	zcfgRet_t ret = ZCFG_SUCCESS;
@@ -607,46 +376,6 @@
 	return ret;
 }
 
-#ifdef CBT_CUSTOMIZATION
-zcfgRet_t cbtEditWifiApWpsAdvObject(struct json_object *Jobj){
-
-	zcfgRet_t ret = ZCFG_SUCCESS;
-	struct json_object *iidArray = NULL;
-	uint8_t iidIdx = 0;
-
-	// 2.4G Iid
-	iidArray = json_object_object_get(Jobj, "cbtWifiAdvApIid");
-	for(iidIdx = 0; iidIdx < 6; iidIdx++){
-		cbtWifiApWpsAdvIid.idx[iidIdx] = json_object_get_int(json_object_array_get_idx(iidArray, iidIdx));
-		if(cbtWifiApWpsAdvIid.idx[iidIdx] != 0)
-			cbtWifiApWpsAdvIid.level = iidIdx + 1;
-	}
-	// 5G Iid
-	iidArray = json_object_object_get(Jobj, "cbt5GWifiAdvApIid");
-	for(iidIdx = 0; iidIdx < 6; iidIdx++){
-		cbt5GWifiApWpsAdvIid.idx[iidIdx] = json_object_get_int(json_object_array_get_idx(iidArray, iidIdx));
-		if(cbt5GWifiApWpsAdvIid.idx[iidIdx] != 0)
-			cbt5GWifiApWpsAdvIid.level = iidIdx + 1;
-	}
-
-	// 2.4G data
-	if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_ACCESS_POINT_WPS, &cbtWifiApWpsAdvIid, &cbtWifiApWpsAdvObj)) != ZCFG_SUCCESS) {
-		return ret;
-	}
-
-	json_object_object_add(cbtWifiApWpsAdvObj, "Enable", json_object_new_boolean(cbtWifiWps));
-
-	// 5G data
-	if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_ACCESS_POINT_WPS, &cbt5GWifiApWpsAdvIid, &cbt5GWifiApWpsAdvObj)) != ZCFG_SUCCESS) {
-		return ret;
-	}
-
-	json_object_object_add(cbt5GWifiApWpsAdvObj, "Enable", json_object_new_boolean(cbt5GWifiWps));
-
-	return ret;
-}
-#endif
-
 zcfgRet_t editWifiOthersApWpsObject(struct json_object *Jobj){
 
 	zcfgRet_t ret = ZCFG_SUCCESS;
@@ -666,58 +395,6 @@
 	return ret;
 }
 
-#ifdef CBT_CUSTOMIZATION
-zcfgRet_t cbtEditWifiApAdvObject(struct json_object *Jobj){
-
-	zcfgRet_t ret = ZCFG_SUCCESS;
-	struct json_object *iidArray = NULL;
-	uint8_t iidIdx = 0;
-
-	// 2.4G Iid
-	iidArray = json_object_object_get(Jobj, "cbtWifiAdvApIid");
-	for(iidIdx = 0; iidIdx < 6; iidIdx++){
-		cbtWifiApAdvIid.idx[iidIdx] = json_object_get_int(json_object_array_get_idx(iidArray, iidIdx));
-		if(cbtWifiApAdvIid.idx[iidIdx] != 0)
-			cbtWifiApAdvIid.level = iidIdx + 1;
-	}
-	// 5G Iid
-	iidArray = json_object_object_get(Jobj, "cbt5GWifiAdvApIid");
-	for(iidIdx = 0; iidIdx < 6; iidIdx++){
-		cbt5GWifiApAdvIid.idx[iidIdx] = json_object_get_int(json_object_array_get_idx(iidArray, iidIdx));
-		if(cbt5GWifiApAdvIid.idx[iidIdx] != 0)
-			cbt5GWifiApAdvIid.level = iidIdx + 1;
-	}
-
-	// 2.4G data
-	if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_ACCESS_POINT, &cbtWifiApAdvIid, &cbtWifiApAdvObj)) != ZCFG_SUCCESS) {
-		return ret;
-	}
-
-	if(cbtWifiHideSsid)
-		json_object_object_add(cbtWifiApAdvObj, "SSIDAdvertisementEnabled", json_object_new_boolean(false));
-	else
-		json_object_object_add(cbtWifiApAdvObj, "SSIDAdvertisementEnabled", json_object_new_boolean(true));
-
-	json_object_object_add(cbtWifiApAdvObj, "WMMEnable", json_object_new_boolean(cbtWifiWmm));
-	json_object_object_add(cbtWifiApAdvObj, "UAPSDEnable", json_object_new_boolean(cbtWifiWmmApsd));
-
-	// 5G data
-	if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_ACCESS_POINT, &cbt5GWifiApAdvIid, &cbt5GWifiApAdvObj)) != ZCFG_SUCCESS) {
-		return ret;
-	}
-
-	if(cbt5GWifiHideSsid)
-		json_object_object_add(cbt5GWifiApAdvObj, "SSIDAdvertisementEnabled", json_object_new_boolean(false));
-	else
-		json_object_object_add(cbt5GWifiApAdvObj, "SSIDAdvertisementEnabled", json_object_new_boolean(true));
-
-	json_object_object_add(cbt5GWifiApAdvObj, "WMMEnable", json_object_new_boolean(cbt5GWifiWmm));
-	json_object_object_add(cbt5GWifiApAdvObj, "UAPSDEnable", json_object_new_boolean(cbt5GWifiWmmApsd));
-
-	return ret;
-}
-#endif
-
 zcfgRet_t zcfgFeDalWifiOthersEdit(struct json_object *Jobj, char *replyMsg){
 	zcfgRet_t ret = ZCFG_SUCCESS;
 	printf("%s %s %d \n",json_object_to_json_string(Jobj),__func__,__LINE__);
@@ -725,35 +402,8 @@
 	
 	initGlobalWlOthersObjects();
 
-#ifdef CBT_CUSTOMIZATION
-	cbtAdvSetting = json_object_get_boolean(json_object_object_get(Jobj, "cbtAdvSetting"));
-	if(cbtAdvSetting == true)
-		cbtGetBasicWlAdvInfo(Jobj);
-	else{
-#endif
-		getBasicWlOthersInfo(Jobj);
-#ifdef CBT_CUSTOMIZATION
-	}
-#endif
-	
-#ifdef CBT_CUSTOMIZATION
-	if(cbtAdvSetting == true){
-		if((ret = cbtEditwifiRadioAdvObject(Jobj)) != ZCFG_SUCCESS){
-			printf("cbtEditwifiRadioAdvObject fail\n", __LINE__);
-			goto dalwlan_edit_fail;
-		}
-
-		if((ret = cbtEditWifiApWpsAdvObject(Jobj)) != ZCFG_SUCCESS){
-			printf("cbtEditWifiApWpsAdvObject fail\n", __LINE__);
-			goto dalwlan_edit_fail;
-		}
-
-		if((ret = cbtEditWifiApAdvObject(Jobj)) != ZCFG_SUCCESS){
-			printf("cbtEditWifiApAdvObject fail\n", __LINE__);
-			goto dalwlan_edit_fail;
-		}
-	}else{
-#endif	
+	getBasicWlOthersInfo(Jobj);
+	
 	if((ret = editWifiOthersApWpsObject(Jobj)) != ZCFG_SUCCESS){
 		printf("editWifiOthersApWpsObject fail", __LINE__);
 		goto dalwlan_edit_fail;
@@ -769,10 +419,7 @@
 		printf("editwifiRadioOthersObjects fail", __LINE__);
 		goto dalwlan_edit_fail;
 	}
-	
-#ifdef CBT_CUSTOMIZATION
-	}
-#endif		
+			
 	setAllWlOthersObjects(Jobj);
 
 dalwlan_edit_fail:
Index: libzcfg_fe_dal-1.0/zcfg_fe_dal.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/zcfg_fe_dal.c	2017-09-21 14:31:50.356029679 +0800
+++ libzcfg_fe_dal-1.0/zcfg_fe_dal.c	2017-09-21 14:34:59.256025675 +0800
@@ -96,6 +96,10 @@
 extern dal_param_t USER_ACCOUNT_param[];
 extern dal_param_t NETWORK_MAP_param[];
 extern dal_param_t SYS_LOG_param[];
+#ifdef CBT_CUSTOMIZATION // 20170711 Max Add
+extern dal_param_t WIFI_CBT_param[];
+extern dal_param_t WIFI_ADV_CBT_param[];
+#endif
 extern zcfgRet_t zcfgFeDalWan(const char *method, struct json_object *Jobj, struct json_object *Jarray, char *replyMsg);
 extern zcfgRet_t zcfgFeDalMgmt(const char *method, struct json_object *Jobj, struct json_object *Jarray, char *replyMsg);
 extern zcfgRet_t zcfgFeDalDnsEntry(const char *method, struct json_object *Jobj, struct json_object *Jarray, char *replyMsg);
@@ -175,6 +179,10 @@
 extern zcfgRet_t zcfgFeDalUserAccount(const char *method, struct json_object *Jobj, struct json_object *Jarray, char *replyMsg);
 extern zcfgRet_t zcfgFeDalNetworkMAP(const char *method, struct json_object *Jobj, struct json_object *Jarray, char *replyMsg);
 extern zcfgRet_t zcfgFeDalStatus(const char *method, struct json_object *Jobj, struct json_object *Jarray, char *replyMsg);
+#ifdef CBT_CUSTOMIZATION // 20170711 Max Add
+extern zcfgRet_t zcfgFeDalCbtWifi(const char *method, struct json_object *Jobj, char *replyMsg);
+extern zcfgRet_t zcfgFeDalCbtWifiAdv(const char *method, struct json_object *Jobj, char *replyMsg);
+#endif
 
 extern void zcfgFeDalShowStaticRoute(struct json_object *Jarray);
 extern void zcfgFeDalShowRip(struct json_object *Jarray);
@@ -322,6 +330,10 @@
 {"user_account",	USER_ACCOUNT_param, zcfgFeDalUserAccount,	zcfgFeDalShowUserAccount,	"get|add|edit|delete",	"User_Account"}, //temporarily root_only //User_Account
 {"lanhosts",		NETWORK_MAP_param, zcfgFeDalNetworkMAP,	zcfgFeDalShowNetworkMAP,		"get",				"Status"},
 {"status",			NETWORK_MAP_param, zcfgFeDalStatus, 		NULL,						"",					""}, //temporarily GUI only
+#ifdef CBT_CUSTOMIZATION // 20170711 Max Add
+{"WIFI_CBT",		WIFI_CBT_param,		zcfgFeDalCbtWifi,		NULL,		"edit",		""},
+{"WIFI_ADVANCED_CBT",		WIFI_ADV_CBT_param,		zcfgFeDalCbtWifiAdv,		NULL,		"edit",		""},
+#endif
 {NULL,				NULL,				NULL, 					NULL,						NULL,				 NULL}
 };
 
