Index: libzcfg_fe_dal-1.0/network/wireless/zcfg_fe_dal_wifi_cbt.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/network/wireless/zcfg_fe_dal_wifi_cbt.c	2017-11-16 15:36:57.186806962 +0800
+++ libzcfg_fe_dal-1.0/network/wireless/zcfg_fe_dal_wifi_cbt.c	2017-11-16 15:36:56.456209300 +0800
@@ -47,6 +47,7 @@
 unsigned int cbtGuestCountdownTime = 0;
 bool cbtSameSsidChange;
 const char* cbtWifiPskValue;
+bool isExtraWiFi = false;
 
 time_t t1, t2;
 
@@ -147,7 +148,7 @@
 }
 
 void getCbtBasicWifiInfo(struct json_object *Jobj){
-	
+	
 	cbtGuestWifiConfig = json_object_get_boolean(json_object_object_get(Jobj, "cbtGuestWifi"));
 	cbtWifiConfig = json_object_get_boolean(json_object_object_get(Jobj, "cbtWifi"));
 	cbtWifiEnable = json_object_get_boolean(json_object_object_get(Jobj, "cbtGuestEnable")); // Enable/Disable
@@ -157,6 +158,8 @@
 	cbtWifiPskValue = json_object_get_string(json_object_object_get(Jobj, "cbtGuestPskValue")); // 2.4G/5G password
 	cbtGuestCountdownTime = json_object_get_int(json_object_object_get(Jobj, "cbtGuestWifiTimes")); // countdown Time
 	cbtWpaMode = json_object_get_string(json_object_object_get(Jobj, "wpaMode"));
+	isExtraWiFi = json_object_get_boolean(json_object_object_get(Jobj, "isExtraWiFiSetting"));
+	
 #ifdef BUILD_SONIQ
 	if(cbtMeshCheckSsidNeedSync(Jobj) == true) {
 		cbtSameSsid = true;
@@ -190,95 +193,116 @@
 	char tempSerial[6] = {0};
 	char temp5GSsid[32] = {0};
 	char originalSsid[32] = {0};
-	
+	
 	if(cbtGuestWifiConfig == true){ // CBT WiFi or CBT Guest WiFi
 		
-		// 2.4G Iid
-		iidArray = json_object_object_get(Jobj, "cbtGuestWifiIid");
-		for(iidIdx=0;iidIdx<6;iidIdx++){
-			cbtSsidIid.idx[iidIdx] = json_object_get_int( json_object_array_get_idx(iidArray, iidIdx));
-			if(cbtSsidIid.idx[iidIdx] != 0)
-				cbtSsidIid.level = iidIdx+1;
-		}
-		// 5G Iid
-		iidArray = json_object_object_get(Jobj, "cbtGuest5GWifiIid");
-		for(iidIdx=0;iidIdx<6;iidIdx++){
-			cbt5GSsidIid.idx[iidIdx] = json_object_get_int( json_object_array_get_idx(iidArray, iidIdx));
-			if(cbt5GSsidIid.idx[iidIdx] != 0)
-				cbt5GSsidIid.level = iidIdx+1;
-		}
-
-		// 2.4G get data and set value to object
-		if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_SSID, &cbtSsidIid, &cbtSsidObj)) != ZCFG_SUCCESS) {
-			return ret;
-		}
-		json_object_object_add(cbtSsidObj, "Enable", json_object_new_boolean(cbtWifiEnable));
-		json_object_object_add(cbtSsidObj, "X_ZYXEL_GuestEnableTime", json_object_new_int(cbtGuestCountdownTime));
-
-		// 5G get data and set value to object
-		if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_SSID, &cbt5GSsidIid, &cbt5GSsidObj)) != ZCFG_SUCCESS) {
-			return ret;
-		}
-		json_object_object_add(cbt5GSsidObj, "Enable", json_object_new_boolean(cbtWifiEnable));
-		json_object_object_add(cbt5GSsidObj, "X_ZYXEL_GuestEnableTime", json_object_new_int(cbtGuestCountdownTime));
-
-		// The same SSID or not
-		if(cbtSameSsid){ // 2.4G / 5G using the same SSID base on 2.4G SSID
+		if(isExtraWiFi){
+			// 2.4G Iid
+			iidArray = json_object_object_get(Jobj, "cbtGuestWifiIid");
+			
+			for(iidIdx=0;iidIdx<6;iidIdx++){
+				cbtSsidIid.idx[iidIdx] = json_object_get_int( json_object_array_get_idx(iidArray, iidIdx));
+				if(cbtSsidIid.idx[iidIdx] != 0)
+					cbtSsidIid.level = iidIdx+1;
+			}
+			
+			// 2.4G get data and set value to object
+			if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_SSID, &cbtSsidIid, &cbtSsidObj)) != ZCFG_SUCCESS) {
+				return ret;
+			}
+			json_object_object_add(cbtSsidObj, "Enable", json_object_new_boolean(cbtWifiEnable));
 			json_object_object_add(cbtSsidObj, "SSID", json_object_new_string(cbtWifiSsid));
-			json_object_object_add(cbt5GSsidObj, "SSID", json_object_new_string(cbtWifiSsid));
-		}else{ // 2.4G / 5G using different SSID
+			
+		}else{
+			
+			// 2.4G Iid
+			iidArray = json_object_object_get(Jobj, "cbtGuestWifiIid");
+			for(iidIdx=0;iidIdx<6;iidIdx++){
+				cbtSsidIid.idx[iidIdx] = json_object_get_int( json_object_array_get_idx(iidArray, iidIdx));
+				if(cbtSsidIid.idx[iidIdx] != 0)
+					cbtSsidIid.level = iidIdx+1;
+			}
+			// 5G Iid
+			iidArray = json_object_object_get(Jobj, "cbtGuest5GWifiIid");
+			for(iidIdx=0;iidIdx<6;iidIdx++){
+				cbt5GSsidIid.idx[iidIdx] = json_object_get_int( json_object_array_get_idx(iidArray, iidIdx));
+				if(cbt5GSsidIid.idx[iidIdx] != 0)
+					cbt5GSsidIid.level = iidIdx+1;
+			}
 
-			json_object_object_add(cbtSsidObj, "SSID", json_object_new_string(cbtWifiSsid));
+			// 2.4G get data and set value to object
+			if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_SSID, &cbtSsidIid, &cbtSsidObj)) != ZCFG_SUCCESS) {
+				return ret;
+			}
+			json_object_object_add(cbtSsidObj, "Enable", json_object_new_boolean(cbtWifiEnable));
+			json_object_object_add(cbtSsidObj, "X_ZYXEL_GuestEnableTime", json_object_new_int(cbtGuestCountdownTime));
 
-			if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_DEV_INFO, &cbtDevInfoIid, &cbtDevInfoObj)) != ZCFG_SUCCESS) {
+			// 5G get data and set value to object
+			if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_SSID, &cbt5GSsidIid, &cbt5GSsidObj)) != ZCFG_SUCCESS) {
 				return ret;
 			}
+			json_object_object_add(cbt5GSsidObj, "Enable", json_object_new_boolean(cbtWifiEnable));
+			json_object_object_add(cbt5GSsidObj, "X_ZYXEL_GuestEnableTime", json_object_new_int(cbtGuestCountdownTime));
 
-			serialNum = json_object_get_string(json_object_object_get(cbtDevInfoObj, "SerialNumber"));
+			// The same SSID or not
+			if(cbtSameSsid){ // 2.4G / 5G using the same SSID base on 2.4G SSID
+				json_object_object_add(cbtSsidObj, "SSID", json_object_new_string(cbtWifiSsid));
+				json_object_object_add(cbt5GSsidObj, "SSID", json_object_new_string(cbtWifiSsid));
+			}else{ // 2.4G / 5G using different SSID
 
-			strncpy(tempSerial, serialNum + 8, 5);
-			if(cbtWifiConfig){ // WiFi
-				sprintf(originalSsid, "Fioptics%s", tempSerial);
+				json_object_object_add(cbtSsidObj, "SSID", json_object_new_string(cbtWifiSsid));
 
-				if(!strcmp(cbtWifiSsid, originalSsid)) // default SSID
-					sprintf(temp5GSsid, "Fioptics%s-5G", tempSerial);
-				else // user define SSID
-					sprintf(temp5GSsid, "%s-5G", cbtWifiSsid);
+				if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_DEV_INFO, &cbtDevInfoIid, &cbtDevInfoObj)) != ZCFG_SUCCESS) {
+					return ret;
+				}
 
-			}else{ // Guest WiFi
-				sprintf(originalSsid, "Fioptics%s-Guest", tempSerial);
+				serialNum = json_object_get_string(json_object_object_get(cbtDevInfoObj, "SerialNumber"));
 
-				if(!strcmp(cbtWifiSsid, originalSsid)) // default SSID
-					sprintf(temp5GSsid, "Fioptics%s-Guest-5G", tempSerial);
-				else // user default SSID
-					sprintf(temp5GSsid, "%s-5G", cbtWifiSsid);
+				strncpy(tempSerial, serialNum + 8, 5);
+				if(cbtWifiConfig){ // WiFi
+					sprintf(originalSsid, "Fioptics%s", tempSerial);
+
+					if(!strcmp(cbtWifiSsid, originalSsid)) // default SSID
+						sprintf(temp5GSsid, "Fioptics%s-5G", tempSerial);
+					else // user define SSID
+						sprintf(temp5GSsid, "%s-5G", cbtWifiSsid);
+
+				}else{ // Guest WiFi
+					sprintf(originalSsid, "Fioptics%s-Guest", tempSerial);
+
+					if(!strcmp(cbtWifiSsid, originalSsid)) // default SSID
+						sprintf(temp5GSsid, "Fioptics%s-Guest-5G", tempSerial);
+					else // user default SSID
+						sprintf(temp5GSsid, "%s-5G", cbtWifiSsid);
 
-			}
+				}
 
-			json_object_object_add(cbt5GSsidObj, "SSID", json_object_new_string(temp5GSsid));
-		}
+				json_object_object_add(cbt5GSsidObj, "SSID", json_object_new_string(temp5GSsid));
+			}
 
-		// TR-181 parameter
-		if(cbtWifiConfig){ // WiFi, X_ZYXEL_MasterMain
+			// TR-181 parameter
+			if(cbtWifiConfig){ // WiFi, X_ZYXEL_MasterMain
 
-			cbtSameSsidChange = json_object_get_boolean(json_object_object_get(cbtSsidObj, "X_ZYXEL_MasterMain"));
-			if(cbtSameSsidChange == cbtSameSsid)
-				cbtSameSsidChange = false;
-			else
-				cbtSameSsidChange = true;
-
-			json_object_object_add(cbtSsidObj, "X_ZYXEL_MasterMain", json_object_new_boolean(cbtSameSsid));
-			json_object_object_add(cbt5GSsidObj, "X_ZYXEL_MasterMain", json_object_new_boolean(cbtSameSsid));
-		}else{ // Guest WiFi, X_ZYXEL_MasterGuest
-
-			cbtSameSsidChange = json_object_get_boolean(json_object_object_get(cbtSsidObj, "X_ZYXEL_MasterGuest"));
-			if(cbtSameSsidChange == cbtSameSsid)
-				cbtSameSsidChange = false;
-			else
-				cbtSameSsidChange = true;
+				cbtSameSsidChange = json_object_get_boolean(json_object_object_get(cbtSsidObj, "X_ZYXEL_MasterMain"));
+				if(cbtSameSsidChange == cbtSameSsid)
+					cbtSameSsidChange = false;
+				else
+					cbtSameSsidChange = true;
+
+				json_object_object_add(cbtSsidObj, "X_ZYXEL_MasterMain", json_object_new_boolean(cbtSameSsid));
+				json_object_object_add(cbt5GSsidObj, "X_ZYXEL_MasterMain", json_object_new_boolean(cbtSameSsid));
+			}else{ // Guest WiFi, X_ZYXEL_MasterGuest
+
+				cbtSameSsidChange = json_object_get_boolean(json_object_object_get(cbtSsidObj, "X_ZYXEL_MasterGuest"));
+				if(cbtSameSsidChange == cbtSameSsid)
+					cbtSameSsidChange = false;
+				else
+					cbtSameSsidChange = true;
 
-			json_object_object_add(cbtSsidObj, "X_ZYXEL_MasterGuest", json_object_new_boolean(cbtSameSsid));
-			json_object_object_add(cbt5GSsidObj, "X_ZYXEL_MasterGuest", json_object_new_boolean(cbtSameSsid));
+				json_object_object_add(cbtSsidObj, "X_ZYXEL_MasterGuest", json_object_new_boolean(cbtSameSsid));
+				json_object_object_add(cbt5GSsidObj, "X_ZYXEL_MasterGuest", json_object_new_boolean(cbtSameSsid));
+			}
+		
 		}
 
 	}
@@ -298,144 +322,199 @@
 	int cbtGuestWifiNumber = 0;
 	struct json_object *guiCustObj = NULL;
 	objIndex_t guiObjIid;
-
+	
 	if(cbtGuestWifiConfig == true){ // CBT guest Wi-Fi
 
-		iidArray = json_object_object_get(Jobj, "cbtGuestWifiIid"); // 2.4G Iid
-		for(iidIdx=0;iidIdx<6;iidIdx++){
-			cbtSecIid.idx[iidIdx] = json_object_get_int(json_object_array_get_idx(iidArray, iidIdx));
-			if(cbtSecIid.idx[iidIdx] != 0)
-				cbtSecIid.level = iidIdx+1;
-		}
-
-		iidArray = json_object_object_get(Jobj, "cbtGuest5GWifiIid"); // 5G Iid
-		for(iidIdx=0;iidIdx<6;iidIdx++){
-			cbt5GSecIid.idx[iidIdx] = json_object_get_int(json_object_array_get_idx(iidArray, iidIdx));
-			if(cbt5GSecIid.idx[iidIdx] != 0)
-				cbt5GSecIid.level = iidIdx+1;
-		}
-	
-		if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_ACCESS_POINT_SEC, &cbtSecIid, &cbtSecObj)) != ZCFG_SUCCESS) {
-			return ret;
-		}
-		if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_ACCESS_POINT_SEC, &cbt5GSecIid, &cbt5GSecObj)) != ZCFG_SUCCESS) {
-			return ret;
-		}
-		
-		if(!strcmp(cbtWpaMode,"wpa2psk") || !strcmp(cbtWpaMode,"wpapsk") || !strcmp(cbtWpaMode,"wpawpa2psk")){
-			
-			if(!strcmp(cbtWpaMode,"wpa2psk")){
-				json_object_object_add(cbtSecObj, "ModeEnabled", json_object_new_string("WPA2-Personal"));
-				json_object_object_add(cbt5GSecObj, "ModeEnabled", json_object_new_string("WPA2-Personal"));
-			}
-			else if(!strcmp(cbtWpaMode,"wpapsk")){
-				json_object_object_add(cbtSecObj, "ModeEnabled", json_object_new_string("WPA-Personal"));
-				json_object_object_add(cbt5GSecObj, "ModeEnabled", json_object_new_string("WPA-Personal"));
-			}
-			else{
-				json_object_object_add(cbtSecObj, "ModeEnabled", json_object_new_string("WPA-WPA2-Personal"));
-				json_object_object_add(cbt5GSecObj, "ModeEnabled", json_object_new_string("WPA-WPA2-Personal"));
-			}
-
-			// CBT guest WiFi security mode is the same with WiFi security mode
-			if(cbtWifiConfig){
-
-				IID_INIT(guiObjIid);
-				if(zcfgFeObjJsonGetWithoutUpdate(RDM_OID_GUI_CUSTOMIZATION, &guiObjIid, &guiCustObj) == ZCFG_SUCCESS){
-					cbtGuestWifiNumber = json_object_get_int(json_object_object_get(guiCustObj, "CbtGuestWifi"));
-					free(guiCustObj);
-				}else{
-					zcfgLog(ZCFG_LOG_ERR, "%s: fail to get RDM_OID_GUI_CUSTOMIZATION\n", __FUNCTION__);
-					printf("%s: fail to get RDM_OID_GUI_CUSTOMIZATION\n", __FUNCTION__);
-					cbtGuestWifiNumber = 1; // set 1 when get fail
+		if(isExtraWiFi){
+			iidArray = json_object_object_get(Jobj, "cbtGuestWifiIid"); // 2.4G Iid
+			
+			for(iidIdx=0;iidIdx<6;iidIdx++){
+				cbtSecIid.idx[iidIdx] = json_object_get_int(json_object_array_get_idx(iidArray, iidIdx));
+				if(cbtSecIid.idx[iidIdx] != 0)
+					cbtSecIid.level = iidIdx+1;
+			}
+			if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_ACCESS_POINT_SEC, &cbtSecIid, &cbtSecObj)) != ZCFG_SUCCESS) {
+				return ret;
+			}
+			if(!strcmp(cbtWpaMode,"wpa2psk") || !strcmp(cbtWpaMode,"wpapsk") || !strcmp(cbtWpaMode,"wpawpa2psk")){
+				if(!strcmp(cbtWpaMode,"wpa2psk")){
+					json_object_object_add(cbtSecObj, "ModeEnabled", json_object_new_string("WPA2-Personal"));
 				}
-
-				cbtSecTmpIid.idx[0] = cbtGuestWifiNumber + 1;
-				cbt5GSecTmpIid.idx[0] = cbtGuestWifiNumber + 5;
-
-				for(iidIdx = 1; iidIdx < 6; iidIdx++){
-					cbtSecTmpIid.idx[iidIdx] = cbtSecIid.idx[iidIdx];
-					cbt5GSecTmpIid.idx[iidIdx] = cbt5GSecIid.idx[iidIdx];
+				else if(!strcmp(cbtWpaMode,"wpapsk")){
+					json_object_object_add(cbtSecObj, "ModeEnabled", json_object_new_string("WPA-Personal"));
 				}
-				cbtSecTmpIid.level = cbtSecIid.level;
-				cbt5GSecTmpIid.level = cbt5GSecIid.level;
-
-				if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_ACCESS_POINT_SEC, &cbtSecTmpIid, &cbtSecTmpObj)) != ZCFG_SUCCESS)
-					return ret;
+				else{
+					json_object_object_add(cbtSecObj, "ModeEnabled", json_object_new_string("WPA-WPA2-Personal"));
+				}
+				
 
-				if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_ACCESS_POINT_SEC, &cbt5GSecTmpIid, &cbt5GSecTmpObj)) != ZCFG_SUCCESS)
-					return ret;
+				CBT_X_ZYXEL_Auto_PSK = json_object_get_string(json_object_object_get(cbtSecObj, "X_ZYXEL_Auto_PSK"));
+				if(strcmp(CBT_X_ZYXEL_Auto_PSK, cbtWifiPskValue) == 0){ // The same string means using auto generate psk
+					// X_ZYXEL_AutoGenPSK
+					CBT_X_ZYXEL_AutoGenPSK = true;
+					// 2.4G KeyPassphrase and PreSharedKey
+					json_object_object_add(cbtSecObj, "X_ZYXEL_AutoGenPSK", json_object_new_boolean(CBT_X_ZYXEL_AutoGenPSK));
+					json_object_object_add(cbtSecObj, "KeyPassphrase", json_object_new_string(CBT_X_ZYXEL_Auto_PSK));
+					json_object_object_add(cbtSecObj, "PreSharedKey", json_object_new_string(""));
+				}else{
+					// X_ZYXEL_AutoGenPSK
+					CBT_X_ZYXEL_AutoGenPSK = false;
+					json_object_object_add(cbtSecObj, "X_ZYXEL_AutoGenPSK", json_object_new_boolean(CBT_X_ZYXEL_AutoGenPSK));
+					if(strlen(cbtWifiPskValue) == 64) {
+						psk_lowercase = (char*)malloc(strlen(cbtWifiPskValue)+1);
+						memset(psk_lowercase, 0, strlen(cbtWifiPskValue)+1);
+						cbtStrtolower(cbtWifiPskValue, psk_lowercase, strlen(cbtWifiPskValue));
+						json_object_object_add(cbtSecObj, "KeyPassphrase", json_object_new_string(""));
+						json_object_object_add(cbtSecObj, "PreSharedKey", json_object_new_string(psk_lowercase));
+					}
+					else {
+						// 2.4G PSK
+						json_object_object_add(cbtSecObj, "KeyPassphrase", json_object_new_string(cbtWifiPskValue));
+					}
+				}
+					
+			}else{
+				json_object_object_add(cbtSecObj, "ModeEnabled", json_object_new_string("None"));
+				json_object_object_add(cbtSecObj, "X_ZYXEL_WEPEncryption", json_object_new_string("None"));
+			}
+		}else{
+			iidArray = json_object_object_get(Jobj, "cbtGuestWifiIid"); // 2.4G Iid
+			for(iidIdx=0;iidIdx<6;iidIdx++){
+				cbtSecIid.idx[iidIdx] = json_object_get_int(json_object_array_get_idx(iidArray, iidIdx));
+				if(cbtSecIid.idx[iidIdx] != 0)
+					cbtSecIid.level = iidIdx+1;
+			}
 
+			iidArray = json_object_object_get(Jobj, "cbtGuest5GWifiIid"); // 5G Iid
+			for(iidIdx=0;iidIdx<6;iidIdx++){
+				cbt5GSecIid.idx[iidIdx] = json_object_get_int(json_object_array_get_idx(iidArray, iidIdx));
+				if(cbt5GSecIid.idx[iidIdx] != 0)
+					cbt5GSecIid.level = iidIdx+1;
+			}
+		
+			if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_ACCESS_POINT_SEC, &cbtSecIid, &cbtSecObj)) != ZCFG_SUCCESS) {
+				return ret;
+			}
+			if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_ACCESS_POINT_SEC, &cbt5GSecIid, &cbt5GSecObj)) != ZCFG_SUCCESS) {
+				return ret;
+			}
+			
+			if(!strcmp(cbtWpaMode,"wpa2psk") || !strcmp(cbtWpaMode,"wpapsk") || !strcmp(cbtWpaMode,"wpawpa2psk")){
+				
 				if(!strcmp(cbtWpaMode,"wpa2psk")){
-					json_object_object_add(cbtSecTmpObj, "ModeEnabled", json_object_new_string("WPA2-Personal"));
-					json_object_object_add(cbt5GSecTmpObj, "ModeEnabled", json_object_new_string("WPA2-Personal"));
+					json_object_object_add(cbtSecObj, "ModeEnabled", json_object_new_string("WPA2-Personal"));
+					json_object_object_add(cbt5GSecObj, "ModeEnabled", json_object_new_string("WPA2-Personal"));
 				}
 				else if(!strcmp(cbtWpaMode,"wpapsk")){
-					json_object_object_add(cbtSecTmpObj, "ModeEnabled", json_object_new_string("WPA-Personal"));
-					json_object_object_add(cbt5GSecTmpObj, "ModeEnabled", json_object_new_string("WPA-Personal"));
+					json_object_object_add(cbtSecObj, "ModeEnabled", json_object_new_string("WPA-Personal"));
+					json_object_object_add(cbt5GSecObj, "ModeEnabled", json_object_new_string("WPA-Personal"));
 				}
 				else{
-					json_object_object_add(cbtSecTmpObj, "ModeEnabled", json_object_new_string("WPA-WPA2-Personal"));
-					json_object_object_add(cbt5GSecTmpObj, "ModeEnabled", json_object_new_string("WPA-WPA2-Personal"));
+					json_object_object_add(cbtSecObj, "ModeEnabled", json_object_new_string("WPA-WPA2-Personal"));
+					json_object_object_add(cbt5GSecObj, "ModeEnabled", json_object_new_string("WPA-WPA2-Personal"));
 				}
-			}
-				
-			CBT_X_ZYXEL_Auto_PSK = json_object_get_string(json_object_object_get(cbtSecObj, "X_ZYXEL_Auto_PSK"));
-			if(strcmp(CBT_X_ZYXEL_Auto_PSK, cbtWifiPskValue) == 0) // The same string means using auto generate psk
-			{
-				// X_ZYXEL_AutoGenPSK
-				CBT_X_ZYXEL_AutoGenPSK = true;
-
-				// 2.4G KeyPassphrase and PreSharedKey
-				json_object_object_add(cbtSecObj, "X_ZYXEL_AutoGenPSK", json_object_new_boolean(CBT_X_ZYXEL_AutoGenPSK));
-				json_object_object_add(cbtSecObj, "KeyPassphrase", json_object_new_string(CBT_X_ZYXEL_Auto_PSK));
-				json_object_object_add(cbtSecObj, "PreSharedKey", json_object_new_string(""));
 
-				// 5G KeyPassphrase and PreSharedKey
-				//if(cbtSameSsid == true){
-					json_object_object_add(cbt5GSecObj, "X_ZYXEL_AutoGenPSK", json_object_new_boolean(CBT_X_ZYXEL_AutoGenPSK));
-					json_object_object_add(cbt5GSecObj, "KeyPassphrase", json_object_new_string(CBT_X_ZYXEL_Auto_PSK));
-					json_object_object_add(cbt5GSecObj, "PreSharedKey", json_object_new_string(""));
-				/*}else{ // 20170720 Max Noted: remove CBT 5G wifi password add "-5G" at the end of 2.4G password
-					CBT_X_ZYXEL_AutoGenPSK = false;
+				// CBT guest WiFi security mode is the same with WiFi security mode
+				if(cbtWifiConfig){
 
-					json_object_object_add(cbt5GSecObj, "X_ZYXEL_AutoGenPSK", json_object_new_boolean(CBT_X_ZYXEL_AutoGenPSK));
-					sprintf(tmpPsk, "%s%s", CBT_X_ZYXEL_Auto_PSK, "-5G");
-					json_object_object_add(cbt5GSecObj, "KeyPassphrase", json_object_new_string(tmpPsk));
-				}*/
-			}else {
-				// X_ZYXEL_AutoGenPSK
-				CBT_X_ZYXEL_AutoGenPSK = false;
-				json_object_object_add(cbtSecObj, "X_ZYXEL_AutoGenPSK", json_object_new_boolean(CBT_X_ZYXEL_AutoGenPSK));
-				json_object_object_add(cbt5GSecObj, "X_ZYXEL_AutoGenPSK", json_object_new_boolean(CBT_X_ZYXEL_AutoGenPSK));
-
-				if(strlen(cbtWifiPskValue) == 64) {
-					psk_lowercase = (char*)malloc(strlen(cbtWifiPskValue)+1);
-					memset(psk_lowercase, 0, strlen(cbtWifiPskValue)+1);
-					cbtStrtolower(cbtWifiPskValue, psk_lowercase, strlen(cbtWifiPskValue));
-					json_object_object_add(cbtSecObj, "KeyPassphrase", json_object_new_string(""));
-					json_object_object_add(cbtSecObj, "PreSharedKey", json_object_new_string(psk_lowercase));
-					json_object_object_add(cbt5GSecObj, "KeyPassphrase", json_object_new_string(""));
-					json_object_object_add(cbt5GSecObj, "PreSharedKey", json_object_new_string(psk_lowercase));
-				}
-				else {
-					// 2.4G PSK
-					json_object_object_add(cbtSecObj, "KeyPassphrase", json_object_new_string(cbtWifiPskValue));
-						
-					// 5G PSK
+					IID_INIT(guiObjIid);
+					if(zcfgFeObjJsonGetWithoutUpdate(RDM_OID_GUI_CUSTOMIZATION, &guiObjIid, &guiCustObj) == ZCFG_SUCCESS){
+						cbtGuestWifiNumber = json_object_get_int(json_object_object_get(guiCustObj, "CbtGuestWifi"));
+						free(guiCustObj);
+					}else{
+						zcfgLog(ZCFG_LOG_ERR, "%s: fail to get RDM_OID_GUI_CUSTOMIZATION\n", __FUNCTION__);
+						printf("%s: fail to get RDM_OID_GUI_CUSTOMIZATION\n", __FUNCTION__);
+						cbtGuestWifiNumber = 1; // set 1 when get fail
+					}
+
+					cbtSecTmpIid.idx[0] = cbtGuestWifiNumber + 1;
+					cbt5GSecTmpIid.idx[0] = cbtGuestWifiNumber + 5;
+
+					for(iidIdx = 1; iidIdx < 6; iidIdx++){
+						cbtSecTmpIid.idx[iidIdx] = cbtSecIid.idx[iidIdx];
+						cbt5GSecTmpIid.idx[iidIdx] = cbt5GSecIid.idx[iidIdx];
+					}
+					cbtSecTmpIid.level = cbtSecIid.level;
+					cbt5GSecTmpIid.level = cbt5GSecIid.level;
+
+					if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_ACCESS_POINT_SEC, &cbtSecTmpIid, &cbtSecTmpObj)) != ZCFG_SUCCESS)
+						return ret;
+
+					if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_ACCESS_POINT_SEC, &cbt5GSecTmpIid, &cbt5GSecTmpObj)) != ZCFG_SUCCESS)
+						return ret;
+
+					if(!strcmp(cbtWpaMode,"wpa2psk")){
+						json_object_object_add(cbtSecTmpObj, "ModeEnabled", json_object_new_string("WPA2-Personal"));
+						json_object_object_add(cbt5GSecTmpObj, "ModeEnabled", json_object_new_string("WPA2-Personal"));
+					}
+					else if(!strcmp(cbtWpaMode,"wpapsk")){
+						json_object_object_add(cbtSecTmpObj, "ModeEnabled", json_object_new_string("WPA-Personal"));
+						json_object_object_add(cbt5GSecTmpObj, "ModeEnabled", json_object_new_string("WPA-Personal"));
+					}
+					else{
+						json_object_object_add(cbtSecTmpObj, "ModeEnabled", json_object_new_string("WPA-WPA2-Personal"));
+						json_object_object_add(cbt5GSecTmpObj, "ModeEnabled", json_object_new_string("WPA-WPA2-Personal"));
+					}
+				}
+					
+				CBT_X_ZYXEL_Auto_PSK = json_object_get_string(json_object_object_get(cbtSecObj, "X_ZYXEL_Auto_PSK"));
+				if(strcmp(CBT_X_ZYXEL_Auto_PSK, cbtWifiPskValue) == 0) // The same string means using auto generate psk
+				{
+					// X_ZYXEL_AutoGenPSK
+					CBT_X_ZYXEL_AutoGenPSK = true;
+
+					// 2.4G KeyPassphrase and PreSharedKey
+					json_object_object_add(cbtSecObj, "X_ZYXEL_AutoGenPSK", json_object_new_boolean(CBT_X_ZYXEL_AutoGenPSK));
+					json_object_object_add(cbtSecObj, "KeyPassphrase", json_object_new_string(CBT_X_ZYXEL_Auto_PSK));
+					json_object_object_add(cbtSecObj, "PreSharedKey", json_object_new_string(""));
+
+					// 5G KeyPassphrase and PreSharedKey
 					//if(cbtSameSsid == true){
-						json_object_object_add(cbt5GSecObj, "KeyPassphrase", json_object_new_string(cbtWifiPskValue));
+						json_object_object_add(cbt5GSecObj, "X_ZYXEL_AutoGenPSK", json_object_new_boolean(CBT_X_ZYXEL_AutoGenPSK));
+						json_object_object_add(cbt5GSecObj, "KeyPassphrase", json_object_new_string(CBT_X_ZYXEL_Auto_PSK));
+						json_object_object_add(cbt5GSecObj, "PreSharedKey", json_object_new_string(""));
 					/*}else{ // 20170720 Max Noted: remove CBT 5G wifi password add "-5G" at the end of 2.4G password
-						sprintf(tmpPsk, "%s%s", cbtWifiPskValue, "-5G");
+						CBT_X_ZYXEL_AutoGenPSK = false;
+
+						json_object_object_add(cbt5GSecObj, "X_ZYXEL_AutoGenPSK", json_object_new_boolean(CBT_X_ZYXEL_AutoGenPSK));
+						sprintf(tmpPsk, "%s%s", CBT_X_ZYXEL_Auto_PSK, "-5G");
 						json_object_object_add(cbt5GSecObj, "KeyPassphrase", json_object_new_string(tmpPsk));
 					}*/
+				}else {
+					// X_ZYXEL_AutoGenPSK
+					CBT_X_ZYXEL_AutoGenPSK = false;
+					json_object_object_add(cbtSecObj, "X_ZYXEL_AutoGenPSK", json_object_new_boolean(CBT_X_ZYXEL_AutoGenPSK));
+					json_object_object_add(cbt5GSecObj, "X_ZYXEL_AutoGenPSK", json_object_new_boolean(CBT_X_ZYXEL_AutoGenPSK));
+
+					if(strlen(cbtWifiPskValue) == 64) {
+						psk_lowercase = (char*)malloc(strlen(cbtWifiPskValue)+1);
+						memset(psk_lowercase, 0, strlen(cbtWifiPskValue)+1);
+						cbtStrtolower(cbtWifiPskValue, psk_lowercase, strlen(cbtWifiPskValue));
+						json_object_object_add(cbtSecObj, "KeyPassphrase", json_object_new_string(""));
+						json_object_object_add(cbtSecObj, "PreSharedKey", json_object_new_string(psk_lowercase));
+						json_object_object_add(cbt5GSecObj, "KeyPassphrase", json_object_new_string(""));
+						json_object_object_add(cbt5GSecObj, "PreSharedKey", json_object_new_string(psk_lowercase));
+					}
+					else {
+						// 2.4G PSK
+						json_object_object_add(cbtSecObj, "KeyPassphrase", json_object_new_string(cbtWifiPskValue));
+							
+						// 5G PSK
+						//if(cbtSameSsid == true){
+							json_object_object_add(cbt5GSecObj, "KeyPassphrase", json_object_new_string(cbtWifiPskValue));
+						/*}else{ // 20170720 Max Noted: remove CBT 5G wifi password add "-5G" at the end of 2.4G password
+							sprintf(tmpPsk, "%s%s", cbtWifiPskValue, "-5G");
+							json_object_object_add(cbt5GSecObj, "KeyPassphrase", json_object_new_string(tmpPsk));
+						}*/
+					}
 				}
+			}else{//None Secrity mode
+				json_object_object_add(cbtSecObj, "ModeEnabled", json_object_new_string("None"));
+				json_object_object_add(cbt5GSecObj, "ModeEnabled", json_object_new_string("None"));
+				json_object_object_add(cbtSecObj, "X_ZYXEL_WEPEncryption", json_object_new_string("None"));
+				json_object_object_add(cbt5GSecObj, "X_ZYXEL_WEPEncryption", json_object_new_string("None"));
 			}
-		}else{//None Secrity mode
-			json_object_object_add(cbtSecObj, "ModeEnabled", json_object_new_string("None"));
-			json_object_object_add(cbt5GSecObj, "ModeEnabled", json_object_new_string("None"));
-			json_object_object_add(cbtSecObj, "X_ZYXEL_WEPEncryption", json_object_new_string("None"));
-			json_object_object_add(cbt5GSecObj, "X_ZYXEL_WEPEncryption", json_object_new_string("None"));
+		
 		}
 	}
 	
