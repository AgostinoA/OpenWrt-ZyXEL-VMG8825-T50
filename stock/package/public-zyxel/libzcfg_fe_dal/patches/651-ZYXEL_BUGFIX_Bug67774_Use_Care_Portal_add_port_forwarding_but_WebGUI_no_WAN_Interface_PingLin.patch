Index: libzcfg_fe_dal-1.0/network/nat/zcfg_fe_dal_nat_port_mapping.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/network/nat/zcfg_fe_dal_nat_port_mapping.c	2019-01-03 11:31:56.393016358 +0800
+++ libzcfg_fe_dal-1.0/network/nat/zcfg_fe_dal_nat_port_mapping.c	2019-01-03 11:36:43.867466712 +0800
@@ -34,11 +34,11 @@
 	{"InternalClient",				dalType_v4Addr,		0,	256,	NULL,	NULL,				dal_Add},
 	{NULL,							0,					0,	0,		NULL,	NULL,				NULL}
 };
+
 void zcfgFeDalShowPortFwd(struct json_object *Jarray){
 	int i, len = 0;
 	struct json_object *obj;
 	const char *origIP = NULL;
-	
 
 	if(json_object_get_type(Jarray) != json_type_array){
 		printf("wrong Jobj format!\n");
@@ -46,20 +46,20 @@
 	}
 #ifdef ABOG_CUSTOMIZATION
 	printf("%-5s %-15s %-7s %-15s %-17s %-10s %-10s %-25s %-25s %-10s\n",
-		    "Index", "Description", "Enable", "Originating IP", "Server IP Address", "Start Port", "End Port", "Translation Start Port", "Translation End Port", "Protocol");
+		"Index", "Description", "Enable", "Originating IP", "Server IP Address", "Start Port", "End Port", "Translation Start Port", "Translation End Port", "Protocol");
 #else
 	printf("%-5s %-15s %-7s %-15s %-17s %-15s %-10s %-10s %-25s %-25s %-10s\n",
-		    "Index", "Description", "Enable", "Originating IP", "Server IP Address", "WAN Interface", "Start Port", "End Port", "Translation Start Port", "Translation End Port", "Protocol");
+		"Index", "Description", "Enable", "Originating IP", "Server IP Address", "WAN Interface", "Start Port", "End Port", "Translation Start Port", "Translation End Port", "Protocol");
 #endif
 	len = json_object_array_length(Jarray);
 	for(i=0;i<len;i++){
 		obj = json_object_array_get_idx(Jarray, i);
 		if(!json_object_get_boolean(json_object_object_get(obj, "SetOriginatingIP")) ||
-		   !strcmp(json_object_get_string(json_object_object_get(obj, "OriginatingIpAddress")),"")){
+			!strcmp(json_object_get_string(json_object_object_get(obj, "OriginatingIpAddress")),"")){
 			origIP = "N/A";
 		}
 		else
-			origIP = json_object_get_string(json_object_object_get(obj, "OriginatingIpAddress"));			
+			origIP = json_object_get_string(json_object_object_get(obj, "OriginatingIpAddress"));
 #ifdef ABOG_CUSTOMIZATION
 		printf("%-5s %-15s %-7d %-15s %-17s %-10s %-10s %-25s %-25s %-10s\n",
 			json_object_get_string(json_object_object_get(obj, "Index")),
@@ -72,7 +72,7 @@
 			json_object_get_string(json_object_object_get(obj, "InternalPortStart")),
 			json_object_get_string(json_object_object_get(obj, "InternalPortEnd")),
 			json_object_get_string(json_object_object_get(obj, "Protocol")));
-	
+
 #else
 		printf("%-5s %-15s %-7d %-15s %-17s %-15s %-10s %-10s %-25s %-25s %-10s\n",
 			json_object_get_string(json_object_object_get(obj, "Index")),
@@ -90,7 +90,6 @@
 	}
 }
 
-
 zcfgRet_t zcfgFeDalNatPortMappingAdd(struct json_object *Jobj, char *replyMsg)
 {
 	zcfgRet_t ret = ZCFG_SUCCESS;
@@ -112,6 +111,7 @@
 #ifdef ELISA_NAT_PORTFORWARD_CUSTOMIZATIONN
 	const char *wanip = NULL;
 #endif
+
 	//Don' t allow Description prefix is "APP:", it is used for NAT applications rule.
 	if(json_object_object_get(Jobj, "Description") != NULL){
 		if(!strncmp(json_object_get_string(json_object_object_get(Jobj, "Description")), "APP:", 4)){
@@ -122,14 +122,14 @@
 	}
 	description = json_object_get_string(json_object_object_get(Jobj, "Description"));
 	IID_INIT(objIid);
-	while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_NAT_PORT_MAPPING, &objIid, &NatPortMappingJobj) == ZCFG_SUCCESS){	
+	while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_NAT_PORT_MAPPING, &objIid, &NatPortMappingJobj) == ZCFG_SUCCESS){
 		if(strncmp(json_object_get_string(json_object_object_get(Jobj, "Description")), "APP:", 4)){
-			if(!strcmp(description, json_object_get_string(json_object_object_get(NatPortMappingJobj, "Description")))){	
-				zcfgFeJsonObjFree(NatPortMappingJobj);				
-				strcat(replyMsg, "Description is duplicate.");			
-				return ZCFG_INVALID_PARAM_VALUE;		
-			}	
-			zcfgFeJsonObjFree(NatPortMappingJobj);	
+			if(!strcmp(description, json_object_get_string(json_object_object_get(NatPortMappingJobj, "Description")))){
+				zcfgFeJsonObjFree(NatPortMappingJobj);
+				strcat(replyMsg, "Description is duplicate.");
+				return ZCFG_INVALID_PARAM_VALUE;
+			}
+			zcfgFeJsonObjFree(NatPortMappingJobj);
 		}
 	}
 
@@ -140,7 +140,7 @@
 	}
 	if(ret == ZCFG_SUCCESS){
 		enable = json_object_get_boolean(json_object_object_get(Jobj, "Enable"));
-		originatingipaddress = json_object_get_string(json_object_object_get(Jobj, "OriginatingIpAddress"));		
+		originatingipaddress = json_object_get_string(json_object_object_get(Jobj, "OriginatingIpAddress"));
 		externalport = json_object_get_int(json_object_object_get(Jobj, "ExternalPortStart"));
 		externalportendrange = json_object_get_int(json_object_object_get(Jobj, "ExternalPortEnd"));
 		internalport = json_object_get_int(json_object_object_get(Jobj, "InternalPortStart"));
@@ -153,7 +153,8 @@
 		autoDetectWanStatus = true;
 #else
 		interface = json_object_get_string(json_object_object_get(Jobj, "Interface"));
-		if(!strcmp(interface,"")){
+		autoDetectWanStatus = json_object_get_boolean(json_object_object_get(Jobj, "X_ZYXEL_AutoDetectWanStatus"));
+		if(!strcmp(interface, "")){
 			autoDetectWanStatus = true;
 		}
 #endif
@@ -165,7 +166,7 @@
 		if(internalport > internalportendrange){
 			if(replyMsg != NULL)
 				strcpy(replyMsg, "Internal port range is invalid.");
-			
+
 			zcfgFeJsonObjFree(NatPortMappingJobj);
 			zcfgFeObjJsonDel(RDM_OID_NAT_PORT_MAPPING, &objIid, NULL);
 			return ZCFG_INVALID_PARAM_VALUE;
@@ -173,7 +174,7 @@
 		if(externalport > externalportendrange){
 			if(replyMsg != NULL)
 				strcpy(replyMsg, "External port range is invalid.");
-			
+
 			zcfgFeJsonObjFree(NatPortMappingJobj);
 			zcfgFeObjJsonDel(RDM_OID_NAT_PORT_MAPPING, &objIid, NULL);
 			return ZCFG_INVALID_PARAM_VALUE;
@@ -185,10 +186,10 @@
 			json_object_object_add(NatPortMappingJobj, "Interface", json_object_new_string(""));
 			json_object_object_add(NatPortMappingJobj, "X_ZYXEL_AutoDetectWanStatus", json_object_new_boolean(autoDetectWanStatus));
 #else
-		if(json_object_object_get(Jobj, "Interface") != NULL){
+		if(json_object_object_get(Jobj, "Interface") != NULL)
 			json_object_object_add(NatPortMappingJobj, "Interface", json_object_new_string(interface));
+		if(json_object_object_get(Jobj, "X_ZYXEL_AutoDetectWanStatus") != NULL)
 			json_object_object_add(NatPortMappingJobj, "X_ZYXEL_AutoDetectWanStatus", json_object_new_boolean(autoDetectWanStatus));
-		}
 #endif
 		if(json_object_object_get(Jobj, "ExternalPortStart") != NULL)
 			json_object_object_add(NatPortMappingJobj, "ExternalPort", json_object_new_int(externalport));
@@ -217,9 +218,10 @@
 
 		zcfgFeJsonObjFree(NatPortMappingJobj);
 	}
-	
+
 	return ret;
 }
+
 zcfgRet_t zcfgFeDalNatPortMappingEdit(struct json_object *Jobj, char *replyMsg)
 {
 	zcfgRet_t ret = ZCFG_SUCCESS;
@@ -244,6 +246,7 @@
 #ifdef ELISA_NAT_PORTFORWARD_CUSTOMIZATIONN
 	const char *wanip = NULL;
 #endif
+
 	index = json_object_get_int(json_object_object_get(Jobj, "Index"));
 	description = json_object_get_string(json_object_object_get(Jobj, "Description"));
 	IID_INIT(objIid);
@@ -255,20 +258,20 @@
 		}
 	}
 	if(json_object_object_get(Jobj, "Description")){
-		while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_NAT_PORT_MAPPING, &Iid, &obj) == ZCFG_SUCCESS){	
+		while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_NAT_PORT_MAPPING, &Iid, &obj) == ZCFG_SUCCESS){
 			if(strncmp(json_object_get_string(json_object_object_get(Jobj, "Description")), "APP:", 4)){
 				if(!strcmp(description, json_object_get_string(json_object_object_get(obj, "Description")))){
 					if(index == Iid.idx[0]){
-						zcfgFeJsonObjFree(obj);	
+						zcfgFeJsonObjFree(obj);
 					}
 					else{
-						zcfgFeJsonObjFree(obj);				
-						strcat(replyMsg, "Description is duplicate.");			
+						zcfgFeJsonObjFree(obj);
+						strcat(replyMsg, "Description is duplicate.");
 						return ZCFG_INVALID_PARAM_VALUE;
 					}
-				}	
+				}
 			}
-			zcfgFeJsonObjFree(obj);	
+			zcfgFeJsonObjFree(obj);
 		}
 	}
 	if(!found){
@@ -278,27 +281,28 @@
 			zcfgFeJsonObjFree(NatPortMappingJobj);
 		return ZCFG_NOT_FOUND;
 	}
-	
+
 	if(found){
 		//Don' t allow Description prefix is "APP:", it is used for NAT applications rule.
 		if(json_object_object_get(Jobj, "Description") != NULL){
 			if(!strncmp(json_object_get_string(json_object_object_get(Jobj, "Description")), "APP:", 4)){
 				if(replyMsg != NULL)
 					strcpy(replyMsg, "Invalid NatPortFwd Description");
-				
+
 				zcfgFeJsonObjFree(NatPortMappingJobj);
 				return ZCFG_REQUEST_REJECT;
 			}
 		}
-		
+
 		enable = json_object_get_boolean(json_object_object_get(Jobj, "Enable"));
 #ifndef ABOG_CUSTOMIZATION
 		interface = json_object_get_string(json_object_object_get(Jobj, "Interface"));
-		if(!strcmp(interface,"")){
+		autoDetectWanStatus = json_object_get_boolean(json_object_object_get(Jobj, "X_ZYXEL_AutoDetectWanStatus"));
+		if(!strcmp(interface, "")){
 			autoDetectWanStatus = true;
 		}
 #endif
-		originatingipaddress = json_object_get_string(json_object_object_get(Jobj, "OriginatingIpAddress"));		
+		originatingipaddress = json_object_get_string(json_object_object_get(Jobj, "OriginatingIpAddress"));
 		externalport = json_object_get_int(json_object_object_get(Jobj, "ExternalPortStart"));
 		externalportendrange = json_object_get_int(json_object_object_get(Jobj, "ExternalPortEnd"));
 		internalport = json_object_get_int(json_object_object_get(Jobj, "InternalPortStart"));
@@ -313,10 +317,10 @@
 		if(json_object_object_get(Jobj, "Enable") != NULL)
 			json_object_object_add(NatPortMappingJobj, "Enable", json_object_new_boolean(enable));
 #ifndef ABOG_CUSTOMIZATION
-		if(json_object_object_get(Jobj, "Interface") != NULL){
+		if(json_object_object_get(Jobj, "Interface") != NULL)
 			json_object_object_add(NatPortMappingJobj, "Interface", json_object_new_string(interface));
+		if(json_object_object_get(Jobj, "X_ZYXEL_AutoDetectWanStatus") != NULL)
 			json_object_object_add(NatPortMappingJobj, "X_ZYXEL_AutoDetectWanStatus", json_object_new_boolean(autoDetectWanStatus));
-		}
 #endif
 		if(json_object_object_get(Jobj, "ExternalPortStart") != NULL)
 			json_object_object_add(NatPortMappingJobj, "ExternalPort", json_object_new_int(externalport));
@@ -336,12 +340,16 @@
 			json_object_object_add(NatPortMappingJobj, "InternalClient", json_object_new_string(internalclient));
 		if(json_object_object_get(Jobj, "Description") != NULL)
 			json_object_object_add(NatPortMappingJobj, "Description", json_object_new_string(description));
+#ifdef ELISA_NAT_PORTFORWARD_CUSTOMIZATIONN
+		if(json_object_object_get(Jobj, "WANIP") != NULL)
+			json_object_object_add(NatPortMappingJobj, "X_ZYXEL_WANIP", json_object_new_string(wanip));
+#endif
 		//check prot range
 		externalport = json_object_get_int(json_object_object_get(NatPortMappingJobj, "ExternalPort"));
 		externalportendrange = json_object_get_int(json_object_object_get(NatPortMappingJobj, "ExternalPortEndRange"));
 		internalport = json_object_get_int(json_object_object_get(NatPortMappingJobj, "InternalPort"));
 		internalportendrange = json_object_get_int(json_object_object_get(NatPortMappingJobj, "X_ZYXEL_InternalPortEndRange"));
-		
+
 		if(internalport > internalportendrange){
 			if(replyMsg != NULL)
 				strcpy(replyMsg, "Internal port range is invalid.");
@@ -358,9 +366,10 @@
 		ret = zcfgFeObjJsonSet(RDM_OID_NAT_PORT_MAPPING, &objIid, NatPortMappingJobj, NULL);
 		zcfgFeJsonObjFree(NatPortMappingJobj);
 	}
-	
+
 	return ret;
 }
+
 zcfgRet_t zcfgFeDalNatPortMappingDelete(struct json_object *Jobj, char *replyMsg)
 {
 
@@ -368,7 +377,7 @@
 	struct json_object *NatPortMappingJobj = NULL;
 	objIndex_t objIid = {0};
 	bool found = false;
-	
+
 	IID_INIT(objIid);
 	objIid.level = 1;
 	objIid.idx[0] = json_object_get_int(json_object_object_get(Jobj, "Index"));
@@ -378,7 +387,7 @@
 		}
 		zcfgFeJsonObjFree(NatPortMappingJobj);
 	}
-	
+
 	if(found){
 		ret = zcfgFeObjJsonDel(RDM_OID_NAT_PORT_MAPPING, &objIid, NULL);
 	}
@@ -387,11 +396,12 @@
 			strcpy(replyMsg, "Can't find rule");
 		return ZCFG_NOT_FOUND;
 	}
-	
-	
+
+
 	return ret;
-	
+
 }
+
 zcfgRet_t zcfgFeDalNatPortMappingGet(struct json_object *Jobj, struct json_object *Jarray, char *replyMsg){
 	zcfgRet_t ret = ZCFG_SUCCESS;
 	struct json_object *paramJobj = NULL;
@@ -424,14 +434,14 @@
 				json_object_object_add(paramJobj, "Index", json_object_new_int(PortFwdIid.idx[0]));
 				json_object_object_add(paramJobj, "X_ZYXEL_AutoDetectWanStatus", JSON_OBJ_COPY(json_object_object_get(PortFwdJobj, "X_ZYXEL_AutoDetectWanStatus")));
 #ifdef ELISA_NAT_PORTFORWARD_CUSTOMIZATIONN
-				json_object_object_add(paramJobj, "X_ZYXEL_WANIP", JSON_OBJ_COPY(json_object_object_get(PortFwdJobj, "X_ZYXEL_WANIP")));
+				json_object_object_add(paramJobj, "WANIP", JSON_OBJ_COPY(json_object_object_get(PortFwdJobj, "X_ZYXEL_WANIP")));
 #endif
 				json_object_array_add(Jarray, paramJobj);
 			}
 		}
 		zcfgFeJsonObjFree(PortFwdJobj);
-	}	
-	
+	}
+
 	return ret;
 }
 
