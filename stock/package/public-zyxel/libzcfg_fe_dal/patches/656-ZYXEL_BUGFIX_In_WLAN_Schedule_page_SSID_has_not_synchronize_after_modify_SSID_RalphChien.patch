Index: libzcfg_fe_dal-1.0/network/wireless/zcfg_fe_dal_wifi_general.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/network/wireless/zcfg_fe_dal_wifi_general.c	2019-03-04 17:30:17.395716548 +0800
+++ libzcfg_fe_dal-1.0/network/wireless/zcfg_fe_dal_wifi_general.c	2019-03-04 17:32:29.744985200 +0800
@@ -108,6 +108,7 @@
 struct json_object *wifiApObj = NULL;
 struct json_object *wifiSecObj = NULL;
 struct json_object *wifiSubnetObj = NULL;
+struct json_object *wifiSchedObj = NULL;
 
 #ifdef ZYXEL_ONESSID
 struct json_object *wifiOneSsidObj = NULL;
@@ -120,6 +121,7 @@
 objIndex_t wifiApIid = {0};
 objIndex_t wifiSecIid = {0};
 objIndex_t wifiSubnetIid = {0};
+objIndex_t wifiSchedIid = {0};
 
 #ifdef WIFI_ONESSID_SECURITY_SYNC
 
@@ -474,6 +476,7 @@
 	if(wifiApObj) zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_ACCESS_POINT, &wifiApIid, wifiApObj, NULL);
 	if(wifiSecObj) zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_ACCESS_POINT_SEC, &wifiSecIid, wifiSecObj, NULL);
 	if(wifiRadioObj) zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_RADIO, &wifiRadioIid, wifiRadioObj, NULL);
+	if(wifiSchedObj) zcfgFeObjJsonSetWithoutApply(RDM_OID_WLAN_SCHEDULER, &wifiSchedIid, wifiSchedObj, NULL);
 	if(wifiSsidObj)zcfgFeObjJsonBlockedSet(RDM_OID_WIFI_SSID, &wifiSsidIid, wifiSsidObj, NULL);
 	if(wifiSubnetObj) zcfgFeObjJsonBlockedSet(RDM_OID_DHCPV4_SRV_SUBNET, &wifiSubnetIid, wifiSubnetObj, NULL);
 #ifdef WIFI_ONESSID_SECURITY_SYNC
@@ -494,6 +497,7 @@
 	if(wifiApWpsObj) json_object_put(wifiApWpsObj);
 	if(wifiApObj) json_object_put(wifiApObj);
 	if(wifiSecObj) json_object_put(wifiSecObj);
+	if(wifiSchedObj) json_object_put(wifiSchedObj);
 #ifdef WIFI_ONESSID_SECURITY_SYNC
 	if(syncWifiSecObj) json_object_put(syncWifiSecObj);
 #endif //WIFI_ONESSID_SECURITY_SYNC
@@ -701,6 +705,8 @@
 	json_object_object_add(wifiSsidObj, "Enable", json_object_new_boolean(wlEnable));
 	json_object_object_add(wifiSsidObj, "X_ZYXEL_Multicast_Fwd", json_object_new_boolean(X_ZYXEL_Multicast_Fwd));
 	json_object_object_add(wifiSsidObj, "SSID", json_object_new_string(SSID));
+
+	if(wifiSchedObj) json_object_object_add(wifiSchedObj, "SSID", json_object_new_string(SSID));
 	
 	if(upRate)
 		json_object_object_add(wifiSsidObj, "X_ZYXEL_UpstreamRate", json_object_new_int(upRate));
@@ -1373,6 +1379,7 @@
 zcfgRet_t getWlObj(struct json_object *Jobj, char *replyMsg){
 	zcfgRet_t ret = ZCFG_SUCCESS;
 	int ssidIndex;
+	int wlanSched_index = 0;
 
 	// radio obj
 	objIndex_t tmpSsidIid;
@@ -1388,6 +1395,7 @@
 	uint8_t subnetIdx;
 	uint8_t tmpSubnetIdx;
 	
+	
 	if(!json_object_object_get(Jobj,"Index")){
 		printf("Error : %s needs parameter \"Index\".\n",__FUNCTION__);
 		return ZCFG_NO_SUCH_PARAMETER;
@@ -1425,6 +1433,16 @@
 		printf("%s : Get RDM_OID_WIFI_ACCESS_POINT_SEC object failed.\n",__FUNCTION__);
 		return ZCFG_NO_SUCH_OBJECT;
 	}
+	IID_INIT(wifiSchedIid);
+	while(zcfgFeObjJsonGetNext(RDM_OID_WLAN_SCHEDULER, &wifiSchedIid, &wifiSchedObj) == ZCFG_SUCCESS){
+		wlanSched_index = json_object_get_int(json_object_object_get(wifiSchedObj, "Interface"));
+		if(ssidIndex == wlanSched_index)
+		{
+			printf("%s: Match with wlan scheduler rule!\n",__FUNCTION__);
+			break;
+		}
+		zcfgFeJsonObjFree(wifiSchedObj);
+	}
 
 	// radio
 	if(json_object_get_boolean(json_object_object_get(wifiSsidObj, "X_ZYXEL_MainSSID"))){
