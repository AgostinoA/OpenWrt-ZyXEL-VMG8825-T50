Index: libzcfg_fe_dal-1.0/network/interfaceGrouping/zcfg_fe_dal_intfGrp.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/network/interfaceGrouping/zcfg_fe_dal_intfGrp.c	2017-06-19 10:46:48.006467686 +0800
+++ libzcfg_fe_dal-1.0/network/interfaceGrouping/zcfg_fe_dal_intfGrp.c	2017-06-19 10:55:34.504471800 +0800
@@ -1889,41 +1889,42 @@
 		optionstr = json_object_get_string(json_object_object_get(Jobj, "optionStr"));
 	else
 		optionstr = "";
-	if(!strcmp(type,"op125")){
-		char en[64] = {0};
-			char oui[64] = {0};
-			char sn[64] = {0};
-			char class[64] = {0};
-		if(json_object_object_get(Jobj, "Enterprise_Number")){
-			EN = json_object_get_int(json_object_object_get(Jobj, "Enterprise_Number"));
-			sprintf(en,"enterprise=%d",EN);
-			strcat(op125tmp,en);
-		}
-		if(json_object_object_get(Jobj, "OUI")){
-			OUI = json_object_get_string(json_object_object_get(Jobj, "OUI"));
-			sprintf(oui,"\%\%\%\%%d=%s",count,OUI);
-					strcat(op125tmp, oui);
-			count++;
-				}
-		if(json_object_object_get(Jobj, "SN")){
-			SN = json_object_get_string(json_object_object_get(Jobj, "SN"));
-			sprintf(sn,"\%\%\%\%%d=%s",count,SN);
-					strcat(op125tmp, sn);
-			count++;
-				}
-		if(json_object_object_get(Jobj, "Class")){
-			Class = json_object_get_string(json_object_object_get(Jobj, "Class"));
-			sprintf(class,"\%\%\%\%%d=%s",count,Class);
-					strcat(op125tmp, class);
-			count++;
-				}
-		if(count == 1 && !json_object_object_get(Jobj, "Enterprise_Number")){
-			if(replyMsg != NULL)
-				strcat(replyMsg, "The DHCP option 125 is selected, but one or more than one value is invalid.");
-			return ZCFG_INVALID_PARAM_VALUE;
+	if(json_object_object_get(Jobj, "type")){
+		if(!strcmp(type,"op125")){
+			char en[64] = {0};
+				char oui[64] = {0};
+				char sn[64] = {0};
+				char class[64] = {0};
+			if(json_object_object_get(Jobj, "Enterprise_Number")){
+				EN = json_object_get_int(json_object_object_get(Jobj, "Enterprise_Number"));
+				sprintf(en,"enterprise=%d",EN);
+				strcat(op125tmp,en);
+			}
+			if(json_object_object_get(Jobj, "OUI")){
+				OUI = json_object_get_string(json_object_object_get(Jobj, "OUI"));
+				sprintf(oui,"\%\%\%\%%d=%s",count,OUI);
+						strcat(op125tmp, oui);
+				count++;
+					}
+			if(json_object_object_get(Jobj, "SN")){
+				SN = json_object_get_string(json_object_object_get(Jobj, "SN"));
+				sprintf(sn,"\%\%\%\%%d=%s",count,SN);
+						strcat(op125tmp, sn);
+				count++;
+					}
+			if(json_object_object_get(Jobj, "Class")){
+				Class = json_object_get_string(json_object_object_get(Jobj, "Class"));
+				sprintf(class,"\%\%\%\%%d=%s",count,Class);
+						strcat(op125tmp, class);
+				count++;
+					}
+			if(count == 1 && !json_object_object_get(Jobj, "Enterprise_Number")){
+				if(replyMsg != NULL)
+					strcat(replyMsg, "The DHCP option 125 is selected, but one or more than one value is invalid.");
+				return ZCFG_INVALID_PARAM_VALUE;
+			}
 		}
 	}
-
 	sprintf(ifname,"br%d",index-1);
 	sprintf(brPath,"Bridging.Bridge.%d",index);
 	sprintf(brPathName,"Bridging.Bridge.%d.Port.1",index);
@@ -1958,100 +1959,101 @@
 			zcfgFeJsonObjFree(IpIfaceObj);
 		}
 	}
-
-	if(!strcmp(type, "lanIntf")){
-		strcpy(lanIntf_tmp, lanintf);
-		single_lanIntf = strtok_r(lanIntf_tmp, ",", &rest_str);
-		IID_INIT(BridgeFilterIid);
-		IID_INIT(VlanIid);
-		while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_VLAN_GROUP, &VlanIid, &VlanObj) == ZCFG_SUCCESS){
-			if(atoi(json_object_get_string(json_object_object_get(VlanObj, "BrRefKey"))) == index){
-				json_object_object_add(VlanObj, "BrRefKey", json_object_new_string(""));
-				zcfgFeObjJsonSet(RDM_OID_VLAN_GROUP, &VlanIid, VlanObj, NULL);
+	if(json_object_object_get(Jobj, "type")){
+		if(!strcmp(type, "lanIntf")){
+			strcpy(lanIntf_tmp, lanintf);
+			single_lanIntf = strtok_r(lanIntf_tmp, ",", &rest_str);
+			IID_INIT(BridgeFilterIid);
+			IID_INIT(VlanIid);
+			while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_VLAN_GROUP, &VlanIid, &VlanObj) == ZCFG_SUCCESS){
+				if(atoi(json_object_get_string(json_object_object_get(VlanObj, "BrRefKey"))) == index){
+					json_object_object_add(VlanObj, "BrRefKey", json_object_new_string(""));
+					zcfgFeObjJsonSet(RDM_OID_VLAN_GROUP, &VlanIid, VlanObj, NULL);
+					zcfgFeJsonObjFree(VlanObj);
+					break;
+				}
 				zcfgFeJsonObjFree(VlanObj);
-				break;
 			}
-			zcfgFeJsonObjFree(VlanObj);
-		}
-		while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_BRIDGING_FILTER, &BridgeFilterIid, &BridgeFilterObj) == ZCFG_SUCCESS){
-			if(!strcmp(json_object_get_string(json_object_object_get(BridgeFilterObj, "Bridge")),brPath)){
-				json_object_object_add(BridgeFilterObj, "Bridge", json_object_new_string("Bridging.Bridge.1"));
-				if(!strcmp(json_object_get_string(json_object_object_get(BridgeFilterObj, "Interface")),""))
-					zcfgFeObjJsonDel(RDM_OID_BRIDGING_FILTER, &BridgeFilterIid, NULL);
-				else
-					zcfgFeObjJsonBlockedSet(RDM_OID_BRIDGING_FILTER, &BridgeFilterIid, BridgeFilterObj, NULL);
-				zcfgFeJsonObjFree(BridgeFilterObj);
+			while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_BRIDGING_FILTER, &BridgeFilterIid, &BridgeFilterObj) == ZCFG_SUCCESS){
+				if(!strcmp(json_object_get_string(json_object_object_get(BridgeFilterObj, "Bridge")),brPath)){
+					json_object_object_add(BridgeFilterObj, "Bridge", json_object_new_string("Bridging.Bridge.1"));
+					if(!strcmp(json_object_get_string(json_object_object_get(BridgeFilterObj, "Interface")),""))
+						zcfgFeObjJsonDel(RDM_OID_BRIDGING_FILTER, &BridgeFilterIid, NULL);
+					else
+						zcfgFeObjJsonBlockedSet(RDM_OID_BRIDGING_FILTER, &BridgeFilterIid, BridgeFilterObj, NULL);
+					zcfgFeJsonObjFree(BridgeFilterObj);
+				}
 			}
+			while(single_lanIntf != NULL){
+				IID_INIT(BridgeFilterIid);
+				while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_BRIDGING_FILTER, &BridgeFilterIid, &BridgeFilterObj) == ZCFG_SUCCESS){
+					if(!strcmp(json_object_get_string(json_object_object_get(BridgeFilterObj, "Interface")),single_lanIntf)){
+						json_object_object_add(BridgeFilterObj, "Bridge", json_object_new_string(brPath));
+						zcfgFeObjJsonBlockedSet(RDM_OID_BRIDGING_FILTER, &BridgeFilterIid, BridgeFilterObj, NULL);
+						zcfgFeJsonObjFree(BridgeFilterObj);
+						break;
+					}
+					zcfgFeJsonObjFree(BridgeFilterObj);
+				}
+				single_lanIntf = strtok_r(rest_str, ",", &rest_str);
+			}
+	
 		}
-		while(single_lanIntf != NULL){
+		else if(!strcmp(type, "vlangroup")){
 			IID_INIT(BridgeFilterIid);
 			while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_BRIDGING_FILTER, &BridgeFilterIid, &BridgeFilterObj) == ZCFG_SUCCESS){
-				if(!strcmp(json_object_get_string(json_object_object_get(BridgeFilterObj, "Interface")),single_lanIntf)){
-					json_object_object_add(BridgeFilterObj, "Bridge", json_object_new_string(brPath));
-					zcfgFeObjJsonBlockedSet(RDM_OID_BRIDGING_FILTER, &BridgeFilterIid, BridgeFilterObj, NULL);
+				if(!strcmp(json_object_get_string(json_object_object_get(BridgeFilterObj, "Bridge")),brPath)){
+					json_object_object_add(BridgeFilterObj, "Bridge", json_object_new_string("Bridging.Bridge.1"));
+					if(!strcmp(json_object_get_string(json_object_object_get(BridgeFilterObj, "Interface")),""))
+						zcfgFeObjJsonDel(RDM_OID_BRIDGING_FILTER, &BridgeFilterIid, NULL);
+					else
+						zcfgFeObjJsonBlockedSet(RDM_OID_BRIDGING_FILTER, &BridgeFilterIid, BridgeFilterObj, NULL);
 					zcfgFeJsonObjFree(BridgeFilterObj);
-					break;
 				}
-				zcfgFeJsonObjFree(BridgeFilterObj);
 			}
-			single_lanIntf = strtok_r(rest_str, ",", &rest_str);
-		}
-
-	}
-	else if(!strcmp(type, "vlangroup")){
-		IID_INIT(BridgeFilterIid);
-		while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_BRIDGING_FILTER, &BridgeFilterIid, &BridgeFilterObj) == ZCFG_SUCCESS){
-			if(!strcmp(json_object_get_string(json_object_object_get(BridgeFilterObj, "Bridge")),brPath)){
-				json_object_object_add(BridgeFilterObj, "Bridge", json_object_new_string("Bridging.Bridge.1"));
-				if(!strcmp(json_object_get_string(json_object_object_get(BridgeFilterObj, "Interface")),""))
-					zcfgFeObjJsonDel(RDM_OID_BRIDGING_FILTER, &BridgeFilterIid, NULL);
-				else
-					zcfgFeObjJsonBlockedSet(RDM_OID_BRIDGING_FILTER, &BridgeFilterIid, BridgeFilterObj, NULL);
-				zcfgFeJsonObjFree(BridgeFilterObj);
-			}
-		}
-		IID_INIT(VlanIid);
-		while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_VLAN_GROUP, &VlanIid, &VlanObj) == ZCFG_SUCCESS){
-			if(!strcmp(json_object_get_string(json_object_object_get(VlanObj, "GroupName")),vlanvalue)){
-				json_object_object_add(VlanObj, "BrRefKey", json_object_new_int(index));
-				zcfgFeObjJsonSet(RDM_OID_VLAN_GROUP, &VlanIid, VlanObj, NULL);
+			IID_INIT(VlanIid);
+			while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_VLAN_GROUP, &VlanIid, &VlanObj) == ZCFG_SUCCESS){
+				if(!strcmp(json_object_get_string(json_object_object_get(VlanObj, "GroupName")),vlanvalue)){
+					json_object_object_add(VlanObj, "BrRefKey", json_object_new_int(index));
+					zcfgFeObjJsonSet(RDM_OID_VLAN_GROUP, &VlanIid, VlanObj, NULL);
+					zcfgFeJsonObjFree(VlanObj);
+					break;
+				}
 				zcfgFeJsonObjFree(VlanObj);
-				break;
 			}
-			zcfgFeJsonObjFree(VlanObj);
 		}
-	}
-	else{
-		IID_INIT(VlanIid);
-		while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_VLAN_GROUP, &VlanIid, &VlanObj) == ZCFG_SUCCESS){
-			if(atoi(json_object_get_string(json_object_object_get(VlanObj, "BrRefKey"))) == index){
-				json_object_object_add(VlanObj, "BrRefKey", json_object_new_string(""));
-				zcfgFeObjJsonSet(RDM_OID_VLAN_GROUP, &VlanIid, VlanObj, NULL);
+		else{
+			IID_INIT(VlanIid);
+			while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_VLAN_GROUP, &VlanIid, &VlanObj) == ZCFG_SUCCESS){
+				if(atoi(json_object_get_string(json_object_object_get(VlanObj, "BrRefKey"))) == index){
+					json_object_object_add(VlanObj, "BrRefKey", json_object_new_string(""));
+					zcfgFeObjJsonSet(RDM_OID_VLAN_GROUP, &VlanIid, VlanObj, NULL);
+					zcfgFeJsonObjFree(VlanObj);
+					break;
+				}
 				zcfgFeJsonObjFree(VlanObj);
-				break;
 			}
-			zcfgFeJsonObjFree(VlanObj);
-		}
-		while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_BRIDGING_FILTER, &BridgeFilterIid, &BridgeFilterObj) == ZCFG_SUCCESS){
-			if(!strcmp(json_object_get_string(json_object_object_get(BridgeFilterObj, "Bridge")),brPath)){
-				json_object_object_add(BridgeFilterObj, "Bridge", json_object_new_string("Bridging.Bridge.1"));
-				if(!strcmp(json_object_get_string(json_object_object_get(BridgeFilterObj, "Interface")),""))
-					zcfgFeObjJsonDel(RDM_OID_BRIDGING_FILTER, &BridgeFilterIid, NULL);
-				else
-					zcfgFeObjJsonBlockedSet(RDM_OID_BRIDGING_FILTER, &BridgeFilterIid, BridgeFilterObj, NULL);
-				zcfgFeJsonObjFree(BridgeFilterObj);
+			while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_BRIDGING_FILTER, &BridgeFilterIid, &BridgeFilterObj) == ZCFG_SUCCESS){
+				if(!strcmp(json_object_get_string(json_object_object_get(BridgeFilterObj, "Bridge")),brPath)){
+					json_object_object_add(BridgeFilterObj, "Bridge", json_object_new_string("Bridging.Bridge.1"));
+					if(!strcmp(json_object_get_string(json_object_object_get(BridgeFilterObj, "Interface")),""))
+						zcfgFeObjJsonDel(RDM_OID_BRIDGING_FILTER, &BridgeFilterIid, NULL);
+					else
+						zcfgFeObjJsonBlockedSet(RDM_OID_BRIDGING_FILTER, &BridgeFilterIid, BridgeFilterObj, NULL);
+					zcfgFeJsonObjFree(BridgeFilterObj);
+				}
 			}
+			IID_INIT(BridgeFilterIid);
+			if((ret = zcfgFeObjJsonAdd(RDM_OID_BRIDGING_FILTER, &BridgeFilterIid, NULL)) != ZCFG_SUCCESS) {
+				return ret;
+			}
+			if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_BRIDGING_FILTER, &BridgeFilterIid, &BridgeFilterObj)) != ZCFG_SUCCESS) {
+				return ret;
+			}
+			dalcmdcirteriaToObject(BridgeFilterObj, brPath, type, macvalue, op60value, op61value, op125tmp, wildcardeb);
+			zcfgFeObjJsonSetWithoutApply(RDM_OID_BRIDGING_FILTER, &BridgeFilterIid, BridgeFilterObj, NULL);
+			zcfgFeJsonObjFree(BridgeFilterObj);
 		}
-		IID_INIT(BridgeFilterIid);
-		if((ret = zcfgFeObjJsonAdd(RDM_OID_BRIDGING_FILTER, &BridgeFilterIid, NULL)) != ZCFG_SUCCESS) {
-			return ret;
-		}
-		if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_BRIDGING_FILTER, &BridgeFilterIid, &BridgeFilterObj)) != ZCFG_SUCCESS) {
-			return ret;
-		}
-		dalcmdcirteriaToObject(BridgeFilterObj, brPath, type, macvalue, op60value, op61value, op125tmp, wildcardeb);
-		zcfgFeObjJsonSetWithoutApply(RDM_OID_BRIDGING_FILTER, &BridgeFilterIid, BridgeFilterObj, NULL);
-		zcfgFeJsonObjFree(BridgeFilterObj);
 	}
 	return ret;
 }
@@ -2146,17 +2148,15 @@
 
 zcfgRet_t zcfgFeDalIntrGrp(const char *method, struct json_object *Jobj, char *replyMsg) {
 	zcfgRet_t ret = ZCFG_SUCCESS;
-	const char *type = NULL;
-	type = json_object_get_string(json_object_object_get(Jobj, "type"));
 	
 	if(!strcmp(method, "POST")) {
-		if(type)
+		if(json_object_object_get(Jobj, "type"))
 			ret = dalcmdIntrGrpAdd(Jobj, replyMsg);
 		else
 		ret = zcfgFeDalIntrGrpAdd(Jobj, NULL);
 	}
 	else if(!strcmp(method, "PUT")) {
-		if(type)
+		if(json_object_object_get(Jobj, "TYPE"))
 			ret = dalcmdIntrGrpEdit(Jobj, replyMsg);
 		else
 		ret = zcfgFeDalIntrGrpEdit(Jobj, NULL);
Index: libzcfg_fe_dal-1.0/network/nat/zcfg_fe_dal_nat_port_mapping.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/network/nat/zcfg_fe_dal_nat_port_mapping.c	2017-06-19 10:46:48.006467686 +0800
+++ libzcfg_fe_dal-1.0/network/nat/zcfg_fe_dal_nat_port_mapping.c	2017-06-19 10:52:42.618640500 +0800
@@ -222,22 +222,23 @@
 			found = true;
 		}
 	}
-	while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_NAT_PORT_MAPPING, &Iid, &obj) == ZCFG_SUCCESS){	
-		if(strncmp(json_object_get_string(json_object_object_get(Jobj, "Description")), "APP:", 4)){
-			if(!strcmp(description, json_object_get_string(json_object_object_get(obj, "Description")))){
-				if(index == Iid.idx[0]){
-					zcfgFeJsonObjFree(obj);	
-				}
-				else{
-					zcfgFeJsonObjFree(obj);				
-					strcat(replyMsg, "Description is duplicate.");			
-					return ZCFG_INVALID_PARAM_VALUE;
-				}
-			}	
+	if(json_object_object_get(Jobj, "Description")){
+		while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_NAT_PORT_MAPPING, &Iid, &obj) == ZCFG_SUCCESS){	
+			if(strncmp(json_object_get_string(json_object_object_get(Jobj, "Description")), "APP:", 4)){
+				if(!strcmp(description, json_object_get_string(json_object_object_get(obj, "Description")))){
+					if(index == Iid.idx[0]){
+						zcfgFeJsonObjFree(obj);	
+					}
+					else{
+						zcfgFeJsonObjFree(obj);				
+						strcat(replyMsg, "Description is duplicate.");			
+						return ZCFG_INVALID_PARAM_VALUE;
+					}
+				}	
+			}
+			zcfgFeJsonObjFree(obj);	
 		}
-		zcfgFeJsonObjFree(obj);	
 	}
-
 	if(!found){
 		if(replyMsg != NULL)
 			strcpy(replyMsg, "Can not find the rule.");
Index: libzcfg_fe_dal-1.0/network/routing/zcfg_fe_dal_policy_route.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/network/routing/zcfg_fe_dal_policy_route.c	2017-06-19 10:46:48.006467686 +0800
+++ libzcfg_fe_dal-1.0/network/routing/zcfg_fe_dal_policy_route.c	2017-06-19 10:53:27.287195400 +0800
@@ -127,6 +127,8 @@
 		json_object_object_add(policyRTObj, "X_ZYXEL_SourceIfName", json_object_new_string(X_ZYXEL_SourceIfName));
 		if(json_object_object_get(Jobj, "SourcePort"))
 		json_object_object_add(policyRTObj, "X_ZYXEL_SourcePort", json_object_new_string(X_ZYXEL_SourcePort));
+		else 
+			json_object_object_add(policyRTObj, "X_ZYXEL_SourcePort", json_object_new_string("0"));
 		if(json_object_object_get(Jobj, "Protocol"))
 			json_object_object_add(policyRTObj, "X_ZYXEL_Protocol", json_object_new_int(X_ZYXEL_Protocol));
 		if(json_object_object_get(Jobj, "WANInterface"))
@@ -251,6 +253,8 @@
 				json_object_object_add(paramJobj, "protocol", json_object_new_string("TCP"));
 			else if(protocolnum == 17)
 				json_object_object_add(paramJobj, "protocol", json_object_new_string("UDP"));
+			else if(protocolnum == -1)
+				json_object_object_add(paramJobj, "protocol", json_object_new_string("ALL"));
 			json_object_object_add(paramJobj, "port", JSON_OBJ_COPY(json_object_object_get(policyRtObj, "X_ZYXEL_SourcePort")));
 			json_object_object_add(paramJobj, "WANInterface", JSON_OBJ_COPY(json_object_object_get(policyRtObj, "Interface")));
 			json_object_object_add(paramJobj, "mac", JSON_OBJ_COPY(json_object_object_get(policyRtObj, "X_ZYXEL_SourceMacAddress")));
Index: libzcfg_fe_dal-1.0/network/routing/zcfg_fe_dal_static_route.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/network/routing/zcfg_fe_dal_static_route.c	2017-06-19 10:46:47.906467687 +0800
+++ libzcfg_fe_dal-1.0/network/routing/zcfg_fe_dal_static_route.c	2017-06-19 10:53:54.449749000 +0800
@@ -312,6 +312,8 @@
 			return ZCFG_INVALID_PARAM_VALUE;		
 		}	
 		if(!strcmp(iptype, "IPv4")){
+			if(!strcmp("IPv6",json_object_get_string(json_object_object_get(objtmp, "ipver"))))
+				continue;
 			if(!strcmp(DestIPAddress,json_object_get_string(json_object_object_get(objtmp, "DestIPAddress"))) && !strcmp(DestSubnetMask,json_object_get_string(json_object_object_get(objtmp, "DestSubnetMask")))){
 				if(replyMsg != NULL)
 					strcat(replyMsg, "The rule existed, please enter another destination ip address or subnet mask.");			
@@ -319,6 +321,8 @@
 			}
 		}
 		else if(!strcmp(iptype, "IPv6")){
+			if(!strcmp("IPv4",json_object_get_string(json_object_object_get(objtmp, "ipver"))))
+				continue;
 			if(!strcmp(DestIPPrefix,json_object_get_string(json_object_object_get(objtmp, "DestIPPrefix"))) && !strcmp(NextHop,json_object_get_string(json_object_object_get(objtmp, "NextHop")))){
 				if(replyMsg != NULL)
 					strcat(replyMsg, "The rule existed, please enter another destination ip address or prefix length.");			
@@ -399,7 +403,7 @@
 		return ZCFG_INTERNAL_ERROR;
 
 	if(!strcmp(method, "PUT")) {
-		ret = zcfgFeDalStaticRouteEdit(Jobj, NULL);
+		ret = zcfgFeDalStaticRouteEdit(Jobj, replyMsg);
 	}
 	else if(!strcmp(method, "POST")) {
 		ret = zcfgFeDalStaticRouteAdd(Jobj, replyMsg);
Index: libzcfg_fe_dal-1.0/voip/phone/zcfg_fe_dal_phone_phone_device.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/voip/phone/zcfg_fe_dal_phone_phone_device.c	2017-06-19 10:46:47.610467693 +0800
+++ libzcfg_fe_dal-1.0/voip/phone/zcfg_fe_dal_phone_phone_device.c	2017-06-19 10:49:14.332727300 +0800
@@ -168,7 +168,9 @@
 	}
 
 	if(phyIntfObj != NULL){
+		if(json_object_object_get(Jobj, "LineSelect"))
 		json_object_object_add(phyIntfObj, "X_ZYXEL_LineSelect", json_object_new_string(X_ZYXEL_LineSelect));
+		if(json_object_object_get(Jobj, "DialEnable"))
 		json_object_object_add(phyIntfObj, "X_ZYXEL_Pound", json_object_new_boolean(X_ZYXEL_Pound));
 
 		if((setJson = zcfgFeJsonMultiObjAppend(RDM_OID_VOICE_PHY_INTF, &phyIid, multiJobj, phyIntfObj)) == NULL){
@@ -234,6 +236,7 @@
 	while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_VOICE_LINE, &lineIid, &accountObj) == ZCFG_SUCCESS) {
 		X_ZYXEL_PhyReferenceFXSList = json_object_get_int(json_object_object_get(accountObj, "X_ZYXEL_PhyReferenceFXSList"));
 		X_ZYXEL_PhyReferenceFXSList &= ~(1 << (portNum+phoneBindingBase-1));
+		if(json_object_object_get(Jobj, "phoneBoundingList")){
 		if(phoneBoundingList != NULL){
 			strcpy(boundList, phoneBoundingList);
 			linePath = strtok(boundList,",");
@@ -249,7 +252,7 @@
 			}
 		}
 		json_object_object_add(accountObj, "X_ZYXEL_PhyReferenceFXSList", json_object_new_int(X_ZYXEL_PhyReferenceFXSList));
-
+		}
 		if((setJson = zcfgFeJsonMultiObjAppend(RDM_OID_VOICE_LINE, &lineIid, multiJobj, accountObj)) == NULL){
 			printf("%s:(ERROR) fail to append object oid(%d)\n", __FUNCTION__, RDM_OID_VOICE_LINE);
 			zcfgFeJsonObjFree(accountObj);
