Index: libzcfg_fe_dal-1.0/network/wireless/zcfg_fe_dal_wifi_mesh.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/network/wireless/zcfg_fe_dal_wifi_mesh.c	2018-06-27 17:30:12.695931896 +0800
+++ libzcfg_fe_dal-1.0/network/wireless/zcfg_fe_dal_wifi_mesh.c	2018-06-27 17:33:44.954663205 +0800
@@ -8,6 +8,7 @@
 #include "zcfg_fe_dal_common.h"
 
 #define CWMP_SOAP_MSG_DEBUG (1 << 1)
+#define BW_80 "80MHz"
 
 #ifdef BUILD_SONIQ
 dal_param_t WIFI_SONIQ_param[] =
@@ -46,8 +47,33 @@
 	bool SoniqEnable = false;
 	SoniqEnable = json_object_get_int(json_object_object_get(Jobj, "SONiQEnable"));
 	struct json_object *SoniqObj = NULL;
-	objIndex_t SoniqIid = {0};
-	
+	struct json_object *RadioObj = NULL;
+	objIndex_t SoniqIid, RadioIid;
+	const char *Freq = NULL, *Bw = NULL;
+
+	if(SoniqEnable){
+		IID_INIT(RadioIid);     //When enabling mesh, 5G bandwidth is set to 80MHz Automatically
+		while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_WIFI_RADIO, &RadioIid, &RadioObj) == ZCFG_SUCCESS)
+		{
+			Freq = json_object_get_string(json_object_object_get(RadioObj, "OperatingFrequencyBand"));
+			Bw = json_object_get_string(json_object_object_get(RadioObj, "OperatingChannelBandwidth"));
+
+			if(strcmp(Freq, "5GHz") != 0){
+				zcfgFeJsonObjFree(RadioObj);
+				continue;
+			}
+
+			if(strcmp(Bw, BW_80) != 0){
+				json_object_object_add(RadioObj, "OperatingChannelBandwidth", json_object_new_string(BW_80));
+				json_object_object_add(RadioObj, "AutoChannelEnable", json_object_new_boolean(true));
+				/*Set channel to Auto because some are not supported in 80M, such as channel 165*/
+			}
+			zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_RADIO, &RadioIid, RadioObj, NULL);
+
+			zcfgFeJsonObjFree(RadioObj);
+		}
+	}
+
 	IID_INIT(SoniqIid);
 
 	if(zcfgFeObjJsonGet(RDM_OID_WIFI_QSTEER, &SoniqIid, &SoniqObj) == ZCFG_SUCCESS){
