Index: libzcfg_fe_dal-1.0/network/interfaceGrouping/zcfg_fe_dal_intfGrp.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/network/interfaceGrouping/zcfg_fe_dal_intfGrp.c	2018-03-02 15:04:18.844425396 +0800
+++ libzcfg_fe_dal-1.0/network/interfaceGrouping/zcfg_fe_dal_intfGrp.c	2018-03-02 16:05:20.743604500 +0800
@@ -296,6 +296,8 @@
 		char tmp[256] = {0};
 		char LAN[256] = {0};
 		char criinfo[128] = {0};
+		char vlanGroupIndex[200] = {0};
+
 		str_length = 0;
 		while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_BRIDGING_BR_PORT, &bridgeportIid, &bridgeportObj) == ZCFG_SUCCESS){
 			if(bridgeportIid.idx[1] != 1 && bridgeportIid.idx[0] == bridgeIid.idx[0]){
@@ -308,12 +309,20 @@
 			zcfgFeJsonObjFree(bridgeportObj);
 		}
 		if(!strcmp(LAN,"")){
+			int vlanGroupIndexLen = 0;
+			char *vlanGroupIdx = vlanGroupIndex;
 			IID_INIT(vlanIid);
 			while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_VLAN_GROUP, &vlanIid, &vlanObj) == ZCFG_SUCCESS){
 				vlanID = json_object_get_int(json_object_object_get(vlanObj, "BrRefKey"));
 				if(bridgeIid.idx[0] == vlanID){
 					VlanName = json_object_get_string(json_object_object_get(vlanObj, "GroupName"));
 					sprintf(criinfo,"vlangroup<%s>",VlanName);
+					if((vlanGroupIndexLen = strlen(vlanGroupIndex)) == 0){
+						sprintf(vlanGroupIdx, "%hhu", vlanIid.idx[0]);
+					}else{
+						char *pos = vlanGroupIdx+vlanGroupIndexLen;
+						sprintf(pos, ",%hhu", vlanIid.idx[0]);
+					}
 				}
 				zcfgFeJsonObjFree(vlanObj);
 			}
@@ -432,6 +440,8 @@
 		json_object_object_add(paramJobj, "idx", json_object_new_int(idx));
 		json_object_object_add(paramJobj, "lanIntf", json_object_new_string(LAN));
 		json_object_object_add(paramJobj, "Criteria", json_object_new_string(criinfo));
+		if(strlen(vlanGroupIndex))
+			json_object_object_add(paramJobj, "vlangroupnum", json_object_new_string(vlanGroupIndex));
 		json_object_array_add(Jarray, JSON_OBJ_COPY(paramJobj));
 		zcfgFeJsonObjFree(paramJobj);
 
