Index: libzcfg_fe_dal-1.0/network/homeNetworking/zcfg_fe_dal_static_dhcp.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/network/homeNetworking/zcfg_fe_dal_static_dhcp.c	2017-04-21 09:43:43.208607218 +0800
+++ libzcfg_fe_dal-1.0/network/homeNetworking/zcfg_fe_dal_static_dhcp.c	2017-04-21 09:44:36.642762600 +0800
@@ -16,35 +16,57 @@
 
 dal_param_t STATIC_DHCP_param[] =
 {
-	{"Enable", 		dalType_boolean, 	0, 	0, 	NULL},
-	{"IPAddr", 		dalType_v4Addr, 	0, 	0, 	NULL},
-	{"MACAddr", 	dalType_string, 	0, 	0, 	NULL},
-	{"targetIdx", 	dalType_int,		0,	0,	NULL},	
-	{NULL, 			0, 					0, 	0, 	NULL}
+	{"Index", 		dalType_int, 		0, 	0,	NULL,	NULL, 	dal_Edit|dal_Delete},
+	{"Enable", 		dalType_boolean, 	0, 	0,	NULL,	NULL, 	dal_Add},
+	{"IPAddr", 		dalType_v4Addr, 	0, 	0, 	NULL,	NULL,	dal_Add},
+	{"MACAddr", 	dalType_string, 	0, 	0, 	NULL,	NULL,	dal_Add},
+	{"BrWan", 		dalType_Lan,		0,	0,	NULL,	NULL,	dal_Add},
+	{NULL, 			0, 					0, 	0, 	NULL,	NULL,	NULL}
 };
 
+void zcfgFeDalShowStaticDHCP(struct json_object *Jarray){
+	int i, len = 0;
+	struct json_object *obj = NULL;
+	
+
+	if(json_object_get_type(Jarray) != json_type_array){
+		printf("wrong Jobj format!\n");
+		return;
+	}
+	printf("%-10s %-10s %-30s %-30s \n",
+		    "Index", "Status", "Mac Address", "IP Address");
+	len = json_object_array_length(Jarray);
+	for(i=0; i<len;i++){
+		obj = json_object_array_get_idx(Jarray, i);
+		printf("%-10s %-10d %-30s %-30s \n",
+		    json_object_get_string(json_object_object_get(obj, "Index")),
+		    json_object_get_boolean(json_object_object_get(obj, "Enable")),
+		    json_object_get_string(json_object_object_get(obj, "MAC_Address")),
+		    json_object_get_string(json_object_object_get(obj, "IP_Address")));
+	}
+	
+}
+
+
 zcfgRet_t zcfgFeDalStatic_DHCP_Add(struct json_object *Jobj, char *replyMsg){
 	zcfgRet_t ret = ZCFG_SUCCESS;
-	struct json_object *ipIfaceObj = NULL;
 	struct json_object *dhcpObj = NULL;
 	struct json_object *dhcpSrvObj = NULL;
-	objIndex_t ifaceIid = {0};
 	objIndex_t dhcpIid = {0};
 	objIndex_t dhcpSrvIid = {0};
 	const char *IfName = NULL;
 	const char *dhcpIfacePath = NULL;
-	int targetIdx = 0, count = 0;
+	int count = 0;
 	bool found = false;
 	bool enable = false;
 	const char *ipAddr = NULL;
 	const char *mac = NULL;
+	const char *brwan = NULL;
 	char ifacePath[32] = {0};
 
+	brwan = json_object_get_string(json_object_object_get(Jobj, "BrWan"));
 
-	targetIdx = json_object_get_int(json_object_object_get(Jobj, "targetIdx"));
-	
-	IID_INIT(ifaceIid);
-	while(zcfgFeObjJsonGetNext(RDM_OID_IP_IFACE, &ifaceIid, &ipIfaceObj) == ZCFG_SUCCESS) {
+	/*while(zcfgFeObjJsonGetNext(RDM_OID_IP_IFACE, &ifaceIid, &ipIfaceObj) == ZCFG_SUCCESS) {
 		IfName = json_object_get_string(json_object_object_get(ipIfaceObj, "X_ZYXEL_IfName"));
 		if(!strncmp(IfName, "br", 2)){
 			if(targetIdx == count){//found
@@ -55,13 +77,13 @@
 				count++;
 		}
 		zcfgFeJsonObjFree(ipIfaceObj);
-	}
+	}*/
 	
 	IID_INIT(dhcpIid);
 	IID_INIT(dhcpSrvIid);
 	while(zcfgFeObjJsonGetNext(RDM_OID_DHCPV4_SRV_POOL, &dhcpIid, &dhcpObj) == ZCFG_SUCCESS) {
 		dhcpIfacePath = json_object_get_string(json_object_object_get(dhcpObj, "Interface"));
-		if(!strcmp(ifacePath, dhcpIfacePath)){
+		if(!strcmp(brwan, dhcpIfacePath)){
 			memcpy(&dhcpSrvIid, &dhcpIid, sizeof(objIndex_t));
 			found = true;
 			zcfgFeJsonObjFree(dhcpObj);
@@ -98,13 +120,13 @@
 	struct json_object *dhcpSrvObj = NULL;
 	objIndex_t dhcpSrvIid = {0};
 	int rowIndex = 0;
-	int count = 0;
+	int count = 1;
 	bool enable = false;
 	const char *ipAddr = NULL;
 	const char *mac = NULL;
 	bool found = false;
 
-	rowIndex = json_object_get_int(json_object_object_get(Jobj, "rowIndex"));
+	rowIndex = json_object_get_int(json_object_object_get(Jobj, "Index"));
 
 	IID_INIT(dhcpSrvIid);
 	while(zcfgFeObjJsonGetNext(RDM_OID_DHCPV4_SRV_POOL_STATIC_ADDR, &dhcpSrvIid, &dhcpSrvObj) == ZCFG_SUCCESS) {
@@ -118,11 +140,10 @@
 	if(found){
 		enable = json_object_get_boolean(json_object_object_get(Jobj, "Enable"));
 		ipAddr = json_object_get_string(json_object_object_get(Jobj, "IPAddr"));
-		mac = json_object_get_string(json_object_object_get(Jobj, "MACAddr"));
-		
+		if(json_object_object_get(Jobj, "Enable") != NULL)
 		json_object_object_add(dhcpSrvObj, "Enable", json_object_new_boolean(enable));
+		if(json_object_object_get(Jobj, "IPAddr") != NULL)
 		json_object_object_add(dhcpSrvObj, "Yiaddr", json_object_new_string(ipAddr));
-		json_object_object_add(dhcpSrvObj, "Chaddr", json_object_new_string(mac));
 
 		ret = zcfgFeObjJsonSet(RDM_OID_DHCPV4_SRV_POOL_STATIC_ADDR, &dhcpSrvIid, dhcpSrvObj, NULL);
 		zcfgFeJsonObjFree(dhcpSrvObj);
@@ -134,12 +155,12 @@
 	struct json_object *dhcpSrvObj = NULL;
 	objIndex_t dhcpSrvIid = {0};
 	int rowIndex = 0;
-	int count = 0;
+	int count = 1;
 	bool found = false;
 
-	rowIndex = json_object_get_int(json_object_object_get(Jobj, "rowIndex"));
-
+	rowIndex = json_object_get_int(json_object_object_get(Jobj, "Index"));
 	IID_INIT(dhcpSrvIid);
+
 	while(zcfgFeObjJsonGetNext(RDM_OID_DHCPV4_SRV_POOL_STATIC_ADDR, &dhcpSrvIid, &dhcpSrvObj) == ZCFG_SUCCESS) {
 		if(count == rowIndex){
 			found = true;
@@ -157,6 +178,29 @@
 	return ret;
 	
 }
+
+zcfgRet_t zcfgFeDalStatic_DHCP_Get(struct json_object *Jarray, char *replyMsg){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	struct json_object *paramJobj = NULL;	//Array
+	struct json_object *dhcpSrvObj = NULL;	//Get data model parameter
+	objIndex_t dhcpSrvIid = {0};
+	int count = 1;
+	while(zcfgFeObjJsonGetNext(RDM_OID_DHCPV4_SRV_POOL_STATIC_ADDR, &dhcpSrvIid, &dhcpSrvObj) == ZCFG_SUCCESS){
+		paramJobj = json_object_new_object();
+		json_object_object_add(paramJobj, "Index", json_object_new_int(count));
+		json_object_object_add(paramJobj, "Enable", JSON_OBJ_COPY(json_object_object_get(dhcpSrvObj,"Enable")));
+		json_object_object_add(paramJobj, "MAC_Address", JSON_OBJ_COPY(json_object_object_get(dhcpSrvObj,"Chaddr")));
+		json_object_object_add(paramJobj, "IP_Address", JSON_OBJ_COPY(json_object_object_get(dhcpSrvObj,"Yiaddr")));
+		json_object_array_add(Jarray, paramJobj);
+		count++;
+		zcfgFeJsonObjFree(dhcpSrvObj);
+	}
+
+	return ret;
+	
+}
+
+
 zcfgRet_t zcfgFeDalStaticDHCP(const char *method, struct json_object *Jobj, char *replyMsg){
 	zcfgRet_t ret = ZCFG_SUCCESS;
 
@@ -169,7 +213,9 @@
 		ret = zcfgFeDalStatic_DHCP_Add(Jobj, NULL);
 	}else if(!strcmp(method, "DELETE")) {
 		ret = zcfgFeDalStatic_DHCP_Delete(Jobj, NULL);
-	}else
+	}else if(!strcmp(method, "GET"))
+		ret = zcfgFeDalStatic_DHCP_Get(Jobj, NULL);
+	else
 		printf("Unknown method:%s\n", method);
 
 	return ret;
Index: libzcfg_fe_dal-1.0/zcfg_fe_dal.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/zcfg_fe_dal.c	2017-04-21 09:43:43.324607219 +0800
+++ libzcfg_fe_dal-1.0/zcfg_fe_dal.c	2017-04-21 09:45:55.304078400 +0800
@@ -161,6 +161,7 @@
 extern void zcfgFeDalShowWan(struct json_object *Jarray);
 extern void zcfgFeDalShowDDns(struct json_object *Jarray);
 extern void zcfgFeDalShowIntrGrp(struct json_object *Jarray);
+extern void zcfgFeDalShowStaticDHCP(struct json_object *Jarray);
 extern void zcfgFeDalShowDnsEntry(struct json_object *Jarray);
 extern void zcfgFeDalShowIGMPMLD(struct json_object *Jarray);
 
@@ -188,7 +189,7 @@
 {"LANSETUP",		LANSETUP_param, 	zcfgFeDalLanSetup,		NULL,						"edit", 			"Home_Networking"},
 {"STB",				STB_param, 			zcfgFeDalSTBVendorID,	NULL,						"edit",				""},//Home_Networking
 {"SUBNET",			SUBNET_param,		zcfgFeDalAddnlSubnet,	NULL,						"edit" ,			""},//Home_Networking
-{"STATICDHCP",		STATIC_DHCP_param,	zcfgFeDalStaticDHCP,	NULL,						"add|edit|delete",	""},//Home_Networking
+{"STATICDHCP",		STATIC_DHCP_param,	zcfgFeDalStaticDHCP,	zcfgFeDalShowStaticDHCP,	"get|add|edit|delete",	"Home_Networking"},//Home_Networking
 {"VLANGRP", 		VLANGRP_param,		zcfgFeDalVlanGroup,		NULL,						"add|edit|delete",	""},//Vlan_Group
 {"IGMPMLD", 		IGMPMLD_param,		zcfgFeDalIGMPMLD,		zcfgFeDalShowIGMPMLD,		"get|edit",			"IGMP/MLD"},//IGMP_MLD
 {"FIREWALL",		FIREWALL_param, 	zcfgFeDalFirewall,		NULL,						"add|edit",			""}, //Firewall
@@ -239,6 +240,219 @@
 {"LanHosts",		NETWORK_MAP_param, zcfgFeDalNetworkMAP,	zcfgFeDalShowNetworkMAP,		"get",				"Status"},
 {NULL,				NULL,				NULL, 					NULL,						NULL,				 NULL}
 };
+/*
+ * return WAN and LAN list in Jason Array.
+ * Format:Jarray.i.NAME = Name
+ *           Jarray.i.IpIfacePath = IP.Interface.i
+ *           Jarray.i.Type : LAN|WAN
+ *           Jarray.i.LinkType = ATM|PTM|ETH|PON|USB (For WAN only)
+ *           Jarray.i.ConnectionType = IP_Routed|IP_Bridged (For WAN only)
+ *           Jarray.i.Encapsulation = IPoE|IPoA|PPPoE|PPPoA (For WAN only, NUL if LinkType is USB))
+ *           Jarray.i.BindToIntfGrp = true|false (For WAN only)
+ *           Jarray.i.Group_WAN_IpIface = IP.Interface.i,IP.Interface.i,IP.Interface.i,... (For LAN only)
+ *           Jarray.i.BridgingBrPath = Bridging.Bridge.i (For LAN only)
+ */
+zcfgRet_t getWanLanList(struct json_object **Jarray){
+	struct json_object *ipIfaceJarray, *pppIfaceJarray, *vlanTermJarray, *ethLinkJarray, *bridgeBrJarray;
+	struct json_object *ipIfaceObj, *pppIfaceObj, *vlanTermObj, *ethLinkObj, *bridgeBrObj;
+	struct json_object *Jobj = NULL;
+	char ifacePath[32] = {0}, BridgingBrPath[32] = {0};
+	int len, i;
+	unsigned char idx;
+	const char *X_ZYXEL_BridgeName, *X_ZYXEL_SrvName, *X_ZYXEL_ConnectionType, *X_ZYXEL_IfName, *X_ZYXEL_Group_WAN_IpIface, *LowerLayers;
+	char intfGrpWANList[256] = {0};
+	char *intf = NULL, *tmp_ptr = NULL;
+	const char *IpIfacePath = NULL;
+
+	zcfgFeWholeObjJsonGet("Device.IP.Interface.", &ipIfaceJarray);
+	zcfgFeWholeObjJsonGet("Device.PPP.Interface.", &pppIfaceJarray);
+	zcfgFeWholeObjJsonGet("Device.Ethernet.VLANTermination.", &vlanTermJarray);
+	zcfgFeWholeObjJsonGet("Device.Ethernet.Link.", &ethLinkJarray);
+	zcfgFeWholeObjJsonGet("Device.Bridging.Bridge.", &bridgeBrJarray);
+
+	if(ipIfaceJarray==NULL||pppIfaceJarray==NULL||vlanTermJarray==NULL||ethLinkJarray==NULL||bridgeBrJarray==NULL)
+		return ZCFG_INTERNAL_ERROR;
+
+	*Jarray = json_object_new_array();
+
+	len = json_object_array_length(ipIfaceJarray);
+	for(i=0;i<len;i++){
+		ipIfaceObj = json_object_array_get_idx(ipIfaceJarray, i);
+		X_ZYXEL_SrvName = json_object_get_string(json_object_object_get(ipIfaceObj, "X_ZYXEL_SrvName"));
+		X_ZYXEL_ConnectionType = json_object_get_string(json_object_object_get(ipIfaceObj, "X_ZYXEL_ConnectionType"));
+		LowerLayers = json_object_get_string(json_object_object_get(ipIfaceObj, "LowerLayers"));
+		X_ZYXEL_Group_WAN_IpIface = json_object_get_string(json_object_object_get(ipIfaceObj, "X_ZYXEL_Group_WAN_IpIface"));
+		sprintf(ifacePath, "IP.Interface.%u", i+1);
+		if(X_ZYXEL_SrvName==NULL || X_ZYXEL_ConnectionType==NULL || LowerLayers==NULL){
+			continue;
+		}
+			
+		Jobj = json_object_new_object();
+		json_object_object_add(Jobj, "IpIfacePath", json_object_new_string(ifacePath));
+		json_object_object_add(Jobj, "Name", json_object_new_string(X_ZYXEL_SrvName));
+
+		json_object_object_add(Jobj, "Type", json_object_new_string("WAN"));
+		json_object_object_add(Jobj, "ConnectionType", json_object_new_string(X_ZYXEL_ConnectionType));
+		json_object_object_add(Jobj, "BindToIntfGrp", json_object_new_boolean(false));
+		int count = 0;
+		const char *HigherLayer = "IP.Interface.";
+		while(count < 4){
+			count++;
+			if(LowerLayers == NULL){
+				json_object_put(Jobj);
+				Jobj = NULL;
+				break;
+			}
+			if(!strncmp(HigherLayer, "IP.Interface.", 13)){
+				if(!strncmp(LowerLayers, "PPP.Interface.", 14)){
+					sscanf(LowerLayers, "PPP.Interface.%hhu", &idx);
+					pppIfaceObj = json_object_array_get_idx(pppIfaceJarray, idx-1);
+					HigherLayer = LowerLayers;
+					LowerLayers = json_object_get_string(json_object_object_get(pppIfaceObj, "LowerLayers"));
+				}
+				else if(!strncmp("Ethernet.VLANTermination.", LowerLayers, 25)){
+					sscanf(LowerLayers, "Ethernet.VLANTermination.%hhu", &idx);
+					vlanTermObj = json_object_array_get_idx(vlanTermJarray, idx-1);
+					HigherLayer = LowerLayers;
+					LowerLayers = json_object_get_string(json_object_object_get(vlanTermObj, "LowerLayers"));
+					
+					json_object_object_add(Jobj, "Encapsulation", json_object_new_string("IPoE"));
+				}
+				else if(!strncmp("Ethernet.Link.", LowerLayers, 14)){
+					sscanf(LowerLayers, "Ethernet.Link.%hhu", &idx);
+					ethLinkObj = json_object_array_get_idx(ethLinkJarray, idx-1);
+					HigherLayer = LowerLayers;
+					LowerLayers = json_object_get_string(json_object_object_get(ethLinkObj, "LowerLayers"));
+				}
+				else if(!strncmp("ATM.Link.", LowerLayers, 9) && !strcmp("IP_Routed", X_ZYXEL_ConnectionType)){
+					json_object_object_add(Jobj, "Encapsulation", json_object_new_string("IPoA"));
+					json_object_object_add(Jobj, "LinkType", json_object_new_string("ATM"));
+					break;
+				}
+				else{
+					json_object_put(Jobj);
+					Jobj = NULL;
+					break;
+				}
+			}
+			else if(!strncmp(HigherLayer, "PPP.Interface.", 14)){
+				if(!strncmp("Ethernet.VLANTermination.", LowerLayers, 25)){
+					sscanf(LowerLayers, "Ethernet.VLANTermination.%hhu", &idx);
+					vlanTermObj = json_object_array_get_idx(vlanTermJarray, idx-1);
+					HigherLayer = LowerLayers;
+					LowerLayers = json_object_get_string(json_object_object_get(vlanTermObj, "LowerLayers"));
+					json_object_object_add(Jobj, "Encapsulation", json_object_new_string("PPPoE"));
+				}
+				else if(!strncmp("ATM.Link.", LowerLayers, 9)){
+					json_object_object_add(Jobj, "Encapsulation", json_object_new_string("PPPoA"));
+					json_object_object_add(Jobj, "LinkType", json_object_new_string("ATM"));
+					break;
+				}
+				else if(!strncmp("USB.Interface.", LowerLayers, 14)){
+					json_object_object_add(Jobj, "LinkType", json_object_new_string("USB"));
+					break;
+				}
+				else{
+					json_object_put(Jobj);
+					Jobj = NULL;
+					break;
+				}
+			}
+			else if(!strncmp("Ethernet.VLANTermination.", HigherLayer, 25)){
+				if(!strncmp("Ethernet.Link.", LowerLayers, 14)){
+					sscanf(LowerLayers, "Ethernet.Link.%hhu", &idx);
+					ethLinkObj = json_object_array_get_idx(ethLinkJarray, idx-1);
+					HigherLayer = LowerLayers;
+					LowerLayers = json_object_get_string(json_object_object_get(ethLinkObj, "LowerLayers"));
+				}
+				else{
+					json_object_put(Jobj);
+					Jobj = NULL;
+					break;
+				}
+			}
+			else if(!strncmp("Ethernet.Link.", HigherLayer, 14)){
+				if(!strncmp("ATM.Link.", LowerLayers, 9)){
+					json_object_object_add(Jobj, "LinkType", json_object_new_string("ATM"));
+					break;
+				}
+				else if(!strncmp("PTM.Link.", LowerLayers, 9)){
+					json_object_object_add(Jobj, "LinkType", json_object_new_string("PTM"));
+					break;
+				}
+				else if(!strncmp("Ethernet.Interface.", LowerLayers, 19)){
+					json_object_object_add(Jobj, "LinkType", json_object_new_string("ETH"));
+					break;
+				}
+				else if(!strncmp("Optical.Interface.", LowerLayers, 18)){
+					json_object_object_add(Jobj, "LinkType", json_object_new_string("PON"));
+					break;
+				}
+				else if(!strncmp("USB.Interface.", LowerLayers, 14)){
+					json_object_object_add(Jobj, "LinkType", json_object_new_string("USB"));
+					break;
+				}
+				else if(!strncmp("Bridging.Bridge.", LowerLayers, 16)){
+					sscanf(LowerLayers, "Bridging.Bridge.%hhu.Port.1", &idx);
+					bridgeBrObj = json_object_array_get_idx(bridgeBrJarray, idx-1);
+					X_ZYXEL_BridgeName = json_object_get_string(json_object_object_get(bridgeBrObj, "X_ZYXEL_BridgeName"));
+					if(X_ZYXEL_BridgeName == NULL){
+						json_object_put(Jobj);
+						Jobj = NULL;
+						break;
+					}
+					if(X_ZYXEL_Group_WAN_IpIface == NULL)
+						X_ZYXEL_Group_WAN_IpIface = "";
+						
+					sprintf(BridgingBrPath, "Bridging.Bridge.%u", idx);
+					json_object_object_add(Jobj, "Name", json_object_new_string(X_ZYXEL_BridgeName));
+					json_object_object_add(Jobj, "Type", json_object_new_string("LAN"));
+					json_object_object_add(Jobj, "BridgingBrPath", json_object_new_string(BridgingBrPath));
+					json_object_object_add(Jobj, "Group_WAN_IpIface", json_object_new_string(X_ZYXEL_Group_WAN_IpIface));
+					strcat(intfGrpWANList, X_ZYXEL_Group_WAN_IpIface);
+					strcat(intfGrpWANList, ",");
+					break;
+				}
+				else if(!strcmp("", LowerLayers)){
+					if(json_object_get_boolean(json_object_object_get(ethLinkObj, "X_ZYXEL_OrigEthWAN")) == false){
+						json_object_put(Jobj);
+						Jobj = NULL;
+						break;
+					}
+					json_object_object_add(Jobj, "LinkType", json_object_new_string("ETH"));
+					break;
+				}
+				else{
+					json_object_put(Jobj);
+					Jobj = NULL;
+					break;
+				}
+			}
+		}
+		
+		if(Jobj != NULL)
+			json_object_array_add(*Jarray, Jobj);
+	}
+
+	if(strcmp(intfGrpWANList, "")){
+		intf = strtok_r(intfGrpWANList, ",", &tmp_ptr);
+		while(intf != NULL){
+			if(*intf != '\0'){
+				len = json_object_array_length(*Jarray);
+				for(i=0;i<len;i++){
+					Jobj = json_object_array_get_idx(*Jarray, i);
+					IpIfacePath = json_object_get_string(json_object_object_get(Jobj, "IpIfacePath"));
+					if(!strcmp(IpIfacePath, intf)){
+						json_object_object_add(Jobj, "BindToIntfGrp", json_object_new_boolean(true));
+					}
+				}
+			}
+			intf = strtok_r(NULL, ",", &tmp_ptr);
+		}
+	}
+	//printf("*Jarray=%s\n", json_object_to_json_string(*Jarray));
+	return ZCFG_SUCCESS;
+}
 
 bool findInList(char *list, char *target, char *separator){
 	char *buf, *ptr, *tmp_ptr = NULL;
Index: libzcfg_fe_dal-1.0/zcfg_fe_dal.h
===================================================================
--- libzcfg_fe_dal-1.0.orig/zcfg_fe_dal.h	2015-09-10 18:09:08.000000000 +0800
+++ libzcfg_fe_dal-1.0/zcfg_fe_dal.h	2017-04-21 09:46:37.571252300 +0800
@@ -1,4 +1,5 @@
 
 zcfgRet_t zcfgFeDalHandler(const char *handlerName, const char *method, struct json_object *Jobj, char *replyMsg);
+zcfgRet_t getWanLanList(struct json_object **Jarray);
 
 
