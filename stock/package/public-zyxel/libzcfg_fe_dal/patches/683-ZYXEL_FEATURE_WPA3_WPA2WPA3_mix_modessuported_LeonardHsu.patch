Index: libzcfg_fe_dal-1.0/network/wireless/zcfg_fe_dal_wifi_general.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/network/wireless/zcfg_fe_dal_wifi_general.c	2019-06-27 13:59:57.992471998 +0800
+++ libzcfg_fe_dal-1.0/network/wireless/zcfg_fe_dal_wifi_general.c	2019-06-27 15:52:47.608471998 +0800
@@ -1847,9 +1847,9 @@
 }
 zcfgRet_t validateWifiSecObj(struct json_object *Jobj, char *replyMsg){
 	zcfgRet_t ret = ZCFG_SUCCESS;
-	objIndex_t wifiWPSIid, radioIid, ssidIid;
-	struct json_object *wifiWPSObj = NULL, *wlst = NULL, *radioObj = NULL, *tmpJobj = NULL, *ssidObj = NULL;
-	char iface[16] = {0}, *tmp, *sendBuf = NULL, *recvBuf = NULL, lowerlayers[20], wifi_radio[2];
+	objIndex_t wifiWPSIid, radioIid, ssidIid, secIid;
+	struct json_object *wifiWPSObj = NULL, *wlst = NULL, *radioObj = NULL, *tmpJobj = NULL, *ssidObj = NULL, *secObj = NULL;
+	char iface[16] = {0}, *tmp, *sendBuf = NULL, *recvBuf = NULL, lowerlayers[20] = {0}, wifi_radio[2] = {0}, ModesSupported[200] = {0};
 	struct json_object *chObject = NULL;
 	zcfgMsg_t *sendMsgHdr = NULL;
 	int tmpInt, ssidIndex;
@@ -1898,6 +1898,14 @@
 			}
 		}
 	}
+	IID_INIT(secIid);
+	secIid.level = 1;
+	secIid.idx[0] = ssidIndex;
+	if(zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_ACCESS_POINT_SEC, &secIid, &secObj) == ZCFG_SUCCESS){
+		strcpy(ModesSupported, json_object_get_string(json_object_object_get(secObj, "ModesSupported")));
+		json_object_put(secObj);
+		ssidObj = NULL;
+	}
 	if(!json_object_object_get(Jobj, "securityLevel") && !json_object_object_get(Jobj, "secMode")){
 		if(json_object_object_get(Jobj, "wep")||
 			json_object_object_get(Jobj, "WEPKey")||
@@ -2048,7 +2056,7 @@
 #ifndef ZYXEL_SUPPORT_8021X
 		// wpaMode must be set to a proper value
 #ifdef ZYXEL_WIFI_SUPPORT_WPA_MIX_MODE
-		if(showwpa3mode == 1){
+		if(showwpa3mode == 1 && strstr(ModesSupported, "WPA3-SAE")){
 			if(strcmp(wpaMode,"wpa2psk") && strcmp(wpaMode,"wpawpa2psk") && strcmp(wpaMode,"wpa3sae") && strcmp(wpaMode,"wpa2pskwpa3sae")){
 				printf("wpaMode must be set to \"wpa2psk\" or \"wpawpa2psk\" or \"wpa3sae\" or \"wpa2pskwpa3sae\".\n");
 				return ZCFG_INVALID_PARAM_VALUE;
@@ -2062,7 +2070,7 @@
 			}
  		}
 #else
- 		if(showwpa3mode == 1){
+ 		if(showwpa3mode == 1 && strstr(ModesSupported, "WPA3-SAE")){
 			if(strcmp(wpaMode,"wpa2psk") && strcmp(wpaMode,"wpa2") && strcmp(wpaMode,"wpa3sae") && strcmp(wpaMode,"wpa2pskwpa3sae")){
 				printf("wpaMode must be set to \"wpa2psk\" or \"wpa2\" or \"wpa3sae\" or \"wpa2pskwpa3sae\".\n");
 				return ZCFG_INVALID_PARAM_VALUE;
