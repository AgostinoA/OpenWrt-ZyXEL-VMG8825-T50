Index: libzcfg_fe_dal-1.0/voip/sip/zcfg_fe_dal_sip_provider.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ libzcfg_fe_dal-1.0/voip/sip/zcfg_fe_dal_sip_provider.c	2016-10-31 10:14:22.329898000 +0800
@@ -0,0 +1,726 @@
+
+#include <json/json.h>
+
+#include "zcfg_common.h"
+#include "zcfg_fe_rdm_string.h"
+#include "zcfg_fe_rdm_struct.h"
+#include "zcfg_rdm_oid.h"
+#include "zcfg_rdm_obj.h"
+#include "zcfg_debug.h"
+#include "zcfg_msg.h"
+#include "zcfg_fe_dal_common.h"
+#include "zcfg_webgui_flag.h"
+
+dal_param_t VOIP_PROFILE_param[]={
+	{"ProfName",								dalType_string,	0,	0,	NULL},
+	{"ProfleEnable",							dalType_string,0,	0,	NULL},
+	{"X_ZYXEL_BoundIfName",						dalType_string,	0,	0,	NULL},
+	{"X_ZYXEL_BoundIfList",						dalType_string,	0,	0,	NULL},
+	{"DTMFMethodG711",							dalType_string,	0,	0,	NULL},
+	{"DTMFMethod",								dalType_string,	0,	0,	NULL},
+	{"DigitMapEnable",							dalType_boolean,0,	0,	NULL},
+	{"X_ZYXEL_VoipIOPFlags",					dalType_int,	0,	0,	NULL},
+	{"X_ZYXEL_FaxMode",							dalType_string,	0,	0,	NULL},
+	{"FAXPassThrough",							dalType_string,	0,	0,	NULL},
+	{"ModemPassThrough",						dalType_string,	0,	0,	NULL},
+	{"X_ZYXEL_IgnoreDirectIP",					dalType_boolean,0,	0,	NULL},
+	{"UserAgentPort",							dalType_int,	0,	0,	NULL},
+	{"ProxyServer",								dalType_string,	0,	0,	NULL},
+	{"ProxyServerPort",							dalType_int,	0,	0,	NULL},
+	{"ProxyServerTransport",					dalType_string,	0,	0,	NULL},
+	{"RegistrarServer",							dalType_string,	0,	0,	NULL},
+	{"RegistrarServerPort",						dalType_int,	0,	0,	NULL},
+	{"RegistrarServerTransport",				dalType_string,	0,	0,	NULL},
+	{"UserAgentDomain",							dalType_string,	0,	0,	NULL},
+	{"UserAgentTransport",						dalType_string,	0,	0,	NULL},
+	{"OutboundProxy",							dalType_string,	0,	0,	NULL},
+	{"OutboundProxyPort",						dalType_int,	0,	0,	NULL},
+	{"X_ZYXEL_Option120Use",					dalType_boolean,0,	0,	NULL},
+	{"RegisterExpires",							dalType_int,	0,	0,	NULL},
+	{"RegisterRetryInterval",					dalType_int,	0,	0,	NULL},
+	{"InviteExpires",							dalType_int,	0,	0,	NULL},
+	{"ReInviteExpires",							dalType_int,	0,	0,	NULL},
+	{"X_ZYXEL_MinSE",							dalType_int,	0,	0,	NULL},
+	{"X_ZYXEL_Rfc3263Support",					dalType_boolean,0,	0,	NULL},
+	{"X_ZYXEL_Rfc3262Support",					dalType_boolean,0,	0,	NULL},
+	{"LocalPortMin",							dalType_int,	0,	0,	NULL},
+	{"LocalPortMax",							dalType_int,	0,	0,	NULL},
+	{"SRTPEnable",								dalType_boolean,0,	0,	NULL},
+	{"X_ZYXEL_Crypto_Suite_Name",				dalType_string,	0,	0,	NULL},
+	{"InterDigitTimerStd",						dalType_int,	0,	0,	NULL},
+	{"X_ZYXEL_CALL_RETURN",						dalType_string,	0,	0,	NULL},
+	{"CLIR_DEACTIVATE",							dalType_string,	0,	0,	NULL},
+	{"CLIR_DEACTIVATE",							dalType_string,	0,	0,	NULL},
+	{"CA_ACTIVATE",								dalType_string,	0,	0,	NULL},
+	{"X_ZYXEL_CA_DISABLE",						dalType_string,	0,	0,	NULL},
+	{"CW_ACTIVATE",								dalType_string,	0,	0,	NULL},
+	{"CW_DEACTIVATE",							dalType_string,	0,	0,	NULL},
+	{"X_ZYXEL_IVR",								dalType_string,	0,	0,	NULL},
+	{"X_ZYXEL_INTERNALCALL",					dalType_string,	0,	0,	NULL},
+	{"X_ZYXEL_TRANSFER_ACTIVE",					dalType_string,	0,	0,	NULL},
+	{"CFU_ACTIVATE",							dalType_string,	0,	0,	NULL},
+	{"CFU_DEACTIVATE",							dalType_string,	0,	0,	NULL},
+	{"CFNR_ACTIVATE",							dalType_string,	0,	0,	NULL},
+	{"CFNR_DEACTIVATE",							dalType_string,	0,	0,	NULL},
+	{"CFB_ACTIVATE",							dalType_string,	0,	0,	NULL},
+	{"CFB_DEACTIVATE",							dalType_string,	0,	0,	NULL},
+	{"X_ZYXEL_ONESHOT_CW_ACTIVATE",				dalType_string,	0,	0,	NULL},
+	{"X_ZYXEL_ONESHOT_CW_DEACTIVATE",			dalType_string,	0,	0,	NULL},
+	{"X_ZYXEL_DND_ENABLE",						dalType_string,	0,	0,	NULL},
+	{"X_ZYXEL_DND_DISABLE",						dalType_string,	0,	0,	NULL},
+	{"CCBS_DEACTIVATE",							dalType_string,	0,	0,	NULL},
+	{"X_ZYXEL_OUTGOING_SIP",					dalType_string,	0,	0,	NULL},
+	{"X_ZYXEL_CALL_REDIAL",						dalType_string,	0,	0,	NULL},
+	{"X_ZYXEL_CALL_REDIAL",						dalType_string,	0,	0,	NULL},
+	{"X_SINGLE_INTERNAL_CALL",					dalType_string,	0,	0,	NULL},
+	{NULL,										0,				0,	0,	NULL},
+};
+
+const char* ProfName;
+const char* ProfleEnable;
+const char* X_ZYXEL_BoundIfName;
+const char* X_ZYXEL_BoundIfList;
+const char* DTMFMethodG711;
+const char* DTMFMethod;
+bool DigitMapEnable;
+const char* DigitMap;
+unsigned int X_ZYXEL_VoipIOPFlags;
+const char* X_ZYXEL_FaxMode;
+const char* FAXPassThrough;
+const char* ModemPassThrough;
+bool X_ZYXEL_IgnoreDirectIP;
+unsigned int UserAgentPort;
+const char* ProxyServer;
+unsigned int ProxyServerPort;
+const char* ProxyServerTransport;
+const char* RegistrarServer;
+unsigned int RegistrarServerPort;
+const char* RegistrarServerTransport;
+const char* UserAgentDomain;
+const char* UserAgentTransport;
+const char* OutboundProxy;
+unsigned int OutboundProxyPort;
+bool X_ZYXEL_Option120Use;
+unsigned int RegisterExpires;
+unsigned int RegisterRetryInterval;
+unsigned int InviteExpires;
+unsigned int ReInviteExpires;
+unsigned int X_ZYXEL_MinSE;
+bool X_ZYXEL_Rfc3263Support;
+bool X_ZYXEL_Rfc3262Support;
+unsigned int LocalPortMin;
+unsigned int LocalPortMax;
+unsigned int DSCPMark;
+bool SRTPEnable;
+const char* X_ZYXEL_Crypto_Suite_Name;
+unsigned int InterDigitTimerStd;
+const char* X_ZYXEL_CALL_RETURN;
+const char* CLIR_DEACTIVATE;
+const char* CLIR_ACTIVATE;
+const char* CA_ACTIVATE;
+const char* X_ZYXEL_CA_DISABLE;
+const char* CW_ACTIVATE;
+const char* CW_DEACTIVATE;
+const char* X_ZYXEL_IVR;
+const char* X_ZYXEL_INTERNALCALL;
+const char* X_ZYXEL_TRANSFER_ACTIVE;
+const char* CFU_ACTIVATE;
+const char* CFU_DEACTIVATE;
+const char* CFNR_ACTIVATE;
+const char* CFNR_DEACTIVATE;
+const char* CFB_ACTIVATE;
+const char* CFB_DEACTIVATE;
+const char* X_ZYXEL_ONESHOT_CW_ACTIVATE;
+const char* X_ZYXEL_ONESHOT_CW_DEACTIVATE;
+const char* X_ZYXEL_DND_ENABLE;
+const char* X_ZYXEL_DND_DISABLE;
+const char* CCBS_DEACTIVATE;
+const char* X_ZYXEL_OUTGOING_SIP;
+const char* X_ZYXEL_CALL_REDIAL;
+const char* X_SINGLE_INTERNAL_CALL;
+
+struct json_object *multiJobj;
+struct json_object *guiCustObj;
+struct json_object *profObj;
+struct json_object *profSipObj;
+struct json_object *profRtpObj;
+struct json_object *profRtpSrtpObj;
+struct json_object *profNumPlanpObj;
+struct json_object *profNumPlanpInfoObj;
+struct json_object *accountDefaultObj;
+
+unsigned int flag1;
+
+objIndex_t cFlagIid = {0};
+objIndex_t profIid = {0};
+objIndex_t profPrefixInfoIid = {0};
+
+void zcfgFeDalCustomflagGet(){
+	IID_INIT(cFlagIid);
+	if(zcfgFeObjJsonGetWithoutUpdate(RDM_OID_GUI_CUSTOMIZATION, &cFlagIid, &guiCustObj) == ZCFG_SUCCESS){
+		flag1 = json_object_get_int(json_object_object_get(guiCustObj, "Flag1"));
+		zcfgFeJsonObjFree(guiCustObj);
+		return;
+	}
+
+	return;
+}
+
+void freeAllProfObjects(){
+	if(multiJobj) json_object_put(multiJobj);
+	if(guiCustObj) json_object_put(guiCustObj);
+	if(profObj) json_object_put(profObj);
+	if(profSipObj) json_object_put(profSipObj);
+	if(profRtpSrtpObj) json_object_put(profRtpSrtpObj);
+	if(profRtpObj) json_object_put(profRtpObj);
+	if(profNumPlanpObj) json_object_put(profNumPlanpObj);
+	if(profNumPlanpInfoObj) json_object_put(profNumPlanpInfoObj);
+	if(accountDefaultObj) json_object_put(accountDefaultObj);
+
+	return;
+}
+
+void getProfBasicInfo(struct json_object *Jobj){
+	ProfName = json_object_get_string(json_object_object_get(Jobj, "ProfName"));
+	ProfleEnable = json_object_get_string(json_object_object_get(Jobj, "ProfleEnable"));
+	X_ZYXEL_BoundIfName = json_object_get_string(json_object_object_get(Jobj, "X_ZYXEL_BoundIfName"));
+	X_ZYXEL_BoundIfList = json_object_get_string(json_object_object_get(Jobj, "X_ZYXEL_BoundIfList"));
+	DTMFMethodG711 = json_object_get_string(json_object_object_get(Jobj, "DTMFMethodG711"));
+	DTMFMethod = json_object_get_string(json_object_object_get(Jobj, "DTMFMethod"));
+	if(SHOW_NOT_USE_OFTEN_VOIP_SETTING&flag1){
+		DigitMapEnable = json_object_get_boolean(json_object_object_get(Jobj, "DigitMapEnable"));
+		DigitMap = json_object_get_string(json_object_object_get(Jobj, "DigitMap"));
+	}
+	X_ZYXEL_VoipIOPFlags = json_object_get_int(json_object_object_get(Jobj, "X_ZYXEL_VoipIOPFlags"));
+	X_ZYXEL_FaxMode = json_object_get_string(json_object_object_get(Jobj, "X_ZYXEL_FaxMode"));
+	FAXPassThrough = json_object_get_string(json_object_object_get(Jobj, "FAXPassThrough"));
+	ModemPassThrough = json_object_get_string(json_object_object_get(Jobj, "ModemPassThrough"));
+	X_ZYXEL_IgnoreDirectIP = json_object_get_boolean(json_object_object_get(Jobj, "X_ZYXEL_IgnoreDirectIP"));
+	UserAgentPort = json_object_get_int(json_object_object_get(Jobj, "UserAgentPort"));
+	ProxyServer = json_object_get_string(json_object_object_get(Jobj, "ProxyServer"));
+	ProxyServerPort = json_object_get_int(json_object_object_get(Jobj, "ProxyServerPort"));
+	ProxyServerTransport = json_object_get_string(json_object_object_get(Jobj, "ProxyServerTransport"));
+	RegistrarServer = json_object_get_string(json_object_object_get(Jobj, "RegistrarServer"));
+	RegistrarServerPort = json_object_get_int(json_object_object_get(Jobj, "RegistrarServerPort"));
+	RegistrarServerTransport = json_object_get_string(json_object_object_get(Jobj, "RegistrarServerTransport"));
+	UserAgentDomain = json_object_get_string(json_object_object_get(Jobj, "UserAgentDomain"));
+	UserAgentTransport = json_object_get_string(json_object_object_get(Jobj, "UserAgentTransport"));
+	OutboundProxy = json_object_get_string(json_object_object_get(Jobj, "OutboundProxy"));
+	OutboundProxyPort = json_object_get_int(json_object_object_get(Jobj, "OutboundProxyPort"));
+	X_ZYXEL_Option120Use = json_object_get_boolean(json_object_object_get(Jobj, "X_ZYXEL_Option120Use"));
+	RegisterExpires = json_object_get_int(json_object_object_get(Jobj, "RegisterExpires"));
+	RegisterRetryInterval = json_object_get_int(json_object_object_get(Jobj, "RegisterRetryInterval"));
+	InviteExpires = json_object_get_int(json_object_object_get(Jobj, "InviteExpires"));
+	ReInviteExpires = json_object_get_int(json_object_object_get(Jobj, "ReInviteExpires"));
+	X_ZYXEL_MinSE = json_object_get_int(json_object_object_get(Jobj, "X_ZYXEL_MinSE"));
+	DSCPMark = json_object_get_int(json_object_object_get(Jobj, "DSCPMark"));
+	X_ZYXEL_Rfc3263Support = json_object_get_boolean(json_object_object_get(Jobj, "X_ZYXEL_Rfc3263Support"));
+	X_ZYXEL_Rfc3262Support = json_object_get_boolean(json_object_object_get(Jobj, "X_ZYXEL_Rfc3262Support"));
+	LocalPortMin = json_object_get_int(json_object_object_get(Jobj, "LocalPortMin"));
+	LocalPortMax = json_object_get_int(json_object_object_get(Jobj, "LocalPortMax"));
+	DSCPMark = json_object_get_int(json_object_object_get(Jobj, "DSCPMark"));
+	if(!(HIDE_VOICE_SRTP&flag1)){
+		SRTPEnable = json_object_get_boolean(json_object_object_get(Jobj, "SRTPEnable"));
+		X_ZYXEL_Crypto_Suite_Name = json_object_get_string(json_object_object_get(Jobj, "X_ZYXEL_Crypto_Suite_Name"));
+	}
+	InterDigitTimerStd = json_object_get_int(json_object_object_get(Jobj, "InterDigitTimerStd"));
+	if(SHOW_NOT_USE_OFTEN_VOIP_SETTING&flag1){
+		X_ZYXEL_CALL_RETURN = json_object_get_string(json_object_object_get(Jobj, "X_ZYXEL_CALL_RETURN"));
+		CLIR_DEACTIVATE  = json_object_get_string(json_object_object_get(Jobj, "CLIR_DEACTIVATE"));
+		CLIR_ACTIVATE  = json_object_get_string(json_object_object_get(Jobj, "CLIR_ACTIVATE"));
+		CA_ACTIVATE  = json_object_get_string(json_object_object_get(Jobj, "CA_ACTIVATE"));
+		X_ZYXEL_CA_DISABLE  = json_object_get_string(json_object_object_get(Jobj, "X_ZYXEL_CA_DISABLE"));
+		CW_ACTIVATE = json_object_get_string(json_object_object_get(Jobj, "CW_ACTIVATE"));
+		CW_DEACTIVATE = json_object_get_string(json_object_object_get(Jobj, "CW_DEACTIVATE"));
+		X_ZYXEL_IVR = json_object_get_string(json_object_object_get(Jobj, "X_ZYXEL_IVR"));
+		X_ZYXEL_INTERNALCALL = json_object_get_string(json_object_object_get(Jobj, "X_ZYXEL_INTERNALCALL"));
+		X_ZYXEL_TRANSFER_ACTIVE = json_object_get_string(json_object_object_get(Jobj, "X_ZYXEL_TRANSFER_ACTIVE"));
+		CFU_ACTIVATE = json_object_get_string(json_object_object_get(Jobj, "CFU_ACTIVATE"));
+		CFU_DEACTIVATE = json_object_get_string(json_object_object_get(Jobj, "CFU_DEACTIVATE"));
+		CFNR_ACTIVATE = json_object_get_string(json_object_object_get(Jobj, "CFNR_ACTIVATE"));
+		CFNR_DEACTIVATE = json_object_get_string(json_object_object_get(Jobj, "CFNR_DEACTIVATE"));
+		CFB_ACTIVATE = json_object_get_string(json_object_object_get(Jobj, "CFB_ACTIVATE"));
+		CFB_DEACTIVATE = json_object_get_string(json_object_object_get(Jobj, "CFB_DEACTIVATE"));
+		X_ZYXEL_ONESHOT_CW_ACTIVATE = json_object_get_string(json_object_object_get(Jobj, "X_ZYXEL_ONESHOT_CW_ACTIVATE"));
+		X_ZYXEL_ONESHOT_CW_DEACTIVATE = json_object_get_string(json_object_object_get(Jobj, "X_ZYXEL_ONESHOT_CW_DEACTIVATE"));
+		X_ZYXEL_DND_ENABLE = json_object_get_string(json_object_object_get(Jobj, "X_ZYXEL_DND_ENABLE"));
+		X_ZYXEL_DND_DISABLE = json_object_get_string(json_object_object_get(Jobj, "X_ZYXEL_DND_DISABLE"));
+		CCBS_DEACTIVATE = json_object_get_string(json_object_object_get(Jobj, "CCBS_DEACTIVATE"));
+		X_ZYXEL_OUTGOING_SIP = json_object_get_string(json_object_object_get(Jobj, "X_ZYXEL_OUTGOING_SIP"));
+		X_ZYXEL_CALL_REDIAL = json_object_get_string(json_object_object_get(Jobj, "X_ZYXEL_CALL_REDIAL"));
+		X_SINGLE_INTERNAL_CALL = json_object_get_string(json_object_object_get(Jobj, "X_SINGLE_INTERNAL_CALL"));
+	}
+	return;
+}
+
+
+void zcfgFeDalProfObjEditIidGet(struct json_object *Jobj){
+	//const char* tmpprofName = NULL;
+	const char* editPath = NULL;
+	int profileNum;
+	//printf("%s() Enter \n ",__FUNCTION__);
+
+	//printf("%s() ProfName : %s \n ",__FUNCTION__,ProfName);
+	editPath = json_object_get_string(json_object_object_get(Jobj, "EditPath"));
+
+	sscanf(editPath,"VoiceProfile.%d",&profileNum);
+
+	profIid.level = 2;
+	profIid.idx[0] = 1;
+	profIid.idx[1] = profileNum;
+
+	//printf("%s() Enter \n ",__FUNCTION__);
+	return;
+}
+
+
+void initProfGlobalObjects(){
+	multiJobj = NULL;
+	guiCustObj = NULL;
+	profObj = NULL;
+	profSipObj = NULL;
+	profRtpObj = NULL;
+	profRtpSrtpObj = NULL;
+	profNumPlanpObj = NULL;
+	profNumPlanpInfoObj = NULL;
+	accountDefaultObj = NULL;
+
+	return;
+}
+
+
+zcfgRet_t zcfgFeDalProfObjAdd(struct json_object *Jobj){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	IID_INIT(profIid);
+	//printf("%s() Enter \n ",__FUNCTION__);
+
+	profIid.level = 1;
+	profIid.idx[0] = 1;
+
+	if((ret = zcfgFeObjJsonBlockedAdd(RDM_OID_VOICE_PROF, &profIid, NULL)) != ZCFG_SUCCESS){
+		printf("%s():(ERROR) zcfgFeObjJsonAdd add prof fail~ \n ",__FUNCTION__);
+		return ZCFG_INTERNAL_ERROR;
+	}
+
+	//printf("%s() exit \n ",__FUNCTION__);
+	return ret;
+}
+
+
+zcfgRet_t zcfgFeDalProfObjEdit(struct json_object *Jobj){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	struct json_object *setJson = NULL;
+	//printf("%s() Enter \n ",__FUNCTION__);
+
+	if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_VOICE_PROF, &profIid, &profObj)) != ZCFG_SUCCESS){
+		printf("%s():(ERROR) zcfgFeObjJsonGetWithoutUpdate get prof obj fail~ \n ",__FUNCTION__);
+		return ZCFG_INTERNAL_ERROR;
+	}
+	//printf("%s():  get data moedl =>Prof Obj :%s \n ",__FUNCTION__,json_object_to_json_string(profObj));
+
+	if(profObj != NULL){
+		json_object_object_add(profObj, "Name", json_object_new_string(ProfName));
+		json_object_object_add(profObj, "Enable", json_object_new_string(ProfleEnable));
+		json_object_object_add(profObj, "X_ZYXEL_BoundIfName", json_object_new_string(X_ZYXEL_BoundIfName));
+		json_object_object_add(profObj, "X_ZYXEL_BoundIfList", json_object_new_string(X_ZYXEL_BoundIfList));
+		json_object_object_add(profObj, "DTMFMethodG711", json_object_new_string(DTMFMethodG711));
+		json_object_object_add(profObj, "DTMFMethod", json_object_new_string(DTMFMethod));
+		if(SHOW_NOT_USE_OFTEN_VOIP_SETTING&flag1){
+			json_object_object_add(profObj, "DigitMapEnable", json_object_new_boolean(DigitMapEnable));
+			json_object_object_add(profObj, "DigitMap", json_object_new_string(DigitMap));
+		}
+		json_object_object_add(profObj, "X_ZYXEL_VoipIOPFlags", json_object_new_int(X_ZYXEL_VoipIOPFlags));
+		json_object_object_add(profObj, "X_ZYXEL_FaxMode", json_object_new_string(X_ZYXEL_FaxMode));
+		json_object_object_add(profObj, "FAXPassThrough", json_object_new_string(FAXPassThrough));
+		json_object_object_add(profObj, "ModemPassThrough", json_object_new_string(ModemPassThrough));
+		json_object_object_add(profObj, "X_ZYXEL_IgnoreDirectIP", json_object_new_boolean(X_ZYXEL_IgnoreDirectIP));
+
+		if((setJson = zcfgFeJsonMultiObjAppend(RDM_OID_VOICE_PROF, &profIid, multiJobj, profObj)) == NULL){
+			printf("%s:(ERROR) fail to append object oid(%d)\n", __FUNCTION__, RDM_OID_VOICE_PROF);
+			zcfgFeJsonObjFree(profObj);
+			return ZCFG_INTERNAL_ERROR;
+		}
+	}
+	//printf("%s(): Append Pro obj to multiJobj (%s) \n ",__FUNCTION__,json_object_to_json_string(multiJobj));
+	//printf("%s() exit \n ",__FUNCTION__);
+
+	return ret;
+}
+
+zcfgRet_t zcfgFeDalProfSipObjEdit(struct json_object *Jobj){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	struct json_object *setJson = NULL;
+	//printf("%s() Enter \n ",__FUNCTION__);
+
+	if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_VOICE_PROF_SIP, &profIid, &profSipObj)) != ZCFG_SUCCESS){
+		printf("%s():(ERROR) zcfgFeObjJsonGetWithoutUpdate get prof sip obj fail~ \n ",__FUNCTION__);
+		return ZCFG_INTERNAL_ERROR;
+	}
+	//printf("%s():  get data moedl =>Prof sip Obj :%s \n ",__FUNCTION__,json_object_to_json_string(profSipObj));
+
+	if(profSipObj != NULL){
+		json_object_object_add(profSipObj, "UserAgentPort", json_object_new_int(UserAgentPort));
+		json_object_object_add(profSipObj, "ProxyServer", json_object_new_string(ProxyServer));
+		json_object_object_add(profSipObj, "ProxyServerPort", json_object_new_int(ProxyServerPort));
+		json_object_object_add(profSipObj, "ProxyServerTransport", json_object_new_string(ProxyServerTransport));
+		json_object_object_add(profSipObj, "RegistrarServer", json_object_new_string(RegistrarServer));
+		json_object_object_add(profSipObj, "RegistrarServerPort", json_object_new_int(RegistrarServerPort));
+		json_object_object_add(profSipObj, "RegistrarServerTransport", json_object_new_string(RegistrarServerTransport));
+		json_object_object_add(profSipObj, "UserAgentDomain", json_object_new_string(UserAgentDomain));
+		json_object_object_add(profSipObj, "UserAgentTransport", json_object_new_string(UserAgentTransport));
+		json_object_object_add(profSipObj, "OutboundProxy", json_object_new_string(OutboundProxy));
+		json_object_object_add(profSipObj, "OutboundProxyPort", json_object_new_int(OutboundProxyPort));
+		json_object_object_add(profSipObj, "X_ZYXEL_Option120Use", json_object_new_boolean(X_ZYXEL_Option120Use));
+		json_object_object_add(profSipObj, "RegisterExpires", json_object_new_int(RegisterExpires));
+		json_object_object_add(profSipObj, "RegisterRetryInterval", json_object_new_int(RegisterRetryInterval));
+		json_object_object_add(profSipObj, "InviteExpires", json_object_new_int(InviteExpires));
+		json_object_object_add(profSipObj, "ReInviteExpires", json_object_new_int(ReInviteExpires));
+		json_object_object_add(profSipObj, "X_ZYXEL_MinSE", json_object_new_int(X_ZYXEL_MinSE));
+		json_object_object_add(profSipObj, "DSCPMark", json_object_new_int(DSCPMark));
+		json_object_object_add(profSipObj, "X_ZYXEL_Rfc3263Support", json_object_new_boolean(X_ZYXEL_Rfc3263Support));
+		json_object_object_add(profSipObj, "X_ZYXEL_Rfc3262Support", json_object_new_boolean(X_ZYXEL_Rfc3262Support));
+
+		if((setJson = zcfgFeJsonMultiObjAppend(RDM_OID_VOICE_PROF_SIP, &profIid, multiJobj, profSipObj)) == NULL){
+			printf("%s:(ERROR) fail to append object oid(%d)\n", __FUNCTION__, RDM_OID_VOICE_PROF_SIP);
+			zcfgFeJsonObjFree(profSipObj);
+			return ZCFG_INTERNAL_ERROR;
+		}
+	}
+	//printf("%s(): Append Pro obj to multiJobj (%s) \n ",__FUNCTION__,json_object_to_json_string(multiJobj));
+	//printf("%s() exit \n ",__FUNCTION__);
+
+	return ret;
+}
+
+zcfgRet_t zcfgFeDalProfFaxT38ObjEdit(struct json_object *Jobj){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+
+	return ret;
+}
+
+zcfgRet_t zcfgFeDalProfRTPObjEdit(struct json_object *Jobj){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	struct json_object *setJson = NULL;
+	//printf("%s() Enter \n ",__FUNCTION__);
+
+	if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_VOICE_PROF_RTP, &profIid, &profRtpObj)) != ZCFG_SUCCESS){
+		printf("%s():(ERROR) zcfgFeObjJsonGetWithoutUpdate get prof rtp obj fail~ \n ",__FUNCTION__);
+		return ZCFG_INTERNAL_ERROR;
+	}
+	//printf("%s():  get data moedl =>Prof rtp Obj :%s \n ",__FUNCTION__,json_object_to_json_string(profRtpObj));
+
+
+	if(profRtpObj != NULL){
+		json_object_object_add(profRtpObj, "LocalPortMin", json_object_new_int(LocalPortMin));
+		json_object_object_add(profRtpObj, "LocalPortMax", json_object_new_int(LocalPortMax));
+		json_object_object_add(profRtpObj, "DSCPMark", json_object_new_int(DSCPMark));
+
+		if((setJson = zcfgFeJsonMultiObjAppend(RDM_OID_VOICE_PROF_RTP, &profIid, multiJobj, profRtpObj)) == NULL){
+			printf("%s:(ERROR) fail to append object oid(%d)\n", __FUNCTION__, RDM_OID_VOICE_PROF_RTP);
+			zcfgFeJsonObjFree(profRtpObj);
+			return ZCFG_INTERNAL_ERROR;
+		}
+	}
+	//printf("%s(): Append Pro obj to multiJobj (%s) \n ",__FUNCTION__,json_object_to_json_string(multiJobj));
+	//printf("%s() exit \n ",__FUNCTION__);
+
+	return ret;
+}
+
+zcfgRet_t zcfgFeDalProfRTPSRTPObjEdit(struct json_object *Jobj){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	struct json_object *setJson = NULL;
+	//printf("%s() Enter \n ",__FUNCTION__);
+
+	if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_VOICE_PROF_RTP_SRTP, &profIid, &profRtpSrtpObj)) != ZCFG_SUCCESS){
+		printf("%s():(ERROR) zcfgFeObjJsonGetWithoutUpdate get prof RTP-SRTP obj fail~ \n ",__FUNCTION__);
+		return ZCFG_INTERNAL_ERROR;
+	}
+	//printf("%s():  get data moedl =>Prof rtp-srtp Obj :%s \n ",__FUNCTION__,json_object_to_json_string(profRtpSrtpObj));
+
+
+	if(profRtpSrtpObj != NULL){
+		json_object_object_add(profRtpSrtpObj, "Enable", json_object_new_boolean(SRTPEnable));
+		json_object_object_add(profRtpSrtpObj, "X_ZYXEL_Crypto_Suite_Name", json_object_new_string(X_ZYXEL_Crypto_Suite_Name));
+
+		if((setJson = zcfgFeJsonMultiObjAppend(RDM_OID_VOICE_PROF_RTP_SRTP, &profIid, multiJobj, profRtpSrtpObj)) == NULL){
+			printf("%s:(ERROR) fail to append object oid(%d)\n", __FUNCTION__, RDM_OID_VOICE_PROF_RTP_SRTP);
+			zcfgFeJsonObjFree(profRtpSrtpObj);
+			return ZCFG_INTERNAL_ERROR;
+		}
+	}
+	//printf("%s(): Append Pro obj to multiJobj (%s) \n ",__FUNCTION__,json_object_to_json_string(multiJobj));
+	//printf("%s() exit \n ",__FUNCTION__);
+
+	return ret;
+}
+
+zcfgRet_t zcfgFeDalProfNumberingPlanObjEdit(struct json_object *Jobj){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	struct json_object *setJson = NULL;
+	//printf("%s() Enter \n ",__FUNCTION__);
+
+	if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_VOICE_PROF_NUM_PLAN, &profIid, &profNumPlanpObj)) != ZCFG_SUCCESS){
+		printf("%s():(ERROR) zcfgFeObjJsonGetWithoutUpdate get prof Numbering Plan obj fail~ \n ",__FUNCTION__);
+		return ZCFG_INTERNAL_ERROR;
+	}
+	//printf("%s():  get data moedl =>Prof Numbering Plan Obj :%s \n ",__FUNCTION__,json_object_to_json_string(profNumPlanpObj));
+
+
+	if(profNumPlanpObj != NULL){
+		json_object_object_add(profNumPlanpObj, "InterDigitTimerStd", json_object_new_int(InterDigitTimerStd));
+
+		if((setJson = zcfgFeJsonMultiObjAppend(RDM_OID_VOICE_PROF_NUM_PLAN, &profIid, multiJobj, profNumPlanpObj)) == NULL){
+			printf("%s:(ERROR) fail to append object oid(%d)\n", __FUNCTION__, RDM_OID_VOICE_PROF_NUM_PLAN);
+			zcfgFeJsonObjFree(profNumPlanpObj);
+			return ZCFG_INTERNAL_ERROR;
+		}
+	}
+	//printf("%s(): Append Pro obj to multiJobj (%s) \n ",__FUNCTION__,json_object_to_json_string(multiJobj));
+	//printf("%s() exit \n ",__FUNCTION__);
+
+	return ret;
+}
+
+zcfgRet_t zcfgFeDalProfNumberingPlanPrefixInfoObjEdit(struct json_object *Jobj){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	const char* facilityAction;
+	const char* key;
+	struct json_object *setJson = NULL;
+	profNumPlanpInfoObj = NULL;
+
+	//printf("%s() Enter \n ",__FUNCTION__);
+
+	IID_INIT(profPrefixInfoIid);
+	while(zcfgFeSubInObjJsonGetNextWithoutUpdate(RDM_OID_VOICE_PROF_NUM_PLAN_PREFIX_INFO, &profIid, &profPrefixInfoIid, &profNumPlanpInfoObj) == ZCFG_SUCCESS){
+		facilityAction = json_object_get_string(json_object_object_get(profNumPlanpInfoObj, "FacilityAction"));
+		key = json_object_get_string(json_object_object_get(Jobj, facilityAction));
+		json_object_object_add(profNumPlanpInfoObj, "PrefixRange", json_object_new_string(key));
+
+		if((setJson = zcfgFeJsonMultiObjAppend(RDM_OID_VOICE_PROF_NUM_PLAN_PREFIX_INFO, &profPrefixInfoIid, multiJobj, profNumPlanpInfoObj)) == NULL){
+			printf("%s:(ERROR) fail to append object oid(%d)\n", __FUNCTION__, RDM_OID_VOICE_PROF_NUM_PLAN_PREFIX_INFO);
+			zcfgFeJsonObjFree(profNumPlanpInfoObj);
+			return ZCFG_INTERNAL_ERROR;
+		}
+		zcfgFeJsonObjFree(profNumPlanpInfoObj);
+	}
+
+	//printf("%s(): Append Pro obj to multiJobj (%s) \n ",__FUNCTION__,json_object_to_json_string(multiJobj));
+	//printf("%s() exit \n ",__FUNCTION__);
+	return ret;
+}
+
+zcfgRet_t zcfgFeDalVoipProfileEdit(struct json_object *Jobj, char *replyMsg){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	//printf("%s(): Enter.. \n ",__FUNCTION__);
+	printf("%s(): input --- %s \n ",__FUNCTION__,json_object_to_json_string(Jobj));
+
+	initProfGlobalObjects();
+	zcfgFeDalCustomflagGet();
+	getProfBasicInfo(Jobj);
+	multiJobj = zcfgFeJsonObjNew();
+	zcfgFeDalProfObjEditIidGet(Jobj);
+
+	if((ret = zcfgFeDalProfObjEdit(Jobj)) != ZCFG_SUCCESS){
+		printf("%s: Edit prof obj fail \n", __FUNCTION__);
+		goto exit;
+	}
+
+	if((ret = zcfgFeDalProfSipObjEdit(Jobj)) != ZCFG_SUCCESS){
+		printf("%s: Edit prof sip obj fail \n", __FUNCTION__);
+		goto exit;
+	}
+/*
+	if((ret = zcfgFeDalProfFaxT38ObjEdit(Jobj)) != ZCFG_SUCCESS){
+		printf("%s: Edit prof FaxT38 obj fail \n", __FUNCTION__);
+		goto exit;
+	}
+*/
+	if((ret = zcfgFeDalProfRTPObjEdit(Jobj)) != ZCFG_SUCCESS){
+		printf("%s: Edit prof rtp fail obj \n", __FUNCTION__);
+		goto exit;
+	}
+	if(!(HIDE_VOICE_SRTP&flag1)){
+		if((ret = zcfgFeDalProfRTPSRTPObjEdit(Jobj)) != ZCFG_SUCCESS){
+			printf("%s: Edit prof rtp-srtp obj fail \n", __FUNCTION__);
+			goto exit;
+		}
+	}
+	if((ret = zcfgFeDalProfNumberingPlanObjEdit(Jobj)) != ZCFG_SUCCESS){
+		printf("%s: Edit prof NumPaln obj fail \n", __FUNCTION__);
+		goto exit;
+	}
+	if(SHOW_NOT_USE_OFTEN_VOIP_SETTING&flag1){
+		if((ret = zcfgFeDalProfNumberingPlanPrefixInfoObjEdit(Jobj)) != ZCFG_SUCCESS){
+			printf("%s: Edit prof NumPaln-prefixInfo obj fail \n", __FUNCTION__);
+			goto exit;
+		}
+	}
+	if((ret = zcfgFeMultiObjJsonSet(multiJobj, NULL)) != ZCFG_SUCCESS){
+		printf("%s:(ERROR) fail to set object %d\n", __FUNCTION__, RDM_OID_VOICE_PROF);
+		goto exit;
+	}
+
+	printf("%s(): Exit.. \n ",__FUNCTION__);
+exit:
+	freeAllProfObjects();
+	return ret;
+}
+
+zcfgRet_t zcfgFeDalVoipAddOneAccount(struct json_object *Jobj){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	getLineBasicInfo(Jobj);
+	zcfgFeDalCustomizationflagGet();
+
+	char buf[64];
+	sprintf(buf,"VoiceProfile.%d",profIid.idx[1]);
+
+	json_object_object_add(Jobj, "AddPath", json_object_new_string(buf));
+	//printf("%s(): %s \n ",__FUNCTION__,json_object_to_json_string(Jobj));
+
+	if((ret = zcfgFeDalLineObjAdd(Jobj)) != ZCFG_SUCCESS){
+		printf("%s:(ERROR) fail to add line obj \n", __FUNCTION__);
+		goto exit;
+	}
+	if((ret = zcfgFeDalLineObjEdit(Jobj)) != ZCFG_SUCCESS){
+		printf("%s:(ERROR) fail to edit line obj \n", __FUNCTION__);
+		goto exit;
+	}
+	if((ret = zcfgFeDalLineSipObjEdit(Jobj)) != ZCFG_SUCCESS){
+		printf("%s:(ERROR) fail to edit line sip obj \n", __FUNCTION__);
+		goto exit;
+	}
+	if((ret = zcfgFeDalLineCallFeatureObjEdit(Jobj)) != ZCFG_SUCCESS){
+		printf("%s:(ERROR) fail to edit call feature obj \n", __FUNCTION__);
+		goto exit;
+	}
+	if((ret = zcfgFeDalLineCodecListObjEdit(Jobj)) != ZCFG_SUCCESS){
+		printf("%s:(ERROR) fail to edit codec list obj \n", __FUNCTION__);
+		goto exit;
+	}
+	if((ret = zcfgFeDalLineProcessingEdit(Jobj)) != ZCFG_SUCCESS){
+		printf("%s:(ERROR) fail to edit line processing obj \n", __FUNCTION__);
+		goto exit;
+	}
+	if((ret = zcfgFeDalLineMailCfgAdd(Jobj)) != ZCFG_SUCCESS){
+		printf("%s:(ERROR) fail to add mail config obj \n", __FUNCTION__);
+		goto exit;
+	}
+
+	return ret;
+
+exit:
+	freeAllProfObjects();
+	freeAllLineObjects();
+	return ret;
+}
+
+zcfgRet_t zcfgFeDalVoipProfileAdd(struct json_object *Jobj, char *replyMsg){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	//printf("%s(): Enter.. \n ",__FUNCTION__);
+	//printf("%s(): input --- %s \n ",__FUNCTION__,json_object_to_json_string(Jobj));
+
+	initProfGlobalObjects();
+	zcfgFeDalCustomflagGet();
+	getProfBasicInfo(Jobj);
+	multiJobj = zcfgFeJsonObjNew();
+
+	if((ret = zcfgFeDalProfObjAdd(Jobj)) != ZCFG_SUCCESS){
+		printf("%s:(ERROR) fail to add prof obj \n", __FUNCTION__);
+		goto exit;
+	}
+
+	if((ret = zcfgFeDalProfObjEdit(Jobj)) != ZCFG_SUCCESS){
+		printf("%s: Edit prof obj fail \n", __FUNCTION__);
+		goto exit;
+	}
+
+	if((ret = zcfgFeDalProfSipObjEdit(Jobj)) != ZCFG_SUCCESS){
+		printf("%s: Edit prof sip obj fail \n", __FUNCTION__);
+		goto exit;
+	}
+/*
+	if((ret = zcfgFeDalProfFaxT38ObjEdit(Jobj)) != ZCFG_SUCCESS){
+		printf("%s: Edit prof FaxT38 obj fail \n", __FUNCTION__);
+		goto exit;
+	}
+*/
+	if((ret = zcfgFeDalProfRTPObjEdit(Jobj)) != ZCFG_SUCCESS){
+		printf("%s: Edit prof rtp fail obj \n", __FUNCTION__);
+		goto exit;
+	}
+	if(!(HIDE_VOICE_SRTP&flag1)){
+		if((ret = zcfgFeDalProfRTPSRTPObjEdit(Jobj)) != ZCFG_SUCCESS){
+			printf("%s: Edit prof rtp-srtp obj fail \n", __FUNCTION__);
+			goto exit;
+		}
+	}
+	if((ret = zcfgFeDalProfNumberingPlanObjEdit(Jobj)) != ZCFG_SUCCESS){
+		printf("%s: Edit prof NumPaln obj fail \n", __FUNCTION__);
+		goto exit;
+	}
+	if(SHOW_NOT_USE_OFTEN_VOIP_SETTING&flag1){
+		if((ret = zcfgFeDalProfNumberingPlanPrefixInfoObjEdit(Jobj)) != ZCFG_SUCCESS){
+			printf("%s: Edit prof NumPaln-prefixInfo obj fail \n", __FUNCTION__);
+			goto exit;
+		}
+	}
+	if((ret = zcfgFeDalVoipAddOneAccount(Jobj)) != ZCFG_SUCCESS){
+		printf("%s: Add default account obj fail \n", __FUNCTION__);
+		goto exit;
+	}
+
+	if((ret = zcfgFeMultiObjJsonSet(multiJobj, NULL)) != ZCFG_SUCCESS){
+		printf("%s:(ERROR) fail to set object %d\n", __FUNCTION__, RDM_OID_VOICE_PROF);
+		goto exit;
+	}
+
+exit:
+	freeAllProfObjects();
+	freeAllLineObjects();
+	return ret;
+}
+
+zcfgRet_t zcfgFeDalVoipProfileDel(struct json_object *Jobj, char *replyMsg){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	const char* path;
+	int profileNum;
+	//printf("%s(): input --- %s \n ",__FUNCTION__,json_object_to_json_string(Jobj));
+
+	path = json_object_get_string(json_object_object_get(Jobj, "DelPath"));
+	//printf("%s(): Delete prof path : %s \n ",__FUNCTION__, path);
+	sscanf(path,"VoiceProfile.%d",&profileNum);
+
+	IID_INIT(profIid);
+	profIid.level = 2;
+	profIid.idx[0] = 1;
+	profIid.idx[1] = profileNum;
+
+	if((ret = zcfgFeObjJsonDel(RDM_OID_VOICE_PROF, &profIid, NULL)) != ZCFG_SUCCESS){
+		printf("%s: delete prof obj fail \n", __FUNCTION__);
+		return ret;
+	}
+
+	//printf("%s(): Exit.. \n ",__FUNCTION__);
+	return ret;
+}
+zcfgRet_t zcfgFeDalVoipProfile(const char *method, struct json_object *Jobj, char *replyMsg)
+{
+	zcfgRet_t ret = ZCFG_SUCCESS;
+
+	if(!method || !Jobj)
+		return ZCFG_INTERNAL_ERROR;
+
+	if(!strcmp(method, "POST")) {
+		ret = zcfgFeDalVoipProfileAdd(Jobj, NULL);
+	}
+	else if(!strcmp(method, "PUT")) {
+		ret = zcfgFeDalVoipProfileEdit(Jobj, NULL);
+	}
+	else if(!strcmp(method, "DELETE")) {
+		ret = zcfgFeDalVoipProfileDel(Jobj, NULL);
+	}
+
+	return ret;
+}
+
Index: libzcfg_fe_dal-1.0/zcfg_fe_dal.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/zcfg_fe_dal.c	2016-11-03 19:21:11.276090993 +0800
+++ libzcfg_fe_dal-1.0/zcfg_fe_dal.c	2016-11-03 19:25:42.385512000 +0800
@@ -41,6 +41,7 @@
 extern dal_param_t TIME_param[];
 extern dal_param_t TRUST_DOMAIN_param[];
 extern dal_param_t VOIP_LINE_param[];
+extern dal_param_t VOIP_PROFILE_param[];
 extern dal_param_t VOIP_REGION_param[];
 extern dal_param_t VOIP_PHONEDEVICE_param[];
 extern dal_param_t VOIP_PHONEDECT_param[];
@@ -82,6 +83,7 @@
 extern zcfgRet_t zcfgFeDalTime(const char *method, struct json_object *Jobj, char *replyMsg);
 extern zcfgRet_t zcfgFeDalTrustDomain(const char *method, struct json_object *Jobj, char *replyMsg);
 extern zcfgRet_t zcfgFeDalVoipLine(const char *method, struct json_object *Jobj, char *replyMsg);
+extern zcfgRet_t zcfgFeDalVoipProfile(const char *method, struct json_object *Jobj, char *replyMsg);
 extern zcfgRet_t zcfgFeDalVoipPhoneRegion(const char *method, struct json_object *Jobj, char *replyMsg);
 extern zcfgRet_t zcfgFeDalVoipPhoneDevice(const char *method, struct json_object *Jobj, char *replyMsg);
 extern zcfgRet_t zcfgFeDalVoipPhoneDECT(const char *method, struct json_object *Jobj, char *replyMsg);
@@ -132,6 +134,7 @@
 {"TIME",			TIME_param, 		zcfgFeDalTime},
 {"TRUST_DOMAIN",	TRUST_DOMAIN_param, zcfgFeDalTrustDomain},
 {"VOIPLINE",		VOIP_LINE_param,	zcfgFeDalVoipLine},
+{"VOIPPROFILE",		VOIP_PROFILE_param,	zcfgFeDalVoipProfile},
 {"PHONEREGION",		VOIP_REGION_param,	zcfgFeDalVoipPhoneRegion},
 {"PHONEDEVICE",		VOIP_PHONEDEVICE_param,	zcfgFeDalVoipPhoneDevice},
 {"PHONEDECT",		VOIP_PHONEDECT_param,zcfgFeDalVoipPhoneDECT},
