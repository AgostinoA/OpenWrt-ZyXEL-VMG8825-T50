Index: libzcfg_fe_dal-1.0/network/nat/zcfg_fe_dal_nat_port_mapping.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/network/nat/zcfg_fe_dal_nat_port_mapping.c	2016-11-26 14:58:04.812723702 +0800
+++ libzcfg_fe_dal-1.0/network/nat/zcfg_fe_dal_nat_port_mapping.c	2016-11-26 14:58:35.120723702 +0800
@@ -133,6 +133,58 @@
 	return ret;
 	
 }
+
+zcfgRet_t zcfgFeDalNatPortMappingCheck(struct json_object *Jobj, char *replyMsg)
+{
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	struct json_object *obj = NULL;
+	objIndex_t iid = {0};
+	const char *application = NULL, *new_application = NULL;
+	const char *Interface = NULL, *new_Interface = NULL;
+	const char *InternalClient = NULL, *new_InternalClient = NULL;
+	int ExternalPort = 0, new_ExternalPort = 0;
+	int ExternalPortEndRange = 0, new_ExternalPortEndRange = 0;
+	const char *Protocol = NULL, *new_Protocol = NULL;
+
+	new_application = json_object_get_string(json_object_object_get(Jobj, "Description"));
+	new_Interface = json_object_get_string(json_object_object_get(Jobj, "Interface"));
+	new_InternalClient = json_object_get_string(json_object_object_get(Jobj, "InternalClient"));
+	new_ExternalPort = json_object_get_int(json_object_object_get(Jobj, "ExternalPort"));
+	new_ExternalPortEndRange = json_object_get_int(json_object_object_get(Jobj, "ExternalPortEndRange"));
+	new_Protocol = json_object_get_string(json_object_object_get(Jobj, "Protocol"));
+
+	IID_INIT(iid);
+
+	while (zcfgFeObjJsonGetNext(RDM_OID_NAT_PORT_MAPPING, &iid, &obj) == ZCFG_SUCCESS) {
+		application = json_object_get_string(json_object_object_get(obj, "Description"));
+		Interface = json_object_get_string(json_object_object_get(obj, "Interface"));
+		InternalClient = json_object_get_string(json_object_object_get(obj, "InternalClient"));
+		ExternalPort = json_object_get_int(json_object_object_get(obj, "ExternalPort"));
+		ExternalPortEndRange = json_object_get_int(json_object_object_get(obj, "ExternalPortEndRange"));
+		Protocol = json_object_get_string(json_object_object_get(obj, "Protocol"));
+
+		if (!strcmp(application, new_application))  {
+			if (!strcmp(Interface, new_Interface) && !strcmp(InternalClient, new_InternalClient)) {
+				if (!strcmp(Protocol, new_Protocol) &&
+				    (ExternalPort == new_ExternalPort) &&
+				    (ExternalPortEndRange == new_ExternalPortEndRange)) {
+					zcfgFeObjJsonDel(RDM_OID_NAT_PORT_MAPPING, &iid, NULL);
+					zcfgFeJsonObjFree(obj);
+					return ret;
+				}
+			} else {
+				zcfgFeObjJsonDel(RDM_OID_NAT_PORT_MAPPING, &iid, NULL);
+				zcfgFeJsonObjFree(obj);
+				return ret;
+			}
+		}
+
+		zcfgFeJsonObjFree(obj);
+	}
+
+	return ret;
+}
+
 zcfgRet_t zcfgFeDalNatPortMapping(const char *method, struct json_object *Jobj, char *replyMsg)
 {
 	zcfgRet_t ret = ZCFG_SUCCESS;
@@ -144,6 +196,7 @@
 		ret = zcfgFeDalNatPortMappingEdit(Jobj, NULL);
 	}
 	else if(!strcmp(method, "POST")) {
+		ret = zcfgFeDalNatPortMappingCheck(Jobj, NULL);
 		ret = zcfgFeDalNatPortMappingAdd(Jobj, replyMsg);
 	}
 	else if(!strcmp(method, "DELETE")) {
