Index: libzcfg_fe_tr98-1.0/diag.c
===================================================================
--- libzcfg_fe_tr98-1.0.orig/diag.c	2015-02-26 11:26:40.278680731 +0800
+++ libzcfg_fe_tr98-1.0/diag.c	2015-02-26 11:24:27.937662400 +0800
@@ -1,3 +1,6 @@
+
+#include <arpa/inet.h>
+
 #include <json/json.h>
 
 #include "zcfg_common.h"
@@ -53,11 +56,18 @@
 			}
 			else {
 				strcpy(iface, devIpIface);
-				zcfgFeTr181IfaceStackLowerLayerGet(iface, lowerLayer);
+				if((zcfgFeTr181IfaceStackLowerLayerGet(iface, lowerLayer)) != ZCFG_SUCCESS) {
+					json_object_put(ipPingObj);
+					return ZCFG_NO_SUCH_OBJECT;
+				}
 				if(strstr(lowerLayer, "PPP.Interface") != NULL) {
+					memset(iface, 0, sizeof(iface));
 					strcpy(iface, lowerLayer);
 				}
-				zcfgFe181To98MappingNameGet(iface, tr98ObjName);
+				if((zcfgFe181To98MappingNameGet(iface, tr98ObjName)) != ZCFG_SUCCESS) {
+					json_object_put(ipPingObj);
+					return ZCFG_NO_SUCH_OBJECT;
+				}
 				json_object_object_add(*tr98Jobj, paramList->name, json_object_new_string(tr98ObjName));
 			}
 			paramList++;
@@ -109,6 +119,7 @@
 		tmpObj = ipPingObj;
 		ipPingObj = NULL;
 		ipPingObj = zcfgFeJsonMultiObjAppend(RDM_OID_IP_DIAG_IPPING, &objIid, multiJobj, tmpObj);
+		json_object_put(tmpObj);
 	}
 
 	paramList = tr98Obj[handler].parameter;
@@ -123,7 +134,11 @@
 				}
 				else {
 					if(strstr(iface, "PPP.Interface") != NULL) {
-						zcfgFeTr181IfaceStackHigherLayerGet(iface, higherLayer);
+						if((zcfgFeTr181IfaceStackHigherLayerGet(iface, higherLayer)) != ZCFG_SUCCESS) {
+							json_object_put(ipPingObj);
+							return ZCFG_NO_SUCH_OBJECT;
+						}
+						memset(iface, 0, sizeof(iface));
 						strcpy(iface, higherLayer);
 					}
 					
@@ -163,7 +178,7 @@
 
 	/*Set Device.Routing.Router.1.IPv4Forwarding.i*/
 	if(multiJobj){
-		json_object_put(tmpObj);
+		//json_object_put(tmpObj);
 	}
 	else{
 		if((ret = zcfgFeObjJsonSet(RDM_OID_IP_DIAG_IPPING, &objIid, ipPingObj, NULL)) != ZCFG_SUCCESS ) {
@@ -209,12 +224,19 @@
 				json_object_object_add(*tr98Jobj, paramList->name, json_object_new_string(""));
 			}
 			else {
-				zcfgFeTr181IfaceStackLowerLayerGet(devIpIface, lowerLayer);
+				if((zcfgFeTr181IfaceStackLowerLayerGet(devIpIface, lowerLayer)) != ZCFG_SUCCESS) {
+					json_object_put(traceRtObj);
+					return ZCFG_NO_SUCH_OBJECT;
+				}
 				if(strstr(lowerLayer, "PPP.Interface") != NULL) {
+					memset(devIpIface, 0, sizeof(devIpIface));
 					strcpy(devIpIface, lowerLayer);
 				}
 
-				zcfgFe181To98MappingNameGet(devIpIface, tr98ObjName);
+				if((zcfgFe181To98MappingNameGet(devIpIface, tr98ObjName)) != ZCFG_SUCCESS) {
+					json_object_put(traceRtObj);
+					return ZCFG_NO_SUCH_OBJECT;
+				}
 				json_object_object_add(*tr98Jobj, paramList->name, json_object_new_string(tr98ObjName));
 			}
 			paramList++;
@@ -267,6 +289,7 @@
 		tmpObj = traceRtObj;
 		traceRtObj = NULL;
 		traceRtObj = zcfgFeJsonMultiObjAppend(RDM_OID_IP_DIAG_TRACE_RT, &objIid, multiJobj, tmpObj);
+		json_object_put(tmpObj);
 	}
 
 	paramList = tr98Obj[handler].parameter;
@@ -281,7 +304,11 @@
 				}
 				else {
 					if(strstr(devIpIface, "PPP.Interface") != NULL) {
-						zcfgFeTr181IfaceStackHigherLayerGet(devIpIface, higherLayer);
+						if((zcfgFeTr181IfaceStackHigherLayerGet(devIpIface, higherLayer)) != ZCFG_SUCCESS) {
+							json_object_put(traceRtObj);
+							return ZCFG_NO_SUCH_OBJECT;
+						}
+						memset(devIpIface, 0, sizeof(devIpIface));
 						strcpy(devIpIface, higherLayer);
 					}
 					
@@ -309,7 +336,7 @@
 
 	/*Set Device.Routing.Router.1.IPv4Forwarding.i*/
 	if(multiJobj){
-		json_object_put(tmpObj);
+		//json_object_put(tmpObj);
 	}
 	else{
 		if((ret = zcfgFeObjJsonSet(RDM_OID_IP_DIAG_TRACE_RT, &objIid, traceRtObj, NULL)) != ZCFG_SUCCESS ) {
@@ -468,11 +495,18 @@
 			}
 			else {
 				strcpy(iface, devIpIface);
-				zcfgFeTr181IfaceStackLowerLayerGet(iface, lowerLayer);
+				if((zcfgFeTr181IfaceStackLowerLayerGet(iface, lowerLayer)) != ZCFG_SUCCESS) {
+					json_object_put(dlDiagObj);
+					return ZCFG_NO_SUCH_OBJECT;
+				}
 				if(strstr(lowerLayer, "PPP.Interface") != NULL) {
+					memset(iface, 0, sizeof(iface));
 					strcpy(iface, lowerLayer);
 				}
-				zcfgFe181To98MappingNameGet(iface, tr98ObjName);
+				if((zcfgFe181To98MappingNameGet(iface, tr98ObjName)) != ZCFG_SUCCESS) {
+					json_object_put(dlDiagObj);
+					return ZCFG_NO_SUCH_OBJECT;
+				}
 				json_object_object_add(*tr98Jobj, paramList->name, json_object_new_string(tr98ObjName));
 			}
 			paramList++;
@@ -495,6 +529,7 @@
 	return ZCFG_SUCCESS;
 }
 
+#define DOWNLOADDIAG_SET_PARM_NUM 5
 /*
  *   TR98 Object Name : InternetGatewayDevice.DownloadDiagnostics
  *
@@ -507,13 +542,13 @@
 	objIndex_t objIid;
 	struct json_object *dlDiagObj = NULL;
 	struct json_object *tmpObj = NULL;
-	struct json_object *tr181ParamValue = NULL;
 	struct json_object *paramValue = NULL;
 	tr98Parameter_t *paramList = NULL;
-	char iface[40] = {0};
+	char iface[100] = {0};
 	char tr98ConnObjName[TR98_MAX_OBJ_NAME_LENGTH] = {0};
-	char higherLayer[32] = {0};
-	char devIpIface[48] = {0};
+	char higherLayer[100] = {0};
+	char devIpIface[100] = {0};
+	int nParm = 0;
 
 	printf("%s : Enter\n", __FUNCTION__);
 
@@ -525,50 +560,57 @@
 		tmpObj = dlDiagObj;
 		dlDiagObj = NULL;
 		dlDiagObj = zcfgFeJsonMultiObjAppend(RDM_OID_IP_DIAG_DL_DIAG, &objIid, multiJobj, tmpObj);
+		json_object_put(tmpObj);
 	}
 
 	paramList = tr98Obj[handler].parameter;
-	while(paramList->name != NULL) {
-		/*Write new parameter value from tr98 object to tr181 objects*/		
-		if(!strcmp(paramList->name, "Interface")) {
-			paramValue = json_object_object_get(tr98Jobj, paramList->name);
-			if(paramValue != NULL) {
-				strcpy(tr98ConnObjName, json_object_get_string(paramValue));
-				if(zcfgFe98To181MappingNameGet(tr98ConnObjName, iface) != ZCFG_SUCCESS) {
-					json_object_object_add(dlDiagObj, paramList->name, json_object_new_string(""));
-				}
-				else {
-					if(strstr(iface, "PPP.Interface") != NULL) {
-						zcfgFeTr181IfaceStackHigherLayerGet(iface, higherLayer);
-						strcpy(iface, higherLayer);
-					}
-					
-					strcpy(devIpIface, iface);
-					json_object_object_add(dlDiagObj, paramList->name, json_object_new_string(devIpIface));
-				}
-			}
+	//This is specific implementation on 'DownloadDiagnostics'
+	while((nParm < DOWNLOADDIAG_SET_PARM_NUM) && (paramList->name != NULL)) {
+		/*Write new parameter value from tr98 object to tr181 objects*/
+		paramValue = json_object_object_get(tr98Jobj, paramList->name);
+		if(!paramValue) {
 			paramList++;
+			nParm++;
 			continue;
 		}
 
-		paramValue = json_object_object_get(tr98Jobj, paramList->name);
-		if(paramValue != NULL) {
-			tr181ParamValue = json_object_object_get(dlDiagObj, paramList->name);
-			if(tr181ParamValue != NULL) {
-				json_object_object_add(dlDiagObj, paramList->name, JSON_OBJ_COPY(paramValue));
-				paramList++;
-				continue;
+		if(strstr(paramList->name, "Diagnost")) {
+			const char *paramStr = json_object_get_string(paramValue);
+			//set empty to comply with std 'not configured'
+			if(strcmp(paramStr, "") && !strstr(paramStr, "Requested")) {
+				json_object_put(dlDiagObj);
+				return ZCFG_INVALID_PARAM_VALUE;
+			}
+			json_object_object_add(dlDiagObj, paramList->name, JSON_OBJ_COPY(paramValue));
+		}else if(!strcmp(paramList->name, "Interface")) {
+			strcpy(tr98ConnObjName, json_object_get_string(paramValue));
+			if(zcfgFe98To181MappingNameGet(tr98ConnObjName, iface) != ZCFG_SUCCESS) {
+				json_object_object_add(dlDiagObj, paramList->name, json_object_new_string(""));
+			}else {
+				if(strstr(iface, "PPP.Interface") != NULL) {
+					if((zcfgFeTr181IfaceStackHigherLayerGet(iface, higherLayer)) != ZCFG_SUCCESS) {
+						json_object_put(dlDiagObj);
+						return ZCFG_NO_SUCH_OBJECT;
+					}
+					memset(iface, 0, sizeof(iface));
+					strcpy(iface, higherLayer);
+				}
+		
+				strcpy(devIpIface, iface);
+				json_object_object_add(dlDiagObj, paramList->name, json_object_new_string(devIpIface));
 			}
+		}else {
+			json_object_object_add(dlDiagObj, paramList->name, JSON_OBJ_COPY(paramValue));
 		}
-
-		printf("Can't find parameter %s in TR181\n", paramList->name);
-
+		nParm++;
 		paramList++;	
 	}
 
+	json_object_object_add(dlDiagObj, "X_ZYXEL_Creator", json_object_new_string("ACS"));
+
 	/*Set Device.Routing.Router.1.IPv4Forwarding.i*/
 	if(multiJobj){
-		json_object_put(tmpObj);
+		//json_object_put(tmpObj);
 	}
 	else{
 		if((ret = zcfgFeObjJsonSet(RDM_OID_IP_DIAG_DL_DIAG, &objIid, dlDiagObj, NULL)) != ZCFG_SUCCESS ) {
@@ -617,11 +659,18 @@
 			}
 			else {
 				strcpy(iface, devIpIface);
-				zcfgFeTr181IfaceStackLowerLayerGet(iface, lowerLayer);
+				if((zcfgFeTr181IfaceStackLowerLayerGet(iface, lowerLayer)) != ZCFG_SUCCESS) {
+					json_object_put(ulDiagObj);
+					return ZCFG_NO_SUCH_OBJECT;
+				}
 				if(strstr(lowerLayer, "PPP.Interface") != NULL) {
+					memset(iface, 0, sizeof(iface));
 					strcpy(iface, lowerLayer);
 				}
-				zcfgFe181To98MappingNameGet(iface, tr98ObjName);
+				if((zcfgFe181To98MappingNameGet(iface, tr98ObjName)) != ZCFG_SUCCESS) {
+					json_object_put(ulDiagObj);
+					return ZCFG_NO_SUCH_OBJECT;
+				}
 				json_object_object_add(*tr98Jobj, paramList->name, json_object_new_string(tr98ObjName));
 			}
 			paramList++;
@@ -644,6 +693,7 @@
 	return ZCFG_SUCCESS;
 }
 
+#define UPLOADDIAG_SET_PARM_NUM 6
 /*
  *   TR98 Object Name : InternetGatewayDevice.UploadDiagnostics
  *
@@ -656,13 +706,13 @@
 	objIndex_t objIid;
 	struct json_object *ulDiagObj = NULL;
 	struct json_object *tmpObj = NULL;
-	struct json_object *tr181ParamValue = NULL;
 	struct json_object *paramValue = NULL;
 	tr98Parameter_t *paramList = NULL;
-	char iface[40] = {0};
+	char iface[100] = {0};
 	char tr98ConnObjName[TR98_MAX_OBJ_NAME_LENGTH] = {0};
-	char higherLayer[32] = {0};
-	char devIpIface[48] = {0};
+	char higherLayer[100] = {0};
+	char devIpIface[100] = {0};
+	int nParm = 0;
 
 	printf("%s : Enter\n", __FUNCTION__);
 
@@ -673,51 +723,58 @@
 	if(multiJobj){
 		tmpObj = ulDiagObj;
 		ulDiagObj = NULL;
-		ulDiagObj = zcfgFeJsonMultiObjAppend(RDM_OID_IP_DIAG_DL_DIAG, &objIid, multiJobj, tmpObj);
+		ulDiagObj = zcfgFeJsonMultiObjAppend(RDM_OID_IP_DIAG_UL_DIAG, &objIid, multiJobj, tmpObj);
+		json_object_put(tmpObj);
 	}
 
 	paramList = tr98Obj[handler].parameter;
-	while(paramList->name != NULL) {
-		/*Write new parameter value from tr98 object to tr181 objects*/		
-		if(!strcmp(paramList->name, "Interface")) {
-			paramValue = json_object_object_get(tr98Jobj, paramList->name);
-			if(paramValue != NULL) {
-				strcpy(tr98ConnObjName, json_object_get_string(paramValue));
-				if(zcfgFe98To181MappingNameGet(tr98ConnObjName, iface) != ZCFG_SUCCESS) {
-					json_object_object_add(ulDiagObj, paramList->name, json_object_new_string(""));
-				}
-				else {
-					if(strstr(iface, "PPP.Interface") != NULL) {
-						zcfgFeTr181IfaceStackHigherLayerGet(iface, higherLayer);
-						strcpy(iface, higherLayer);
-					}
-					
-					strcpy(devIpIface, iface);
-					json_object_object_add(ulDiagObj, paramList->name, json_object_new_string(devIpIface));
-				}
-			}
+	//This is specific implementation on 'UploadDiagnostics'
+	while((nParm < UPLOADDIAG_SET_PARM_NUM) && (paramList->name != NULL)) {
+		/*Write new parameter value from tr98 object to tr181 objects*/
+		paramValue = json_object_object_get(tr98Jobj, paramList->name);
+		if(!paramValue) {
 			paramList++;
+			nParm++;
 			continue;
 		}
 
-		paramValue = json_object_object_get(tr98Jobj, paramList->name);
-		if(paramValue != NULL) {
-			tr181ParamValue = json_object_object_get(ulDiagObj, paramList->name);
-			if(tr181ParamValue != NULL) {
-				json_object_object_add(ulDiagObj, paramList->name, JSON_OBJ_COPY(paramValue));
-				paramList++;
-				continue;
+		if(strstr(paramList->name, "Diagnost")) {
+			const char *paramStr = json_object_get_string(paramValue);
+			//set empty to comply with std 'not configured'
+			if(strcmp(paramStr, "") && !strstr(paramStr, "Requested")) {
+				json_object_put(ulDiagObj);
+				return ZCFG_INVALID_PARAM_VALUE;
+			}
+			json_object_object_add(ulDiagObj, paramList->name, JSON_OBJ_COPY(paramValue));
+		}else if(!strcmp(paramList->name, "Interface")) {
+			strcpy(tr98ConnObjName, json_object_get_string(paramValue));
+			if(zcfgFe98To181MappingNameGet(tr98ConnObjName, iface) != ZCFG_SUCCESS) {
+				json_object_object_add(ulDiagObj, paramList->name, json_object_new_string(""));
+			}else {
+				if(strstr(iface, "PPP.Interface") != NULL) {
+					if((zcfgFeTr181IfaceStackHigherLayerGet(iface, higherLayer)) != ZCFG_SUCCESS) {
+						json_object_put(ulDiagObj);
+						return ZCFG_NO_SUCH_OBJECT;
+					}
+					memset(iface, 0, sizeof(iface));
+					strcpy(iface, higherLayer);
+				}
+	
+				strcpy(devIpIface, iface);
+				json_object_object_add(ulDiagObj, paramList->name, json_object_new_string(devIpIface));
 			}
+		}else {
+			json_object_object_add(ulDiagObj, paramList->name, JSON_OBJ_COPY(paramValue));
 		}
-
-		printf("Can't find parameter %s in TR181\n", paramList->name);
-
+		nParm++;
 		paramList++;	
 	}
 
+	json_object_object_add(ulDiagObj, "X_ZYXEL_Creator", json_object_new_string("ACS"));
+
 	/*Set Device.Routing.Router.1.IPv4Forwarding.i*/
 	if(multiJobj){
-		json_object_put(tmpObj);
+		//json_object_put(tmpObj);
 	}
 	else{
 		if((ret = zcfgFeObjJsonSet(RDM_OID_IP_DIAG_UL_DIAG, &objIid, ulDiagObj, NULL)) != ZCFG_SUCCESS ) {
@@ -728,5 +785,193 @@
 	}
 
 	return ZCFG_SUCCESS;
+}
+
+/*
+ *   TR98 Object Name : InternetGatewayDevice.UDPEchoConfig
+ *
+ *   Related object in TR181:
+ *   Device.IP.Diagnostics.UDPEchoConfig
+ */
+zcfgRet_t udpEchoCfgObjGet(char *tr98FullPathName, int handler, struct json_object **tr98Jobj, bool updateFlag)
+{
+	zcfgRet_t ret;
+	objIndex_t objIid;
+	struct json_object *udpEchoObj = NULL;
+	struct json_object *paramValue = NULL;
+	tr98Parameter_t *paramList = NULL;
+	char iface[100] = {0};
+	char lowerLayer[100] = {0};
+	char tr98ObjName[TR98_MAX_OBJ_NAME_LENGTH] = {0};
+
+	printf("%s : Enter\n", __FUNCTION__);
+
+	IID_INIT(objIid);
+	if((ret = feObjJsonGet(RDM_OID_IP_DIAG_UDP_ECHO_CFG, &objIid, &udpEchoObj, updateFlag)) != ZCFG_SUCCESS)
+		return ret;
+
+	*tr98Jobj = json_object_new_object();
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		paramValue = json_object_object_get(udpEchoObj, paramList->name);
+		if(!paramValue) {
+			printf("Can't find parameter %s in TR181\n", paramList->name);
+			paramList++;
+			continue;
+		}
+
+		if(!strcmp(paramList->name, "Interface")) {
+			const char *devIpIface = json_object_get_string(paramValue);
+			if(!strcmp(devIpIface, "")) {
+				json_object_object_add(*tr98Jobj, paramList->name, json_object_new_string(""));
+			}
+			else {
+				strcpy(iface, devIpIface);
+				if((zcfgFeTr181IfaceStackLowerLayerGet(iface, lowerLayer)) != ZCFG_SUCCESS) {
+					//zcfgLog(ZCFG_LOG_ERR, "%s : get higher layer interface failed\n", __FUNCTION__);
+					json_object_put(udpEchoObj);
+					return ZCFG_NO_SUCH_OBJECT;
+				}
+				if(strstr(lowerLayer, "PPP.Interface") != NULL) {
+					memset(iface, 0, sizeof(iface));
+					strcpy(iface, lowerLayer);
+				}
+				if((zcfgFe181To98MappingNameGet(iface, tr98ObjName)) != ZCFG_SUCCESS) {
+					//zcfgLog(ZCFG_LOG_ERR, "%s : get mapping name failed\n", __FUNCTION__);
+					json_object_put(udpEchoObj);
+					return ZCFG_NO_SUCH_OBJECT;
+				}
+				json_object_object_add(*tr98Jobj, paramList->name, json_object_new_string(tr98ObjName));
+			}
+		}else {
+			json_object_object_add(*tr98Jobj, paramList->name, JSON_OBJ_COPY(paramValue));
+		}
+		paramList++;
+	}
+
+	json_object_put(udpEchoObj);
+
+	return ZCFG_SUCCESS;
+}
+
+#define UDPECHOCFG_SET_PARM_NUM 5
+/*
+ *   TR98 Object Name : InternetGatewayDevice.UDPEchoConfig
+ *
+ *   Related object in TR181:
+ *   Device.IP.Diagnostics.UDPEchoConfig
+ */
+zcfgRet_t udpEchoCfgObjSet(char *tr98FullPathName, int handler, struct json_object *tr98Jobj, struct json_object *multiJobj)
+{
+	zcfgRet_t ret;
+	objIndex_t objIid;
+	struct json_object *udpEchoObj = NULL;
+	struct json_object *paramValue = NULL;
+	struct json_object *tmpObj = NULL;
+	tr98Parameter_t *paramList = NULL;
+	char iface[100] = {0};
+	char higherLayer[100] = {0};
+	int nParm = 0;
+	struct json_object *tr181ObjParm = NULL;
+
+	printf("%s : Enter\n", __FUNCTION__);
+
+	IID_INIT(objIid);
+	if((ret = zcfgFeObjJsonGet(RDM_OID_IP_DIAG_UDP_ECHO_CFG, &objIid, &udpEchoObj)) != ZCFG_SUCCESS)
+		return ret;
+
+	if(multiJobj){
+		tmpObj = udpEchoObj;
+		udpEchoObj = NULL;
+		udpEchoObj = zcfgFeJsonMultiObjAppend(RDM_OID_IP_DIAG_UDP_ECHO_CFG, &objIid, multiJobj, tmpObj);
+		json_object_put(tmpObj);
+	}
+
+	paramList = tr98Obj[handler].parameter;
+	//This is specific implementation on 'UdpEchoConfig'
+	while((nParm < UDPECHOCFG_SET_PARM_NUM) && (paramList->name != NULL)) {
+		paramValue = json_object_object_get(tr98Jobj, paramList->name);
+		if(!paramValue) {
+			paramList++;
+			nParm++;
+			continue;
+		}
+
+		if(!strcmp(paramList->name, "Enable")) {
+			bool tr181ObjParmValue;
+			bool tr98ObjParmValue = json_object_get_boolean(paramValue);
+			if(!(tr181ObjParm = json_object_object_get(udpEchoObj, paramList->name))) {
+				json_object_put(udpEchoObj);
+				return ZCFG_NO_SUCH_OBJECT;
+			}
+			tr181ObjParmValue = json_object_get_boolean(tr181ObjParm);
+			if(tr98ObjParmValue && tr181ObjParmValue){
+				json_object_put(udpEchoObj);
+				return ZCFG_INVALID_PARAM_VALUE;
+			}else {
+				json_object_object_add(udpEchoObj, paramList->name, JSON_OBJ_COPY(paramValue));
+			}
+		}else if(!strcmp(paramList->name, "Interface")) {
+			const char *tr98ObjParmValue = json_object_get_string(paramValue);
+			if(!strcmp(tr98ObjParmValue, "")) {
+				json_object_object_add(udpEchoObj, paramList->name, json_object_new_string(""));
+			}else {
+				objIndex_t ipIfIid, addrIid;
+				struct json_object *ipv4AddrObj = NULL;
+				//if((zcfgFe98To181MappingNameGet(tr98ObjParmValue, iface)) != ZCFG_SUCCESS) {
+				if((zcfgFe98To181MappingNameGet((char *)tr98ObjParmValue, iface)) != ZCFG_SUCCESS) {
+					//zcfgLog(ZCFG_LOG_ERR, "%s : get mapping name failed\n", __FUNCTION__);
+					json_object_put(udpEchoObj);
+					return ZCFG_NO_SUCH_OBJECT;
+				}
+				if(strstr(iface, "PPP.Interface") != NULL) {
+					if((zcfgFeTr181IfaceStackHigherLayerGet(iface, higherLayer)) != ZCFG_SUCCESS) {
+						//zcfgLog(ZCFG_LOG_ERR, "%s : get higher layer interface failed\n", __FUNCTION__);
+						json_object_put(udpEchoObj);
+						return ZCFG_NO_SUCH_OBJECT;
+					}
+					memset(iface, 0, sizeof(iface));
+					strcpy(iface, higherLayer);
+				}
+				printf("%s: interface %s\n", __FUNCTION__, iface);
+				IID_INIT(ipIfIid);
+				sscanf(iface, "IP.Interface.%hhu", &ipIfIid.idx[0]);
+				ipIfIid.level = 1;
+				IID_INIT(addrIid);
+				if(zcfgFeSubInObjJsonGetNext(RDM_OID_IP_IFACE_V4_ADDR, &ipIfIid, &addrIid, &ipv4AddrObj) != ZCFG_SUCCESS) {
+					json_object_put(udpEchoObj);
+					return ZCFG_NO_SUCH_OBJECT;
+				}
+				if((json_object_get_boolean(json_object_object_get(ipv4AddrObj, "Enable"))) != true) {
+					json_object_put(udpEchoObj);
+					json_object_put(ipv4AddrObj);
+					return ZCFG_NO_SUCH_OBJECT;
+				}
+				json_object_put(ipv4AddrObj);
+
+				json_object_object_add(udpEchoObj, paramList->name, json_object_new_string(iface));
+			}
+		}else if(!strcmp(paramList->name, "SourceIPAddress")) {
+			char addr[sizeof(struct in_addr)] = {0};
+			const char *srcIpAddress = json_object_get_string(paramValue);
+			if((inet_pton(AF_INET, srcIpAddress, (void *)addr)) != 1) {
+				//zcfgLog(ZCFG_LOG_ERR, "%s : wrong IP address\n", __FUNCTION__);
+				json_object_put(udpEchoObj);
+				return ZCFG_INVALID_ARGUMENTS;
+			}
+			json_object_object_add(udpEchoObj, paramList->name, JSON_OBJ_COPY(paramValue));
+		}else {
+			json_object_object_add(udpEchoObj, paramList->name, JSON_OBJ_COPY(paramValue));
+		}
+		paramList++;
+		nParm++;
+	}
+
+	if(!multiJobj) {
+		//set parameter
+		json_object_put(udpEchoObj);
+	}
+
+	return ZCFG_SUCCESS;
 }
 
Index: libzcfg_fe_tr98-1.0/diag.h
===================================================================
--- libzcfg_fe_tr98-1.0.orig/diag.h	2015-02-26 11:26:39.738680721 +0800
+++ libzcfg_fe_tr98-1.0/diag.h	2015-02-26 11:26:40.474680735 +0800
@@ -5,6 +5,7 @@
 extern tr98Parameter_t para_PerpDiag[];
 extern tr98Parameter_t para_DlDiag[];
 extern tr98Parameter_t para_UlDiag[];
+extern tr98Parameter_t para_UdpEchoCfg[];
 /*Handler Function*/
 
 /* InternetGatewayDevice.IPPingDiagnostics */
@@ -24,4 +25,7 @@
 extern zcfgRet_t dlDiagObjSet(char *, int, struct json_object *, struct json_object *);
 /* InternetGatewayDevice.UploadDiagnostics */
 extern zcfgRet_t ulDiagObjGet(char *, int, struct json_object **, bool);
-extern zcfgRet_t ulDiagObjSet(char *, int, struct json_object *, struct json_object *);
\ No newline at end of file
+extern zcfgRet_t ulDiagObjSet(char *, int, struct json_object *, struct json_object *);
+/* InternetGatewayDevice.UDPEchoConfig */
+extern zcfgRet_t udpEchoCfgObjGet(char *, int, struct json_object **, bool);
+extern zcfgRet_t udpEchoCfgObjSet(char *, int, struct json_object *, struct json_object *);
Index: libzcfg_fe_tr98-1.0/diag_parameter.h
===================================================================
--- libzcfg_fe_tr98-1.0.orig/diag_parameter.h	2014-02-12 19:30:56.000000000 +0800
+++ libzcfg_fe_tr98-1.0/diag_parameter.h	2015-02-26 11:26:40.474680735 +0800
@@ -46,32 +46,46 @@
 	{ "DiagnosticsState", PARAMETER_ATTR_WRITE, 257, json_type_string},
 	{ "Interface", PARAMETER_ATTR_WRITE, 257, json_type_string},
 	{ "DownloadURL", PARAMETER_ATTR_WRITE, 257, json_type_string},
-	//{ "DownloadTransports", PARAMETER_ATTR_READONLY, 17, json_type_string},
-	{ "DSCP", PARAMETER_ATTR_READONLY, 0, json_type_uint32},
-	{ "EthernetPriority", PARAMETER_ATTR_READONLY, 0, json_type_uint32},
-	{ "ROMTime", PARAMETER_ATTR_READONLY, 17, json_type_time},
-	{ "BOMTime", PARAMETER_ATTR_READONLY, 17, json_type_time},
-	{ "EOMTime", PARAMETER_ATTR_READONLY, 17, json_type_time},
+	{ "DSCP", PARAMETER_ATTR_WRITE, 0, json_type_uint32},
+	{ "EthernetPriority", PARAMETER_ATTR_WRITE, 0, json_type_uint32},
+	{ "ROMTime", PARAMETER_ATTR_READONLY, 27, json_type_time},
+	{ "BOMTime", PARAMETER_ATTR_READONLY, 27, json_type_time},
+	{ "EOMTime", PARAMETER_ATTR_READONLY, 27, json_type_time},
 	{ "TestBytesReceived", PARAMETER_ATTR_READONLY, 0, json_type_uint32},
 	{ "TotalBytesReceived", PARAMETER_ATTR_READONLY, 0, json_type_uint32},
-	{ "TCPOpenRequestTime", PARAMETER_ATTR_READONLY, 17, json_type_time},
-	{ "TCPOpenResponseTime", PARAMETER_ATTR_READONLY, 17, json_type_time},
+	{ "TCPOpenRequestTime", PARAMETER_ATTR_READONLY, 27, json_type_time},
+	{ "TCPOpenResponseTime", PARAMETER_ATTR_READONLY, 27, json_type_time},
 	{ NULL, 0, 0}
 };
 
 tr98Parameter_t para_UlDiag[] = {
 	{ "DiagnosticsState", PARAMETER_ATTR_WRITE, 257, json_type_string},
 	{ "Interface", PARAMETER_ATTR_WRITE, 257, json_type_string},
-	{ "DownloadURL", PARAMETER_ATTR_WRITE, 257, json_type_string},
-	//{ "UploadTransports", PARAMETER_ATTR_READONLY, 17, json_type_string},
-	{ "DSCP", PARAMETER_ATTR_READONLY, 0, json_type_uint32},
-	{ "EthernetPriority", PARAMETER_ATTR_READONLY, 0, json_type_uint32},
-	{ "TestFileLength", PARAMETER_ATTR_READONLY, 0, json_type_uint32},
-	{ "ROMTime", PARAMETER_ATTR_READONLY, 17, json_type_time},
-	{ "BOMTime", PARAMETER_ATTR_READONLY, 17, json_type_time},
-	{ "EOMTime", PARAMETER_ATTR_READONLY, 17, json_type_time},
+	{ "UploadURL", PARAMETER_ATTR_WRITE, 257, json_type_string},
+	{ "DSCP", PARAMETER_ATTR_WRITE, 0, json_type_uint32},
+	{ "EthernetPriority", PARAMETER_ATTR_WRITE, 0, json_type_uint32},
+	{ "TestFileLength", PARAMETER_ATTR_WRITE, 0, json_type_uint32},
+	{ "ROMTime", PARAMETER_ATTR_READONLY, 27, json_type_time},
+	{ "BOMTime", PARAMETER_ATTR_READONLY, 27, json_type_time},
+	{ "EOMTime", PARAMETER_ATTR_READONLY, 27, json_type_time},
 	{ "TotalBytesSent", PARAMETER_ATTR_READONLY, 0, json_type_uint32},
-	{ "TCPOpenRequestTime", PARAMETER_ATTR_READONLY, 17, json_type_time},
-	{ "TCPOpenResponseTime", PARAMETER_ATTR_READONLY, 17, json_type_time},
+	{ "TCPOpenRequestTime", PARAMETER_ATTR_READONLY, 27, json_type_time},
+	{ "TCPOpenResponseTime", PARAMETER_ATTR_READONLY, 27, json_type_time},
+	{ NULL, 0, 0}
+};
+
+tr98Parameter_t para_UdpEchoCfg[] = {
+	{ "Enable", PARAMETER_ATTR_WRITE, 0, json_type_boolean},
+	{ "Interface", PARAMETER_ATTR_WRITE, 257, json_type_string},
+	{ "SourceIPAddress", PARAMETER_ATTR_WRITE, 17, json_type_string},
+	{ "UDPPort", PARAMETER_ATTR_WRITE, 0, json_type_uint32},
+	{ "EchoPlusEnabled", PARAMETER_ATTR_WRITE, 0, json_type_boolean},
+	{ "EchoPlusSupported", PARAMETER_ATTR_READONLY, 0, json_type_boolean},
+	{ "PacketsReceived", PARAMETER_ATTR_READONLY, 0, json_type_uint32},
+	{ "PacketsResponded", PARAMETER_ATTR_READONLY, 0, json_type_uint32},
+	{ "BytesReceived", PARAMETER_ATTR_READONLY, 0, json_type_uint32},
+	{ "BytesResponded", PARAMETER_ATTR_READONLY, 0, json_type_uint32},
+	{ "TimeFirstPacketReceived", PARAMETER_ATTR_READONLY, 27, json_type_time},
+	{ "TimeLastPacketReceived", PARAMETER_ATTR_READONLY, 27, json_type_time},
 	{ NULL, 0, 0}
-};
\ No newline at end of file
+};
Index: libzcfg_fe_tr98-1.0/zcfg_fe_tr98_handle.h
===================================================================
--- libzcfg_fe_tr98-1.0.orig/zcfg_fe_tr98_handle.h	2015-02-26 11:26:40.414680734 +0800
+++ libzcfg_fe_tr98-1.0/zcfg_fe_tr98_handle.h	2015-02-26 11:26:40.474680735 +0800
@@ -245,7 +245,7 @@
 {TR98_RT_HOP,                   ATTR_INDEXNODE, para_RtHop,		        routeHopsObjGet,         NULL,                   NULL,             NULL,            NULL},
 {TR98_DL_DIAG,                  0,              para_DlDiag,			dlDiagObjGet,            dlDiagObjSet,           NULL,             NULL,            NULL},
 {TR98_UL_DIAG,                  0,              para_UlDiag,			ulDiagObjGet,            ulDiagObjSet,           NULL,             NULL,            NULL},
-//{TR98_UDP_ECHO_CONF,            0,              NULL,                   NULL,                    NULL,                   NULL,             NULL,            NULL},
+{TR98_UDP_ECHO_CONF,            0,              para_UdpEchoCfg,        udpEchoCfgObjGet,        udpEchoCfgObjSet,       NULL,             NULL,            NULL},
 {TR98_LAN_DEV,                  ATTR_INDEX_CREA,para_LanDev,            lanDevObjGet,            NULL,                   lanDevObjAdd,     lanDevObjDel,    NULL},
 {TR98_LAN_HOST_CONF_MGMT,       0,              para_LanHostConfMgmt,   lanHostConfMgmtObjGet,   lanHostConfMgmtObjSet,  NULL,             NULL,            NULL},
 {TR98_IP_INTF,                  ATTR_INDEX_CREA,para_IpIntf,		    lanIpIntfObjGet,         lanIpIntfObjSet,        lanIpIntfObjAdd,  lanIpIntfObjDel,	NULL},
