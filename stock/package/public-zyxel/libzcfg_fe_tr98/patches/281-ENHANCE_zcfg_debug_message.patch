Index: libzcfg_fe_tr98-1.0/Makefile
===================================================================
--- libzcfg_fe_tr98-1.0.orig/Makefile	2016-01-27 13:42:58.296097524 +0800
+++ libzcfg_fe_tr98-1.0/Makefile	2016-01-27 13:42:58.340097525 +0800
@@ -15,7 +15,8 @@
 
 LDFLAGS += $(LIB_PATH) $(LINK_LIB)
 CFLAGS += $(INC_PATH)
-CFLAGS += -DZCFG_DYNAMIC_NAMEMAPPING
+# -DZCFG_MAPPING_DEBUG_SYSLOG -DZCFG_MAPPING_DEBUG_STDLOG
+CFLAGS += -DZCFG_DYNAMIC_NAMEMAPPING -DZCFG_MAPPING_DEBUG_SYSLOG -DZCFG_MAPPING_DEBUG_STDLOG
 CFLAGS += -DIPV6INTERFACE_PROFILE -DDHCPV6CLIENT_PROFILE -DIPV6RD_PROFILE -DROUTERADVERTISEMENT_PROFILE -DIPV6SERVER_PROFILE
 CFLAGS += -DZCFG_DYNAMIC_NAMEMAPPING -DZCFG_PARM_NAMEMAPPING
 CFLAGS += -DZYXEL_EXT=1
Index: libzcfg_fe_tr98-1.0/zcfg_fe_tr98.c
===================================================================
--- libzcfg_fe_tr98-1.0.orig/zcfg_fe_tr98.c	2016-01-27 13:42:58.076097520 +0800
+++ libzcfg_fe_tr98-1.0/zcfg_fe_tr98.c	2016-01-27 13:42:58.340097525 +0800
@@ -356,7 +356,7 @@
 	strcpy(tmpName, objName);
 
 	if(*(tmpName + strlen(tmpName) - 1) == '.') {
-		printf("%s : Invalid object Name %s ended with '.'\n", __FUNCTION__, objName);
+		ztrdbg(ZTR_DL_ERR,  "%s : Invalid object Name %s ended with '.'\n", __FUNCTION__, objName);
 		free(tmpName);
 		return ZCFG_INVALID_OBJECT;
 	}
@@ -616,7 +616,7 @@
 
 	paramStr = json_object_get_string(json_object_object_get((struct json_object *)linkObj, "Status"));
 	linkParmStatus = (strstr(paramStr, TR181_STATUS_UP)) ? true : false;
-	printf("%s: set %s %d, %d\n", __FUNCTION__, wanLinkName, linkParmStatus, set);
+	ztrdbg(ZTR_DL_DEBUG, "%s: set %s %d, %d\n", __FUNCTION__, wanLinkName, linkParmStatus, set);
 	
 	if(linkParmStatus == set) {
 		if(retObj) *retObj = linkObj;
@@ -657,16 +657,14 @@
 	char newtr98ObjName[257] = {0};
 #endif
 
-#if TR98_MAPPING_DEBUG
-	printf("Enter %s\n", __FUNCTION__);
-#endif
+	ztrdbg(ZTR_DL_DEBUG,  "%s\n", __FUNCTION__);
+
 	if((ret = zcfgFeTr98ClassNameGet(tr98ObjName, tr98ClassName)) != ZCFG_SUCCESS) {
 		return ret;
 	}
 
-#if TR98_MAPPING_DEBUG
-	printf("tr98ClassName %s\n", tr98ClassName);
-#endif
+	ztrdbg(ZTR_DL_INFO, "%s: tr98ClassName %s\n", __FUNCTION__, tr98ClassName);
+
 	handler = zcfgFeTr98HandlerGet(tr98ClassName);
 
 	if(handler != -1) {
@@ -701,11 +699,11 @@
 		return NULL;
 
 	if(addition)
-		printf("%s: has addition\n", __FUNCTION__);
+		ztrdbg(ZTR_DL_DEBUG,  "%s: has addition\n", __FUNCTION__);
 
 	struct json_object *parmListObj = json_tokener_parse((const char *)parmList);
 	if(!parmListObj) {
-		printf("%s: parmList object build fail: %s\n", __FUNCTION__, parmList);
+		ztrdbg(ZTR_DL_ERR,  "%s: parmList object build fail: %s\n", __FUNCTION__, parmList);
 		return NULL;
 	}
 
@@ -740,7 +738,7 @@
 		paramValueObj = json_object_object_get(paramValueObjs, paramString);
 		secured = (paramValueObj) ? true : false;
 		if(paramValueObj)
-			printf("%s: has parameter %s %s\n", __FUNCTION__, parmName, paramString);
+			ztrdbg(ZTR_DL_DEBUG,  "%s: has parameter %s %s\n", __FUNCTION__, parmName, paramString);
 	}
 
 	return (secured == true) ? ZCFG_SUCCESS : ZCFG_INVALID_PARAM_VALUE;
@@ -839,13 +837,12 @@
 	return ZCFG_SUCCESS;
 #endif
 
-	//zcfgLog(ZCFG_LOG_INFO, "%s\n", __FUNCTION__);
-	//printf("Enter %s()\n", __FUNCTION__);
+	ztrdbg(ZTR_DL_DEBUG, "%s\n", __FUNCTION__);
 
 	if(!tr98PathName || !tr181PathName || strlen(tr98PathName) == 0)
 		return ZCFG_INTERNAL_ERROR;
 
-	//printf("*** query tr98PathName=%s\n", tr98PathName);
+	ztrdbg(ZTR_DL_DEBUG,  "%s: *** query tr98PathName=%s\n", __FUNCTION__, tr98PathName);
 	
  	IID_INIT(objIid);
 	if((ret = zcfgFe98NameToSeqnum(tr98PathName, &nameSeqNum, &objIid)) != ZCFG_SUCCESS) {
@@ -857,12 +854,12 @@
 
 	IID_INIT(tr181ObjIid);
 	if((ret = zcfgObjMappingGet(ZCFG_MSG_REQUEST_TR98_OBJMAPPING, nameSeqNum, &objIid, &oid, &tr181ObjIid)) != ZCFG_SUCCESS) {
-		//zcfgLog(ZCFG_LOG_INFO, "%s: 98To181 mapping query fail\n", __FUNCTION__);
+		ztrdbg(ZTR_SL_DEBUG, "%s: 98To181 mapping query fail\n", __FUNCTION__);
 		return ret;
 	}
 
 	if((ret = zcfgFeObjIdToName(oid, &tr181ObjIid, queriedTr181PathName)) != ZCFG_SUCCESS) {
-		//zcfgLog(ZCFG_LOG_INFO, "%s: ObjId to Name fail\n", __FUNCTION__);
+		ztrdbg(ZTR_SL_DEBUG, "%s: ObjId to Name fail\n", __FUNCTION__);
 		return ret;	
 	}
 
@@ -872,7 +869,7 @@
 	else
 		strcpy(tr181PathName, queriedTr181PathName);
 	
-	printf("18198mapqried: %s %s\n", tr98PathName, tr181PathName);
+	ztrdbg(ZTR_DL_DEBUG,  "%s: 98181mapqried: %s %s\n", __FUNCTION__, tr98PathName, tr181PathName);
 
 	return ZCFG_SUCCESS;
 }
@@ -890,7 +887,7 @@
 
 	zcfgLog(ZCFG_LOG_INFO, "%s\n", __FUNCTION__);
 
-	//printf("*** tr181PathName=%s\n", tr181PathName);
+	ztrdbg(ZTR_DL_DEBUG,  "%s: *** tr181PathName=%s\n", __FUNCTION__, tr181PathName);
 
 	if(!tr98PathName || !tr181PathName)
 		return ZCFG_INTERNAL_ERROR;
@@ -913,7 +910,7 @@
 		return ret;
 	}
 
-	printf("98181mapqried: %s %s\n", tr181PathName, tr98PathName);
+	ztrdbg(ZTR_DL_DEBUG,  "%s: 18198mapqried: %s %s\n", __FUNCTION__, tr181PathName, tr98PathName);
 
 	return ZCFG_SUCCESS;
 }
@@ -929,7 +926,7 @@
 	objIndex_t objIid;
 	tr98NameObj_t *entry = NULL;
 
-	//zcfgLog(ZCFG_LOG_INFO, "%s\n", __FUNCTION__);
+	ztrdbg(ZTR_SL_DEBUG, "%s\n", __FUNCTION__);
 
 	if(!tr98PathName || !seqnum || !tr98ObjIid || (strlen(tr98PathName) <= 0))
 		return ZCFG_INTERNAL_ERROR;
@@ -983,7 +980,7 @@
 	//zcfgLog(ZCFG_LOG_INFO, "%s: parsed, %s\n", __FUNCTION__, pathName);
 
 	if(level >= SUPPORTED_INDEX_LEVEL) {
-		//zcfgLog(ZCFG_LOG_INFO, "%s: Object index error\n", __FUNCTION__);
+		ztrdbg(ZTR_SL_DEBUG, "%s: Object index error\n", __FUNCTION__);
 		return ZCFG_NO_SUCH_OBJECT;
 	}
 
@@ -995,8 +992,8 @@
 	if(!IS_SEQNUM_RIGHT((entry->nameSeqNum)))
 		return ZCFG_NO_SUCH_OBJECT;
 
-	//zcfgLog(ZCFG_LOG_INFO, "%s: seqnum, %u %hu,%hu,%hu,%hu,%hu,%hu\n", __FUNCTION__, entry->nameSeqNum,
-	//	objIid.idx[0], objIid.idx[1], objIid.idx[2], objIid.idx[3], objIid.idx[4], objIid.idx[5]);
+	ztrdbg(ZTR_SL_DEBUG, "%s: seqnum, %u %hu,%hu,%hu,%hu,%hu,%hu\n", __FUNCTION__, entry->nameSeqNum,
+		objIid.idx[0], objIid.idx[1], objIid.idx[2], objIid.idx[3], objIid.idx[4], objIid.idx[5]);
 
 	*seqnum = (zcfg_name_t)entry->nameSeqNum;
 	memcpy(tr98ObjIid, &objIid, sizeof(objIndex_t));
@@ -1070,7 +1067,7 @@
 
 	sscanf(notifyName, "%[^_]_%[^_]_%s", seqnumStr, idxstr, parmName);
 
-	//printf("%s: %s\n", __FUNCTION__, notifyName);
+	ztrdbg(ZTR_DL_DEBUG, "%s: %s\n", __FUNCTION__, notifyName);
 
 	seqnum = atoi(seqnumStr);
 	if(!(IS_SEQNUM_RIGHT(seqnum)))
@@ -1164,16 +1161,14 @@
 	char newtr98ObjName[256] = {0};
 #endif
 
-#if TR98_MAPPING_DEBUG
-	printf("Enter %s\n", __FUNCTION__);
-#endif
+	ztrdbg(ZTR_DL_DEBUG, "%s\n", __FUNCTION__);
+
 	if((ret = zcfgFeTr98ClassNameGet(tr98ObjName, tr98ClassName)) != ZCFG_SUCCESS) {
 		return ret;
 	}
 
-#if TR98_MAPPING_DEBUG
-	printf("tr98ClassName %s\n", tr98ClassName);
-#endif
+	ztrdbg(ZTR_DL_INFO, "%s: tr98ClassName %s\n", __FUNCTION__, tr98ClassName);
+
 	handler = zcfgFeTr98HandlerGet(tr98ClassName);
 
 	if(handler != -1) {
@@ -1211,17 +1206,13 @@
 	char tr98ObjNameTmp[128];
 	char *ptr;
 
-#if TR98_MAPPING_DEBUG
-	printf("Enter %s\n", __FUNCTION__);
-#endif
+	ztrdbg(ZTR_DL_DEBUG, "%s\n", __FUNCTION__);
 
 	if((ret = zcfgFeTr98ClassNameGet(tr98ObjName, tr98ClassName)) != ZCFG_SUCCESS) {
 		return ret;
 	}
 
-#if TR98_MAPPING_DEBUG
-	printf("tr98ClassName %s\n", tr98ClassName);
-#endif
+	ztrdbg(ZTR_DL_INFO, "%s: tr98ClassName %s\n", __FUNCTION__, tr98ClassName);
 
 	handler = zcfgFeTr98HandlerGet(tr98ClassName);
 	if(handler != -1) {
@@ -1448,16 +1439,14 @@
 	char newtr98ObjName[256] = {0};
 #endif
 
-#if TR98_MAPPING_DEBUG
-	printf("Enter %s\n", __FUNCTION__);
-#endif
+	ztrdbg(ZTR_DL_DEBUG, "%s\n", __FUNCTION__);
+
 	if((ret = zcfgFeTr98ClassNameGet(tr98ObjName, tr98ClassName)) != ZCFG_SUCCESS) {
 		return ret;
 	}
 
-#if TR98_MAPPING_DEBUG
-	printf("tr98ClassName %s\n", tr98ClassName);
-#endif
+	ztrdbg(ZTR_DL_INFO, "%s: tr98ClassName %s\n", __FUNCTION__, tr98ClassName);
+
 	//printf("value %s\n", json_object_to_json_string(value));
 
 	handler = zcfgFeTr98HandlerGet(tr98ClassName);
@@ -1535,16 +1524,14 @@
 	char newtr98ObjName[256] = {0};
 #endif
 
-#if TR98_MAPPING_DEBUG
-	printf("Enter %s\n", __FUNCTION__);
-#endif
+	ztrdbg(ZTR_DL_DEBUG, "%s\n", __FUNCTION__);
+
 	if((ret = zcfgFeTr98ClassNameGet(tr98ObjName, tr98ClassName)) != ZCFG_SUCCESS) {
 		return ret;
 	}
 
-#if TR98_MAPPING_DEBUG
-	printf("tr98ClassName %s\n", tr98ClassName);
-#endif
+	ztrdbg(ZTR_DL_INFO, "%s: tr98ClassName %s\n", __FUNCTION__, tr98ClassName);
+
 	handler = zcfgFeTr98HandlerGet(tr98ClassName);
 	if(handler != -1) {
 		if(!(tr98Obj[handler].attr & OBJECT_ATTR_CREATE)){
@@ -1584,17 +1571,14 @@
 	char newtr98ObjName[256] = {0};
 #endif
 
+	ztrdbg(ZTR_DL_DEBUG, "%s\n", __FUNCTION__);
 
-#if TR98_MAPPING_DEBUG
-	printf("Enter %s\n", __FUNCTION__);
-#endif
 	if((ret = zcfgFeTr98ClassNameGet(tr98ObjName, tr98ClassName)) != ZCFG_SUCCESS) {
 		return ret;
 	}
 
-#if TR98_MAPPING_DEBUG
-	printf("tr98ClassName %s\n", tr98ClassName);
-#endif
+	ztrdbg(ZTR_DL_INFO, "%s: tr98ClassName %s\n", __FUNCTION__, tr98ClassName);
+
 	handler = zcfgFeTr98HandlerGet(tr98ClassName);
 	if(handler != -1) {
 		if(!(tr98Obj[handler].attr & OBJECT_ATTR_CREATE)){
@@ -1651,9 +1635,8 @@
 	char tr98ClassName[128] = {0};
 	int handler = 0;
 
-#if TR98_MAPPING_DEBUG
-	printf("Enter %s\n", __FUNCTION__);
-#endif
+	ztrdbg(ZTR_DL_DEBUG, "%s\n", __FUNCTION__);
+
 	if((ret = zcfgFeTr98ClassNameGet(tr98ObjName, tr98ClassName)) != ZCFG_SUCCESS) {
 		return ret;
 	}
@@ -1680,8 +1663,9 @@
 	rdm_IpIface_t *ipIntfObj = NULL;
 #endif
 	
-	printf("Enter %s\n", __FUNCTION__);
 	if(notifyName == NULL || objName== NULL || objParm == NULL) return ZCFG_INVALID_ARGUMENTS;
+
+	ztrdbg(ZTR_DL_INFO, "%s: notifyName: %s\n", __FUNCTION__, notifyName);
 	
 	*objName = '\0';
 	*objParm = '\0';
@@ -1732,7 +1716,7 @@
 		}
 	}
 	
-	printf("%s: notifyName=%s, objName=%s, objParm=%s\n", __FUNCTION__, notifyName, objName, objParm);
+	ztrdbg(ZTR_DL_DEBUG, "%s: notifyName=%s, objName=%s, objParm=%s\n", __FUNCTION__, notifyName, objName, objParm);
 	return ZCFG_SUCCESS;
 }
 #endif
@@ -1747,9 +1731,8 @@
 	char *token = NULL, *tmp = NULL;
 	int handler = 0;
 
-#if TR98_MAPPING_DEBUG
-	printf("Enter %s\n", __FUNCTION__);
-#endif
+	ztrdbg(ZTR_DL_DEBUG, "%s\n", __FUNCTION__);
+
 	if(tr181NotifyInfo == NULL && tr98NotifyInfo == NULL) {
 		printf("Invalid arguments\n");
 		return ZCFG_INVALID_ARGUMENTS;
@@ -1772,7 +1755,7 @@
 		if(zcfgFeGetTr181NameParm(tr181NotifyName, tr181ObjName, tr181ParamName) != ZCFG_SUCCESS)
 			continue;
 			
-		printf("%s: tr181NotifyName=%s, tr181ObjName=%s, tr181ParamName=%s\n", __FUNCTION__, tr181NotifyName, tr181ObjName, tr181ParamName);
+		ztrdbg(ZTR_DL_DEBUG, "%s: tr181NotifyName=%s, tr181ObjName=%s, tr181ParamName=%s\n", __FUNCTION__, tr181NotifyName, tr181ObjName, tr181ParamName);
 #endif
 			if((ret = zcfgFe181To98MappingNameGet(tr181ObjName, tr98ObjName)) != ZCFG_SUCCESS)
 				continue;
@@ -1848,9 +1831,9 @@
 	if((ret = zcfgFeTr98ClassNameGet(tr98ObjName, tr98ClassName)) != ZCFG_SUCCESS) {
 		return ret;
 	}
-#if TR98_MAPPING_DEBUG
-	printf("tr98ClassName %s\n", tr98ClassName);
-#endif	
+
+	ztrdbg(ZTR_DL_INFO, "%s: tr98ClassName %s\n", __FUNCTION__, tr98ClassName);
+
 	handler = zcfgFeTr98HandlerGet(tr98ClassName);
 	if(handler != -1) {
 		paramList = tr98Obj[handler].parameter;
@@ -1898,7 +1881,7 @@
 	int handler = 0;
 	tr98Parameter_t *paramList = NULL;
 
-	//zcfgLog(ZCFG_LOG_INFO, "%s\n", __FUNCTION__);
+	ztrdbg(ZTR_SL_DEBUG, "%s\n", __FUNCTION__);
 
 	if((ret = zcfgFeTr98ClassNameGet((char *)tr98ObjName, tr98ClassName)) != ZCFG_SUCCESS) {
 		return ret;
@@ -1944,7 +1927,7 @@
 	IID_INIT(tr98ObjIid);
 	if(zcfgFe98NameToSeqnum((const char *)tr98ObjName, &seqnum, &tr98ObjIid) == ZCFG_SUCCESS) {
 		if((ret = zcfgFeParmAttrQry(seqnum, &tr98ObjIid, name, &oid, &objIid, queriedParmName, &attr)) != ZCFG_SUCCESS) {
-			//zcfgLog(ZCFG_LOG_INFO, "%s: parm attr query fail, %u %s\n", __FUNCTION__, seqnum, name);
+			ztrdbg(ZTR_SL_DEBUG, "%s: parm attr query fail, %u %s\n", __FUNCTION__, seqnum, name);
 			return ret;
 			//printf("%s: parm attr query fail, %u %s\n", __FUNCTION__, seqnum, name);
 			//return 0;
@@ -2068,7 +2051,7 @@
 
 	setParmAttr = (zcfgFeSetParmAttr_t *)malloc(sizeof(zcfgFeSetParmAttr_t));
 
-	printf("%s: obj %u %hu,%hu,%hu,%hu,%hu,%hu %s, attr 0x%x\n", __FUNCTION__, objnum, 
+	ztrdbg(ZTR_DL_DEBUG, "%s: obj %u %hu,%hu,%hu,%hu,%hu,%hu %s, attr 0x%x\n", __FUNCTION__, objnum,
 			objIid->idx[0], objIid->idx[1], objIid->idx[2], objIid->idx[3], objIid->idx[4], objIid->idx[5], parmName, attr);
 
 	setParmAttr->parmSetAttr.objnum = objnum;
Index: libzcfg_fe_tr98-1.0/zcfg_fe_tr98.h
===================================================================
--- libzcfg_fe_tr98-1.0.orig/zcfg_fe_tr98.h	2016-01-27 13:42:57.420097507 +0800
+++ libzcfg_fe_tr98-1.0/zcfg_fe_tr98.h	2016-01-27 13:42:58.344097525 +0800
@@ -61,6 +61,73 @@
 }tr069ERR_e;
 #endif
 
+
+// config zcfg tr98 debug level
+#define ZTR_DEBUG_LEVEL ZCFG_LOG_DEBUG
+
+#ifdef ZCFG_MAPPING_DEBUG_SYSLOG
+#define ZCFGTR98_SYSLOG (1 << 8) 
+#else
+#define ZCFGTR98_SYSLOG 0
+#endif
+#ifdef ZCFG_MAPPING_DEBUG_STDLOG
+#define ZCFGTR98_STDLOG (1 << 9)
+#else
+#define ZCFGTR98_STDLOG 0
+#endif
+
+#define LOGLEVEL_MASK ((1 << 3)-1)
+
+enum {
+        ZTR_SL_EMERG =  ZCFG_LOG_EMERG | ZCFGTR98_SYSLOG,
+        ZTR_SL_ALERT =  ZCFG_LOG_ALERT | ZCFGTR98_SYSLOG,
+        ZTR_SL_CRIT =   ZCFG_LOG_CRIT | ZCFGTR98_SYSLOG,
+        ZTR_SL_ERR  =   ZCFG_LOG_ERR | ZCFGTR98_SYSLOG,
+        ZTR_SL_WARNING = ZCFG_LOG_WARNING | ZCFGTR98_SYSLOG,
+        ZTR_SL_NOTICE = ZCFG_LOG_NOTICE | ZCFGTR98_SYSLOG,
+        ZTR_SL_INFO  =  ZCFG_LOG_INFO | ZCFGTR98_SYSLOG,
+        ZTR_SL_DEBUG =  ZCFG_LOG_DEBUG | ZCFGTR98_SYSLOG,
+        ZTR_DL_EMERG =  ZCFG_LOG_EMERG | ZCFGTR98_STDLOG,
+        ZTR_DL_ALERT =  ZCFG_LOG_ALERT | ZCFGTR98_STDLOG,
+        ZTR_DL_CRIT =   ZCFG_LOG_CRIT | ZCFGTR98_STDLOG,
+        ZTR_DL_ERR  =   ZCFG_LOG_ERR | ZCFGTR98_STDLOG,
+        ZTR_DL_WARNING = ZCFG_LOG_WARNING | ZCFGTR98_STDLOG,
+        ZTR_DL_NOTICE = ZCFG_LOG_NOTICE | ZCFGTR98_STDLOG,
+        ZTR_DL_INFO  =  ZCFG_LOG_INFO | ZCFGTR98_STDLOG,
+        ZTR_DL_DEBUG =  ZCFG_LOG_DEBUG | ZCFGTR98_STDLOG,
+        ZTR_SDL_EMERG =  ZCFG_LOG_EMERG | ZCFGTR98_SYSLOG | ZCFGTR98_STDLOG,
+        ZTR_SDL_ALERT =  ZCFG_LOG_ALERT | ZCFGTR98_SYSLOG | ZCFGTR98_STDLOG,
+        ZTR_SDL_CRIT =   ZCFG_LOG_CRIT | ZCFGTR98_SYSLOG | ZCFGTR98_STDLOG,
+        ZTR_SDL_ERR  =   ZCFG_LOG_ERR | ZCFGTR98_SYSLOG | ZCFGTR98_STDLOG,
+        ZTR_SDL_WARNING = ZCFG_LOG_WARNING | ZCFGTR98_SYSLOG | ZCFGTR98_STDLOG,
+        ZTR_SDL_NOTICE = ZCFG_LOG_NOTICE | ZCFGTR98_SYSLOG | ZCFGTR98_STDLOG,
+        ZTR_SDL_INFO  =  ZCFG_LOG_INFO | ZCFGTR98_SYSLOG | ZCFGTR98_STDLOG,
+        ZTR_SDL_DEBUG =  ZCFG_LOG_DEBUG | ZCFGTR98_SYSLOG | ZCFGTR98_STDLOG
+};
+
+// zcfg tr98 debug message
+#ifdef ZCFG_MAPPING_DEBUG_SYSLOG
+#define zsyslog(logLev, format, ...) \
+               { if((ZCFGTR98_SYSLOG & logLev) && (ZTR_DEBUG_LEVEL >= (logLev & LOGLEVEL_MASK))) \
+                    syslog((logLev & LOGLEVEL_MASK), format, ##__VA_ARGS__); }
+#else
+#define zsyslog(logLev, format, ...)  do {}while(0)
+#endif
+
+#ifdef ZCFG_MAPPING_DEBUG_STDLOG
+#define zstdlog(logLev, format, ...) \
+               { if((ZCFGTR98_STDLOG & logLev) && (ZTR_DEBUG_LEVEL >= (logLev & LOGLEVEL_MASK))) \
+                    printf(format, ##__VA_ARGS__); }
+#else
+#define zstdlog(logLev, format, ...)  do {}while(0)
+#endif
+
+#define ztrdbg(logLev, format, ...) do{\
+		zsyslog(logLev, format, ##__VA_ARGS__); \
+		zstdlog(logLev, format, ##__VA_ARGS__); \
+	} while(0)
+
+
 extern int myEid; /*use source Eid to know who use this library*/
 typedef struct tr98Parameter_s {
 	char 			*name;			/*parameter name*/
Index: libzcfg_fe_tr98-1.0/wanDev.c
===================================================================
--- libzcfg_fe_tr98-1.0.orig/wanDev.c	2016-01-27 13:42:58.312097524 +0800
+++ libzcfg_fe_tr98-1.0/wanDev.c	2016-01-27 14:02:09.904119615 +0800
@@ -669,9 +669,9 @@
 			}
 			
 			/*Not defined in tr181, give it a default value*/
-#if TR98_MAPPING_DEBUG
-			printf("Can't find parameter %s in TR181\n", paramList->name);
-#endif
+
+			ztrdbg(ZTR_DL_INFO, "%s: Can't find parameter %s in TR181\n", __FUNCTION__, paramList->name);
+
 			paramList++;
 		}
 
@@ -872,9 +872,9 @@
 		}
 
 		/*Not defined in tr181, give it a default value*/
-#if TR98_MAPPING_DEBUG
-		printf("Can't find parameter %s in TR181\n", paramList->name);
-#endif
+
+		ztrdbg(ZTR_DL_INFO, "%s: Can't find parameter %s in TR181\n", __FUNCTION__, paramList->name);
+
 		paramList++;	
 	}
 
@@ -934,9 +934,9 @@
 		}
 		
 		/*Not defined in tr181, give it a default value*/
-#if TR98_MAPPING_DEBUG
-		printf("Can't find parameter %s in TR181\n", paramList->name);
-#endif
+
+		ztrdbg(ZTR_DL_INFO, "%s: Can't find parameter %s in TR181\n", __FUNCTION__, paramList->name);
+
 		paramList++;
 	}
 
@@ -995,9 +995,9 @@
 		}
 		
 		/*Not defined in tr181, give it a default value*/
-#if TR98_MAPPING_DEBUG
-		printf("Can't find parameter %s in TR181\n", paramList->name);
-#endif
+
+		ztrdbg(ZTR_DL_INFO, "%s: Can't find parameter %s in TR181\n", __FUNCTION__, paramList->name);
+
 		paramList++;
 	}
 
@@ -1091,9 +1091,9 @@
 		}
 		
 		/*Not defined in tr181, give it a default value*/
-#if TR98_MAPPING_DEBUG
-		printf("Can't find parameter %s in TR181\n", paramList->name);
-#endif
+
+		ztrdbg(ZTR_DL_INFO, "%s: Can't find parameter %s in TR181\n", __FUNCTION__, paramList->name);
+
 		paramList++;
 	}
 
@@ -1119,7 +1119,7 @@
 	struct json_object *paramValue = NULL;
 	tr98Parameter_t *paramList = NULL;
 
-	printf("%s : Enter\n", __FUNCTION__);
+	ztrdbg(ZTR_DL_DEBUG, "%s : Enter\n", __FUNCTION__);
 
 	strcpy(tr98TmpName, tr98FullPathName);
 	ptr = strstr(tr98TmpName, ".WANEthernetInterfaceConfig");
@@ -1153,9 +1153,9 @@
 			}
 			
 			/*Not defined in tr181, give it a default value*/
-#if TR98_MAPPING_DEBUG
-			printf("Can't find parameter %s in TR181\n", paramList->name);
-#endif
+
+			ztrdbg(ZTR_DL_INFO, "%s: Can't find parameter %s in TR181\n", __FUNCTION__, paramList->name);
+
 			zcfgFeTr98DefaultValueSet(*tr98Jobj, paramList->name, paramList->type);
 
 			paramList++;
@@ -1184,7 +1184,7 @@
 	struct json_object *tr181ParamValue = NULL;
 	struct json_object *tmpObj = NULL;
 
-	printf("%s : Enter\n", __FUNCTION__);
+	ztrdbg(ZTR_DL_DEBUG, "%s : Enter\n", __FUNCTION__);
 
 	/*find tr181 mapping object*/
 	strcpy(tr98TmpName, tr98FullPathName);
@@ -1223,9 +1223,9 @@
 					continue;
 				}
 			}
-#if TR98_MAPPING_DEBUG
-			printf("Can't find parameter %s in TR181\n", paramList->name);
-#endif
+
+			ztrdbg(ZTR_DL_INFO, "%s: Can't find parameter %s in TR181\n", __FUNCTION__, paramList->name);
+
 			paramList++;	
 		}
 
@@ -1258,7 +1258,7 @@
 	objIndex_t objIid;
 	rdm_EthIntfSt_t *ethIfaceSt = NULL;
 
-	printf("%s : Enter\n", __FUNCTION__);
+	ztrdbg(ZTR_DL_DEBUG, "%s : Enter\n", __FUNCTION__);
 
 	strcpy(tr98TmpName, tr98FullPathName);
 	ptr = strstr(tr98TmpName, ".WANEthernetInterfaceConfig");
@@ -1349,7 +1349,7 @@
 	rdm_PtmLink_t *ptmLinkObj = NULL;
 	//rdm_EthLink_t *ethLinkObj = NULL;
 
-	printf("%s : Enter\n", __FUNCTION__);
+	ztrdbg(ZTR_DL_DEBUG, "%s : Enter\n", __FUNCTION__);
 
 	strcpy(tr98TmpName, tr98FullPathName);
 	ptr = strstr(tr98TmpName, ".WANConnectionDevice");
@@ -1496,7 +1496,7 @@
 	objIndex_t wanLinkIid;
 	struct json_object *tr98Jobj = NULL;
 
-	printf("%s : Enter\n", __FUNCTION__);
+	ztrdbg(ZTR_DL_DEBUG, "%s : Enter\n", __FUNCTION__);
 
 	/*Check if WANConnectionDevice.i exists or not*/
 	if((ret = zcfgFe98To181MappingNameGet(tr98FullPathName, wanLinkPathName)) != ZCFG_SUCCESS) {
@@ -1566,7 +1566,7 @@
 	struct json_object *paramValue = NULL;
 	tr98Parameter_t *paramList = NULL;	
 	
-	printf("%s : Enter\n", __FUNCTION__);
+	ztrdbg(ZTR_DL_DEBUG, "%s : Enter\n", __FUNCTION__);
 
 	strcpy(tr98TmpName, tr98FullPathName);
 	ptr = strstr(tr98TmpName, ".WANDSLLinkConfig");
@@ -1652,7 +1652,7 @@
 			}
 		}
 
-		if(!strcmp(paramList->name, "AAL5CRCErrors") != NULL) {
+		if(!strcmp(paramList->name, "AAL5CRCErrors")) {
 			paramValue = json_object_object_get(atmLinkStJobj, "CRCErrors");
 			if(paramValue != NULL) {
 				json_object_object_add(*tr98Jobj, paramList->name, JSON_OBJ_COPY(paramValue));
@@ -1672,7 +1672,7 @@
 
 		if(!strcmp(paramList->name, "LinkStatus")) {
 			paramValue = json_object_object_get(atmLinkJobj, "Status");
-			char *tr181Status = json_object_get_string(paramValue);
+			const char *tr181Status = json_object_get_string(paramValue);
 			if(strstr(tr181Status, "Up") || strstr(tr181Status, "Down")) json_object_object_add(*tr98Jobj, paramList->name, JSON_OBJ_COPY(paramValue));
 			else json_object_object_add(*tr98Jobj, paramList->name, json_object_new_string("Unavailable"));
 			paramList++;
@@ -1680,9 +1680,9 @@
 		}
 
 		/*Not defined in tr181, give it a default value*/
-#if TR98_MAPPING_DEBUG
-		printf("Can't find parameter %s in TR181\n", paramList->name);
-#endif
+
+		ztrdbg(ZTR_DL_INFO, "%s: Can't find parameter %s in TR181\n", __FUNCTION__, paramList->name);
+
 		paramList++;
 	}
 		
@@ -1762,8 +1762,8 @@
 			{
 				struct json_object *tr181ParamStatus = json_object_object_get(atmLinkJobj, "Status");
 				if(tr181ParamValue != NULL) {
-					char *tr181adr = json_object_get_string(tr181ParamValue);
-					char *atmLinkStatus = json_object_get_string(tr181ParamStatus);
+					const char *tr181adr = json_object_get_string(tr181ParamValue);
+					const char *atmLinkStatus = json_object_get_string(tr181ParamStatus);
 					test = (char *)json_object_get_string(paramValue);
 					if(strstr(test, "PVC:") != NULL){
 						test = test + 4;
@@ -1826,9 +1826,9 @@
 			}
 			/*End of special case*/
 			/*Not defined in tr181, give it a default value*/
-#if TR98_MAPPING_DEBUG
-			printf("Can't find parameter %s in TR181\n", paramList->name);
-#endif
+
+			ztrdbg(ZTR_DL_INFO, "%s: Can't find parameter %s in TR181\n", __FUNCTION__, paramList->name);
+
 			paramList++;
 		}
 		else {
@@ -1904,7 +1904,7 @@
 	struct json_object *paramValue = NULL;
 	tr98Parameter_t *paramList = NULL;
 
-	char *ptmLinkParm = NULL;
+	const char *ptmLinkParm = NULL;
 
 	zcfgLog(ZCFG_LOG_INFO, "%s : Enter\n", __FUNCTION__);
 
@@ -1962,10 +1962,10 @@
 			}
 			paramList++;
 			continue;
-    	}
-#if TR98_MAPPING_DEBUG
-		printf("Can't find parameter %s in TR181\n", paramList->name);
-#endif
+    		}
+
+		ztrdbg(ZTR_DL_INFO, "%s: Can't find parameter %s in TR181\n", __FUNCTION__, paramList->name);
+
 		paramList++;
 	}
 
@@ -2067,7 +2067,7 @@
 	struct json_object *paramValue = NULL;
 	tr98Parameter_t *paramList = NULL;
 
-	printf("%s : Enter\n", __FUNCTION__);
+	ztrdbg(ZTR_DL_DEBUG, "%s : Enter\n", __FUNCTION__);
 
 	strcpy(tr98TmpName, tr98FullPathName);
 	ptr = strstr(tr98TmpName, ".WANPTMLinkConfig.Stats");
@@ -2127,9 +2127,9 @@
 		}
 
 		/*Not defined in tr181, give it a default value*/
-#if TR98_MAPPING_DEBUG
-		printf("Can't find parameter %s in TR181\n", paramList->name);
-#endif
+
+		ztrdbg(ZTR_DL_INFO, "%s: Can't find parameter %s in TR181\n", __FUNCTION__, paramList->name);
+
 		paramList++;
 	}	
 
@@ -2151,7 +2151,7 @@
 	objIndex_t objIid;
 	rdm_EthLink_t *ethIntfObj = NULL;
 
-	printf("%s : Enter\n", __FUNCTION__);
+	ztrdbg(ZTR_DL_DEBUG, "%s : Enter\n", __FUNCTION__);
 
 	strcpy(tr98TmpName, tr98FullPathName);
 	ptr = strstr(tr98TmpName, ".WANEthernetLinkConfig");
@@ -2227,7 +2227,7 @@
 	char typeBuf[20] = {0};
 #endif
 
-	printf("%s : Enter\n", __FUNCTION__);
+	ztrdbg(ZTR_DL_DEBUG, "%s : Enter\n", __FUNCTION__);
 
 	if((ret = zcfgFe98To181MappingNameGet(tr98FullPathName, ipIface)) != ZCFG_SUCCESS) {
 		/*  The instance number of WANIPConnection.i will be continuous. Therefore, 
@@ -2598,9 +2598,9 @@
 			json_object_object_add(*tr98Jobj, paramList->name, json_object_new_int(-1));
 		}
 		else {
-#if TR98_MAPPING_DEBUG
-			printf("Can't find parameter %s in TR181\n", paramList->name);
-#endif
+
+			ztrdbg(ZTR_DL_INFO, "%s: Can't find parameter %s in TR181\n", __FUNCTION__, paramList->name);
+
 			zcfgFeTr98DefaultValueSet(*tr98Jobj, paramList->name, paramList->type);
 		}
 
@@ -4797,7 +4797,7 @@
 	int numOfEntries = 0;
 	const char *lowerLayer = NULL;
 
-	zcfgLog(ZCFG_LOG_INFO, "Enter %s\n", __FUNCTION__);
+	ztrdbg(ZTR_DL_DEBUG, "Enter %s\n", __FUNCTION__);
 
 	/*find tr181 mapping object*/
 	if((ret = zcfgFe98To181MappingNameGet(tr98FullPathName, pppIface)) != ZCFG_SUCCESS) {
@@ -5133,9 +5133,9 @@
 		}						
 #endif
 		else {
-#if TR98_MAPPING_DEBUG
-			printf("Can't find parameter %s in TR181\n", paramList->name);
-#endif
+
+			ztrdbg(ZTR_DL_INFO, "%s: Can't find parameter %s in TR181\n", __FUNCTION__, paramList->name);
+
 			zcfgFeTr98DefaultValueSet(*tr98Jobj, paramList->name, paramList->type);
 			paramList++;
 			continue;
@@ -5759,7 +5759,7 @@
 	rdm_PtmLink_t *ptmLinkObj = NULL;
 #endif
 
-	printf("%s : Enter\n", __FUNCTION__);
+	ztrdbg(ZTR_DL_DEBUG, "%s : Enter\n", __FUNCTION__);
 
 	strcpy(tr98TmpName, tr98FullPathName);
 	ptr = strstr(tr98TmpName, ".WANConnectionDevice");
@@ -6121,7 +6121,7 @@
 	struct json_object *pppIface = NULL;
 	const char *lowerLayer = NULL;
 #endif
-	printf("%s : Enter\n", __FUNCTION__);
+	ztrdbg(ZTR_DL_DEBUG, "%s : Enter\n", __FUNCTION__);
 
 	if((ret = zcfgFe98To181MappingNameGet(tr98FullPathName, pppIfacePathName)) != ZCFG_SUCCESS) {
 		return ret;
@@ -6774,7 +6774,7 @@
 	struct json_object *paramValue = NULL;
 	tr98Parameter_t *paramList = NULL;
 
-	printf("%s : Enter\n", __FUNCTION__);
+	ztrdbg(ZTR_DL_DEBUG, "%s : Enter\n", __FUNCTION__);
 
 	if((ret = zcfgFe98To181MappingNameGet(tr98FullPathName, natAddrMap)) != ZCFG_SUCCESS) {
 		/*  The instance number of X_ZYXEL_AddrMapping.i will be continuous because of the tr98 to tr181 mapping table. 
@@ -6804,9 +6804,9 @@
 		}
 		
 		/*Not defined in tr181, give it a default value*/
-#if TR98_MAPPING_DEBUG
-		printf("Can't find parameter %s in TR181\n", paramList->name);
-#endif
+
+		ztrdbg(ZTR_DL_INFO, "%s: Can't find parameter %s in TR181\n", __FUNCTION__, paramList->name);
+
 		paramList++;
 	}	
 
@@ -6826,7 +6826,7 @@
 	char addrMapping[32] = {0};
 	tr98Parameter_t *paramList = NULL;
 
-	printf("%s : Enter\n", __FUNCTION__);
+	ztrdbg(ZTR_DL_DEBUG, "%s : Enter\n", __FUNCTION__);
 
 	if((ret = zcfgFe98To181MappingNameGet(tr98FullPathName, addrMapping)) != ZCFG_SUCCESS) {
 		return ret;
@@ -6860,9 +6860,9 @@
 				continue;
 			}
 		}
-#if TR98_MAPPING_DEBUG
-		printf("Can't find parameter %s in TR181\n", paramList->name);
-#endif
+
+		ztrdbg(ZTR_DL_INFO, "%s: Can't find parameter %s in TR181\n", __FUNCTION__, paramList->name);
+
 		paramList++;	
 	}
 
@@ -6891,7 +6891,7 @@
 	rdm_IpIface_t *ipIface = NULL;
 	rdm_NatAddrMapping_t *natAddrMappingObj = NULL;
 
-	printf("%s : Enter\n", __FUNCTION__);
+	ztrdbg(ZTR_DL_DEBUG, "%s : Enter\n", __FUNCTION__);
 
 	strcpy(tr98ConnName, tr98FullPathName);
 	ptr = strstr(tr98ConnName, ".X_ZYXEL_AddrMapping");
@@ -6970,7 +6970,7 @@
 	objIndex_t objIid;
 	char addrMapping[32] = {0};
 
-	printf("%s : Enter\n", __FUNCTION__);
+	ztrdbg(ZTR_DL_DEBUG, "%s : Enter\n", __FUNCTION__);
 
 	if((ret = zcfgFe98To181MappingNameGet(tr98FullPathName, addrMapping)) != ZCFG_SUCCESS) {
 		return ret;
@@ -7120,7 +7120,7 @@
 	struct json_object *paramValue = NULL;
 	tr98Parameter_t *paramList = NULL;
 
-	printf("%s : Enter\n", __FUNCTION__);
+	ztrdbg(ZTR_DL_DEBUG, "%s : Enter\n", __FUNCTION__);
 
 	if((ret = zcfgFe98To181MappingNameGet(tr98FullPathName, natPortTrigger)) != ZCFG_SUCCESS) {
 		/*  The instance number of X_ZYXEL_PortTriggering.i will be continuous because of the tr98 to tr181 mapping table. 
@@ -7150,9 +7150,9 @@
 		}
 		
 		/*Not defined in tr181, give it a default value*/
-#if TR98_MAPPING_DEBUG
-		printf("Can't find parameter %s in TR181\n", paramList->name);
-#endif
+
+		ztrdbg(ZTR_DL_INFO, "%s: Can't find parameter %s in TR181\n", __FUNCTION__, paramList->name);
+
 		paramList++;
 	}	
 
@@ -7172,7 +7172,7 @@
 	char portTrigger[32] = {0};
 	tr98Parameter_t *paramList = NULL;
 
-	printf("%s : Enter\n", __FUNCTION__);
+	ztrdbg(ZTR_DL_DEBUG, "%s : Enter\n", __FUNCTION__);
 
 	if((ret = zcfgFe98To181MappingNameGet(tr98FullPathName, portTrigger)) != ZCFG_SUCCESS) {
 		return ret;
@@ -7206,9 +7206,9 @@
 				continue;
 			}
 		}
-#if TR98_MAPPING_DEBUG
-		printf("Can't find parameter %s in TR181\n", paramList->name);
-#endif
+
+		ztrdbg(ZTR_DL_INFO, "%s: Can't find parameter %s in TR181\n", __FUNCTION__, paramList->name);
+
 		paramList++;	
 	}
 
@@ -7237,7 +7237,7 @@
 	rdm_IpIface_t *ipIface = NULL;
 	rdm_NatPortTriggering_t *natPortTriggerObj = NULL;
 
-	printf("%s : Enter\n", __FUNCTION__);
+	ztrdbg(ZTR_DL_DEBUG, "%s : Enter\n", __FUNCTION__);
 
 	strcpy(tr98ConnName, tr98FullPathName);
 	ptr = strstr(tr98ConnName, ".X_ZYXEL_PortTriggering");
@@ -7316,7 +7316,7 @@
 	objIndex_t objIid;
 	char portTrigger[32] = {0};
 
-	printf("%s : Enter\n", __FUNCTION__);
+	ztrdbg(ZTR_DL_DEBUG, "%s : Enter\n", __FUNCTION__);
 
 	if((ret = zcfgFe98To181MappingNameGet(tr98FullPathName, portTrigger)) != ZCFG_SUCCESS) {
 		return ret;
@@ -7466,7 +7466,7 @@
 	struct json_object *paramValue = NULL;
 	tr98Parameter_t *paramList = NULL;
 
-	printf("%s : Enter\n", __FUNCTION__);
+	ztrdbg(ZTR_DL_DEBUG, "%s : Enter\n", __FUNCTION__);
 
 	if((ret = zcfgFe98To181MappingNameGet(tr98FullPathName, natPortMap)) != ZCFG_SUCCESS) {
 		/*  The instance number of PortMapping.i will be continuous because of the tr98 to tr181 mapping table. 
@@ -7530,9 +7530,9 @@
 		}
 
 		/*Not defined in tr181, give it a default value*/
-#if TR98_MAPPING_DEBUG
-		printf("Can't find parameter %s in TR181\n", paramList->name);
-#endif
+
+		ztrdbg(ZTR_DL_INFO, "%s: Can't find parameter %s in TR181\n", __FUNCTION__, paramList->name);
+
 		paramList++;
 	}	
 
@@ -7558,7 +7558,7 @@
 	char portMap[32] = {0};
 	tr98Parameter_t *paramList = NULL;
 
-	printf("%s : Enter\n", __FUNCTION__);
+	ztrdbg(ZTR_DL_DEBUG, "%s : Enter\n", __FUNCTION__);
 
 	if((ret = zcfgFe98To181MappingNameGet(tr98FullPathName, portMap)) != ZCFG_SUCCESS) {
 		return ret;
@@ -7614,9 +7614,9 @@
 				continue;
 			}
 		}
-#if TR98_MAPPING_DEBUG
-		printf("Can't find parameter %s in TR181\n", paramList->name);
-#endif
+
+		ztrdbg(ZTR_DL_INFO, "%s: Can't find parameter %s in TR181\n", __FUNCTION__, paramList->name);
+
 		paramList++;	
 	}
 
@@ -7661,7 +7661,7 @@
 	if (fp != NULL)
 	fclose(fp);
 
-	printf("%s : Enter\n", __FUNCTION__);
+	ztrdbg(ZTR_DL_DEBUG, "%s : Enter\n", __FUNCTION__);
 
 	strcpy(tr98ConnName, tr98FullPathName);
 	ptr = strstr(tr98ConnName, ".PortMapping");
@@ -7757,7 +7757,7 @@
 	objIndex_t objIid;
 	char portMap[32] = {0};
 
-	printf("%s : Enter\n", __FUNCTION__);
+	ztrdbg(ZTR_DL_DEBUG, "%s : Enter\n", __FUNCTION__);
 
 	if((ret = zcfgFe98To181MappingNameGet(tr98FullPathName, portMap)) != ZCFG_SUCCESS) {
 		return ret;
@@ -8007,9 +8007,9 @@
 			}
 
 			/*Not defined in tr181, give it a default value*/
-#if TR98_MAPPING_DEBUG
-			printf("Can't find parameter %s in TR181\n", paramList->name);
-#endif
+
+			ztrdbg(ZTR_DL_INFO, "%s: Can't find parameter %s in TR181\n", __FUNCTION__, paramList->name);
+
 			paramList++;		
 		}
 		
@@ -8163,7 +8163,7 @@
 	struct json_object *ifValue = NULL;
 	tr98Parameter_t *paramList = NULL;	
 	
-	printf("%s : Enter\n", __FUNCTION__);
+	ztrdbg(ZTR_DL_DEBUG, "%s : Enter\n", __FUNCTION__);
 
 	strcpy(tr98TmpName, tr98FullPathName);
 	ptr = strstr(tr98TmpName, ".WANATMF5LoopbackDiagnostics");
@@ -8200,9 +8200,9 @@
 		}
 			
 		/*Not defined in tr181, give it a default value*/
-#if TR98_MAPPING_DEBUG
-		printf("Can't find parameter %s in TR181\n", paramList->name);
-#endif
+
+		ztrdbg(ZTR_DL_INFO, "%s: Can't find parameter %s in TR181\n", __FUNCTION__, paramList->name);
+
 		paramList++;
 	}	
 
@@ -8275,9 +8275,9 @@
 			}
   
 			/*Not defined in tr181, give it a default value*/
-#if TR98_MAPPING_DEBUG
-			printf("Can't find parameter %s in TR181\n", paramList->name);
-#endif
+
+			ztrdbg(ZTR_DL_INFO, "%s: Can't find parameter %s in TR181\n", __FUNCTION__, paramList->name);
+
 			paramList++;
 		}
 		else {
@@ -8317,7 +8317,7 @@
 	struct json_object *ifValue = NULL;
 	tr98Parameter_t *paramList = NULL;	
 	
-	printf("%s : Enter\n", __FUNCTION__);
+	ztrdbg(ZTR_DL_DEBUG, "%s : Enter\n", __FUNCTION__);
 
 	strcpy(tr98TmpName, tr98FullPathName);
 	ptr = strstr(tr98TmpName, ".X_ZYXEL_WANATMF4LoopbackDiagnostics");
@@ -8354,9 +8354,9 @@
 		}
 			
 		/*Not defined in tr181, give it a default value*/
-#if TR98_MAPPING_DEBUG
-		printf("Can't find parameter %s in TR181\n", paramList->name);
-#endif
+
+		ztrdbg(ZTR_DL_INFO, "%s: Can't find parameter %s in TR181\n", __FUNCTION__, paramList->name);
+
 		paramList++;
 	}	
 
@@ -8429,9 +8429,9 @@
 			}
   
 			/*Not defined in tr181, give it a default value*/
-#if TR98_MAPPING_DEBUG
-			printf("Can't find parameter %s in TR181\n", paramList->name);
-#endif
+
+			ztrdbg(ZTR_DL_INFO, "%s: Can't find parameter %s in TR181\n", __FUNCTION__, paramList->name);
+
 			paramList++;
 		}
 		else {
@@ -9168,8 +9168,7 @@
 	char tr98Prefix[TR98_MAX_OBJ_NAME_LENGTH] = {0};
 	uint8_t addrsrcInstance = 0;
 	
-	zcfgLog(ZCFG_LOG_INFO, "%s : Enter\n", __FUNCTION__);
-        printf("%s : Enter\n", __FUNCTION__);
+        ztrdbg(ZTR_SDL_DEBUG, "%s : Enter\n", __FUNCTION__);
 	printf("98 full path = %s \n", tr98FullPathName);
 
 	strcpy(tr98ConnObjName, tr98FullPathName);
@@ -10396,7 +10395,7 @@
 	struct json_object *paramValue = NULL;
 	tr98Parameter_t *paramList = NULL;
 
-	printf("%s : Enter\n", __FUNCTION__);
+	ztrdbg(ZTR_DL_DEBUG, "%s : Enter\n", __FUNCTION__);
 	//printf("\033[0;32m Debug: [%s]:tr98FullPathName=%s \033[0m \n",__FUNCTION__,tr98FullPathName);
 
 	strcpy(tr98TmpName, tr98FullPathName);
@@ -10460,7 +10459,7 @@
 	struct json_object *tr181ParamValue = NULL;
 	struct json_object *tmpObj = NULL;
 
-	printf("%s : Enter\n", __FUNCTION__);
+	ztrdbg(ZTR_DL_DEBUG, "%s : Enter\n", __FUNCTION__);
 
 	/*find tr181 mapping object*/
 	strcpy(tr98TmpName, tr98FullPathName);
@@ -10534,7 +10533,7 @@
 	objIndex_t objIid;
 	rdm_OptIntfSt_t *ponIfaceSt = NULL;
 
-	printf("%s : Enter\n", __FUNCTION__);
+	ztrdbg(ZTR_DL_DEBUG, "%s : Enter\n", __FUNCTION__);
 
 	strcpy(tr98TmpName, tr98FullPathName);
 	ptr = strstr(tr98TmpName, ".X_ZYZEL_WANPonInterfaceConfig");
