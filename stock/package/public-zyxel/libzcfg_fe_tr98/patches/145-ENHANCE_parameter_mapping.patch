Index: libzcfg_fe_tr98-1.0/zcfg_fe_tr98.c
===================================================================
--- libzcfg_fe_tr98-1.0.orig/zcfg_fe_tr98.c	2015-06-18 11:06:37.706285279 +0800
+++ libzcfg_fe_tr98-1.0/zcfg_fe_tr98.c	2015-06-18 11:12:26.330298400 +0800
@@ -673,7 +673,7 @@
 	}
 
 	IID_INIT(tr181ObjIid);
-	if(!strncmp(tr181PathName, "Device", 6)) {
+	if(strncmp(tr181PathName, "Device", 6)) {
 		sprintf(pathName, "Device.%s", tr181PathName);
 		tr181Name = pathName;
 	}
@@ -1945,22 +1945,39 @@
 
 	if(IS_HANDLE_ROUTINE_REQUIRED(queriedAttr)) {
 		struct json_object *multiJobj = NULL;
+		int nObj = 0;
 
 		if(!tr98Obj[handler].setAttr) {
 
 			return ZCFG_NO_SUCH_PARAMETER;
 		}
 
+		printf("%s: set parm attr handle routine is required\n", __FUNCTION__);
 		multiJobj = json_object_new_array();
 		if((ret = tr98Obj[handler].setAttr(tr98ObjName, handler, name, queriedAttr, multiJobj)) != ZCFG_SUCCESS) {
+			printf("%s: set parm attr handle routine fail\n", __FUNCTION__);
+		}
+		if((nObj = json_object_array_length(multiJobj))) {
+			int n = 0;
+			while(n < nObj) {
+				setParmAttr = (zcfgFeSetParmAttr_t *)json_object_get_int(json_object_array_get_idx(multiJobj, n));
+				if(!setParmAttr) {
+					n++;
+					continue;
+				}
 
-			//flush multiJobj
-			json_object_put(multiJobj);
-			return ret;
+				if(ret == ZCFG_SUCCESS) {
+					zcfgSetParmAttrAdd(setParmAttrLst, setParmAttr);
+				}
+				else
+					free(setParmAttr);
+
+				n++;
+			}
 		}
-		//zcfgSetParmAttrAdd(setParmAttrLst, setParmAttr);
-		//flush multiJobj
 		json_object_put(multiJobj);
+		if(ret != ZCFG_SUCCESS)
+			return ret;
 	}
 	else {
 		setParmAttr = zcfgFeTr98ParamAttrSetByName(oid, &objIid, queriedParmName, (queriedAttr & PARAMETER_ATTR_NOTIFY_MASK));
