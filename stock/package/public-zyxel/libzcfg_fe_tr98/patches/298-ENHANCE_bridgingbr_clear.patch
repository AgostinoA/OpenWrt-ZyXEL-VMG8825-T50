Index: libzcfg_fe_tr98-1.0/l2bridge.c
===================================================================
--- libzcfg_fe_tr98-1.0.orig/l2bridge.c	2016-02-26 09:52:14.167589332 +0800
+++ libzcfg_fe_tr98-1.0/l2bridge.c	2016-02-26 09:57:02.899594870 +0800
@@ -345,18 +345,18 @@
 #else
 		sprintf(tr98vlanPathName, "%s.%s", tr98FullPathName, "VLAN.1");
 #endif
-		printf("tr98vlanPathName=%s\n",tr98vlanPathName);
+		ztrdbg(ZTR_DL_DEBUG, "tr98vlanPathName=%s\n",tr98vlanPathName);
 		if((ret = zcfgFe98To181MappingNameGet(tr98vlanPathName, mappingPathName)) == ZCFG_SUCCESS){
-			printf("mappingPathName=%s\n",mappingPathName);
+			ztrdbg(ZTR_DL_DEBUG, "mappingPathName=%s\n",mappingPathName);
 			*tr98Jobj = json_object_new_object();
 			return ret;
 		}
 #endif
-		printf("98 to 181 Mapping Fail!!\n");
+		ztrdbg(ZTR_DL_DEBUG, "98 to 181 Mapping Fail!!\n");
 		return ret;
 	}
 	else        /* mappingPathName will be Bridging */
-		printf("%s : TR181 object %s\n", __FUNCTION__, mappingPathName);
+		ztrdbg(ZTR_DL_DEBUG, "%s : TR181 object %s\n", __FUNCTION__, mappingPathName);
 	
 	ptr = strrchr(mappingPathName, '.');
 	strcpy(tmpChar, ptr+1);
@@ -373,7 +373,12 @@
 	paramList = tr98Obj[handler].parameter;
 	while(paramList->name != NULL){
 		paramValue = json_object_object_get(brJobj, paramList->name);
-		if(paramValue != NULL){
+		if((paramValue != NULL) && !strcmp(paramList->name, "PortNumberOfEntries")) {
+			int num = json_object_get_int(paramValue);
+			num = (num > 0) ? (num-1) : 0;
+			json_object_object_add(*tr98Jobj, paramList->name, json_object_new_int(num));
+		}
+		else if(paramValue != NULL){
 			json_object_object_add(*tr98Jobj, paramList->name, JSON_OBJ_COPY(paramValue));
 			paramList++;
 			continue;
@@ -427,7 +432,7 @@
 		}
 		
 		/*Not defined in tr181, give it a default value*/
-		printf("Can't find parameter %s in TR181\n", paramList->name);
+		ztrdbg(ZTR_DL_INFO, "%s: Can't find parameter %s in TR181\n", __FUNCTION__, paramList->name);
 		paramList++;
 	}
 	json_object_put(brJobj);
@@ -448,14 +453,14 @@
 	tr98Parameter_t *paramList = NULL;
 	char zyxelPrefixParam[64] = {0};
 
-	printf("Enter %s\n", __FUNCTION__);
+	ztrdbg(ZTR_DL_INFO, "Enter %s\n", __FUNCTION__);
 	
 	if((ret = zcfgFe98To181MappingNameGet(tr98FullPathName, mappingPathName)) != ZCFG_SUCCESS){
-		printf("98 to 181 Mapping Fail!!\n");
+		ztrdbg(ZTR_DL_ERR, "98 to 181 Mapping Fail!!\n");
 		return ret;
 	}
 	else      /* mappingPathName will be Bridging */
-		printf("TR181 object %s\n", mappingPathName);
+		ztrdbg(ZTR_DL_DEBUG, "TR181 object %s\n", mappingPathName);
 
 	IID_INIT(brIid);
 	sprintf(tr181Obj, "Device.%s", mappingPathName);
@@ -495,7 +500,7 @@
 			paramList++;
 			continue;
 		}
-			
+
 		strcpy(zyxelPrefixParam, "X_ZYXEL_");
 		strcat(zyxelPrefixParam, paramList->name);
 		tr181ParamValue = json_object_object_get(brJobj, zyxelPrefixParam);
@@ -570,8 +575,9 @@
 	char mappingPathName[32] = {0};
 	uint32_t  oid = 0;
 	objIndex_t objIid;
+	struct json_object *brPortJobj = NULL;
 
-	printf("Enter %s\n", __FUNCTION__);
+	ztrdbg(ZTR_DL_INFO, "Enter %s\n", __FUNCTION__);
 
         if((ret = zcfgFe98To181MappingNameGet(tr98FullPathName, mappingPathName)) != ZCFG_SUCCESS)
 		return ret;
@@ -580,13 +586,25 @@
 	printf("mappingPathName %s\n", mappingPathName);
 	sprintf(tr181Obj, "Device.%s", mappingPathName);
 	oid = zcfgFeObjNameToObjId(tr181Obj, &objIid);
+	if(oid != RDM_OID_BRIDGING_BR)
+		return ZCFG_INTERNAL_ERROR;
 
-	ret = zcfgFeObjJsonDel(oid, &objIid, NULL);
-	if(ret == ZCFG_SUCCESS)
-		printf("Delete Object Success\n");
-	else{
-		printf("Delete Object Fail\n");
-		return ret;
+	objIid.idx[1] = 1;
+	objIid.level++;
+	ret = zcfgFeObjJsonGet(RDM_OID_BRIDGING_BR_PORT, &objIid, &brPortJobj);
+	if(ret == ZCFG_SUCCESS) {
+		ztrdbg(ZTR_DL_INFO, "%s: Should clear bridge object prior to delete\n", __FUNCTION__);
+		json_object_put(brPortJobj);
+		return ZCFG_INTERNAL_ERROR;
+	}
+	else {
+		objIid.idx[1] = 0;
+		objIid.level--;
+		ret = zcfgFeObjJsonDel(RDM_OID_BRIDGING_BR, &objIid, NULL);
+		if((ret != ZCFG_DELAY_APPLY) && (ret != ZCFG_SUCCESS)) {
+			ztrdbg(ZTR_DL_ERR, "%s: Delete bridge Object Fail\n", __FUNCTION__);
+			return ret;
+		}
 	}
 
 	return ZCFG_SUCCESS;
Index: libzcfg_fe_tr98-1.0/l2bridge_parameter.h
===================================================================
--- libzcfg_fe_tr98-1.0.orig/l2bridge_parameter.h	2016-02-26 09:52:12.659589303 +0800
+++ libzcfg_fe_tr98-1.0/l2bridge_parameter.h	2016-02-26 09:57:14.687595096 +0800
@@ -21,6 +21,7 @@
 	{ "VLANID", PARAMETER_ATTR_WRITE, 0, json_type_uint32},	
 	{ "PortNumberOfEntries", PARAMETER_ATTR_READONLY, 0, json_type_uint32},	
 	{ "VLANNumberOfEntries", PARAMETER_ATTR_READONLY, 0, json_type_uint32},	
+	{ "X_ZYXEL_BridgeClear", PARAMETER_ATTR_WRITE, 0, json_type_boolean},
 	{ NULL, 0, 0, 0}
 };
 
