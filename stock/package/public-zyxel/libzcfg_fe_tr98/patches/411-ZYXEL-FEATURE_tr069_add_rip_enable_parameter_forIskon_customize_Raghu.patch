Index: libzcfg_fe_tr98-1.0/wanDev.c
===================================================================
--- libzcfg_fe_tr98-1.0.orig/wanDev.c	2017-01-10 18:39:03.383821461 +0800
+++ libzcfg_fe_tr98-1.0/wanDev.c	2017-01-10 18:39:03.443821462 +0800
@@ -2372,6 +2372,10 @@
 	char ipIface[32] = {0};
 	objIndex_t ipIfaceIid, vlanTermIid, ipv4AddrIid;
 	objIndex_t dnsSrvIid, natIid, natSessionIid, ethLinkIid;
+#ifdef ISKON_CUSTOMIZATION 
+	objIndex_t ripIid;
+	struct json_object *ripObj = NULL;
+#endif
 	struct json_object *ipIfaceJobj = NULL, *ipAddrJobj = NULL;
 	struct json_object *paramValue = NULL;
 	struct json_object *dnsSrvJobj = NULL;
@@ -2421,6 +2425,10 @@
 		zcfgLog(ZCFG_LOG_ERR, "%s : Get IP.Interface Fail\n", __FUNCTION__);
 		goto ipConnFree;
 	}
+#ifdef ISKON_CUSTOMIZATION 
+	getSpecificObj(RDM_OID_ROUTING_RIP_INTF_SET, "Interface", json_type_string, ipIface, &ripIid, &ripObj);
+#endif
+	
 	
 	/* Get Device.Ethernet.VLANTermination.i */
 	lowerLayer = json_object_get_string(json_object_object_get(ipIfaceJobj, "LowerLayers"));
@@ -2679,6 +2687,19 @@
 				}
 			}
 		}
+#ifdef ISKON_CUSTOMIZATION 
+		else if(!strcmp(paramList->name, "X_ZYXEL_RIPEnable"))
+		{
+			if(ripObj != NULL)
+			{
+				paramValue = json_object_object_get(ripObj, "Enable");
+				if (paramValue != NULL)
+					json_object_object_add(*tr98Jobj, paramList->name, JSON_OBJ_COPY(paramValue));
+			}
+			paramList++;
+			continue;
+		}
+#endif
 		else if(!strcmp(paramList->name, "X_ZYXEL_DMZHost") || !strcmp(paramList->name, "X_ZYXEL_NAT_ALG") ||
 				!strcmp(paramList->name, "X_ZYXEL_SIP_ALG") || !strcmp(paramList->name, "X_ZYXEL_RTSP_ALG") ||
 				!strcmp(paramList->name, "X_ZYXEL_PPTP_ALG") || !strcmp(paramList->name, "X_ZYXEL_IPSEC_ALG")){
@@ -2811,6 +2832,10 @@
 	if(natSessionJobj){
 		json_object_put(natSessionJobj);
 	}
+#ifdef ISKON_CUSTOMIZATION 		
+	if(ripObj)
+		json_object_put(ripObj);
+#endif
 #ifdef IPV6INTERFACE_PROFILE
 	if(dnsV6SrvJobj){
 		json_object_put(dnsV6SrvJobj);
@@ -2833,6 +2858,10 @@
 	char ipIface[32] = {0};
 	char devIpIface[32] = {0};
 	objIndex_t ipIfaceIid;
+#ifdef ISKON_CUSTOMIZATION 
+	objIndex_t ripIid;
+	struct json_object *ripObj = NULL;
+#endif
 	objIndex_t dnsSrvIid, dnsSrvV6Iid, dnsIid, igmpIid, vlanTermIid, natIid, natSessionIid;
 	objIndex_t ipv4AddrIid, dhcpv4CltIid;
 	struct json_object *ipIfaceJobj = NULL;
@@ -2895,6 +2924,9 @@
 			return ret;
 		}
 	}
+#ifdef ISKON_CUSTOMIZATION 		
+	getSpecificObj(RDM_OID_ROUTING_RIP_INTF_SET, "Interface", json_type_string, ipIface, &ripIid, &ripObj);
+#endif
 	
 	IID_INIT(natIid);
 	if((ret = zcfgFeObjJsonGet(RDM_OID_NAT, &natIid, &natJobj)) != ZCFG_SUCCESS){
@@ -3421,6 +3453,16 @@
 					continue;
 				}
 			}			
+#endif
+#ifdef ISKON_CUSTOMIZATION 
+		else if(!strcmp(paramList->name, "X_ZYXEL_RIPEnable"))
+		{
+			if(ripObj != NULL)
+				if(paramValue != NULL )
+					json_object_object_add(ripObj, "Enable", JSON_OBJ_COPY(paramValue));
+			paramList++;
+			continue;		
+		}
 #endif				
 		}
 		paramList++;	
@@ -3441,6 +3483,10 @@
 			zcfgFeJsonMultiObjAddParam(multiJobj, RDM_OID_ROUTING_ROUTER, &rtIid, "apply", json_object_new_boolean(false));
 
 		json_object_put(ipAddrMultiJobj);
+#ifdef ISKON_CUSTOMIZATION 
+		zcfgFeJsonMultiObjAppend(RDM_OID_ROUTING_RIP_INTF_SET, &ripIid, multiJobj, ripObj);
+		json_object_put(ripObj);
+#endif
 	}
 	else{
 		if(dnsSrvJobj){
@@ -5254,6 +5300,10 @@
 	objIndex_t pppConnIid, ipIfaceIid, vlanTermIid, ethLinkIid;
 	objIndex_t dnsSrvIid, natIid, natSessionIid;
 	objIndex_t natIntfSetIid;
+#ifdef ISKON_CUSTOMIZATION 
+	objIndex_t ripIid;
+	struct json_object *ripObj = NULL;
+#endif
 	struct json_object *pppConnJobj = NULL, *pppoeJobj = NULL, *ipcpJobj = NULL, *ipIfaceJobj = NULL;
 	struct json_object *paramValue = NULL;
 	struct json_object *dnsSrvJobj = NULL;
@@ -5356,7 +5406,9 @@
 	if(retrieveJobjWithIpIface((const char *)ipIface, RDM_OID_NAT_INTF_SETTING, &natIntfSetIid, &natIntfSetJobj) != ZCFG_SUCCESS){
 		zcfgLog(ZCFG_LOG_DEBUG, "%s: retrieve NAT_INTF_SETTING fail\n", __FUNCTION__);
 	}
-
+#ifdef ISKON_CUSTOMIZATION 		
+	getSpecificObj(RDM_OID_ROUTING_RIP_INTF_SET, "Interface", json_type_string, ipIface, &ripIid, &ripObj);
+#endif
 	/*DNSServer*/
 	dnsInfoGetJobj(ipIface, &dnsSrvIid, (struct json_object **)&dnsSrvJobj, false, updateFlag); //dns v4
 #ifdef IPV6INTERFACE_PROFILE
@@ -5681,6 +5733,11 @@
 	json_object_put(natIntfSetJobj);
 
 	json_object_put(dnsSrvJobj);
+#ifdef ISKON_CUSTOMIZATION 
+	if(ripObj){
+		json_object_put(ripObj);
+	}
+#endif
 #ifdef IPV6INTERFACE_PROFILE
 	json_object_put(dnsV6SrvJobj);
 #endif	
@@ -5702,6 +5759,10 @@
 	char pppIface[32] = {0}, ipIface[32] = {0};
 	objIndex_t pppIfaceIid, ipIfaceIid, vlanTermIid;
 	objIndex_t dnsSrvIid, dnsSrvV6Iid, dnsIid, igmpIid;
+#ifdef ISKON_CUSTOMIZATION 
+	objIndex_t ripIid;
+	struct json_object *ripObj = NULL;
+#endif
 	struct json_object *pppIfaceJobj = NULL, *ipIfaceJobj = NULL, *vlanTermJobj = NULL;
 	struct json_object *paramValue = NULL;
 	struct json_object *paramValue2 = NULL;
@@ -5819,6 +5880,10 @@
 		return ZCFG_INTERNAL_ERROR;
 	}
 	
+#ifdef ISKON_CUSTOMIZATION 		
+	getSpecificObj(RDM_OID_ROUTING_RIP_INTF_SET, "Interface", json_type_string, ipIface, &ripIid, &ripObj);
+#endif
+	
 	/*DNSServer*/
 
 	const char *tr98DnsType = json_object_get_string(json_object_object_get(tr98Jobj, "X_ZYXEL_DNSType"));
@@ -5963,7 +6028,14 @@
 			json_object_put(tmpObj);
 			zcfgFeJsonMultiObjAddParam(multiJobj, RDM_OID_NAT, &natIid, "apply", json_object_new_boolean(true));
 		}
-
+#ifdef ISKON_CUSTOMIZATION 
+		if(ripObj){
+			tmpObj = ripObj;
+			ripObj = NULL;
+			ripObj = zcfgFeJsonMultiObjAppend(RDM_OID_ROUTING_RIP_INTF_SET, &ripIid, multiJobj, tmpObj);
+			json_object_put(tmpObj);
+		}
+#endif
 		zcfgFeJsonMultiObjSetBlock(multiJobj);
 		zcfgFeJsonMultiObjSetDelayApply(multiJobj);
 	}
@@ -6200,6 +6272,16 @@
 					continue;
 				}
 			}
+#endif
+#ifdef ISKON_CUSTOMIZATION 
+		else if(!strcmp(paramList->name, "X_ZYXEL_RIPEnable"))
+		{
+			if(ripObj != NULL)
+				if(paramValue != NULL )
+					json_object_object_add(ripObj, "Enable", JSON_OBJ_COPY(paramValue));
+			paramList++;	
+			continue;		
+		}
 #endif				
 		}
 		paramList++;
@@ -6303,6 +6385,14 @@
 			}
 			json_object_put(rtJobj);
 		}
+#ifdef ISKON_CUSTOMIZATION 		
+		if (ripObj){
+			if((ret = zcfgFeObjJsonSet(RDM_OID_ROUTING_RIP_INTF_SET, &ripIid, ripObj, NULL)) != ZCFG_SUCCESS ) {
+				printf("%s : Set RDM_OID_ROUTING_RIP_INTF_SET object Fail with ret=%d\n", __FUNCTION__, ret);
+			}
+			json_object_put(ripObj);
+		}
+#endif
 	}
 
 	return ZCFG_SUCCESS;
Index: libzcfg_fe_tr98-1.0/wanDev_api.c
===================================================================
--- libzcfg_fe_tr98-1.0.orig/wanDev_api.c	2017-01-10 18:39:03.247821458 +0800
+++ libzcfg_fe_tr98-1.0/wanDev_api.c	2017-01-10 18:39:38.244547547 +0800
@@ -1052,3 +1052,38 @@
 	
 	return ZCFG_SUCCESS;
 }
+#ifdef ISKON_CUSTOMIZATION 
+bool getSpecificObj(zcfg_offset_t oid, char *key, json_type type, void *value, objIndex_t *outIid, struct json_object **outJobj)
+{
+	objIndex_t iid;
+	struct json_object *Obj = NULL;
+	struct json_object *pramJobj;
+	bool found = false;
+
+	IID_INIT(iid);
+	while(zcfgFeObjJsonGetNextWithoutUpdate(oid, &iid, &Obj) == ZCFG_SUCCESS) {
+		pramJobj = json_object_object_get(Obj, key);
+		if(pramJobj != NULL){
+			if(type == json_type_string){
+				if(!strcmp((const char*)value, json_object_get_string(pramJobj))){
+					found = true;
+				}
+			}
+			else{
+				if(*(int*)value == json_object_get_int(pramJobj))
+					found = true;
+			}
+			
+			if(found){
+				if(outIid) memcpy(outIid, &iid, sizeof(objIndex_t));
+				if(outJobj) *outJobj = Obj;
+				else json_object_put(Obj);
+				break;
+			}
+		}
+		json_object_put(Obj);
+	}
+
+	return found;
+}
+#endif
Index: libzcfg_fe_tr98-1.0/wanDev_api.h
===================================================================
--- libzcfg_fe_tr98-1.0.orig/wanDev_api.h	2017-01-10 18:39:02.207821435 +0800
+++ libzcfg_fe_tr98-1.0/wanDev_api.h	2017-01-10 18:39:03.443821462 +0800
@@ -28,4 +28,7 @@
 zcfgRet_t setDhcpObj(char *, bool, struct json_object *);
 zcfgRet_t ipaddrSet(char *, objIndex_t *, struct json_object **, const char *, struct json_object *, struct json_object *);
 zcfgRet_t DhcpcIidGet(char *, objIndex_t *);
+#ifdef ISKON_CUSTOMIZATION 
+bool getSpecificObj(zcfg_offset_t, char *, json_type , void *, objIndex_t *, struct json_object **);
+#endif
 #endif
\ No newline at end of file
Index: libzcfg_fe_tr98-1.0/wanDev_parameter.h
===================================================================
--- libzcfg_fe_tr98-1.0.orig/wanDev_parameter.h	2017-01-10 18:39:02.103821432 +0800
+++ libzcfg_fe_tr98-1.0/wanDev_parameter.h	2017-01-10 18:39:03.443821462 +0800
@@ -472,6 +472,9 @@
 	{ "X_ZYXEL_DSLiteRelayIPv6Addresses", PARAMETER_ATTR_WRITE, 73, json_type_string},
 #endif
         { "X_ZYXEL_IfName", PARAMETER_ATTR_READONLY, 18, json_type_string},
+#ifdef ISKON_CUSTOMIZATION 
+	{ "X_ZYXEL_RIPEnable", PARAMETER_ATTR_WRITE, 0, json_type_boolean},
+#endif
 	{ NULL, 0, 0, 0}
 };
 
@@ -722,6 +725,9 @@
 	{ "X_ZYXEL_LCPEchoRetry", PARAMETER_ATTR_WRITE, 0, json_type_uint32},	
 #endif
         { "X_ZYXEL_IfName", PARAMETER_ATTR_READONLY, 18, json_type_string},
+#ifdef ISKON_CUSTOMIZATION	
+	{ "X_ZYXEL_RIPEnable", PARAMETER_ATTR_WRITE, 0, json_type_boolean},
+#endif	
 	{ NULL, 0, 0, 0}
 };
 
