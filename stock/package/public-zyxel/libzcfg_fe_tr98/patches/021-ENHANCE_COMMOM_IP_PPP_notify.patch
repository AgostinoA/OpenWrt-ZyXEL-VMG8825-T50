Index: libzcfg_fe_tr98-1.0/wanDev.c
===================================================================
--- libzcfg_fe_tr98-1.0.orig/wanDev.c	2014-04-24 04:08:30.252864387 +0800
+++ libzcfg_fe_tr98-1.0/wanDev.c	2014-04-24 07:35:26.899192515 +0800
@@ -2197,6 +2197,201 @@
 	return ret;
 }
 
+zcfgRet_t WANIpConnObjNotify(char *tr98ObjName, char *tr181ParamName, struct json_object *tr181ParamVal, int handler, struct json_object **tr98NotifyInfo)
+{
+	bool found = false;
+	char tr98Notify[256] = "";
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+
+	if(*tr98NotifyInfo == NULL) {
+		*tr98NotifyInfo = json_object_new_object();
+	}
+
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		if(strcmp(tr181ParamName, paramList->name) == 0) {
+			found = true;
+			sprintf(tr98Notify, "%s.%s", tr98ObjName, paramList->name);
+			break;
+		}
+		
+		if(strcmp(tr181ParamName, "IPAddress") == 0) {
+			found = true;
+			sprintf(tr98Notify, "%s.%s", tr98ObjName, "ExternalIPAddress");
+			break;
+		}
+		paramList++;
+	}
+
+	if(found) {
+		json_object_object_add(*tr98NotifyInfo, tr98Notify, JSON_OBJ_COPY(tr181ParamVal));
+	}
+
+	return ZCFG_SUCCESS;
+}
+
+int WANIpConnObjAttrGet(char *tr98FullPathName, int handler, char *paramName)
+{
+	char tr181Obj[128] = {0};
+	char mapObj[128] = {0};
+/*
+	uint32_t  devInfoOid = 0, ipv4Oid = 0;
+	objIndex_t devInfoIid, ipv4Iid;
+*/
+	int attrValue = ZCFG_NO_SUCH_PARAMETER;
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+
+	if(zcfgFe98To181MappingNameGet(tr98FullPathName, mapObj) != ZCFG_SUCCESS) {
+		return ZCFG_INVALID_OBJECT;
+	}
+	
+/*
+	IID_INIT(devInfoIid);
+	snprintf(tr181Obj, sizeof(tr181Obj),"Device.%s", mapObj);
+	devInfoOid = zcfgFeObjNameToObjId(tr181Obj, &devInfoIid);
+	
+	IID_INIT(ipv4Iid);
+	snprintf(tr181Obj, sizeof(tr181Obj),"Device.%s.IPv4Address.1", mapObj);
+	ipv4Oid = zcfgFeObjNameToObjId(tr181Obj, &ipv4Iid);
+*/
+	/*fill up tr98 devInfo object*/
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		if(strcmp(paramList->name, paramName)){
+			paramList++;
+			continue;
+		}
+		
+		/*special case*/
+		if(!strcmp(paramList->name, "ExternalIPAddress")){
+			attrValue = zcfgFeParamAttrGetByName(RDM_OID_IP_IFACE_V4_ADDR, "IPAddress");
+		}
+		else if(!strcmp(paramList->name, "SubnetMask") || !strcmp(paramList->name, "AddressingType")){
+			attrValue = zcfgFeParamAttrGetByName(RDM_OID_IP_IFACE_V4_ADDR, paramList->name);
+		}
+		else if(!strcmp(paramList->name, "DNSEnabled") || !strcmp( paramList->name, "X_ZYXEL_IPv6DNSEnabled")){
+			attrValue = zcfgFeParamAttrGetByName(RDM_OID_DNS_CLIENT_SRV, "Enable");
+		}
+		else if(!strcmp(paramList->name, "X_ZYXEL_DNSType")){
+			attrValue = zcfgFeParamAttrGetByName(RDM_OID_DNS_CLIENT_SRV, "X_ZYXEL_Type");
+		}
+		else if(!strcmp(paramList->name, "DNSServers") || !strcmp( paramList->name, "X_ZYXEL_IPv6DNSServers")){
+			attrValue = zcfgFeParamAttrGetByName(RDM_OID_DNS_CLIENT_SRV, "DNSServer");
+		}
+		else if(!strcmp(paramList->name, "NATEnabled")){
+			attrValue = zcfgFeParamAttrGetByName(RDM_OID_NAT_INTF_SETTING, "Enable");
+		}
+		else if(!strcmp(paramList->name, "DefaultGateway")){
+			attrValue = zcfgFeParamAttrGetByName(RDM_OID_ROUTING_ROUTER_V4_FWD, "GatewayIPAddress");
+		}
+		else if(!strcmp(paramList->name, "Name")){
+			attrValue = zcfgFeParamAttrGetByName(RDM_OID_IP_IFACE, "X_ZYXEL_SrvName");
+		}
+		else if(!strcmp(paramList->name, "X_ZYXEL_IPv6Enable")){
+			attrValue = zcfgFeParamAttrGetByName(RDM_OID_IP_IFACE, "IPv6Enable");
+		}
+		else if(!strcmp(paramList->name, "ConnectionType")){
+			attrValue = zcfgFeParamAttrGetByName(RDM_OID_IP_IFACE, "X_ZYXEL_ConnectionType");
+		}
+		else if(!strcmp(paramList->name, "X_ZYXEL_IPv6PrefixNumberOfEntries")){
+			attrValue = zcfgFeParamAttrGetByName(RDM_OID_IP_IFACE, "IPv6PrefixNumberOfEntries");
+		}
+		else if(!strcmp(paramList->name, "X_ZYXEL_IPv6AddressNumberOfEntries")){
+			attrValue = zcfgFeParamAttrGetByName(RDM_OID_IP_IFACE, "IPv6AddressNumberOfEntries");
+		}
+		else if(!strcmp(paramList->name, "X_ZYXEL_IPv6Status")){
+			attrValue = zcfgFeParamAttrGetByName(RDM_OID_IP_IFACE, "IPv6Status");
+		}
+		else if(!strcmp(paramList->name, "ConnectionStatus")){
+			attrValue = zcfgFeParamAttrGetByName(RDM_OID_IP_IFACE, "Status");
+		}
+		else if(!strcmp(paramList->name, "PossibleConnectionTypes")){
+			attrValue = zcfgFeParamAttrGetByName(RDM_OID_IP_IFACE, "X_ZYXEL_PossibleConnectionTypes");
+		}
+		else{
+			attrValue = zcfgFeParamAttrGetByName(RDM_OID_IP_IFACE, paramList->name);
+		}
+		
+		if(attrValue < 0 ) {
+			attrValue = 0;
+		}
+		break;
+	}
+	
+	return attrValue;
+}
+
+zcfgRet_t WANIpConnObjAttrSet(char *tr98FullPathName, int handler, char *paramName, int newNotify, struct json_object *multiAttrJobj)
+{
+	zcfgRet_t ret;
+	char tr181Obj[128] = {0};
+	char mapObj[128] = {0};
+	uint32_t  devInfoOid = 0, ipv4Oid = 0;
+	objIndex_t devInfoIid, ipv4Iid;
+	int attrValue = 0;
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+	if(zcfgFe98To181MappingNameGet(tr98FullPathName, mapObj) != ZCFG_SUCCESS) {
+		return ZCFG_INVALID_OBJECT;
+	}
+	
+
+	IID_INIT(devInfoIid);
+	snprintf(tr181Obj, sizeof(tr181Obj),"Device.%s", mapObj);
+	devInfoOid = zcfgFeObjNameToObjId(tr181Obj, &devInfoIid);
+	
+	IID_INIT(ipv4Iid);
+	snprintf(tr181Obj, sizeof(tr181Obj),"Device.%s.IPv4Address.1", mapObj);
+	ipv4Oid = zcfgFeObjNameToObjId(tr181Obj, &ipv4Iid);
+
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		/*find the matched parameter*/
+		if(strcmp(paramList->name, paramName)){
+			paramList++;
+			continue;
+		}
+		/*special case*/
+		if(strcmp(paramList->name, "ExternalIPAddress") == 0){
+			attrValue = zcfgFeParamAttrGetByName(ipv4Oid, "IPAddress");
+		}
+		else if(strcmp(paramList->name, "SubnetMask") == 0){
+			attrValue = zcfgFeParamAttrGetByName(ipv4Oid, paramList->name);
+		}
+		else{
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, paramList->name);
+		}
+		if(attrValue < 0) {
+			ret = ZCFG_INVALID_ARGUMENTS;
+			break;
+		}
+
+		/*Write new parameter attribute from tr98 object to tr181 objects*/
+		attrValue = zcfgFeNotifyAttrValSet(attrValue, newNotify);
+		if(strcmp(paramList->name, "ExternalIPAddress") == 0){
+			ret = zcfgFeMultiParamAttrAppend(ipv4Oid, multiAttrJobj, "IPAddress", attrValue);
+		}
+		else if(strcmp(paramList->name, "SubnetMask") == 0){
+			ret = zcfgFeMultiParamAttrAppend(ipv4Oid, multiAttrJobj, paramList->name, attrValue);
+		}
+		else{
+			ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, paramList->name, attrValue);
+		}
+		if( ret != ZCFG_SUCCESS){
+			zcfgLog(ZCFG_LOG_ERR, "%s(): set %d %s attribute fail\n", __FUNCTION__, devInfoOid, paramList->name);
+		}
+		break;
+
+	} /*Edn while*/
+	
+	return ret;
+}
+
 /*
  *   TR98 Object Name : InternetGatewayDevice.WANDevice.i.WANConnectionDevice.i.WANIPConnection.i.DHCPClient
  *
@@ -2699,7 +2894,7 @@
 			paramValue = json_object_object_get(pppConnJobj, "EncryptionProtocol");
 		}
 		else if(!strcmp(paramList->name, "PPPCompressionProtocol")) {
-			paramValue = json_object_object_get(pppConnJobj, "PPPCompressionProtocol");
+			paramValue = json_object_object_get(pppConnJobj, "CompressionProtocol");
 		}
 		else if(!strcmp(paramList->name, "PPPoEACName")) {
 			paramValue = json_object_object_get(pppoeJobj, "ACName");
@@ -3278,6 +3473,214 @@
 
 	return ret;
 }
+
+zcfgRet_t WANPppConnObjNotify(char *tr98ObjName, char *tr181ParamName, struct json_object *tr181ParamVal, int handler, struct json_object **tr98NotifyInfo)
+{
+	bool found = false;
+	char tr98Notify[256] = "";
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+
+	if(*tr98NotifyInfo == NULL) {
+		*tr98NotifyInfo = json_object_new_object();
+	}
+
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		if(strcmp(tr181ParamName, paramList->name) == 0) {
+			found = true;
+			sprintf(tr98Notify, "%s.%s", tr98ObjName, paramList->name);
+			break;
+		}
+		
+		if(strcmp(tr181ParamName, "LocalIPAddress") == 0) {
+			found = true;
+			sprintf(tr98Notify, "%s.%s", tr98ObjName, "ExternalIPAddress");
+			break;
+		}
+		paramList++;
+	}
+
+	if(found) {
+		json_object_object_add(*tr98NotifyInfo, tr98Notify, JSON_OBJ_COPY(tr181ParamVal));
+	}
+
+	return ZCFG_SUCCESS;
+}
+
+int WANPppConnObjAttrGet(char *tr98FullPathName, int handler, char *paramName)
+{
+	char tr181Obj[128] = {0};
+	char mapObj[128] = {0};
+/*
+	uint32_t  devInfoOid = 0, ipcpOid = 0;
+	objIndex_t devInfoIid, ipcpIid;
+*/
+	int attrValue = ZCFG_NO_SUCH_PARAMETER;
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+
+	if(zcfgFe98To181MappingNameGet(tr98FullPathName, mapObj) != ZCFG_SUCCESS) {
+		return ZCFG_INVALID_OBJECT;
+	}
+	
+/*
+	IID_INIT(devInfoIid);
+	snprintf(tr181Obj, sizeof(tr181Obj),"Device.%s", mapObj);
+	devInfoOid = zcfgFeObjNameToObjId(tr181Obj, &devInfoIid);
+	
+	IID_INIT(ipcpIid);
+	snprintf(tr181Obj, sizeof(tr181Obj),"Device.%s.IPCP", mapObj);
+	ipcpOid = zcfgFeObjNameToObjId(tr181Obj, &ipcpIid);
+*/
+	/*fill up tr98 devInfo object*/
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		if(strcmp(paramList->name, paramName)){
+			paramList++;
+			continue;
+		}
+		
+		/*special case*/
+		if(strcmp(paramList->name, "ExternalIPAddress") == 0){
+			attrValue = zcfgFeParamAttrGetByName(RDM_OID_PPP_IFACE_IPCP, "LocalIPAddress");
+		}
+		else if(strcmp(paramList->name, "RemoteIPAddress") == 0){
+			attrValue = zcfgFeParamAttrGetByName(RDM_OID_PPP_IFACE_IPCP, paramList->name);
+		}		
+		else if(!strcmp(paramList->name, "DNSEnabled") || !strcmp( paramList->name, "X_ZYXEL_IPv6DNSEnabled")){
+			attrValue = zcfgFeParamAttrGetByName(RDM_OID_DNS_CLIENT_SRV, "Enable");
+		}
+		else if(!strcmp(paramList->name, "X_ZYXEL_DNSType")){
+			attrValue = zcfgFeParamAttrGetByName(RDM_OID_DNS_CLIENT_SRV, "X_ZYXEL_Type");
+		}
+		else if(!strcmp(paramList->name, "DNSServers") || !strcmp( paramList->name, "X_ZYXEL_IPv6DNSServers")){
+			attrValue = zcfgFeParamAttrGetByName(RDM_OID_DNS_CLIENT_SRV, "DNSServer");
+		}	
+		else if(!strcmp(paramList->name, "DefaultGateway")){
+			attrValue = zcfgFeParamAttrGetByName(RDM_OID_ROUTING_ROUTER_V4_FWD, "GatewayIPAddress");
+		}
+		else if(!strcmp(paramList->name, "NATEnabled")){
+			attrValue = zcfgFeParamAttrGetByName(RDM_OID_NAT_INTF_SETTING, "Enable");
+		}
+		else if(!strcmp(paramList->name, "PPPoESessionID")){
+			attrValue = zcfgFeParamAttrGetByName(RDM_OID_PPP_IFACE_PPPOE, "SessionID");
+		}
+		else if(!strcmp(paramList->name, "PPPoEACName")){
+			attrValue = zcfgFeParamAttrGetByName(RDM_OID_PPP_IFACE_PPPOE, "ACName");
+		}
+		else if(!strcmp(paramList->name, "PPPoEServiceName")){
+			attrValue = zcfgFeParamAttrGetByName(RDM_OID_PPP_IFACE_PPPOE, "ServiceName");
+		}	
+		else if(!strcmp(paramList->name, "X_ZYXEL_IPv6Enable")){
+			attrValue = zcfgFeParamAttrGetByName(RDM_OID_IP_IFACE, "IPv6Enable");
+		}
+		else if(!strcmp(paramList->name, "X_ZYXEL_IPv6Status")){
+			attrValue = zcfgFeParamAttrGetByName(RDM_OID_IP_IFACE, "IPv6Status");
+		}
+		else if(!strcmp(paramList->name, "X_ZYXEL_IPv6AddressNumberOfEntries")){
+			attrValue = zcfgFeParamAttrGetByName(RDM_OID_IP_IFACE, "IPv6AddressNumberOfEntries");
+		}
+		else if(!strcmp(paramList->name, "X_ZYXEL_IPv6PrefixNumberOfEntries")){
+			attrValue = zcfgFeParamAttrGetByName(RDM_OID_IP_IFACE, "IPv6PrefixNumberOfEntries");
+		}	
+		else if(!strcmp(paramList->name, "PPPEncryptionProtocol")){
+			attrValue = zcfgFeParamAttrGetByName(RDM_OID_PPP_IFACE, "EncryptionProtocol");
+		}
+		else if(!strcmp(paramList->name, "PPPCompressionProtocol")){
+			attrValue = zcfgFeParamAttrGetByName(RDM_OID_PPP_IFACE, "CompressionProtocol");
+		}
+		else if(!strcmp(paramList->name, "PPPLCPEcho")){
+			attrValue = zcfgFeParamAttrGetByName(RDM_OID_PPP_IFACE, "LCPEcho");
+		}
+		else if(!strcmp(paramList->name, "PPPLCPEchoRetry")){
+			attrValue = zcfgFeParamAttrGetByName(RDM_OID_PPP_IFACE, "LCPEchoRetry");
+		}
+		else if(!strcmp(paramList->name, "PPPAuthenticationProtocol")){
+			attrValue = zcfgFeParamAttrGetByName(RDM_OID_PPP_IFACE, "AuthenticationProtocol");
+		}
+		else if(!strcmp(paramList->name, "PossibleConnectionTypes")){
+			attrValue = zcfgFeParamAttrGetByName(RDM_OID_PPP_IFACE, "X_ZYXEL_PossibleConnectionTypes");
+		}
+		else if(!strcmp(paramList->name, "ConnectionType")){
+			attrValue = zcfgFeParamAttrGetByName(RDM_OID_PPP_IFACE, "X_ZYXEL_ConnectionType");
+		}
+		else{
+			attrValue = zcfgFeParamAttrGetByName(RDM_OID_PPP_IFACE, paramList->name);
+		}
+		
+		if(attrValue < 0 ) {
+			attrValue = 0;
+		}
+		break;
+	}
+	
+	return attrValue;
+}
+
+zcfgRet_t WANPppConnObjAttrSet(char *tr98FullPathName, int handler, char *paramName, int newNotify, struct json_object *multiAttrJobj)
+{
+	zcfgRet_t ret;
+	char tr181Obj[128] = {0};
+	char mapObj[128] = {0};
+	uint32_t  devInfoOid = 0, ipcpOid = 0;
+	objIndex_t devInfoIid, ipcpIid;
+	int attrValue = 0;
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+	if(zcfgFe98To181MappingNameGet(tr98FullPathName, mapObj) != ZCFG_SUCCESS) {
+		return ZCFG_INVALID_OBJECT;
+	}
+	
+
+	IID_INIT(devInfoIid);
+	snprintf(tr181Obj, sizeof(tr181Obj),"Device.%s", mapObj);
+	devInfoOid = zcfgFeObjNameToObjId(tr181Obj, &devInfoIid);
+	
+	IID_INIT(ipcpIid);
+	snprintf(tr181Obj, sizeof(tr181Obj),"Device.%s.IPCP", mapObj);
+	ipcpOid = zcfgFeObjNameToObjId(tr181Obj, &ipcpIid);
+
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		/*find the matched parameter*/
+		if(strcmp(paramList->name, paramName)){
+			paramList++;
+			continue;
+		}
+		/*special case*/
+		if(strcmp(paramList->name, "ExternalIPAddress") == 0){
+			attrValue = zcfgFeParamAttrGetByName(ipcpOid, "LocalIPAddress");
+		}
+		else{
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, paramList->name);
+		}
+		if(attrValue < 0) {
+			ret = ZCFG_INVALID_ARGUMENTS;
+			break;
+		}
+
+		/*Write new parameter attribute from tr98 object to tr181 objects*/
+		attrValue = zcfgFeNotifyAttrValSet(attrValue, newNotify);
+		if(strcmp(paramList->name, "ExternalIPAddress") == 0){
+			ret = zcfgFeMultiParamAttrAppend(ipcpOid, multiAttrJobj, "LocalIPAddress", attrValue);
+		}
+		else{
+			ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, paramList->name, attrValue);
+		}
+		if( ret != ZCFG_SUCCESS){
+			zcfgLog(ZCFG_LOG_ERR, "%s(): set %d %s attribute fail\n", __FUNCTION__, devInfoOid, paramList->name);
+		}
+		break;
+
+	} /*Edn while*/
+	
+	return ret;
+}
+
 /*  
  *   TR98 Object Name : InternetGatewayDevice.WANDevice.i.WANConnectionDevice.i.WANIPConnection.i.PortMapping.i
  *                      InternetGatewayDevice.WANDevice.i.WANConnectionDevice.i.WANPPPConnection.i.PortMapping.i
Index: libzcfg_fe_tr98-1.0/wanDev.h
===================================================================
--- libzcfg_fe_tr98-1.0.orig/wanDev.h	2014-04-24 04:08:30.240864388 +0800
+++ libzcfg_fe_tr98-1.0/wanDev.h	2014-04-24 04:08:30.320864387 +0800
@@ -82,6 +82,10 @@
 extern zcfgRet_t WANIpConnObjSet(char *, int, struct json_object *, struct json_object *);
 extern zcfgRet_t WANIpConnObjAdd(char *, int *);
 extern zcfgRet_t WANIpConnObjDel(char *);
+extern zcfgRet_t WANIpConnObjNotify(char *, char *, struct json_object *, int, struct json_object **);
+extern int WANIpConnObjAttrGet(char *, int, char *);
+extern zcfgRet_t WANIpConnObjAttrSet(char *, int, char *, int , struct json_object *);
+
 
 /* InternetGatewayDevice.WANDevice.i.WANConnectionDevice.i.WANIPConnection.i.DHCPClient */
 extern zcfgRet_t DhcpClientObjGet(char *, int, struct json_object **);
@@ -99,6 +103,9 @@
 extern zcfgRet_t WANPppConnObjSet(char *, int, struct json_object *, struct json_object *);
 extern zcfgRet_t WANPppConnObjAdd(char *, int *);
 extern zcfgRet_t WANPppConnObjDel(char *);
+extern zcfgRet_t WANPppConnObjNotify(char *, char *, struct json_object *, int, struct json_object **);
+extern int WANPppConnObjAttrGet(char *, int, char *);
+extern zcfgRet_t WANPppConnObjAttrSet(char *, int, char *, int , struct json_object *);
 
 /* InternetGatewayDevice.WANDevice.i.WANConnectionDevice.i.WANIPConnection.i.PortMapping.i */
 /* InternetGatewayDevice.WANDevice.i.WANConnectionDevice.i.WANPPPConnection.i.PortMapping.i */
Index: libzcfg_fe_tr98-1.0/zcfg_fe_tr98_handle.h
===================================================================
--- libzcfg_fe_tr98-1.0.orig/zcfg_fe_tr98_handle.h	2014-04-24 04:08:30.240864388 +0800
+++ libzcfg_fe_tr98-1.0/zcfg_fe_tr98_handle.h	2014-04-24 04:09:42.118578823 +0800
@@ -290,7 +290,7 @@
 {TR98_WAN_PTM_LINK_CONF_STAT,   0,              para_WANPtmLinkConfStat,WANPtmLinkConfStObjGet,  NULL,                   NULL,             NULL,            NULL},
 {TR98_WAN_ETH_LINK_CONF,        0,              para_WANEthLinkConf,    WANEthLinkConfObjGet,    NULL,                   NULL,             NULL,            NULL},
 {TR98_WAN_POTS_LINK_CONF,       0,              NULL,                   NULL,                    NULL,                   NULL,             NULL,            NULL},
-{TR98_WAN_IP_CONN,              ATTR_INDEX_CREA,para_WANIpConn,         WANIpConnObjGet,         WANIpConnObjSet,        WANIpConnObjAdd,  WANIpConnObjDel, NULL},
+{TR98_WAN_IP_CONN,              ATTR_INDEX_CREA,para_WANIpConn,         WANIpConnObjGet,         WANIpConnObjSet,        WANIpConnObjAdd,  WANIpConnObjDel, WANIpConnObjNotify, /*NULL, NULL*/ WANIpConnObjAttrGet, WANIpConnObjAttrSet},
 {TR98_DHCP_CLIENT,              0,              para_DhcpClient,        DhcpClientObjGet,        NULL,                   NULL,             NULL,            NULL},
 {TR98_SENT_DHCP_OPT,            ATTR_INDEX_CREA, para_SentDhcpOpt,      DhcpClientSentOptObjGet, DhcpClientSentOptObjSet,DhcpClientSentOptObjAdd, DhcpClientSentOptObjDel,            NULL},
 {TR98_REQ_DHCP_OPT,             ATTR_INDEX_CREA, para_ReqDhcpOpt,       DhcpClientReqOptObjGet,  DhcpClientReqOptObjSet, DhcpClientReqOptObjAdd, DhcpClientReqOptObjDel,            NULL},
@@ -306,7 +306,7 @@
 #ifdef IPV6RD_PROFILE
 {TR98_WAN_IP_CONN_IPV6RD,       0,              para_WANIpv6Rd,     	WANIpv6RdObjGet,         WANIpv6RdObjSet,        NULL,             NULL,            NULL},
 #endif
-{TR98_WAN_PPP_CONN,             ATTR_INDEX_CREA,para_WANPppConn,        WANPppConnObjGet,        WANPppConnObjSet,       WANPppConnObjAdd, WANPppConnObjDel,NULL},
+{TR98_WAN_PPP_CONN,             ATTR_INDEX_CREA,para_WANPppConn,        WANPppConnObjGet,        WANPppConnObjSet,       WANPppConnObjAdd, WANPppConnObjDel, WANPppConnObjNotify, /*NULL, NULL*/ WANPppConnObjAttrGet, WANPppConnObjAttrSet},
 {TR98_WAN_PPP_PORT_MAP,         ATTR_INDEX_CREA,para_WANPppPortMap,     WANPortMappingGet,       WANPortMappingSet,      WANPortMappingAdd,WANPortMappingDel,NULL},	
 {TR98_WAN_PPP_CONN_STAT,        0,              para_WANPppConnStat,    WANConnStObjGet,         NULL,                   NULL,             NULL,            NULL},
 #ifdef IPV6INTERFACE_PROFILE
Index: libzcfg_fe_tr98-1.0/zcfg_fe_tr98.c
===================================================================
--- libzcfg_fe_tr98-1.0.orig/zcfg_fe_tr98.c	2014-04-24 04:08:30.176864388 +0800
+++ libzcfg_fe_tr98-1.0/zcfg_fe_tr98.c	2014-04-24 04:08:30.324864387 +0800
@@ -353,6 +353,55 @@
 	
 }
 
+#if 1 //__ZYXEL__, Mark
+zcfgRet_t zcfgFeGetTr181NameParm(const char *notifyName, char *objName, char *objParm){
+	char *ptr = NULL, *ptr2 = NULL;
+	int n_Len, n_Len2;
+	char *IpIntObjName = "IP.Interface";
+	char *PppIntObjName = "PPP.Interface";
+	
+	printf("Enter %s\n", __FUNCTION__);
+	if(notifyName == NULL || objName== NULL || objParm == NULL) return ZCFG_INVALID_ARGUMENTS;
+	
+	*objName = '\0';
+	*objParm = '\0';
+	
+	ptr = strrchr(notifyName, '.');
+	if(ptr == NULL) {
+		printf("Invalid arguments of %s\n", notifyName);
+		return ZCFG_INVALID_ARGUMENTS;
+	}
+	strcpy(objParm, ptr+1);
+	
+	if(!strncmp(notifyName, "Device.", strlen("Device."))){
+		ptr2 = notifyName + strlen("Device.");
+		n_Len = ptr-ptr2;
+		if(n_Len) strncpy(objName, ptr2, n_Len);
+	}
+	else {
+		n_Len = ptr-notifyName;
+		if(n_Len) strncpy(objName, notifyName, n_Len);
+	}
+	
+	n_Len = strlen(IpIntObjName);
+	n_Len2 = strlen(PppIntObjName);
+	ptr = NULL;
+	if(!strncmp(objName, IpIntObjName, n_Len)){
+		if((ptr = strstr(objName+n_Len, "IPv4Address")) && *(ptr-1) == '.'){
+			*(ptr-1) = '\0';
+		}
+	}
+	else if(!strncmp(objName, PppIntObjName, n_Len2)){
+		if((ptr = strstr(objName+n_Len2, "IPCP")) && *(ptr-1) == '.'){
+			*(ptr-1) = '\0';
+		}
+	}
+	
+	printf("%s: notifyName=%s, objName=%s, objParm=%s\n", __FUNCTION__, notifyName, objName, objParm);
+	return ZCFG_SUCCESS;
+}
+#endif
+
 zcfgRet_t zcfgFeTr98Notify(struct json_object *tr181NotifyInfo, struct json_object **tr98NotifyInfo)
 {
 	zcfgRet_t ret;
@@ -373,6 +422,7 @@
 
 	json_object_object_foreach(tr181NotifyInfo, tr181NotifyName, tr181ParamVal) {
 		/*Get object path name*/
+#if 0 //__ZYXEL__, Mark
 		strcpy(tr181ObjName, tr181NotifyName);
 		ptr = strrchr(tr181ObjName, '.');
 		if(ptr == NULL) {
@@ -382,7 +432,12 @@
 		strcpy(tr181ParamName, ptr+1);
 
 		*ptr = '\0';
-
+#else
+		if(zcfgFeGetTr181NameParm(tr181NotifyName, tr181ObjName, tr181ParamName) != ZCFG_SUCCESS)
+			continue;
+			
+		printf("%s: tr181NotifyName=%s, tr181ObjName=%s, tr181ParamName=%s\n", __FUNCTION__, tr181NotifyName, tr181ObjName, tr181ParamName);
+#endif
 		if((ret = zcfgFe181To98MappingNameGet(tr181ObjName, tr98ObjName)) == ZCFG_SUCCESS) {
 			printf("TR98 Object Name %s\n", tr98ObjName);
 	
