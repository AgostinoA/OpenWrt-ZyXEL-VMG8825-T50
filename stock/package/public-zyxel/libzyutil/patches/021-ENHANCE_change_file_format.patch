Index: libzyutil-1.0/ECONET/libzyutil_econet_wrapper.h
===================================================================
--- libzyutil-1.0.orig/ECONET/libzyutil_econet_wrapper.h	2015-09-19 18:17:56.351777435 +0800
+++ libzyutil-1.0/ECONET/libzyutil_econet_wrapper.h	2015-09-19 18:27:26.015771971 +0800
@@ -1,112 +1,112 @@
-#ifdef ECONET_PLATFORM
-#include <ctype.h>
-#include <unistd.h>
-#include "zcfg_common.h"
-
-#if 1//defined(ZYXEL)
-#define CHIP_ID_LEN 		8
-#define BOARD_ID_LEN 		16
-#define SW_VERSION_LEN 		32
-#define MODEL_ID_LEN		4
-
-#define ZY_MODELID_PREFIX 		0x5a590000 /* prefix must be ZY */
-#endif
-
-#define MRD_SERIAL_NUM_LEN              14
-#define MRD_GPON_SERIAL_NUM_LEN         8
-#define MRD_VENDOR_NAME_LEN             32
-#define MRD_PRODUCT_NAME_LEN            32
-#define MRD_MAC_ADDR_LEN                6
-#define MRD_FEATUREBITS_LEN             30
-
-/*-------------------------------------------------------------------
- * MRD structdure for Econet SDK/MT7505 platform
- */
-typedef struct mrd {
-    unsigned char SDRAM_CONF_array[4];
-    unsigned char VENDOR_NAME[MRD_VENDOR_NAME_LEN];
-    unsigned char PRODUCT_NAME[MRD_PRODUCT_NAME_LEN];
-    unsigned char FUNC_BYTE[4];
-    unsigned char ETHER_ADDR[MRD_MAC_ADDR_LEN];
-    unsigned char SNMP_SYSOBJID_array[22];
-    unsigned char COUNTRY_array;
-    unsigned char ether_gpio;
-    unsigned char power_gpio[2];
-    unsigned char restore_flag;
-    unsigned char unused1[32];
-    unsigned char dsl_gpio;
-    unsigned char internet_gpio;
-    unsigned char multi_upgrade_gpio[16];
-    unsigned char id_75xx;
-    unsigned char onu_type; //byte 0~156
-#if 1
-	unsigned char GponSerialNumber[MRD_GPON_SERIAL_NUM_LEN];
-    unsigned char unused3[10];
-#else
-    unsigned char SN[18];
-#endif
-/* --- ZyXEL related --- start --- */
-    unsigned char SerialNumber[MRD_SERIAL_NUM_LEN];
-    unsigned char NumMacAddrs;
-    unsigned char MrdVer;
-    unsigned char EngDebugFlag;
-    unsigned char MainFeatureBit;
-    unsigned char FeatureBits[MRD_FEATUREBITS_LEN];
-    unsigned char HTP_Switch;
-    unsigned char WpaPskKey[16];
-    // bootloader related information
-    unsigned char BM_VER_MAJ;
-    unsigned char BM_VER_MIN;
-    unsigned char BM_VER_ECO;
-    unsigned char builddate[4];
-    unsigned char buildtime[3]; //byte 0~72
-/* --- ZyXEL related --- end --- */
-#ifdef BOOTROM_LARGE_SIZE
-    // mic.conf will located at the end of block 0.
-    // tcboot_crc32 will located at the last 4 bytes of block 1.
-    unsigned char unused2[6]; // let total structure have 256 bytes.
-#else
-    // if MRD structure locate at the end of tcboot.bin, need reserve 4 bytes for crc.
-    unsigned char unused[2]; // let total structure have 256 bytes.
-    unsigned char tcboot_crc32[4]; //filled by trx.c
-#endif
-} __attribute__((packed)) MRD_DATA, *PMRD_DATA;
-
-struct trx_header {
-	unsigned int magic;			/* "HDR0" */
-	unsigned int header_len;    /*Length of trx header*/
-	unsigned int len;			/* Length of file including header */
-	unsigned int crc32;			/* 32-bit CRC from flag_version to end of file */
-	unsigned char version[32];  /*firmware version number*/
-	unsigned char customerversion[32];  /*firmware version number*/
-//	unsigned int flag_version;	/* 0:15 flags, 16:31 version */
-#if 0
-	unsigned int reserved[44];	/* Reserved field of header */
-#else
-	unsigned int kernel_len;	//kernel length
-	unsigned int rootfs_len;	//rootfs length
-	unsigned int romfile_len;	//romfile length
-	#if 0
-	unsigned int reserved[42];  /* Reserved field of header */
-	#else
-	unsigned char Model[32];
-	unsigned int decompAddr;//kernel decompress address
-	unsigned int reserved[32];  /* Reserved field of header */
-	#endif
-#endif
-#if 1//defined(ZYXEL)
-	unsigned char chipId[CHIP_ID_LEN];		/* Provided by Makefile */
-	unsigned char boardId[BOARD_ID_LEN];		/* Provided by Makefile */
-	unsigned char modelId[MODEL_ID_LEN];			/* Provided by Makefile */
-	unsigned int defcfg_len;	//default config length
-	unsigned int imageSequence;
-	unsigned char swVersionInt[SW_VERSION_LEN];	/* Provided by Makefile */
-	unsigned char swVersionExt[SW_VERSION_LEN];	/* Provided by Makefile */
- 	unsigned int rootfsChksum;
-	unsigned int kernelChksum;
-	unsigned int defcfgChksum;
-    unsigned int headerChksum;
-#endif
-};
-
+#ifdef ECONET_PLATFORM
+#include <ctype.h>
+#include <unistd.h>
+#include "zcfg_common.h"
+
+#if 1//defined(ZYXEL)
+#define CHIP_ID_LEN 		8
+#define BOARD_ID_LEN 		16
+#define SW_VERSION_LEN 		32
+#define MODEL_ID_LEN		4
+
+#define ZY_MODELID_PREFIX 		0x5a590000 /* prefix must be ZY */
+#endif
+
+#define MRD_SERIAL_NUM_LEN              14
+#define MRD_GPON_SERIAL_NUM_LEN         8
+#define MRD_VENDOR_NAME_LEN             32
+#define MRD_PRODUCT_NAME_LEN            32
+#define MRD_MAC_ADDR_LEN                6
+#define MRD_FEATUREBITS_LEN             30
+
+/*-------------------------------------------------------------------
+ * MRD structdure for Econet SDK/MT7505 platform
+ */
+typedef struct mrd {
+    unsigned char SDRAM_CONF_array[4];
+    unsigned char VENDOR_NAME[MRD_VENDOR_NAME_LEN];
+    unsigned char PRODUCT_NAME[MRD_PRODUCT_NAME_LEN];
+    unsigned char FUNC_BYTE[4];
+    unsigned char ETHER_ADDR[MRD_MAC_ADDR_LEN];
+    unsigned char SNMP_SYSOBJID_array[22];
+    unsigned char COUNTRY_array;
+    unsigned char ether_gpio;
+    unsigned char power_gpio[2];
+    unsigned char restore_flag;
+    unsigned char unused1[32];
+    unsigned char dsl_gpio;
+    unsigned char internet_gpio;
+    unsigned char multi_upgrade_gpio[16];
+    unsigned char id_75xx;
+    unsigned char onu_type; //byte 0~156
+#if 1
+	unsigned char GponSerialNumber[MRD_GPON_SERIAL_NUM_LEN];
+    unsigned char unused3[10];
+#else
+    unsigned char SN[18];
+#endif
+/* --- ZyXEL related --- start --- */
+    unsigned char SerialNumber[MRD_SERIAL_NUM_LEN];
+    unsigned char NumMacAddrs;
+    unsigned char MrdVer;
+    unsigned char EngDebugFlag;
+    unsigned char MainFeatureBit;
+    unsigned char FeatureBits[MRD_FEATUREBITS_LEN];
+    unsigned char HTP_Switch;
+    unsigned char WpaPskKey[16];
+    // bootloader related information
+    unsigned char BM_VER_MAJ;
+    unsigned char BM_VER_MIN;
+    unsigned char BM_VER_ECO;
+    unsigned char builddate[4];
+    unsigned char buildtime[3]; //byte 0~72
+/* --- ZyXEL related --- end --- */
+#ifdef BOOTROM_LARGE_SIZE
+    // mic.conf will located at the end of block 0.
+    // tcboot_crc32 will located at the last 4 bytes of block 1.
+    unsigned char unused2[6]; // let total structure have 256 bytes.
+#else
+    // if MRD structure locate at the end of tcboot.bin, need reserve 4 bytes for crc.
+    unsigned char unused[2]; // let total structure have 256 bytes.
+    unsigned char tcboot_crc32[4]; //filled by trx.c
+#endif
+} __attribute__((packed)) MRD_DATA, *PMRD_DATA;
+
+struct trx_header {
+	unsigned int magic;			/* "HDR0" */
+	unsigned int header_len;    /*Length of trx header*/
+	unsigned int len;			/* Length of file including header */
+	unsigned int crc32;			/* 32-bit CRC from flag_version to end of file */
+	unsigned char version[32];  /*firmware version number*/
+	unsigned char customerversion[32];  /*firmware version number*/
+//	unsigned int flag_version;	/* 0:15 flags, 16:31 version */
+#if 0
+	unsigned int reserved[44];	/* Reserved field of header */
+#else
+	unsigned int kernel_len;	//kernel length
+	unsigned int rootfs_len;	//rootfs length
+	unsigned int romfile_len;	//romfile length
+	#if 0
+	unsigned int reserved[42];  /* Reserved field of header */
+	#else
+	unsigned char Model[32];
+	unsigned int decompAddr;//kernel decompress address
+	unsigned int reserved[32];  /* Reserved field of header */
+	#endif
+#endif
+#if 1//defined(ZYXEL)
+	unsigned char chipId[CHIP_ID_LEN];		/* Provided by Makefile */
+	unsigned char boardId[BOARD_ID_LEN];		/* Provided by Makefile */
+	unsigned char modelId[MODEL_ID_LEN];			/* Provided by Makefile */
+	unsigned int defcfg_len;	//default config length
+	unsigned int imageSequence;
+	unsigned char swVersionInt[SW_VERSION_LEN];	/* Provided by Makefile */
+	unsigned char swVersionExt[SW_VERSION_LEN];	/* Provided by Makefile */
+ 	unsigned int rootfsChksum;
+	unsigned int kernelChksum;
+	unsigned int defcfgChksum;
+    unsigned int headerChksum;
+#endif
+};
+
 #endif
\ No newline at end of file
Index: libzyutil-1.0/ECONET/libzyutil_wrapper.c
===================================================================
--- libzyutil-1.0.orig/ECONET/libzyutil_wrapper.c	2015-09-19 18:17:56.351777435 +0800
+++ libzyutil-1.0/ECONET/libzyutil_wrapper.c	2015-09-19 18:17:56.363777435 +0800
@@ -1,200 +1,200 @@
-#ifdef ECONET_PLATFORM
-
-#include <stdlib.h>
-#include <stdio.h>
-#include <string.h>
-#include <fcntl.h>
-
-#include "libzyutil_wrapper.h"
-#include "libzyutil_econet_wrapper.h"
-
-#define BOOTLOADER "bootloader"
-#define TCLINUX "tclinux"
-
-int mtd_open(const char *mtd, int flags)
-{
-	FILE *fp;
-	char dev[256];
-	int i;
-
-	if ((fp = fopen("/proc/mtd", "r"))) {
-		while (fgets(dev, sizeof(dev), fp)) {
-			if (sscanf(dev, "mtd%d:", &i) && strstr(dev, mtd)) {
-				snprintf(dev, sizeof(dev), "/dev/mtd%d", i);
-				fclose(fp);
-				return open(dev, flags);
-			}
-		}
-		fclose(fp);
-	}
-
-	return open(mtd, flags);
-}
-
-int read_mtd_info(const char *mtd, struct trx_header *p_trx_header)
-{
-	int mtd_fd = -1;
-	int trx_header_len = sizeof(struct trx_header);
-	
-	if(-1 == (mtd_fd = mtd_open(mtd,O_RDONLY)))
-	{
-		printf("ERROR!Open mtd %s fail",mtd);
-		return -1;
-	}
-
-	memset(p_trx_header,0,trx_header_len);
-	
-	if(trx_header_len != read(mtd_fd,p_trx_header,trx_header_len))
-	{
-		printf("ERROR!Read mtd %s fail",mtd);
-		close(mtd_fd);
-		return -1;
-	}
-
-	close(mtd_fd);
-	return 0;
-}
-
-int read_mrd_info(PMRD_DATA mrd)
-{
-	FILE *fp;
-	int mrd_len = sizeof(struct mrd);
-	
-    /* Read bootloader from flash */
-    system("cat /dev/mtd0 > /tmp/boot.bin");
-    
-    fp = fopen("/tmp/boot.bin", "r+b");
-    if( fp == NULL ){
-        printf("open file error!!\n");
-        system("rm /tmp/boot.bin");        
-        return -1;
-    }
-
-	/*mrd offset 0xff00*/
-    fseek(fp, 0x0000ff00L, SEEK_SET);
-    fread(mrd, mrd_len, 1, fp);
-    fflush(fp);
-    fclose(fp);
-
-	return 0;
-}
-
-#ifdef SUPPORT_LANVLAN
-zcfgRet_t zyUtilISetIfState(char *ifName, bool up)
-{
-	/*Todo*/
-	return ZCFG_SUCCESS;
-}
-#endif
-
-zcfgRet_t zyUtilIGetSerailNum(char *sn)
-{
-	struct mrd mrd_buff;
-
-	if(0 != read_mrd_info(&mrd_buff))
-		return -1;
-
-	strcpy(sn, mrd_buff.SerialNumber);
-
-	//printf("SerialNumber:%s\n",sn);
-
-	return ZCFG_SUCCESS;
-}
-
-zcfgRet_t zyUtilIGetBaseMAC(char *mac)
-{
-	struct mrd mrd_buff;
-
-	if(0 != read_mrd_info(&mrd_buff))
-		return -1;
-
-	sprintf(mac ,"%02X%02X%02X%02X%02X%02X",
-		mrd_buff.ETHER_ADDR[0],
-		mrd_buff.ETHER_ADDR[1],
-        	mrd_buff.ETHER_ADDR[2],
-        	mrd_buff.ETHER_ADDR[3],
-        	mrd_buff.ETHER_ADDR[4],
-        	mrd_buff.ETHER_ADDR[5]
-	);
-
-	//printf("mac:%s\n",mac);
-	
-	return ZCFG_SUCCESS;
-}
-
-zcfgRet_t zyUtilIGetNumberOfMAC(int *num)
-{
-	struct mrd mrd_buff;
-
-	if(0 != read_mrd_info(&mrd_buff))
-		return -1;
-
-	if(num) *num =  mrd_buff.NumMacAddrs;
-
-	//printf("NumMacAddrs:%d\n",num);
-	
-	return ZCFG_SUCCESS;
-}
-
-zcfgRet_t zyUtilIGetProductName(char *pdname)
-{
-	struct mrd mrd_buff;
-
-	if(0 != read_mrd_info(&mrd_buff))
-		return -1;
-
-	strcpy(pdname, mrd_buff.PRODUCT_NAME);
-
-	//printf("ProductName:%s\n",pdname);
-	
-	return ZCFG_SUCCESS;
-}
-
-zcfgRet_t zyUtilIGetFirmwareVersion(char *fwversion)
-{
-	struct trx_header trx_header_buff;
-
-	if(0 != read_mtd_info(TCLINUX,&trx_header_buff))
-		return -1;
-
-	strcpy(fwversion, trx_header_buff.swVersionInt);
-	
-	//printf("FirmwareVersion:%s\n",fwversion);
-
-	return ZCFG_SUCCESS;
-}
-
-zcfgRet_t zyUtilIGetSerialNumber(char *serianumber)
-{
-	struct mrd mrd_buff;
-
-	if(0 != read_mrd_info(&mrd_buff))
-		return -1;
-
-	strcpy(serianumber, mrd_buff.SerialNumber);
-
-	//printf("SerialNumber:%s\n",serianumber);
-
-	return ZCFG_SUCCESS;
-}
-
-zcfgRet_t zyUtilIGetGponSerialNumber(char *serianumber)
-{
-	struct mrd mrd_buff;
-
-	if(0 != read_mrd_info(&mrd_buff))
-		return -1;
-
-	memcpy(serianumber, mrd_buff.GponSerialNumber,MRD_GPON_SERIAL_NUM_LEN);
-
-	//printf("SerialNumber: %s\n",serianumber);
-
-	return ZCFG_SUCCESS;
-}
-int zyUtilGetGPIO(int gpioNum)
-{
-	/*This function is only used to check VMG3926-B10A and VMG8924-B10B, so Cross Platform is not need*/
-	return 0;
-}
-
+#ifdef ECONET_PLATFORM
+
+#include <stdlib.h>
+#include <stdio.h>
+#include <string.h>
+#include <fcntl.h>
+
+#include "libzyutil_wrapper.h"
+#include "libzyutil_econet_wrapper.h"
+
+#define BOOTLOADER "bootloader"
+#define TCLINUX "tclinux"
+
+int mtd_open(const char *mtd, int flags)
+{
+	FILE *fp;
+	char dev[256];
+	int i;
+
+	if ((fp = fopen("/proc/mtd", "r"))) {
+		while (fgets(dev, sizeof(dev), fp)) {
+			if (sscanf(dev, "mtd%d:", &i) && strstr(dev, mtd)) {
+				snprintf(dev, sizeof(dev), "/dev/mtd%d", i);
+				fclose(fp);
+				return open(dev, flags);
+			}
+		}
+		fclose(fp);
+	}
+
+	return open(mtd, flags);
+}
+
+int read_mtd_info(const char *mtd, struct trx_header *p_trx_header)
+{
+	int mtd_fd = -1;
+	int trx_header_len = sizeof(struct trx_header);
+
+	if(-1 == (mtd_fd = mtd_open(mtd,O_RDONLY)))
+	{
+		printf("ERROR!Open mtd %s fail",mtd);
+		return -1;
+	}
+
+	memset(p_trx_header,0,trx_header_len);
+
+	if(trx_header_len != read(mtd_fd,p_trx_header,trx_header_len))
+	{
+		printf("ERROR!Read mtd %s fail",mtd);
+		close(mtd_fd);
+		return -1;
+	}
+
+	close(mtd_fd);
+	return 0;
+}
+
+int read_mrd_info(PMRD_DATA mrd)
+{
+	FILE *fp;
+	int mrd_len = sizeof(struct mrd);
+
+    /* Read bootloader from flash */
+    system("cat /dev/mtd0 > /tmp/boot.bin");
+
+    fp = fopen("/tmp/boot.bin", "r+b");
+    if( fp == NULL ){
+        printf("open file error!!\n");
+        system("rm /tmp/boot.bin");
+        return -1;
+    }
+
+	/*mrd offset 0xff00*/
+    fseek(fp, 0x0000ff00L, SEEK_SET);
+    fread(mrd, mrd_len, 1, fp);
+    fflush(fp);
+    fclose(fp);
+
+	return 0;
+}
+
+#ifdef SUPPORT_LANVLAN
+zcfgRet_t zyUtilISetIfState(char *ifName, bool up)
+{
+	/*Todo*/
+	return ZCFG_SUCCESS;
+}
+#endif
+
+zcfgRet_t zyUtilIGetSerailNum(char *sn)
+{
+	struct mrd mrd_buff;
+
+	if(0 != read_mrd_info(&mrd_buff))
+		return -1;
+
+	strcpy(sn, mrd_buff.SerialNumber);
+
+	//printf("SerialNumber:%s\n",sn);
+
+	return ZCFG_SUCCESS;
+}
+
+zcfgRet_t zyUtilIGetBaseMAC(char *mac)
+{
+	struct mrd mrd_buff;
+
+	if(0 != read_mrd_info(&mrd_buff))
+		return -1;
+
+	sprintf(mac ,"%02X%02X%02X%02X%02X%02X",
+		mrd_buff.ETHER_ADDR[0],
+		mrd_buff.ETHER_ADDR[1],
+        	mrd_buff.ETHER_ADDR[2],
+        	mrd_buff.ETHER_ADDR[3],
+        	mrd_buff.ETHER_ADDR[4],
+        	mrd_buff.ETHER_ADDR[5]
+	);
+
+	//printf("mac:%s\n",mac);
+
+	return ZCFG_SUCCESS;
+}
+
+zcfgRet_t zyUtilIGetNumberOfMAC(int *num)
+{
+	struct mrd mrd_buff;
+
+	if(0 != read_mrd_info(&mrd_buff))
+		return -1;
+
+	if(num) *num =  mrd_buff.NumMacAddrs;
+
+	//printf("NumMacAddrs:%d\n",num);
+
+	return ZCFG_SUCCESS;
+}
+
+zcfgRet_t zyUtilIGetProductName(char *pdname)
+{
+	struct mrd mrd_buff;
+
+	if(0 != read_mrd_info(&mrd_buff))
+		return -1;
+
+	strcpy(pdname, mrd_buff.PRODUCT_NAME);
+
+	//printf("ProductName:%s\n",pdname);
+
+	return ZCFG_SUCCESS;
+}
+
+zcfgRet_t zyUtilIGetFirmwareVersion(char *fwversion)
+{
+	struct trx_header trx_header_buff;
+
+	if(0 != read_mtd_info(TCLINUX,&trx_header_buff))
+		return -1;
+
+	strcpy(fwversion, trx_header_buff.swVersionInt);
+
+	//printf("FirmwareVersion:%s\n",fwversion);
+
+	return ZCFG_SUCCESS;
+}
+
+zcfgRet_t zyUtilIGetSerialNumber(char *serianumber)
+{
+	struct mrd mrd_buff;
+
+	if(0 != read_mrd_info(&mrd_buff))
+		return -1;
+
+	strcpy(serianumber, mrd_buff.SerialNumber);
+
+	//printf("SerialNumber:%s\n",serianumber);
+
+	return ZCFG_SUCCESS;
+}
+
+zcfgRet_t zyUtilIGetGponSerialNumber(char *serianumber)
+{
+	struct mrd mrd_buff;
+
+	if(0 != read_mrd_info(&mrd_buff))
+		return -1;
+
+	memcpy(serianumber, mrd_buff.GponSerialNumber,MRD_GPON_SERIAL_NUM_LEN);
+
+	//printf("SerialNumber: %s\n",serianumber);
+
+	return ZCFG_SUCCESS;
+}
+int zyUtilGetGPIO(int gpioNum)
+{
+	/*This function is only used to check VMG3926-B10A and VMG8924-B10B, so Cross Platform is not need*/
+	return 0;
+}
+
 #endif
\ No newline at end of file
Index: libzyutil-1.0/BROADCOM/libzyutil_brcm_wrapper.h
===================================================================
--- libzyutil-1.0.orig/BROADCOM/libzyutil_brcm_wrapper.h	2015-09-19 18:17:56.291777437 +0800
+++ libzyutil-1.0/BROADCOM/libzyutil_brcm_wrapper.h	2015-09-19 18:27:56.419771679 +0800
@@ -1,18 +1,18 @@
-#ifdef BROADCOM_PLATFORM
-#include <sys/socket.h>
-#include <sys/ioctl.h>
-#include <net/if.h>
-#include <fcntl.h>
-
-#include <ctype.h>
-#include <unistd.h>
-#include "zcfg_common.h"
-#include "zcfg_debug.h"
-
-#include "bcm_hwdefs.h"
-#include "board.h"
-int boardIoctl(int board_ioctl, BOARD_IOCTL_ACTION action, char *string, int strLen, int offset, char *buf);
-int nvramDataWrite(NVRAM_DATA *nvramData);
-int nvramDataGet(NVRAM_DATA *nvramData);
-
+#ifdef BROADCOM_PLATFORM
+#include <sys/socket.h>
+#include <sys/ioctl.h>
+#include <net/if.h>
+#include <fcntl.h>
+
+#include <ctype.h>
+#include <unistd.h>
+#include "zcfg_common.h"
+#include "zcfg_debug.h"
+
+#include "bcm_hwdefs.h"
+#include "board.h"
+int boardIoctl(int board_ioctl, BOARD_IOCTL_ACTION action, char *string, int strLen, int offset, char *buf);
+int nvramDataWrite(NVRAM_DATA *nvramData);
+int nvramDataGet(NVRAM_DATA *nvramData);
+
 #endif
\ No newline at end of file
Index: libzyutil-1.0/BROADCOM/libzyutil_wrapper.c
===================================================================
--- libzyutil-1.0.orig/BROADCOM/libzyutil_wrapper.c	2015-09-19 18:17:56.319777437 +0800
+++ libzyutil-1.0/BROADCOM/libzyutil_wrapper.c	2015-09-19 18:28:05.547771591 +0800
@@ -1,264 +1,264 @@
-#ifdef BROADCOM_PLATFORM
-
-#include "libzyutil_wrapper.h"
-#include "libzyutil_brcm_wrapper.h"
-
-/*from common.c*/
-#include "board.h"
-#include "bcm_hwdefs.h"
-#include "bcmTag.h"
-
-#define BOARD_DEVICE_NAME  "/dev/brcmboard"
-
-#ifdef SUPPORT_LANVLAN
-zcfgRet_t zyUtilISetIfState(char *ifName, bool up)
-{
-	int sockfd = 0;
-	struct ifreq ifr;
-	zcfgRet_t ret = ZCFG_SUCCESS;
-
-	if(ifName == NULL) {
-        zcfgLog(ZCFG_LOG_ERR, "%s : Cannot bring up NULL interface\n", __FUNCTION__);
-		ret = ZCFG_INTERNAL_ERROR;
-	}
-	else {
-		/* Create a channel to the NET kernel. */
-		if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {
-            zcfgLog(ZCFG_LOG_ERR, "%s : Cannot create socket to the NET kernel\n", __FUNCTION__);
-			ret = ZCFG_INTERNAL_ERROR;
-		}
-		else {
-			strncpy(ifr.ifr_name, ifName, IFNAMSIZ);
-            // get interface flags
-			if(ioctl(sockfd, SIOCGIFFLAGS, &ifr) != -1) {
-				if(up)
-					ifr.ifr_flags |= IFF_UP;
-				else
-					ifr.ifr_flags &= (~IFF_UP);
-
-				if(ioctl(sockfd, SIOCSIFFLAGS, &ifr) < 0) {
-					zcfgLog(ZCFG_LOG_ERR, "%s : Cannot ioctl SIOCSIFFLAGS on the socket\n", __FUNCTION__);
-					ret = ZCFG_INTERNAL_ERROR;
-				}
-			}
-			else {
-				zcfgLog(ZCFG_LOG_ERR, "%s : Cannot ioctl SIOCGIFFLAGS on the socket\n", __FUNCTION__);
-				ret = ZCFG_INTERNAL_ERROR;
-			}
-
-			close(sockfd);
-		}
-	}
-
-	return ret;
-}
-#endif
-
-static uint32_t getCrc32(unsigned char *pdata, uint32_t size, uint32_t crc)
-{
-	while (size-- > 0)
-		crc = (crc >> 8) ^ Crc32_table[(crc ^ *pdata++) & 0xff];
-
-	return crc;
-}
-
-int nvramDataWrite(NVRAM_DATA *nvramData)
-{
-	int boardFd = 0;
-	int rc = 0;
-	unsigned int offset = 0;
-	BOARD_IOCTL_PARMS ioctlParms;
-	uint32_t crc = CRC32_INIT_VALUE;
-
-	nvramData->ulCheckSum = 0;
-	crc = getCrc32((unsigned char *)nvramData, sizeof(NVRAM_DATA), crc);
-	nvramData->ulCheckSum = crc;
-
-	boardFd = open(BOARD_DEVICE_NAME, O_RDWR);
-
-	if(boardFd != -1) {
-		ioctlParms.string = nvramData;
-		ioctlParms.strLen = sizeof(NVRAM_DATA);
-		ioctlParms.offset = offset;
-		ioctlParms.action = NVRAM;
-		ioctlParms.buf    = NULL;
-		ioctlParms.result = -1;
-
-		rc = ioctl(boardFd, BOARD_IOCTL_FLASH_WRITE, &ioctlParms);
-		close(boardFd);
-
-		if(rc < 0) {
-			printf("%s Set NVRAM Failure\n", __FUNCTION__);
-			return -1;
-		}
-	}
-	else {
-		return -1;
-	}
-
-	return 0;
-}
-
-int nvramDataGet(NVRAM_DATA *nvramData)
-{
-	int boardFd = 0;
-	int rc = 0;
-	unsigned int offset = 0;
-	BOARD_IOCTL_PARMS ioctlParms;
-
-	boardFd = open(BOARD_DEVICE_NAME, O_RDWR);
-
-	if(boardFd != -1) {
-		ioctlParms.string = nvramData;
-		ioctlParms.strLen = sizeof(NVRAM_DATA);
-		ioctlParms.offset = offset;
-		ioctlParms.action = NVRAM;
-		ioctlParms.buf    = NULL;
-		ioctlParms.result = -1;
-
-		rc = ioctl(boardFd, BOARD_IOCTL_FLASH_READ, &ioctlParms);
-		close(boardFd);
-
-		if(rc < 0) {
-			printf("%s Get NVRAM Failure\n", __FUNCTION__);
-			return -1;
-		}
-	}
-	else {
-		return -1;
-	}
-
-	return 0;
-}
-
-zcfgRet_t zyUtilIGetSerailNum(char *sn)
-{
-	NVRAM_DATA nvramData;
-
-	memset(&nvramData, 0, sizeof(NVRAM_DATA));
-
-	if(nvramDataGet(&nvramData) < 0)
-		return ZCFG_INTERNAL_ERROR;
-
-	strcpy(sn, nvramData.SerialNumber);
-	return ZCFG_SUCCESS;
-}
-
-zcfgRet_t zyUtilIGetBaseMAC(char *mac)
-{
-	NVRAM_DATA nvramData;
-
-	memset(&nvramData, 0, sizeof(NVRAM_DATA));
-
-	if(nvramDataGet(&nvramData) < 0)
-		return ZCFG_INTERNAL_ERROR;
-
-        sprintf(mac ,"%02X%02X%02X%02X%02X%02X",
-			nvramData.ucaBaseMacAddr[0],
-			nvramData.ucaBaseMacAddr[1],
-        	nvramData.ucaBaseMacAddr[2],
-        	nvramData.ucaBaseMacAddr[3],
-        	nvramData.ucaBaseMacAddr[4],
-        	nvramData.ucaBaseMacAddr[5]
-	);
-	return ZCFG_SUCCESS;
-}
-
-zcfgRet_t zyUtilIGetNumberOfMAC(int *num)
-{
-	NVRAM_DATA nvramData;
-
-	memset(&nvramData, 0, sizeof(NVRAM_DATA));
-
-	if(nvramDataGet(&nvramData) < 0)
-		return ZCFG_INTERNAL_ERROR;
-
-    if(num) *num =  nvramData.ulNumMacAddrs;
-	return ZCFG_SUCCESS;
-}
-
-zcfgRet_t zyUtilIGetProductName(char *pdname)
-{
-	if(!strcmp(ZYXEL_PRODUCT_NAME, "VMG3926-B10A") || !strcmp(ZYXEL_PRODUCT_NAME, "VMG8924-B10B")){
-		int ret = 0, gpioNum = 11;
-		ret = zyUtilGetGPIO(gpioNum);
-		if(ret){//VMG3926
-			strcpy(pdname, "VMG3926-B10A");
-		}
-		else{//VMG8924
-			strcpy(pdname, "VMG8924-B10B");
-		}
-	}
-	else{
-	NVRAM_DATA nvramData;
-
-	memset(&nvramData, 0, sizeof(NVRAM_DATA));
-
-	if(nvramDataGet(&nvramData) < 0)
-		return ZCFG_INTERNAL_ERROR;
-
-	strcpy(pdname, nvramData.ProductName);
-	}
-	return ZCFG_SUCCESS;
-}
-
-zcfgRet_t zyUtilIGetFirmwareVersion(char *fwversion)
-{
-	NVRAM_DATA nvramData;
-#ifdef ELISA_CUSTOMIZATION
-	char fwId[60] = "VMG3926-B10A_Elisa3_";
-#endif
-	memset(&nvramData, 0, sizeof(NVRAM_DATA));
-
-	if(nvramDataGet(&nvramData) < 0)
-		return ZCFG_INTERNAL_ERROR;
-#ifdef ELISA_CUSTOMIZATION
-	strcat(fwId, nvramData.FirmwareVersion);
-	strcpy(fwversion, fwId);
-#else
-	strcpy(fwversion, nvramData.FirmwareVersion);
-#endif
-	return ZCFG_SUCCESS;
-}
-
-zcfgRet_t zyUtilIGetSerialNumber(char *serianumber)
-{
-	NVRAM_DATA nvramData;
-
-	memset(&nvramData, 0, sizeof(NVRAM_DATA));
-
-	if(nvramDataGet(&nvramData) < 0)
-		return ZCFG_INTERNAL_ERROR;
-
-	strcpy(serianumber, nvramData.SerialNumber);
-	return ZCFG_SUCCESS;
-}
-
-int zyUtilGetGPIO(int gpioNum)
-{
-	int ret = 0;
-	ret = boardIoctl(BOARD_IOCTL_GET_GPIO, 0, "", gpioNum, 0, "");
-	return ret;
-}
-
-int boardIoctl(int board_ioctl, BOARD_IOCTL_ACTION action, char *string, int strLen, int offset, char *buf)
-{
-    BOARD_IOCTL_PARMS IoctlParms;
-    int boardFd = 0;
-
-    boardFd = open(BOARD_DEVICE_NAME, O_RDWR);
-    if ( boardFd != -1 ) {
-        IoctlParms.string = string;
-        IoctlParms.strLen = strLen;	// using this to identify the gpio number.
-        IoctlParms.offset = offset;
-        IoctlParms.action = action;
-        IoctlParms.buf    = buf;
-        ioctl(boardFd, board_ioctl, &IoctlParms);
-        close(boardFd);
-        boardFd = IoctlParms.result;
-    } else
-        printf("Unable to open device /dev/brcmboard.\n");
-
-    return boardFd;
-}
-#endif
+#ifdef BROADCOM_PLATFORM
+
+#include "libzyutil_wrapper.h"
+#include "libzyutil_brcm_wrapper.h"
+
+/*from common.c*/
+#include "board.h"
+#include "bcm_hwdefs.h"
+#include "bcmTag.h"
+
+#define BOARD_DEVICE_NAME  "/dev/brcmboard"
+
+#ifdef SUPPORT_LANVLAN
+zcfgRet_t zyUtilISetIfState(char *ifName, bool up)
+{
+	int sockfd = 0;
+	struct ifreq ifr;
+	zcfgRet_t ret = ZCFG_SUCCESS;
+
+	if(ifName == NULL) {
+        zcfgLog(ZCFG_LOG_ERR, "%s : Cannot bring up NULL interface\n", __FUNCTION__);
+		ret = ZCFG_INTERNAL_ERROR;
+	}
+	else {
+		/* Create a channel to the NET kernel. */
+		if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {
+            zcfgLog(ZCFG_LOG_ERR, "%s : Cannot create socket to the NET kernel\n", __FUNCTION__);
+			ret = ZCFG_INTERNAL_ERROR;
+		}
+		else {
+			strncpy(ifr.ifr_name, ifName, IFNAMSIZ);
+            // get interface flags
+			if(ioctl(sockfd, SIOCGIFFLAGS, &ifr) != -1) {
+				if(up)
+					ifr.ifr_flags |= IFF_UP;
+				else
+					ifr.ifr_flags &= (~IFF_UP);
+
+				if(ioctl(sockfd, SIOCSIFFLAGS, &ifr) < 0) {
+					zcfgLog(ZCFG_LOG_ERR, "%s : Cannot ioctl SIOCSIFFLAGS on the socket\n", __FUNCTION__);
+					ret = ZCFG_INTERNAL_ERROR;
+				}
+			}
+			else {
+				zcfgLog(ZCFG_LOG_ERR, "%s : Cannot ioctl SIOCGIFFLAGS on the socket\n", __FUNCTION__);
+				ret = ZCFG_INTERNAL_ERROR;
+			}
+
+			close(sockfd);
+		}
+	}
+
+	return ret;
+}
+#endif
+
+static uint32_t getCrc32(unsigned char *pdata, uint32_t size, uint32_t crc)
+{
+	while (size-- > 0)
+		crc = (crc >> 8) ^ Crc32_table[(crc ^ *pdata++) & 0xff];
+
+	return crc;
+}
+
+int nvramDataWrite(NVRAM_DATA *nvramData)
+{
+	int boardFd = 0;
+	int rc = 0;
+	unsigned int offset = 0;
+	BOARD_IOCTL_PARMS ioctlParms;
+	uint32_t crc = CRC32_INIT_VALUE;
+
+	nvramData->ulCheckSum = 0;
+	crc = getCrc32((unsigned char *)nvramData, sizeof(NVRAM_DATA), crc);
+	nvramData->ulCheckSum = crc;
+
+	boardFd = open(BOARD_DEVICE_NAME, O_RDWR);
+
+	if(boardFd != -1) {
+		ioctlParms.string = nvramData;
+		ioctlParms.strLen = sizeof(NVRAM_DATA);
+		ioctlParms.offset = offset;
+		ioctlParms.action = NVRAM;
+		ioctlParms.buf    = NULL;
+		ioctlParms.result = -1;
+
+		rc = ioctl(boardFd, BOARD_IOCTL_FLASH_WRITE, &ioctlParms);
+		close(boardFd);
+
+		if(rc < 0) {
+			printf("%s Set NVRAM Failure\n", __FUNCTION__);
+			return -1;
+		}
+	}
+	else {
+		return -1;
+	}
+
+	return 0;
+}
+
+int nvramDataGet(NVRAM_DATA *nvramData)
+{
+	int boardFd = 0;
+	int rc = 0;
+	unsigned int offset = 0;
+	BOARD_IOCTL_PARMS ioctlParms;
+
+	boardFd = open(BOARD_DEVICE_NAME, O_RDWR);
+
+	if(boardFd != -1) {
+		ioctlParms.string = nvramData;
+		ioctlParms.strLen = sizeof(NVRAM_DATA);
+		ioctlParms.offset = offset;
+		ioctlParms.action = NVRAM;
+		ioctlParms.buf    = NULL;
+		ioctlParms.result = -1;
+
+		rc = ioctl(boardFd, BOARD_IOCTL_FLASH_READ, &ioctlParms);
+		close(boardFd);
+
+		if(rc < 0) {
+			printf("%s Get NVRAM Failure\n", __FUNCTION__);
+			return -1;
+		}
+	}
+	else {
+		return -1;
+	}
+
+	return 0;
+}
+
+zcfgRet_t zyUtilIGetSerailNum(char *sn)
+{
+	NVRAM_DATA nvramData;
+
+	memset(&nvramData, 0, sizeof(NVRAM_DATA));
+
+	if(nvramDataGet(&nvramData) < 0)
+		return ZCFG_INTERNAL_ERROR;
+
+	strcpy(sn, nvramData.SerialNumber);
+	return ZCFG_SUCCESS;
+}
+
+zcfgRet_t zyUtilIGetBaseMAC(char *mac)
+{
+	NVRAM_DATA nvramData;
+
+	memset(&nvramData, 0, sizeof(NVRAM_DATA));
+
+	if(nvramDataGet(&nvramData) < 0)
+		return ZCFG_INTERNAL_ERROR;
+
+        sprintf(mac ,"%02X%02X%02X%02X%02X%02X",
+			nvramData.ucaBaseMacAddr[0],
+			nvramData.ucaBaseMacAddr[1],
+        	nvramData.ucaBaseMacAddr[2],
+        	nvramData.ucaBaseMacAddr[3],
+        	nvramData.ucaBaseMacAddr[4],
+        	nvramData.ucaBaseMacAddr[5]
+	);
+	return ZCFG_SUCCESS;
+}
+
+zcfgRet_t zyUtilIGetNumberOfMAC(int *num)
+{
+	NVRAM_DATA nvramData;
+
+	memset(&nvramData, 0, sizeof(NVRAM_DATA));
+
+	if(nvramDataGet(&nvramData) < 0)
+		return ZCFG_INTERNAL_ERROR;
+
+    if(num) *num =  nvramData.ulNumMacAddrs;
+	return ZCFG_SUCCESS;
+}
+
+zcfgRet_t zyUtilIGetProductName(char *pdname)
+{
+	if(!strcmp(ZYXEL_PRODUCT_NAME, "VMG3926-B10A") || !strcmp(ZYXEL_PRODUCT_NAME, "VMG8924-B10B")){
+		int ret = 0, gpioNum = 11;
+		ret = zyUtilGetGPIO(gpioNum);
+		if(ret){//VMG3926
+			strcpy(pdname, "VMG3926-B10A");
+		}
+		else{//VMG8924
+			strcpy(pdname, "VMG8924-B10B");
+		}
+	}
+	else{
+	NVRAM_DATA nvramData;
+
+	memset(&nvramData, 0, sizeof(NVRAM_DATA));
+
+	if(nvramDataGet(&nvramData) < 0)
+		return ZCFG_INTERNAL_ERROR;
+
+	strcpy(pdname, nvramData.ProductName);
+	}
+	return ZCFG_SUCCESS;
+}
+
+zcfgRet_t zyUtilIGetFirmwareVersion(char *fwversion)
+{
+	NVRAM_DATA nvramData;
+#ifdef ELISA_CUSTOMIZATION
+	char fwId[60] = "VMG3926-B10A_Elisa3_";
+#endif
+	memset(&nvramData, 0, sizeof(NVRAM_DATA));
+
+	if(nvramDataGet(&nvramData) < 0)
+		return ZCFG_INTERNAL_ERROR;
+#ifdef ELISA_CUSTOMIZATION
+	strcat(fwId, nvramData.FirmwareVersion);
+	strcpy(fwversion, fwId);
+#else
+	strcpy(fwversion, nvramData.FirmwareVersion);
+#endif
+	return ZCFG_SUCCESS;
+}
+
+zcfgRet_t zyUtilIGetSerialNumber(char *serianumber)
+{
+	NVRAM_DATA nvramData;
+
+	memset(&nvramData, 0, sizeof(NVRAM_DATA));
+
+	if(nvramDataGet(&nvramData) < 0)
+		return ZCFG_INTERNAL_ERROR;
+
+	strcpy(serianumber, nvramData.SerialNumber);
+	return ZCFG_SUCCESS;
+}
+
+int zyUtilGetGPIO(int gpioNum)
+{
+	int ret = 0;
+	ret = boardIoctl(BOARD_IOCTL_GET_GPIO, 0, "", gpioNum, 0, "");
+	return ret;
+}
+
+int boardIoctl(int board_ioctl, BOARD_IOCTL_ACTION action, char *string, int strLen, int offset, char *buf)
+{
+    BOARD_IOCTL_PARMS IoctlParms;
+    int boardFd = 0;
+
+    boardFd = open(BOARD_DEVICE_NAME, O_RDWR);
+    if ( boardFd != -1 ) {
+        IoctlParms.string = string;
+        IoctlParms.strLen = strLen;	// using this to identify the gpio number.
+        IoctlParms.offset = offset;
+        IoctlParms.action = action;
+        IoctlParms.buf    = buf;
+        ioctl(boardFd, board_ioctl, &IoctlParms);
+        close(boardFd);
+        boardFd = IoctlParms.result;
+    } else
+        printf("Unable to open device /dev/brcmboard.\n");
+
+    return boardFd;
+}
+#endif
