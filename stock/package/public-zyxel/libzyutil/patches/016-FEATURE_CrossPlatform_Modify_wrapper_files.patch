Index: libzyutil-1.0/BROADCOM/libzyutil_brcm_wrapper.h
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ libzyutil-1.0/BROADCOM/libzyutil_brcm_wrapper.h	2015-06-15 17:39:00.033232221 +0800
@@ -0,0 +1,18 @@
+#ifdef BROADCOM_PLATFORM
+#include <sys/socket.h>
+#include <sys/ioctl.h>
+#include <net/if.h>
+#include <fcntl.h>
+
+#include <ctype.h>
+#include <unistd.h>
+#include "zcfg_common.h"
+#include "zcfg_debug.h"
+
+#include "bcm_hwdefs.h"
+#include "board.h"
+int boardIoctl(int board_ioctl, BOARD_IOCTL_ACTION action, char *string, int strLen, int offset, char *buf);
+int nvramDataWrite(NVRAM_DATA *nvramData);
+int nvramDataGet(NVRAM_DATA *nvramData);
+
+#endif
\ No newline at end of file
Index: libzyutil-1.0/BROADCOM/libzyutil_wrapper.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ libzyutil-1.0/BROADCOM/libzyutil_wrapper.c	2015-06-15 17:38:35.802809896 +0800
@@ -0,0 +1,252 @@
+#ifdef BROADCOM_PLATFORM
+
+#include "libzyutil_wrapper.h"
+#include "libzyutil_brcm_wrapper.h"
+
+/*from common.c*/
+#include "board.h"
+#include "bcm_hwdefs.h"
+#include "bcmTag.h"
+
+#define BOARD_DEVICE_NAME  "/dev/brcmboard"
+
+#ifdef SUPPORT_LANVLAN
+zcfgRet_t zyUtilISetIfState(char *ifName, bool up)
+{
+	int sockfd = 0;
+	struct ifreq ifr;
+	zcfgRet_t ret = ZCFG_SUCCESS;
+
+	if(ifName == NULL) {
+        zcfgLog(ZCFG_LOG_ERR, "%s : Cannot bring up NULL interface\n", __FUNCTION__);
+		ret = ZCFG_INTERNAL_ERROR;
+	}
+	else {
+		/* Create a channel to the NET kernel. */
+		if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {
+            zcfgLog(ZCFG_LOG_ERR, "%s : Cannot create socket to the NET kernel\n", __FUNCTION__);
+			ret = ZCFG_INTERNAL_ERROR;
+		}
+		else {
+			strncpy(ifr.ifr_name, ifName, IFNAMSIZ);
+            // get interface flags
+			if(ioctl(sockfd, SIOCGIFFLAGS, &ifr) != -1) {
+				if(up)
+					ifr.ifr_flags |= IFF_UP;
+				else
+					ifr.ifr_flags &= (~IFF_UP);
+
+				if(ioctl(sockfd, SIOCSIFFLAGS, &ifr) < 0) {
+					zcfgLog(ZCFG_LOG_ERR, "%s : Cannot ioctl SIOCSIFFLAGS on the socket\n", __FUNCTION__);
+					ret = ZCFG_INTERNAL_ERROR;
+				}
+			}
+			else {
+				zcfgLog(ZCFG_LOG_ERR, "%s : Cannot ioctl SIOCGIFFLAGS on the socket\n", __FUNCTION__);
+				ret = ZCFG_INTERNAL_ERROR;
+			}
+
+			close(sockfd);
+		}
+	}
+
+	return ret;
+}
+#endif
+
+static uint32_t getCrc32(unsigned char *pdata, uint32_t size, uint32_t crc)
+{
+	while (size-- > 0)
+		crc = (crc >> 8) ^ Crc32_table[(crc ^ *pdata++) & 0xff];
+
+	return crc;
+}
+
+int nvramDataWrite(NVRAM_DATA *nvramData)
+{
+	int boardFd = 0;
+	int rc = 0;
+	unsigned int offset = 0;
+	BOARD_IOCTL_PARMS ioctlParms;
+	uint32_t crc = CRC32_INIT_VALUE;
+
+	nvramData->ulCheckSum = 0;
+	crc = getCrc32((unsigned char *)nvramData, sizeof(NVRAM_DATA), crc);
+	nvramData->ulCheckSum = crc;
+
+	boardFd = open(BOARD_DEVICE_NAME, O_RDWR);
+
+	if(boardFd != -1) {
+		ioctlParms.string = nvramData;
+		ioctlParms.strLen = sizeof(NVRAM_DATA);
+		ioctlParms.offset = offset;
+		ioctlParms.action = NVRAM;
+		ioctlParms.buf    = NULL;
+		ioctlParms.result = -1;
+
+		rc = ioctl(boardFd, BOARD_IOCTL_FLASH_WRITE, &ioctlParms);
+		close(boardFd);
+
+		if(rc < 0) {
+			printf("%s Set NVRAM Failure\n", __FUNCTION__);
+			return -1;
+		}
+	}
+	else {
+		return -1;
+	}
+
+	return 0;
+}
+
+int nvramDataGet(NVRAM_DATA *nvramData)
+{
+	int boardFd = 0;
+	int rc = 0;
+	unsigned int offset = 0;
+	BOARD_IOCTL_PARMS ioctlParms;
+
+	boardFd = open(BOARD_DEVICE_NAME, O_RDWR);
+
+	if(boardFd != -1) {
+		ioctlParms.string = nvramData;
+		ioctlParms.strLen = sizeof(NVRAM_DATA);
+		ioctlParms.offset = offset;
+		ioctlParms.action = NVRAM;
+		ioctlParms.buf    = NULL;
+		ioctlParms.result = -1;
+
+		rc = ioctl(boardFd, BOARD_IOCTL_FLASH_READ, &ioctlParms);
+		close(boardFd);
+
+		if(rc < 0) {
+			printf("%s Get NVRAM Failure\n", __FUNCTION__);
+			return -1;
+		}
+	}
+	else {
+		return -1;
+	}
+
+	return 0;
+}
+
+zcfgRet_t zyUtilIGetSerailNum(char *sn)
+{
+	NVRAM_DATA nvramData;
+
+	memset(&nvramData, 0, sizeof(NVRAM_DATA));
+
+	if(nvramDataGet(&nvramData) < 0)
+		return ZCFG_INTERNAL_ERROR;
+
+	strcpy(sn, nvramData.SerialNumber);
+	return ZCFG_SUCCESS;
+}
+
+zcfgRet_t zyUtilIGetBaseMAC(char *mac)
+{
+	NVRAM_DATA nvramData;
+
+	memset(&nvramData, 0, sizeof(NVRAM_DATA));
+
+	if(nvramDataGet(&nvramData) < 0)
+		return ZCFG_INTERNAL_ERROR;
+
+        sprintf(mac ,"%02X%02X%02X%02X%02X%02X",
+			nvramData.ucaBaseMacAddr[0],
+			nvramData.ucaBaseMacAddr[1],
+        	nvramData.ucaBaseMacAddr[2],
+        	nvramData.ucaBaseMacAddr[3],
+        	nvramData.ucaBaseMacAddr[4],
+        	nvramData.ucaBaseMacAddr[5]
+	);
+	return ZCFG_SUCCESS;
+}
+
+zcfgRet_t zyUtilIGetNumberOfMAC(int *num)
+{
+	NVRAM_DATA nvramData;
+
+	memset(&nvramData, 0, sizeof(NVRAM_DATA));
+
+	if(nvramDataGet(&nvramData) < 0)
+		return ZCFG_INTERNAL_ERROR;
+
+    if(num) *num =  nvramData.ulNumMacAddrs;
+	return ZCFG_SUCCESS;
+}
+
+zcfgRet_t zyUtilIGetProductName(char *pdname)
+{
+	NVRAM_DATA nvramData;
+
+	memset(&nvramData, 0, sizeof(NVRAM_DATA));
+
+	if(nvramDataGet(&nvramData) < 0)
+		return ZCFG_INTERNAL_ERROR;
+
+	strcpy(pdname, nvramData.ProductName);
+	return ZCFG_SUCCESS;
+}
+
+zcfgRet_t zyUtilIGetFirmwareVersion(char *fwversion)
+{
+	NVRAM_DATA nvramData;
+#ifdef ELISA_CUSTOMIZATION
+	char fwId[60] = "VMG3926-B10A_Elisa3_";
+#endif
+	memset(&nvramData, 0, sizeof(NVRAM_DATA));
+
+	if(nvramDataGet(&nvramData) < 0)
+		return ZCFG_INTERNAL_ERROR;
+#ifdef ELISA_CUSTOMIZATION
+	strcat(fwId, nvramData.FirmwareVersion);
+	strcpy(fwversion, fwId);
+#else
+	strcpy(fwversion, nvramData.FirmwareVersion);
+#endif
+	return ZCFG_SUCCESS;
+}
+
+zcfgRet_t zyUtilIGetSerialNumber(char *serianumber)
+{
+	NVRAM_DATA nvramData;
+
+	memset(&nvramData, 0, sizeof(NVRAM_DATA));
+
+	if(nvramDataGet(&nvramData) < 0)
+		return ZCFG_INTERNAL_ERROR;
+
+	strcpy(serianumber, nvramData.SerialNumber);
+	return ZCFG_SUCCESS;
+}
+
+int zyUtilGetGPIO(int gpioNum)
+{
+	int ret = 0;
+	ret = boardIoctl(BOARD_IOCTL_GET_GPIO, 0, "", gpioNum, 0, "");
+	return ret;
+}
+
+int boardIoctl(int board_ioctl, BOARD_IOCTL_ACTION action, char *string, int strLen, int offset, char *buf)
+{
+    BOARD_IOCTL_PARMS IoctlParms;
+    int boardFd = 0;
+
+    boardFd = open(BOARD_DEVICE_NAME, O_RDWR);
+    if ( boardFd != -1 ) {
+        IoctlParms.string = string;
+        IoctlParms.strLen = strLen;	// using this to identify the gpio number.
+        IoctlParms.offset = offset;
+        IoctlParms.action = action;
+        IoctlParms.buf    = buf;
+        ioctl(boardFd, board_ioctl, &IoctlParms);
+        close(boardFd);
+        boardFd = IoctlParms.result;
+    } else
+        printf("Unable to open device /dev/brcmboard.\n");
+
+    return boardFd;
+}
+#endif
Index: libzyutil-1.0/ECONET/libzyutil_econet_wrapper.h
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ libzyutil-1.0/ECONET/libzyutil_econet_wrapper.h	2015-06-15 17:31:35.486783634 +0800
@@ -0,0 +1,5 @@
+#ifdef ECONET_PLATFORM
+#include <ctype.h>
+#include <unistd.h>
+#include "zcfg_common.h"
+#endif
\ No newline at end of file
Index: libzyutil-1.0/ECONET/libzyutil_wrapper.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ libzyutil-1.0/ECONET/libzyutil_wrapper.c	2015-06-15 17:31:35.486783634 +0800
@@ -0,0 +1,48 @@
+#ifdef ECONET_PLATFORM
+
+#include "libzyutil_wrapper.h"
+#include "libzyutil_econet_wrapper.h"
+
+#ifdef SUPPORT_LANVLAN
+zcfgRet_t zyUtilISetIfState(char *ifName, bool up)
+{
+	return ZCFG_SUCCESS;
+}
+#endif
+
+zcfgRet_t zyUtilIGetSerailNum(char *sn)
+{
+	return ZCFG_SUCCESS;
+}
+
+zcfgRet_t zyUtilIGetBaseMAC(char *mac)
+{
+	return ZCFG_SUCCESS;
+}
+
+zcfgRet_t zyUtilIGetNumberOfMAC(int *num)
+{
+	return ZCFG_SUCCESS;
+}
+
+zcfgRet_t zyUtilIGetProductName(char *pdname)
+{
+	return ZCFG_SUCCESS;
+}
+
+zcfgRet_t zyUtilIGetFirmwareVersion(char *fwversion)
+{
+	return ZCFG_SUCCESS;
+}
+
+zcfgRet_t zyUtilIGetSerialNumber(char *serianumber)
+{
+	return ZCFG_SUCCESS;
+}
+
+int zyUtilGetGPIO(int gpioNum)
+{
+	return 0;
+}
+
+#endif
\ No newline at end of file
Index: libzyutil-1.0/Makefile
===================================================================
--- libzyutil-1.0.orig/Makefile	2015-06-15 17:31:35.470783634 +0800
+++ libzyutil-1.0/Makefile	2015-06-15 17:31:35.486783634 +0800
@@ -8,9 +8,10 @@
 LINK_LIBS = -ljson
 
 INC_PATH = -I$(TOOLCHAIN)/include -I. -I$(COMMON_ZCFG_INCLUDE_DIR)
+INC_PATH += -I./$(ZCFG_PLATFORM)
 
 ifeq ($(ZCFG_PLATFORM),BROADCOM)
-ZCFLAGS += -DBRCM_PLATFORM -DBCMTAG_EXE_USE
+ZCFLAGS += -DBCMTAG_EXE_USE
 
 ALLOWED_INCLUDE_PATHS += -I$(INC_BRCMDRIVER_PUB_PATH)/$(BRCM_BOARD)  \
                          -I$(INC_BRCMDRIVER_PRIV_PATH)/$(BRCM_BOARD) \
@@ -24,12 +25,9 @@
 ZCFLAGS += -DZYXEL=1 -std=gnu99
 LIB_OBJS = common.o flash.o skconn.o
 
-ifeq ($(ZCFG_PLATFORM),BROADCOM)
-LIB_OBJS += libzyutil_brcm_wrapper.o
-else ifeq ($(ZCFG_PLATFORM),ECONET)
-ZCFLAGS += -DECONET_PLATFORM
-LIB_OBJS += libzyutil_econet_wrapper.o
-endif
+PKG_NAME = libzyutil
+LIB_OBJS += $(ZCFG_PLATFORM)/$(PKG_NAME)_wrapper.o
+ZCFLAGS += -D$(ZCFG_PLATFORM)_PLATFORM
 
 .PHONY : libzyutil
 
Index: libzyutil-1.0/common.c
===================================================================
--- libzyutil-1.0.orig/common.c	2015-06-15 17:31:35.470783634 +0800
+++ libzyutil-1.0/common.c	2015-06-15 17:31:35.486783634 +0800
@@ -21,7 +21,7 @@
 #include "libzyutil_wrapper.h"
 
 #if 0	//move to libzyutil_brcm_wrapper.c
-#ifdef BRCM_PLATFORM
+#ifdef BROADCOM_PLATFORM
 #include "board.h"
 #include "bcm_hwdefs.h"
 #include "bcmTag.h"
@@ -163,6 +163,7 @@
 	system(sysCmd);
 }
 
+#if 0	//move to libzyutil_brcm_wrapper.c
 int boardIoctl(int board_ioctl, BOARD_IOCTL_ACTION action, char *string, int strLen, int offset, char *buf)
 {
     BOARD_IOCTL_PARMS IoctlParms;
@@ -190,6 +191,7 @@
 	ret = boardIoctl(BOARD_IOCTL_GET_GPIO, 0, "", gpioNum, 0, "");
 	return ret;
 }
+#endif
 
 zcfgRet_t zyUtilGetDomainNameFromUrl(char *url, char *domainName, int domainNameLength)
 {
@@ -332,7 +334,7 @@
 
 
 #if 0	//move to libzyutil_brcm_wrapper.c
-#ifdef BRCM_PLATFORM
+#ifdef BROADCOM_PLATFORM
 #ifdef SUPPORT_LANVLAN
 zcfgRet_t zyUtilISetIfState(char *ifName, bool up)
 {
@@ -384,7 +386,7 @@
 
 	return crc;
 }
-
+#if 0 //move to libzyutil_brcm_wrapper.c
 int nvramDataWrite(NVRAM_DATA *nvramData)
 {
 	int boardFd = 0;
@@ -453,7 +455,7 @@
 
 	return 0;
 }
-
+#endif
 zcfgRet_t zyUtilIGetSerailNum(char *sn)
 {
 	NVRAM_DATA nvramData;
Index: libzyutil-1.0/libzyutil_brcm_wrapper.c
===================================================================
--- libzyutil-1.0.orig/libzyutil_brcm_wrapper.c	2015-06-15 17:31:35.474783634 +0800
+++ /dev/null	1970-01-01 00:00:00.000000000 +0000
@@ -1,226 +0,0 @@
-#ifdef BRCM_PLATFORM
-
-#include "libzyutil_brcm_wrapper.h"
-
-/*from common.c*/
-#include "board.h"
-#include "bcm_hwdefs.h"
-#include "bcmTag.h"
-
-#define BOARD_DEVICE_NAME  "/dev/brcmboard"
-
-#ifdef SUPPORT_LANVLAN
-zcfgRet_t zyUtilISetIfState(char *ifName, bool up)
-{
-	int sockfd = 0;
-	struct ifreq ifr;
-	zcfgRet_t ret = ZCFG_SUCCESS;
-
-	if(ifName == NULL) {
-        zcfgLog(ZCFG_LOG_ERR, "%s : Cannot bring up NULL interface\n", __FUNCTION__);
-		ret = ZCFG_INTERNAL_ERROR;
-	}
-	else {
-		/* Create a channel to the NET kernel. */
-		if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {
-            zcfgLog(ZCFG_LOG_ERR, "%s : Cannot create socket to the NET kernel\n", __FUNCTION__);
-			ret = ZCFG_INTERNAL_ERROR;
-		}
-		else {
-			strncpy(ifr.ifr_name, ifName, IFNAMSIZ);
-            // get interface flags
-			if(ioctl(sockfd, SIOCGIFFLAGS, &ifr) != -1) {
-				if(up)
-					ifr.ifr_flags |= IFF_UP;
-				else
-					ifr.ifr_flags &= (~IFF_UP);
-
-				if(ioctl(sockfd, SIOCSIFFLAGS, &ifr) < 0) {
-					zcfgLog(ZCFG_LOG_ERR, "%s : Cannot ioctl SIOCSIFFLAGS on the socket\n", __FUNCTION__);
-					ret = ZCFG_INTERNAL_ERROR;
-				}
-			}
-			else {
-				zcfgLog(ZCFG_LOG_ERR, "%s : Cannot ioctl SIOCGIFFLAGS on the socket\n", __FUNCTION__);
-				ret = ZCFG_INTERNAL_ERROR;
-			}
-
-			close(sockfd);
-		}
-	}
-
-	return ret;
-}
-#endif
-
-static uint32_t getCrc32(unsigned char *pdata, uint32_t size, uint32_t crc)
-{
-	while (size-- > 0)
-		crc = (crc >> 8) ^ Crc32_table[(crc ^ *pdata++) & 0xff];
-
-	return crc;
-}
-
-int nvramDataWrite(NVRAM_DATA *nvramData)
-{
-	int boardFd = 0;
-	int rc = 0;
-	unsigned int offset = 0;
-	BOARD_IOCTL_PARMS ioctlParms;
-	uint32_t crc = CRC32_INIT_VALUE;
-
-	nvramData->ulCheckSum = 0;
-	crc = getCrc32((unsigned char *)nvramData, sizeof(NVRAM_DATA), crc);
-	nvramData->ulCheckSum = crc;
-
-	boardFd = open(BOARD_DEVICE_NAME, O_RDWR);
-
-	if(boardFd != -1) {
-		ioctlParms.string = nvramData;
-		ioctlParms.strLen = sizeof(NVRAM_DATA);
-		ioctlParms.offset = offset;
-		ioctlParms.action = NVRAM;
-		ioctlParms.buf    = NULL;
-		ioctlParms.result = -1;
-
-		rc = ioctl(boardFd, BOARD_IOCTL_FLASH_WRITE, &ioctlParms);
-		close(boardFd);
-
-		if(rc < 0) {
-			printf("%s Set NVRAM Failure\n", __FUNCTION__);
-			return -1;
-		}
-	}
-	else {
-		return -1;
-	}
-
-	return 0;
-}
-
-int nvramDataGet(NVRAM_DATA *nvramData)
-{
-	int boardFd = 0;
-	int rc = 0;
-	unsigned int offset = 0;
-	BOARD_IOCTL_PARMS ioctlParms;
-
-	boardFd = open(BOARD_DEVICE_NAME, O_RDWR);
-
-	if(boardFd != -1) {
-		ioctlParms.string = nvramData;
-		ioctlParms.strLen = sizeof(NVRAM_DATA);
-		ioctlParms.offset = offset;
-		ioctlParms.action = NVRAM;
-		ioctlParms.buf    = NULL;
-		ioctlParms.result = -1;
-
-		rc = ioctl(boardFd, BOARD_IOCTL_FLASH_READ, &ioctlParms);
-		close(boardFd);
-
-		if(rc < 0) {
-			printf("%s Get NVRAM Failure\n", __FUNCTION__);
-			return -1;
-		}
-	}
-	else {
-		return -1;
-	}
-
-	return 0;
-}
-
-zcfgRet_t zyUtilIGetSerailNum(char *sn)
-{
-	NVRAM_DATA nvramData;
-
-	memset(&nvramData, 0, sizeof(NVRAM_DATA));
-
-	if(nvramDataGet(&nvramData) < 0)
-		return ZCFG_INTERNAL_ERROR;
-
-	strcpy(sn, nvramData.SerialNumber);
-	return ZCFG_SUCCESS;
-}
-
-zcfgRet_t zyUtilIGetBaseMAC(char *mac)
-{
-	NVRAM_DATA nvramData;
-
-	memset(&nvramData, 0, sizeof(NVRAM_DATA));
-
-	if(nvramDataGet(&nvramData) < 0)
-		return ZCFG_INTERNAL_ERROR;
-
-        sprintf(mac ,"%02X%02X%02X%02X%02X%02X",
-			nvramData.ucaBaseMacAddr[0],
-			nvramData.ucaBaseMacAddr[1],
-        	nvramData.ucaBaseMacAddr[2],
-        	nvramData.ucaBaseMacAddr[3],
-        	nvramData.ucaBaseMacAddr[4],
-        	nvramData.ucaBaseMacAddr[5]
-	);
-	return ZCFG_SUCCESS;
-}
-
-zcfgRet_t zyUtilIGetNumberOfMAC(int *num)
-{
-	NVRAM_DATA nvramData;
-
-	memset(&nvramData, 0, sizeof(NVRAM_DATA));
-
-	if(nvramDataGet(&nvramData) < 0)
-		return ZCFG_INTERNAL_ERROR;
-
-    if(num) *num =  nvramData.ulNumMacAddrs;
-	return ZCFG_SUCCESS;
-}
-
-zcfgRet_t zyUtilIGetProductName(char *pdname)
-{
-	NVRAM_DATA nvramData;
-
-	memset(&nvramData, 0, sizeof(NVRAM_DATA));
-
-	if(nvramDataGet(&nvramData) < 0)
-		return ZCFG_INTERNAL_ERROR;
-
-	strcpy(pdname, nvramData.ProductName);
-	return ZCFG_SUCCESS;
-}
-
-zcfgRet_t zyUtilIGetFirmwareVersion(char *fwversion)
-{
-	NVRAM_DATA nvramData;
-#ifdef ELISA_CUSTOMIZATION
-	char fwId[60] = "VMG3926-B10A_Elisa3_";
-#endif
-	memset(&nvramData, 0, sizeof(NVRAM_DATA));
-
-	if(nvramDataGet(&nvramData) < 0)
-		return ZCFG_INTERNAL_ERROR;
-#ifdef ELISA_CUSTOMIZATION
-	strcat(fwId, nvramData.FirmwareVersion);
-	strcpy(fwversion, fwId);
-#else
-	strcpy(fwversion, nvramData.FirmwareVersion);
-#endif
-	return ZCFG_SUCCESS;
-}
-
-zcfgRet_t zyUtilIGetSerialNumber(char *serianumber)
-{
-	NVRAM_DATA nvramData;
-
-	memset(&nvramData, 0, sizeof(NVRAM_DATA));
-
-	if(nvramDataGet(&nvramData) < 0)
-		return ZCFG_INTERNAL_ERROR;
-
-	strcpy(serianumber, nvramData.SerialNumber);
-	return ZCFG_SUCCESS;
-}
-
-
-
-#endif
Index: libzyutil-1.0/libzyutil_brcm_wrapper.h
===================================================================
--- libzyutil-1.0.orig/libzyutil_brcm_wrapper.h	2015-06-15 17:31:35.474783634 +0800
+++ /dev/null	1970-01-01 00:00:00.000000000 +0000
@@ -1,13 +0,0 @@
-#ifdef BRCM_PLATFORM
-#include <sys/socket.h>
-#include <sys/ioctl.h>
-#include <net/if.h>
-#include <fcntl.h>
-
-#include <ctype.h>
-#include <unistd.h>
-#include "zcfg_common.h"
-#include "zcfg_debug.h"
-
-
-#endif
\ No newline at end of file
Index: libzyutil-1.0/libzyutil_econet_wrapper.c
===================================================================
--- libzyutil-1.0.orig/libzyutil_econet_wrapper.c	2015-06-15 17:31:35.474783634 +0800
+++ /dev/null	1970-01-01 00:00:00.000000000 +0000
@@ -1,41 +0,0 @@
-#if ECONET_PLATFORM
-
-#include "libzyutil_econet_wrapper.h"
-
-#ifdef SUPPORT_LANVLAN
-zcfgRet_t zyUtilISetIfState(char *ifName, bool up)
-{
-	return ZCFG_SUCCESS;
-}
-#endif
-
-zcfgRet_t zyUtilIGetSerailNum(char *sn)
-{
-	return ZCFG_SUCCESS;
-}
-
-zcfgRet_t zyUtilIGetBaseMAC(char *mac)
-{
-	return ZCFG_SUCCESS;
-}
-
-zcfgRet_t zyUtilIGetNumberOfMAC(int *num)
-{
-	return ZCFG_SUCCESS;
-}
-
-zcfgRet_t zyUtilIGetProductName(char *pdname)
-{
-	return ZCFG_SUCCESS;
-}
-
-zcfgRet_t zyUtilIGetFirmwareVersion(char *fwversion)
-{
-	return ZCFG_SUCCESS;
-}
-
-zcfgRet_t zyUtilIGetSerialNumber(char *serianumber)
-{
-	return ZCFG_SUCCESS;
-}
-#endif
\ No newline at end of file
Index: libzyutil-1.0/libzyutil_econet_wrapper.h
===================================================================
--- libzyutil-1.0.orig/libzyutil_econet_wrapper.h	2015-06-15 17:31:35.474783634 +0800
+++ /dev/null	1970-01-01 00:00:00.000000000 +0000
@@ -1,5 +0,0 @@
-#if ECONET_PLATFORM
-#include <ctype.h>
-#include <unistd.h>
-#include "zcfg_common.h"
-#endif
\ No newline at end of file
