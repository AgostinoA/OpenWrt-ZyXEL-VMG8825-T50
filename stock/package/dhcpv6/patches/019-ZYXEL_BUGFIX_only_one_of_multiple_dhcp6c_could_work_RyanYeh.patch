Index: wide-dhcpv6-20080615/dhcp6c.c
===================================================================
--- wide-dhcpv6-20080615.orig/dhcp6c.c	2019-01-17 14:04:44.597057707 +0800
+++ wide-dhcpv6-20080615/dhcp6c.c	2019-01-17 14:45:37.162370300 +0800
@@ -31,6 +31,7 @@
 #include <sys/socket.h>
 #include <sys/uio.h>
 #include <sys/queue.h>
+#include <sys/ioctl.h>
 #include <errno.h>
 #include <limits.h>
 #if TIME_WITH_SYS_TIME
@@ -133,7 +134,7 @@
 static inline int get_ifname __P((char **, int *, char *, int));
 
 static void usage __P((void));
-static void client6_init __P((void));
+static void client6_init __P((char *));
 static void client6_startall __P((int));
 static void free_resources __P((struct dhcp6_if *));
 static void client6_mainloop __P((void));
@@ -235,7 +236,11 @@
 
 	setloglevel(debug);
 
-	client6_init();
+    if(argc == 1)
+    	client6_init(argv[0]);
+    else
+        client6_init(NULL);
+
 dprintf(LOG_ERR, FNAME, "bp1 ");
 	while (argc-- > 0) { 
 		if ((ifp = ifinit(argv[0])) == NULL) {
@@ -304,11 +309,12 @@
 }
 
 void
-client6_init()
+client6_init(char *ifname)
 {
 	struct addrinfo hints, *res;
 	static struct sockaddr_in6 sa6_allagent_storage;
 	int error, on = 1;
+    struct ifreq ifr;
 
 	/* get our DUID */
 	if (get_duid(DUID_FILE, &client_duid)) {
@@ -376,6 +382,15 @@
 		exit(1);
 	}
 #endif
+    if (ifname != NULL) {
+        strncpy(ifr.ifr_ifrn.ifrn_name, ifname, IFNAMSIZ);
+        if (setsockopt(sock, SOL_SOCKET, SO_BINDTODEVICE,(char *)&ifr, sizeof(ifr)) < 0) {
+            dprintf(LOG_ERR, FNAME,
+                "setsockopt(sock, SO_BINDTODEVICE): %s",
+                strerror(errno));
+            exit(1);
+    	}
+    }
 
 	/*
 	 * According RFC3315 2.2, only the incoming port should be bound to UDP
@@ -1160,12 +1175,6 @@
 #endif
 
 /* WenHsien: to get MAC addr. */
-#include <stdio.h>    //printf
-#include <string.h>   //strncpy
-#include <sys/socket.h>
-#include <sys/ioctl.h>
-#include <net/if.h>   //ifreq
-#include <unistd.h>   //close
 unsigned char * getmacaddr(ifname, mac)
     unsigned char *ifname;
     unsigned char *mac;
