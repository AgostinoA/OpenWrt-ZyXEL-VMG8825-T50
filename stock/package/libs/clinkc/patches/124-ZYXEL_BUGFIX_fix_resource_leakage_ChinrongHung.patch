diff -urN clinkc.org/src/cybergarage/http/chttp_authentication.c clinkc/src/cybergarage/http/chttp_authentication.c
--- clinkc.org/src/cybergarage/http/chttp_authentication.c	2019-05-08 10:45:51.947220800 +0800
+++ clinkc/src/cybergarage/http/chttp_authentication.c	2019-05-21 14:20:45.746561194 +0800
@@ -25,6 +25,7 @@
 #include <cybergarage/http/cmd5.h>
 #include <sys/time.h>
 #include <string.h>
+#include <zos_api.h>
 
 int nc = 0;
 CgHttpAuth *digestHead = NULL;
@@ -47,7 +48,7 @@
 		else
 			digestHead = delEntry->next;
 
-		free(delEntry);
+		ZOS_FREE(delEntry);
 		return TRUE;
 	}
 
@@ -57,11 +58,11 @@
 			if(delEntry == digestTail){
 				now->next = NULL;
 				digestTail = now;
-				free(delEntry);
+				ZOS_FREE(delEntry);
 				return TRUE;
 			}else{	//delete middle entry
 				now->next = delEntry->next;
-				free(delEntry);
+				ZOS_FREE(delEntry);
 				return TRUE;
 			}
 		}
@@ -84,7 +85,7 @@
 			newEntry->next = digestHead->next;
 
 		digestHead = newEntry;
-		free(oldEntry);
+		ZOS_FREE(oldEntry);
 		return TRUE;
 	}
 
@@ -94,12 +95,12 @@
 			if(oldEntry == digestTail){
 				now->next = newEntry;
 				digestTail = newEntry;
-				free(oldEntry);
+				ZOS_FREE(oldEntry);
 				return TRUE;
 			}else{	//delete middle entry
 				newEntry->next = oldEntry->next;
 				now->next = newEntry;
-				free(oldEntry);
+				ZOS_FREE(oldEntry);
 				return TRUE;
 			}
 		}
@@ -128,7 +129,7 @@
 		printf("error: base64 encode fail\n");
 
 	/*clean up*/
-	free(base64Encode);
+	ZOS_FREE(base64Encode);
 
 	return basicHeader;
 }
@@ -151,13 +152,15 @@
 	}
 
 	digestHeader = (char *)malloc(DIGEST_SIZE*sizeof(char));
+	if(digestHeader == NULL)
+		return NULL;
 	memset(digestHeader, '\0', DIGEST_SIZE*sizeof(char));
 	nonce				= cg_http_response_getnonce(httpRes);
 	if( nonce != NULL)
 		strcpy(auth->nonce, nonce);
 	else{
 		printf("error: can not get nonce");
-		free(digestHeader);
+		ZOS_FREE(digestHeader);
 		return NULL;
 	}
 
@@ -224,7 +227,7 @@
 	if (!(auth->qop)) {
 		if((auth->algorithm)&&(strcmp(auth->algorithm, "MD5") != 0)){
 			auth->result = AUTH_UNSUPPORT_ALGORITHM;
-			free(digestHeader);
+			ZOS_FREE(digestHeader);
 			return NULL;
 		}
 		memset(md5Input, '\0', sizeof(md5Input));
@@ -252,7 +255,7 @@
 	else{
 		if((auth->algorithm)&&(strcmp(auth->algorithm, "MD5") != 0)&&(strcmp(auth->algorithm,"MD5-sess") != 0)){
 			auth->result = AUTH_UNSUPPORT_ALGORITHM;
-			free(digestHeader);
+			ZOS_FREE(digestHeader);
 			return NULL;
 		}
 
@@ -405,7 +408,7 @@
 			printf("error: http response fail\n");
 
 		/*clean up*/
-		free(basicHeader);
+		ZOS_FREE(basicHeader);
 
 		auth = &httpRes->authData;
 
@@ -438,7 +441,7 @@
 		if(httpRes == NULL)
 			printf("error: http response fail\n");
 
-		free(digestHeader);
+		ZOS_FREE(digestHeader);
 
 		auth = &httpRes->authData;
 
@@ -595,7 +598,10 @@
 *****************************************************************************/
 void initDigestInfo(CgHttpAuth **digest)
 {
-	*digest = (CgHttpAuth *)malloc(sizeof(CgHttpAuth));
+	if((*digest = (CgHttpAuth *)malloc(sizeof(CgHttpAuth))) == NULL){
+		printf("malloc failed, return!\n");
+		return;
+	}
 	memset(*digest, '\0', sizeof(CgHttpAuth));
 	(*digest)->realm 		= NULL;
 	(*digest)->algorithm 	= NULL;
@@ -701,7 +707,7 @@
 		*	1. first request
 		*	2. client got Amnesia
 		*/
-		free(auth);
+		ZOS_FREE(auth);
 		return HTTP_AUTH_NOT_EXIST;
 	}
 
@@ -712,7 +718,7 @@
 		auth->realm			= cg_http_request_getrealm(httpReq);
 		if(!auth->realm){
 			printf("error: can not get realm");
-			free(auth);
+			ZOS_FREE(auth);
 			return HTTP_AUTH_ERROR;
 		}
 
@@ -720,26 +726,26 @@
 		strcpy(auth->nonce, tmp);
 		if(!auth->nonce){
 			printf("error: can not get nonce");
-			free(auth);
+			ZOS_FREE(auth);
 			return HTTP_AUTH_ERROR;
 		}
 
 		auth->response		= cg_http_request_getresponse(httpReq);
 		if(!auth->response){
 			printf("error: can not get response");
-			free(auth);
+			ZOS_FREE(auth);
 			return HTTP_AUTH_ERROR;
 		}
 
 		auth->username		= cg_http_request_getusername(httpReq);
 		if(!auth->username){
 			printf("error: can not get username");
-			free(auth);
+			ZOS_FREE(auth);
 			return HTTP_AUTH_INVALID_USERNAME;
 		}
 
 		if(strcmp(user, auth->username)){
-			free(auth);
+			ZOS_FREE(auth);
 			return HTTP_AUTH_INVALID_USERNAME;
 		}
 
@@ -751,7 +757,7 @@
 				found = TRUE;
 
 				if(strcmp(now->realm, auth->realm)){
-					free(auth);
+					ZOS_FREE(auth);
 					cg_http_server_unlock(httpServer);
 					return HTTP_AUTH_NOT_EXIST;
 				}
@@ -765,7 +771,7 @@
 		}
 
 		if(!found){
-			free(auth);
+			ZOS_FREE(auth);
 			cg_http_server_unlock(httpServer);
 			return HTTP_AUTH_NOT_EXIST;
 		}
@@ -779,7 +785,7 @@
 			else{
 				auth->qop		= tmp;
 				if(strcmp(auth->qop, now->qop)){
-					free(auth);
+					ZOS_FREE(auth);
 					cg_http_server_unlock(httpServer);
 					return HTTP_AUTH_NOT_EXIST;
 				}
@@ -795,7 +801,7 @@
 			else{
 				auth->algorithm	= tmp;
 				if(strcmp(auth->algorithm, now->algorithm)){
-					free(auth);
+					ZOS_FREE(auth);
 					cg_http_server_unlock(httpServer);
 					return HTTP_AUTH_NOT_EXIST;
 				}
@@ -807,14 +813,14 @@
 			if(!tmp){
 				auth->opaque	= NULL;
 				printf("error: can not get opaque");
-				free(auth);
+				ZOS_FREE(auth);
 				cg_http_server_unlock(httpServer);
 				return HTTP_AUTH_ERROR;
 			}
 			else{
 				auth->opaque	= tmp;
 				if(strcmp(auth->opaque, now->opaque)){
-					free(auth);
+					ZOS_FREE(auth);
 					cg_http_server_unlock(httpServer);
 					return HTTP_AUTH_NOT_EXIST;
 				}
@@ -876,7 +882,7 @@
 		if (!(auth->qop)) {
 			if((auth->algorithm)&&(strcmp(auth->algorithm, "MD5") != 0)){
 				auth->result = AUTH_UNSUPPORT_ALGORITHM;
-				free(auth);
+				ZOS_FREE(auth);
 				cg_http_server_unlock(httpServer);
 				return HTTP_AUTH_NOT_EXIST;
 			}
@@ -886,7 +892,7 @@
 		else{
 			if((auth->algorithm)&&(strcmp(auth->algorithm, "MD5") != 0)&&(strcmp(auth->algorithm,"MD5-sess") != 0)){
 				auth->result = AUTH_UNSUPPORT_ALGORITHM;
-				free(auth);
+				ZOS_FREE(auth);
 				cg_http_server_unlock(httpServer);
 				return HTTP_AUTH_NOT_EXIST;
 			}
@@ -915,12 +921,12 @@
 		}
 
 		if(!strcmp(digest, auth->response)){
-			free(auth);
+			ZOS_FREE(auth);
 			cg_http_server_unlock(httpServer);
 			return HTTP_AUTH_SUCCESS;
 		}
 		else{
-			free(auth);
+			ZOS_FREE(auth);
 			cg_http_server_unlock(httpServer);
 			return HTTP_AUTH_INVALID_PASSWORD;
 		}
@@ -928,11 +934,11 @@
 	}
 	else{
 		printf("invalid authenticcation method\n");
-		free(auth);
+		ZOS_FREE(auth);
 		return HTTP_AUTH_NOT_EXIST;
 	}
 
-	free(auth);
+	ZOS_FREE(auth);
 	return HTTP_AUTH_NOT_EXIST;
 }
 
@@ -980,11 +986,12 @@
 			passphrase = cg_http_request_getresponse(httpReq);
 			base64Encode = cg_http_base64encode(user, passwd);
 			if(strcmp(base64Encode, passphrase) == 0){
-				free(base64Encode);
+				ZOS_FREE(base64Encode);
 				return HTTP_AUTH_SUCCESS;
 			}
-			else
-				free(base64Encode);
+			else{
+				ZOS_FREE(base64Encode);
+			}
 		}
 		else{
 			printf("invalid authenticcation method\n");
@@ -1006,6 +1013,7 @@
 			/*the authentication cookie should be "Authentication=XXX", XXX means passphrase */
 			strcpy(cookie, cg_http_request_getcookie(httpReq));
 			if((ptr = strstr(cookie, "Authentication")) == NULL){
+				ZOS_FREE(cookie);
 				return HTTP_AUTH_ERROR;
 			}
 			tmpPassphrase = ptr + strlen("Authentication=");
@@ -1014,32 +1022,36 @@
 				base64EncodeStr = cg_http_url_decode(passphrase);
 				decodePhrase = cg_http_base64decode(base64EncodeStr);
 				tmpPtr = strstr(decodePhrase, ":");
-				if(!strcmp(decodePhrase, ":"))
+				if(!strcmp(decodePhrase, ":")){
+					ZOS_FREE(base64EncodeStr);
+					ZOS_FREE(decodePhrase);
+					ZOS_FREE(cookie);
 					return HTTP_AUTH_NOT_EXIST;
+				}
 				decodeUser = strtok(decodePhrase, ":");
 				decodePasswd = decodePhrase + strlen(decodeUser)+1;	
 				//decodePasswd = strtok(NULL, " ");
 				if(tmpPtr == decodePhrase || decodeUser == NULL || strcmp(decodeUser, user) != 0){
-					free(base64EncodeStr);
-					free(decodePhrase);
-					free(cookie);
+					ZOS_FREE(base64EncodeStr);
+					ZOS_FREE(decodePhrase);
+					ZOS_FREE(cookie);
 					return HTTP_AUTH_INVALID_USERNAME;
 				}
 				else if(decodePasswd != NULL && !strcmp(decodePasswd, passwd) && !strcmp(decodeUser,user)){
-					free(base64EncodeStr);
-					free(decodePhrase);
-					free(cookie);
+					ZOS_FREE(base64EncodeStr);
+					ZOS_FREE(decodePhrase);
+					ZOS_FREE(cookie);
 					return HTTP_AUTH_SUCCESS;
 				}
 				else{
-					free(base64EncodeStr);
-					free(decodePhrase);
-					free(cookie);
+					ZOS_FREE(base64EncodeStr);
+					ZOS_FREE(decodePhrase);
+					ZOS_FREE(cookie);
 					return HTTP_AUTH_INVALID_PASSWORD;
 				}
 			}
 
-			free(cookie);
+			ZOS_FREE(cookie);
 		}
 	}
 
@@ -1084,6 +1096,7 @@
 	dest = (char*)malloc(destLen);
 	if (dest == NULL){
 		printf("error: out of memory,%s,%d\n",__FUNCTION__,__LINE__);
+		ZOS_FREE(srcBuf);
 		return NULL;
 		}
 	memset( dest, 0, destLen);
@@ -1111,11 +1124,13 @@
 	snprintf(destBuf, destLen+1, "%.*s",(int)destLen+1, dest);
 	if(destBuf == NULL){
 		printf("error: base 64 encode fail\n");
+		ZOS_FREE(srcBuf);
+		ZOS_FREE(dest);
 		return NULL;
 	}
 	/*clean up*/
- 	free(srcBuf);
-	free(dest);
+ 	ZOS_FREE(srcBuf);
+ 	ZOS_FREE(dest);
 	return destBuf;
 }
 
diff -urN clinkc.org/src/cybergarage/http/chttp_server_list.c clinkc/src/cybergarage/http/chttp_server_list.c
--- clinkc.org/src/cybergarage/http/chttp_server_list.c	2019-05-08 10:45:52.079220800 +0800
+++ clinkc/src/cybergarage/http/chttp_server_list.c	2019-05-21 15:41:31.319583467 +0800
@@ -23,6 +23,7 @@
 #include <cybergarage/http/chttp.h>
 #include <cybergarage/net/cinterface.h>
 #include <cybergarage/util/clog.h>
+#include <zos_api.h>
 
 /****************************************
 * cg_http_serverlist_new
@@ -64,7 +65,7 @@
 	cg_log_debug_l4("Entering...\n");
 
 	cg_http_serverlist_clear(httpServerList);
-	free(httpServerList);
+	ZOS_FREE(httpServerList);
 
 	cg_log_debug_l4("Leaving...\n");
 }
diff -urN clinkc.org/src/cybergarage/io/cfile.c clinkc/src/cybergarage/io/cfile.c
--- clinkc.org/src/cybergarage/io/cfile.c	2019-05-08 10:45:51.719220800 +0800
+++ clinkc/src/cybergarage/io/cfile.c	2019-05-21 15:45:32.011160679 +0800
@@ -79,6 +79,8 @@
 #include <fcntl.h>
 #endif
 
+#include <zos_api.h>
+
 /****************************************
 * cg_file_new
 ****************************************/
@@ -120,16 +122,19 @@
 
 	cg_list_remove((CgList *)file);
 #ifdef ZYXEL_PATCH
-	if(file->fp) fclose(file->fp);
+	if(file->fp) {
+		fclose(file->fp);
+		file->fp = NULL;
+	}
 	cg_string_delete(file->val_name);
 	cg_string_delete(file->contentType);
 	cg_string_delete(file->file_name);
 #endif
 	cg_string_delete(file->name);
 	cg_string_delete(file->path);
-	if (file->content != NULL)
-		free(file->content);
-	free(file);
+	
+	ZOS_FREE(file->content);
+	ZOS_FREE(file);
 
 	cg_log_debug_l4("Leaving...\n");
 }
@@ -323,6 +328,7 @@
 	if (fp == NULL)
 		return FALSE;
 	fclose(fp);
+	fp = NULL;
 	return TRUE;
 #else
 	fd = open(fileName, O_RDONLY);
@@ -373,10 +379,8 @@
 {
 	cg_log_debug_l4("Entering...\n");
 
-	if (file->content != NULL) {
-		free(file->content);
-		file->content = NULL;
-	}
+	ZOS_FREE(file->content);
+	
 	file->content = cg_strdup(content);
 
 	cg_log_debug_l4("Leaving...\n");
@@ -484,10 +488,7 @@
 	if ( NULL == file )
 		return FALSE;
 	
-	if (file->content != NULL) {
-		free(file->content);
-		file->content = NULL;
-	}
+	ZOS_FREE(file->content);
 	
 	fileLen = cg_file_getlength(file);
 	if (fileLen <= 0)
@@ -516,6 +517,7 @@
 		readCnt += nRead;
 	} while (0 < nRead);
 	fclose(fp);
+	fp = NULL;
 #else
 	fd = open(fileName, O_RDONLY);
 	if (fd == -1) {
@@ -583,6 +585,7 @@
 		nWrite = fwrite((file->content)+writeCnt, sizeof(char), contentLen-writeCnt, fp);
 	}
 	fclose(fp);
+	fp = NULL;
 #else
 	fd = open(fileName, O_WRONLY);
 	if (fd == -1)
@@ -677,7 +680,7 @@
 
 				cg_filelist_add(fileList, childFile);
 
-				free(fileName);
+				ZOS_FREE(fileName);
 				cg_string_delete(fullPathStr);
 				
 #if defined(WIN32)
@@ -688,9 +691,9 @@
 	cg_string_delete(findDirStr);
 #else
 			}
-			free(dirFileList[n]);
+			ZOS_FREE(dirFileList[n]);
 		}
-		free(dirFileList);
+		ZOS_FREE(dirFileList);
 	}
 #endif
 
diff -urN clinkc.org/src/cybergarage/upnp/ssdp/cssdp_packet.c clinkc/src/cybergarage/upnp/ssdp/cssdp_packet.c
--- clinkc.org/src/cybergarage/upnp/ssdp/cssdp_packet.c	2011-02-08 01:29:11.000000000 +0800
+++ clinkc/src/cybergarage/upnp/ssdp/cssdp_packet.c	2019-05-21 16:11:22.041747875 +0800
@@ -25,6 +25,7 @@
 #include <cybergarage/upnp/control/ccontrol.h>
 #include <cybergarage/util/cstring.h>
 #include <cybergarage/util/clog.h>
+#include <zos_api.h>
 
 /****************************************
 * cg_upnp_ssdp_packet_new
@@ -68,10 +69,9 @@
 	cg_socket_datagram_packet_delete(ssdpPkt->dgmPkt);
 	cg_http_headerlist_delete(ssdpPkt->headerList);
 
-	free(ssdpPkt->timestamps);
+	ZOS_FREE(ssdpPkt->timestamps);
+	ZOS_FREE(ssdpPkt);
 	
-	free(ssdpPkt);
-
 	cg_log_debug_l4("Leaving...\n");
 }
 
diff -urN clinkc.org/src/cybergarage/util/cstring.c clinkc/src/cybergarage/util/cstring.c
--- clinkc.org/src/cybergarage/util/cstring.c	2019-05-08 10:45:52.043220800 +0800
+++ clinkc/src/cybergarage/util/cstring.c	2019-05-21 16:24:07.974864270 +0800
@@ -27,6 +27,7 @@
 #include <cybergarage/util/clog.h>
 
 #include <string.h>
+#include <zos_api.h>
 
 /* Define amount of extra characters allocated on each realloc, with this we
    can avoid many small subsequent reallocs, which takes lots of time */
@@ -65,7 +66,7 @@
 
 	if (NULL != str) {
 		cg_string_clear(str);
-		free(str);
+		ZOS_FREE(str);
 	}
 	
 	cg_log_debug_l5("Leaving...\n");
@@ -81,8 +82,7 @@
 	
 	if (NULL != str) {
 		if (str->value != NULL) {
-			free(str->value);
-			str->value = NULL;
+			ZOS_FREE(str->value);
 			str->memSize = 0;
 			str->valueSize = 0;
 		}
@@ -380,6 +380,7 @@
 	if ( NULL == fromStrLen )
 	{
 		cg_log_debug_s("Memory allocation failure!\n");
+		cg_string_delete(repValue);
 		return NULL;
 	}
 	
@@ -406,7 +407,7 @@
 		copyPos++;
 	}
 	
-	free(fromStrLen);
+	ZOS_FREE(fromStrLen);
 
 	cg_string_setvalue(str, cg_string_getvalue(repValue));	
 
