Index: diskdev_cmds-332.25/fsck_hfs.tproj/cache.c
===================================================================
--- diskdev_cmds-332.25.orig/fsck_hfs.tproj/cache.c	2019-02-18 14:08:51.864882668 +0800
+++ diskdev_cmds-332.25/fsck_hfs.tproj/cache.c	2019-02-18 14:07:41.366866600 +0800
@@ -203,12 +203,32 @@
 	cache->BlockSize = cacheBlockSize;
 
 	/* Allocate the cache memory */
-	cache->FreeHead = mmap (NULL,
-	                        cacheTotalBlocks * cacheBlockSize,
-	                        PROT_READ | PROT_WRITE,
-	                        MAP_ANON | MAP_PRIVATE,
-	                        -1,
-	                        0);
+	/* Break out of the loop on success, or when the proposed cache is < MinCacheSize */
+	while (1) {
+		cache->FreeHead = mmap (NULL,
+	                        	cacheTotalBlocks * cacheBlockSize,
+	                        	PROT_READ | PROT_WRITE,
+	                        	MAP_ANON | MAP_PRIVATE,
+	                        	-1,
+	                        	0);
+		if (cache->FreeHead == (void *)-1) {
+			if ((cacheTotalBlocks * cacheBlockSize) <= MinCacheSize) {
+				printf("\tTried to allocate %dK, minimum is %dK\n",
+					(cacheTotalBlocks * cacheBlockSize) / 1024,
+					MinCacheSize / 1024);
+				break;
+			}
+			printf("\tFailed to allocate %uK for cache; trying %uK\n",
+				(cacheTotalBlocks * cacheBlockSize) / 1024,
+				(cacheTotalBlocks * cacheBlockSize / 2) / 1024);
+			CalculateCacheSize((cacheTotalBlocks * cacheBlockSize) / 2, &cacheBlockSize, &cacheTotalBlocks, 1);
+			continue;
+		} else {
+			printf ("\tUsing cacheBlockSize=%uK cacheTotalBlock=%u cacheSize=%uK.\n", cacheBlockSize/1024, cacheTotalBlocks, (cacheBlockSize/1024) * cacheTotalBlocks);
+			break;
+		}
+	}
+
 	if (cache->FreeHead == (void *)-1) return (ENOMEM);
 
 	/* Initialize the cache memory free list */
