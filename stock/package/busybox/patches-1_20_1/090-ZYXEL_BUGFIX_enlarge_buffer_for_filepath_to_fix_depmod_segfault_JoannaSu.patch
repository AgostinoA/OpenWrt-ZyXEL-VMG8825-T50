Index: busybox-1_20_1/modutils/depmod.c
===================================================================
--- busybox-1_20_1.orig/modutils/depmod.c	2018-04-20 16:05:50.746735827 +0800
+++ busybox-1_20_1/modutils/depmod.c	2018-04-20 16:18:42.113057100 +0800
@@ -14,6 +14,13 @@
 #include "modutils.h"
 #include <sys/utsname.h> /* uname() */

+#if 1 /* <JoannaSu>, <20180420>, <modify buffer for filepath to avoid segfault> */
+#include "zos_api.h"
+#include "zlog_api.h"
+#define   ZYXEL_TMP_BASE_PATH "/var/"
+#endif /* <JoannaSu>, <20180420>, <modify buffer for filepath to avoid segfault> */
+
+
 /*
  * Theory of operation:
  * - iterate over all modules and record their full path
@@ -123,10 +130,33 @@
 static void xfreopen_write(const char *file, FILE *f)
 {
 #if 1 //due to depmod can't generate file at read-only file system, so modify the path that generate file
-	char modulePath[16] = "/var/";
+    #if 1 /* <JoannaSu>, <20180420>, <modify buffer for filepath to avoid segfault> */
+    char *modulePath = NULL;
+
+    modulePath = ZOS_MALLOC(strlen(ZYXEL_TMP_BASE_PATH) + strlen(file) + 1);
+
+    if (modulePath != NULL)
+    {
+        strcpy(modulePath, ZYXEL_TMP_BASE_PATH);
+        strcat(modulePath, file);
+        if (freopen(modulePath, "w", f) == NULL)
+        {
+		    bb_perror_msg_and_die("can't open '%s'", modulePath);
+        }
+
+        ZOS_FREE(modulePath);
+    }
+    else
+    {
+        ZLOG_ERROR("Fail to write to %s%s", ZYXEL_TMP_BASE_PATH, file);
+    }
+    #else
+    char modulePath[16] = "/var/";
 	strcat(modulePath, file);
 	if (freopen(modulePath, "w", f) == NULL)
-		bb_perror_msg_and_die("can't open '%s'", modulePath);
+        bb_perror_msg_and_die("can't open '%s'", modulePath);
+
+    #endif /* <JoannaSu>, <20180420>, <modify buffer for filepath to avoid segfault> */
 #else
 	if (freopen(file, "w", f) == NULL)
 		bb_perror_msg_and_die("can't open '%s'", file);
