diff -Naur ppp-2.4.3.orig/pppd/ipcp.c ppp-2.4.3/pppd/ipcp.c
--- ppp-2.4.3.orig/pppd/ipcp.c	2014-10-06 18:42:31.211302900 +0800
+++ ppp-2.4.3/pppd/ipcp.c	2014-10-07 09:16:10.611931100 +0800
@@ -1703,13 +1703,13 @@
 
     notice("local  IP address %I", wo->ouraddr);
     notice("remote IP address %I", wo->hisaddr);
-
 #if 1 /* ZyXEL, zcfg */	
     ppp_arg = json_object_new_object();
     json_object_object_add(ppp_arg, "ip", json_object_new_string(ip_ntoa(wo->ouraddr)));
     json_object_object_add(ppp_arg, "remote", json_object_new_string(""));
     json_object_object_add(ppp_arg, "dns", json_object_new_string(ip_ntoa(wo->hisaddr)));
     json_object_object_add(ppp_arg, "linkname", json_object_new_string(linkname));
+    json_object_object_add(ppp_arg, "type", json_object_new_string("ipv4"));
     json_object_object_add(ppp_arg, "state", json_object_new_string("up"));
 
     notice("Json PPP %s", json_object_to_json_string(ppp_arg));
@@ -1946,6 +1946,7 @@
     json_object_object_add(ppp_arg, "remote", json_object_new_string(ip_ntoa(ho->hisaddr)));
     json_object_object_add(ppp_arg, "dns", json_object_new_string(dnsList));
     json_object_object_add(ppp_arg, "linkname", json_object_new_string(linkname));
+    json_object_object_add(ppp_arg, "type", json_object_new_string("ipv4"));
     json_object_object_add(ppp_arg, "state", json_object_new_string("up"));
 
     notice("Json PPP %s", json_object_to_json_string(ppp_arg));
@@ -1999,6 +2000,7 @@
 	ppp_arg = json_object_new_object();
     json_object_object_add(ppp_arg, "ip", json_object_new_string(ip_ntoa(ipcp_gotoptions[f->unit].ouraddr)));
     json_object_object_add(ppp_arg, "linkname", json_object_new_string(linkname));
+    json_object_object_add(ppp_arg, "type", json_object_new_string("ipv4"));
     json_object_object_add(ppp_arg, "state", json_object_new_string("down"));
 
     notice("Json PPP %s", json_object_to_json_string(ppp_arg));
diff -Naur ppp-2.4.3.orig/pppd/ipv6cp.c ppp-2.4.3/pppd/ipv6cp.c
--- ppp-2.4.3.orig/pppd/ipv6cp.c	2014-10-06 18:42:31.183302900 +0800
+++ ppp-2.4.3/pppd/ipv6cp.c	2014-10-07 09:15:12.500704100 +0800
@@ -167,6 +167,15 @@
 #include "magic.h"
 #include "pathnames.h"
 
+#if 1 /* ZyXEL zcfg */
+#include "zcfg_common.h"
+#include "zcfg_fe_rdm_access.h"
+#include "zcfg_msg.h"
+#include "zcfg_net.h"
+
+#include <json/json.h>
+#endif
+
 static const char rcsid[] = RCSID;
 
 /* global vars */
@@ -316,6 +325,10 @@
 } ipv6cp_script_state;
 static pid_t ipv6cp_script_pid;
 
+#if 1 /* ZyXEL zcfg */
+extern zcfgRet_t pppdMsgSend(uint32_t, zcfgEid_t, int, const char *);
+#endif
+
 /*
  * setifaceid - set the interface identifiers manually
  */
@@ -1134,7 +1147,11 @@
     int u;
 {
     ipv6cp_options *wo = &ipv6cp_wantoptions[u];
-
+#if 1 /* ZyXEL zcfg */
+    struct json_object *ppp_arg = NULL;
+    const char *payload = NULL;
+    int payloadLen = 0;	
+#endif
 #if defined(__linux__) || defined(SOL2) || (defined(SVR4) && (defined(SNI) || defined(__USLC__)))
 #if defined(SOL2)
     if (!sif6up(u))
@@ -1157,6 +1174,21 @@
     notice("local  LL address %s", llv6_ntoa(wo->ourid));
     notice("remote LL address %s", llv6_ntoa(wo->hisid));
 
+#if 1 /* ZyXEL zcfg */
+    ppp_arg = json_object_new_object();
+    json_object_object_add(ppp_arg, "local", json_object_new_string(llv6_ntoa(wo->ourid)));
+    json_object_object_add(ppp_arg, "remote", json_object_new_string(llv6_ntoa(wo->hisid)));
+    json_object_object_add(ppp_arg, "linkname", json_object_new_string(linkname));
+    json_object_object_add(ppp_arg, "type", json_object_new_string("ipv6"));
+    json_object_object_add(ppp_arg, "state", json_object_new_string("up"));
+
+    notice("Json PPP %s", json_object_to_json_string(ppp_arg));
+    payload = json_object_to_json_string(ppp_arg);
+    payloadLen = strlen(payload) + 1;
+    pppdMsgSend(ZCFG_MSG_PPPD_EVENT , ZCFG_EID_ESMD, payloadLen, payload);
+
+    json_object_put(ppp_arg);
+#endif
     return 1;
 }
 
@@ -1173,7 +1205,12 @@
     ipv6cp_options *ho = &ipv6cp_hisoptions[f->unit];
     ipv6cp_options *go = &ipv6cp_gotoptions[f->unit];
     ipv6cp_options *wo = &ipv6cp_wantoptions[f->unit];
-
+#if 1 /* ZyXEL zcfg */	
+    struct json_object *ppp_arg = NULL;
+    char dnsList[IPADDR_LENGTH*2 + 8] = {0};
+    const char *payload = NULL;
+    int payloadLen = 0;
+#endif
     IPV6CPDEBUG(("ipv6cp: up"));
 
     /*
@@ -1290,6 +1327,21 @@
 	ipv6cp_script_state = s_up;
 	ipv6cp_script(_PATH_IPV6UP);
     }
+#if 1 /* ZyXEL zcfg */
+    ppp_arg = json_object_new_object();
+    json_object_object_add(ppp_arg, "local", json_object_new_string(llv6_ntoa(wo->ourid)));
+    json_object_object_add(ppp_arg, "remote", json_object_new_string(llv6_ntoa(wo->hisid)));
+    json_object_object_add(ppp_arg, "linkname", json_object_new_string(linkname));
+    json_object_object_add(ppp_arg, "type", json_object_new_string("ipv6"));
+    json_object_object_add(ppp_arg, "state", json_object_new_string("up"));
+
+    notice("Json PPP %s", json_object_to_json_string(ppp_arg));
+    payload = json_object_to_json_string(ppp_arg);
+    payloadLen = strlen(payload) + 1;
+    pppdMsgSend(ZCFG_MSG_PPPD_EVENT , ZCFG_EID_ESMD, payloadLen, payload);
+
+    json_object_put(ppp_arg);
+#endif
 }
 
 
@@ -1317,6 +1369,24 @@
      * If we are doing dial-on-demand, set the interface
      * to queue up outgoing packets (for now).
      */
+#if 1   /* send ZCFG_MSG_WAN_CONNECTION_LOST to ESMD for notification, ZyXEL, John  */
+    struct json_object *ppp_arg = NULL;
+    const char *payload = NULL;
+    int payloadLen = 0;
+
+    ppp_arg = json_object_new_object();
+    json_object_object_add(ppp_arg, "local", json_object_new_string(llv6_ntoa(ipv6cp_gotoptions[f->unit].ourid)));
+    json_object_object_add(ppp_arg, "linkname", json_object_new_string(linkname));
+    json_object_object_add(ppp_arg, "type", json_object_new_string("ipv6"));
+    json_object_object_add(ppp_arg, "state", json_object_new_string("down"));
+
+    notice("Json PPP %s", json_object_to_json_string(ppp_arg));
+    payload = json_object_to_json_string(ppp_arg);
+    payloadLen = strlen(payload) + 1;
+    pppdMsgSend(ZCFG_MSG_PPPD_EVENT , ZCFG_EID_ESMD, payloadLen, payload);
+
+    json_object_put(ppp_arg);
+#endif
     if (demand) {
 	sifnpmode(f->unit, PPP_IPV6, NPMODE_QUEUE);
     } else {
