diff -urN a/include/dirent.h b/include/dirent.h
--- a/include/dirent.h	2011-03-14 09:54:12.980183443 +0300
+++ b/include/dirent.h	2011-03-14 10:07:34.290183418 +0300
@@ -286,6 +286,25 @@
      __THROW __attribute_pure__ __nonnull ((1, 2));
 # endif
 
+/* Function to compare two `struct dirent's alphabetically.  */
+# ifndef __USE_FILE_OFFSET64
+extern int versionsort (__const void *__e1, __const void *__e2)
+     __THROW __attribute_pure__ __nonnull ((1, 2));
+# else
+#  ifdef __REDIRECT
+extern int __REDIRECT (versionsort,
+			   (__const void *__e1, __const void *__e2),
+			   versionsort64) __attribute_pure__ __nonnull ((1, 2));
+#  else
+#   define versionsort versionsort64
+#  endif
+# endif
+
+# if defined __USE_GNU && defined __USE_LARGEFILE64
+extern int versionsort64 (__const void *__e1, __const void *__e2)
+     __THROW __attribute_pure__ __nonnull ((1, 2));
+# endif
+
 #endif /* Use BSD or misc.  */
 
 __END_DECLS
diff -urN a/include/string.h b/include/string.h
--- a/include/string.h	2011-03-14 09:54:12.982185223 +0300
+++ b/include/string.h	2011-03-14 10:08:45.551183543 +0300
@@ -442,11 +442,9 @@
 
 #ifdef	__USE_GNU
 /* Compare S1 and S2 as strings holding name & indices/version numbers.  */
-#if 0
 extern int strverscmp (__const char *__s1, __const char *__s2)
      __THROW __attribute_pure__ __nonnull ((1, 2));
 libc_hidden_proto(strverscmp)
-#endif
 
 /* Return a string describing the meaning of the signal number in SIG.  */
 extern char *strsignal (int __sig) __THROW;
diff -urN a/libc/misc/dirent/Makefile.in b/libc/misc/dirent/Makefile.in
--- a/libc/misc/dirent/Makefile.in	2011-03-14 09:54:13.071183374 +0300
+++ b/libc/misc/dirent/Makefile.in	2011-03-14 10:09:44.544183543 +0300
@@ -6,10 +6,10 @@
 #
 
 CSRC :=	alphasort.c closedir.c dirfd.c opendir.c readdir.c rewinddir.c \
-	scandir.c seekdir.c telldir.c readdir_r.c
+	scandir.c seekdir.c telldir.c readdir_r.c versionsort.c
 
 ifeq ($(UCLIBC_HAS_LFS),y)
-CSRC +=	readdir64.c alphasort64.c scandir64.c readdir64_r.c
+CSRC +=	readdir64.c alphasort64.c scandir64.c readdir64_r.c versionsort64.c
 endif
 
 MISC_DIRENT_DIR := $(top_srcdir)libc/misc/dirent
diff -urN a/libc/misc/dirent/versionsort64.c b/libc/misc/dirent/versionsort64.c
--- a/libc/misc/dirent/versionsort64.c	1970-01-01 03:00:00.000000000 +0300
+++ b/libc/misc/dirent/versionsort64.c	2011-03-14 10:11:05.459183378 +0300
@@ -0,0 +1,17 @@
+/*
+ * Copyright (C) 2008-2009 Hai Zaar, Codefidence Ltd <haizaar@codefidence.com>
+ *
+ * Licensed under the LGPL v2.1, see the file COPYING.LIB in this tarball.
+ */
+
+#include <_lfs_64.h>
+
+#include <dirent.h>
+#include <string.h>
+#include "dirstream.h"
+
+int versionsort64(const void *a, const void *b)
+{
+	return strverscmp((*(const struct dirent64 **) a)->d_name,
+			(*(const struct dirent64 **) b)->d_name);
+}
diff -urN a/libc/misc/dirent/versionsort.c b/libc/misc/dirent/versionsort.c
--- a/libc/misc/dirent/versionsort.c	1970-01-01 03:00:00.000000000 +0300
+++ b/libc/misc/dirent/versionsort.c	2011-03-14 10:10:33.191183386 +0300
@@ -0,0 +1,15 @@
+/*
+ * Copyright (C) 2008-2009 Hai Zaar, Codefidence Ltd <haizaar@codefidence.com>
+ *
+ * Licensed under the LGPL v2.1, see the file COPYING.LIB in this tarball.
+ */
+
+#include <dirent.h>
+#include <string.h>
+#include "dirstream.h"
+
+int versionsort(const void *a, const void *b)
+{
+	return strverscmp((*(const struct dirent **) a)->d_name,
+			(*(const struct dirent **) b)->d_name);
+}
diff -urN a/libc/string/strverscmp.c b/libc/string/strverscmp.c
--- a/libc/string/strverscmp.c	1970-01-01 03:00:00.000000000 +0300
+++ b/libc/string/strverscmp.c	2011-03-14 10:03:35.000000000 +0300
@@ -0,0 +1,118 @@
+/* GNU's strverscmp() function, taken from glibc 2.3.2 sources
+ */
+
+/* Compare strings while treating digits characters numerically.
+   Copyright (C) 1997, 2002 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+   Contributed by Jean-François Bignolles <bignolle@ecoledoc.ibp.fr>, 1997.
+
+   Derived work for uClibc by Hai Zaar, Codefidence Ltd <haizaar@codefidence.com>
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <string.h>
+#include <ctype.h>
+#include <stdint.h>
+
+
+/* states: S_N: normal, S_I: comparing integral part, S_F: comparing
+   fractional parts, S_Z: idem but with leading Zeroes only */
+#define  S_N    0x0
+#define  S_I    0x4
+#define  S_F    0x8
+#define  S_Z    0xC
+
+/* result_type: CMP: return diff; LEN: compare using len_diff/diff */
+#define  CMP    2
+#define  LEN    3
+
+/* using more efficient isdigit() */
+#undef isdigit
+#define isdigit(a) ((unsigned)((a) - '0') <= 9)
+
+/* Compare S1 and S2 as strings holding indices/version numbers,
+   returning less than, equal to or greater than zero if S1 is less than,
+   equal to or greater than S2 (for more info, see the texinfo doc).
+*/
+int strverscmp (const char *s1, const char *s2)
+{
+  const unsigned char *p1 = (const unsigned char *) s1;
+  const unsigned char *p2 = (const unsigned char *) s2;
+  unsigned char c1, c2;
+  int state;
+  int diff;
+
+  /* Symbol(s)    0       [1-9]   others  (padding)
+     Transition   (10) 0  (01) d  (00) x  (11) -   */
+  static const uint8_t next_state[] =
+  {
+      /* state    x    d    0    - */
+      /* S_N */  S_N, S_I, S_Z, S_N,
+      /* S_I */  S_N, S_I, S_I, S_I,
+      /* S_F */  S_N, S_F, S_F, S_F,
+      /* S_Z */  S_N, S_F, S_Z, S_Z
+  };
+
+  static const int8_t result_type[] =
+  {
+      /* state   x/x  x/d  x/0  x/-  d/x  d/d  d/0  d/-
+                 0/x  0/d  0/0  0/-  -/x  -/d  -/0  -/- */
+
+      /* S_N */  CMP, CMP, CMP, CMP, CMP, LEN, CMP, CMP,
+                 CMP, CMP, CMP, CMP, CMP, CMP, CMP, CMP,
+      /* S_I */  CMP, -1,  -1,  CMP, +1,  LEN, LEN, CMP,
+                 +1,  LEN, LEN, CMP, CMP, CMP, CMP, CMP,
+      /* S_F */  CMP, CMP, CMP, CMP, CMP, LEN, CMP, CMP,
+                 CMP, CMP, CMP, CMP, CMP, CMP, CMP, CMP,
+      /* S_Z */  CMP, +1,  +1,  CMP, -1,  CMP, CMP, CMP,
+                 -1,  CMP, CMP, CMP
+  };
+
+  if (p1 == p2)
+    return 0;
+
+  c1 = *p1++;
+  c2 = *p2++;
+  /* Hint: '0' is a digit too.  */
+  state = S_N | ((c1 == '0') + (isdigit (c1) != 0));
+
+  while ((diff = c1 - c2) == 0 && c1 != '\0')
+    {
+      state = next_state[state];
+      c1 = *p1++;
+      c2 = *p2++;
+      state |= (c1 == '0') + (isdigit (c1) != 0);
+    }
+
+  state = result_type[state << 2 | (((c2 == '0') + (isdigit (c2) != 0)))];
+
+  switch (state)
+  {
+    case CMP:
+      return diff;
+
+    case LEN:
+      while (isdigit (*p1++))
+	if (!isdigit (*p2++))
+	  return 1;
+
+      return isdigit (*p2) ? -1 : diff;
+
+    default:
+      return state;
+  }
+}
+libc_hidden_def(strverscmp)
