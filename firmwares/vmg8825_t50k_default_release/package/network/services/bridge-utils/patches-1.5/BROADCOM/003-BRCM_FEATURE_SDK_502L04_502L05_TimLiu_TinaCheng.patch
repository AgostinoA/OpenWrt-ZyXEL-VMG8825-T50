Index: bridge-utils-1.5/brctl/brctl_cmd.c
===================================================================
--- bridge-utils-1.5.orig/brctl/brctl_cmd.c	2018-09-04 15:07:04.176370955 +0800
+++ bridge-utils-1.5/brctl/brctl_cmd.c	2018-09-04 20:01:40.653281097 +0800
@@ -25,7 +25,17 @@
 #include "libbridge.h"
 #include "brctl.h"
 #if defined(PLATFORM_BROADCOM)
+#if defined(BRCM_SDK_502L04) || defined(BRCM_SDK_502L05) || defined(BRCM_SDK_502L06)
+#include <sys/ioctl.h>
+#include <unistd.h>
+#endif
 #include <linux/sockios.h>
+#if defined(BRCM_SDK_502L05) || defined(BRCM_SDK_502L06)
+#include <linux/netlink.h>
+#include <linux/neighbour.h>
+#include <linux/rtnetlink.h>
+#include <linux/version.h>
+#endif
 #endif
 
 static int strtotimeval(struct timeval *tv, const char *time)
@@ -284,6 +294,284 @@
 }
 
 #if defined(PLATFORM_BROADCOM)
+#if defined(BRCM_SDK_502L04) || defined(BRCM_SDK_502L05) || defined(BRCM_SDK_502L06)
+// brcm begin
+static int dump_port_mac_limits(const char *br, const char *p,  void *arg)
+{
+	int err;
+	int maxfdb;
+	int minfdb;
+	int usedfdb;
+
+	err = br_get_port_fdb_limits(p, &maxfdb, &minfdb, &usedfdb);
+	if ( err == 0 )
+	{
+		printf("interface    max         min        used\n");
+		printf("%-12s %-11d% -11d %d\n", p, maxfdb, minfdb, usedfdb);
+	}
+	return err;
+}
+
+static int br_cmd_show_mac_lmt(int argc, char *const* argv)
+{
+	const char *brname = argv[1];
+	int         err;
+	int         maxfdb;
+	int         usedfdb;
+
+	err = br_get_fdb_limits(brname, &maxfdb, &usedfdb);
+	if ( err == 0 )
+	{
+		printf("bridge       max         used\n");
+		printf("%-12s %-11d %d\n", brname, maxfdb, usedfdb);
+		err = br_foreach_port(brname, dump_port_mac_limits, NULL);
+	}
+	return err != 0;
+}
+
+#if defined(BRCM_SDK_502L05) || defined(BRCM_SDK_502L06)
+static int br_cmd_local_switch_disable(int argc, char *const* argv)
+{
+	int disable, err;
+
+	if (!strcmp(argv[2], "on") || !strcmp(argv[2], "yes") 
+	    || !strcmp(argv[2], "1"))
+		disable = 1;
+	else if (!strcmp(argv[2], "off") || !strcmp(argv[2], "no") 
+		 || !strcmp(argv[2], "0"))
+		disable = 0;
+	else {
+		fprintf(stderr, "expect on/off for argument\n");
+		return 1;
+	}
+
+	err = br_set_local_switching_disable(argv[1], disable);
+	if (err)
+		fprintf(stderr, "set local switch disable status failed: %s\n", 
+			strerror(errno));
+	return err != 0;
+}
+
+#define SYSFS_PATH_MAX        256
+
+static int get_ifindex_from_name(const char *ifname)
+{
+   char           sfspath[SYSFS_PATH_MAX];
+   int            rt;
+   FILE          *fp;
+   int            ifindex = 0; 
+
+   snprintf(sfspath, SYSFS_PATH_MAX, "/sys/class/net/%s/ifindex", ifname);
+   fp = fopen(sfspath, "r");
+   if (fp != NULL)
+   {
+      rt = fscanf(fp, "%i", &ifindex);
+      fclose(fp);
+      if (rt == 1)
+      {
+         return ifindex;
+      }
+   }
+   return 0;
+}
+
+int ll_addr_a2n(char *lladdr, int len, const char *arg)
+{
+    int i;
+
+	for (i=0; i<len; i++) {
+		int temp;
+		char *cp = strchr(arg, ':');
+		if (cp) {
+			*cp = 0;
+			cp++;
+		}
+		if (sscanf(arg, "%x", &temp) != 1) {
+			fprintf(stderr, "\"%s\" is invalid lladdr.\n", arg);
+			return -1;
+		}
+		if (temp < 0 || temp > 255) {
+			fprintf(stderr, "\"%s\" is invalid lladdr.\n", arg);
+			return -1;
+		}
+		lladdr[i] = temp;
+		if (!cp)
+			break;
+		arg = cp;
+	}
+	return i+1;
+}
+
+static int br_cmd_addmacs(int argc, char *const* argv)
+{
+	const char *brname;
+	const char *ifname;
+    const char *macaddr;
+    struct nlmsghdr   *nlh;
+    struct ndmsg      *ndm;
+    struct rtattr     *rta;
+    char               buf[NLMSG_HDRLEN + NLMSG_ALIGN(sizeof(*ndm)) + 
+                          RTA_ALIGN(sizeof(*rta)) + RTA_ALIGN(ETH_ALEN)];
+    int                fd;
+    char               llabuf[20];
+    int                err;
+
+	brname = *++argv;
+    (void) brname;
+	ifname = *++argv;
+    macaddr = *++argv;
+
+#if LINUX_VERSION_CODE > KERNEL_VERSION(3,8,0)
+
+    memset(&buf[0], 0, sizeof(buf));
+    nlh = (struct nlmsghdr *)&buf[0];
+    nlh->nlmsg_len = sizeof(buf);
+    nlh->nlmsg_flags = NLM_F_REQUEST|NLM_F_CREATE|NLM_F_REPLACE; /* create or replace */
+    nlh->nlmsg_type = RTM_NEWNEIGH;
+    nlh->nlmsg_seq = 0;
+
+    ndm = (struct ndmsg *)NLMSG_DATA(nlh);
+    ndm->ndm_ifindex = get_ifindex_from_name(ifname);
+    if ( 0 == ndm->ndm_ifindex )
+    {
+        printf("get index from name returns error\n");
+        return -1;
+    }
+    ndm->ndm_family = PF_BRIDGE;
+    ndm->ndm_flags  = NTF_MASTER;
+    // add static FDB entry
+    ndm->ndm_state = NUD_NOARP;
+
+    rta = (struct rtattr *)(NLMSG_DATA(nlh) + NLMSG_ALIGN(sizeof(*ndm)));
+    rta->rta_type = NDA_LLADDR;
+    rta->rta_len = RTA_LENGTH(ETH_ALEN);
+    err = ll_addr_a2n(llabuf, sizeof(llabuf), macaddr);
+    if (err < 0)
+        printf("err in mac addr conversion\n");
+    memcpy(RTA_DATA(rta), llabuf, ETH_ALEN);
+
+    fd = socket(AF_NETLINK, SOCK_RAW | SOCK_CLOEXEC, NETLINK_ROUTE);
+    if (fd < 0)
+    {
+        printf("Cannot open netlink socket\n");
+        return -1;
+    }
+    else
+    {
+        int status;
+        struct sockaddr_nl nladdr;
+        struct iovec iov = {
+            .iov_base = (void*)nlh,
+            .iov_len = nlh->nlmsg_len
+        };
+        struct msghdr msg = {
+            .msg_name = &nladdr,
+            .msg_namelen = sizeof(nladdr),
+            .msg_iov = &iov,
+            .msg_iovlen = 1,
+        };
+
+        memset(&nladdr, 0, sizeof(nladdr));
+        nladdr.nl_family = AF_NETLINK;
+
+        status = sendmsg(fd, &msg, 0);
+        if (status < 0)
+        {
+            printf("Cannot talk to rtnetlink");
+        }
+        close(fd);
+    }
+#else /* LINUX_VERSION_CODE */
+    printf ("requested API not supported in kernel version\n");
+#endif /* LINUX_VERSION_CODE */
+
+	return 0;
+}
+
+static int br_cmd_delmacs(int argc, char *const* argv)
+{
+	const char *brname;
+	const char *ifname;
+    const char *macaddr;
+ #if LINUX_VERSION_CODE > KERNEL_VERSION(3,8,0)
+    struct nlmsghdr   *nlh;
+    struct ndmsg      *ndm;
+    struct rtattr     *rta;
+    char               buf[NLMSG_HDRLEN + NLMSG_ALIGN(sizeof(*ndm)) + 
+                          RTA_ALIGN(sizeof(*rta)) + RTA_ALIGN(ETH_ALEN)];
+    int                fd;
+    char               llabuf[20];
+    int                err;
+
+	brname = *++argv;
+    (void) brname;
+	ifname = *++argv;
+    macaddr = *++argv;
+
+    memset(&buf[0], 0, sizeof(buf));
+    nlh = (struct nlmsghdr *)&buf[0];
+    nlh->nlmsg_len = sizeof(buf);
+    nlh->nlmsg_flags = NLM_F_REQUEST|NLM_F_CREATE|NLM_F_REPLACE; /* create or replace */
+    nlh->nlmsg_type = RTM_DELNEIGH;
+    nlh->nlmsg_seq = 0;
+
+    ndm = (struct ndmsg *)NLMSG_DATA(nlh);
+    ndm->ndm_ifindex = get_ifindex_from_name(ifname);
+    if ( 0 == ndm->ndm_ifindex )
+    {
+        return -1;
+    }
+    ndm->ndm_family = PF_BRIDGE;
+    ndm->ndm_flags  = NTF_MASTER;
+
+    rta = (struct rtattr *)(NLMSG_DATA(nlh) + NLMSG_ALIGN(sizeof(*ndm)));
+    rta->rta_type = NDA_LLADDR;
+    rta->rta_len = RTA_LENGTH(ETH_ALEN);
+    err = ll_addr_a2n(llabuf, sizeof(llabuf), macaddr);
+    if (err < 0)
+        printf("err in mac addr conversion\n");
+    memcpy(RTA_DATA(rta), llabuf, ETH_ALEN);
+
+    fd = socket(AF_NETLINK, SOCK_RAW | SOCK_CLOEXEC, NETLINK_ROUTE);
+    if (fd < 0)
+    {
+        printf("Cannot open netlink socket\n");
+        return -1;
+    }
+    else
+    {
+        int status;
+        struct sockaddr_nl nladdr;
+        struct iovec iov = {
+            .iov_base = (void*)nlh,
+            .iov_len = nlh->nlmsg_len
+        };
+        struct msghdr msg = {
+            .msg_name = &nladdr,
+            .msg_namelen = sizeof(nladdr),
+            .msg_iov = &iov,
+            .msg_iovlen = 1,
+        };
+
+        memset(&nladdr, 0, sizeof(nladdr));
+        nladdr.nl_family = AF_NETLINK;
+
+        status = sendmsg(fd, &msg, 0);
+        if (status < 0)
+        {
+            printf("Cannot talk to rtnetlink");
+        }
+        close(fd);
+    }
+#else
+    printf("requested API not supported in kernel version\n");
+#endif /* LINUX_VERSION_CODE */
+
+    return 0;
+}
+#endif //#if defined(BRCM_SDK_502L05) || defined(BRCM_SDK_502L06)
+
+#else //#if defined(BRCM_SDK_502L04) || defined(BRCM_SDK_502L05) || defined(BRCM_SDK_502L06)
 static int br_cmd_enableportsnooping(int argc, char*const* argv)
 {
 	int err;
@@ -591,7 +879,9 @@
 
 	return err != 0;
 }
+// brcm end
 #endif
+#endif //#if defined(PLATFORM_BROADCOM)
 
 static int br_cmd_stp(int argc, char *const* argv)
 {
@@ -775,7 +1065,7 @@
 	return err != 0;
 }
 
-#if defined(PLATFORM_BROADCOM)
+#if defined(PLATFORM_BROADCOM) && !(defined(BRCM_SDK_502L04) || defined(BRCM_SDK_502L05) || defined(BRCM_SDK_502L06))
 static int br_get_port_list(const char *brname, int *ifindices, int num)
 {
 	unsigned long args[4] = { BRCTL_GET_PORT_LIST,
@@ -923,7 +1213,7 @@
 	  "<bridge> <port> <cost>\tset path cost" },
 	{ 3, "setportprio", br_cmd_setportprio,
 	  "<bridge> <port> <prio>\tset port priority" },
-#if defined(PLATFORM_BROADCOM)
+#if defined(PLATFORM_BROADCOM) && !(defined(BRCM_SDK_502L04) || defined(BRCM_SDK_502L05) || defined(BRCM_SDK_502L06))
 	{ 2, "enableportsnooping", br_cmd_enableportsnooping,
 	  "<bridge> <value>\t0-disable 1-standard 2-blocking" },
 #if (!defined(BRCM_SDK_416L04)) && (!defined(BRCM_SDK_416L05))
@@ -935,7 +1225,7 @@
 	  "[ <bridge> ]\t\tshow a list of bridges" },
 	{ 1, "showmacs", br_cmd_showmacs, 
 	  "<bridge>\t\tshow a list of mac addrs"},
-#if defined(PLATFORM_BROADCOM)
+#if defined(PLATFORM_BROADCOM) && !(defined(BRCM_SDK_502L04) || defined(BRCM_SDK_502L05) || defined(BRCM_SDK_502L06))
 	{ 3, "addmacs", br_cmd_addmacs, 
 	  "<bridge> <ifname> <mac>\t\tadd mac addresses to the bridge table"},
 	{ 3, "delmacs", br_cmd_delmacs, 
@@ -948,6 +1238,19 @@
 	{ 2, "stp", br_cmd_stp,
 	  "<bridge> {on|off}\tturn stp on/off" },
 #if defined(PLATFORM_BROADCOM)
+#if defined(BRCM_SDK_502L04) || defined(BRCM_SDK_502L05) || defined(BRCM_SDK_502L06)
+// brcm begin
+	{ 1, "showmaclmt", br_cmd_show_mac_lmt,
+	  "<bridge>\t\tshow a mac limit of bridge"},
+#if defined(BRCM_SDK_502L05) || defined(BRCM_SDK_502L06)
+	{ 2, "localswitchingdisable", br_cmd_local_switch_disable, 
+	  "<bridge> {on|off}\t\tLocal switching disable on bridge on/off"},
+	{ 3, "addmacs", br_cmd_addmacs, 
+	  "<bridge> <ifname> <mac>\t\tadd mac addresses to the bridge table"},
+	{ 3, "delmacs", br_cmd_delmacs, 
+	  "<bridge> <ifname> <mac>\t\tremove mac addresses from the bridge table"}
+#endif
+#else
 	{ 2, "mldenableportsnooping", br_cmd_mld_enableportsnooping,
 	  "<bridge> <value>\t0-disable 1-standard 2-blocking" },
 #if (!defined(BRCM_SDK_416L04)) && (!defined(BRCM_SDK_416L05))
@@ -966,7 +1269,9 @@
 	  "<bridge> <value>\t0-disable 1-enable" },
     { 1, "showmaclmt", br_cmd_show_mac_lmt, 
       "<bridge>\t\tshow a mac limit of bridge"},
-#endif	  
+#endif
+#endif
+// brcm end
 };
 
 const struct command *command_lookup(const char *cmd)
Index: bridge-utils-1.5/libbridge/libbridge.h
===================================================================
--- bridge-utils-1.5.orig/libbridge/libbridge.h	2018-09-04 15:07:04.168370957 +0800
+++ bridge-utils-1.5/libbridge/libbridge.h	2018-09-04 16:20:37.085825046 +0800
@@ -21,7 +21,11 @@
 
 #include <sys/socket.h>
 #include <linux/if.h>
+//#if (defined(BRCM_SDK_502L04) || defined(BRCM_SDK_502L05) || defined(BRCM_SDK_502L06))
+//#include <bcm_local_kernel_include/linux/if_bridge.h>
+//#else
 #include <linux/if_bridge.h>
+//#endif
 
 /* defined in net/if.h but that conflicts with linux/if.h... */
 extern unsigned int if_nametoindex (const char *__ifname);
@@ -114,7 +118,7 @@
 extern int br_set_port_priority(const char *br, const char *p, 
 				int port_priority);
 
-#if defined(PLATFORM_BROADCOM)
+#if defined(PLATFORM_BROADCOM) && !(defined(BRCM_SDK_502L04) || defined(BRCM_SDK_502L05) || defined(BRCM_SDK_502L06))
 extern int br_enable_port_snooping(const char *br, int enable);
 extern int br_enable_proxy_mode(const char *br, int enable);
 extern int br_igmp_enable_rate_limit(const char *br, int limit);
@@ -138,6 +142,20 @@
 extern int br_set_hairpin_mode(const char *bridge, const char *dev,
 			       int hairpin_mode);
 				   
+#if defined(PLATFORM_BROADCOM) && (defined(BRCM_SDK_502L04) || defined(BRCM_SDK_502L05) || defined(BRCM_SDK_502L06))
+// brcm begin
+int br_get_fdb_limits(const char *brname, int *maxfdb, int *usedfdb );
+int br_get_port_fdb_limits(const char *portname, int *maxfdb, int *minfdb, int *usedfdb );
+
+extern int br_block_stp(const char *bridge, const char *ifName);
+extern int br_mark_dedicated_stp_port(const char *bridge,
+                                      const char *ifName, int setting);
+#if defined(BRCM_SDK_502L05) || defined(BRCM_SDK_502L06)
+extern int br_set_local_switching_disable(const char *br, int disable_state);
+#endif
+// brcm end
+#endif
+
 #if defined(ZYXEL_PATCH)
 extern int get_ifname(const char *brname, int portno, char *ifname);
 #endif
Index: bridge-utils-1.5/libbridge/libbridge_devif.c
===================================================================
--- bridge-utils-1.5.orig/libbridge/libbridge_devif.c	2018-09-04 15:07:04.172370957 +0800
+++ bridge-utils-1.5/libbridge/libbridge_devif.c	2018-09-04 16:06:21.252903125 +0800
@@ -365,6 +365,13 @@
 		      BRCTL_SET_BRIDGE_PRIORITY);
 }
 
+#if defined(PLATFORM_BROADCOM) && (defined(BRCM_SDK_502L05) || defined(BRCM_SDK_502L06))
+int br_set_local_switching_disable(const char *br, int disable_state)
+{
+	return br_set(br, "local_switching_disable", disable_state, BRCTL_GET_VERSION);
+}
+#endif
+
 static int port_set(const char *bridge, const char *ifname, 
 		    const char *name, unsigned long value, 
 		    unsigned long oldcode)
@@ -401,7 +408,7 @@
 	return port_set(bridge, port, "priority", priority, BRCTL_SET_PORT_PRIORITY);
 }
 
-#if defined(PLATFORM_BROADCOM)
+#if defined(PLATFORM_BROADCOM) && !(defined(BRCM_SDK_502L04) || defined(BRCM_SDK_502L05) || defined(BRCM_SDK_502L06))
 int br_enable_port_snooping(const char *br, int enable)
 {
 	int ret;
@@ -689,3 +696,40 @@
 
 	return n;
 }
+
+#if defined(PLATFORM_BROADCOM) && (defined(BRCM_SDK_502L04) || defined(BRCM_SDK_502L05) || defined(BRCM_SDK_502L06))
+int br_get_fdb_limits(const char *brname, int *maxfdb, int *usedfdb )
+{
+	DIR *d;
+	char path[SYSFS_PATH_MAX];
+
+	snprintf(path, SYSFS_PATH_MAX, SYSFS_CLASS_NET "%s/bridge", brname);
+	d = opendir(path);
+	if (!d)
+	{
+		return -1;
+	}
+	*maxfdb = fetch_int(path, "max_fdb_entries");
+	*usedfdb = fetch_int(path, "used_fdb_entries");
+	return 0;
+}
+
+int br_get_port_fdb_limits(const char *portname, int *maxfdb, int *minfdb, int *usedfdb )
+{
+	DIR *d;
+	char path[SYSFS_PATH_MAX];
+
+	snprintf(path, SYSFS_PATH_MAX, SYSFS_CLASS_NET "%s/brport", portname);
+	d = opendir(path);
+	if (!d)
+	{
+		return -1;
+	}
+	*maxfdb = fetch_int(path, "max_fdb_entries");
+	*minfdb = fetch_int(path, "min_fdb_entries");
+	*usedfdb = fetch_int(path, "used_fdb_entries");
+	return 0;
+}
+
+#endif
+
