Index: ez-ipupdate-3.0.11b8/ez-ipupdate.c
===================================================================
--- ez-ipupdate-3.0.11b8.orig/ez-ipupdate.c	2018-09-10 18:33:03.643934590 +0800
+++ ez-ipupdate-3.0.11b8/ez-ipupdate.c	2018-09-10 18:38:00.181515600 +0800
@@ -50,7 +50,7 @@
 
 /*for log*/
 char success[1]={0};
-char address_log[17]="0.0.0.0";
+char address_log[65]="0.0.0.0";
 
 
 // you man very well need to edit this, don't worry though, email is only sent
@@ -151,6 +151,12 @@
 #define MINTDNS_DEFAULT_PORT "80"
 #define MINTDNS_REQUEST "/nic/update/default.aspx"
 
+//support Dynv6
+#define DYNV6_DEFAULT_SERVER "dynv6.com"
+#define DYNV6_DEFAULT_PORT "80"
+#define DYNV6_REQUEST "/api/update"
+
+
 //support User-defined
 #define DEFAULT_PORT "80"
 #define DEFAULT_HTTPS_PORT "443"
@@ -316,6 +322,7 @@
 char *mx = NULL;
 char *url = NULL;
 char *host = NULL;
+char type[10];
 char *cloak_title = NULL;
 char *interface = NULL;
 int ntrys = 1;
@@ -435,6 +442,12 @@
 int MINTDNS_check_info(void);
 static char *MINTDNS_fields_used[] = { "server", "address", "user", "host", NULL};
 
+//Support Dynv6
+int DYNV6_update_entry(void);
+int DYNV6_check_info(void);
+static char *DYNV6_fields_used[] = { "server", "address", "user", "host", NULL};
+
+
 //support User-defined
 int UserDefined_update_entry(void);
 int UserDefined_HTTPS_update_entry(void);
@@ -687,6 +700,17 @@
   	MINTDNS_DEFAULT_PORT,
   	MINTDNS_REQUEST  
   	},
+  //Support DYNV6
+  { "dynv6",
+  	{ "dynv6", "dynv6.com", 0, },
+  	NULL,
+  	DYNV6_update_entry,
+  	DYNV6_check_info,
+  	DYNV6_fields_used,
+  	DYNV6_DEFAULT_SERVER,
+  	DYNV6_DEFAULT_PORT,
+  	DYNV6_REQUEST  
+  	},
  	//Support User-defined
 	{ "userdefined",
   	{ "userdefined", "unknow", 0, },
@@ -794,6 +818,8 @@
 void print_version( void );
 void parse_args( int argc, char **argv );
 int do_connect(int *sock, char *host, char *port);
+int do_connect_v6(int *sock, char *host, char *port, char *type);
+
 void base64Encode(char *intext, char *output);
 int main( int argc, char **argv );
 void warn_fields(char **okay_fields);
@@ -1706,6 +1732,153 @@
   return 0;
 }
 
+
+/*
+ * do_connect_ipv6
+ *
+ * connect a socket and return the file descriptor
+ *
+ */
+int do_connect_v6(int *sock, char *host, char *port, char *type)
+{
+  int flag;
+  int result;
+  fd_set wfds;
+  int rv;
+  struct timeval tv;
+  struct addrinfo hints;
+  struct addrinfo *servinfo;
+  char *address = NULL;
+  char addressBuffer1[INET_ADDRSTRLEN];
+  char addressBuffer2[INET6_ADDRSTRLEN];
+  
+  memset(&hints, 0, sizeof(hints));
+
+  if(!strcmp(type,"ipv4") || !strcmp(type,"ipv4ipv6")){
+  	 hints.ai_family = AF_INET; 
+  }
+  else{
+  	 hints.ai_family = AF_INET6; 
+  }
+  hints.ai_socktype = SOCK_STREAM;
+  hints.ai_protocol = 0;
+
+  	if(!strcmp(type,"ipv4")|| !strcmp(type,"ipv4ipv6")){
+		if ((rv = getaddrinfo("ipv4.dynv6.com", port, &hints, &servinfo)) != 0) {
+   			perror("getaddrinfo error\n");
+			return -1;
+  		}
+  	}
+	else{
+		if ((rv = getaddrinfo("ipv6.dynv6.com", port, &hints, &servinfo)) != 0) {
+   			perror("getaddrinfo error\n");
+			return -1;
+  		}
+	}
+
+  	 // set up the socket
+  	if((*sock=socket(servinfo->ai_family, servinfo->ai_socktype,servinfo->ai_protocol)) == -1)
+  	{
+  		if(!(options & OPT_QUIET)){
+    		perror("socket");
+  		}
+		return(-1);
+  	} 
+
+	if(!strcmp(type,"ipv4")|| !strcmp(type,"ipv4ipv6")){
+#if 0
+
+			// set socket to non-blocking mode
+  			printf("set socket to non-blocking mode %s %d\n",__func__,__LINE__);
+  			if((flag = fcntl(*sock, F_GETFL, 0)) < 0)
+  			{
+    			perror("fcntl");
+    			close(*sock);
+    			return(-1);
+  			}
+
+  			if(fcntl(*sock, F_SETFL, flag | O_NONBLOCK) < 0)
+  			{
+    			perror("fcntl");
+    			close(*sock);
+    			return(-1);
+  			}
+#endif
+		address = inet_ntop(AF_INET,&((struct sockaddr_in *)servinfo->ai_addr)->sin_addr,addressBuffer1,sizeof(addressBuffer1));
+  	}
+  	else{
+		address = inet_ntop(AF_INET6,&((struct sockaddr_in6 *)servinfo->ai_addr)->sin6_addr,addressBuffer2,sizeof(addressBuffer2));
+  	}
+	
+	// connect the socket
+	 if((result=connect(*sock, servinfo->ai_addr, servinfo->ai_addrlen)) == -1) 
+	 {
+	   if(errno != EINPROGRESS)
+	   {
+		 if(!(options & OPT_QUIET))
+		 {
+		   perror("connect");
+		 }
+		 close(*sock);
+		 return(-1);
+	   }
+	
+	   // wait 'timeout' secs for socket connecting
+	   FD_ZERO(&wfds);
+	   FD_SET(*sock, &wfds);
+	   memcpy(&tv, &timeout, sizeof(struct timeval));
+	   if((result = select(*sock + 1, NULL, &wfds, NULL, &tv)) <= 0)
+	   {
+		 if(result == 0)
+		 {
+		   errno = ETIMEDOUT;
+		 }
+		 perror("select");
+		 close(*sock);
+		 return(-1);
+	   }
+	
+	   // check the socket is ready
+	   result = 0;
+	   if(!FD_ISSET(*sock, &wfds) 
+		   || getsockopt(*sock, SOL_SOCKET, SO_ERROR, &result, servinfo->ai_addrlen) < 0
+		   || result != 0)
+	   {
+		 if(result != 0)
+		 {
+		   errno = result;
+		 }
+		 perror("error");
+		 close(*sock);
+		 return(-1);
+	   }
+	 }
+
+
+#if 0
+  	// restore socket to blocking mode
+  	if(fcntl(*sock, F_SETFL, flag) < 0)
+  	{
+    	perror("fcntl");
+    	close(*sock);
+    	return(-1);
+  	}
+#endif
+
+  // print out some info
+  if(!(options & OPT_QUIET))
+  {
+    if(!strcmp(type,"ipv6")){
+    	fprintf(stderr,"connected to %s (%s) on port %s ok\n",host,address,port);
+    }
+	if(!strcmp(type,"ipv4") || !strcmp(type,"ipv4ipv6")){
+    	fprintf(stderr,"connected to %s (%s) on port %s ok\n",host,address,port);
+    }
+  }
+  freeaddrinfo(servinfo); 
+  return 0;
+}
+
 //support User-defined
 /*
  * do_connect_SSL
@@ -2118,6 +2291,7 @@
         fprintf(fp,"%s",address_log);/*updated address*/
         fprintf(fp,"/Accepted"); /*updated is success.*/
         fprintf(fp,"/%s",host);
+		fprintf(fp,"/%s",type); //type mode
         fprintf(fp,"/%s",asctime (timeinfo) );
         fprintf(fp, "/%s", service->title);
         if ((fplog = fopen("/var/log/ddns_status_time.log", "w+")) != NULL )
@@ -2201,7 +2375,7 @@
     innerText(success, bufferPtr, "retc", "content=\"", "\"");
     innerText(address_log, bufferPtr, "addr", "content=\"", "\"");
 
-    address_log[16]='\0';
+    address_log[64]='\0';
     return 0;
 }
 
@@ -2443,7 +2617,7 @@
   int ret;
 
   buf[BUFFER_SIZE] = '\0';
-
+  strcpy(type,"ipv4");
   if(do_connect((int*)&client_sockfd, server, port) != 0)
   {
     if(!(options & OPT_QUIET))
@@ -2619,7 +2793,7 @@
     DDNS_StatusLog();
     return UPDATERES_SHUTDOWN;
   }
-
+  strcpy(type,"ipv4");
   if(do_connect((int*)&client_sockfd, server, port) != 0)
   {
     if(!(options & OPT_QUIET))
@@ -2712,7 +2886,7 @@
         {
           sscanf(tmpbuf, "\ngood %s", address_log);
 		 success[0]='0';
-          address_log[16]='\0';
+          address_log[64]='\0';
           printf("request successful\n");
 		 retval = UPDATERES_OK;
         }
@@ -2750,7 +2924,7 @@
           }
           sscanf(tmpbuf, "\nnochg %s", address_log);
 		 success[0]='0';
-          address_log[16]='\0';
+          address_log[64]='\0';
           retval = UPDATERES_OK;
         }
         else if(strstr(buf, "\nbadauth") != NULL)
@@ -2920,7 +3094,7 @@
   char buf[BUFFER_SIZE+1];
 
   buf[BUFFER_SIZE] = '\0';
-
+  strcpy(type,"ipv4");
   if(do_connect((int*)&client_sockfd, server, port) != 0)
   {
     if(!(options & OPT_QUIET))
@@ -3160,7 +3334,7 @@
   domain = strdup(p);
 
   dprintf((stderr, "hostname: %s, domain: %s\n", hostname, domain));
-
+  strcpy(type,"ipv4");
   if(do_connect((int*)&client_sockfd, server, port) != 0)
   {
     if(!(options & OPT_QUIET))
@@ -3470,7 +3644,7 @@
   int response;
 
   buf[BUFFER_SIZE] = '\0';
-
+  strcpy(type,"ipv4");
   if(do_connect((int*)&client_sockfd, server, port) != 0)
   {
     if(!(options & OPT_QUIET))
@@ -3601,7 +3775,7 @@
   int ret;
 
   buf[BUFFER_SIZE] = '\0';
-
+  strcpy(type,"ipv4");
   if(do_connect((int*)&client_sockfd, server, port) != 0)
   {
     if(!(options & OPT_QUIET))
@@ -3769,7 +3943,7 @@
   int ret;
 
   buf[BUFFER_SIZE] = '\0';
-
+  strcpy(type,"ipv4");
   if(do_connect((int*)&client_sockfd, server, port) != 0)
   {
     if(!(options & OPT_QUIET))
@@ -3939,7 +4113,7 @@
   int ret;
 
   buf[BUFFER_SIZE] = '\0';
-
+  strcpy(type,"ipv4");
   if(do_connect((int*)&client_sockfd, server, port) != 0)
   {
     if(!(options & OPT_QUIET))
@@ -4143,7 +4317,7 @@
     return(UPDATERES_ERROR);
   }
   domainname = p;
-
+  strcpy(type,"ipv4");
   if(do_connect((int*)&client_sockfd, server, port) != 0)
   {
     if(!(options & OPT_QUIET))
@@ -4316,7 +4490,7 @@
         return(UPDATERES_ERROR);
     }
     domainname = p;
-
+    strcpy(type,"ipv4");
     if(do_connect((int*)&client_sockfd, server, port) != 0){
         if(!(options & OPT_QUIET)){
             show_message("error connecting to %s:%s\n", server, port);
@@ -4371,6 +4545,7 @@
         return(UPDATERES_ERROR);
     }
     domainname = p;
+	strcpy(type,"ipv4");
     if(do_connect((int*)&client_sockfd, server, port) != 0){
         if(!(options & OPT_QUIET)){
             show_message("error connecting to %s:%s\n", server, port);
@@ -4488,7 +4663,7 @@
   int ret;
 
   buf[BUFFER_SIZE] = '\0';
-
+  strcpy(type,"ipv4");
   if(do_connect((int*)&client_sockfd, server, port) != 0)
   {
     if(!(options & OPT_QUIET))
@@ -4638,7 +4813,7 @@
   int ret;
 
   buf[BUFFER_SIZE] = '\0';
-
+  strcpy(type,"ipv4");
   if(do_connect((int*)&client_sockfd, server, port) != 0)
   {
     if(!(options & OPT_QUIET))
@@ -4783,7 +4958,7 @@
   int ret;
 
   buf[BUFFER_SIZE] = '\0';
-
+  strcpy(type,"ipv4");
   if(do_connect((int*)&client_sockfd, server, port) != 0)
   {
     if(!(options & OPT_QUIET))
@@ -4965,7 +5140,7 @@
   int ret;
 
   buf[BUFFER_SIZE] = '\0';
-
+  strcpy(type,"ipv4");
   if(do_connect((int*)&client_sockfd, server, port) != 0)
   {
     if(!(options & OPT_QUIET))
@@ -5110,7 +5285,7 @@
   int ret;
 
   buf[BUFFER_SIZE] = '\0';
-
+  strcpy(type,"ipv4");
   if(do_connect((int*)&client_sockfd, server, port) != 0)
   {
     if(!(options & OPT_QUIET))
@@ -5203,7 +5378,7 @@
   int ret;
 
   buf[BUFFER_SIZE] = '\0';
-
+  strcpy(type,"ipv4");
   if(do_connect((int*)&client_sockfd, server, port) != 0)
   {
     if(!(options & OPT_QUIET))
@@ -5393,7 +5568,7 @@
   int ret;
 
   buf[BUFFER_SIZE] = '\0';
-
+  strcpy(type,"ipv4");
   if(do_connect((int*)&client_sockfd, server, port) != 0)
   {
     if(!(options & OPT_QUIET))
@@ -5545,7 +5720,7 @@
   int ret;
 
   buf[BUFFER_SIZE] = '\0';
-
+  strcpy(type,"ipv4");
   if(do_connect((int*)&client_sockfd, server, port) != 0)
   {
     if(!(options & OPT_QUIET))
@@ -5660,7 +5835,7 @@
         success[0]='0';
 
         innerText(address_log, buf, "points to ", NULL, ".\n");
-        address_log[16]='\0';
+        address_log[64]='\0';
 
         DDNS_StatusLog();
 //        show_message("Success!!\n");
@@ -5746,7 +5921,7 @@
   int ret;
 
   buf[BUFFER_SIZE] = '\0';
-
+  strcpy(type,"ipv4");
   if(do_connect((int*)&client_sockfd, server, port) != 0)
   {
     if(!(options & OPT_QUIET))
@@ -5822,7 +5997,7 @@
           success[0]='0';
           printf("ERROR : Address %s has not changed.\n",address);
 		  innerText(address_log, buf, "Address", NULL, "has not changed.");
-		  address_log[16]='\0';
+		  address_log[64]='\0';
 		  DDNS_StatusLog();
 		  return(UPDATERES_OK);
         }
@@ -5832,7 +6007,7 @@
         success[0]='0';
 
         innerText(address_log, buf, "to ", NULL, "in");
-        address_log[16]='\0';
+        address_log[64]='\0';
 
         DDNS_StatusLog();
 //        show_message("Success!!\n");
@@ -5919,7 +6094,7 @@
   int ret;
 
   buf[BUFFER_SIZE] = '\0';
-
+  strcpy(type,"ipv4");
   if(do_connect((int*)&client_sockfd, server, port) != 0)
   {
     if(!(options & OPT_QUIET))
@@ -5999,7 +6174,7 @@
         success[0]='0';
 
         innerText(address_log, buf, "to ", NULL, "in");
-        address_log[16]='\0';
+        address_log[64]='\0';
 
         DDNS_StatusLog();
 //        show_message("Success!!\n");
@@ -6085,7 +6260,7 @@
   int ret;
 
   buf[BUFFER_SIZE] = '\0';
-
+  strcpy(type,"ipv4");
   if(do_connect((int*)&client_sockfd, server, port) != 0)
   {
     if(!(options & OPT_QUIET))
@@ -6161,7 +6336,7 @@
           success[0]='0';
           printf("ERROR : Address %s has not changed.\n",address);
 		  innerText(address_log, buf, "Address", NULL, "has not changed.");
-		  address_log[16]='\0';
+		  address_log[64]='\0';
 		  DDNS_StatusLog();
 		  return(UPDATERES_OK);
         }
@@ -6171,7 +6346,7 @@
         success[0]='0';
 
         innerText(address_log, buf, "to ", NULL, "in");
-        address_log[16]='\0';
+        address_log[64]='\0';
 
         DDNS_StatusLog();
 //        show_message("Success!!\n");
@@ -6247,6 +6422,205 @@
 }
 //MINTDNS  end
 
+//support Dynv6
+int DYNV6_update_entry(void)
+{
+  char buf[BUFFER_SIZE+1];
+  char *bp = buf;
+  int bytes;
+  int btot;
+  int ret;
+  char *tmp_address = NULL;
+  char *address1 = NULL, *address2 = NULL;
+  struct sockaddr_in sav4;
+  buf[BUFFER_SIZE] = '\0';
+  if(strstr(address, ",")){
+  	tmp_address = strdup(address);
+	address1 = strtok_r( tmp_address, ",", &address2);
+	if(address1){
+  	 	strcpy(type,"ipv4ipv6");
+  	}
+	else{
+		strcpy(type,"ipv6");
+	}
+  }
+  else{
+  	if(inet_pton(AF_INET, address, &(sav4.sin_addr))){
+  	 	strcpy(type,"ipv4");
+  	}
+  	else{
+  		strcpy(type,"ipv6");
+  	}
+  }
+  if(do_connect_v6((int*)&client_sockfd, server, port, type) != 0)
+  {
+    if(!(options & OPT_QUIET))
+    {
+      show_message("error connecting to %s:%s\n", server, port);
+    }
+    return(UPDATERES_ERROR);
+  }
+
+  snprintf(buf, BUFFER_SIZE, "GET %s?", request);
+  output(buf);
+  snprintf(buf, BUFFER_SIZE, "hostname=%s&",host);
+  output(buf); 
+  if(!strcmp(type,"ipv4")){
+  	snprintf(buf, BUFFER_SIZE, "ipv4=%s&", address);
+	output(buf);
+  }
+  else if(!strcmp(type,"ipv4ipv6")){
+  	snprintf(buf, BUFFER_SIZE, "ipv4=%s&", address1);
+	output(buf);
+	snprintf(buf, BUFFER_SIZE, "ipv6=%s&", address2);
+	output(buf);
+  }
+  else{
+  	snprintf(buf, BUFFER_SIZE, "ipv6=%s&", address);
+	output(buf);
+  }
+  snprintf(buf, BUFFER_SIZE, "token=%s&",password);
+  output(buf); 
+  snprintf(buf, BUFFER_SIZE, " HTTP/1.1\015\012");
+  output(buf);
+  snprintf(buf, BUFFER_SIZE, "Host: %s\015\012", server);
+  output(buf);
+  snprintf(buf, BUFFER_SIZE, "User-Agent: %s-%s %s [%s] (%s)\015\012",
+      "ez-update", VERSION, OS, (options & OPT_DAEMON) ? "daemon" : "", "by Angus Mackay");
+  output(buf);
+  snprintf(buf, BUFFER_SIZE, "\015\012");
+  output(buf);
+
+  if((bytes=read_input(buf, BUFFER_SIZE)) <= 0){
+      close(client_sockfd);
+      return(UPDATERES_ERROR);
+  }
+  buf[bytes] = '\0';
+
+  dprintf((stderr, "server output: %s\n", buf));
+
+  if(sscanf(buf, " HTTP/1.%*c %3d", &ret) != 1)
+  {
+    ret = -1;
+  }
+  switch(ret)
+  {
+    case -1:
+      if(!(options & OPT_QUIET))
+      {
+        show_message("strange server response, are you connecting to the right server?\n");
+      }
+      break;
+
+    case 200:
+
+      if(strstr(buf, "hostname not found") != NULL)
+      {
+        if(!(options & OPT_QUIET))
+        {
+          printf("Invalid hostname");
+        }
+      }
+	  else if(strstr(buf, "invalid IPv6 address") != NULL)
+      {
+        if(!(options & OPT_QUIET))
+        {
+          printf("Invalid IPv6 address");
+        }
+      }
+
+	  else if(strstr(buf, "invalid authentication token") != NULL)
+      {
+        if(!(options & OPT_QUIET))
+        {
+          printf("Invalid authentication token\n");
+        }
+      }
+	   
+      else
+      {
+        success[0]='0';
+
+        innerText(address_log, buf, "to ", NULL, "in");
+        address_log[64]='\0';
+        DDNS_StatusLog();
+//        show_message("Success!!\n");
+//        if(!(options & OPT_QUIET))
+//        {
+//          fprintf(stderr, "server output: %s\n", buf);
+//        }
+		return(UPDATERES_OK);
+      }
+      break;
+
+    case 401:
+      if(!(options & OPT_QUIET))
+      {
+        show_message("authentication failure\n");
+      }
+      success[0] = '1';
+      DDNS_StatusLog();
+      return(UPDATERES_SHUTDOWN);
+      break;
+
+    default:
+      if(!(options & OPT_QUIET))
+      {
+        *auth = '\0';
+        sscanf(buf, " HTTP/1.%*c %*3d %255[^\r\n]", auth);
+        show_message("unknown return code: %d\n", ret);
+        show_message("server response: %s\n", auth);
+      }
+      break;
+  }
+  success[0] = '1';
+  if(tmp_address){
+	free(tmp_address);
+  }
+  DDNS_StatusLog();
+  return(UPDATERES_ERROR);
+}
+
+int DYNV6_check_info(void)
+{
+  char buf[BUFSIZ+1];
+
+  if((host == NULL) || (*host == '\0'))
+  {
+    if(options & OPT_DAEMON)
+    {
+      return(-1);
+    }
+    if(host) { free(host); }
+    printf("host: ");
+    *buf = '\0';
+    fgets(buf, BUFSIZ, stdin);
+    host = strdup(buf);
+    chomp(host);
+  }
+
+  if(interface == NULL && address == NULL)
+  {
+    if(options & OPT_DAEMON)
+    {
+      fprintf(stderr, "you must provide either an interface or an address\n");
+      return(-1);
+    }
+    if(interface) { free(interface); }
+    printf("interface: ");
+    *buf = '\0';
+    fgets(buf, BUFSIZ, stdin);
+    chomp(buf);
+    option_handler(CMD_interface, buf);
+  }
+
+  warn_fields(service->fields_used);
+
+  return 0;
+}
+//Dynv6  end
+
+
 
 //support User-defined
 int UserDefined_update_entry(void){
@@ -6260,7 +6634,7 @@
   buf[BUFFER_SIZE] = '\0';
 
   sscanf(url,  "%[^/]%s", DNSserver, updateInfo);
-
+  strcpy(type,"ipv4");
 if(do_connect((int*)&client_sockfd, DNSserver, port) != 0)
 {
   if(!(options & OPT_QUIET))
@@ -6350,7 +6724,7 @@
         success[0]='0';
 
         innerText(address_log, buf, "to ", NULL, "in");
-        address_log[16]='\0';
+        address_log[64]='\0';
 
         DDNS_StatusLog();
 //        show_message("Success!!\n");
@@ -6499,7 +6873,7 @@
         success[0]='0';
 
         innerText(address_log, buf, "to ", NULL, "in");
-        address_log[16]='\0';
+        address_log[64]='\0';
 
         DDNS_StatusLog();
 //        show_message("Success!!\n");
