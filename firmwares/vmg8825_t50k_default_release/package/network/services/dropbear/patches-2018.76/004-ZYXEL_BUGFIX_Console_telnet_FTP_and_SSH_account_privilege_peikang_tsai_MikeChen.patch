Index: dropbear-2018.76/svr-auth.c
===================================================================
--- dropbear-2018.76.orig/svr-auth.c	2018-05-24 10:34:12.926064325 +0800
+++ dropbear-2018.76/svr-auth.c	2018-05-24 11:15:43.510109623 +0800
@@ -40,6 +40,14 @@
 #include "log.h"
 #endif
 #include <syslog.h>
+/*ZYXEL*/
+#include "zcfg_common.h"
+#include "zcfg_rdm_obj.h"
+#include "zcfg_rdm_oid.h"
+#include "zcfg_fe_rdm_struct.h"
+#include <stdlib.h>
+
+#define SSH "ssh" 
 
 static int checkusername(const char *username, unsigned int userlen);
 
@@ -232,6 +240,94 @@
 	m_free(methodname);
 }
 
+int ipType(char *src) {
+    char buf[16];
+    if (inet_pton(AF_INET, src, buf)) {
+        return AF_INET;
+    } else if (inet_pton(AF_INET6, src, buf)) {
+        return AF_INET6;
+    }
+    return -1;
+}
+
+
+int checkCidrBlock(char *spAddr, char *spSubNetMask, char *hostIp){
+	int spAddrType = 0, hostIpAddrType = 0, addrType = 0;
+	spAddrType = ipType(spAddr);
+	hostIpAddrType = ipType(hostIp);
+	if (spAddrType == hostIpAddrType){
+		addrType = spAddrType;
+	}
+	else{
+		addrType = -1;
+	}
+	if (addrType == AF_INET){
+		unsigned int ipAddr ;
+		unsigned int hostIpAddr;
+		unsigned int spAddrBytes[4] = {0};
+		unsigned int hostIpBytes[4] = {0};
+		unsigned int subNet ;
+		unsigned int mask = 0xFFFFFFFF;
+		unsigned int maskLen = 0 ;
+
+		if (sscanf(spAddr, "%u.%u.%u.%u", &spAddrBytes[0], &spAddrBytes[1], &spAddrBytes[2], &spAddrBytes[3]) != 4){
+			syslog(LOG_INFO, "'%s' Name or service not known", spAddr);
+			TRACE(("'%s' Name or service not known", spAddr))
+			send_msg_userauth_failure(0, 1);
+			return DROPBEAR_FAILURE;
+		}
+		
+		if (sscanf(hostIp, "%u.%u.%u.%u", &hostIpBytes[0], &hostIpBytes[1], &hostIpBytes[2], &hostIpBytes[3]) != 4){
+			syslog(LOG_INFO, "'%s' Name or service not known", hostIp);
+			TRACE(("'%s' Name or service not known", hostIp))
+			send_msg_userauth_failure(0, 1);
+			return DROPBEAR_FAILURE;
+		}
+		maskLen = atoi(spSubNetMask) ;
+		subNet = mask << (32 - maskLen);
+		ipAddr = (spAddrBytes[0] << 24) + (spAddrBytes[1] << 16) + (spAddrBytes[2] << 8) + spAddrBytes[3];
+		hostIpAddr = (hostIpBytes[0] << 24) + (hostIpBytes[1] << 16) + (hostIpBytes[2] << 8) + hostIpBytes[3];
+		if ((ipAddr & subNet) ==  (hostIpAddr & subNet)){
+			return 1;
+		}
+		return 0; 
+	}
+
+	else if (addrType == AF_INET6){
+		struct in6_addr localV6Addr;
+		struct in6_addr netV6Addr;
+		memset(&localV6Addr, 0, sizeof(struct in6_addr));
+		memset(&netV6Addr, 0, sizeof(struct in6_addr));
+		int maskLen = 0;
+		int index = 0;
+		unsigned char mask = 0xFF;		
+		inet_pton(AF_INET6, spAddr, &localV6Addr);
+		inet_pton(AF_INET6, hostIp, &netV6Addr);
+		maskLen = (strcmp(spSubNetMask, "") == 0 ? 128 : atoi(spSubNetMask)) ;
+
+		for (;maskLen >=8 ; maskLen -= 8){
+			if((localV6Addr.s6_addr[index] & mask) == (netV6Addr.s6_addr[index] & mask)){
+				index++;
+			}
+			else{
+				return 0;	
+			}
+		}
+		
+		if(maskLen > 0){
+			mask = ~(0xFF >> maskLen);
+			if((localV6Addr.s6_addr[index] & mask) == (netV6Addr.s6_addr[index] & mask)){
+				return 1; 
+			}
+			return 0;
+		}
+		return 1;
+	}
+	else{
+		return 0;
+	}
+}
+
 #ifdef HAVE_GETGROUPLIST
 /* returns DROPBEAR_SUCCESS or DROPBEAR_FAILURE */
 static int check_group_membership(gid_t check_gid, const char* username, gid_t user_gid) {
@@ -276,6 +372,10 @@
 	char* usershell = NULL;
 	uid_t uid;
 	char *sshaddr = NULL;
+	char *tmpPtr = NULL;
+	char remoAddr[64]; 
+	int authGpPrivilege = 1 ;
+
 #ifdef ZLD_APPS_ENABLE_CENTRALIZELOG /* Modified by ZyXEL */
 	char *pp;
 	char logStr[LOG_INFOSIZE], peeripstring[NI_MAXHOST];
@@ -285,6 +385,10 @@
 		return DROPBEAR_FAILURE;
 	}
 
+	strcpy(remoAddr,svr_ses.addrstring);
+	tmpPtr = strrchr(remoAddr,':');
+	*tmpPtr = '\0';
+
 	if (strlen(username) != userlen) {
 		dropbear_exit("Attempted username with a null byte from %s",
 			svr_ses.addrstring);
@@ -309,6 +413,49 @@
 		return DROPBEAR_FAILURE;
 	}
 
+	/*group privilege authentication */
+	objIndex_t logAccountObjIid;
+	rdm_ZyLogCfgGpAccount_t *accountObj = NULL;
+	IID_INIT(logAccountObjIid);
+	objIndex_t logGpObjIid;
+	rdm_ZyLogCfgGp_t *logGpObj = NULL;
+	IID_INIT(logGpObjIid);
+	/*SP Trust Domain RDM_OID_SP_TRUST_DOMAIN*/
+	objIndex_t spTrustDomainObjIid;
+	rdm_SpTrustDomain_t *spTrustDomainObj = NULL;
+	IID_INIT(spTrustDomainObjIid);	
+	/*If IP address match SP trust domain, do not Auth GP_Privilege */
+	while(zcfgFeObjStructGetNext(RDM_OID_SP_TRUST_DOMAIN, &spTrustDomainObjIid, (void **) &spTrustDomainObj) == ZCFG_SUCCESS) {
+	if (checkCidrBlock(spTrustDomainObj->IPAddress, spTrustDomainObj->SubnetMask, remoAddr)){
+			authGpPrivilege = 0 ; 
+			free(spTrustDomainObj);	
+			break ; 
+		}
+		free(spTrustDomainObj);
+	}
+	
+	if (authGpPrivilege){
+		while(zcfgFeObjStructGetNext(RDM_OID_ZY_LOG_CFG_GP_ACCOUNT, &logAccountObjIid, (void **) &accountObj) == ZCFG_SUCCESS) {
+			if (!strcmp(accountObj->Username, username)){
+				logGpObjIid.level = logAccountObjIid.level - 1;
+				logGpObjIid.idx[0] = logAccountObjIid.idx[0];
+				logGpObjIid.idx[1] = 0;
+				free(accountObj);
+				break ; 
+			}
+			free(accountObj);
+		}
+		if(zcfgFeObjStructGet(RDM_OID_ZY_LOG_CFG_GP, &logGpObjIid, (void **) &logGpObj) == ZCFG_SUCCESS) {
+			if (strstr(logGpObj->GP_Privilege, SSH) == NULL){
+				syslog(LOG_INFO, "Account:'%s' SSH permission denied.", username);
+				TRACE(("leave check username:'%s' SSH permission denied.", username))
+				free(logGpObj);
+				send_msg_userauth_failure(0, 1);
+				return DROPBEAR_FAILURE;
+			}
+			free(logGpObj);
+		}
+	}
 	/* check that user exists */
 	if (!ses.authstate.pw_name) {
 		sshaddr = svr_ses.addrstring;
