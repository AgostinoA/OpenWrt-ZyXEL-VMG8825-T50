Index: dnsmasq-2.67/Makefile
===================================================================
--- dnsmasq-2.67.orig/Makefile	2013-10-25 17:37:30.000000000 +0800
+++ dnsmasq-2.67/Makefile	2015-10-07 18:05:37.102960367 +0800
@@ -67,6 +67,8 @@
        helper.o tftp.o log.o conntrack.o dhcp6.o rfc3315.o \
        dhcp-common.o outpacket.o radv.o slaac.o auth.o ipset.o domain.o
 
+objs += extern.o	   
+
 hdrs = dnsmasq.h config.h dhcp-protocol.h dhcp6-protocol.h \
        dns-protocol.h radv-protocol.h
 
Index: dnsmasq-2.67/src/dnsmasq.c
===================================================================
--- dnsmasq-2.67.orig/src/dnsmasq.c	2013-10-25 17:37:30.000000000 +0800
+++ dnsmasq-2.67/src/dnsmasq.c	2015-10-07 18:05:37.102960367 +0800
@@ -81,6 +81,10 @@
   umask(022); /* known umask, create leases and pid files as 0644 */
 
   read_opts(argc, argv, compile_opts);
+  
+#ifdef ZYXEL_PATCH /* register to zyxel zcfg, by charisse*/
+  dnsmasq_eid_register();  
+#endif
     
   if (daemon->edns_pktsz < PACKETSZ)
     daemon->edns_pktsz = PACKETSZ;
Index: dnsmasq-2.67/src/dnsmasq.h
===================================================================
--- dnsmasq-2.67.orig/src/dnsmasq.h	2013-10-25 17:37:30.000000000 +0800
+++ dnsmasq-2.67/src/dnsmasq.h	2015-10-07 20:51:18.946774230 +0800
@@ -563,6 +563,10 @@
   } *slaac_address;
   int vendorclass_count;
 #endif
+#ifdef ZYXEL_PATCH
+  char *vendorid;
+  unsigned char *oui, *serial, *pclass;
+#endif
   struct dhcp_lease *next;
 };
 
@@ -1309,3 +1313,13 @@
 time_t periodic_slaac(time_t now, struct dhcp_lease *leases);
 void slaac_ping_reply(struct in6_addr *sender, unsigned char *packet, char *interface, struct dhcp_lease *leases);
 #endif
+
+/* extern.c */
+#ifdef ZYXEL_PATCH 
+void lease_set_vendor(struct dhcp_lease *, const char* , int );
+void lease_set_oui(struct dhcp_lease *, const char* , int );
+void lease_set_serial(struct dhcp_lease *, const char* , int );
+void lease_set_class(struct dhcp_lease *, const char* , int );
+void dnsmasq_eid_register(void);
+void sendLeaseMessageToESMD(int, struct dhcp_lease *, const char*);
+#endif
\ No newline at end of file
Index: dnsmasq-2.67/src/lease.c
===================================================================
--- dnsmasq-2.67.orig/src/lease.c	2013-10-25 17:37:30.000000000 +0800
+++ dnsmasq-2.67/src/lease.c	2015-10-07 20:52:19.911389405 +0800
@@ -28,7 +28,9 @@
   struct dhcp_lease *lease;
   int clid_len, hw_len, hw_type;
   FILE *leasestream;
-  
+#ifdef ZYXEL_PATCH
+  int parse_count = 0;
+#endif
   leases_left = daemon->dhcp_max;
   
   if (option_bool(OPT_LEASE_RO))
@@ -80,11 +82,16 @@
 #endif
 
 	ei = atol(daemon->dhcp_buff3);
-	
+#ifdef ZYXEL_PATCH
+	parse_count = fscanf(leasestream, " %64s %255s %764s %[^\n]s\n",
+		   daemon->namebuff, daemon->dhcp_buff, daemon->packet, daemon->dhcp_buff3);
+	if (parse_count != 3 && parse_count != 4)
+#else
 	if (fscanf(leasestream, " %64s %255s %764s",
 		   daemon->namebuff, daemon->dhcp_buff, daemon->packet) != 3)
+#endif			   
 	  break;
-	
+
 	clid_len = 0;
 	if (strcmp(daemon->packet, "*") != 0)
 	  clid_len = parse_hex(daemon->packet, (unsigned char *)daemon->packet, 255, NULL, NULL);
@@ -102,6 +109,11 @@
 	    
 	    if (strcmp(daemon->dhcp_buff, "*") !=  0)
 	      lease_set_hostname(lease, daemon->dhcp_buff, 0, get_domain(lease->addr), NULL);
+#ifdef ZYXEL_PATCH
+		if(parse_count == 4 && strcmp(daemon->dhcp_buff3, "*") != 0){
+			lease_set_vendor(lease, daemon->dhcp_buff3, strlen(daemon->dhcp_buff3)); 
+		}
+#endif		  
 	  }
 #ifdef HAVE_DHCP6
 	else if (inet_pton(AF_INET6, daemon->namebuff, &addr.addr.addr6))
@@ -124,7 +136,12 @@
 		lease_set_iaid(lease, iaid);
 		if (strcmp(daemon->dhcp_buff, "*") !=  0)
 		  lease_set_hostname(lease, daemon->dhcp_buff, 0, get_domain6((struct in6_addr *)lease->hwaddr), NULL);
-	      }
+#ifdef ZYXEL_PATCH
+		if(parse_count == 4 && strcmp(daemon->dhcp_buff3, "*") != 0){
+			lease_set_vendor(lease, daemon->dhcp_buff3, strlen(daemon->dhcp_buff3)); 
+		}
+#endif	      
+		  }
 	  }
 #endif
 	else
@@ -254,10 +271,22 @@
 	    {
 	      for (i = 0; i < lease->clid_len - 1; i++)
 		ourprintf(&err, "%.2x:", lease->clid[i]);
+#ifdef ZYXEL_PATCH
+	      ourprintf(&err, "%.2x ", lease->clid[i]);
+#else		
 	      ourprintf(&err, "%.2x\n", lease->clid[i]);
+#endif
 	    }
 	  else
-	    ourprintf(&err, "*\n");	  
+#ifdef ZYXEL_PATCH	  
+	    ourprintf(&err, "* ");	
+#else
+	    ourprintf(&err, "*\n");	
+#endif
+
+#ifdef ZYXEL_PATCH
+      ourprintf(&err, "%s\n", (lease->vendorid) ? lease->vendorid : "*");
+#endif
 	}
       
 #ifdef HAVE_DHCP6  
@@ -290,10 +319,22 @@
 		{
 		  for (i = 0; i < lease->clid_len - 1; i++)
 		    ourprintf(&err, "%.2x:", lease->clid[i]);
-		  ourprintf(&err, "%.2x\n", lease->clid[i]);
+#ifdef ZYXEL_PATCH			
+		  ourprintf(&err, "%.2x ", lease->clid[i]);
+#else		
+	      ourprintf(&err, "%.2x\n", lease->clid[i]);
+#endif		  
 		}
 	      else
-		ourprintf(&err, "*\n");	  
+#ifdef ZYXEL_PATCH		  
+		ourprintf(&err, "* ");	
+#else		
+		ourprintf(&err, "*\n");	
+#endif	
+
+#ifdef ZYXEL_PATCH
+      ourprintf(&err, "%s\n", (lease->vendorid) ? lease->vendorid : "*");
+#endif		
 	    }
 	}
 #endif      
@@ -978,6 +1019,76 @@
     lease->flags |= LEASE_CHANGED; 
 }
 
+#ifdef ZYXEL_PATCH
+void lease_set_vendor(struct dhcp_lease *lease, const char* vendor, int len)
+{
+	char *new_vendor = NULL;
+
+	if(vendor <= 0) return;
+	if(lease->vendorid){
+		if(!strcmp(lease->vendorid, vendor)) return;
+		free(lease->vendorid);
+		lease->vendorid = NULL;
+	}
+	if ((new_vendor = whine_malloc(len + 1))){
+		strncpy(new_vendor, vendor, len);
+		*(new_vendor+len) = '\0';
+	}
+	
+	lease->vendorid = new_vendor;
+	
+	lease->flags |= LEASE_CHANGED;
+}
+void lease_set_oui(struct dhcp_lease *lease, const char* value, int len)
+{
+	char *new_val = NULL;
+	
+	if(value <= 0) return;
+	if(lease->oui){
+		free(lease->oui);
+		lease->oui = NULL;
+	}
+	if ((new_val = whine_malloc(len + 1))){
+		strncpy(new_val, value, len);
+		*(new_val+len) = '\0';
+	}
+	
+	lease->oui = new_val;
+}
+void lease_set_serial(struct dhcp_lease *lease, const char* value, int len)
+{
+	char *new_val = NULL;
+	
+	if(value <= 0) return;
+	if(lease->serial){
+		free(lease->serial);
+		lease->serial = NULL;
+	}
+	if ((new_val = whine_malloc(len + 1))){
+		strncpy(new_val, value, len);
+		*(new_val+len) = '\0';
+	}
+	
+	lease->serial = new_val;
+}
+void lease_set_class(struct dhcp_lease *lease, const char* value, int len)
+{
+	char *new_val = NULL;
+	
+	if(value <= 0) return;
+	if(lease->pclass){
+		free(lease->pclass);
+		lease->pclass = NULL;
+	}
+	if ((new_val = whine_malloc(len + 1))){
+		strncpy(new_val, value, len);
+		*(new_val+len) = '\0';
+	}
+	
+	lease->pclass = new_val;
+}
+#endif
+
 /* deleted leases get transferred to the old_leases list.
    remove them here, after calling the lease change
    script. Also run the lease change script on new/modified leases.
@@ -1020,6 +1131,9 @@
 	      free(slaac);
 	    }
 #endif
+#ifdef ZYXEL_PATCH
+      sendLeaseMessageToESMD(ACTION_DEL, lease, NULL);
+#endif
 	  kill_name(lease);
 #ifdef HAVE_SCRIPT
 	  queue_script(ACTION_DEL, lease, lease->old_hostname, now);
@@ -1029,6 +1143,20 @@
 #endif
 	  old_leases = lease->next;
 	  
+#ifdef ZYXEL_PATCH
+      if(lease->vendorid){
+	     free(lease->vendorid);
+	  }
+	  if(lease->oui){
+	     free(lease->oui);
+	  }
+	  if(lease->serial){
+	     free(lease->serial);
+	  }
+	  if(lease->pclass){
+	     free(lease->pclass);
+	  }
+#endif
 	  free(lease->old_hostname); 
 	  free(lease->clid);
 	  free(lease->extradata);
Index: dnsmasq-2.67/src/rfc2131.c
===================================================================
--- dnsmasq-2.67.orig/src/rfc2131.c	2013-10-25 17:37:30.000000000 +0800
+++ dnsmasq-2.67/src/rfc2131.c	2015-10-07 20:51:19.006774229 +0800
@@ -93,7 +93,9 @@
   struct dhcp_opt *o;
   unsigned char pxe_uuid[17];
   unsigned char *oui = NULL, *serial = NULL, *class = NULL;
-
+#ifdef ZYXEL_PATCH
+  char *vendor_class_ptr = NULL;
+#endif
   subnet_addr.s_addr = override.s_addr = 0;
 
   /* set tag with name == interface */
@@ -456,6 +458,9 @@
     {
       memcpy(daemon->dhcp_buff3, option_ptr(opt, 0), option_len(opt));
       vendor_class_len = option_len(opt);
+#ifdef ZYXEL_PATCH
+      vendor_class_ptr = option_ptr(opt, 0);
+#endif	  
     }
   match_vendor_opts(opt, daemon->dhcp_opts);
   
@@ -598,6 +603,16 @@
 	      lease_set_hwaddr(lease, mess->chaddr, NULL, mess->hlen, mess->htype, 0, now, 1);
 	      if (hostname)
 		lease_set_hostname(lease, hostname, 1, get_domain(lease->addr), domain); 
+#ifdef ZYXEL_PATCH
+			if(vendor_class_len)
+				lease_set_vendor(lease, vendor_class_ptr, vendor_class_len); 
+			if(oui)
+				lease_set_oui(lease, option_ptr(oui, 0), option_len(oui));
+			if(serial)
+				lease_set_serial(lease, option_ptr(serial, 0), option_len(serial)); 	
+			if(class)
+				lease_set_class(lease, option_ptr(class, 0), option_len(class)); 		
+#endif		
 	      /* infinite lease unless nailed in dhcp-host line. */
 	      lease_set_expires(lease,  
 				have_config(config, CONFIG_TIME) ? config->lease_time : 0xffffffff, 
@@ -1346,7 +1361,16 @@
 
 	  if (hostname)
 	    lease_set_hostname(lease, hostname, hostname_auth, get_domain(lease->addr), domain);
-	  
+#ifdef ZYXEL_PATCH
+		if(vendor_class_len)
+			lease_set_vendor(lease, vendor_class_ptr, vendor_class_len); 
+		if(oui)
+			lease_set_oui(lease, option_ptr(oui, 0), option_len(oui));
+		if(serial)
+			lease_set_serial(lease, option_ptr(serial, 0), option_len(serial)); 	
+		if(class)
+			lease_set_class(lease, option_ptr(class, 0), option_len(class)); 	
+#endif	
 	  lease_set_expires(lease, time, now);
 	  lease_set_interface(lease, int_index, now);
 
@@ -1370,6 +1394,9 @@
 	    }
 	  do_options(context, mess, end, req_options, hostname, get_domain(mess->yiaddr), 
 		     netid, subnet_addr, fqdn_flags, borken_opt, pxearch, uuid, vendor_class_len, now);
+#ifdef ZYXEL_PATCH
+      sendLeaseMessageToESMD(ACTION_ADD, lease, iface_name);
+#endif
 	}
 
       return dhcp_packet_size(mess, agent_id, real_end); 
Index: dnsmasq-2.67/src/extern.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ dnsmasq-2.67/src/extern.c	2015-10-07 20:51:18.610774236 +0800
@@ -0,0 +1,134 @@
+#ifdef ZYXEL_PATCH
+#include <stdio.h>
+#include <string.h>
+#include "dnsmasq.h"
+
+/*ZyXEL zcfg*/
+#include "zcfg_common.h"
+#include "zcfg_debug.h"
+#include "zcfg_msg.h"
+
+
+void dnsmasq_eid_register( void ){	
+	zcfgRet_t retzcfg;
+	
+	/*Register dnsmasq eid which is defined in zcfg_eid.h*/
+	zcfgEidInit(ZCFG_EID_DNSMASQ, NULL);
+	
+	/*init message server*/
+	retzcfg = zcfgMsgServerInit();
+	if(retzcfg != ZCFG_SUCCESS) {
+		zcfgLog(ZCFG_LOG_ERR, "Dnsmasq message  server init fail\n");
+		return 0;
+	}
+}
+
+static zcfgRet_t dnsmasq_msg_send(int msg_type, int payloadLen, const char *payload, char **reply)
+{
+	zcfgRet_t ret = 0;
+	void *sendBuf = NULL;
+	void *recvBuf = NULL;
+	zcfgMsg_t *sendMsgHdr = NULL;
+	zcfgMsg_t *recvMsgHdr = NULL;
+	char *recv_str = NULL;
+	int buf_size = 0;
+
+	buf_size = sizeof(zcfgMsg_t)+payloadLen+1;
+	sendBuf = calloc(1,buf_size);
+	sendMsgHdr = (zcfgMsg_t*)sendBuf;
+
+	sendMsgHdr->type = msg_type;
+	sendMsgHdr->length = payloadLen+1;
+	sendMsgHdr->srcEid = ZCFG_EID_DNSMASQ;
+	sendMsgHdr->dstEid = ZCFG_EID_ESMD;
+	if(payload != NULL)
+		memcpy(sendBuf+sizeof(zcfgMsg_t), payload, payloadLen);
+
+	ret = zcfgMsgSendAndGetReply(sendMsgHdr,  (zcfgMsg_t **)&recvBuf, 0);
+	if(ret == ZCFG_SUCCESS) {
+		recvMsgHdr = (zcfgMsg_t*)recvBuf;
+		if(recvMsgHdr){
+			if(recvMsgHdr->type == RESPONSE_SUCCESS) {
+				recv_str = (char *)recvBuf+sizeof(zcfgMsg_t);
+				if(recvMsgHdr->length > 0 && reply){
+					*reply = calloc(1, recvMsgHdr->length+1);
+					if(*reply) memcpy(*reply, recv_str, recvMsgHdr->length);
+				}
+			}
+			free(recvBuf);
+		}
+	}
+		
+	return ret;
+}
+
+void sendLeaseMessageToESMD(int action, struct dhcp_lease *lease, const char *ifname)
+{
+	zcfgRet_t ret = 0;
+	char buf[2048] = {0}, *bufPtr, tmp[256] = {0}, *tmpPtr;
+	char *actionStr = NULL;
+	int i;
+	my_syslog(MS_DHCP | LOG_INFO, "%s ", __func__);
+	
+	bufPtr = buf;
+	bufPtr += sprintf(bufPtr, "{");
+	
+	switch(action){
+		case ACTION_ADD:
+			actionStr = "add";
+			break;
+		case ACTION_DEL:
+			actionStr = "del";
+			break;
+		case ACTION_OLD_HOSTNAME:
+		case ACTION_OLD:
+			actionStr = "up";
+			break;
+	}
+	if(actionStr)
+		bufPtr += sprintf(bufPtr, "\"ac\":\"%s\",", actionStr);
+	
+	bufPtr += sprintf(bufPtr, "\"expire\":\"%lu\",", lease->expires);
+	
+	tmpPtr = tmp;
+	for (i = 0; i < lease->hwaddr_len-1; i++)
+		tmpPtr += sprintf(tmpPtr, "%.2x:", lease->hwaddr[i]);
+	tmpPtr += sprintf(tmpPtr, "%.2x", lease->hwaddr[i]);	
+	bufPtr += sprintf(bufPtr, "\"mac\":\"%s\",", tmp);
+	
+#ifdef HAVE_DHCP6
+	if ((lease->flags & (LEASE_TA | LEASE_NA))){
+		bufPtr += sprintf(bufPtr, "\"ip\":\"%s\",", inet_ntop(AF_INET6, &lease->addr6, tmp, ADDRSTRLEN));
+	}
+	else
+#endif	
+	bufPtr += sprintf(bufPtr, "\"ip\":\"%s\",", inet_ntop(AF_INET, &lease->addr, tmp, ADDRSTRLEN));
+	
+	bufPtr += sprintf(bufPtr, "\"host\":\"%s\",", (lease->hostname) ? lease->hostname : "*");
+	//option 60
+	bufPtr += sprintf(bufPtr, "\"vendor\":\"%s\",", (lease->vendorid) ? lease->vendorid : "*");
+	//option 125
+	bufPtr += sprintf(bufPtr, "\"moui\":\"%s\",", (lease->oui) ? lease->oui : "*");
+	bufPtr += sprintf(bufPtr, "\"serial\":\"%s\",", (lease->serial) ? lease->serial : "*");
+	bufPtr += sprintf(bufPtr, "\"pclass\":\"%s\",", (lease->pclass) ? lease->pclass : "*");
+	//option 61
+	if (lease->clid && lease->clid_len != 0) {
+		tmpPtr = tmp;
+		for (i = 0; i < lease->clid_len - 1; i++)
+			tmpPtr += sprintf(tmpPtr, "%.2x:", lease->clid[i]);
+		tmpPtr += sprintf(tmpPtr, "%.2x", lease->clid[i]);	
+	}
+	else sprintf(tmp, "*");
+	bufPtr += sprintf(bufPtr, "\"cid\":\"%s\",", tmp);
+	
+	bufPtr += sprintf(bufPtr, "\"ifname\":\"%s\"", (ifname) ? ifname : "*");
+	bufPtr += sprintf(bufPtr, "}");
+	
+	bufPtr = '\0';
+	
+	my_syslog(MS_DHCP | LOG_INFO, "%s send to esmd buf = %s", __func__, buf);
+	ret = dnsmasq_msg_send(ZCFG_MSG_DHCPD_OPTION, strlen(buf), buf, NULL);
+	my_syslog(MS_DHCP | LOG_INFO, "%s esmd reply=%d", __func__, ret);
+}
+
+#endif
Index: dnsmasq-2.67/src/util.c
===================================================================
--- dnsmasq-2.67.orig/src/util.c	2013-10-25 17:37:30.000000000 +0800
+++ dnsmasq-2.67/src/util.c	2015-10-07 18:05:37.110960367 +0800
@@ -302,7 +302,9 @@
   
   return 1;
 }
-    
+#ifdef ZYXEL_PATCH
+#include <sys/sysinfo.h>
+#endif
 time_t dnsmasq_time(void)
 {
 #ifdef HAVE_BROKEN_RTC
@@ -314,8 +316,14 @@
 
   return (time_t)(times(&dummy)/tps);
 #else
+#ifdef ZYXEL_PATCH
+	struct sysinfo sysinfoObject;
+	sysinfo(&sysinfoObject);
+	return sysinfoObject.uptime;
+#else
   return time(NULL);
 #endif
+#endif
 }
 
 int is_same_net(struct in_addr a, struct in_addr b, struct in_addr mask)
