Index: dnsmasq-2.67/src/dnsmasq.h
===================================================================
--- dnsmasq-2.67.orig/src/dnsmasq.h	2014-12-19 13:35:24.156204774 +0800
+++ dnsmasq-2.67/src/dnsmasq.h	2014-12-19 13:37:10.280636391 +0800
@@ -699,6 +699,12 @@
   struct dhcp_mac *next;
 };
 
+struct dhcp_ifname {
+  char ifname[IF_NAMESIZE];
+  struct dhcp_netid netid;
+  struct dhcp_ifname *next;
+};
+
 struct dhcp_bridge {
   char iface[IF_NAMESIZE];
   struct dhcp_bridge *alias, *next;
@@ -935,6 +941,7 @@
 
   /* utility string buffer, hold max sized IP address as string */
   char *addrbuff;
+  struct dhcp_ifname *dhcp_ifnames;
 
 } *daemon;
 
Index: dnsmasq-2.67/src/option.c
===================================================================
--- dnsmasq-2.67.orig/src/option.c	2014-12-19 13:35:24.148204774 +0800
+++ dnsmasq-2.67/src/option.c	2014-12-19 13:37:55.579230477 +0800
@@ -138,6 +138,7 @@
 #define LOPT_QUIET_DHCP   326
 #define LOPT_QUIET_DHCP6  327
 #define LOPT_QUIET_RA     328
+#define LOPT_SUBNET       329
 
 
 #ifdef HAVE_GETOPT_LONG
@@ -282,6 +283,7 @@
     { "quiet-dhcp", 0, 0, LOPT_QUIET_DHCP },
     { "quiet-dhcp6", 0, 0, LOPT_QUIET_DHCP6 },
     { "quiet-ra", 0, 0, LOPT_QUIET_RA },
+    { "dhcp-ifname", 1, 0,  LOPT_SUBNET},
     { NULL, 0, 0, 0 }
   };
 
@@ -431,6 +433,7 @@
   { LOPT_QUIET_DHCP, OPT_QUIET_DHCP, NULL, gettext_noop("Do not log routine DHCP."), NULL },
   { LOPT_QUIET_DHCP6, OPT_QUIET_DHCP6, NULL, gettext_noop("Do not log routine DHCPv6."), NULL },
   { LOPT_QUIET_RA, OPT_QUIET_RA, NULL, gettext_noop("Do not log RA."), NULL },
+  { LOPT_SUBNET, ARG_DUP, "set:<tag>,<ifname>", gettext_noop("Map interface name to option set."), NULL },
   { 0, 0, NULL, NULL, NULL }
 }; 
 
@@ -3122,6 +3125,23 @@
 	  }
       }
       break;
+
+    case LOPT_SUBNET:  /* --dhcp-ifname */
+      {
+	if (!(comma = split(arg)))
+	  ret_err(gen_err);
+	else
+	  {
+	    struct dhcp_ifname *new = opt_malloc(sizeof(struct dhcp_ifname));
+	    new->netid.net = opt_string_alloc(set_prefix(arg));
+		arg = comma;
+		strcpy(new->ifname, arg);
+
+		new->next = daemon->dhcp_ifnames;
+		daemon->dhcp_ifnames = new;
+	  }
+      }
+      break;
 
 #ifdef OPTION6_PREFIX_CLASS 
     case LOPT_PREF_CLSS: /* --dhcp-prefix-class */
Index: dnsmasq-2.67/src/rfc2131.c
===================================================================
--- dnsmasq-2.67.orig/src/rfc2131.c	2014-12-19 13:35:24.156204774 +0800
+++ dnsmasq-2.67/src/rfc2131.c	2014-12-19 13:38:27.267217191 +0800
@@ -61,6 +61,7 @@
 static int prune_vendor_opts(struct dhcp_netid *netid);
 static struct dhcp_opt *pxe_opts(int pxe_arch, struct dhcp_netid *netid, struct in_addr local, time_t now);
 struct dhcp_boot *find_boot(struct dhcp_netid *netid);
+static int find_ifname(unsigned char *subnet_mac, int len, char *ifname, char *interface);
 
   
 size_t dhcp_reply(struct dhcp_context *context, char *iface_name, int int_index,
@@ -70,6 +71,7 @@
   struct dhcp_lease *ltmp, *lease = NULL;
   struct dhcp_vendor *vendor;
   struct dhcp_mac *mac;
+  struct dhcp_ifname *ifname;
   struct dhcp_netid_list *id_list;
   int clid_len = 0, ignore = 0, do_classes = 0, selecting = 0, pxearch = -1;
   struct dhcp_packet *mess = (struct dhcp_packet *)daemon->dhcp_packet.iov_base;
@@ -283,7 +285,15 @@
       /* find mac to use for logging and hashing */
       emac = extended_hwaddr(mess->htype, mess->hlen, mess->chaddr, clid_len, clid, &emac_len);
     }
-  
+
+	for (ifname = daemon->dhcp_ifnames; ifname; ifname = ifname->next){
+
+		if(find_ifname(mess->chaddr, mess->hlen, ifname->ifname, iface_name)){
+			ifname->netid.next = netid;
+			netid = &ifname->netid;
+		}
+	}
+
   for (mac = daemon->dhcp_macs; mac; mac = mac->next)
     if (mac->hwaddr_len == mess->hlen &&
 	(mac->hwaddr_type == mess->htype || mac->hwaddr_type == 0) &&
@@ -292,7 +302,7 @@
 	mac->netid.next = netid;
 	netid = &mac->netid;
       }
-  
+
   /* Determine network for this packet. Our caller will have already linked all the 
      contexts which match the addresses of the receiving interface but if the 
      machine has an address already, or came via a relay, or we have a subnet selector, 
@@ -2188,6 +2198,38 @@
   return boot;
 }
 
+static int find_ifname(unsigned char *subnet_mac, int len, char *ifname, char *interface)
+{
+	FILE *fp;
+	char sysCmd[128] = {0};
+	char line[128] = {0};
+
+	int sub_mac_idx = 0;
+	char mac_value[32]={0};
+
+	for(sub_mac_idx = 0 ; sub_mac_idx < len ; sub_mac_idx++){
+		if(0 == sub_mac_idx){
+			sprintf(mac_value, "%02x", subnet_mac[sub_mac_idx]);
+		}else{
+			sprintf(mac_value, "%s:%02x", mac_value, subnet_mac[sub_mac_idx]);
+		}
+	}
+
+	sprintf(sysCmd, "brctl showmacs %s | grep %s", interface, mac_value);
+	fp = popen(sysCmd, "r");
+
+	if(fp){
+		while(fgets(line, sizeof(line), fp) != NULL){
+			if(strstr(line, ifname) != NULL){
+				pclose(fp);
+				return 1;
+			}
+		}
+		pclose(fp);
+	}
+	return 0;
+}
+
 static void do_options(struct dhcp_context *context,
 		       struct dhcp_packet *mess,
 		       unsigned char *end, 
