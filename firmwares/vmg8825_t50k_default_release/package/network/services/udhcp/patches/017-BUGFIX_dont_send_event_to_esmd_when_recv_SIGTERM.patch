Index: udhcp-0.9.8/dhcpc.c
===================================================================
--- udhcp-0.9.8.orig/dhcpc.c	2016-02-15 13:34:33.879577698 +0800
+++ udhcp-0.9.8/dhcpc.c	2016-02-15 14:30:26.475169277 +0800
@@ -207,7 +207,7 @@
 }
 
 /* perform a release */
-static void perform_release(void)
+static void perform_release(int notifyEsmd)
 {
 	char buffer[16];
 	struct in_addr temp_addr;
@@ -227,21 +227,22 @@
 		LOG(LOG_INFO, "Unicasting a release of %s to %s", 
 				inet_ntoa(temp_addr), buffer);
 #if 1   /* send ZCFG_MSG_DHCP_RELEASE to ESMD for notification, ZyXEL, John  */
-		dhcpc_opt = json_object_new_object();
+		if(notifyEsmd){
+			dhcpc_opt = json_object_new_object();
 
-		tmpIp = (unsigned char *) &requested_ip;
-		sprintf(ip, "%d.%d.%d.%d", tmpIp[0], tmpIp[1], tmpIp[2], tmpIp[3]);
-		json_object_object_add(dhcpc_opt, "ip", json_object_new_string(ip));
-
-		json_object_object_add(dhcpc_opt, "addressAssigned", json_object_new_boolean(false));
-		json_object_object_add(dhcpc_opt, "pidfile", json_object_new_string(client_config.pidfile));
-
-		payload = json_object_to_json_string(dhcpc_opt);
-
-		payloadLen = strlen(payload) + 1;
-		dhcpMsgSend(ZCFG_MSG_DHCPC_RELEASE, ZCFG_EID_ESMD, payloadLen, payload);
-		json_object_put(dhcpc_opt);
-						
+			tmpIp = (unsigned char *) &requested_ip;
+			sprintf(ip, "%d.%d.%d.%d", tmpIp[0], tmpIp[1], tmpIp[2], tmpIp[3]);
+			json_object_object_add(dhcpc_opt, "ip", json_object_new_string(ip));
+
+			json_object_object_add(dhcpc_opt, "addressAssigned", json_object_new_boolean(false));
+			json_object_object_add(dhcpc_opt, "pidfile", json_object_new_string(client_config.pidfile));
+
+			payload = json_object_to_json_string(dhcpc_opt);
+
+			payloadLen = strlen(payload) + 1;
+			dhcpMsgSend(ZCFG_MSG_DHCPC_RELEASE, ZCFG_EID_ESMD, payloadLen, payload);
+			json_object_put(dhcpc_opt);
+		}			
 #endif
 		send_release(server_addr, requested_ip, client_config.interface); /* unicast */
 
@@ -876,12 +877,12 @@
 				perform_renew();
 				break;
 			case SIGUSR2:
-				perform_release();
+				perform_release(1);
 				break;
 			case SIGTERM:
 				LOG(LOG_INFO, "Received SIGTERM");
 #ifdef SUNRISE_RELEASE_DHCP_PPP_BEFORE_IFDOWN
-				perform_release();
+				perform_release(0);
 #endif
 				exit_client(0);
 			}
