Index: udhcp-0.9.8/Makefile
===================================================================
--- udhcp-0.9.8.orig/Makefile	2014-02-25 18:48:43.168079367 +0800
+++ udhcp-0.9.8/Makefile	2014-02-25 18:50:51.667415521 +0800
@@ -71,6 +71,9 @@
 ifneq ($(strip $(SUNRISE_DHCP_FORCE_RENEW)),)
 CFLAGS += -DSUNRISE_DHCP_FORCE_RENEW
 endif
+ifneq ($(strip $(SUNRISE_DHCP_OPTION58_OPTION59)),)
+CFLAGS += -DSUNRISE_DHCP_OPTION58_OPTION59
+endif
 
 all: clean $(EXEC1) $(EXEC2) $(EXEC3)
 	$(STRIP) --remove-section=.note --remove-section=.comment $(EXEC1) $(EXEC2) $(EXEC3)
Index: udhcp-0.9.8/dhcpc.c
===================================================================
--- udhcp-0.9.8.orig/dhcpc.c	2014-02-25 18:48:43.168079367 +0800
+++ udhcp-0.9.8/dhcpc.c	2014-02-25 18:51:11.173429952 +0800
@@ -650,11 +650,30 @@
 						memcpy(&lease, temp, 4);
 						lease = ntohl(lease);
 					}
+#ifdef SUNRISE_DHCP_OPTION58_OPTION59 /*Support DHCP option for option 58 and 59*/
+					if (!(temp = get_option(&packet, DHCP_T1))) {
+						LOG(LOG_ERR, "No Renewal time with ACK, using leasetime/2");
+						t1 = lease / 2;
+					} 
+					else {
+						memcpy(&t1, temp, 4);
+						t1 = ntohl(t1);
+					}
+					if (!(temp = get_option(&packet, DHCP_T2))) {
+						LOG(LOG_ERR, "No Rebinding time with ACK, using (leasetime*0.875)");
+						t2 = (lease * 0x7) >> 3;
+					} 
+					else {
+						memcpy(&t2, temp, 4);
+						t2 = ntohl(t2);
+					}					
+#else						
 					/* enter bound state */
 					t1 = lease / 2;
 					
 					/* little fixed point for n * .875 */
 					t2 = (lease * 0x7) >> 3;
+#endif
 					temp_addr.s_addr = packet.yiaddr;
 					LOG(LOG_INFO, "Lease of %s obtained, lease time %ld", 
 						inet_ntoa(temp_addr), lease);
