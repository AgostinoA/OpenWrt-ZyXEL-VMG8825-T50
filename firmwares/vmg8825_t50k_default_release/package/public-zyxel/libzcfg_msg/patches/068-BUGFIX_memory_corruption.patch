Index: libzcfg_msg-1.0/zcfg_msg.c
===================================================================
--- libzcfg_msg-1.0.orig/zcfg_msg.c
+++ libzcfg_msg-1.0/zcfg_msg.c
@@ -154,7 +154,7 @@ _retry:
 		}
 
 		/* malloc recv buf size according to length field in msg header */
-		if((*recvBuf = (zcfgMsg_t *)malloc(sizeof(zcfgMsg_t)+rcvMsg.length)) == NULL){
+		if((*recvBuf = (zcfgMsg_t *)calloc(sizeof(zcfgMsg_t)+rcvMsg.length+1, 1)) == NULL){
 			zcfgLog(ZCFG_LOG_ERR, "fail to allocate receive buffer. In %s\n", __FUNCTION__);
 			//close(new_fd);
 			//close(myMsgfd);
@@ -162,7 +162,7 @@ _retry:
 		}
 
 		/* copy header to recv buf */
-		memset((void *)(*recvBuf), 0, sizeof(zcfgMsg_t)+rcvMsg.length);
+		//memset((void *)(*recvBuf), 0, sizeof(zcfgMsg_t)+rcvMsg.length);
 		//memcpy(*recvBuf, &rcvMsg, sizeof(zcfgMsg_t));
 		//buf = *recvBuf + 1;
 #if 0
@@ -367,14 +367,14 @@ zcfgRet_t zcfgMsgSendAndGetReply(zcfgMsg
 		}
 
 		/* malloc recv buf size according to length field in msg header */
-		if((*replyMsg = (zcfgMsg_t *)malloc(sizeof(zcfgMsg_t)+rcvMsg.length)) == NULL){
+		if((*replyMsg = (zcfgMsg_t *)calloc(sizeof(zcfgMsg_t)+rcvMsg.length+1, 1)) == NULL){
 			zcfgLog(ZCFG_LOG_ERR, "fail to allocate receive buffer. In %s\n", __FUNCTION__);
 			close(fd);
 			unlink(clientaddr.sun_path);
 			return ZCFG_INTERNAL_ERROR;
 		}
 
-		memset((void *)(*replyMsg), 0, sizeof(zcfgMsg_t)+rcvMsg.length);
+		//memset((void *)(*replyMsg), 0, sizeof(zcfgMsg_t)+rcvMsg.length);
 
 		rcvSize = recvfrom(fd, (char *)(*replyMsg), sizeof(zcfgMsg_t)+rcvMsg.length, 0, (struct sockaddr*)&serveraddr, &len);
 		if(rcvSize != (sizeof(zcfgMsg_t)+rcvMsg.length)){
