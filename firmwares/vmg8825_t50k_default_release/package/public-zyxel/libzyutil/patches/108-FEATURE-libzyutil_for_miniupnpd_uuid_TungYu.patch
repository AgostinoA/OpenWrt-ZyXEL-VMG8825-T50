Index: libzyutil-1.0/common.c
===================================================================
--- libzyutil-1.0.orig/common.c	2019-06-26 16:56:42.843804445 +0800
+++ libzyutil-1.0/common.c	2019-06-26 18:17:29.855751926 +0800
@@ -861,6 +861,62 @@
 	return ((addr1 & mask) == (addr2 & mask)) ? 0 : 1;
 }
 
+zcfgRet_t zyUtilIGetBridgeIPAddr(char *ipAddress)
+{
+	zcfgRet_t ret = ZCFG_INTERNAL_ERROR;
+	FILE *fp = NULL;
+	char tmpStr[64] = {'\0'};
+	char brIP[16] = {'\0'};
+	char tmpPath[] = "/tmp/brIP";
+
+	sprintf(tmpStr, "ifconfig br0 > %s", tmpPath);
+	ZOS_SYSTEM(tmpStr);
+	memset(tmpStr, 0, sizeof(tmpStr));
+
+	if ((fp = fopen(tmpPath, "r")) != NULL)
+	{
+		while (fgets(tmpStr, sizeof(tmpStr), fp) != NULL)
+		{
+			if (!strstr(tmpStr, "inet addr"))
+				continue;
+			sscanf(tmpStr, "          inet addr:%s", brIP);
+			strncpy(ipAddress, brIP, 16);
+printf("%s\n", brIP);
+			ret = ZCFG_SUCCESS;
+		}
+		fclose(fp);
+		//ulink(tmpPath);
+	}
+	return ret;
+}
+
+zcfgRet_t zyUtilIGetUPnPuuid(char *uuid)
+{
+	zcfgRet_t ret = ZCFG_INTERNAL_ERROR;
+	FILE *fp_uuid = NULL;
+	char uuidStr[96] = {'\0'};
+	char MACAddr[16] = {'\0'};
+	char tmpStr[64] = {'\0'};
+
+	if (zyUtilIGetBaseMAC(MACAddr) == ZCFG_SUCCESS)
+	{
+		if ((fp_uuid = fopen(SYSTEM_UUID_PATH, "r")) != NULL)
+		{
+			if (fgets(tmpStr, sizeof(tmpStr), fp_uuid) != NULL)
+			{
+				strncpy(uuidStr, tmpStr, 24);
+				for(int i=0; i<sizeof(MACAddr); i++)
+					MACAddr[i] = tolower(MACAddr[i]);
+				strcat(uuidStr, MACAddr);
+				strncpy(uuid, uuidStr, 37); //uuid size 36 + EOL
+				ret = ZCFG_SUCCESS;
+			}
+			fclose(fp_uuid);
+		}
+	}
+	return ret;
+}
+
 #ifdef ZCFG_LOG_USE_DEBUGCFG
 int zyUtilQueryUtilityEid(const char *name)
 {
Index: libzyutil-1.0/zyutil.h
===================================================================
--- libzyutil-1.0.orig/zyutil.h	2019-06-26 16:56:42.819804445 +0800
+++ libzyutil-1.0/zyutil.h	2019-06-26 17:59:07.047763875 +0800
@@ -46,6 +46,9 @@
 bool zyUtilRetrieveSystemDefaultRoutIface(char *interfaceName);
 zcfgRet_t zyUtilValidIpAddr(const char *);
 int zyUtilIp4AddrDomainCmp(const char *, const char *, const char *);
+#define SYSTEM_UUID_PATH       "/proc/sys/kernel/random/uuid"
+zcfgRet_t zyUtilIGetBridgeIPAddr(char *ipAddress);
+zcfgRet_t zyUtilIGetUPnPuuid(char *uuid);
 
 bool zyUtilFileExists(const char * filename);
 
