Index: libzyutil-1.0/common.c
===================================================================
--- libzyutil-1.0.orig/common.c	2017-10-02 10:24:26.823595506 +0800
+++ libzyutil-1.0/common.c	2017-10-02 11:01:44.678300000 +0800
@@ -346,7 +346,7 @@
 #if 1
 void zyUtilBackslashInsert(char *str)
 {
-	char tmpStr[128] = {};
+	char tmpStr[513] = {};
 	int i = 0, j = 0, sym = 0;
 	
 	for (i=0; i<strlen(str); i++) {
@@ -368,7 +368,7 @@
 
 void zyUtilBackslashInForEcho(char *str)
 {
-	char tmpStr[128] = {};
+	char tmpStr[513] = {};
 	int i = 0, j = 0, sym = 0;
 	
 	for (i=0; i<strlen(str); i++) {
@@ -1040,49 +1040,65 @@
 	return ret;
 }
 
-#define TEMPFILE "/var/tmps"
-char *zyUtilGetUserShadow(const char *username)
-{
-	static char shadow[512];
-	char cmd[512] = {0};
-	int fd;
-
-	if (username == NULL) return NULL;
-	sprintf(cmd, "grep -wr '%s' /etc/shadow > %s", username, TEMPFILE);
-	system(cmd);
-	memset(&shadow[0], 0, sizeof(shadow));
-	fd = open(TEMPFILE, O_RDONLY);
-	if (fd < 0) {
-		printf("%s.%d: cant not open file! \n", __func__, __LINE__);
-		return NULL;
-	}
-	read(fd, shadow, 512);
-	close(fd);
-	sprintf(cmd, "rm %s", TEMPFILE);
-	system(cmd);
-	return &shadow[0];
-}
+char *zyGetAccountInfoFromFile(char *username, char *filePath){
+    static char accountInfo[513] = {0};
+    FILE *fp;
+
+    fp = fopen(filePath, "r");
+    if(fp == NULL){
+        printf("%s: cannot open file '%s'!\n", __FUNCTION__, filePath);
+        return NULL;
+    }
+
+    memset(accountInfo, 0, sizeof(accountInfo));
+    while(fgets(accountInfo, sizeof(accountInfo), fp) != NULL){
+        if(strncmp(username, accountInfo, strlen(username)) == 0){
+            fclose(fp);
+            return accountInfo;
+        }
+    }
 
-#define TEMPFILE1 "/var/samtmps"
-char *zyUtilGetUserSambaPwd(const char *username)
-{
-	static char passwd[512];
-	char cmd[512] = {0};
-	int fd;
+    printf("%s: cannot find account '%s' in '%s'!", __FUNCTION__, username, filePath);
+    fclose(fp);
+    return NULL;
+}
+
+void zyRemoveAccountInfoFromFile(char *username, char *filePath){
+    char strBuff[513] = {0};
+    char *tmpFilePath = NULL;
+    FILE *fp;
+    FILE *tmpFp;
+
+    fp = fopen(filePath, "r");
+    if(fp == NULL){
+        printf("%s: cannot open file '%s'!\n", __FUNCTION__, filePath);
+        return;
+    }
+
+    tmpFilePath = malloc(sizeof(char) * (strlen(filePath) + 4 + 1));
+    sprintf(tmpFilePath, "%s.tmp", filePath);
+    tmpFp = fopen(tmpFilePath, "w");
+    if(tmpFp == NULL){
+        printf("%s: cannot create tmp file '%s'!\n", __FUNCTION__, tmpFilePath);
+        fclose(fp);
+        free(tmpFilePath);
+        return;
+    }
+
+    while(fgets(strBuff, sizeof(strBuff), fp) != NULL){
+        if(strncmp(username, strBuff, sizeof(username)) != 0){
+            fputs(strBuff, tmpFp);
+        }
+        memset(strBuff, 0, sizeof(strBuff));
+    }
+    fclose(tmpFp);
+    fclose(fp);
+
+    sprintf(strBuff, "mv %s %s", tmpFilePath, filePath);
+    system(strBuff);
+    sprintf(strBuff, "chmod 644 %s", filePath);
+    system(strBuff);
 
-	if (username == NULL) return NULL;
-	sprintf(cmd, "grep -wr '%s' /var/samba/smbpasswd > %s", username, TEMPFILE1);
-	system(cmd);
-	memset(&passwd[0], 0, sizeof(passwd));
-	fd = open(TEMPFILE1, O_RDONLY);
-	if (fd < 0) {
-		printf("%s.%d: cant not open file! \n", __func__, __LINE__);
-		return NULL;
-	}
-	read(fd, passwd, 512);
-	close(fd);
-	sprintf(cmd, "rm %s", TEMPFILE1);
-	system(cmd);
-	return &passwd[0];
+    free(tmpFilePath);
 }
 
Index: libzyutil-1.0/zyutil.h
===================================================================
--- libzyutil-1.0.orig/zyutil.h	2017-10-02 10:24:26.795595505 +0800
+++ libzyutil-1.0/zyutil.h	2017-10-02 11:01:50.555800000 +0800
@@ -103,6 +103,6 @@
 //void zyUtilIptablesUnLock(void);
 
 int zyUtilAuthUserAccount(const char *username, const char *password);
-char *zyUtilGetUserShadow(const char *username);
-char *zyUtilGetUserSambaPwd(const char *username);
+char *zyGetAccountInfoFromFile(char *username, char *filePath);
+void zyRemoveAccountInfoFromFile(char *username, char *filePath);
 #endif
