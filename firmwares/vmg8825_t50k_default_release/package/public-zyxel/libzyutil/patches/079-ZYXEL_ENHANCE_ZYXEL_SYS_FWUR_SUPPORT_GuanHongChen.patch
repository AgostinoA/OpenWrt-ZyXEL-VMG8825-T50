Index: libzyutil-1.0/Makefile
===================================================================
--- libzyutil-1.0.orig/Makefile	2018-03-22 18:00:34.555267999 +0800
+++ libzyutil-1.0/Makefile	2018-03-22 18:07:24.464078268 +0800
@@ -5,10 +5,11 @@
 
 
 LIBS_PATH = -L.
-LINK_LIBS = -ljson
+LINK_LIBS = -ljson -lcrypto
 
 INC_PATH = -I$(TOOLCHAIN)/include -I. -I$(COMMON_ZCFG_INCLUDE_DIR)
 INC_PATH += -I./$(ZCFG_PLATFORM)
+INC_PATH += -I./libzyutil_encrypt
 
 ifeq ($(ZCFG_PLATFORM),BROADCOM)
 ZCFLAGS += -DBCMTAG_EXE_USE
@@ -69,6 +70,10 @@
 LIB_OBJS += $(ZCFG_PLATFORM)/$(PKG_NAME)_wrapper.o
 ZCFLAGS += -D$(ZCFG_PLATFORM)_PLATFORM
 
+LIB_OBJS += libzyutil_encrypt/libzyutil_encrypt.o
+LIB_OBJS += libzyutil_encrypt/libzyutil_encrypt_SHA256.o
+LIB_OBJS += libzyutil_encrypt/libzyutil_encrypt_MD5.o
+
 .PHONY : libzyutil
 
 all: clean libzyutil libdebug.a
Index: libzyutil-1.0/libzyutil_encrypt/libzyutil_encrypt.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ libzyutil-1.0/libzyutil_encrypt/libzyutil_encrypt.c	2018-03-20 13:50:15.024037000 +0800
@@ -0,0 +1,37 @@
+#include "libzyutil_encrypt.h"
+#include "libzyutil_encrypt_SHA256.h"
+#include "libzyutil_encrypt_MD5.h"
+#include "stdio.h"
+
+
+/*!
+ *  get a encrypted string
+ *
+ *  @param [in] encrypt          encryption algorithm
+ *  @param [in] Input            encryption input
+ *  @param [out] Output          encryption output
+ *
+ *  @return      0               successfully
+ *               -1              fail
+ */
+int getExpectedContext(EncryptAlgo_t encrypt, char* Input, uint8* Output)
+{
+    int ret = 0;
+
+    switch(encrypt)
+    {
+        case Encrypt_SHA256:
+            getExpectedContext_SHA256(Input, (char*)Output);
+            break;
+        case Encrypt_OPENSSL_MD5:
+            getExpectedContext_Openssl_MD5(Input, (char*)Output);
+            break;
+        default:
+            printf("invalid encrypt = %d\n", encrypt);
+            ret = -1;
+            break;
+    }
+
+    return ret;
+}
+
Index: libzyutil-1.0/libzyutil_encrypt/libzyutil_encrypt.h
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ libzyutil-1.0/libzyutil_encrypt/libzyutil_encrypt.h	2018-03-12 16:14:19.179547500 +0800
@@ -0,0 +1,29 @@
+#ifndef _ZCFG_BE_ENCRYPT_H
+#define _ZCFG_BE_ENCRYPT_H
+
+//POINTER defines a generic pointer type
+typedef unsigned char           *POINTER;
+typedef unsigned long int       uint32;         //32-bit unsigned integer
+typedef unsigned char           uint8;          //8-bit unsigned integer
+typedef unsigned short          uint16;         //16-bit unsigned integer
+typedef signed char             int8;
+
+typedef enum {
+    Encrypt_SHA256 = 1,
+    Encrypt_MD5,
+    Encrypt_OPENSSL_MD5
+} EncryptAlgo_t;
+
+/*!
+ *  get a encrypted string
+ *
+ *  @param [in] encrypt         encryption algorithm
+ *  @param [in] Input           encryption input
+ *  @param [out] Output         encryption output
+ *
+ *  @return     0               successfully
+ *              -1              fail
+ */
+int getExpectedContext(EncryptAlgo_t encrypt, char* Input, uint8* Output);
+
+#endif
Index: libzyutil-1.0/libzyutil_encrypt/libzyutil_encrypt_MD5.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ libzyutil-1.0/libzyutil_encrypt/libzyutil_encrypt_MD5.c	2018-03-20 13:49:32.176836000 +0800
@@ -0,0 +1,22 @@
+#include "libzyutil_encrypt_MD5.h"
+#include "stdlib.h"
+#include "string.h"
+#include <openssl/md5.h>
+
+/*!
+ *  get a MD5 encrypted string
+ *
+ *  @param [in] input               input of MD5 encryption
+ *  @param [out] expected           output of MD5 encryption
+ *
+ */
+void getExpectedContext_Openssl_MD5(char *input, char *expected)
+{
+    if(expected == NULL || input == NULL)
+    {
+        return;
+    }
+
+    MD5((unsigned char*)input, strlen(input), (unsigned char*)expected);
+}
+
Index: libzyutil-1.0/libzyutil_encrypt/libzyutil_encrypt_MD5.h
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ libzyutil-1.0/libzyutil_encrypt/libzyutil_encrypt_MD5.h	2018-03-12 16:14:19.183545500 +0800
@@ -0,0 +1,14 @@
+#ifndef _ZCFG_BE_ENCRYPT_MD5_H
+#define _ZCFG_BE_ENCRYPT_MD5_H
+
+/*!
+ *  get a MD5 encrypted string
+ *
+ *  @param [in] input               input of MD5 encryption
+ *  @param [out] expected           output of MD5 encryption
+ *
+ */
+void getExpectedContext_Openssl_MD5(char *input, char *expected);
+
+#endif //_ZCFG_BE_ENCRYPT_MD5_H
+
Index: libzyutil-1.0/libzyutil_encrypt/libzyutil_encrypt_SHA256.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ libzyutil-1.0/libzyutil_encrypt/libzyutil_encrypt_SHA256.c	2018-03-20 13:49:07.608314700 +0800
@@ -0,0 +1,224 @@
+#include "libzyutil_encrypt_SHA256.h"
+#include "stdlib.h"
+#include "string.h"
+
+typedef unsigned int uint; // 32-bit word
+typedef unsigned char uint8; //8-bit unsigned integer
+
+// DBL_INT_ADD treats two unsigned ints a and b as one 64-bit integer and adds c to it
+#define DBL_INT_ADD(a,b,c) if (a > 0xffffffff - (c)) ++b; a += c;
+#define ROTLEFT(a,b) (((a) << (b)) | ((a) >> (32-(b))))
+#define ROTRIGHT(a,b) (((a) >> (b)) | ((a) << (32-(b))))
+
+#define CH(x,y,z) (((x) & (y)) ^ (~(x) & (z)))
+#define MAJ(x,y,z) (((x) & (y)) ^ ((x) & (z)) ^ ((y) & (z)))
+#define EP0(x) (ROTRIGHT(x,2) ^ ROTRIGHT(x,13) ^ ROTRIGHT(x,22))
+#define EP1(x) (ROTRIGHT(x,6) ^ ROTRIGHT(x,11) ^ ROTRIGHT(x,25))
+#define SIG0(x) (ROTRIGHT(x,7) ^ ROTRIGHT(x,18) ^ ((x) >> 3))
+#define SIG1(x) (ROTRIGHT(x,17) ^ ROTRIGHT(x,19) ^ ((x) >> 10))
+
+typedef struct {
+   uint8 data[64];
+   uint datalen;
+   uint bitlen[2];
+   uint state[8];
+} SHA256_CTX;
+
+static uint k[64] = {
+   0x428a2f98,0x71374491,0xb5c0fbcf,0xe9b5dba5,0x3956c25b,0x59f111f1,0x923f82a4,0xab1c5ed5,
+   0xd807aa98,0x12835b01,0x243185be,0x550c7dc3,0x72be5d74,0x80deb1fe,0x9bdc06a7,0xc19bf174,
+   0xe49b69c1,0xefbe4786,0x0fc19dc6,0x240ca1cc,0x2de92c6f,0x4a7484aa,0x5cb0a9dc,0x76f988da,
+   0x983e5152,0xa831c66d,0xb00327c8,0xbf597fc7,0xc6e00bf3,0xd5a79147,0x06ca6351,0x14292967,
+   0x27b70a85,0x2e1b2138,0x4d2c6dfc,0x53380d13,0x650a7354,0x766a0abb,0x81c2c92e,0x92722c85,
+   0xa2bfe8a1,0xa81a664b,0xc24b8b70,0xc76c51a3,0xd192e819,0xd6990624,0xf40e3585,0x106aa070,
+   0x19a4c116,0x1e376c08,0x2748774c,0x34b0bcb5,0x391c0cb3,0x4ed8aa4a,0x5b9cca4f,0x682e6ff3,
+   0x748f82ee,0x78a5636f,0x84c87814,0x8cc70208,0x90befffa,0xa4506ceb,0xbef9a3f7,0xc67178f2
+};
+
+/*!
+ *  SHA256 initialization. Begins an SHA256 operation, writing a new context.
+ *
+ *  @param [inout] ctx      SHA256 context structure
+ *
+ */
+static void sha256_init(SHA256_CTX *ctx)
+{
+    ctx->datalen = 0;
+    ctx->bitlen[0] = 0;
+    ctx->bitlen[1] = 0;
+    ctx->state[0] = 0x6a09e667;
+    ctx->state[1] = 0xbb67ae85;
+    ctx->state[2] = 0x3c6ef372;
+    ctx->state[3] = 0xa54ff53a;
+    ctx->state[4] = 0x510e527f;
+    ctx->state[5] = 0x9b05688c;
+    ctx->state[6] = 0x1f83d9ab;
+    ctx->state[7] = 0x5be0cd19;
+}
+
+/*!
+ *  SHA256 basic transformation.
+ *
+ *  @param [inout] ctx          SHA256 context structure
+ *  @param [in] data            input data
+ *
+ */
+static void sha256_transform(SHA256_CTX *ctx, uint8 data[])
+{
+    uint a,b,c,d,e,f,g,h,i,j,t1,t2,m[64];
+
+    for (i = 0, j = 0; i < 16; ++i, j += 4)
+    {
+        m[i] = (data[j] << 24) | (data[j+1] << 16) | (data[j+2] << 8) | (data[j+3]);
+    }
+
+    for ( ; i < 64; ++i)
+    {
+        m[i] = SIG1(m[i-2]) + m[i-7] + SIG0(m[i-15]) + m[i-16];
+    }
+
+    a = ctx->state[0];
+    b = ctx->state[1];
+    c = ctx->state[2];
+    d = ctx->state[3];
+    e = ctx->state[4];
+    f = ctx->state[5];
+    g = ctx->state[6];
+    h = ctx->state[7];
+
+    for (i = 0; i < 64; ++i)
+    {
+        t1 = h + EP1(e) + CH(e,f,g) + k[i] + m[i];
+        t2 = EP0(a) + MAJ(a,b,c);
+        h = g;
+        g = f;
+        f = e;
+        e = d + t1;
+        d = c;
+        c = b;
+        b = a;
+        a = t1 + t2;
+    }
+
+    ctx->state[0] += a;
+    ctx->state[1] += b;
+    ctx->state[2] += c;
+    ctx->state[3] += d;
+    ctx->state[4] += e;
+    ctx->state[5] += f;
+    ctx->state[6] += g;
+    ctx->state[7] += h;
+}
+
+/*!
+ *  SHA256 update operation.
+ *
+ *  @param [inout] ctx          SHA256 context structure
+ *  @param [in] data            input data
+ *  @param [in] len             input data length
+ *
+ */
+static void sha256_update(SHA256_CTX *ctx, uint8 data[], uint len)
+{
+    uint i;
+
+    for (i = 0; i < len; ++i)
+    {
+        ctx->data[ctx->datalen] = data[i];
+        ctx->datalen++;
+
+        if (ctx->datalen == 64)
+        {
+            sha256_transform(ctx, ctx->data);
+            DBL_INT_ADD(ctx->bitlen[0], ctx->bitlen[1], 512);
+            ctx->datalen = 0;
+        }
+    }
+}
+
+/*!
+ *  SHA256 finalization.
+ *
+ *  @param [in] ctx         SHA256 context structure
+ *  @param [out] hash       output hash
+ *
+ */
+static void sha256_final(SHA256_CTX *ctx, uint8 hash[])
+{
+    uint i;
+
+    i = ctx->datalen;
+
+    // Pad whatever data is left in the buffer.
+    if (ctx->datalen < 56)
+    {
+        ctx->data[i++] = 0x80;
+
+        while (i < 56)
+        {
+            ctx->data[i++] = 0x00;
+        }
+    }
+    else
+    {
+        ctx->data[i++] = 0x80;
+
+        while (i < 64)
+        {
+            ctx->data[i++] = 0x00;
+        }
+
+        sha256_transform(ctx, ctx->data);
+        memset(ctx->data, 0, 56);
+    }
+
+    // Append to the padding the total message's length in bits and transform.
+    DBL_INT_ADD(ctx->bitlen[0], ctx->bitlen[1], ctx->datalen*8);
+    ctx->data[63] = ctx->bitlen[0];
+    ctx->data[62] = ctx->bitlen[0] >> 8;
+    ctx->data[61] = ctx->bitlen[0] >> 16;
+    ctx->data[60] = ctx->bitlen[0] >> 24;
+    ctx->data[59] = ctx->bitlen[1];
+    ctx->data[58] = ctx->bitlen[1] >> 8;
+    ctx->data[57] = ctx->bitlen[1] >> 16;
+    ctx->data[56] = ctx->bitlen[1] >> 24;
+    sha256_transform(ctx, ctx->data);
+
+    // Since this implementation uses little endian byte ordering and SHA uses big endian,
+    // reverse all the bytes when copying the final state to the output hash.
+    for (i = 0; i < 4; ++i)
+    {
+        hash[i]    = (ctx->state[0] >> (24-i*8)) & 0x000000ff;
+        hash[i+4]  = (ctx->state[1] >> (24-i*8)) & 0x000000ff;
+        hash[i+8]  = (ctx->state[2] >> (24-i*8)) & 0x000000ff;
+        hash[i+12] = (ctx->state[3] >> (24-i*8)) & 0x000000ff;
+        hash[i+16] = (ctx->state[4] >> (24-i*8)) & 0x000000ff;
+        hash[i+20] = (ctx->state[5] >> (24-i*8)) & 0x000000ff;
+        hash[i+24] = (ctx->state[6] >> (24-i*8)) & 0x000000ff;
+        hash[i+28] = (ctx->state[7] >> (24-i*8)) & 0x000000ff;
+    }
+}
+
+/*!
+ *  get a SHA256 encrypted string
+ *
+ *  @param [in] input               input of SHA256 encryption
+ *  @param [out] expected           output of SHA256 encryption
+ *
+ */
+void getExpectedContext_SHA256(char *input, char *expected)
+{
+    SHA256_CTX context;
+
+    if (expected == NULL || input == NULL)
+    {
+        return;
+    }
+
+    sha256_init(&context);
+
+    //The input message is secret
+    sha256_update(&context, (unsigned char*)input, strlen(input));
+    sha256_final(&context, (unsigned char*)expected);
+}
+
Index: libzyutil-1.0/libzyutil_encrypt/libzyutil_encrypt_SHA256.h
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ libzyutil-1.0/libzyutil_encrypt/libzyutil_encrypt_SHA256.h	2018-03-12 16:14:19.179547500 +0800
@@ -0,0 +1,15 @@
+#ifndef _ZCFG_BE_ENCRYPT_SHA256_H
+#define _ZCFG_BE_ENCRYPT_SHA256_H
+
+/*!
+ *  get a SHA256 encrypted string
+ *
+ *  @param [in] input           input of SHA256 encryption
+ *  @param [out] expected       output of SHA256 encryption
+ *
+ */
+void getExpectedContext_SHA256(char *input, char *expected);
+
+#endif //_ZCFG_BE_ENCRYPT_SHA256_H
+
+
