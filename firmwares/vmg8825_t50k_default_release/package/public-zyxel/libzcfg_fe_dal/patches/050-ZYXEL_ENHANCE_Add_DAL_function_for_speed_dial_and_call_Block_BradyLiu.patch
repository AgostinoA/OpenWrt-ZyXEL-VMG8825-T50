Index: libzcfg_fe_dal-1.0/voip/callRule/zcfg_fe_dal_call_rule_call_block.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ libzcfg_fe_dal-1.0/voip/callRule/zcfg_fe_dal_call_rule_call_block.c	2016-10-31 16:43:13.543743528 +0800
@@ -0,0 +1,201 @@
+
+#include <json/json.h>
+
+#include "zcfg_common.h"
+#include "zcfg_fe_rdm_string.h"
+#include "zcfg_fe_rdm_struct.h"
+#include "zcfg_rdm_oid.h"
+#include "zcfg_rdm_obj.h"
+#include "zcfg_debug.h"
+#include "zcfg_msg.h"
+#include "zcfg_fe_dal_common.h"
+#include "zcfg_webgui_flag.h"
+
+#define SETCALLBLOCK			0
+#define CLEANALLCALLBLOCK		1
+
+dal_param_t VOIP_CALLBLOCK_param[]={
+	{"Enable",									dalType_string,	0,	0,	NULL},
+	{"Direction",								dalType_string,	0,	0,	NULL},
+	{"Description",								dalType_string,	0,	0,	NULL},
+	{"PhoneNumber",								dalType_string,	0,	0,	NULL},
+	{NULL,										0,				0,	0,	NULL},
+};
+
+struct json_object *multiJobj;
+struct json_object *callBlockListJobj;
+
+objIndex_t CallBlockIid = {0};
+
+bool cleanAll;
+bool callBlockType;
+
+const char* Enable;
+const char* Direction;
+const char* PhoneNumber;
+const char* Description;
+
+void initCallBlockGlobalObjects(){
+	multiJobj = NULL;
+	callBlockListJobj = NULL;
+	return;
+}
+
+void getCallBlockBasicInfo(struct json_object *Jobj){
+	Enable = json_object_get_string(json_object_object_get(Jobj, "Enable"));
+	Direction = json_object_get_string(json_object_object_get(Jobj, "Direction"));
+	PhoneNumber = json_object_get_string(json_object_object_get(Jobj, "PhoneNumber"));
+	Description = json_object_get_string(json_object_object_get(Jobj, "Description"));
+
+	return;
+}
+
+zcfgRet_t zcfgFeDalCallBlockObjEditIidGet(struct json_object *Jobj){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+
+	cleanAll = json_object_get_boolean(json_object_object_get(Jobj, "CleanAll"));
+	if(cleanAll == TRUE){
+		callBlockType = CLEANALLCALLBLOCK;
+	}else{
+		callBlockType = SETCALLBLOCK;
+	}
+
+	return ret;
+}
+
+void freeAllCallBlockObjects(){
+	if(multiJobj) json_object_put(multiJobj);
+	if(callBlockListJobj) json_object_put(callBlockListJobj);
+
+	return;
+}
+
+zcfgRet_t zcfgFeDalVoipCleanAllCallBlock(struct json_object *Jobj){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	struct json_object *setJson = NULL;
+	IID_INIT(CallBlockIid);
+	//printf("%s() Enter \n ",__FUNCTION__);
+
+	while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_CALL_POLICY_BOOK_LIST, &CallBlockIid, &callBlockListJobj) == ZCFG_SUCCESS) {
+		json_object_object_add(callBlockListJobj, "Enable", json_object_new_boolean(false));
+		json_object_object_add(callBlockListJobj, "Direction", json_object_new_string("Incoming"));
+		json_object_object_add(callBlockListJobj, "PhoneNumber", json_object_new_string(""));
+		json_object_object_add(callBlockListJobj, "Description", json_object_new_string(""));
+
+		if((setJson = zcfgFeJsonMultiObjAppend(RDM_OID_CALL_POLICY_BOOK_LIST, &CallBlockIid, multiJobj, callBlockListJobj)) == NULL){
+			printf("%s:(ERROR) fail to append object oid(%d)\n", __FUNCTION__, RDM_OID_CALL_POLICY_BOOK_LIST);
+			zcfgFeJsonObjFree(callBlockListJobj);
+			return ZCFG_INTERNAL_ERROR;
+		}
+		zcfgFeJsonObjFree(callBlockListJobj);
+	}
+
+	//printf("%s(): Append call policy book list obj to multiJobj (%s) \n ",__FUNCTION__,json_object_to_json_string(multiJobj));
+	//printf("%s() exit \n ",__FUNCTION__);
+	return ret;
+
+}
+
+zcfgRet_t zcfgFeDalVoipSetAllCallBlock(struct json_object *Jobj){
+	struct json_object *setJson = NULL;
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	//printf("%s() Enter \n ",__FUNCTION__);
+	char *enable;
+	char *direction;
+	char *phoneNumber;
+	char *description;
+
+	IID_INIT(CallBlockIid);
+	while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_CALL_POLICY_BOOK_LIST, &CallBlockIid, &callBlockListJobj) == ZCFG_SUCCESS) {
+		if((enable = strsplit_getfirst(&Enable, ",")) != NULL){
+			//printf("enable:%s\n" , enable);
+		}
+		if((direction = strsplit_getfirst(&Direction, ",")) != NULL){
+			//printf("direction:%s\n" , direction);
+		}
+		if((phoneNumber = strsplit_getfirst(&PhoneNumber, ",")) != NULL){
+			//printf("phoneNumber:%s\n" , phoneNumber);
+		}
+		if((description = strsplit_getfirst(&Description, ",")) != NULL){
+			//printf("description:%s\n" , description);
+		}
+
+		if(strcmp(enable,"true") == 0){
+			json_object_object_add(callBlockListJobj, "Enable", json_object_new_boolean(true));
+		}else{
+			json_object_object_add(callBlockListJobj, "Enable", json_object_new_boolean(false));
+		}
+		json_object_object_add(callBlockListJobj, "Direction", json_object_new_string(direction));
+
+		if(strcmp(phoneNumber,"None") != 0){
+			json_object_object_add(callBlockListJobj, "PhoneNumber", json_object_new_string(phoneNumber));
+		}else{
+			json_object_object_add(callBlockListJobj, "PhoneNumber", json_object_new_string(""));
+		}
+		if(strcmp(description,"None") != 0){
+			json_object_object_add(callBlockListJobj, "Description", json_object_new_string(description));
+		}else{
+			json_object_object_add(callBlockListJobj, "Description", json_object_new_string(""));
+		}
+
+		if((setJson = zcfgFeJsonMultiObjAppend(RDM_OID_CALL_POLICY_BOOK_LIST, &CallBlockIid, multiJobj, callBlockListJobj)) == NULL){
+			printf("%s:(ERROR) fail to append object oid(%d)\n", __FUNCTION__, RDM_OID_CALL_POLICY_BOOK_LIST);
+			zcfgFeJsonObjFree(callBlockListJobj);
+			return ZCFG_INTERNAL_ERROR;
+		}
+
+		zcfgFeJsonObjFree(callBlockListJobj);
+	}
+
+	//printf("%s(): Append call policy book list obj to multiJobj (%s) \n ",__FUNCTION__,json_object_to_json_string(multiJobj));
+	//rintf("%s() exit \n ",__FUNCTION__);
+	return ret;
+
+}
+
+
+zcfgRet_t zcfgFeDalVoipCallBlockEdit(struct json_object *Jobj, char *replyMsg){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	printf("%s(): input --- %s \n ",__FUNCTION__,json_object_to_json_string(Jobj));
+
+	initCallBlockGlobalObjects();
+	getCallBlockBasicInfo(Jobj);
+	zcfgFeDalCallBlockObjEditIidGet(Jobj);
+	multiJobj = zcfgFeJsonObjNew();
+
+	if(callBlockType == CLEANALLCALLBLOCK){
+		if((ret = zcfgFeDalVoipCleanAllCallBlock(Jobj)) != ZCFG_SUCCESS){
+			printf("%s:(ERROR) fail to edit call policy book list obj \n", __FUNCTION__);
+			goto exit;
+		}
+	}else if(callBlockType == SETCALLBLOCK){
+		if((ret = zcfgFeDalVoipSetAllCallBlock(Jobj)) != ZCFG_SUCCESS){
+			printf("%s:(ERROR) fail to edit call policy book list obj \n", __FUNCTION__);
+			goto exit;
+		}
+	}
+
+	if((ret = zcfgFeMultiObjJsonSet(multiJobj, NULL)) != ZCFG_SUCCESS){
+		printf("%s:(ERROR) fail to set object %d\n", __FUNCTION__, RDM_OID_CALL_POLICY_BOOK_LIST);
+		goto exit;
+	}
+
+exit:
+	freeAllCallBlockObjects();
+	return ret;
+}
+
+zcfgRet_t zcfgFeDalVoipCallBlock(const char *method, struct json_object *Jobj, char *replyMsg)
+{
+	zcfgRet_t ret = ZCFG_SUCCESS;
+
+	if(!method || !Jobj)
+		return ZCFG_INTERNAL_ERROR;
+
+	if(!strcmp(method, "PUT")) {
+		ret = zcfgFeDalVoipCallBlockEdit(Jobj, NULL);
+	}
+
+	return ret;
+}
+
Index: libzcfg_fe_dal-1.0/voip/callRule/zcfg_fe_dal_call_rule_speed_dial.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ libzcfg_fe_dal-1.0/voip/callRule/zcfg_fe_dal_call_rule_speed_dial.c	2016-10-31 16:42:44.074334151 +0800
@@ -0,0 +1,190 @@
+
+#include <json/json.h>
+
+#include "zcfg_common.h"
+#include "zcfg_fe_rdm_string.h"
+#include "zcfg_fe_rdm_struct.h"
+#include "zcfg_rdm_oid.h"
+#include "zcfg_rdm_obj.h"
+#include "zcfg_debug.h"
+#include "zcfg_msg.h"
+#include "zcfg_fe_dal_common.h"
+#include "zcfg_webgui_flag.h"
+
+#define SETRULE			0
+#define CLEANALL		1
+
+dal_param_t VOIP_CALLRULE_param[]={
+	{"OrigNumber",								dalType_string,	0,	0,	NULL},
+	{"Name",									dalType_string,	0,	0,	NULL},
+	{NULL,										0,				0,	0,	NULL},
+};
+
+struct json_object *multiJobj;
+struct json_object *speedDailListJobj;
+
+
+objIndex_t CallRuleIid = {0};
+
+bool cleanAll;
+bool callRuleType;
+char* Name;
+char* OrigNumber;
+
+void initSpeedDialGlobalObjects(){
+	multiJobj = NULL;
+	speedDailListJobj = NULL;
+	return;
+}
+
+void freeAllSpeedDialObjects(){
+	if(multiJobj) json_object_put(multiJobj);
+	if(speedDailListJobj) json_object_put(speedDailListJobj);
+	return;
+}
+
+void getSpeedDialBasicInfo(struct json_object *Jobj){
+	OrigNumber = json_object_get_string(json_object_object_get(Jobj, "speedDialLisOrigNumber"));
+	Name = json_object_get_string(json_object_object_get(Jobj, "speedDialLisName"));
+	return;
+}
+
+zcfgRet_t zcfgFeDalCallRuleObjEditIidGet(struct json_object *Jobj){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+
+	cleanAll = json_object_get_boolean(json_object_object_get(Jobj, "cleanAll"));
+	if(cleanAll == TRUE){
+		callRuleType = CLEANALL;
+	}else{
+		callRuleType = SETRULE;
+	}
+
+	return ret;
+}
+
+zcfgRet_t zcfgFeDalVoipCleanAllCallRule(struct json_object *Jobj){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	struct json_object *setJson = NULL;
+	IID_INIT(CallRuleIid);
+	//printf("%s() Enter \n ",__FUNCTION__);
+
+	while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_SPEED_DIAL_BOOK_LIST, &CallRuleIid, &speedDailListJobj) == ZCFG_SUCCESS) {
+		json_object_object_add(speedDailListJobj, "OrigNumber", json_object_new_string(""));
+		json_object_object_add(speedDailListJobj, "Name", json_object_new_string(""));
+
+		if((setJson = zcfgFeJsonMultiObjAppend(RDM_OID_SPEED_DIAL_BOOK_LIST, &CallRuleIid, multiJobj, speedDailListJobj)) == NULL){
+			printf("%s:(ERROR) fail to append object oid(%d)\n", __FUNCTION__, RDM_OID_SPEED_DIAL_BOOK_LIST);
+			zcfgFeJsonObjFree(speedDailListJobj);
+			return ZCFG_INTERNAL_ERROR;
+		}
+		zcfgFeJsonObjFree(speedDailListJobj);
+	}
+
+	//printf("%s(): Append speed dial book list obj to multiJobj (%s) \n ",__FUNCTION__,json_object_to_json_string(multiJobj));
+	//printf("%s() exit \n ",__FUNCTION__);
+	return ret;
+}
+
+char *strsplit_getfirst(char **nStr, char *tok){
+	char *ret = *nStr;
+	if((nStr == NULL) || (*nStr == NULL)){
+		return NULL;
+	}
+	*nStr = strstr(ret, tok);
+	if(*nStr != NULL){
+		*nStr[0] = '\0';
+		*nStr = *nStr + 1;
+	}else{
+		*nStr = NULL;
+	}
+
+	return ret;
+}
+
+zcfgRet_t zcfgFeDalVoipSetAllCallRule(struct json_object *Jobj){
+	struct json_object *setJson = NULL;
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	//printf("%s() Enter \n ",__FUNCTION__);
+	char *phoneNumber;
+	char *name;
+
+	IID_INIT(CallRuleIid);
+	while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_SPEED_DIAL_BOOK_LIST, &CallRuleIid, &speedDailListJobj) == ZCFG_SUCCESS) {
+		if((phoneNumber = strsplit_getfirst(&OrigNumber, ",")) != NULL){//ex: "1,2,3,4,5,6,7,8,9,10" => "1" "2" "3" "4" "5" "6" "7" "8" "9" "10"
+			//printf("phoneNumber:%s\n" , phoneNumber);
+		}
+		if((name = strsplit_getfirst(&Name, ",")) != NULL){//ex: "1,2,3,4,5,6,7,8,9,10" => "1" "2" "3" "4" "5" "6" "7" "8" "9" "10"
+			//printf("name:%s\n" , name);
+		}
+
+		if(strcmp(phoneNumber,"None") != 0){
+			json_object_object_add(speedDailListJobj, "OrigNumber", json_object_new_string(phoneNumber));
+		}else{
+			json_object_object_add(speedDailListJobj, "OrigNumber", json_object_new_string(""));
+		}
+		if(strcmp(name,"None") != 0){
+			json_object_object_add(speedDailListJobj, "Name", json_object_new_string(name));
+		}else{
+			json_object_object_add(speedDailListJobj, "Name", json_object_new_string(""));
+		}
+
+		if((setJson = zcfgFeJsonMultiObjAppend(RDM_OID_SPEED_DIAL_BOOK_LIST, &CallRuleIid, multiJobj, speedDailListJobj)) == NULL){
+			printf("%s:(ERROR) fail to append object oid(%d)\n", __FUNCTION__, RDM_OID_SPEED_DIAL_BOOK_LIST);
+			zcfgFeJsonObjFree(speedDailListJobj);
+			return ZCFG_INTERNAL_ERROR;
+		}
+
+		zcfgFeJsonObjFree(speedDailListJobj);
+	}
+
+	//printf("%s(): Append speed dial book list obj to multiJobj (%s) \n ",__FUNCTION__,json_object_to_json_string(multiJobj));
+	//rintf("%s() exit \n ",__FUNCTION__);
+	return ret;
+}
+
+zcfgRet_t zcfgFeDalVoipCallRuleEdit(struct json_object *Jobj, char *replyMsg){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	printf("%s(): input --- %s \n ",__FUNCTION__,json_object_to_json_string(Jobj));
+
+	initSpeedDialGlobalObjects();
+	getSpeedDialBasicInfo(Jobj);
+	zcfgFeDalCallRuleObjEditIidGet(Jobj);
+	multiJobj = zcfgFeJsonObjNew();
+
+	if(callRuleType == CLEANALL){
+		if((ret = zcfgFeDalVoipCleanAllCallRule(Jobj)) != ZCFG_SUCCESS){
+			printf("%s:(ERROR) fail to clean all of speed dial rule \n", __FUNCTION__);
+			goto exit;
+		}
+
+	}else if(callRuleType == SETRULE){
+		if((ret = zcfgFeDalVoipSetAllCallRule(Jobj)) != ZCFG_SUCCESS){
+			printf("%s:(ERROR) fail to set all of speed dial rule \n", __FUNCTION__);
+			goto exit;
+		}
+	}
+
+	if((ret = zcfgFeMultiObjJsonSet(multiJobj, NULL)) != ZCFG_SUCCESS){
+		printf("%s:(ERROR) fail to set object %d\n", __FUNCTION__, RDM_OID_SPEED_DIAL_BOOK_LIST);
+		goto exit;
+	}
+
+exit:
+	freeAllSpeedDialObjects();
+	return ret;
+}
+
+zcfgRet_t zcfgFeDalVoipCallRule(const char *method, struct json_object *Jobj, char *replyMsg)
+{
+	zcfgRet_t ret = ZCFG_SUCCESS;
+
+	if(!method || !Jobj)
+		return ZCFG_INTERNAL_ERROR;
+
+	if(!strcmp(method, "PUT")) {
+		ret = zcfgFeDalVoipCallRuleEdit(Jobj, NULL);
+	}
+
+	return ret;
+}
+
Index: libzcfg_fe_dal-1.0/Makefile
===================================================================
--- libzcfg_fe_dal-1.0.orig/Makefile	2016-10-31 13:52:57.300277333 +0800
+++ libzcfg_fe_dal-1.0/Makefile	2016-10-31 13:57:09.043023600 +0800
@@ -18,6 +18,7 @@
 MAINTENANCE_MGMT = ./maintenance/mgmt
 MAINTENANCE = ./maintenance
 VOIP_SIP_PATH = ./voip/sip
+VOIP_SIP_CALLRULE_PATH = ./voip/callRule
 SOURCES += $(wildcard $(FE_PATH)/*.c)
 SOURCES += $(wildcard $(NETWORK_BR_PATH)/*.c)
 SOURCES += $(wildcard $(NETWORK_DNS_PATH)/*.c)
@@ -31,6 +32,7 @@
 SOURCES += $(wildcard $(MAINTENANCE_MGMT)/*.c)
 SOURCES += $(wildcard $(MAINTENANCE)/*.c)
 SOURCES += $(wildcard $(VOIP_SIP_PATH)/*.c)
+SOURCES += $(wildcard $(VOIP_SIP_CALLRULE_PATH)/*.c)
 SOURCES += $(wildcard $(NETWORK_WIRELESS_PATH)/*.c)
 OBJS = $(patsubst %.c, %.o, $(SOURCES))
 
Index: libzcfg_fe_dal-1.0/zcfg_fe_dal.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/zcfg_fe_dal.c	2016-10-31 13:52:57.312277333 +0800
+++ libzcfg_fe_dal-1.0/zcfg_fe_dal.c	2016-10-31 16:42:04.107135811 +0800
@@ -41,6 +41,8 @@
 extern dal_param_t TIME_param[];
 extern dal_param_t TRUST_DOMAIN_param[];
 extern dal_param_t VOIP_LINE_param[];
+extern dal_param_t VOIP_CALLRULE_param[];
+extern dal_param_t VOIP_CALLBLOCK_param[];
 extern dal_param_t USB_FILESHARING_param[];
 extern dal_param_t USB_MEDIASERVER_param[];
 extern zcfgRet_t zcfgFeDalWan(const char *method, struct json_object *Jobj, char *replyMsg);
@@ -77,6 +79,8 @@
 extern zcfgRet_t zcfgFeDalTime(const char *method, struct json_object *Jobj, char *replyMsg);
 extern zcfgRet_t zcfgFeDalTrustDomain(const char *method, struct json_object *Jobj, char *replyMsg);
 extern zcfgRet_t zcfgFeDalVoipLine(const char *method, struct json_object *Jobj, char *replyMsg);
+extern zcfgRet_t zcfgFeDalVoipCallRule(const char *method, struct json_object *Jobj, char *replyMsg);
+extern zcfgRet_t zcfgFeDalVoipCallBlock(const char *method, struct json_object *Jobj, char *replyMsg);
 extern zcfgRet_t zcfgFeDalUsbFilesharing(const char *method, struct json_object *Jobj, char *replyMsg);
 extern zcfgRet_t zcfgFeDalUsbMediaserver(const char *method, struct json_object *Jobj, char *replyMsg);
 
@@ -122,6 +126,8 @@
 {"TIME",			TIME_param, 		zcfgFeDalTime},
 {"TRUST_DOMAIN",	TRUST_DOMAIN_param, zcfgFeDalTrustDomain},
 {"VOIPLINE",		VOIP_LINE_param,	zcfgFeDalVoipLine},
+{"CALLRULE",		VOIP_CALLRULE_param,zcfgFeDalVoipCallRule},
+{"CALLBLOCK",		VOIP_CALLBLOCK_param,zcfgFeDalVoipCallBlock},
 {"USB_FILESHARING", 		USB_FILESHARING_param,	zcfgFeDalUsbFilesharing},
 {"USB_MEDIASERVER", 		USB_MEDIASERVER_param,	zcfgFeDalUsbMediaserver},
 {NULL,				NULL,				NULL}
