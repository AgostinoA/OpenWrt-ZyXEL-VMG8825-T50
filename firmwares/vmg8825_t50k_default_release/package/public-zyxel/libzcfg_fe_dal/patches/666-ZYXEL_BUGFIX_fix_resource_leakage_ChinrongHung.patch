diff -urN libzcfg_fe_dal-1.0.org/network/homeNetworking/zcfg_fe_dal_lanadv.c libzcfg_fe_dal-1.0/network/homeNetworking/zcfg_fe_dal_lanadv.c
--- libzcfg_fe_dal-1.0.org/network/homeNetworking/zcfg_fe_dal_lanadv.c	2019-05-08 16:44:02.995541400 +0800
+++ libzcfg_fe_dal-1.0/network/homeNetworking/zcfg_fe_dal_lanadv.c	2019-05-21 16:52:03.529698832 +0800
@@ -12,6 +12,7 @@
 #include "zcfg_eid.h"
 #include "zcfg_msg.h"
 #include "zcfg_fe_dal_common.h"
+#include <zos_api.h>
 
 dal_param_t LANADV_param[]={
 	{"STBVendorID1", dalType_string,	0,	0,	NULL},
@@ -104,7 +105,7 @@
 		recv_str = (char *)recvBuf+sizeof(zcfgMsg_t);
 		obj = json_tokener_parse(recv_str);
 		json_object_object_add(retObj, "list", JSON_OBJ_COPY(obj));
-		free(recvBuf);
+		ZOS_FREE(recvBuf);
 	}
 
 	return ret;
diff -urN libzcfg_fe_dal-1.0.org/network/qos/zcfg_fe_QosClass.c libzcfg_fe_dal-1.0/network/qos/zcfg_fe_QosClass.c
--- libzcfg_fe_dal-1.0.org/network/qos/zcfg_fe_QosClass.c	2019-05-08 16:44:03.039541400 +0800
+++ libzcfg_fe_dal-1.0/network/qos/zcfg_fe_QosClass.c	2019-05-21 16:59:10.046120300 +0800
@@ -14,6 +14,7 @@
 #include "zcfg_msg.h"
 #include "zcfg_fe_dal_common.h"
 #include "zcfg_fe_Qos.h"
+#include <zos_api.h>
 
 #define ETHTYPE_NA        -1
 #define ETHTYPE_IP        2048
@@ -480,6 +481,7 @@
 					ClassObj_Info->Protocol = 17;
 				else
 					ClassObj_Info->Protocol = json_object_get_int(json_object_object_get(Jobj, "ProtocolNumber"));
+				ZOS_FREE(protocol);
 			}
 			else{
 				ClassObj_Info->Protocol = json_object_get_int(json_object_object_get(Jobj, "ProtocolNumber"));
@@ -867,7 +869,7 @@
 				}
 				zcfgFeJsonObjFree(queueObj);
 			}
-			free(new_TrafficClasses_group_str);
+			ZOS_FREE(new_TrafficClasses_group_str);
 		}
 	}
 
@@ -888,7 +890,7 @@
 				json_object_object_add(queueObj, "TrafficClasses", json_object_new_string(NewTrafficClasses));
 				zcfgFeObjJsonSetWithoutApply(RDM_OID_QOS_QUE, &queueIid, queueObj, NULL);
 				zcfgFeJsonObjFree(queueObj);
-				free(NewTrafficClasses);
+				ZOS_FREE(NewTrafficClasses);
 				break;
 			}
 			zcfgFeJsonObjFree(queueObj);
diff -urN libzcfg_fe_dal-1.0.org/zcfg_fe_dal.c libzcfg_fe_dal-1.0/zcfg_fe_dal.c
--- libzcfg_fe_dal-1.0.org/zcfg_fe_dal.c	2019-05-08 16:44:03.227541400 +0800
+++ libzcfg_fe_dal-1.0/zcfg_fe_dal.c	2019-05-21 17:25:07.008453755 +0800
@@ -7,6 +7,7 @@
 #include "zcfg_fe_dal.h"
 #include <sys/types.h>
 #include <pwd.h>
+#include <zos_api.h>
 
 #define isdigit(c) ((c >= 0x30) && (c < 0x3A))
 #define isEmptyIns(obj) json_object_get_boolean(json_object_object_get(obj, "emptyIns"))
@@ -607,12 +608,12 @@
 	ptr = strtok_r(buf, separator, &tmp_ptr);
 	while(ptr != NULL){
 		if(!strcmp(ptr, target)){
-			free(buf);
+			ZOS_FREE(buf);
 			return true;
 		}
 		ptr = strtok_r(NULL, separator, &tmp_ptr);
 	}
-	free(buf);
+	ZOS_FREE(buf);
 	return false;
 }
 
@@ -745,11 +746,11 @@
 		ptr = strtok_r(NULL, ",", &tmp);
 	}
 
-	free(buf);
+	ZOS_FREE(buf);
 	return true;
 
 ParenServiceError:
-	free(buf);
+	ZOS_FREE(buf);
 	return false;
 }
 
@@ -2611,13 +2612,13 @@
 		if(findInList(tmp_ptr, ptr, separator)){
 			if(duplicate != NULL)
 				strcpy(duplicate, ptr);
-			free(buf);
+			ZOS_FREE(buf);
 			return true;
 		}
 			
 		ptr = strtok_r(NULL, separator, &tmp_ptr);
 	}
-	free(buf);
+	ZOS_FREE(buf);
 	return false;
 }
 
@@ -2878,12 +2879,12 @@
 								*ptr = '\0';
 								if(!strcmp(ptr_buf, "") || (strcmp(ptr_buf, "-1") && !isDigitString(ptr_buf))){
 									printf("Wrong parameter value <%s> of %s\n", stringPtr, paramList[i].paraName);
-									free(ptr_buf);
+									ZOS_FREE(ptr_buf);
 									return false;
 								}
 								if(!strcmp(ptr+1, "") || (strcmp(ptr+1, "-1") && !isDigitString(ptr+1))){
 									printf("Wrong parameter value <%s> of %s\n", stringPtr, paramList[i].paraName);
-									free(ptr_buf);
+									ZOS_FREE(ptr_buf);
 									return false;
 								}
 								sscanf(stringPtr, "%d:%d", &startPort, &endPort);
@@ -2894,13 +2895,13 @@
 							else{
 								if(!strcmp(ptr_buf, "") || (strcmp(ptr_buf, "-1") && !isDigitString(ptr_buf))){
 									printf("Wrong parameter value <%s> of %s\n", stringPtr, paramList[i].paraName);
-									free(ptr_buf);
+									ZOS_FREE(ptr_buf);
 									return false;
 								}
 								startPort = atoi(stringPtr);
 								endPort = -1;
 							}
-							free(ptr_buf);
+							ZOS_FREE(ptr_buf);
 							if(startPort == -1){
 								//pass case, do nothing
 							}
@@ -2944,7 +2945,7 @@
 								valid = 0;
 							}
 						}
-						free(ptr_buf);
+						ZOS_FREE(ptr_buf);
 						if(!valid){
 							printf("Wrong parameter value <%s> of %s\n", stringPtr, paramList[i].paraName);
 							return false;
@@ -2960,7 +2961,7 @@
 							ptr = strchr(ptr_buf, '/');
 							if(ptr == NULL || !strcmp(ptr+1, "") || !isDigitString(ptr+1)){
 								printf("Wrong parameter value <%s> of %s\n", stringPtr, paramList[i].paraName);
-								free(ptr_buf);
+								ZOS_FREE(ptr_buf);
 								return false;
 							}
 							*ptr = '\0';
@@ -2968,18 +2969,18 @@
 							if(strchr(ptr_buf, ':') != NULL){ //IPv6 Prefix
 								if(intValue<0 || intValue>128 || validateIPv6(ptr_buf) == false){
 									printf("Wrong parameter value <%s> of %s\n", stringPtr, paramList[i].paraName);
-									free(ptr_buf);
+									ZOS_FREE(ptr_buf);
 									return false;
 								}
 							}
 							else{ //IPv4 Prefix
 								if(intValue<=0 || intValue>32 || validateIPv4(ptr_buf) == false){
 									printf("Wrong parameter value <%s> of %s\n", stringPtr, paramList[i].paraName);
-									free(ptr_buf);
+									ZOS_FREE(ptr_buf);
 									return false;
 								}
 							}
-							free(ptr_buf);
+							ZOS_FREE(ptr_buf);
 							break;
 					case dalType_emailAddr:
 					case dalType_emailList:
@@ -3027,13 +3028,13 @@
 						while(ptr != NULL){
 							if(validateMacAddr1(ptr, ":") == false){
 								printf("Wrong parameter value <%s> of %s\n", stringPtr, paramList[i].paraName);
-								free(ptr_buf);
+								ZOS_FREE(ptr_buf);
 								return false;
 							}
 							count++;
 							ptr = strtok_r(NULL, ",", &tmp_ptr);
 						}
-						free(ptr_buf);
+						ZOS_FREE(ptr_buf);
 						if(paramList[i].min || paramList[i].max){
 							if((count > paramList[i].max) || (count < paramList[i].min)){
 								printf("Wrong parameter value <%s> of %s\n", stringPtr, paramList[i].paraName);
@@ -3060,7 +3061,7 @@
 						while(ptr != NULL){
 							if(findInList(allDays, ptr, ",") == false){
 								printf("Wrong parameter value <%s> of %s\n", stringPtr, paramList[i].paraName);
-								free(ptr_buf);
+								ZOS_FREE(ptr_buf);
 								return false;
 							}
 							if(findInList(Days, ptr, ",") == false){ //prevent duplicate case
@@ -3070,7 +3071,7 @@
 							}
 							ptr = strtok_r(NULL, ",", &tmp_ptr);
 						}
-						free(ptr_buf);
+						ZOS_FREE(ptr_buf);
 						if(count == 0){
 							printf("Wrong parameter value <%s> of %s\n", stringPtr, paramList[i].paraName);
 							return false;
@@ -3095,13 +3096,13 @@
 						while(ptr != NULL){
 							if(parseTimeRange(ptr, &startHour, &startMin, &stopHour, &stopMin) == false){
 								printf("Wrong parameter value <%s> of %s\n", stringPtr, paramList[i].paraName);
-								free(ptr_buf);
+								ZOS_FREE(ptr_buf);
 								return false;
 							}
 							count++;
 							ptr = strtok_r(NULL, ",", &tmp_ptr);
 						}
-						free(ptr_buf);
+						ZOS_FREE(ptr_buf);
 						if(paramList[i].min || paramList[i].max){
 							if((count > paramList[i].max) || (count < paramList[i].min)){
 								printf("Wrong parameter value <%s> of %s\n", stringPtr, paramList[i].paraName);
@@ -3151,7 +3152,7 @@
 						while(ptr != NULL){
 							if(parseParenService(ptr, parenCtlService) == false){
 								printf("Wrong parameter value <%s> of %s\n", stringPtr, paramList[i].paraName);
-								free(ptr_buf);
+								ZOS_FREE(ptr_buf);
 								return false;
 							}
 							else{
@@ -3164,7 +3165,7 @@
 								break;
 							ptr = strtok_r(NULL, "/", &tmp_ptr);
 						}
-						free(ptr_buf);	
+						ZOS_FREE(ptr_buf);
 						if(paramList[i].max || paramList[i].min){
 							if(count > paramList[i].max || count < paramList[i].min){
 								printf("Wrong parameter value <%s> of %s\n", stringPtr, paramList[i].paraName);
@@ -3221,7 +3222,7 @@
 								intfName = strtok_r(tmp_ptr, ",", &tmp_ptr);
 							}
 							json_object_object_add(Jobj, paramList[i].paraName, json_object_new_string(tr181PathList));
-							free(nameList);
+							ZOS_FREE(nameList);
 							break;
 						}
 						
@@ -3327,10 +3328,11 @@
 							}
 							else{
 								printf("Can't find inerface: parameter value <%s> of %s\n", stringPtr, paramList[i].paraName);
+								ZOS_FREE(intfName);
 								return false;
 							}
 						}
-						free(intfName);
+						ZOS_FREE(intfName);
 						json_object_put(RouteIntfJarray);
 						RouteIntfJarray = NULL;
 						break;
@@ -3344,7 +3346,7 @@
 						nameList = strdup(stringPtr);
 						if(findDuplicate(nameList, duplicateName, ",")){
 							printf("Duplicate WAN interface name %s\n", duplicateName);
-							free(nameList);
+							ZOS_FREE(nameList);
 							return false;
 						}
 						Group_WAN_IpIface = NULL;
@@ -3368,6 +3370,7 @@
 											continue;
 										}
 										printf("wanIntf error.\n");
+										ZOS_FREE(nameList);
 										return false;
 									}
 								}			
@@ -3441,7 +3444,7 @@
 							}
 							intfName = strtok_r(NULL, ",", &tmp_ptr);
 						}
-						free(nameList);
+						ZOS_FREE(nameList);
 						json_object_put(WanLanListJarray);
 						WanLanListJarray = NULL;
 						len = strlen(tr181PathList);
@@ -3464,7 +3467,7 @@
 						nameList = strdup(stringPtr);
 						if(findDuplicate(nameList, duplicateName, ",")){
 							printf("Duplicate LAN port name %s\n", duplicateName);
-							free(nameList);
+							ZOS_FREE(nameList);
 							return false;
 						}
 						getLanPortList(&LanPortListJarray);
@@ -3503,7 +3506,7 @@
 							}
 							intfName = strtok_r(NULL, ",", &tmp_ptr);
 						}
-						free(nameList);
+						ZOS_FREE(nameList);
 						json_object_put(LanPortListJarray);
 						LanPortListJarray = NULL;
 						len = strlen(tr181PathList);
@@ -3542,7 +3545,7 @@
 							if(intfList[strlen(intfList)-1] == ",")
 								intfList[strlen(intfList)-1] == "\0";
 						}
-						free(ptr_buf);
+						ZOS_FREE(ptr_buf);
 						json_object_object_add(Jobj, paramList[i].paraName, json_object_new_string(intfList));
 						break;
 					case dalType_ClassIntf:
@@ -3581,7 +3584,7 @@
 							}
 						}
 
-						free(intfName);
+						ZOS_FREE(intfName);
 						json_object_put(LanPortListJarray);
 						LanPortListJarray = NULL;
 						if(!ret){
@@ -3655,7 +3658,7 @@
 							}
 						}
 						
-						free(intfName);
+						ZOS_FREE(intfName);
 						json_object_put(QueueListJarray);
 						QueueListJarray = NULL;
 						if(!ret && def == 0)
@@ -3701,6 +3704,7 @@
 						if(paramList[i].type == dalType_VoipLine){
 							if(strcmp(tmp_ptr,"")){
 								printf("Too many input parameter of %s\n", paramList[i].paraName);
+								ZOS_FREE(ptr_buf);
 								return false;
 							}
 						}
@@ -3844,7 +3848,7 @@
 							strcat(usnAccount, " ");
 							account = strtok_r(NULL, ",", &tmp);
 						}
-						free(ptr_buf);
+						ZOS_FREE(ptr_buf);
 						json_object_object_add(Jobj, paramList[i].paraName, json_object_new_string(usnAccount));
 						break;
 					case dalType_usbInfo:
@@ -3881,7 +3885,7 @@
 						}
 						else
 							json_object_object_add(Jobj, paramList[i].paraName, json_object_new_string(&buff[4]));
-						free(ptr_buf);
+						ZOS_FREE(ptr_buf);
 						break;	
 					case dalType_wifiSSID:
 						stringPtr = json_object_get_string(pramJobj);
