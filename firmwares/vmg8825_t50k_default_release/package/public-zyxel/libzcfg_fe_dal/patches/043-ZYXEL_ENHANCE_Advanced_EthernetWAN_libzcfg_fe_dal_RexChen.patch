Index: libzcfg_fe_dal-1.0/network/broadband/zcfg_fe_dal_advance.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ libzcfg_fe_dal-1.0/network/broadband/zcfg_fe_dal_advance.c	2016-10-05 12:12:31.123147200 +0800
@@ -0,0 +1,139 @@
+#include <ctype.h>
+#include <json/json.h>
+//#include <json/json_object.h>
+#include <time.h>
+
+#include "zcfg_common.h"
+#include "zcfg_fe_rdm_string.h"
+#include "zcfg_fe_rdm_struct.h"
+#include "zcfg_rdm_oid.h"
+#include "zcfg_rdm_obj.h"
+#include "zcfg_debug.h"
+//#include "zcfg_eid.h"
+#include "zcfg_msg.h"
+#include "zcfg_fe_dal_common.h"
+
+dal_param_t ADVANCE_param[]={
+	{"X_ZYXEL_EnableADSLPtm", dalType_boolean,	0,	0,	NULL},
+	{"X_ZYXEL_DslPhyCfg2Value", dalType_int,	0,	0,	NULL},
+	{"X_ZYXEL_Bitswap", 	 dalType_string,	0,	0,	NULL},
+	{"X_ZYXEL_SRA", 		 dalType_string,	0,	0,	NULL},
+	{"X_ZYXEL_AdslModulationCfg", 	 dalType_string,	0,	0,	NULL},
+	{"X_ZYXEL_ADSL2_AnnexM", dalType_boolean,	0,	0,	NULL},
+	{"X_ZYXEL_VDSL_8a", 	 dalType_boolean,	0,	0,	NULL},
+	{"X_ZYXEL_VDSL_8b", 	 dalType_boolean,	0,	0,	NULL},
+	{"X_ZYXEL_VDSL_8c", 	 dalType_boolean,	0,	0,	NULL},
+	{"X_ZYXEL_VDSL_8d", 	 dalType_boolean,	0,	0,	NULL},
+	{"X_ZYXEL_VDSL_12a", 	 dalType_boolean,	0,	0,	NULL},
+	{"X_ZYXEL_VDSL_12b", 	 dalType_boolean,	0,	0,	NULL},
+	{"X_ZYXEL_VDSL_17a", 	 dalType_boolean,	0,	0,	NULL},
+	{"X_ZYXEL_VDSL_30a", 	 dalType_boolean,	0,	0,	NULL},//ifdef supportVDSL_30a
+	{"X_ZYXEL_VDSL_US0_8a", 	 dalType_boolean,	0,	0,	NULL},
+	{NULL,					0,	0,	0,	NULL},
+
+};
+
+zcfgRet_t zcfgFeDal_Advance_Edit(struct json_object *Jobj, char *replyMsg){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	struct json_object *advPtmLinkObj = NULL;
+	struct json_object *advDSLLineObj = NULL;
+	objIndex_t advPtmLinkIid = {0};
+	objIndex_t advDSLLineIid = {0};
+	bool enableADSLPtm = false;
+	int dslPhyCfg2Value = 0;
+	const char *bitswap = NULL;
+	const char *SRA = NULL;
+	const char *adslModulationCfg = NULL;
+	bool ADSL2_AnnexM = false;
+	bool VDSL_8a = false;
+	bool VDSL_8b = false;
+	bool VDSL_8c = false;
+	bool VDSL_8d = false;
+	bool VDSL_12a = false;
+	bool VDSL_12b = false;
+	bool VDSL_17a = false;
+	bool VDSL_30a = false;
+	bool VDSL_US0_8a = false;
+
+	IID_INIT(advPtmLinkIid);
+	IID_INIT(advDSLLineIid);
+
+
+	//PTM Link
+	enableADSLPtm = json_object_get_boolean(json_object_object_get(Jobj, "X_ZYXEL_EnableADSLPtm"));
+	
+	while(zcfgFeObjJsonGetNext(RDM_OID_PTM_LINK, &advPtmLinkIid, &advPtmLinkObj)== ZCFG_SUCCESS){
+		json_object_object_add(advPtmLinkObj, "X_ZYXEL_EnableADSLPtm", json_object_new_boolean(enableADSLPtm));
+		zcfgFeObjJsonBlockedSet(RDM_OID_PTM_LINK, &advPtmLinkIid, advPtmLinkObj, NULL);
+		break;
+	}
+
+
+
+	//DSL Line
+	while(zcfgFeObjJsonGetNext(RDM_OID_DSL_LINE, &advDSLLineIid, &advDSLLineObj) == ZCFG_SUCCESS){
+		if(advDSLLineObj){
+			dslPhyCfg2Value = json_object_get_int(json_object_object_get(Jobj, "X_ZYXEL_DslPhyCfg2Value"));
+			json_object_object_add(advDSLLineObj, "X_ZYXEL_DslPhyCfg2Value", json_object_new_int(dslPhyCfg2Value));
+
+			bitswap = json_object_get_string(json_object_object_get(Jobj, "X_ZYXEL_Bitswap"));
+			json_object_object_add(advDSLLineObj, "X_ZYXEL_Bitswap", json_object_new_string(bitswap));
+			
+			SRA = json_object_get_string(json_object_object_get(Jobj, "X_ZYXEL_SRA"));
+			json_object_object_add(advDSLLineObj, "X_ZYXEL_SRA", json_object_new_string(SRA));
+			
+			adslModulationCfg = json_object_get_string(json_object_object_get(Jobj, "X_ZYXEL_AdslModulationCfg"));
+			json_object_object_add(advDSLLineObj, "X_ZYXEL_AdslModulationCfg", json_object_new_string(adslModulationCfg));
+
+			ADSL2_AnnexM = json_object_get_boolean(json_object_object_get(Jobj, "X_ZYXEL_ADSL2_AnnexM"));
+			json_object_object_add(advDSLLineObj, "X_ZYXEL_ADSL2_AnnexM", json_object_new_boolean(ADSL2_AnnexM));
+
+			VDSL_8a = json_object_get_boolean(json_object_object_get(Jobj, "X_ZYXEL_VDSL_8a"));
+			json_object_object_add(advDSLLineObj, "X_ZYXEL_VDSL_8a", json_object_new_boolean(VDSL_8a));
+
+			VDSL_8b = json_object_get_boolean(json_object_object_get(Jobj, "X_ZYXEL_VDSL_8b"));
+			json_object_object_add(advDSLLineObj, "X_ZYXEL_VDSL_8b", json_object_new_boolean(VDSL_8b));
+
+			VDSL_8c = json_object_get_boolean(json_object_object_get(Jobj, "X_ZYXEL_VDSL_8c"));
+			json_object_object_add(advDSLLineObj, "X_ZYXEL_VDSL_8c", json_object_new_boolean(VDSL_8c));
+
+			VDSL_8d = json_object_get_boolean(json_object_object_get(Jobj, "X_ZYXEL_VDSL_8d"));
+			json_object_object_add(advDSLLineObj, "X_ZYXEL_VDSL_8d", json_object_new_boolean(VDSL_8d));
+
+			VDSL_12a = json_object_get_boolean(json_object_object_get(Jobj, "X_ZYXEL_VDSL_12a"));
+			json_object_object_add(advDSLLineObj, "X_ZYXEL_VDSL_12a", json_object_new_boolean(VDSL_12a));
+
+			VDSL_12b = json_object_get_boolean(json_object_object_get(Jobj, "X_ZYXEL_VDSL_12b"));
+			json_object_object_add(advDSLLineObj, "X_ZYXEL_VDSL_12b", json_object_new_boolean(VDSL_12b));
+
+			VDSL_17a = json_object_get_boolean(json_object_object_get(Jobj, "X_ZYXEL_VDSL_17a"));
+			json_object_object_add(advDSLLineObj, "X_ZYXEL_VDSL_17a", json_object_new_boolean(VDSL_17a));
+#ifdef ZYXEL_VDSL_Support_30A
+			VDSL_30a = json_object_get_boolean(json_object_object_get(Jobj, "X_ZYXEL_VDSL_30a"));
+			json_object_object_add(advDSLLineObj, "X_ZYXEL_VDSL_30a", json_object_new_boolean(VDSL_30a));
+#endif
+			VDSL_US0_8a = json_object_get_boolean(json_object_object_get(Jobj, "X_ZYXEL_VDSL_US0_8a"));
+			json_object_object_add(advDSLLineObj, "X_ZYXEL_VDSL_US0_8a", json_object_new_boolean(VDSL_US0_8a));
+
+			//set
+			zcfgFeObjJsonSet(RDM_OID_DSL_LINE, &advDSLLineIid, advDSLLineObj, NULL);
+		}
+	}
+
+	zcfgFeJsonObjFree(advPtmLinkObj);
+	zcfgFeJsonObjFree(advDSLLineObj);
+	return ret;
+}
+
+
+zcfgRet_t zcfgFeDalWanAdvance(const char *method, struct json_object *Jobj, char *replyMsg){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	
+	if(!strcmp(method, "PUT"))
+		ret = zcfgFeDal_Advance_Edit(Jobj, NULL);
+	else
+		printf("Unknown method:%s\n", method);
+
+	return ret;
+}
+
Index: libzcfg_fe_dal-1.0/network/broadband/zcfg_fe_dal_ethwanlan.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ libzcfg_fe_dal-1.0/network/broadband/zcfg_fe_dal_ethwanlan.c	2016-10-05 12:12:31.123147200 +0800
@@ -0,0 +1,94 @@
+#include <ctype.h>
+#include <json/json.h>
+//#include <json/json_object.h>
+#include <time.h>
+
+#include "zcfg_common.h"
+#include "zcfg_fe_rdm_string.h"
+#include "zcfg_fe_rdm_struct.h"
+#include "zcfg_rdm_oid.h"
+#include "zcfg_rdm_obj.h"
+#include "zcfg_debug.h"
+//#include "zcfg_eid.h"
+#include "zcfg_msg.h"
+#include "zcfg_fe_dal_common.h"
+
+dal_param_t ETHWANLAN_param[]={
+	{"BCM63138_EthWanAsLan", dalType_boolean,	0,	0,	NULL},
+	{"EthWanAsLan", dalType_boolean,	0,	0,	NULL},
+	{"X_ZYXEL_Upstream", dalType_boolean,	0,	0,	NULL},
+	{NULL,					0,	0,	0,	NULL},
+
+};
+
+zcfgRet_t zcfgFeDal_ETHWanLAN_Edit(struct json_object *Jobj, char *replyMsg){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	struct json_object *ethWanLanObj = NULL;
+	objIndex_t ethWanLanObjIid = {0};
+	struct json_object *obj = NULL;
+	objIndex_t objIid;
+	bool X_ZYXEL_Upstream = false, curX_ZYXEL_Upstream = false;
+	bool EthWanAsLan = false;
+	bool BCM63138_EthWanAsLan = false;
+	const char *ethName;
+	bool wanPort = false;
+
+
+	IID_INIT(objIid);
+	IID_INIT(ethWanLanObjIid);
+
+	BCM63138_EthWanAsLan = json_object_get_boolean(json_object_object_get(Jobj, "BCM63138_EthWanAsLan"));
+
+	if(BCM63138_EthWanAsLan){
+		EthWanAsLan = json_object_get_boolean(json_object_object_get(Jobj, "EthWanAsLan"));
+		ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_GUI_CUSTOMIZATION, &ethWanLanObjIid, &ethWanLanObj);
+		if(ret == ZCFG_SUCCESS){
+			json_object_object_add(ethWanLanObj, "EthWanAsLan", json_object_new_boolean(EthWanAsLan));
+			zcfgFeObjJsonSet(RDM_OID_GUI_CUSTOMIZATION, &ethWanLanObjIid, ethWanLanObj, NULL);
+		}
+		
+	}else{
+		X_ZYXEL_Upstream = json_object_get_boolean(json_object_object_get(Jobj, "X_ZYXEL_Upstream"));
+
+		while(zcfgFeObjJsonGetNext(RDM_OID_ETH_IFACE, &objIid, &obj) == ZCFG_SUCCESS){
+			ethName = json_object_get_string(json_object_object_get(obj, "X_ZYXEL_LanPort"));
+			memcpy(&ethWanLanObjIid, &objIid, sizeof(objIndex_t));
+			if(ethName!=NULL){
+				if(!strcmp(ethName,"ETHWAN")){
+					printf("ETHWAN name found!\n", __FUNCTION__);
+					ethWanLanObj = obj;
+					wanPort = true;
+					break;
+				}
+			}
+			json_object_put(obj);
+		}
+
+		if(!wanPort){
+			//Last Port
+			zcfgFeObjJsonGet(RDM_OID_ETH_IFACE, &ethWanLanObjIid, &ethWanLanObj);
+		}
+		
+		if(ethWanLanObj!=NULL){
+			json_object_object_add(ethWanLanObj, "X_ZYXEL_Upstream", json_object_new_boolean(X_ZYXEL_Upstream));
+			zcfgFeObjJsonSet(RDM_OID_ETH_IFACE, &ethWanLanObjIid, ethWanLanObj, NULL);
+		}
+	}
+
+
+	zcfgFeJsonObjFree(ethWanLanObj);
+	return ret;
+}
+
+
+zcfgRet_t zcfgFeDalEthWanLan(const char *method, struct json_object *Jobj, char *replyMsg){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	
+	if(!strcmp(method, "PUT"))
+		ret = zcfgFeDal_ETHWanLAN_Edit(Jobj, NULL);
+	else
+		printf("Unknown method:%s\n", method);
+
+	return ret;
+}
+
Index: libzcfg_fe_dal-1.0/zcfg_fe_dal.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/zcfg_fe_dal.c	2016-10-21 08:53:59.887609811 +0800
+++ libzcfg_fe_dal-1.0/zcfg_fe_dal.c	2016-10-21 08:56:54.181604300 +0800
@@ -9,6 +9,8 @@
 
 extern dal_param_t WAN_param[];
 extern dal_param_t MGMT_param[];
+extern dal_param_t ETHWANLAN_param[];
+extern dal_param_t ADVANCE_param[];
 extern dal_param_t DNS_ENTRY_param[];
 extern dal_param_t D_DNS_param[];
 extern dal_param_t STATICROUTE_param[];
@@ -45,6 +47,8 @@
 extern zcfgRet_t zcfgFeDalMgmt(const char *method, struct json_object *Jobj, char *replyMsg);
 extern zcfgRet_t zcfgFeDalDnsEntry(const char *method, struct json_object *Jobj, char *replyMsg);
 extern zcfgRet_t zcfgFeDalDDns(const char *method, struct json_object *Jobj, char *replyMsg);
+extern zcfgRet_t zcfgFeDalEthWanLan(const char *method, struct json_object *Jobj, char *replyMsg);
+extern zcfgRet_t zcfgFeDalWanAdvance(const char *method, struct json_object *Jobj, char *replyMsg);
 extern zcfgRet_t zcfgFeDalStaticRoute(const char *method, struct json_object *Jobj, char *replyMsg);
 extern zcfgRet_t zcfgFeDalDnsRoute(const char *method, struct json_object *Jobj, char *replyMsg);
 extern zcfgRet_t zcfgFeDalPolicyRoute(const char *method, struct json_object *Jobj, char *replyMsg);
@@ -86,8 +90,10 @@
 dal_handler_t dalHandler[] = {
 {"WAN",				WAN_param,			zcfgFeDalWan},
 {"MGMT",			MGMT_param,			zcfgFeDalMgmt},
+{"ETHWANLAN", 		ETHWANLAN_param, 	zcfgFeDalEthWanLan},
 {"DNS_ENTRY",		DNS_ENTRY_param,	zcfgFeDalDnsEntry},
 {"D_DNS",			D_DNS_param,		zcfgFeDalDDns},
+{"ADVANCE",			ADVANCE_param,		zcfgFeDalWanAdvance},
 {"STATICROUTE", 	STATICROUTE_param,	zcfgFeDalStaticRoute},
 {"DNSROUTE", 		DNSROUTE_param,		zcfgFeDalDnsRoute},
 {"POLICYROUTE", 	POLICYROUTE_param,	zcfgFeDalPolicyRoute},
