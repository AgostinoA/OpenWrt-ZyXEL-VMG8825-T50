Index: libzcfg_fe_dal-1.0/network/qos/zcfg_fe_QosClass.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/network/qos/zcfg_fe_QosClass.c	2017-11-27 20:44:08.962461166 +0800
+++ libzcfg_fe_dal-1.0/network/qos/zcfg_fe_QosClass.c	2017-11-28 14:55:41.500918703 +0800
@@ -15,6 +15,14 @@
 #include "zcfg_fe_dal_common.h"
 #include "zcfg_fe_Qos.h"
 
+#define ETHTYPE_NA        -1
+#define ETHTYPE_IP        2048
+#define ETHTYPE_ARP       2054
+#define ETHTYPE_PPPOEDISC 34915
+#define ETHTYPE_PPPOESES  34916
+#define ETHTYPE_8021Q     33024
+#define ETHTYPE_IPV6      34525
+
 dal_param_t QosClass_param[] = {
 	{"idx",										dalType_int,				0, 0, 		NULL,NULL,													NULL},
 	{"Index",									dalType_int, 				0, 0, 		NULL,NULL,													dal_Add_ignore|dal_Edit|dal_Delete},
@@ -202,7 +210,19 @@
 
 extern uint32_t StrToIntConv(char *str);
 
-void getQosClassBasicInfo(const char *method, struct json_object *Jobj, s_QosClass *ClassObj_Info) {
+/*!
+ *  Copy values from Jobj to ClassObj_Info
+ *  @param[in]     method            "POST" or "PUT"
+ *  @param[in]     Jobj              Request object from GUI or CLI
+ *  @param[out]    ClassObj_Info     Output object
+ *
+ *  @return        ZCFG_SUCCESS  - success.
+ *                 ZCFG_INVALID_PARAM_VALUE - parameter value invalid.
+ *  @note          Some parameters (e.g. Ethertype) are validated in this function
+ */
+zcfgRet_t getQosClassBasicInfo(const char *method, struct json_object *Jobj, s_QosClass *ClassObj_Info)
+{
+	zcfgRet_t ret = ZCFG_SUCCESS;
 	int tmp_idx = 0,Class_Order = 0;
 	char *sourcelen = NULL, *destlen = NULL, *tmp1 = NULL, *tmp2 = NULL, *op125 = NULL, *tmp3 = NULL;
 	char *sourceaddr = NULL, *destaddr = NULL, *protocol = NULL, *srcport = NULL,*dstport = NULL;
@@ -274,22 +294,24 @@
 	if(json_object_object_get(Jobj, "Ethertype")){
 		ethertype = json_object_get_string(json_object_object_get(Jobj, "Ethertype"));
 		if(!strcmp(ethertype,"NA"))			
-			ClassObj_Info->Ethertype = -1;
+			ClassObj_Info->Ethertype = ETHTYPE_NA;
 		else if(!strcmp(ethertype,"IP"))					
-			ClassObj_Info->Ethertype = 2048;			
+			ClassObj_Info->Ethertype = ETHTYPE_IP;
 		else if(!strcmp(ethertype,"ARP"))			
-			ClassObj_Info->Ethertype = 2054;			
+			ClassObj_Info->Ethertype = ETHTYPE_ARP;
 		else if(!strcmp(ethertype,"PPPoE_DISC"))		
-			ClassObj_Info->Ethertype = 34915;		
+			ClassObj_Info->Ethertype = ETHTYPE_PPPOEDISC;
 		else if(!strcmp(ethertype,"PPPoE_SES"))					
-			ClassObj_Info->Ethertype = 34916;				
+			ClassObj_Info->Ethertype = ETHTYPE_PPPOESES;
 		else if(!strcmp(ethertype,"802.1Q"))					
-			ClassObj_Info->Ethertype = 33024;			
+			ClassObj_Info->Ethertype = ETHTYPE_8021Q;
 		else if(!strcmp(ethertype,"IPv6"))				
-			ClassObj_Info->Ethertype = 34525;
-		else{
-			number = atoi(ethertype);
-			ClassObj_Info->Ethertype = number;
+			ClassObj_Info->Ethertype = ETHTYPE_IPV6;
+		else
+		{
+			dbg_printf("%s:%d: Ethertype (%s) is in DAL enumeration list but there's no corresponding code to process it.\n",__FUNCTION__,__LINE__,ethertype);
+			printf("Invalid \"Ethertype\" value %s.\n",ethertype);
+			return ZCFG_INVALID_PARAM_VALUE;
 		}
 	}
 	if(json_object_object_get(Jobj, "SourceIPEnable")){
@@ -601,7 +623,7 @@
 		routeintf = json_object_get_string(json_object_object_get(Jobj, "ForwardingPolicy"));
 		sscanf(routeintf, "%d", &(ClassObj_Info->ForwardingPolicy));
 	}
-	return;
+	return ret;
 }
 
 void getQosClassDelKey(struct json_object *Jobj, s_QosClassDel *QosClassDel_Info) {
@@ -1075,20 +1097,20 @@
 			json_object_object_add(pramJobj, "VLANIDAction", JSON_OBJ_COPY(json_object_object_get(classObj, "X_ZYXEL_VLANIDAction")));	
 			json_object_object_add(pramJobj, "EthernetPriorityMark", JSON_OBJ_COPY(json_object_object_get(classObj, "EthernetPriorityMark")));	
 			json_object_object_add(pramJobj, "VLANIDMark", JSON_OBJ_COPY(json_object_object_get(classObj, "X_ZYXEL_VLANIDMark")));	
-	
-			if(ethertype == -1)
+
+			if(ethertype == ETHTYPE_NA)
 				json_object_object_add(pramJobj, "EtherType",json_object_new_string("NA"));
-			if(ethertype == 2048)
+			if(ethertype == ETHTYPE_IP)
 				json_object_object_add(pramJobj, "EtherType",json_object_new_string("IP"));
-			if(ethertype == 2054)
+			if(ethertype == ETHTYPE_ARP)
 				json_object_object_add(pramJobj, "EtherType",json_object_new_string("ARP"));
-			if(ethertype == 34915)
+			if(ethertype == ETHTYPE_PPPOEDISC)
 				json_object_object_add(pramJobj, "EtherType",json_object_new_string("PPPoE_DISC"));
-			if(ethertype == 34916)
+			if(ethertype == ETHTYPE_PPPOESES)
 				json_object_object_add(pramJobj, "EtherType",json_object_new_string("PPPoE_SES"));
-			if(ethertype == 33024)
+			if(ethertype == ETHTYPE_8021Q)
 				json_object_object_add(pramJobj, "EtherType",json_object_new_string("802.1Q"));
-			if(ethertype == 34525)
+			if(ethertype == ETHTYPE_IPV6)
 				json_object_object_add(pramJobj, "EtherType",json_object_new_string("IPv6"));
 			sprintf(number, "%d", trafficclass);
 			json_object_object_add(pramJobj, "Queue", json_object_new_string(number));
@@ -1106,19 +1128,19 @@
 			json_object_object_add(pramJobj, "Enable",  JSON_OBJ_COPY(json_object_object_get(classObj, "Enable")));			
 			json_object_object_add(pramJobj, "Name",  JSON_OBJ_COPY(json_object_object_get(classObj, "X_ZYXEL_Name")));	
 			json_object_object_add(pramJobj, "Queue", json_object_new_string(number));
-			if(ethertype == -1)
+			if(ethertype == ETHTYPE_NA)
 				json_object_object_add(pramJobj, "EtherType",json_object_new_string("NA"));
-			if(ethertype == 2048)
+			if(ethertype == ETHTYPE_IP)
 				json_object_object_add(pramJobj, "EtherType",json_object_new_string("IP"));
-			if(ethertype == 2054)
+			if(ethertype == ETHTYPE_ARP)
 				json_object_object_add(pramJobj, "EtherType",json_object_new_string("ARP"));
-			if(ethertype == 34915)
+			if(ethertype == ETHTYPE_PPPOEDISC)
 				json_object_object_add(pramJobj, "EtherType",json_object_new_string("PPPoE_DISC"));
-			if(ethertype == 34916)
+			if(ethertype == ETHTYPE_PPPOESES)
 				json_object_object_add(pramJobj, "EtherType",json_object_new_string("PPPoE_SES"));
-			if(ethertype == 33024)
+			if(ethertype == ETHTYPE_8021Q)
 				json_object_object_add(pramJobj, "EtherType",json_object_new_string("802.1Q"));
-			if(ethertype == 34525)
+			if(ethertype == ETHTYPE_IPV6)
 				json_object_object_add(pramJobj, "EtherType",json_object_new_string("IPv6"));
 			json_object_array_add(Jarray, pramJobj);						
 			count++;							
@@ -1224,7 +1246,9 @@
 	IID_INIT(classIid);
 	memset(&ClassObj_Info,0,sizeof(ClassObj_Info));
 
-	getQosClassBasicInfo(method,Jobj, &ClassObj_Info);
+	if((ret = getQosClassBasicInfo(method, Jobj, &ClassObj_Info)) != ZCFG_SUCCESS)
+		return ret;
+
 	zcfg_offset_t oid;		
 	oid = RDM_OID_QOS_CLS;		
 	if(ClassObj_Info.Name != NULL){	
@@ -1283,7 +1307,8 @@
 	IID_INIT(classIid);
 	memset(&ClassObj_Info,0,sizeof(ClassObj_Info));
 
-	getQosClassBasicInfo(method, Jobj, &ClassObj_Info);
+	if((ret = getQosClassBasicInfo(method, Jobj, &ClassObj_Info)) != ZCFG_SUCCESS)
+		return ret;
 	
 	zcfg_offset_t oid;		
 	oid = RDM_OID_QOS_CLS;
@@ -1429,4 +1454,4 @@
 	}
 
 	return ret;
-}
\ No newline at end of file
+}
