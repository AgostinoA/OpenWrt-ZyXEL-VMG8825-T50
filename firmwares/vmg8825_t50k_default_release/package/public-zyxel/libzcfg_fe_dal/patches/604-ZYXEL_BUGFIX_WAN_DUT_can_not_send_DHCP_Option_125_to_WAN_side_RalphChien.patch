Index: libzcfg_fe_dal-1.0/network/broadband/zcfg_fe_dal_broadband.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/network/broadband/zcfg_fe_dal_broadband.c	2018-07-20 17:13:21.323107000 +0800
+++ libzcfg_fe_dal-1.0/network/broadband/zcfg_fe_dal_broadband.c	2018-07-20 17:15:15.848107000 +0800
@@ -410,6 +410,38 @@
 	sprintf(hex,"%x%x",(num/16),(num%16));
 	return 1;
 }
+void opt125ValGet(char *val){
+	struct json_object *devInfoObj = NULL;
+	objIndex_t objIid;
+	char tmpHexStr[256] = {0};
+	char ouiHexStr[256] = {0};
+	char snHexStr[256] = {0};
+	char productHexStr[256] = {0};
+	int len = 0, dataLen = 0, lenOui = 0, lenSn = 0, lenProduct = 0;
+
+	IID_INIT(objIid);
+	if(zcfgFeObjJsonGetWithoutUpdate(RDM_OID_DEV_INFO, &objIid, &devInfoObj) == ZCFG_SUCCESS){
+		lenOui = strlen(json_object_get_string(json_object_object_get(devInfoObj, "ManufacturerOUI")));
+		lenSn = strlen(json_object_get_string(json_object_object_get(devInfoObj, "SerialNumber")));
+		lenProduct = strlen(json_object_get_string(json_object_object_get(devInfoObj, "ProductClass")));
+		charStrToHexStr(json_object_get_string(json_object_object_get(devInfoObj, "ManufacturerOUI")), ouiHexStr);
+		charStrToHexStr(json_object_get_string(json_object_object_get(devInfoObj, "SerialNumber")), snHexStr);
+		charStrToHexStr(json_object_get_string(json_object_object_get(devInfoObj, "ProductClass")), productHexStr);
+
+		/* entprise(4 bytes) + dataLen(1 byte) + code1(1 byte) + len1(1 byte) + oui(string) + code2 + len2 + sn(string) + code3 + len3 + product(string) */
+		len = 4 + 1 + 1 + 1 + lenOui + 1 + 1 + lenSn + 1 + 1 + lenProduct;
+		/* -entiprise(4 bytes) - dataLen(1 byte)*/
+		dataLen = len - 4 - 1; 
+
+		/* Follow GUI: option125Value = 125 + len + entNum + dataLen + codeOui + lenOui + oui + codeSn + lenSn + sn + codeProduct + lenProduct + product */
+		sprintf(tmpHexStr,"%02x%02x%08x%02x%02x%02x%s%02x%02x%s%02x%02x%s",125,len,3561,dataLen,1,lenOui,ouiHexStr,2,lenSn,snHexStr,3,lenProduct,productHexStr);
+		strcat(val,tmpHexStr);
+		
+	}
+	if(devInfoObj){
+        zcfgFeJsonObjFree(devInfoObj);
+    }
+}
 int opt61ValEncode(char *iaid, char *duid, char *encVal, int tag){
 	if(encVal)
 		strcpy(encVal,"");
@@ -1579,6 +1611,10 @@
 			json_object_object_add(Jobj,"option61Value",json_object_new_string(Value));
 		}
 	}
+    else if(Tag == 125){
+        opt125ValGet(Value);
+        json_object_object_add(Jobj,"option125Value",json_object_new_string(Value));
+    }
 
 	if(*optObj){
 		json_object_object_add(*optObj, "Enable", json_object_new_boolean(true));
@@ -1825,6 +1861,14 @@
 			strcpy(Value, tmp);
 		}
 	}
+    else if(Tag == 125 && optEnable){
+        if(strlen(newValue) == 0){
+            opt125ValGet(Value);
+        }
+        else{
+            snprintf(Value, sizeof(Value), newValue);
+        }
+    }
 
 	if(CurrOptEnable && optEnable){//enable to enable
 		if(*optObj && strcmp(CurrValue, Value)){
