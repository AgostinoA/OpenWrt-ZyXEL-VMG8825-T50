Index: libzcfg_fe_dal-1.0/maintenance/mail/zcfg_fe_dal_mail_notification.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/maintenance/mail/zcfg_fe_dal_mail_notification.c	2017-07-18 19:01:32.669496599 +0800
+++ libzcfg_fe_dal-1.0/maintenance/mail/zcfg_fe_dal_mail_notification.c	2017-07-18 19:02:29.203852000 +0800
@@ -12,30 +12,23 @@
 #include "zcfg_webgui_flag.h"
 
 dal_param_t MAIL_NOTIFICATION_param[]={
-	{"Enable",								dalType_boolean,0,	0,	NULL},
-	{"RequiresTLS",							dalType_boolean,0,	0,	NULL},
-	{"SMTPServerPort",						dalType_int,	0,	0,	NULL},
-	{"SMTPServerAddress",					dalType_string,	0,	0,	NULL},
-	{"AuthUser",							dalType_string,	0,	0,	NULL},
-	{"AuthPass",							dalType_string,	0,	0,	NULL},
-	{"EmailAddress",						dalType_string,	0,	0,	NULL},
-	{"SMTPSecurity",						dalType_string,	0,	0,	NULL},
-	{"DeleteMail",							dalType_string,	0,	0,	NULL},
-	{"MailIndex",							dalType_int,	0,	0,	NULL},
+	{"SMTPServerAddress",					dalType_string, 0,	0,	NULL,	NULL,	dal_Add},
+	{"SMTPServerPort",						dalType_int,	0,	65535,	NULL,	NULL,	dal_Add},	
+	{"AuthUser",							dalType_string,	0,	0,	NULL,	NULL,	dal_Add},
+	{"AuthPass",							dalType_string,	0,	0,	NULL,	NULL,	dal_Add},
+	{"EmailAddress",						dalType_emailAddr,	0,	0,	NULL,	NULL,	dal_Add},
+	{"SMTPSecurity",						dalType_string,	0,	0,	NULL,	"ssl|starttls",	dal_Add},
+	{"Index",								dalType_int,	0,	0,	NULL,	NULL,	dal_Delete},
 	{NULL,									0,				0,	0,	NULL},
 };
 
-bool Enable;
-bool RequiresTLS;
 unsigned int SMTPServerPort;
 const char* SMTPServerAddress;
 const char* AuthUser;
 const char* AuthPass;
 const char* EmailAddress;
 const char* SMTPSecurity;
-const char* SMTPSecurity;
 const char* DeleteMail;
-unsigned int MailIndex;
 
 struct json_object *mailNotificationJobj;
 
@@ -52,16 +45,7 @@
 	return;
 }
 
-void zcfgFeDalDelMailGet(struct json_object *Jobj){
-
-	DeleteMail = json_object_get_string(json_object_object_get(Jobj, "DeleteMail"));
-
-	return;
-}
-
 void getMailNotificationBasicInfo(struct json_object *Jobj){
-	Enable = json_object_get_boolean(json_object_object_get(Jobj, "Enable"));
-	RequiresTLS = json_object_get_boolean(json_object_object_get(Jobj, "RequiresTLS"));
 	SMTPServerPort = json_object_get_int(json_object_object_get(Jobj, "SMTPServerPort"));
 	SMTPServerAddress = json_object_get_string(json_object_object_get(Jobj, "SMTPServerAddress"));
 	AuthUser = json_object_get_string(json_object_object_get(Jobj, "AuthUser"));
@@ -74,32 +58,23 @@
 
 zcfgRet_t zcfgFeDalMailNotificationDel(struct json_object *Jobj, char *replyMsg){
 	zcfgRet_t ret = ZCFG_SUCCESS;
-	printf("%s(): input --- %s \n ",__FUNCTION__,json_object_to_json_string(Jobj));
-	zcfgFeDalDelMailGet(Jobj);
-
 	IID_INIT(delIid);
+	int index = 0;
+	zcfg_offset_t oid;
+	oid = RDM_OID_MAIL_SERVICE;
+	
+	index = json_object_get_int(json_object_object_get(Jobj, "Index"));
+	ret = convertIndextoIid(index, &delIid, oid, NULL, NULL, replyMsg);
+	if(ret != ZCFG_SUCCESS)
+		return ret;
 
-	while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_MAIL_SERVICE, &delIid, &mailNotificationJobj) == ZCFG_SUCCESS) {
-		EmailAddress = json_object_get_string(json_object_object_get(mailNotificationJobj, "EmailAddress"));
-		if(!strcmp(EmailAddress, DeleteMail)){
-			if((ret = zcfgFeObjJsonDel(RDM_OID_MAIL_SERVICE, &delIid, NULL)) != ZCFG_SUCCESS){
-				printf("%s: delete mail service obj fail \n", __FUNCTION__);
-				goto exit;
-			}
-		}
-		zcfgFeJsonObjFree(mailNotificationJobj);
-	}
-
-exit:
-	freeAllMailNotificationObjects();
+	ret = zcfgFeObjJsonDel(oid, &delIid, NULL);
 	return ret;
 }
 
 
 zcfgRet_t zcfgFeDalMailNotificationAdd(struct json_object *Jobj, char *replyMsg){
 	zcfgRet_t ret = ZCFG_SUCCESS;
-	printf("%s(): input --- %s \n ",__FUNCTION__,json_object_to_json_string(Jobj));
-
 	initMailNotificationGlobalObjects();
 	getMailNotificationBasicInfo(Jobj);
 	objIndex_t objIid;
@@ -115,8 +90,8 @@
 		return false;
 	}
 
-	json_object_object_add(mailNotificationJobj, "Enable", json_object_new_boolean(Enable));
-	json_object_object_add(mailNotificationJobj, "RequiresTLS", json_object_new_boolean(RequiresTLS));
+	json_object_object_add(mailNotificationJobj, "Enable", json_object_new_boolean(true));
+	json_object_object_add(mailNotificationJobj, "RequiresTLS", json_object_new_boolean(false));
 	json_object_object_add(mailNotificationJobj, "SMTPServerPort", json_object_new_int(SMTPServerPort));
 	json_object_object_add(mailNotificationJobj, "SMTPServerAddress", json_object_new_string(SMTPServerAddress));
 	json_object_object_add(mailNotificationJobj, "AuthUser", json_object_new_string(AuthUser));
@@ -135,6 +110,51 @@
 	return ret;
 }
 
+void zcfgFeDalShowMailNotification(struct json_object *Jarray){
+	struct json_object *obj = NULL;
+	int len = 0, i;
+	if(json_object_get_type(Jarray) != json_type_array){
+		printf("wrong Jobj format!\n");
+		return;
+	}
+	printf("%-10s %-30s %-15s %-10s %-15s %-10s \n",
+			"Index", "Mail Server Address", "Username", "Port", "Security", "E-mail Address");
+	len = json_object_array_length(Jarray);
+	for(i=0;i<len;i++){
+		obj = json_object_array_get_idx(Jarray, i);
+		printf("%-10s %-30s %-15s %-10s %-15s %-10s \n",
+			json_object_get_string(json_object_object_get(obj, "index")),
+			json_object_get_string(json_object_object_get(obj, "serverAddr")), 
+			json_object_get_string(json_object_object_get(obj, "username")), 
+			json_object_get_string(json_object_object_get(obj, "port")), 
+			json_object_get_string(json_object_object_get(obj, "security")), 
+			json_object_get_string(json_object_object_get(obj, "mailAddr")));
+	}
+}
+
+
+zcfgRet_t zcfgFeDalMailNotificationGet(struct json_object *Jobj, struct json_object *Jarray, char *replyMsg){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	struct json_object *paramJobj = NULL;
+	struct json_object *emailObj = NULL;
+	objIndex_t emailIid = {0};
+	int index = 1;
+	while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_MAIL_SERVICE, &emailIid, &emailObj) == ZCFG_SUCCESS){
+		paramJobj = json_object_new_object();
+		json_object_object_add(paramJobj, "index", json_object_new_int(index));
+		json_object_object_add(paramJobj, "serverAddr", JSON_OBJ_COPY(json_object_object_get(emailObj, "SMTPServerAddress")));
+		json_object_object_add(paramJobj, "username", JSON_OBJ_COPY(json_object_object_get(emailObj, "AuthUser")));
+		json_object_object_add(paramJobj, "port", JSON_OBJ_COPY(json_object_object_get(emailObj, "SMTPServerPort")));
+		json_object_object_add(paramJobj, "security", JSON_OBJ_COPY(json_object_object_get(emailObj, "SMTPSecurity")));
+		json_object_object_add(paramJobj, "mailAddr", JSON_OBJ_COPY(json_object_object_get(emailObj, "EmailAddress")));
+		json_object_array_add(Jarray, paramJobj);
+		zcfgFeJsonObjFree(emailObj);
+		index++;
+	}
+
+	return ret;
+}
+
 zcfgRet_t zcfgFeDalMailNotification(const char *method, struct json_object *Jobj, struct json_object *Jarray, char *replyMsg)
 {
 	zcfgRet_t ret = ZCFG_SUCCESS;
@@ -145,7 +165,9 @@
 	if(!strcmp(method, "POST")) {
 		ret = zcfgFeDalMailNotificationAdd(Jobj, NULL);
 	}else if(!strcmp(method, "DELETE")) {
-		ret = zcfgFeDalMailNotificationDel(Jobj, NULL);
+		ret = zcfgFeDalMailNotificationDel(Jobj, replyMsg);
+	}else if(!strcmp(method, "GET")){
+		ret = zcfgFeDalMailNotificationGet(Jobj, Jarray, NULL);
 	}
 
 	return ret;
Index: libzcfg_fe_dal-1.0/zcfg_fe_dal.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/zcfg_fe_dal.c	2017-07-18 19:01:32.989496593 +0800
+++ libzcfg_fe_dal-1.0/zcfg_fe_dal.c	2017-07-18 19:02:04.915852000 +0800
@@ -210,6 +210,9 @@
 extern void zcfgFeDalShowQosShaper(struct json_object *Jarray);
 extern void zcfgFeDalShowQosQueue(struct json_object *Jarray);
 extern void zcfgFeDalShowWwanBackup(struct json_object *Jarray);
+extern void zcfgFeDalShowMailNotification(struct json_object *Jarray);
+
+
 dal_handler_t dalHandler[] = {
 {"wan",				WAN_param,			zcfgFeDalWan,			zcfgFeDalShowWan,			"get|add|edit|delete",	"Broadband"},
 {"tr69",			MGMT_param,			zcfgFeDalMgmt,			zcfgFeDalShowMgmt,			"get|edit",			"TR-069_Client"},
@@ -265,7 +268,7 @@
 {"speeddial",		VOIP_CALLRULE_param,zcfgFeDalVoipCallRule,	zcfgFeDalShowVoipCallRule,	"get|edit|delete",	"Call_Rule"},//Call_Rule
 {"CALLBLOCK",		VOIP_CALLBLOCK_param,zcfgFeDalVoipCallBlock,NULL,						"edit",				""},//Call_Rule
 #endif
-{"EMAIL",			MAIL_NOTIFICATION_param,zcfgFeDalMailNotification,NULL,					"add|delete", 		""},//Email_Notify
+{"email_ntfy",		MAIL_NOTIFICATION_param,zcfgFeDalMailNotification,zcfgFeDalShowMailNotification,	"add|delete|get", 		"Email_Notify"},//Email_Notify
 {"LOGSETTING",		LOG_SETTING_param,	zcfgFeDalLogSetting,	NULL,						"add|edit", 		""}, //Log
 {"PINGTEST",		PING_TEST_param,	zcfgFeDalPingTest,		NULL,						"edit",				""},//
 {"8021AG",			IEEE_8021AG_param,	zcfgFe8021ag,			NULL,						"edit",				""},//Diagnostic_Result
