Index: libzcfg_fe_dal-1.0/maintenance/mail/zcfg_fe_dal_mail_notification.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ libzcfg_fe_dal-1.0/maintenance/mail/zcfg_fe_dal_mail_notification.c	2016-11-03 18:01:10.053270400 +0800
@@ -0,0 +1,153 @@
+
+#include <json/json.h>
+
+#include "zcfg_common.h"
+#include "zcfg_fe_rdm_string.h"
+#include "zcfg_fe_rdm_struct.h"
+#include "zcfg_rdm_oid.h"
+#include "zcfg_rdm_obj.h"
+#include "zcfg_debug.h"
+#include "zcfg_msg.h"
+#include "zcfg_fe_dal_common.h"
+#include "zcfg_webgui_flag.h"
+
+dal_param_t MAIL_NOTIFICATION_param[]={
+	{"Enable",								dalType_boolean,0,	0,	NULL},
+	{"RequiresTLS",							dalType_boolean,0,	0,	NULL},
+	{"SMTPServerPort",						dalType_int,	0,	0,	NULL},
+	{"SMTPServerAddress",					dalType_string,	0,	0,	NULL},
+	{"AuthUser",							dalType_string,	0,	0,	NULL},
+	{"AuthPass",							dalType_string,	0,	0,	NULL},
+	{"EmailAddress",						dalType_string,	0,	0,	NULL},
+	{"SMTPSecurity",						dalType_string,	0,	0,	NULL},
+	{"DeleteMail",							dalType_string,	0,	0,	NULL},
+	{"MailIndex",							dalType_int,	0,	0,	NULL},
+	{NULL,									0,				0,	0,	NULL},
+};
+
+bool Enable;
+bool RequiresTLS;
+unsigned int SMTPServerPort;
+const char* SMTPServerAddress;
+const char* AuthUser;
+const char* AuthPass;
+const char* EmailAddress;
+const char* SMTPSecurity;
+const char* SMTPSecurity;
+const char* DeleteMail;
+unsigned int MailIndex;
+
+struct json_object *mailNotificationJobj;
+
+objIndex_t delIid;
+
+void freeAllMailNotificationObjects(){
+	if(mailNotificationJobj) json_object_put(mailNotificationJobj);
+	return;
+}
+
+void initMailNotificationGlobalObjects(){
+	mailNotificationJobj = NULL;
+
+	return;
+}
+
+void zcfgFeDalDelMailGet(struct json_object *Jobj){
+
+	DeleteMail = json_object_get_string(json_object_object_get(Jobj, "DeleteMail"));
+
+	return;
+}
+
+void getMailNotificationBasicInfo(struct json_object *Jobj){
+	Enable = json_object_get_boolean(json_object_object_get(Jobj, "Enable"));
+	RequiresTLS = json_object_get_boolean(json_object_object_get(Jobj, "RequiresTLS"));
+	SMTPServerPort = json_object_get_int(json_object_object_get(Jobj, "SMTPServerPort"));
+	SMTPServerAddress = json_object_get_string(json_object_object_get(Jobj, "SMTPServerAddress"));
+	AuthUser = json_object_get_string(json_object_object_get(Jobj, "AuthUser"));
+	AuthPass = json_object_get_string(json_object_object_get(Jobj, "AuthPass"));
+	EmailAddress = json_object_get_string(json_object_object_get(Jobj, "EmailAddress"));
+	SMTPSecurity = json_object_get_string(json_object_object_get(Jobj, "SMTPSecurity"));
+
+	return;
+}
+
+zcfgRet_t zcfgFeDalMailNotificationDel(struct json_object *Jobj, char *replyMsg){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	printf("%s(): input --- %s \n ",__FUNCTION__,json_object_to_json_string(Jobj));
+	zcfgFeDalDelMailGet(Jobj);
+
+	IID_INIT(delIid);
+
+	while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_MAIL_SERVICE, &delIid, &mailNotificationJobj) == ZCFG_SUCCESS) {
+		EmailAddress = json_object_get_string(json_object_object_get(mailNotificationJobj, "EmailAddress"));
+		if(!strcmp(EmailAddress, DeleteMail)){
+			if((ret = zcfgFeObjJsonDel(RDM_OID_MAIL_SERVICE, &delIid, NULL)) != ZCFG_SUCCESS){
+				printf("%s: delete mail service obj fail \n", __FUNCTION__);
+				goto exit;
+			}
+		}
+		zcfgFeJsonObjFree(mailNotificationJobj);
+	}
+
+exit:
+	freeAllMailNotificationObjects();
+	return ret;
+}
+
+
+zcfgRet_t zcfgFeDalMailNotificationAdd(struct json_object *Jobj, char *replyMsg){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	printf("%s(): input --- %s \n ",__FUNCTION__,json_object_to_json_string(Jobj));
+
+	initMailNotificationGlobalObjects();
+	getMailNotificationBasicInfo(Jobj);
+	objIndex_t objIid;
+
+	IID_INIT(objIid);
+	if((ret = zcfgFeObjJsonAdd(RDM_OID_MAIL_SERVICE, &objIid, NULL)) != ZCFG_SUCCESS) {
+		printf("%s: fail to add mail service with ret = %d\n", __FUNCTION__, ret);
+		return false;
+	}
+
+	if((ret = zcfgFeObjJsonGet(RDM_OID_MAIL_SERVICE, &objIid, &mailNotificationJobj)) != ZCFG_SUCCESS) {
+		printf("%s: Object retrieve fail\n", __FUNCTION__);
+		return false;
+	}
+
+	json_object_object_add(mailNotificationJobj, "Enable", json_object_new_boolean(Enable));
+	json_object_object_add(mailNotificationJobj, "RequiresTLS", json_object_new_boolean(RequiresTLS));
+	json_object_object_add(mailNotificationJobj, "SMTPServerPort", json_object_new_int(SMTPServerPort));
+	json_object_object_add(mailNotificationJobj, "SMTPServerAddress", json_object_new_string(SMTPServerAddress));
+	json_object_object_add(mailNotificationJobj, "AuthUser", json_object_new_string(AuthUser));
+	json_object_object_add(mailNotificationJobj, "AuthPass", json_object_new_string(AuthPass));
+	json_object_object_add(mailNotificationJobj, "EmailAddress", json_object_new_string(EmailAddress));
+	json_object_object_add(mailNotificationJobj, "SMTPSecurity", json_object_new_string(SMTPSecurity));
+
+	if((ret = zcfgFeObjJsonSet(RDM_OID_MAIL_SERVICE, &objIid, mailNotificationJobj, NULL)) == ZCFG_SUCCESS)
+	{
+		printf("%s: Set mail service fail\n", __FUNCTION__);
+		goto exit;
+	}
+
+exit:
+	freeAllMailNotificationObjects();
+	return ret;
+}
+
+zcfgRet_t zcfgFeDalMailNotification(const char *method, struct json_object *Jobj, char *replyMsg)
+{
+	zcfgRet_t ret = ZCFG_SUCCESS;
+
+	if(!method || !Jobj)
+		return ZCFG_INTERNAL_ERROR;
+
+	if(!strcmp(method, "POST")) {
+		ret = zcfgFeDalMailNotificationAdd(Jobj, NULL);
+	}else if(!strcmp(method, "DELETE")) {
+		ret = zcfgFeDalMailNotificationDel(Jobj, NULL);
+	}
+
+	return ret;
+}
+
Index: libzcfg_fe_dal-1.0/Makefile
===================================================================
--- libzcfg_fe_dal-1.0.orig/Makefile	2016-11-03 19:54:10.204137986 +0800
+++ libzcfg_fe_dal-1.0/Makefile	2016-11-03 19:56:36.314223600 +0800
@@ -16,6 +16,7 @@
 NETWORK_WIRELESS_PATH = ./network/wireless
 NETWORK_USBSERVICE_PATH = ./network/usbService
 MAINTENANCE_MGMT = ./maintenance/mgmt
+MAINTENANCE_EMAIL_PATH = ./maintenance/mail
 MAINTENANCE = ./maintenance
 VOIP_SIP_PATH = ./voip/sip
 VOIP_SIP_PHONE_PATH = ./voip/phone
@@ -34,6 +35,7 @@
 SOURCES += $(wildcard $(MAINTENANCE)/*.c)
 SOURCES += $(wildcard $(VOIP_SIP_PATH)/*.c)
 SOURCES += $(wildcard $(VOIP_SIP_PHONE_PATH)/*.c)
+SOURCES += $(wildcard $(MAINTENANCE_EMAIL_PATH)/*.c)
 SOURCES += $(wildcard $(VOIP_SIP_CALLRULE_PATH)/*.c)
 SOURCES += $(wildcard $(NETWORK_WIRELESS_PATH)/*.c)
 OBJS = $(patsubst %.c, %.o, $(SOURCES))
Index: libzcfg_fe_dal-1.0/zcfg_fe_dal.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/zcfg_fe_dal.c	2016-11-03 19:54:10.224137987 +0800
+++ libzcfg_fe_dal-1.0/zcfg_fe_dal.c	2016-11-03 19:56:19.025266500 +0800
@@ -47,6 +47,7 @@
 extern dal_param_t VOIP_PHONEDECT_param[];
 extern dal_param_t VOIP_CALLRULE_param[];
 extern dal_param_t VOIP_CALLBLOCK_param[];
+extern dal_param_t MAIL_NOTIFICATION_param[];
 extern dal_param_t USB_FILESHARING_param[];
 extern dal_param_t USB_MEDIASERVER_param[];
 extern zcfgRet_t zcfgFeDalWan(const char *method, struct json_object *Jobj, char *replyMsg);
@@ -89,6 +90,7 @@
 extern zcfgRet_t zcfgFeDalVoipPhoneDECT(const char *method, struct json_object *Jobj, char *replyMsg);
 extern zcfgRet_t zcfgFeDalVoipCallRule(const char *method, struct json_object *Jobj, char *replyMsg);
 extern zcfgRet_t zcfgFeDalVoipCallBlock(const char *method, struct json_object *Jobj, char *replyMsg);
+extern zcfgRet_t zcfgFeDalMailNotification(const char *method, struct json_object *Jobj, char *replyMsg);
 extern zcfgRet_t zcfgFeDalUsbFilesharing(const char *method, struct json_object *Jobj, char *replyMsg);
 extern zcfgRet_t zcfgFeDalUsbMediaserver(const char *method, struct json_object *Jobj, char *replyMsg);
 
@@ -140,6 +142,7 @@
 {"PHONEDECT",		VOIP_PHONEDECT_param,zcfgFeDalVoipPhoneDECT},
 {"CALLRULE",		VOIP_CALLRULE_param,zcfgFeDalVoipCallRule},
 {"CALLBLOCK",		VOIP_CALLBLOCK_param,zcfgFeDalVoipCallBlock},
+{"EMAIL",			MAIL_NOTIFICATION_param,zcfgFeDalMailNotification},
 {"USB_FILESHARING", 		USB_FILESHARING_param,	zcfgFeDalUsbFilesharing},
 {"USB_MEDIASERVER", 		USB_MEDIASERVER_param,	zcfgFeDalUsbMediaserver},
 {NULL,				NULL,				NULL}
