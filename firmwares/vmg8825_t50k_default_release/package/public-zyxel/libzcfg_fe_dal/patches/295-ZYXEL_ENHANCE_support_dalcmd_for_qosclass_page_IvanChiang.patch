Index: libzcfg_fe_dal-1.0/Makefile
===================================================================
--- libzcfg_fe_dal-1.0.orig/Makefile	2017-08-08 11:18:27.385690104 +0800
+++ libzcfg_fe_dal-1.0/Makefile	2017-08-08 11:20:38.429526600 +0800
@@ -99,6 +99,10 @@
 CFLAGS += -DZYXEL_WEB_GUI_ECONET_QoS_STYLE
 endif
 
+ifeq ($(CONFIG_ZYXEL_WEB_GUI_SHOW_QOS_CLS_TARGET_INTF),y)
+CFLAGS += -DZYXEL_WEB_GUI_SHOW_QOS_CLS_TARGET_INTF
+endif
+
 #iskon
 ifeq ($(CONFIG_ISKON_CUSTOMIZATION),y)
 CFLAGS += -DISKON_CUSTOMIZATION
Index: libzcfg_fe_dal-1.0/network/qos/zcfg_fe_QosClass.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/network/qos/zcfg_fe_QosClass.c	2017-08-08 11:18:27.033690102 +0800
+++ libzcfg_fe_dal-1.0/network/qos/zcfg_fe_QosClass.c	2017-08-08 11:29:35.389526600 +0800
@@ -15,17 +15,100 @@
 #include "zcfg_fe_dal_common.h"
 #include "zcfg_fe_Qos.h"
 
-typedef struct s_ClassObjInfo {
+dal_param_t QosClass_param[] = {
+	{"idx",										dalType_int,				0, 0, 		NULL,NULL,													NULL},
+	{"Index",									dalType_int, 				0, 0, 		NULL,NULL,													dal_Add_ignore|dal_Edit|dal_Delete},
+	{"Queue",									dalType_QueueList,			0, 0, 		NULL,NULL,													dal_Add},
+	{"Enable",									dalType_boolean,			0, 0, 		NULL,NULL,													dal_Add},
+	{"Name",									dalType_string, 			0, 0,		NULL,NULL,													dal_Add},
+	{"Order",									dalType_int, 				0, 0, 		NULL,NULL,													dal_Add},
+	{"Interface",								dalType_ClassIntf, 			0, 0, 		NULL,NULL,													dal_Add},
+	{"TargetInterface",							dalType_string, 			0, 0, 		NULL,NULL,													NULL},
+	{"Ethertype",								dalType_string, 			0, 0, 		NULL,"NA|IP|ARP|PPPoE_DISC|PPPoE_SES|802.1Q|IPv6",			dal_Add},
+	{"SourceIPEnable",							dalType_boolean,			0, 0, 		NULL,NULL,													NULL},
+	{"SourceIP",								dalType_string, 			0, 0, 		NULL,NULL,													NULL},
+	{"SourceMask",								dalType_string, 			0, 0,		NULL,NULL,													NULL},
+	{"SourceIPPrefix",							dalType_v6AddrPrefix, 		0, 0, 		NULL,NULL,													NULL},
+	{"SourceIPExclude",							dalType_boolean, 			0, 0, 		NULL,NULL,													NULL},
+	{"SourcePortEnable",						dalType_boolean,			0, 0, 		NULL,NULL,													NULL},
+	{"SourcePort",								dalType_int, 				0, 0, 		NULL,NULL,													NULL},
+	{"SourcePortRangeMax",						dalType_int, 				0, 0, 		NULL,NULL,													NULL},
+	{"SourcePortExclude",						dalType_boolean, 			0, 0, 		NULL,NULL,													NULL},
+	{"SourceMACEnable",							dalType_boolean,			0, 0, 		NULL,NULL,													dal_Add},
+	{"SourceMACAddress",						dalType_string, 			0, 0, 		NULL,NULL,													NULL},
+	{"SourceMACMask",							dalType_string, 			0, 0, 		NULL,NULL,													NULL},
+	{"SourceMACExclude",						dalType_boolean, 			0, 0, 		NULL,NULL,													NULL},
+	{"DestIPEnable",							dalType_boolean,			0, 0, 		NULL,NULL,													NULL},
+	{"DestIP",									dalType_string, 			0, 0, 		NULL,NULL,													NULL},
+	{"DestMask",								dalType_string, 			0, 0, 		NULL,NULL,													NULL},
+	{"DestIPPrefix",							dalType_v6AddrPrefix, 		0, 0, 		NULL,NULL,													NULL},
+	{"DestIPExclude",							dalType_boolean, 			0, 0, 		NULL,NULL,													NULL},
+	{"DestPortEnable",							dalType_boolean, 			0, 0, 		NULL,NULL,													NULL},
+	{"DestPort",								dalType_int, 				0, 0, 		NULL,NULL,													NULL},
+	{"DestPortRangeMax",						dalType_int, 				0, 0, 		NULL,NULL,													NULL},
+	{"DestPortExclude",							dalType_boolean, 			0, 0, 		NULL,NULL,													NULL},
+	{"DestMACEnable",							dalType_boolean, 			0, 0, 		NULL,NULL,													dal_Add},
+	{"DestMACAddress",							dalType_string, 			0, 0, 		NULL,NULL,													NULL},
+	{"DestMACMask",								dalType_string,				0, 0, 		NULL,NULL,													NULL},
+	{"DestMACExclude",							dalType_boolean, 			0, 0, 		NULL,NULL,													NULL},
+	{"ServiceEnable",							dalType_boolean, 			0, 0, 		NULL,NULL,													NULL},
+	{"Service",									dalType_string, 			0, 0, 		NULL,NULL,													NULL},
+	{"ServiceExclude",							dalType_boolean, 			0, 0, 		NULL,NULL,													NULL},
+	{"ProtocolEnable",							dalType_boolean, 			0, 0, 		NULL,NULL,													NULL},
+	{"Protocol",								dalType_int,			    0, 0, 		NULL,NULL,													NULL},
+	{"ProtocolExclude",							dalType_boolean,    		0, 0, 		NULL,NULL,													NULL},
+	{"DhcpEnable",								dalType_boolean,			0, 0, 		NULL,NULL,                            						NULL},
+	{"Dhcp",									dalType_string,			    0, 0, 		NULL,"op60|op61|op77|op125",								NULL},
+	{"SourceVendorClassID",						dalType_string,             0, 0, 		NULL,NULL,													NULL},
+	{"SourceVendorClassIDExclude",				dalType_boolean,            0, 0, 		NULL,NULL,													NULL},
+	{"SourceClientIDType",						dalType_string,             0, 0, 		NULL,NULL,													NULL},
+	{"SourceClientID",							dalType_string, 			0, 0, 		NULL,NULL,													NULL},
+	{"SourceClientIDExclude",					dalType_boolean, 			0, 0, 		NULL,NULL,													NULL},
+	{"SourceUserClassID",						dalType_string, 			0, 0, 		NULL,NULL,													NULL},
+	{"SourceUserClassIDExclude",				dalType_boolean, 			0, 0, 		NULL,NULL,													NULL},
+	{"SourceVendorSpecificInfoEnterprise",		dalType_string, 			0, 0, 		NULL,NULL,													NULL},
+	{"SourceVendorSpecificInfo",				dalType_string, 			0, 0, 		NULL,NULL,													NULL},
+	{"SourceVendorSpecificInfoExclude",			dalType_boolean,		    0, 0, 		NULL,NULL,													NULL},
+	{"IPLengthEnable",							dalType_boolean, 			0, 0, 		NULL,NULL,													NULL},
+	{"IPLengthMin",								dalType_int, 				46,1500, 	NULL,NULL,													NULL},
+	{"IPLengthMax",								dalType_int, 				46,1500, 	NULL,NULL,													NULL},
+	{"IPLengthExclude",							dalType_boolean, 			0, 0, 		NULL,NULL,													NULL},
+	{"DSCPCheckEnable",							dalType_boolean, 			0, 0, 		NULL,NULL,													NULL},
+	{"DSCPCheck",								dalType_int, 				0, 63, 		NULL,NULL,													NULL},
+	{"DSCPExclude",								dalType_boolean, 			0, 0, 		NULL,NULL,													NULL},
+	{"EthernetPriorityEnable",					dalType_boolean, 			0, 0, 		NULL,NULL,													NULL},
+	{"EthernetPriorityCheck",					dalType_int, 				0, 7, 		NULL,NULL,													NULL},
+	{"EthernetPriorityExclude",					dalType_boolean, 			0, 0, 		NULL,NULL,													NULL},
+	{"VLANIDCheckEnable",						dalType_boolean, 			0, 0, 		NULL,NULL,													NULL},
+	{"VLANIDCheck",								dalType_int, 				1, 4094, 	NULL,NULL,													NULL},
+	{"VLANIDExclude",							dalType_boolean,			0, 0, 		NULL,NULL,													NULL},
+	{"TCPACK",									dalType_int, 				0, 0, 		NULL,NULL,													NULL},
+	{"TCPACKExclude",							dalType_boolean, 			0, 0, 		NULL,NULL,													NULL},
+	{"DSCPMark",								dalType_int, 				-1,63,		NULL,NULL,													dal_Add},
+#ifndef ZYXEL_WEB_GUI_ECONET_QoS_STYLE
+	{"VLANIDAction",							dalType_int, 				0, 3, 		NULL,NULL,													dal_Add},
+	{"VLANIDMark",								dalType_int, 				1, 4094, 	NULL,NULL,													NULL},
+#endif
+	{"EthernetPriorityMark",					dalType_int, 				-1,7, 		NULL,NULL,													NULL},
+	{"ForwardingPolicy",						dalType_RouteIntf, 			0, 0, 		NULL,NULL,													dal_Add},
+	{"defaultQ",								dalType_boolean, 			0, 0, 		NULL,NULL,													NULL},	
+	{NULL,										0,							0, 0,		NULL,NULL,													NULL}
+};
+
+
+typedef struct s_QosClass{
+	int Index;
+	int Queue; // the queue id which the class belong to
 	bool Enable;
-	char *X_ZYXEL_Name;
+	char *Name;
 	/* order */
 	int Order;
 	/* from interface */
 	char *Interface;
 	/* target interface */
-	char *X_ZYXEL_TargetInterface;
+	char *TargetInterface;
 	/* ether type*/
-	char *Ethertype;
+	int Ethertype;
 	/* source addr */
 	char *SourceIP;
 	char *SourceMask;
@@ -51,15 +134,16 @@
 	char *DestMACMask;
 	bool DestMACExclude;
 	/* service */
-	char *X_ZYXEL_Service;
-	bool X_ZYXEL_ServiceExclude;
+	char *Service;
+	bool ServiceExclude;
 	/* protocol */
 	int Protocol;
 	bool ProtocolExclude;
 	/* dhcp options */
+	char *Dhcp;
 	char *SourceVendorClassID;
 	bool SourceVendorClassIDExclude;
-	char *X_ZYXEL_SourceClientIDType;
+	char *SourceClientIDType;
 	char *SourceClientID;
 	bool SourceClientIDExclude;
 	char *SourceUserClassID;
@@ -86,221 +170,508 @@
 	/* DSCP mark */
 	int DSCPMark;
 	/* vlan mark */
-	int X_ZYXEL_VLANIDAction;
+	int VLANIDAction;
 	int EthernetPriorityMark;
-	int X_ZYXEL_VLANIDMark;
+	int VLANIDMark;
 	/* class route */
 	int ForwardingPolicy;
 	int TrafficClass;
 	bool defaultQ;
-}s_ClassObjInfo;
-
-typedef struct s_QosClass {
-	int classIdx;
-	int clsQueueIdx; // the queue id which the class belong to
-	s_ClassObjInfo *ClassObj_Info;
+	/* enable check*/
+	bool IPLengthEnable;
+	bool DSCPCheckEnable;
+	bool EthernetPriorityEnable;
+	bool VLANIDCheckEnable;
+	bool SourceIPEnable;
+	bool SourcePortEnable;
+	bool SourceMACEnable;
+	bool DestIPEnable;
+	bool DestPortEnable;
+	bool DestMACEnable;
+	bool ServiceEnable;
+	bool ProtocolEnable;
+	bool DhcpEnable;
 } s_QosClass;
 
 typedef struct s_QosClassDel {
-	int idx;
+	int Index;
 }s_QosClassDel;
 
-typedef struct s_QosClassIidMapping{
-	int size;
-	int iid[20];
-}s_QosClassIidMapping;
-
-time_t t1, t2;
-
-dal_param_t QosClass_param[] = {
-	{"classIdx",			dalType_int, 0, 0, NULL},
-	{"clsQueueIdx",			dalType_int, 0, 0, NULL},	
-	{NULL,		0,	0,	0,	NULL}
-};
-
-s_QosClassIidMapping IidMappingTable = {0};
 extern uint32_t StrToIntConv(char *str);
 
-void dump_QosClass_Info(s_QosClass *QosClass_Info){
-	printf("======================= dump_QosClass_Info ==============================\n");
-	printf("classIdx %d\n", QosClass_Info->classIdx);
-	printf("clsQueueIdx %d\n", QosClass_Info->clsQueueIdx);
-	printf("=========================================================================\n");
-	return;
+void getQosClassBasicInfo(struct json_object *Jobj, s_QosClass *ClassObj_Info) {
+	int tmp_idx = 0,Class_Order = 0;
+	char *sourcelen = NULL, *destlen = NULL, *tmp1 = NULL, *tmp2 = NULL, *op125 = NULL;
+	char *sourceaddr = NULL, *destaddr = NULL;
+	char *routeintf = NULL, *queue = NULL;
+	char *clientIDtype = NULL, *clientID = NULL, *ethertype = NULL;
+	char *clear = "";
+	int enterprise = 0, number = 0;
+	json_object *classObj = NULL;
+	objIndex_t classIid = {0};
+	if(json_object_object_get(Jobj, "idx")){
+		tmp_idx = json_object_get_int(json_object_object_get(Jobj, "idx"));
+		if(tmp_idx >= 0){
+			IID_INIT(classIid);
+			while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_QOS_CLS, &classIid, &classObj) == ZCFG_SUCCESS) {
+				Class_Order = json_object_get_int(json_object_object_get(classObj, "Order"));
+				if(tmp_idx == Class_Order)
+					ClassObj_Info->Index = classIid.idx[0];
+				zcfgFeJsonObjFree(classObj);
+			}
+		}
+		else{
+			ClassObj_Info->Index = tmp_idx;
+		}
+	}
+	else{
+		if(json_object_object_get(Jobj, "Index"))
+			ClassObj_Info->Index = json_object_get_int(json_object_object_get(Jobj, "Index"));
 }
 
-void getQosClassBasicInfo(struct json_object *Jobj, s_QosClass *QosClass_Info) {
-	json_object *ClassObj = NULL;
-	int tmp_idx = 0;
-
-#if(QOS_DAL_DEBUG == 1)			
-	printf("getQosClassBasicInfo\n");
+	if(json_object_object_get(Jobj, "defaultQ")){
+		ClassObj_Info->Queue = json_object_get_int(json_object_object_get(Jobj, "Queue"));
+		ClassObj_Info->defaultQ = json_object_get_boolean(json_object_object_get(Jobj, "defaultQ"));
+	}
+	else{
+		if(json_object_object_get(Jobj, "Queue")){
+			queue = json_object_get_string(json_object_object_get(Jobj, "Queue"));
+			if(!strcmp(queue,"0"))
+				ClassObj_Info->defaultQ = true;
+			else
+				ClassObj_Info->defaultQ = false;
+			sscanf(queue, "%d", &(ClassObj_Info->Queue));
+		}
+	}
+	if(json_object_object_get(Jobj, "Enable"))
+		ClassObj_Info->Enable = json_object_get_boolean(json_object_object_get(Jobj, "Enable"));
+	if(json_object_object_get(Jobj, "Name"))
+		ClassObj_Info->Name = (char*)json_object_get_string(json_object_object_get(Jobj, "Name"));
+	else
+		ClassObj_Info->Name = NULL;
+	if(json_object_object_get(Jobj, "Order"))
+		ClassObj_Info->Order = json_object_get_int(json_object_object_get(Jobj, "Order"));
+	if(json_object_object_get(Jobj, "Interface"))
+		ClassObj_Info->Interface = (char*)json_object_get_string(json_object_object_get(Jobj, "Interface"));
+#ifdef ZYXEL_WEB_GUI_SHOW_QOS_CLS_TARGET_INTF
+	if(json_object_object_get(Jobj, "TargetInterface"))
+		ClassObj_Info->TargetInterface = (char*)json_object_get_string(json_object_object_get(Jobj, "TargetInterface"));
 #endif
-	tmp_idx = json_object_get_int(json_object_object_get(Jobj, "classIdx"));
-	if(tmp_idx >= 0) {
-		QosClass_Info->classIdx = IidMappingTable.iid[tmp_idx];
+	if(json_object_object_get(Jobj, "Ethertype")){
+		ethertype = json_object_get_string(json_object_object_get(Jobj, "Ethertype"));
+		if(!strcmp(ethertype,"NA"))			
+			ClassObj_Info->Ethertype = -1;
+		else if(!strcmp(ethertype,"IP"))					
+			ClassObj_Info->Ethertype = 2048;			
+		else if(!strcmp(ethertype,"ARP"))			
+			ClassObj_Info->Ethertype = 2054;			
+		else if(!strcmp(ethertype,"PPPoE_DISC"))		
+			ClassObj_Info->Ethertype = 34915;		
+		else if(!strcmp(ethertype,"PPPoE_SES"))					
+			ClassObj_Info->Ethertype = 34916;				
+		else if(!strcmp(ethertype,"802.1Q"))					
+			ClassObj_Info->Ethertype = 33024;			
+		else if(!strcmp(ethertype,"IPv6"))				
+			ClassObj_Info->Ethertype = 34525;
+		else{
+			number = atoi(ethertype);
+			ClassObj_Info->Ethertype = number;
+		}
 	}
-	else {
-		QosClass_Info->classIdx = tmp_idx;
-		/*for Add class*/
+	if(json_object_object_get(Jobj, "SourceIPEnable")){
+		ClassObj_Info->SourceIPEnable = json_object_get_boolean(json_object_object_get(Jobj, "SourceIPExclude"));
+		if(ClassObj_Info->SourceIPEnable == true){
+			if(json_object_object_get(Jobj, "SourceIPPrefix")){
+				tmp1 = (char*)json_object_get_string(json_object_object_get(Jobj, "SourceIPPrefix"));
+				sourceaddr = strdup(tmp1);
+				ClassObj_Info->SourceIP = strtok_r(sourceaddr, "/", &(ClassObj_Info->SourceMask));
+			}
+			else {
+				ClassObj_Info->SourceIP = (char*)json_object_get_string(json_object_object_get(Jobj, "SourceIP"));
+				ClassObj_Info->SourceMask = (char*)json_object_get_string(json_object_object_get(Jobj, "SourceMask"));
+			}
+			ClassObj_Info->SourceIPExclude = json_object_get_boolean(json_object_object_get(Jobj, "SourceIPExclude"));
+		}
+		else{
+			ClassObj_Info->SourceIP = clear;
+			ClassObj_Info->SourceMask = clear;
+			ClassObj_Info->SourceIPExclude = false;
+		}
+	}
+	if(json_object_object_get(Jobj, "SourcePortEnable")){
+		ClassObj_Info->SourcePortEnable = json_object_get_boolean(json_object_object_get(Jobj, "SourcePortEnable"));
+		if(ClassObj_Info->SourcePortEnable == true){	
+			ClassObj_Info->SourcePort = json_object_get_int(json_object_object_get(Jobj, "SourcePort"));
+			ClassObj_Info->SourcePortRangeMax = json_object_get_int(json_object_object_get(Jobj, "SourcePortRangeMax"));
+			ClassObj_Info->SourcePortExclude = json_object_get_boolean(json_object_object_get(Jobj, "SourcePortExclude"));
+		}
+		else{
+			ClassObj_Info->SourcePort = -1;
+			ClassObj_Info->SourcePortRangeMax = -1;
+			ClassObj_Info->SourcePortExclude = false;
+		}
+	}
+	if(json_object_object_get(Jobj, "SourceMACEnable")){
+		ClassObj_Info->SourceMACEnable = json_object_get_boolean(json_object_object_get(Jobj, "SourceMACEnable"));
+		if(ClassObj_Info->SourceMACEnable == true){	
+			ClassObj_Info->SourceMACAddress = (char*)json_object_get_string(json_object_object_get(Jobj, "SourceMACAddress"));
+			ClassObj_Info->SourceMACMask = (char*)json_object_get_string(json_object_object_get(Jobj, "SourceMACMask"));
+			ClassObj_Info->SourceMACExclude = json_object_get_boolean(json_object_object_get(Jobj, "SourceMACExclude"));
+		}
+		else{
+			ClassObj_Info->SourceMACAddress = clear;
+			ClassObj_Info->SourceMACMask = clear;
+			ClassObj_Info->SourceMACExclude = false;
+		}
+	}
+	if(json_object_object_get(Jobj, "DestIPEnable")){
+		ClassObj_Info->DestIPEnable = json_object_get_boolean(json_object_object_get(Jobj, "DestIPEnable"));
+		if(ClassObj_Info->DestIPEnable == true){
+			if(json_object_object_get(Jobj, "DestIPPrefix")){
+				tmp2 = (char*)json_object_get_string(json_object_object_get(Jobj, "DestIPPrefix"));
+				destaddr = strdup(tmp2);
+				ClassObj_Info->DestIP = strtok_r(destaddr, "/", &(ClassObj_Info->DestMask));
+			}
+			else{
+				ClassObj_Info->DestIP = (char*)json_object_get_string(json_object_object_get(Jobj, "DestIP"));
+				ClassObj_Info->DestMask = (char*)json_object_get_string(json_object_object_get(Jobj, "DestMask"));
+			}
+			ClassObj_Info->DestIPExclude = json_object_get_boolean(json_object_object_get(Jobj, "DestIPExclude"));
+		}
+		else{
+			ClassObj_Info->DestIP = clear;
+			ClassObj_Info->DestMask = clear;
+			ClassObj_Info->DestIPExclude = false;
+		}
+	}
+	if(json_object_object_get(Jobj, "DestPortEnable")){
+		ClassObj_Info->DestPortEnable = json_object_get_boolean(json_object_object_get(Jobj, "DestPortEnable"));
+		if(ClassObj_Info->DestPortEnable == true){	
+			ClassObj_Info->DestPort = json_object_get_int(json_object_object_get(Jobj, "DestPort"));
+			ClassObj_Info->DestPortRangeMax = json_object_get_int(json_object_object_get(Jobj, "DestPortRangeMax"));
+			ClassObj_Info->DestPortExclude = json_object_get_boolean(json_object_object_get(Jobj, "DestPortExclude"));
+		}
+		else{
+			ClassObj_Info->DestPort = -1;
+			ClassObj_Info->DestPortRangeMax = -1;
+			ClassObj_Info->DestPortExclude = false;
+		}
+	}
+	if(json_object_object_get(Jobj, "DestMACEnable")){
+		ClassObj_Info->DestMACEnable = json_object_get_boolean(json_object_object_get(Jobj,"DestMACEnable"));
+		if(ClassObj_Info->DestMACEnable == true){	
+			ClassObj_Info->DestMACAddress = (char*)json_object_get_string(json_object_object_get(Jobj, "DestMACAddress"));
+			ClassObj_Info->DestMACMask = (char*)json_object_get_string(json_object_object_get(Jobj, "DestMACMask"));
+			ClassObj_Info->DestMACExclude = json_object_get_boolean(json_object_object_get(Jobj, "DestMACExclude"));
+		}
+		else{
+			ClassObj_Info->DestMACAddress = clear;
+			ClassObj_Info->DestMACMask = clear;
+			ClassObj_Info->DestMACExclude = false;
+		}
+	}
+	if(json_object_object_get(Jobj, "ServiceEnable")){
+		ClassObj_Info->ServiceEnable = json_object_get_boolean(json_object_object_get(Jobj, "ServiceEnable"));
+		if(ClassObj_Info->ServiceEnable == true){
+			ClassObj_Info->Service = (char*)json_object_get_string(json_object_object_get(Jobj, "Service"));
+			ClassObj_Info->ServiceExclude = json_object_get_boolean(json_object_object_get(Jobj, "ServiceExclude"));
+		}
+		else{
+			ClassObj_Info->Service = clear;
+			ClassObj_Info->ServiceExclude = false;
+		}
+	}
+	if(json_object_object_get(Jobj, "ProtocolEnable")){
+		ClassObj_Info->ProtocolEnable = json_object_get_boolean(json_object_object_get(Jobj, "ProtocolEnable"));
+		if(ClassObj_Info->ProtocolEnable == true){
+			ClassObj_Info->Protocol = json_object_get_int(json_object_object_get(Jobj, "Protocol"));
+			ClassObj_Info->ProtocolExclude = json_object_get_boolean(json_object_object_get(Jobj, "ProtocolExclude"));
+		}
+		else{
+			ClassObj_Info->Protocol = -1;
+			ClassObj_Info->ProtocolExclude = false;
+		}
+	}
+	if(json_object_object_get(Jobj, "DhcpEnable")){
+		ClassObj_Info->DhcpEnable = json_object_get_boolean(json_object_object_get(Jobj, "DhcpEnable"));
+		if(ClassObj_Info->DhcpEnable == true){
+			ClassObj_Info->Dhcp = (char*)json_object_get_string(json_object_object_get(Jobj, "Dhcp"));
+			if(!strcmp(ClassObj_Info->Dhcp,"op60")){
+				ClassObj_Info->SourceVendorClassID = (char*)json_object_get_string(json_object_object_get(Jobj, "SourceVendorClassID"));
+				ClassObj_Info->SourceVendorClassIDExclude = json_object_get_boolean(json_object_object_get(Jobj, "SourceVendorClassIDExclude"));
+				ClassObj_Info->SourceClientIDType = clear;		
+				ClassObj_Info->SourceClientID = clear;		
+				ClassObj_Info->SourceClientIDExclude = false;		
+				ClassObj_Info->SourceUserClassID = clear;		
+				ClassObj_Info->SourceUserClassIDExclude = false;		
+				ClassObj_Info->SourceVendorSpecificInfoEnterprise = 0;		
+				ClassObj_Info->SourceVendorSpecificInfo = clear;		
+				ClassObj_Info->SourceVendorSpecificInfoExclude = false;
+			}
+			if(!strcmp(ClassObj_Info->Dhcp,"op61")){
+				ClassObj_Info->SourceClientIDType = (char*)json_object_get_string(json_object_object_get(Jobj, "SourceClientIDType"));
+				ClassObj_Info->SourceClientID = (char*)json_object_get_string(json_object_object_get(Jobj, "SourceClientID"));
+				ClassObj_Info->SourceClientIDExclude = json_object_get_boolean(json_object_object_get(Jobj, "SourceClientIDExclude"));
+				ClassObj_Info->SourceVendorClassID = clear;		
+				ClassObj_Info->SourceVendorClassIDExclude = false;	
+				ClassObj_Info->SourceUserClassID = clear;		
+				ClassObj_Info->SourceUserClassIDExclude = false;		
+				ClassObj_Info->SourceVendorSpecificInfoEnterprise = 0;		
+				ClassObj_Info->SourceVendorSpecificInfo = clear;		
+				ClassObj_Info->SourceVendorSpecificInfoExclude = false;
+			}
+			if(!strcmp(ClassObj_Info->Dhcp,"op77")){
+				ClassObj_Info->SourceUserClassID = (char*)json_object_get_string(json_object_object_get(Jobj, "SourceUserClassID"));
+				ClassObj_Info->SourceUserClassIDExclude = json_object_get_boolean(json_object_object_get(Jobj, "SourceUserClassIDExclude"));
+				ClassObj_Info->SourceVendorClassID = clear;		
+				ClassObj_Info->SourceVendorClassIDExclude = false;		
+				ClassObj_Info->SourceClientIDType = clear;		
+				ClassObj_Info->SourceClientID = clear;		
+				ClassObj_Info->SourceClientIDExclude = false;		
+				ClassObj_Info->SourceVendorSpecificInfoEnterprise = 0;		
+				ClassObj_Info->SourceVendorSpecificInfo = clear;		
+				ClassObj_Info->SourceVendorSpecificInfoExclude = false;
+			}
+			if(!strcmp(ClassObj_Info->Dhcp,"op125")){
+				op125 = json_object_get_string(json_object_object_get(Jobj, "SourceVendorSpecificInfoEnterprise"));
+				sscanf(op125, "%x", &enterprise);
+				ClassObj_Info->SourceVendorSpecificInfoEnterprise = enterprise;
+				ClassObj_Info->SourceVendorSpecificInfo = (char*)json_object_get_string(json_object_object_get(Jobj, "SourceVendorSpecificInfo"));
+				ClassObj_Info->SourceVendorSpecificInfoExclude = json_object_get_boolean(json_object_object_get(Jobj, "SourceVendorSpecificInfoExclude"));
+				ClassObj_Info->SourceVendorClassID = clear;		
+				ClassObj_Info->SourceVendorClassIDExclude = false;		
+				ClassObj_Info->SourceClientIDType = clear;		
+				ClassObj_Info->SourceClientID = clear;		
+				ClassObj_Info->SourceClientIDExclude = false;
+				ClassObj_Info->SourceUserClassID = clear;		
+				ClassObj_Info->SourceUserClassIDExclude = false;
+			}
+		}
+		else{
+			ClassObj_Info->SourceVendorClassID = clear;		
+			ClassObj_Info->SourceVendorClassIDExclude = false;		
+			ClassObj_Info->SourceClientIDType = clear;		
+			ClassObj_Info->SourceClientID = clear;		
+			ClassObj_Info->SourceClientIDExclude = false;		
+			ClassObj_Info->SourceUserClassID = clear;		
+			ClassObj_Info->SourceUserClassIDExclude = false;		
+			ClassObj_Info->SourceVendorSpecificInfoEnterprise = 0;		
+			ClassObj_Info->SourceVendorSpecificInfo = clear;		
+			ClassObj_Info->SourceVendorSpecificInfoExclude = false;
+		}
+	}
+	if(json_object_object_get(Jobj, "IPLengthEnable")){
+		ClassObj_Info->IPLengthEnable = json_object_get_boolean(json_object_object_get(Jobj, "IPLengthEnable"));
+		if(ClassObj_Info->IPLengthEnable == true){
+			ClassObj_Info->IPLengthMin = json_object_get_int(json_object_object_get(Jobj, "IPLengthMin"));
+			ClassObj_Info->IPLengthMax = json_object_get_int(json_object_object_get(Jobj, "IPLengthMax"));
+			ClassObj_Info->IPLengthExclude = json_object_get_boolean(json_object_object_get(Jobj, "IPLengthExclude"));
+		}
+		else{
+			ClassObj_Info->IPLengthMin = 0;
+			ClassObj_Info->IPLengthMax = 0;
+			ClassObj_Info->IPLengthExclude = false;
+		}
+	}
+	if(json_object_object_get(Jobj, "DSCPCheckEnable")){
+		ClassObj_Info->DSCPCheckEnable = json_object_get_boolean(json_object_object_get(Jobj, "DSCPCheckEnable"));
+		if(ClassObj_Info->DSCPCheckEnable == true){
+			ClassObj_Info->DSCPCheck = json_object_get_int(json_object_object_get(Jobj, "DSCPCheck"));
+			ClassObj_Info->DSCPExclude = json_object_get_boolean(json_object_object_get(Jobj, "DSCPExclude"));
+		}
+		else{
+			ClassObj_Info->DSCPCheck = -1;
+			ClassObj_Info->DSCPExclude = false;
+		}
+	}
+	if(json_object_object_get(Jobj, "EthernetPriorityEnable")){
+		ClassObj_Info->EthernetPriorityEnable = json_object_get_boolean(json_object_object_get(Jobj, "EthernetPriorityEnable"));
+		if(ClassObj_Info->EthernetPriorityEnable == true){
+			ClassObj_Info->EthernetPriorityCheck = json_object_get_int(json_object_object_get(Jobj, "EthernetPriorityCheck"));
+			ClassObj_Info->EthernetPriorityExclude = json_object_get_boolean(json_object_object_get(Jobj, "EthernetPriorityExclude"));
+		}
+		else{
+			ClassObj_Info->EthernetPriorityCheck = -1;
+			ClassObj_Info->EthernetPriorityExclude = false;
+		}		
+	}		
+	if(json_object_object_get(Jobj, "VLANIDCheckEnable")){
+		ClassObj_Info->VLANIDCheckEnable = json_object_get_boolean(json_object_object_get(Jobj, "VLANIDCheckEnable"));
+		if(ClassObj_Info->VLANIDCheckEnable == true){
+			ClassObj_Info->VLANIDCheck = json_object_get_int(json_object_object_get(Jobj, "VLANIDCheck"));
+			ClassObj_Info->VLANIDExclude = json_object_get_boolean(json_object_object_get(Jobj, "VLANIDExclude"));
+		}
+		else{
+			ClassObj_Info->VLANIDCheck = -1;
+			ClassObj_Info->VLANIDExclude = false;
+		}
+	}
+	if(json_object_object_get(Jobj, "TCPACK"))
+		ClassObj_Info->TCPACK = json_object_get_boolean(json_object_object_get(Jobj, "TCPACK"));
+	if(json_object_object_get(Jobj, "TCPACKExclude"))
+		ClassObj_Info->TCPACKExclude = json_object_get_boolean(json_object_object_get(Jobj, "TCPACKExclude"));
+	if(json_object_object_get(Jobj, "DSCPMark"))
+		ClassObj_Info->DSCPMark = json_object_get_int(json_object_object_get(Jobj, "DSCPMark"));
+#ifdef ZYXEL_WEB_GUI_ECONET_QoS_STYLE
+	if(json_object_object_get(Jobj, "EthernetPriorityMark"))
+		ClassObj_Info->EthernetPriorityMark = json_object_get_int(json_object_object_get(Jobj, "EthernetPriorityMark"));
+#else
+	if(json_object_object_get(Jobj, "VLANIDAction")){
+		ClassObj_Info->VLANIDAction = json_object_get_int(json_object_object_get(Jobj, "VLANIDAction"));
+		if(ClassObj_Info->VLANIDAction == 0 || ClassObj_Info->VLANIDAction == 3){
+			ClassObj_Info->EthernetPriorityMark = 0;
+			ClassObj_Info->VLANIDMark = 0;
+		}
+		else{
+			ClassObj_Info->EthernetPriorityMark = json_object_get_int(json_object_object_get(Jobj, "EthernetPriorityMark"));
+			ClassObj_Info->VLANIDMark = json_object_get_int(json_object_object_get(Jobj, "VLANIDMark"));
+		}
 	}
-	QosClass_Info->clsQueueIdx = json_object_get_int(json_object_object_get(Jobj, "clsQueueIdx"));
-	
-	
-	ClassObj = json_object_object_get(Jobj, "classObj");
-	QosClass_Info->ClassObj_Info = (s_ClassObjInfo*)malloc(sizeof(s_ClassObjInfo));
-	memset(QosClass_Info->ClassObj_Info, 0, sizeof(s_ClassObjInfo));
-
-	QosClass_Info->ClassObj_Info->Enable = json_object_get_boolean(json_object_object_get(ClassObj, "Enable"));
-	QosClass_Info->ClassObj_Info->X_ZYXEL_Name = (char*)json_object_get_string(json_object_object_get(ClassObj, "X_ZYXEL_Name"));
-	QosClass_Info->ClassObj_Info->Order = json_object_get_int(json_object_object_get(ClassObj, "Order"));
-	QosClass_Info->ClassObj_Info->Interface = (char*)json_object_get_string(json_object_object_get(ClassObj, "Interface"));
-	QosClass_Info->ClassObj_Info->X_ZYXEL_TargetInterface = (char*)json_object_get_string(json_object_object_get(ClassObj, "X_ZYXEL_TargetInterface"));
-	QosClass_Info->ClassObj_Info->Ethertype = (char*)json_object_get_string(json_object_object_get(ClassObj, "Ethertype"));
-	QosClass_Info->ClassObj_Info->SourceIP = (char*)json_object_get_string(json_object_object_get(ClassObj, "SourceIP"));
-	QosClass_Info->ClassObj_Info->SourceMask = (char*)json_object_get_string(json_object_object_get(ClassObj, "SourceMask"));
-	QosClass_Info->ClassObj_Info->SourceIPExclude = json_object_get_boolean(json_object_object_get(ClassObj, "SourceIPExclude"));
-	QosClass_Info->ClassObj_Info->SourcePort = json_object_get_int(json_object_object_get(ClassObj, "SourcePort"));
-	QosClass_Info->ClassObj_Info->SourcePortRangeMax = json_object_get_int(json_object_object_get(ClassObj, "SourcePortRangeMax"));
-	QosClass_Info->ClassObj_Info->SourcePortExclude = json_object_get_boolean(json_object_object_get(ClassObj, "SourcePortExclude"));
-	QosClass_Info->ClassObj_Info->SourceMACAddress = (char*)json_object_get_string(json_object_object_get(ClassObj, "SourceMACAddress"));
-	QosClass_Info->ClassObj_Info->SourceMACMask = (char*)json_object_get_string(json_object_object_get(ClassObj, "SourceMACMask"));
-	QosClass_Info->ClassObj_Info->SourceMACExclude = json_object_get_boolean(json_object_object_get(ClassObj, "SourceMACExclude"));
-	QosClass_Info->ClassObj_Info->DestIP = (char*)json_object_get_string(json_object_object_get(ClassObj, "DestIP"));
-	QosClass_Info->ClassObj_Info->DestMask = (char*)json_object_get_string(json_object_object_get(ClassObj, "DestMask"));
-	QosClass_Info->ClassObj_Info->DestIPExclude = json_object_get_boolean(json_object_object_get(ClassObj, "DestIPExclude"));
-	QosClass_Info->ClassObj_Info->DestPort = json_object_get_int(json_object_object_get(ClassObj, "DestPort"));
-	QosClass_Info->ClassObj_Info->DestPortRangeMax = json_object_get_int(json_object_object_get(ClassObj, "DestPortRangeMax"));
-	QosClass_Info->ClassObj_Info->DestPortExclude = json_object_get_boolean(json_object_object_get(ClassObj, "DestPortExclude"));
-	QosClass_Info->ClassObj_Info->DestMACAddress = (char*)json_object_get_string(json_object_object_get(ClassObj, "DestMACAddress"));
-	QosClass_Info->ClassObj_Info->DestMACMask = (char*)json_object_get_string(json_object_object_get(ClassObj, "DestMACMask"));
-	QosClass_Info->ClassObj_Info->DestMACExclude = json_object_get_boolean(json_object_object_get(ClassObj, "DestMACExclude"));
-	QosClass_Info->ClassObj_Info->X_ZYXEL_Service = (char*)json_object_get_string(json_object_object_get(ClassObj, "X_ZYXEL_Service"));
-	QosClass_Info->ClassObj_Info->X_ZYXEL_ServiceExclude = json_object_get_boolean(json_object_object_get(ClassObj, "X_ZYXEL_ServiceExclude"));
-	QosClass_Info->ClassObj_Info->Protocol = json_object_get_int(json_object_object_get(ClassObj, "Protocol"));
-	QosClass_Info->ClassObj_Info->ProtocolExclude = json_object_get_boolean(json_object_object_get(ClassObj, "ProtocolExclude"));
-	QosClass_Info->ClassObj_Info->SourceVendorClassID = (char*)json_object_get_string(json_object_object_get(ClassObj, "SourceVendorClassID"));
-	QosClass_Info->ClassObj_Info->SourceVendorClassIDExclude = json_object_get_boolean(json_object_object_get(ClassObj, "SourceVendorClassIDExclude"));
-	QosClass_Info->ClassObj_Info->X_ZYXEL_SourceClientIDType = (char*)json_object_get_string(json_object_object_get(ClassObj, "X_ZYXEL_SourceClientIDType"));
-	QosClass_Info->ClassObj_Info->SourceClientID = (char*)json_object_get_string(json_object_object_get(ClassObj, "SourceClientID"));
-	QosClass_Info->ClassObj_Info->SourceClientIDExclude = json_object_get_boolean(json_object_object_get(ClassObj, "SourceClientIDExclude"));
-	QosClass_Info->ClassObj_Info->SourceUserClassID = (char*)json_object_get_string(json_object_object_get(ClassObj, "SourceUserClassID"));
-	QosClass_Info->ClassObj_Info->SourceUserClassIDExclude = json_object_get_boolean(json_object_object_get(ClassObj, "SourceUserClassIDExclude"));
-	QosClass_Info->ClassObj_Info->SourceVendorSpecificInfoEnterprise = json_object_get_int(json_object_object_get(ClassObj, "SourceVendorSpecificInfoEnterprise"));
-	QosClass_Info->ClassObj_Info->SourceVendorSpecificInfo = (char*)json_object_get_string(json_object_object_get(ClassObj, "SourceVendorSpecificInfo"));
-	QosClass_Info->ClassObj_Info->SourceVendorSpecificInfoExclude = json_object_get_boolean(json_object_object_get(ClassObj, "SourceVendorSpecificInfoExclude"));
-	QosClass_Info->ClassObj_Info->IPLengthMin = json_object_get_int(json_object_object_get(ClassObj, "IPLengthMin"));
-	QosClass_Info->ClassObj_Info->IPLengthMax = json_object_get_int(json_object_object_get(ClassObj, "IPLengthMax"));
-	QosClass_Info->ClassObj_Info->IPLengthExclude = json_object_get_boolean(json_object_object_get(ClassObj, "IPLengthExclude"));
-	QosClass_Info->ClassObj_Info->DSCPCheck = json_object_get_int(json_object_object_get(ClassObj, "DSCPCheck"));
-	QosClass_Info->ClassObj_Info->DSCPExclude = json_object_get_boolean(json_object_object_get(ClassObj, "DSCPExclude"));
-	QosClass_Info->ClassObj_Info->EthernetPriorityCheck = json_object_get_int(json_object_object_get(ClassObj, "EthernetPriorityCheck"));
-	QosClass_Info->ClassObj_Info->EthernetPriorityExclude = json_object_get_boolean(json_object_object_get(ClassObj, "EthernetPriorityExclude"));
-	QosClass_Info->ClassObj_Info->VLANIDCheck = json_object_get_int(json_object_object_get(ClassObj, "VLANIDCheck"));
-	QosClass_Info->ClassObj_Info->VLANIDExclude = json_object_get_boolean(json_object_object_get(ClassObj, "VLANIDExclude"));
-	QosClass_Info->ClassObj_Info->TCPACK = json_object_get_boolean(json_object_object_get(ClassObj, "TCPACK"));
-	QosClass_Info->ClassObj_Info->TCPACKExclude = json_object_get_boolean(json_object_object_get(ClassObj, "TCPACKExclude"));
-	QosClass_Info->ClassObj_Info->DSCPMark = json_object_get_int(json_object_object_get(ClassObj, "DSCPMark"));
-	QosClass_Info->ClassObj_Info->X_ZYXEL_VLANIDAction = json_object_get_int(json_object_object_get(ClassObj, "X_ZYXEL_VLANIDAction"));
-	QosClass_Info->ClassObj_Info->EthernetPriorityMark = json_object_get_int(json_object_object_get(ClassObj, "EthernetPriorityMark"));
-	QosClass_Info->ClassObj_Info->X_ZYXEL_VLANIDMark = json_object_get_int(json_object_object_get(ClassObj, "X_ZYXEL_VLANIDMark"));
-	QosClass_Info->ClassObj_Info->ForwardingPolicy = json_object_get_int(json_object_object_get(ClassObj, "ForwardingPolicy"));
-	QosClass_Info->ClassObj_Info->defaultQ = json_object_get_boolean(json_object_object_get(ClassObj, "defaultQ"));
-	
-#if(QOS_DAL_DEBUG == 1)			
-	dump_QosClass_Info(QosClass_Info);
 #endif	
-	return;
-}
-
-void freeQosClassBasicInfo(s_QosClass *QosClass_Info) {
-	free(QosClass_Info->ClassObj_Info);
+	if(json_object_object_get(Jobj, "ForwardingPolicy")){
+		routeintf = json_object_get_string(json_object_object_get(Jobj, "ForwardingPolicy"));
+		sscanf(routeintf, "%d", &(ClassObj_Info->ForwardingPolicy));
+	}
 	return;
 }
 
 void getQosClassDelKey(struct json_object *Jobj, s_QosClassDel *QosClassDel_Info) {
 	int tmp_idx = 0;
-#if(QOS_DAL_DEBUG == 1)			
-	printf("getQosClassDelKey\n");
-#endif	
-	tmp_idx = json_object_get_int(json_object_object_get(Jobj, "idx"));
-	QosClassDel_Info->idx = IidMappingTable.iid[tmp_idx];
-#if(QOS_DAL_DEBUG == 1)			
-	printf("QosClassDel_Info->idx %d\n", QosClassDel_Info->idx);
-#endif
+	json_object *classObj = NULL;
+	objIndex_t classIid = {0};
+	int Class_Order = 0;
+
+	if(json_object_object_get(Jobj, "idx")){
+		tmp_idx = json_object_get_int(json_object_object_get(Jobj, "idx"));
+		IID_INIT(classIid);
+		while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_QOS_CLS, &classIid, &classObj) == ZCFG_SUCCESS) {
+			Class_Order = json_object_get_int(json_object_object_get(classObj, "Order"));
+			if(tmp_idx == Class_Order)
+				QosClassDel_Info->Index = classIid.idx[0];
+			zcfgFeJsonObjFree(classObj);
+		}
+	}
+	else{
+		if(json_object_object_get(Jobj, "Index"))
+			QosClassDel_Info->Index = json_object_get_int(json_object_object_get(Jobj, "Index"));
+	}
+
 	return;
 }
 
-void prepare_qos_classObj(json_object *classObj, s_ClassObjInfo *ClassObj_Info) {
-	json_object_object_add(classObj, "Enable", json_object_new_boolean(ClassObj_Info->Enable));
-	json_object_object_add(classObj, "X_ZYXEL_Name", json_object_new_string(ClassObj_Info->X_ZYXEL_Name));
-	json_object_object_add(classObj, "Order", json_object_new_int(ClassObj_Info->Order));
-	json_object_object_add(classObj, "Interface", json_object_new_string(ClassObj_Info->Interface));
-	json_object_object_add(classObj, "X_ZYXEL_TargetInterface", json_object_new_string(ClassObj_Info->X_ZYXEL_TargetInterface));
-	json_object_object_add(classObj, "Ethertype", json_object_new_string(ClassObj_Info->Ethertype));
-	json_object_object_add(classObj, "SourceIP", json_object_new_string(ClassObj_Info->SourceIP));
-	json_object_object_add(classObj, "SourceMask", json_object_new_string(ClassObj_Info->SourceMask));
-	json_object_object_add(classObj, "SourceIPExclude", json_object_new_boolean(ClassObj_Info->SourceIPExclude));
-	json_object_object_add(classObj, "SourcePort", json_object_new_int(ClassObj_Info->SourcePort));
-	json_object_object_add(classObj, "SourcePortRangeMax", json_object_new_int(ClassObj_Info->SourcePortRangeMax));
-	json_object_object_add(classObj, "SourcePortExclude", json_object_new_boolean(ClassObj_Info->SourcePortExclude));
-	json_object_object_add(classObj, "SourceMACAddress", json_object_new_string(ClassObj_Info->SourceMACAddress));
-	json_object_object_add(classObj, "SourceMACMask", json_object_new_string(ClassObj_Info->SourceMACMask));
-	json_object_object_add(classObj, "SourceMACExclude", json_object_new_boolean(ClassObj_Info->SourceMACExclude));
-	json_object_object_add(classObj, "DestIP", json_object_new_string(ClassObj_Info->DestIP));
-	json_object_object_add(classObj, "DestMask", json_object_new_string(ClassObj_Info->DestMask));
-	json_object_object_add(classObj, "DestIPExclude", json_object_new_boolean(ClassObj_Info->DestIPExclude));
-	json_object_object_add(classObj, "DestPort", json_object_new_int(ClassObj_Info->DestPort));
-	json_object_object_add(classObj, "DestPortRangeMax", json_object_new_int(ClassObj_Info->DestPortRangeMax));
-	json_object_object_add(classObj, "DestPortExclude", json_object_new_boolean(ClassObj_Info->DestPortExclude));
-	json_object_object_add(classObj, "DestMACAddress", json_object_new_string(ClassObj_Info->DestMACAddress));
-	json_object_object_add(classObj, "DestMACMask", json_object_new_string(ClassObj_Info->DestMACMask));
-	json_object_object_add(classObj, "DestMACExclude", json_object_new_boolean(ClassObj_Info->DestMACExclude));
-	json_object_object_add(classObj, "X_ZYXEL_Service", json_object_new_string(ClassObj_Info->X_ZYXEL_Service));
-	json_object_object_add(classObj, "X_ZYXEL_ServiceExclude", json_object_new_boolean(ClassObj_Info->X_ZYXEL_ServiceExclude));
-	json_object_object_add(classObj, "Protocol", json_object_new_int(ClassObj_Info->Protocol));
-	json_object_object_add(classObj, "ProtocolExclude", json_object_new_boolean(ClassObj_Info->ProtocolExclude));
-	json_object_object_add(classObj, "SourceVendorClassID", json_object_new_string(ClassObj_Info->SourceVendorClassID));
-	json_object_object_add(classObj, "SourceVendorClassIDExclude", json_object_new_boolean(ClassObj_Info->SourceVendorClassIDExclude));
-	json_object_object_add(classObj, "X_ZYXEL_SourceClientIDType", json_object_new_string(ClassObj_Info->X_ZYXEL_SourceClientIDType));
-	json_object_object_add(classObj, "SourceClientID", json_object_new_string(ClassObj_Info->SourceClientID));
-	json_object_object_add(classObj, "SourceClientIDExclude", json_object_new_boolean(ClassObj_Info->SourceClientIDExclude));
-	json_object_object_add(classObj, "SourceUserClassID", json_object_new_string(ClassObj_Info->SourceUserClassID));
-	json_object_object_add(classObj, "SourceUserClassIDExclude", json_object_new_boolean(ClassObj_Info->SourceUserClassIDExclude));
-	json_object_object_add(classObj, "SourceVendorSpecificInfoEnterprise", json_object_new_int(ClassObj_Info->SourceVendorSpecificInfoEnterprise));
-	json_object_object_add(classObj, "SourceVendorSpecificInfo", json_object_new_string(ClassObj_Info->SourceVendorSpecificInfo));
-	json_object_object_add(classObj, "SourceVendorSpecificInfoExclude", json_object_new_boolean(ClassObj_Info->SourceVendorSpecificInfoExclude));
-	json_object_object_add(classObj, "IPLengthMin", json_object_new_int(ClassObj_Info->IPLengthMin));
-	json_object_object_add(classObj, "IPLengthMax", json_object_new_int(ClassObj_Info->IPLengthMax));
-	json_object_object_add(classObj, "IPLengthExclude", json_object_new_boolean(ClassObj_Info->IPLengthExclude));
-	json_object_object_add(classObj, "DSCPCheck", json_object_new_int(ClassObj_Info->DSCPCheck));
-	json_object_object_add(classObj, "DSCPExclude", json_object_new_boolean(ClassObj_Info->DSCPExclude));
-	json_object_object_add(classObj, "EthernetPriorityCheck", json_object_new_int(ClassObj_Info->EthernetPriorityCheck));
-	json_object_object_add(classObj, "EthernetPriorityExclude", json_object_new_boolean(ClassObj_Info->EthernetPriorityExclude));
-	json_object_object_add(classObj, "VLANIDCheck", json_object_new_int(ClassObj_Info->VLANIDCheck));
-	json_object_object_add(classObj, "VLANIDExclude", json_object_new_boolean(ClassObj_Info->VLANIDExclude));
-	json_object_object_add(classObj, "TCPACK", json_object_new_boolean(ClassObj_Info->TCPACK));
-	json_object_object_add(classObj, "TCPACKExclude", json_object_new_boolean(ClassObj_Info->TCPACKExclude));
-	json_object_object_add(classObj, "DSCPMark", json_object_new_int(ClassObj_Info->DSCPMark));
-	json_object_object_add(classObj, "X_ZYXEL_VLANIDAction", json_object_new_int(ClassObj_Info->X_ZYXEL_VLANIDAction));
-	json_object_object_add(classObj, "EthernetPriorityMark", json_object_new_int(ClassObj_Info->EthernetPriorityMark));
-	json_object_object_add(classObj, "X_ZYXEL_VLANIDMark", json_object_new_int(ClassObj_Info->X_ZYXEL_VLANIDMark));
+void prepare_qos_classObj(struct json_object *Jobj, json_object *classObj, s_QosClass *ClassObj_Info) {
+	if(json_object_object_get(Jobj, "Enable"))
+		json_object_object_add(classObj, "Enable", json_object_new_boolean(ClassObj_Info->Enable));
+	if(json_object_object_get(Jobj, "Name"))
+		json_object_object_add(classObj, "X_ZYXEL_Name", json_object_new_string(ClassObj_Info->Name));
+	if(json_object_object_get(Jobj, "Order"))
+		json_object_object_add(classObj, "Order", json_object_new_int(ClassObj_Info->Order));
+	if(json_object_object_get(Jobj, "Interface"))
+		json_object_object_add(classObj, "Interface", json_object_new_string(ClassObj_Info->Interface));
+#ifdef ZYXEL_WEB_GUI_SHOW_QOS_CLS_TARGET_INTF
+	if(json_object_object_get(Jobj, "TargetInterface"))
+		json_object_object_add(classObj, "X_ZYXEL_TargetInterface", json_object_new_string(ClassObj_Info->TargetInterface));
+#endif
+	if(json_object_object_get(Jobj, "Ethertype"))
+		json_object_object_add(classObj, "Ethertype", json_object_new_int(ClassObj_Info->Ethertype));
+	if(json_object_object_get(Jobj, "SourceIPEnable")){
+		json_object_object_add(classObj, "SourceIP", json_object_new_string(ClassObj_Info->SourceIP));
+		json_object_object_add(classObj, "SourceMask", json_object_new_string(ClassObj_Info->SourceMask));
+		json_object_object_add(classObj, "SourceIPExclude", json_object_new_boolean(ClassObj_Info->SourceIPExclude));
+	}
+	if(json_object_object_get(Jobj, "SourcePortEnable")){
+		json_object_object_add(classObj, "SourcePort", json_object_new_int(ClassObj_Info->SourcePort));
+		json_object_object_add(classObj, "SourcePortRangeMax", json_object_new_int(ClassObj_Info->SourcePortRangeMax));
+		json_object_object_add(classObj, "SourcePortExclude", json_object_new_boolean(ClassObj_Info->SourcePortExclude));
+	}
+	if(json_object_object_get(Jobj, "SourceMACEnable")){
+		json_object_object_add(classObj, "SourceMACAddress", json_object_new_string(ClassObj_Info->SourceMACAddress));
+		json_object_object_add(classObj, "SourceMACMask", json_object_new_string(ClassObj_Info->SourceMACMask));
+		json_object_object_add(classObj, "SourceMACExclude", json_object_new_boolean(ClassObj_Info->SourceMACExclude));
+	}
+	if(json_object_object_get(Jobj, "DestIPEnable")){
+		json_object_object_add(classObj, "DestIP", json_object_new_string(ClassObj_Info->DestIP));
+		json_object_object_add(classObj, "DestMask", json_object_new_string(ClassObj_Info->DestMask));
+		json_object_object_add(classObj, "DestIPExclude", json_object_new_boolean(ClassObj_Info->DestIPExclude));
+	}
+	if(json_object_object_get(Jobj, "DestPortEnable")){
+		json_object_object_add(classObj, "DestPort", json_object_new_int(ClassObj_Info->DestPort));
+		json_object_object_add(classObj, "DestPortRangeMax", json_object_new_int(ClassObj_Info->DestPortRangeMax));
+		json_object_object_add(classObj, "DestPortExclude", json_object_new_boolean(ClassObj_Info->DestPortExclude));
+	}
+	if(json_object_object_get(Jobj, "DestMACEnable")){
+		json_object_object_add(classObj, "DestMACAddress", json_object_new_string(ClassObj_Info->DestMACAddress));
+		json_object_object_add(classObj, "DestMACMask", json_object_new_string(ClassObj_Info->DestMACMask));
+		json_object_object_add(classObj, "DestMACExclude", json_object_new_boolean(ClassObj_Info->DestMACExclude));
+	}
+	if(json_object_object_get(Jobj, "ServiceEnable")){
+		json_object_object_add(classObj, "X_ZYXEL_Service", json_object_new_string(ClassObj_Info->Service));
+		json_object_object_add(classObj, "X_ZYXEL_ServiceExclude", json_object_new_boolean(ClassObj_Info->ServiceExclude));
+	}
+	if(json_object_object_get(Jobj, "ProtocolEnable")){
+		json_object_object_add(classObj, "Protocol", json_object_new_int(ClassObj_Info->Protocol));
+		json_object_object_add(classObj, "ProtocolExclude", json_object_new_boolean(ClassObj_Info->ProtocolExclude));
+	}
+	if(json_object_object_get(Jobj, "DhcpEnable")){
+		json_object_object_add(classObj, "SourceVendorClassID", json_object_new_string(ClassObj_Info->SourceVendorClassID));
+		json_object_object_add(classObj, "SourceVendorClassIDExclude", json_object_new_boolean(ClassObj_Info->SourceVendorClassIDExclude));
+		json_object_object_add(classObj, "X_ZYXEL_SourceClientIDType", json_object_new_string(ClassObj_Info->SourceClientIDType));
+		json_object_object_add(classObj, "SourceClientID", json_object_new_string(ClassObj_Info->SourceClientID));
+		json_object_object_add(classObj, "SourceClientIDExclude", json_object_new_boolean(ClassObj_Info->SourceClientIDExclude));
+		json_object_object_add(classObj, "SourceUserClassID", json_object_new_string(ClassObj_Info->SourceUserClassID));
+		json_object_object_add(classObj, "SourceUserClassIDExclude", json_object_new_boolean(ClassObj_Info->SourceUserClassIDExclude));
+		json_object_object_add(classObj, "SourceVendorSpecificInfoEnterprise", json_object_new_int(ClassObj_Info->SourceVendorSpecificInfoEnterprise));
+		json_object_object_add(classObj, "SourceVendorSpecificInfo", json_object_new_string(ClassObj_Info->SourceVendorSpecificInfo));
+		json_object_object_add(classObj, "SourceVendorSpecificInfoExclude", json_object_new_boolean(ClassObj_Info->SourceVendorSpecificInfoExclude));
+	}
+	if(json_object_object_get(Jobj, "IPLengthEnable")){
+		json_object_object_add(classObj, "IPLengthMin", json_object_new_int(ClassObj_Info->IPLengthMin));
+		json_object_object_add(classObj, "IPLengthMax", json_object_new_int(ClassObj_Info->IPLengthMax));
+		json_object_object_add(classObj, "IPLengthExclude", json_object_new_boolean(ClassObj_Info->IPLengthExclude));
+	}
+	if(json_object_object_get(Jobj, "DSCPCheckEnable")){
+		json_object_object_add(classObj, "DSCPCheck", json_object_new_int(ClassObj_Info->DSCPCheck));
+		json_object_object_add(classObj, "DSCPExclude", json_object_new_boolean(ClassObj_Info->DSCPExclude));
+	}
+	if(json_object_object_get(Jobj, "EthernetPriorityEnable")){
+		json_object_object_add(classObj, "EthernetPriorityCheck", json_object_new_int(ClassObj_Info->EthernetPriorityCheck));
+		json_object_object_add(classObj, "EthernetPriorityExclude", json_object_new_boolean(ClassObj_Info->EthernetPriorityExclude));
+	}		
+	if(json_object_object_get(Jobj, "VLANIDCheckEnable")){
+		json_object_object_add(classObj, "VLANIDCheck", json_object_new_int(ClassObj_Info->VLANIDCheck));
+		json_object_object_add(classObj, "VLANIDExclude", json_object_new_boolean(ClassObj_Info->VLANIDExclude));
+	}
+	if(json_object_object_get(Jobj, "TCPACK"))
+		json_object_object_add(classObj, "TCPACK", json_object_new_boolean(ClassObj_Info->TCPACK));
+	if(json_object_object_get(Jobj, "TCPACKExclude"))
+		json_object_object_add(classObj, "TCPACKExclude", json_object_new_boolean(ClassObj_Info->TCPACKExclude));
+	if(json_object_object_get(Jobj, "DSCPMark"))
+		json_object_object_add(classObj, "DSCPMark", json_object_new_int(ClassObj_Info->DSCPMark));
+#ifdef ZYXEL_WEB_GUI_ECONET_QoS_STYLE
+	if(json_object_object_get(Jobj, "EthernetPriorityMark"))
+		json_object_object_add(classObj, "EthernetPriorityMark", json_object_new_int(ClassObj_Info->EthernetPriorityMark));
+#else
+	if(json_object_object_get(Jobj, "VLANIDAction")){
+		json_object_object_add(classObj, "X_ZYXEL_VLANIDAction", json_object_new_int(ClassObj_Info->VLANIDAction));
+		json_object_object_add(classObj, "EthernetPriorityMark", json_object_new_int(ClassObj_Info->EthernetPriorityMark));
+		json_object_object_add(classObj, "X_ZYXEL_VLANIDMark", json_object_new_int(ClassObj_Info->VLANIDMark));
+	}
+#endif
+	if(json_object_object_get(Jobj, "ForwardingPolicy"))
 	json_object_object_add(classObj, "ForwardingPolicy", json_object_new_int(ClassObj_Info->ForwardingPolicy));
 	json_object_object_add(classObj, "TrafficClass", json_object_new_int(ClassObj_Info->TrafficClass));
 
 }
 
 char* find_changed_traffic_class(int org_classIdx, int new_clsQueueIdx, bool defaultQ, int *changedQueueIdx, e_ActionType action) {
-	int i = 0;
 	int TrafficClass = -1;
 	char *TrafficClasses_group_str = NULL;
 	char *new_TrafficClasses_group_str = NULL;
 	char *TrafficClasses_single_str = NULL;
+	char buff[32] = {0};
 	char *rest_str = NULL;
 	bool FindQueue = false;
-	json_object *classObj = NULL;
 	json_object *queueObj = NULL;
-	objIndex_t classIid = {0};
 	objIndex_t queueIid = {0};
 
 	// the original class Iid idx
@@ -310,11 +681,8 @@
 	IID_INIT(queueIid);
 	while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_QOS_QUE, &queueIid, &queueObj) == ZCFG_SUCCESS) {
 		TrafficClasses_group_str = (char*)json_object_get_string(json_object_object_get(queueObj, "TrafficClasses"));
-#if(QOS_DAL_DEBUG == 1)			
-		printf("TrafficClasses_group_str %s\n", TrafficClasses_group_str);
-#endif
-		if(TrafficClasses_group_str != NULL) {
-			TrafficClasses_single_str = strtok_r(TrafficClasses_group_str, ",", &rest_str);
+		strcpy(buff,TrafficClasses_group_str);
+		TrafficClasses_single_str = strtok_r(buff, ",", &rest_str);
 			while(TrafficClasses_single_str != NULL) {
 				if(StrToIntConv(TrafficClasses_single_str) == TrafficClass) {
 					FindQueue = true;
@@ -323,13 +691,9 @@
 				}
 				TrafficClasses_single_str = strtok_r(rest_str, ",", &rest_str);
 			}
-		}
 		zcfgFeJsonObjFree(queueObj);
 
 		if(FindQueue == true) {
-#if(QOS_DAL_DEBUG == 1)			
-			printf("FindQueue %d\n", queueIid.idx[0]);
-#endif
 			break;
 		}
 	}
@@ -342,9 +706,6 @@
 			if(queueIid.idx[0] == *changedQueueIdx) {
 				if((defaultQ)||(queueIid.idx[0] != new_clsQueueIdx) || (action == e_ActionType_DELETE)) {
 					TrafficClasses_group_str = (char*)json_object_get_string(json_object_object_get(queueObj, "TrafficClasses"));
-#if(QOS_DAL_DEBUG == 1)			
-					printf("TrafficClasses_group_str %s, TrafficClass %d\n", TrafficClasses_group_str, TrafficClass);
-#endif
 					new_TrafficClasses_group_str = malloc(strlen(TrafficClasses_group_str) + 1);
 					new_TrafficClasses_group_str[0] = '\0';
 					if(TrafficClasses_group_str != NULL) {
@@ -358,9 +719,6 @@
 							TrafficClasses_single_str = strtok_r(rest_str, ",", &rest_str);
 						}
 					}
-#if(QOS_DAL_DEBUG == 1)			
-					printf("new_TrafficClasses_group_str %s\n", new_TrafficClasses_group_str);
-#endif
 				}
 				zcfgFeJsonObjFree(queueObj);
 				break;
@@ -383,9 +741,6 @@
 	objIndex_t queueIid = {0};
 	IID_INIT(queueIid);
 
-#if(QOS_DAL_DEBUG == 1)
-	printf("update_traffic_class_in_qos_queue\n");
-#endif
 	// update the TrafficClasses of RDM_OID_QOS_QUE which the original class related
 	if((action == e_ActionType_EDIT) || (action == e_ActionType_DELETE)) {
 		
@@ -403,11 +758,6 @@
 			}
 			free(new_TrafficClasses_group_str);
 		}
-		else {
-#if(QOS_DAL_DEBUG == 1)			
-			printf("No need to change que!\n");
-#endif
-		}
 	}
 
 	if(action != e_ActionType_DELETE) {
@@ -416,9 +766,6 @@
 			// find the queue which the class belong to and set its TrafficClasses 
 			if((!defaultQ) && (queueIid.idx[0] == new_clsQueueIdx) && (new_clsQueueIdx != changedQueueIdx)) {
 				TrafficClasses = (char*)json_object_get_string(json_object_object_get(queueObj, "TrafficClasses"));
-#if(QOS_DAL_DEBUG == 1)			
-				printf("classId %d OrgTrafficClasses %s\n", classIid.idx[0], TrafficClasses);
-#endif
 				// NewTrafficClasses = TrafficClasses + NewAddClass
 				array_size = strlen(TrafficClasses) + 10;
 				NewTrafficClasses = (char*)malloc(array_size); 
@@ -427,9 +774,6 @@
 				sprintf(tmp, "%d", classIid.idx[0]);
 				strcat(NewTrafficClasses, tmp);
 				strcat(NewTrafficClasses, ",");
-#if(QOS_DAL_DEBUG == 1)		
-				printf("classId %d NewTrafficClasses %s\n", classIid.idx[0], NewTrafficClasses);
-#endif
 				json_object_object_add(queueObj, "TrafficClasses", json_object_new_string(NewTrafficClasses));
 				zcfgFeObjJsonSetWithoutApply(RDM_OID_QOS_QUE, &queueIid, queueObj, NULL);
 				zcfgFeJsonObjFree(queueObj);
@@ -443,123 +787,708 @@
 	return;
 }
 
-void updateQosClassInfo(void){
-	uint8_t i = 0;
-	json_object *classObj = NULL;
+void zcfgFeDalShowQosClass(struct json_object *Jarray){
+	int i, len = 0, protocol = 0;		
+	char *ethertype = NULL, *dhcpoption = NULL;
+	bool showIndex = false;	
+	struct json_object *obj, *obj_idx = NULL;			
+	if(json_object_get_type(Jarray) != json_type_array){						
+		printf("wrong Jobj format!\n");						
+		return;	
+	}	
+	len = json_object_array_length(Jarray);	
+	obj_idx = json_object_array_get_idx(Jarray, 0);	
+	showIndex = json_object_get_boolean(json_object_object_get(obj_idx, "ShowIndex"));	
+	if(len == 1 && showIndex){	
+		obj = json_object_array_get_idx(Jarray, 0);		
+		ethertype = json_object_get_string(json_object_object_get(obj, "EtherType"));
+		dhcpoption = json_object_get_string(json_object_object_get(obj, "dhcp"));
+		protocol = json_object_get_int(json_object_object_get(obj, "Protocol"));
+		printf("Class Configuration\n");
+		printf("%-50s %s \n","Index :", json_object_get_string(json_object_object_get(obj, "Index")));		
+		printf("%-50s %s \n","Order :", json_object_get_string(json_object_object_get(obj, "Order")));
+		printf("%-50s %s \n","Enable :", json_object_get_string(json_object_object_get(obj, "Enable")));	
+		printf("%-50s %s \n","Name :", json_object_get_string(json_object_object_get(obj, "Name")));
+		printf("Criteria Configuration\n");
+		printf("%-50s %s \n","Interface :", json_object_get_string(json_object_object_get(obj, "Interface")));		
+		printf("%-50s %s \n","Ether type :", json_object_get_string(json_object_object_get(obj, "EtherType")));
+		if(!strcmp(ethertype,"IP") || !strcmp(ethertype,"IPv6")){
+			printf("%-50s %s \n","Source IP Address :", json_object_get_string(json_object_object_get(obj, "SourceIP")));
+			if(!strcmp(ethertype,"IP"))
+				printf("%-50s %s \n","Source Subnet Mask :", json_object_get_string(json_object_object_get(obj, "SourceMask")));
+			if(!strcmp(ethertype,"IPv6"))
+				printf("%-50s %s \n","Source Prefix Length :", json_object_get_string(json_object_object_get(obj, "SourceMask")));
+			printf("%-50s %s \n","Source IP Exclude :", json_object_get_string(json_object_object_get(obj, "SourceIPExclude")));
+			if(protocol == 6 || protocol == 17){
+				printf("%-50s %s \n","Source Port Start :", json_object_get_string(json_object_object_get(obj, "SourcePort")));
+				printf("%-50s %s \n","Source Port End :", json_object_get_string(json_object_object_get(obj, "SourcePortRangeMax")));
+			}
+		}
+		printf("%-50s %s \n","Source MAC Address :", json_object_get_string(json_object_object_get(obj, "SourceMACAddress")));	
+		printf("%-50s %s \n","Source MAC Mask :", json_object_get_string(json_object_object_get(obj, "SourceMACMask")));
+		printf("%-50s %s \n","Source MAC Exclude :", json_object_get_string(json_object_object_get(obj, "SourceMACExclude")));
+		if(!strcmp(ethertype,"IP") || !strcmp(ethertype,"IPv6")){
+			printf("%-50s %s \n","Destination IP Address :", json_object_get_string(json_object_object_get(obj, "DestIP")));
+			if(!strcmp(ethertype,"IP"))
+				printf("%-50s %s \n","Destination Subnet Mask :", json_object_get_string(json_object_object_get(obj, "DestMask")));
+			if(!strcmp(ethertype,"IPv6"))
+				printf("%-50s %s \n","Destination Prefix Length :", json_object_get_string(json_object_object_get(obj, "DestMask")));
+			printf("%-50s %s \n","Destination IP Exclude :", json_object_get_string(json_object_object_get(obj, "DestIPExclude")));
+			if(protocol == 6 || protocol == 17){
+				printf("%-50s %s \n","Destination Port Start :", json_object_get_string(json_object_object_get(obj, "DestPort")));
+				printf("%-50s %s \n","Destination Port End :", json_object_get_string(json_object_object_get(obj, "DestPortRangeMax")));
+			}
+		}
+		printf("%-50s %s \n","Destination MAC Address :", json_object_get_string(json_object_object_get(obj, "DestMACAddress")));	
+		printf("%-50s %s \n","Destination MAC Mask :", json_object_get_string(json_object_object_get(obj, "DestMACMask")));	
+		printf("%-50s %s \n","Destination MAC Exclude :", json_object_get_string(json_object_object_get(obj, "DestMACExclude")));
+		if(!strcmp(ethertype,"IP") || !strcmp(ethertype,"IPv6")){
+			printf("%-50s %s \n","IP protocol :", json_object_get_string(json_object_object_get(obj, "Protocol")));
+			printf("%-50s %s \n","IP protocol Exclude :", json_object_get_string(json_object_object_get(obj, "ProtocolExclude")));
+			if(!strcmp(ethertype,"IP")){
+				if(!strcmp(dhcpoption,"Option 60")){
+					printf("%-50s %s \n","DHCP :", "Option 60");	
+					printf("%-50s %s \n","Vendor Class ID :", json_object_get_string(json_object_object_get(obj, "SourceVendorClassID")));
+					printf("%-50s %s \n","Vendor Class ID Exclude :", json_object_get_string(json_object_object_get(obj, "SourceVendorClassIDExclude")));
+				}
+				if(!strcmp(dhcpoption,"Option 61")){
+					printf("%-50s %s \n","DHCP :", "Option 61");	
+					printf("%-50s %s \n","Client ID Type :", json_object_get_string(json_object_object_get(obj, "SourceClientIDType")));
+					printf("%-50s %s \n","Client ID :", json_object_get_string(json_object_object_get(obj, "SourceClientID")));
+					printf("%-50s %s \n","Client ID Exclude :", json_object_get_string(json_object_object_get(obj, "SourceClientIDExclude")));
+				}
+				if(!strcmp(dhcpoption,"Option 77")){
+					printf("%-50s %s \n","DHCP :", "Option 77");	
+					printf("%-50s %s \n","User Class ID :", json_object_get_string(json_object_object_get(obj, "SourceUserClassID")));
+					printf("%-50s %s \n","User Class ID Exclude :", json_object_get_string(json_object_object_get(obj, "SourceUserClassIDExclude")));	
+				}
+				if(!strcmp(dhcpoption,"Option 125")){
+					printf("%-50s %s \n","DHCP :", "Option 125");	
+					printf("%-50s %s \n","Enterprise Number :", json_object_get_string(json_object_object_get(obj, "SourceVendorSpecificInfoEnterprise")));
+					printf("%-50s %s \n","Vendor Specific Info :", json_object_get_string(json_object_object_get(obj, "SourceVendorSpecificInfo")));	
+					printf("%-50s %s \n","Vendor Specific Info Exclude :", json_object_get_string(json_object_object_get(obj, "SourceVendorSpecificInfoExclude")));	
+				}
+			}
+			printf("%-50s %s \n","IP Packet Length Min :", json_object_get_string(json_object_object_get(obj, "IPLengthMin"))); 
+			printf("%-50s %s \n","IP Packet Length Max :", json_object_get_string(json_object_object_get(obj, "IPLengthMax")));
+			printf("%-50s %s \n","IP Packet Length Exclude :", json_object_get_string(json_object_object_get(obj, "IPLengthExclude")));
+			printf("%-50s %s \n","DSCP :", json_object_get_string(json_object_object_get(obj, "DSCPCheck")));
+			printf("%-50s %s \n","DSCP Exclude :", json_object_get_string(json_object_object_get(obj, "DSCPExclude")));
+		}
+	
+		if(!strcmp(ethertype,"802.1Q")){
+			printf("%-50s %s \n","802.1P :", json_object_get_string(json_object_object_get(obj, "EthernetPriorityCheck")));	
+			printf("%-50s %s \n","802.1P Exclude :", json_object_get_string(json_object_object_get(obj, "EthernetPriorityExclude")));
+			printf("%-50s %s \n","VLAN ID :", json_object_get_string(json_object_object_get(obj, "VLANIDCheck")));
+			printf("%-50s %s \n","VLAN ID Exclude :", json_object_get_string(json_object_object_get(obj, "VLANIDExclude")));
+		}
+
+		if(protocol == 6){
+			printf("%-50s %s \n","TCP ACK :", json_object_get_string(json_object_object_get(obj, "TCPACK")));
+			printf("%-50s %s \n","TCP ACK Exclude :", json_object_get_string(json_object_object_get(obj, "TCPACKExclude")));
+		}	
+		printf("Packet Modification\n");
+		printf("%-50s %s \n","DSCP Mark :", json_object_get_string(json_object_object_get(obj, "DSCPMark")));	
+		printf("%-50s %s \n","802.1P Mark :", json_object_get_string(json_object_object_get(obj, "EthernetPriorityMark")));
+#ifndef ZYXEL_WEB_GUI_ECONET_QoS_STYLE
+		printf("%-50s %s \n","VLAN ID Action :", json_object_get_string(json_object_object_get(obj, "VLANIDAction")));
+		printf("%-50s %s \n","VLAN ID Tag :", json_object_get_string(json_object_object_get(obj, "VLANIDMark")));
+#endif
+		printf("Class Routing\n");
+		printf("%-50s %s \n","To Interface :", json_object_get_string(json_object_object_get(obj, "ForwardingPolicy")));
+		printf("Outgoing Queue Selection\n");
+		printf("%-50s %s \n","To Queue :", json_object_get_string(json_object_object_get(obj, "Queue")));
+	}	
+	else{		
+		printf("%-6s %-7s %-7s %-15s %-10s %-17s\n","Index", "Order", "Enable", "Name", "Ether Type", "To Queue");			
+		for(i=0;i<len;i++){				
+			obj = json_object_array_get_idx(Jarray, i);							
+			printf("%-6s %-7s %-7s %-15s %-10s %-17s\n",			
+			json_object_get_string(json_object_object_get(obj, "Index")),			
+			json_object_get_string(json_object_object_get(obj, "Order")),			
+			json_object_get_string(json_object_object_get(obj, "Enable")),			
+			json_object_get_string(json_object_object_get(obj, "Name")),
+			json_object_get_string(json_object_object_get(obj, "EtherType")),
+			json_object_get_string(json_object_object_get(obj, "Queue")));		
+		}	
+	}
+}
+
+zcfgRet_t zcfgFeDalQosClassGet(struct json_object *Jobj, struct json_object *Jarray, char *replyMsg){	
+	zcfgRet_t ret = ZCFG_SUCCESS;		
+	struct json_object *pramJobj = NULL;
+	struct json_object *classObj = NULL;
 	objIndex_t classIid = {0};
-	uint8_t Class_Order = 0;
+	char *SourceVendorClassID = NULL;
+	char *SourceClientIDType = NULL;
+	char *SourceUserClassID = NULL;
+	char *SourceVendorSpecificInfo = NULL;
+	char Policy[20] = {0};
+	char number[20] = {0};
+	int count = 1,index = 0,trafficclass = 0, forward = 0, ethertype = 0;
+
+	IID_INIT(classIid);	
+	if(json_object_object_get(Jobj, "Index")){
+		index = json_object_get_int(json_object_object_get(Jobj, "Index"));		
+		ret = convertIndextoIid(index, &classIid, RDM_OID_QOS_CLS, NULL, NULL, replyMsg);		
+		if(ret != ZCFG_SUCCESS)			
+			return ret;		
+		if(zcfgFeObjJsonGetWithoutUpdate(RDM_OID_QOS_CLS, &classIid , &classObj) == ZCFG_SUCCESS){
+			pramJobj = json_object_new_object();
+			ethertype = json_object_get_int(json_object_object_get(classObj, "Ethertype"));
+			trafficclass = json_object_get_int(json_object_object_get(classObj, "TrafficClass"));
+			SourceVendorClassID = json_object_get_string(json_object_object_get(classObj, "SourceVendorClassID"));
+			if(strcmp(SourceVendorClassID,"")!= 0)
+				json_object_object_add(pramJobj, "dhcp", json_object_new_string("Option 60"));
+			SourceClientIDType = json_object_get_string(json_object_object_get(classObj, "X_ZYXEL_SourceClientIDType"));
+			if(strcmp(SourceClientIDType,"")!= 0)
+				json_object_object_add(pramJobj, "dhcp", json_object_new_string("Option 61"));
+			SourceUserClassID = json_object_get_string(json_object_object_get(classObj, "SourceUserClassID"));
+			if(strcmp(SourceUserClassID,"")!= 0)
+				json_object_object_add(pramJobj, "dhcp", json_object_new_string("Option 77"));
+			SourceVendorSpecificInfo = json_object_get_string(json_object_object_get(classObj, "SourceVendorSpecificInfo"));
+			if(strcmp(SourceVendorSpecificInfo,"")!= 0)
+				json_object_object_add(pramJobj, "dhcp", json_object_new_string("Option 125"));
+			if(!strcmp(SourceVendorClassID,"") && !strcmp(SourceClientIDType,"") && !strcmp(SourceUserClassID,"") && !strcmp(SourceVendorSpecificInfo,""))
+				json_object_object_add(pramJobj, "dhcp", json_object_new_string(""));
+			forward = json_object_get_int(json_object_object_get(classObj, "ForwardingPolicy"));
+			sprintf(Policy,"%d",forward);
+
+			json_object_object_add(pramJobj, "ForwardingPolicy", json_object_new_string(Policy));
+			json_object_object_add(pramJobj, "Interface", JSON_OBJ_COPY(json_object_object_get(classObj, "Interface")));
+			json_object_object_add(pramJobj, "ShowIndex", json_object_new_boolean(true));			
+			json_object_object_add(pramJobj, "Index", json_object_new_int(index));	
+			json_object_object_add(pramJobj, "Order",  JSON_OBJ_COPY(json_object_object_get(classObj, "Order")));
+			json_object_object_add(pramJobj, "Enable",  JSON_OBJ_COPY(json_object_object_get(classObj, "Enable")));			
+			json_object_object_add(pramJobj, "Name",  JSON_OBJ_COPY(json_object_object_get(classObj, "X_ZYXEL_Name")));			
+			json_object_object_add(pramJobj, "SourceIP", JSON_OBJ_COPY(json_object_object_get(classObj, "SourceIP")));	
+			json_object_object_add(pramJobj, "SourceMask", JSON_OBJ_COPY(json_object_object_get(classObj, "SourceMask")));	
+			json_object_object_add(pramJobj, "SourceIPExclude", JSON_OBJ_COPY(json_object_object_get(classObj, "SourceIPExclude")));	
+			json_object_object_add(pramJobj, "SourcePort", JSON_OBJ_COPY(json_object_object_get(classObj, "SourcePort")));	
+			json_object_object_add(pramJobj, "SourcePortRangeMax", JSON_OBJ_COPY(json_object_object_get(classObj, "SourcePortRangeMax")));	
+			json_object_object_add(pramJobj, "SourcePortExclude", JSON_OBJ_COPY(json_object_object_get(classObj, "SourcePortExclude")));	
+			json_object_object_add(pramJobj, "SourceMACAddress", JSON_OBJ_COPY(json_object_object_get(classObj, "SourceMACAddress")));	
+			json_object_object_add(pramJobj, "SourceMACMask", JSON_OBJ_COPY(json_object_object_get(classObj, "SourceMACMask")));	
+			json_object_object_add(pramJobj, "SourceMACExclude", JSON_OBJ_COPY(json_object_object_get(classObj, "SourceMACExclude")));	
+			json_object_object_add(pramJobj, "DestIP", JSON_OBJ_COPY(json_object_object_get(classObj, "DestIP")));	
+			json_object_object_add(pramJobj, "DestMask", JSON_OBJ_COPY(json_object_object_get(classObj, "DestMask")));	
+			json_object_object_add(pramJobj, "DestIPExclude", JSON_OBJ_COPY(json_object_object_get(classObj, "DestIPExclude")));	
+			json_object_object_add(pramJobj, "DestPort", JSON_OBJ_COPY(json_object_object_get(classObj, "DestPort")));	
+			json_object_object_add(pramJobj, "DestPortRangeMax", JSON_OBJ_COPY(json_object_object_get(classObj, "DestPortRangeMax")));	
+			json_object_object_add(pramJobj, "DestPortExclude", JSON_OBJ_COPY(json_object_object_get(classObj, "DestPortExclude")));	
+			json_object_object_add(pramJobj, "DestMACAddress", JSON_OBJ_COPY(json_object_object_get(classObj, "DestMACAddress")));	
+			json_object_object_add(pramJobj, "DestMACMask", JSON_OBJ_COPY(json_object_object_get(classObj, "DestMACMask")));	
+			json_object_object_add(pramJobj, "DestMACExclude", JSON_OBJ_COPY(json_object_object_get(classObj, "DestMACExclude")));	
+			json_object_object_add(pramJobj, "Protocol", JSON_OBJ_COPY(json_object_object_get(classObj, "Protocol")));	
+			json_object_object_add(pramJobj, "ProtocolExclude", JSON_OBJ_COPY(json_object_object_get(classObj, "ProtocolExclude")));	
+			json_object_object_add(pramJobj, "SourceVendorClassID", JSON_OBJ_COPY(json_object_object_get(classObj, "SourceVendorClassID")));	
+			json_object_object_add(pramJobj, "SourceVendorClassIDExclude", JSON_OBJ_COPY(json_object_object_get(classObj, "SourceVendorClassIDExclude")));	
+			json_object_object_add(pramJobj, "SourceClientIDType", JSON_OBJ_COPY(json_object_object_get(classObj, "X_ZYXEL_SourceClientIDType")));	
+			json_object_object_add(pramJobj, "SourceClientID", JSON_OBJ_COPY(json_object_object_get(classObj, "SourceClientID")));	
+			json_object_object_add(pramJobj, "SourceClientIDExclude", JSON_OBJ_COPY(json_object_object_get(classObj, "SourceClientIDExclude")));	
+			json_object_object_add(pramJobj, "SourceUserClassID", JSON_OBJ_COPY(json_object_object_get(classObj, "SourceUserClassID")));	
+			json_object_object_add(pramJobj, "SourceUserClassIDExclude", JSON_OBJ_COPY(json_object_object_get(classObj, "SourceUserClassIDExclude")));	
+			json_object_object_add(pramJobj, "SourceVendorSpecificInfoEnterprise", JSON_OBJ_COPY(json_object_object_get(classObj, "SourceVendorSpecificInfoEnterprise")));	
+			json_object_object_add(pramJobj, "SourceVendorSpecificInfo", JSON_OBJ_COPY(json_object_object_get(classObj, "SourceVendorSpecificInfo")));	
+			json_object_object_add(pramJobj, "SourceVendorSpecificInfoExclude", JSON_OBJ_COPY(json_object_object_get(classObj, "SourceVendorSpecificInfoExclude")));	
+			json_object_object_add(pramJobj, "IPLengthMin", JSON_OBJ_COPY(json_object_object_get(classObj, "IPLengthMin")));	
+			json_object_object_add(pramJobj, "IPLengthMax", JSON_OBJ_COPY(json_object_object_get(classObj, "IPLengthMax")));	
+			json_object_object_add(pramJobj, "IPLengthExclude", JSON_OBJ_COPY(json_object_object_get(classObj, "IPLengthExclude")));	
+			json_object_object_add(pramJobj, "DSCPCheck", JSON_OBJ_COPY(json_object_object_get(classObj, "DSCPCheck")));	
+			json_object_object_add(pramJobj, "DSCPExclude", JSON_OBJ_COPY(json_object_object_get(classObj, "DSCPExclude")));	
+			json_object_object_add(pramJobj, "EthernetPriorityCheck", JSON_OBJ_COPY(json_object_object_get(classObj, "EthernetPriorityCheck")));	
+			json_object_object_add(pramJobj, "EthernetPriorityExclude", JSON_OBJ_COPY(json_object_object_get(classObj, "EthernetPriorityExclude")));
+			json_object_object_add(pramJobj, "VLANIDCheck", JSON_OBJ_COPY(json_object_object_get(classObj, "VLANIDCheck")));	
+			json_object_object_add(pramJobj, "VLANIDExclude", JSON_OBJ_COPY(json_object_object_get(classObj, "VLANIDExclude")));	
+			json_object_object_add(pramJobj, "TCPACK", JSON_OBJ_COPY(json_object_object_get(classObj, "TCPACK")));	
+			json_object_object_add(pramJobj, "TCPACKExclude", JSON_OBJ_COPY(json_object_object_get(classObj, "TCPACKExclude")));	
+			json_object_object_add(pramJobj, "DSCPMark", JSON_OBJ_COPY(json_object_object_get(classObj, "DSCPMark")));	
+			json_object_object_add(pramJobj, "VLANIDAction", JSON_OBJ_COPY(json_object_object_get(classObj, "X_ZYXEL_VLANIDAction")));	
+			json_object_object_add(pramJobj, "EthernetPriorityMark", JSON_OBJ_COPY(json_object_object_get(classObj, "EthernetPriorityMark")));	
+			json_object_object_add(pramJobj, "VLANIDMark", JSON_OBJ_COPY(json_object_object_get(classObj, "X_ZYXEL_VLANIDMark")));	
+	
+			if(ethertype == -1)
+				json_object_object_add(pramJobj, "EtherType",json_object_new_string("NA"));
+			if(ethertype == 2048)
+				json_object_object_add(pramJobj, "EtherType",json_object_new_string("IP"));
+			if(ethertype == 2054)
+				json_object_object_add(pramJobj, "EtherType",json_object_new_string("ARP"));
+			if(ethertype == 34915)
+				json_object_object_add(pramJobj, "EtherType",json_object_new_string("PPPoE_DISC"));
+			if(ethertype == 34916)
+				json_object_object_add(pramJobj, "EtherType",json_object_new_string("PPPoE_SES"));
+			if(ethertype == 33024)
+				json_object_object_add(pramJobj, "EtherType",json_object_new_string("802.1Q"));
+			if(ethertype == 34525)
+				json_object_object_add(pramJobj, "EtherType",json_object_new_string("IPv6"));
+			sprintf(number, "%d", trafficclass);
+			json_object_object_add(pramJobj, "Queue", json_object_new_string(number));
+			json_object_array_add(Jarray, pramJobj);									
+			zcfgFeJsonObjFree(classObj);			
+		}	
+	}	
+	else{		
+		while(zcfgFeObjJsonGetNext(RDM_OID_QOS_CLS, &classIid , &classObj) == ZCFG_SUCCESS){						
+			sprintf(number, "%d", classIid.idx[0]);
+			pramJobj = json_object_new_object();
+			ethertype = json_object_get_int(json_object_object_get(classObj, "Ethertype"));
+			json_object_object_add(pramJobj, "Index", json_object_new_int(count));
+			json_object_object_add(pramJobj, "Order",  JSON_OBJ_COPY(json_object_object_get(classObj, "Order")));
+			json_object_object_add(pramJobj, "Enable",  JSON_OBJ_COPY(json_object_object_get(classObj, "Enable")));			
+			json_object_object_add(pramJobj, "Name",  JSON_OBJ_COPY(json_object_object_get(classObj, "X_ZYXEL_Name")));	
+			json_object_object_add(pramJobj, "Queue", json_object_new_string(number));
+			if(ethertype == -1)
+				json_object_object_add(pramJobj, "EtherType",json_object_new_string("NA"));
+			if(ethertype == 2048)
+				json_object_object_add(pramJobj, "EtherType",json_object_new_string("IP"));
+			if(ethertype == 2054)
+				json_object_object_add(pramJobj, "EtherType",json_object_new_string("ARP"));
+			if(ethertype == 34915)
+				json_object_object_add(pramJobj, "EtherType",json_object_new_string("PPPoE_DISC"));
+			if(ethertype == 34916)
+				json_object_object_add(pramJobj, "EtherType",json_object_new_string("PPPoE_SES"));
+			if(ethertype == 33024)
+				json_object_object_add(pramJobj, "EtherType",json_object_new_string("802.1Q"));
+			if(ethertype == 34525)
+				json_object_object_add(pramJobj, "EtherType",json_object_new_string("IPv6"));
+			json_object_array_add(Jarray, pramJobj);						
+			count++;							
+			zcfgFeJsonObjFree(classObj);
+		}
+	}	
+	return ret;
+}
 
-	memset(&IidMappingTable, 0 , sizeof(IidMappingTable));
-	while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_QOS_CLS, &classIid, &classObj) == ZCFG_SUCCESS) {
-		Class_Order = json_object_get_int(json_object_object_get(classObj, "Order"));
-		IidMappingTable.size += 1;
-		IidMappingTable.iid[Class_Order-1] = classIid.idx[0];
-		zcfgFeJsonObjFree(classObj);
+bool checkdhcptype(struct json_object *Jobj, s_QosClass *ClassObj_Info)
+{
+	char *tmp1 = NULL, *tmp2 = NULL;
+	int len1 = 0, len2 = 0;
+	if(!strcmp(ClassObj_Info->Dhcp,"op60")){
+		tmp1 = (char*)json_object_get_string(json_object_object_get(Jobj, "SourceVendorClassID"));
+		len1 = strlen(tmp1);
+		if(len1>124){
+			printf("SourceVendorClassID length can not greater than 124.\n");				
+			return false; 
+		}
 	}
+	if(!strcmp(ClassObj_Info->Dhcp,"op61")){
+		tmp1 = (char*)json_object_get_string(json_object_object_get(Jobj, "SourceClientIDType"));
+		tmp2 = (char*)json_object_get_string(json_object_object_get(Jobj, "SourceClientID"));
+		len1 = strlen(tmp1);
+		len2 = strlen(tmp2);
+		if(len1>2){
+			printf("SourceClientIDType length can not greater than 2.\n");				
+			return false; 
+		}
+		while(*tmp1 != NULL){
+			if(!isxdigit(*tmp1)){
+				printf("SourceClientIDType should be Hex Number.\n");				
+				return false; 
+			}
+			*tmp1++;
+		}
 
-#if(QOS_DAL_DEBUG == 1)			
-	printf("updateQosClassInfo\n");
-	for(i=0; i<IidMappingTable.size; i++){
-		printf("idx[%d] iid %d\n", i, IidMappingTable.iid[i]);
+		if(len2>32 || (len2%2 != 0)){
+			printf("SourceClientID length can not greater than 32 and should be even length.\n");				
+			return false; 
+		}
+		while(*tmp2 != NULL){
+			if(!isxdigit(*tmp2)){
+				printf("SourceClientID should be Hex Number.\n");				
+				return false; 
+			}
+			*tmp2++;
+		}
 	}
-#endif
-	return;
+	if(!strcmp(ClassObj_Info->Dhcp,"op77")){
+		tmp1 = (char*)json_object_get_string(json_object_object_get(Jobj, "SourceUserClassID"));
+		len1 = strlen(tmp1);
+		if(len1>32 || (len1%2 != 0)){
+			printf("SourceUserClassID length can not greater than 32 and should be even length.\n");				
+			return false; 
+		}
+		while(*tmp1 != NULL){
+			if(!isxdigit(*tmp1)){
+				printf("SourceUserClassID should be Hex Number.\n");				
+				return false; 
+			}
+			*tmp1++;
+		}
+	}
+	if(!strcmp(ClassObj_Info->Dhcp,"op125")){
+		tmp1 = (char*)json_object_get_string(json_object_object_get(Jobj, "SourceVendorSpecificInfoEnterprise"));
+		tmp2 = (char*)json_object_get_string(json_object_object_get(Jobj, "SourceVendorSpecificInfo"));
+		len1 = strlen(tmp1);
+		len2 = strlen(tmp2);
+		if(len1 != 8){
+			printf("SourceVendorSpecificInfoEnterprise length should be equal to 8.\n");				
+			return false; 
+		}
+		while(*tmp1 != NULL){
+			if(!isxdigit(*tmp1)){
+				printf("SourceVendorSpecificInfoEnterprise should be Hex Number.\n");				
+				return false; 
+			}
+			*tmp1++;
+		}
+		if(len2>32 || (len2%2 != 0)){
+			printf("SourceVendorSpecificInfo length can not greater than 32 and should be even length.\n");				
+			return false; 
+		}
+		while(*tmp2 != NULL){
+			if(!isxdigit(*tmp2)){
+				printf("SourceVendorSpecificInfo should be Hex Number.\n");				
+				return false; 
+			}
+			*tmp2++;
+		}
+	}
+	return true;
 }
 
 zcfgRet_t zcfgFeDalQosClassAdd(struct json_object *Jobj, char *replyMsg) {
 	zcfgRet_t ret = ZCFG_SUCCESS;
 	e_ActionType action = e_ActionType_ADD; //ADD, EDIT, DELETE
-	s_QosClass *QosClass_Info = NULL;
+	s_QosClass ClassObj_Info;
 	json_object *classObj = NULL;
 	objIndex_t classIid = {0};
 	IID_INIT(classIid);
+	memset(&ClassObj_Info,0,sizeof(ClassObj_Info));
 
-#if(QOS_DAL_DEBUG == 1)			
-	printf("zcfgFeDalQosClassAdd\n");
-#endif
-	// POST RDM_OID_QOS_CLS
-	if((ret = zcfgFeObjJsonAdd(RDM_OID_QOS_CLS, &classIid, NULL)) != ZCFG_SUCCESS) {
-		return ret;
+	getQosClassBasicInfo(Jobj, &ClassObj_Info);
+	zcfg_offset_t oid;		
+	oid = RDM_OID_QOS_CLS;		
+	if(ClassObj_Info.Name != NULL){	
+		ret = dalcmdParamCheck(NULL, ClassObj_Info.Name , oid, "X_ZYXEL_Name", "Name",  replyMsg);				
+		if(ret != ZCFG_SUCCESS)						
+			return ret;
 	}
-	if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_QOS_CLS, &classIid, &classObj)) != ZCFG_SUCCESS) {
-		return ret;
+	if(json_object_object_get(Jobj, "IPLengthEnable")){
+		if(ClassObj_Info.IPLengthEnable == true){
+			if(ClassObj_Info.IPLengthMin > ClassObj_Info.IPLengthMax){ 	
+				printf("IPLengthMax need to equal or greater than IPLengthMin.\n");				
+				return ZCFG_INVALID_PARAM_VALUE; 
+			}	
+		}
 	}
 
-	QosClass_Info = (s_QosClass*)malloc(sizeof(s_QosClass));
-	memset(QosClass_Info, 0, sizeof(s_QosClass));
-	getQosClassBasicInfo(Jobj, QosClass_Info);
+	if(json_object_object_get(Jobj, "DhcpEnable")){
+		if(ClassObj_Info.DhcpEnable == true){
+			if(checkdhcptype(Jobj, &ClassObj_Info)== false)
+				return ZCFG_INVALID_PARAM_VALUE; 
+		}
+	}
+	
+	// POST RDM_OID_QOS_CLS
+	ret = zcfgFeObjJsonAdd(RDM_OID_QOS_CLS, &classIid, NULL);		
+	if(ret == ZCFG_SUCCESS) {		
+		ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_QOS_CLS, &classIid, &classObj);		
+	}	
 
+	if(ret == ZCFG_SUCCESS) {
 	// Fill the TrafficClasses into RDM_OID_QOS_CLS
-	QosClass_Info->ClassObj_Info->TrafficClass = classIid.idx[0];
-#if(QOS_DAL_DEBUG == 1)			
-	printf("new add TrafficClass %d\n", QosClass_Info->ClassObj_Info->TrafficClass);
-#endif
+		ClassObj_Info.TrafficClass = classIid.idx[0];
 
 	// update RDM_OID_QOS_QUE - TrafficClasses
-	update_traffic_class_in_qos_queue(QosClass_Info->classIdx, QosClass_Info->clsQueueIdx, QosClass_Info->ClassObj_Info->defaultQ, classIid, action);
-	
-	
-	
-	
+		update_traffic_class_in_qos_queue(ClassObj_Info.Index, ClassObj_Info.Queue, ClassObj_Info.defaultQ, classIid, action);
 		
-	// PUT RDM_OID_QOS_CLS
-	prepare_qos_classObj(classObj, QosClass_Info->ClassObj_Info);
-	zcfgFeObjJsonBlockedSet(RDM_OID_QOS_CLS, &classIid, classObj, NULL);
-	zcfgFeJsonObjFree(classObj);
-#if(QOS_DAL_DEBUG == 1)			
-	printf("update Order\n");
-#endif
-	updateQosClassInfo();
-	freeQosClassBasicInfo(QosClass_Info);
-	free(QosClass_Info);
-
-	return ret;
+		// PUT RDM_OID_QOS_CLS
+		prepare_qos_classObj(Jobj, classObj, &ClassObj_Info);
+		zcfgFeObjJsonBlockedSet(RDM_OID_QOS_CLS, &classIid, classObj, NULL);
+		zcfgFeJsonObjFree(classObj);
+		return ret;
+	}
+	else{				
+		printf("%s: Object retrieve fail\n", __FUNCTION__);				
+		return ret;	
+	}
 }
 
 zcfgRet_t zcfgFeDalQosClassEdit(struct json_object *Jobj, char *replyMsg) {
 	zcfgRet_t ret = ZCFG_SUCCESS;
 	e_ActionType action = e_ActionType_EDIT; //ADD, EDIT, DELETE
-	s_QosClass *QosClass_Info = NULL;
+	int ethertype = 0;
+	s_QosClass ClassObj_Info;
 	json_object *classObj = NULL;
 	objIndex_t classIid = {0};
+	IID_INIT(classIid);
+	memset(&ClassObj_Info,0,sizeof(ClassObj_Info));
 
-#if(QOS_DAL_DEBUG == 1)			
-	printf("zcfgFeDalQosClassEdit\n");
-#endif
-	updateQosClassInfo();
-	QosClass_Info = (s_QosClass*)malloc(sizeof(s_QosClass));
-	memset(QosClass_Info, 0, sizeof(s_QosClass));
-	getQosClassBasicInfo(Jobj, QosClass_Info);
-	// Fill the TrafficClasses into RDM_OID_QOS_CLS
-	QosClass_Info->ClassObj_Info->TrafficClass = QosClass_Info->classIdx;
-	
+	getQosClassBasicInfo(Jobj, &ClassObj_Info);
+	zcfg_offset_t oid;		
+	oid = RDM_OID_QOS_CLS;
+	if(json_object_object_get(Jobj, "idx") == NULL){
+		ret = convertIndextoIid(ClassObj_Info.Index, &classIid, oid, NULL, NULL, replyMsg);
+		if(ret != ZCFG_SUCCESS)						
+			return ret;
+	}
+	else{
+		classIid.level = 1;
+		classIid.idx[0] = ClassObj_Info.Index;
+	}
+	if(ClassObj_Info.Name != NULL){	
+		ret = dalcmdParamCheck(&classIid, ClassObj_Info.Name , oid, "X_ZYXEL_Name", "Name",  replyMsg);				
+		if(ret != ZCFG_SUCCESS)						
+			return ret;	
+	}	
+	
+	if(json_object_object_get(Jobj, "DhcpEnable")){
+		if(ClassObj_Info.DhcpEnable == true){
+			if(checkdhcptype(Jobj, &ClassObj_Info)== false)
+				return ZCFG_INVALID_PARAM_VALUE; 
+		}
+	}
 	
+	// Fill the TrafficClasses into RDM_OID_QOS_CLS
+	ClassObj_Info.TrafficClass = classIid.idx[0];
 	
 	// PUT RDM_OID_QOS_CLS
-	IID_INIT(classIid);
-	while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_QOS_CLS, &classIid, &classObj) == ZCFG_SUCCESS) {
-		if(classIid.idx[0] == QosClass_Info->classIdx) {
-			// update RDM_OID_QOS_QUE - TrafficClasses
-			update_traffic_class_in_qos_queue(QosClass_Info->classIdx, QosClass_Info->clsQueueIdx, QosClass_Info->ClassObj_Info->defaultQ, classIid, action);
+	if(zcfgFeObjJsonGetWithoutUpdate(RDM_OID_QOS_CLS, &classIid, &classObj) == ZCFG_SUCCESS) {
+		if(json_object_object_get(Jobj, "Ethertype")){	
+			//NA(-1),ARP(2054),PPPoE_DISC(34915),PPPoE_SES(34916), clear value for IP(2048),IPv6(34525) or 802.1Q(33024)
+			if( ClassObj_Info.Ethertype == -1 || ClassObj_Info.Ethertype == 2054 || ClassObj_Info.Ethertype == 34915 || ClassObj_Info.Ethertype == 34916){
+				json_object_object_add(classObj, "SourceIP", json_object_new_string(""));				
+				json_object_object_add(classObj, "SourceMask", json_object_new_string(""));				
+				json_object_object_add(classObj, "SourceIPExclude", json_object_new_boolean(false));				
+				json_object_object_add(classObj, "SourcePort", json_object_new_int(-1));
+				json_object_object_add(classObj, "SourcePortRangeMax", json_object_new_int(-1));				
+				json_object_object_add(classObj, "SourcePortExclude", json_object_new_boolean(false));							
+				json_object_object_add(classObj, "DestIP", json_object_new_string(""));
+				json_object_object_add(classObj, "DestMask", json_object_new_string(""));				
+				json_object_object_add(classObj, "DestIPExclude", json_object_new_boolean(false));				
+				json_object_object_add(classObj, "DestPort", json_object_new_int(-1));
+				json_object_object_add(classObj, "DestPortRangeMax", json_object_new_int(-1));				
+				json_object_object_add(classObj, "DestPortExclude", json_object_new_boolean(false));	
+				json_object_object_add(classObj, "X_ZYXEL_Service", json_object_new_string(""));
+				json_object_object_add(classObj, "X_ZYXEL_ServiceExclude", json_object_new_boolean(false));
+				json_object_object_add(classObj, "Protocol", json_object_new_int(-1));				
+				json_object_object_add(classObj, "ProtocolExclude", json_object_new_boolean(false));				
+				json_object_object_add(classObj, "SourceVendorClassID", json_object_new_string(""));
+				json_object_object_add(classObj, "SourceVendorClassIDExclude", json_object_new_boolean(false));				
+				json_object_object_add(classObj, "SourceClientID", json_object_new_string(""));	
+				json_object_object_add(classObj, "SourceClientIDType", json_object_new_string(""));
+				json_object_object_add(classObj, "SourceClientIDExclude", json_object_new_boolean(false));
+				json_object_object_add(classObj, "SourceUserClassID", json_object_new_string(""));				
+				json_object_object_add(classObj, "SourceUserClassIDExclude", json_object_new_boolean(false));				
+				json_object_object_add(classObj, "SourceVendorSpecificInfoEnterprise", json_object_new_int(0));
+				json_object_object_add(classObj, "SourceVendorSpecificInfo", json_object_new_string(""));				
+				json_object_object_add(classObj, "SourceVendorSpecificInfoExclude", json_object_new_boolean(false));	
+				json_object_object_add(classObj, "IPLengthMin", json_object_new_int(0));
+				json_object_object_add(classObj, "IPLengthMax", json_object_new_int(0));
+				json_object_object_add(classObj, "IPLengthExclude", json_object_new_boolean(false));
+				json_object_object_add(classObj, "DSCPCheck", json_object_new_int(-1));				
+				json_object_object_add(classObj, "DSCPExclude", json_object_new_boolean(false));
+				json_object_object_add(classObj, "TCPACK", json_object_new_boolean(false));				
+				json_object_object_add(classObj, "TCPACKExclude", json_object_new_boolean(false));	
+			}
 			
-			prepare_qos_classObj(classObj, QosClass_Info->ClassObj_Info);
-			zcfgFeObjJsonBlockedSet(RDM_OID_QOS_CLS, &classIid, classObj, NULL);
-			zcfgFeJsonObjFree(classObj);
-			break;
-		}
-		zcfgFeJsonObjFree(classObj);
-	}
-	
-	// update the order in RDM_OID_QOS_CLS
-#if(QOS_DAL_DEBUG == 1)			
-	printf("update Order\n");
-#endif
-	updateQosClassInfo();
+			//IP(2048)
+			if(ClassObj_Info.Ethertype == 2048){
+				ethertype = json_object_get_int(json_object_object_get(classObj, "Ethertype"));
+				if(ClassObj_Info.Ethertype != ethertype){
+					//original type is IPv6
+					if(ethertype == 34525){
+						json_object_object_add(classObj, "SourceIP", json_object_new_string(""));				
+						json_object_object_add(classObj, "SourceMask", json_object_new_string(""));	
+						json_object_object_add(classObj, "DestIP", json_object_new_string(""));
+						json_object_object_add(classObj, "DestMask", json_object_new_string(""));
+						//check the value is correct
+						if(json_object_object_get(Jobj, "SourceIPEnable") == NULL){
+							printf("Type is IP, need to enter SourceIPEnable.\n");					
+							zcfgFeJsonObjFree(classObj);
+							return ZCFG_INVALID_PARAM_VALUE;
+						}
+						if(json_object_object_get(Jobj, "DestIPEnable") == NULL){
+							printf("Type is IP, need to enter DestIPEnable.\n");					
+							zcfgFeJsonObjFree(classObj);
+							return ZCFG_INVALID_PARAM_VALUE;
+						}
+					}
+					else{
+						//original type is 802.1Q
+						if(ethertype == 33024){
+							json_object_object_add(classObj, "EthernetPriorityCheck", json_object_new_int(-1));				
+							json_object_object_add(classObj, "EthernetPriorityExclude", json_object_new_boolean(false));	
+							json_object_object_add(classObj, "VLANIDCheck", json_object_new_int(-1));
+							json_object_object_add(classObj, "VLANIDExclude", json_object_new_boolean(false));	
+						}
+						//check the value is correct
+						if(json_object_object_get(Jobj, "SourceIPEnable") == NULL){
+							printf("Type is IP, need to enter SourceIPEnable.\n");					
+							zcfgFeJsonObjFree(classObj);					
+							return ZCFG_INVALID_PARAM_VALUE;
+						}
+						if(json_object_object_get(Jobj, "DestIPEnable") == NULL){
+							printf("Type is IP, need to enter DestIPEnable.\n");					
+							zcfgFeJsonObjFree(classObj);					
+							return ZCFG_INVALID_PARAM_VALUE;
+						}
+						if(json_object_object_get(Jobj, "ServiceEnable") == NULL){
+							printf("Type is IP, need to enter ServiceEnable.\n");					
+							zcfgFeJsonObjFree(classObj);					
+							return ZCFG_INVALID_PARAM_VALUE;
+						}
+						if(json_object_object_get(Jobj, "ProtocolEnable") == NULL){
+							printf("Type is IP, need to enter ProtocolEnable.\n");					
+							zcfgFeJsonObjFree(classObj);					
+							return ZCFG_INVALID_PARAM_VALUE;
+						}
+						if(json_object_object_get(Jobj, "DhcpEnable") == NULL){
+							printf("Type is IP, need to enter DhcpEnable.\n");					
+							zcfgFeJsonObjFree(classObj);					
+							return ZCFG_INVALID_PARAM_VALUE;
+						}
+						if(json_object_object_get(Jobj, "IPLengthEnable") == NULL){
+							printf("Type is IP, need to enter IPLengthEnable.\n");					
+							zcfgFeJsonObjFree(classObj);					
+							return ZCFG_INVALID_PARAM_VALUE;
+						}
+						if(json_object_object_get(Jobj, "DSCPCheckEnable") == NULL){
+							printf("Type is IP, need to enter DSCPCheckEnable.\n");					
+							zcfgFeJsonObjFree(classObj);					
+							return ZCFG_INVALID_PARAM_VALUE;
+						}
+					}
+				}
+			}
 	
-	freeQosClassBasicInfo(QosClass_Info);
-	free(QosClass_Info);
+			//IPv6(34525)
+			if(ClassObj_Info.Ethertype == 34525){
+				ethertype = json_object_get_string(json_object_object_get(classObj, "Ethertype"));
+				if(ClassObj_Info.Ethertype != ethertype){
+					//original type is IP
+					if(ethertype == 2048){
+						json_object_object_add(classObj, "SourceIP", json_object_new_string(""));				
+						json_object_object_add(classObj, "SourceMask", json_object_new_string(""));	
+						json_object_object_add(classObj, "DestIP", json_object_new_string(""));
+						json_object_object_add(classObj, "DestMask", json_object_new_string(""));
+						//check the value is correct
+						if(json_object_object_get(Jobj, "SourceIPEnable") == NULL){
+							printf("Type is IP, need to enter SourceIPEnable.\n");					
+							zcfgFeJsonObjFree(classObj);					
+							return ZCFG_INVALID_PARAM_VALUE;
+						}
+						if(json_object_object_get(Jobj, "DestIPEnable") == NULL){
+							printf("Type is IP, need to enter DestIPEnable.\n");					
+							zcfgFeJsonObjFree(classObj);					
+							return ZCFG_INVALID_PARAM_VALUE;
+						}
+					}
+					else{
+						//original type is 802.1Q
+						if(ethertype == 33024){
+							json_object_object_add(classObj, "EthernetPriorityCheck", json_object_new_int(-1));				
+							json_object_object_add(classObj, "EthernetPriorityExclude", json_object_new_boolean(false));	
+							json_object_object_add(classObj, "VLANIDCheck", json_object_new_int(-1));
+							json_object_object_add(classObj, "VLANIDExclude", json_object_new_boolean(false));	
+						}
+						//check the value is correct
+						if(json_object_object_get(Jobj, "SourceIPEnable") == NULL){
+							printf("Type is IPv6, need to enter SourceIPEnable.\n");					
+							zcfgFeJsonObjFree(classObj);					
+							return ZCFG_INVALID_PARAM_VALUE;
+						}
+						if(json_object_object_get(Jobj, "DestIPEnable") == NULL){
+							printf("Type is IPv6, need to enter DestIPEnable.\n");					
+							zcfgFeJsonObjFree(classObj);					
+							return ZCFG_INVALID_PARAM_VALUE;
+						}
+						if(json_object_object_get(Jobj, "ServiceEnable") == NULL){
+							printf("Type is IPv6, need to enter ServiceEnable.\n");					
+							zcfgFeJsonObjFree(classObj);					
+							return ZCFG_INVALID_PARAM_VALUE;
+						}
+						if(json_object_object_get(Jobj, "ProtocolEnable") == NULL){
+							printf("Type is IPv6, need to enter ProtocolEnable.\n");					
+							zcfgFeJsonObjFree(classObj);					
+							return ZCFG_INVALID_PARAM_VALUE;
+						}
+						if(json_object_object_get(Jobj, "IPLengthEnable") == NULL){
+							printf("Type is IPv6, need to enter IPLengthEnable.\n");					
+							zcfgFeJsonObjFree(classObj);					
+							return ZCFG_INVALID_PARAM_VALUE;
+						}
+						if(json_object_object_get(Jobj, "DSCPCheckEnable") == NULL){
+							printf("Type is IPv6, need to enter DSCPCheckEnable.\n");					
+							zcfgFeJsonObjFree(classObj);					
+							return ZCFG_INVALID_PARAM_VALUE;
+						}
+					}
+				}
+			}
 
-	return ret;
+			//802.1Q(33024)
+			if(ClassObj_Info.Ethertype == 33024){
+				ethertype = json_object_get_string(json_object_object_get(classObj, "Ethertype"));
+				if(ClassObj_Info.Ethertype != ethertype){
+					//original type is IP or IPv6
+					if(ethertype == 2048 || ethertype == 34525){
+						json_object_object_add(classObj, "SourceIP", json_object_new_string(""));				
+						json_object_object_add(classObj, "SourceMask", json_object_new_string(""));				
+						json_object_object_add(classObj, "SourceIPExclude", json_object_new_boolean(false));				
+						json_object_object_add(classObj, "SourcePort", json_object_new_int(-1));
+						json_object_object_add(classObj, "SourcePortRangeMax", json_object_new_int(-1));				
+						json_object_object_add(classObj, "SourcePortExclude", json_object_new_boolean(false));							
+						json_object_object_add(classObj, "DestIP", json_object_new_string(""));
+						json_object_object_add(classObj, "DestMask", json_object_new_string(""));				
+						json_object_object_add(classObj, "DestIPExclude", json_object_new_boolean(false));				
+						json_object_object_add(classObj, "DestPort", json_object_new_int(-1));
+						json_object_object_add(classObj, "DestPortRangeMax", json_object_new_int(-1));				
+						json_object_object_add(classObj, "DestPortExclude", json_object_new_boolean(false));	
+						json_object_object_add(classObj, "X_ZYXEL_Service", json_object_new_string(""));
+						json_object_object_add(classObj, "X_ZYXEL_ServiceExclude", json_object_new_boolean(false));
+						json_object_object_add(classObj, "Protocol", json_object_new_int(-1));				
+						json_object_object_add(classObj, "ProtocolExclude", json_object_new_boolean(false));
+						json_object_object_add(classObj, "IPLengthMin", json_object_new_int(0));
+						json_object_object_add(classObj, "IPLengthMax", json_object_new_int(0));
+						json_object_object_add(classObj, "IPLengthExclude", json_object_new_boolean(false));
+						json_object_object_add(classObj, "DSCPCheck", json_object_new_int(-1));				
+						json_object_object_add(classObj, "DSCPExclude", json_object_new_boolean(false));
+						json_object_object_add(classObj, "TCPACK", json_object_new_boolean(false));				
+						json_object_object_add(classObj, "TCPACKExclude", json_object_new_boolean(false));
+						if(ethertype == 2048){
+							json_object_object_add(classObj, "SourceVendorClassID", json_object_new_string(""));
+							json_object_object_add(classObj, "SourceVendorClassIDExclude", json_object_new_boolean(false));				
+							json_object_object_add(classObj, "SourceClientID", json_object_new_string(""));	
+							json_object_object_add(classObj, "SourceClientIDType", json_object_new_string(""));
+							json_object_object_add(classObj, "SourceClientIDExclude", json_object_new_boolean(false));
+							json_object_object_add(classObj, "SourceUserClassID", json_object_new_string(""));				
+							json_object_object_add(classObj, "SourceUserClassIDExclude", json_object_new_boolean(false));				
+							json_object_object_add(classObj, "SourceVendorSpecificInfoEnterprise", json_object_new_int(0));
+							json_object_object_add(classObj, "SourceVendorSpecificInfo", json_object_new_string(""));				
+							json_object_object_add(classObj, "SourceVendorSpecificInfoExclude", json_object_new_boolean(false));
+						}
+					}
+					//check the value is correct
+					if(json_object_object_get(Jobj, "EthernetPriorityEnable") == NULL){
+						printf("Type is 802.1Q, need to enter EthernetPriorityEnable.\n");					
+						zcfgFeJsonObjFree(classObj);					
+						return ZCFG_INVALID_PARAM_VALUE;
+					}
+					if(json_object_object_get(Jobj, "VLANIDCheckEnable") == NULL){
+						printf("Type is 802.1Q, need to enter VLANIDCheckEnable.\n");					
+						zcfgFeJsonObjFree(classObj);					
+						return ZCFG_INVALID_PARAM_VALUE;
+					}
+				}
+			}
+		}
+		// update RDM_OID_QOS_QUE - TrafficClasses
+		if(json_object_object_get(Jobj, "idx") == NULL){
+			update_traffic_class_in_qos_queue(classIid.idx[0], ClassObj_Info.Queue, ClassObj_Info.defaultQ, classIid, action);
+		}
+		else{
+			update_traffic_class_in_qos_queue(ClassObj_Info.Index, ClassObj_Info.Queue, ClassObj_Info.defaultQ, classIid, action);
+		}
+		prepare_qos_classObj(Jobj, classObj,&ClassObj_Info);
+		zcfgFeObjJsonBlockedSet(RDM_OID_QOS_CLS, &classIid, classObj, NULL);
+		zcfgFeJsonObjFree(classObj);			
+		return ret;
+	}
+	else{							
+		printf("%s():(ERROR) zcfgFeObjJsonGetWithoutUpdate get Qos Class fail oid(%d)\n ",__FUNCTION__,RDM_OID_QOS_CLS);		
+		return ZCFG_INTERNAL_ERROR;				
+	}
 }
 
 zcfgRet_t zcfgFeDalQosClassDelete(struct json_object *Jobj, char *replyMsg) {
@@ -569,63 +1498,50 @@
 	json_object *classObj = NULL;
 	objIndex_t classIid = {0};
 
-#if(QOS_DAL_DEBUG == 1)			
-	printf("zcfgFeDalQosClassDelete\n");
-#endif
-	
-	updateQosClassInfo();
 	getQosClassDelKey(Jobj, &QosClassDel_Info);
-	
-	
-	
-	
+	zcfg_offset_t oid;			
+	oid = RDM_OID_QOS_CLS;	
+	if(json_object_object_get(Jobj, "idx")== NULL){
+		ret = convertIndextoIid(QosClassDel_Info.Index, &classIid, oid, NULL, NULL, replyMsg);			
+		if(ret != ZCFG_SUCCESS)						
+			return ret;		
+	}
+	else{
+		classIid.level = 1;
+		classIid.idx[0] = QosClassDel_Info.Index;
+	}
 	// update RDM_OID_QOS_QUE - TrafficClasses
-	IID_INIT(classIid);
-	update_traffic_class_in_qos_queue(QosClassDel_Info.idx, -1, false, classIid, action);
+	update_traffic_class_in_qos_queue(QosClassDel_Info.Index, -1, false, classIid, action);
 	
-	
-	
-	
-	// update the order in RDM_OID_QOS_CLS
-#if(QOS_DAL_DEBUG == 1)			
-	printf("update Order\n");
-#endif
-	
-	
-
-	IID_INIT(classIid);
-	while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_QOS_CLS, &classIid, &classObj) == ZCFG_SUCCESS) {
-		if(classIid.idx[0] == QosClassDel_Info.idx) {
-			zcfgFeObjJsonDel(RDM_OID_QOS_CLS, &classIid, NULL);
-			zcfgFeJsonObjFree(classObj);
-			break;
-		}
+	if(zcfgFeObjJsonGetWithoutUpdate(RDM_OID_QOS_CLS, &classIid, &classObj) == ZCFG_SUCCESS) {			
+		zcfgFeObjJsonDel(RDM_OID_QOS_CLS, &classIid, NULL);
 		zcfgFeJsonObjFree(classObj);
+		return ret;	
+	}
+	else{							
+		printf("%s():(ERROR) zcfgFeObjJsonGetWithoutUpdate get Qos Class fail oid(%d)\n ",__FUNCTION__,RDM_OID_QOS_CLS);							
+		return ZCFG_INTERNAL_ERROR;				
 	}
-	updateQosClassInfo();
-	return ret;
 }
 
 zcfgRet_t zcfgFeDalQosClass(const char *method, struct json_object *Jobj, struct json_object *Jarray, char *replyMsg) {
 	zcfgRet_t ret = ZCFG_SUCCESS;
 
-	t1 = time(NULL);
-	
 	if(!strcmp(method, "POST")) {
-		ret = zcfgFeDalQosClassAdd(Jobj, NULL);
+		ret = zcfgFeDalQosClassAdd(Jobj, replyMsg);
 	}
 	else if(!strcmp(method, "PUT")) {
-		ret = zcfgFeDalQosClassEdit(Jobj, NULL);
+		ret = zcfgFeDalQosClassEdit(Jobj, replyMsg);
 	}
 	else if(!strcmp(method, "DELETE")) {
-		ret = zcfgFeDalQosClassDelete(Jobj, NULL);
+		ret = zcfgFeDalQosClassDelete(Jobj, replyMsg);
+	}
+	else if(!strcmp(method, "GET")) {
+		ret = zcfgFeDalQosClassGet(Jobj, Jarray, replyMsg);
 	}
 	else {
 		printf("Unknown method:%s\n", method);
 	}
 
-	t2 = time(NULL);
-    printf("zcfgFeDalQosClass() Total time=%d seconds ret=%d\n", (int) difftime(t2, t1), ret);
-
 	return ret;
 }
\ No newline at end of file
Index: libzcfg_fe_dal-1.0/network/qos/zcfg_fe_QosQueue.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/network/qos/zcfg_fe_QosQueue.c	2017-08-08 11:18:27.181690103 +0800
+++ libzcfg_fe_dal-1.0/network/qos/zcfg_fe_QosQueue.c	2017-08-08 11:20:55.965526600 +0800
@@ -161,7 +161,6 @@
 			}
 			zcfgFeJsonObjFree(classObj);
 		}
-		updateQosClassInfo();
 		TrafficClasses_single_str = strtok_r(rest_str, ",", &rest_str);
 	}
 	return;
Index: libzcfg_fe_dal-1.0/zcfg_fe_dal.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/zcfg_fe_dal.c	2017-08-08 11:18:27.469690104 +0800
+++ libzcfg_fe_dal-1.0/zcfg_fe_dal.c	2017-08-08 11:20:29.537526600 +0800
@@ -215,6 +215,7 @@
 extern void zcfgFeDalShowQosShaper(struct json_object *Jarray);
 extern void zcfgFeDalShowQosQueue(struct json_object *Jarray);
 extern void zcfgFeDalShowQosPolicer(struct json_object *Jarray);
+extern void zcfgFeDalShowQosClass(struct json_object *Jarray);
 extern void zcfgFeDalShowWwanBackup(struct json_object *Jarray);
 extern void zcfgFeDalShowMailNotification(struct json_object *Jarray);
 extern void zcfgFeDalShowLogSetting(struct json_object *Jarray);
@@ -259,7 +260,7 @@
 {"macfilter",		MAC_Filter_param,	zcfgFeDalMACFilter,		zcfgFeDalShowMACFilter,		"get|add|edit|delete",	"MAC Filter"},//MAC_Filter
 {"qos",				QosGeneral_param,	zcfgFeDalQosGeneral,	zcfgFeDalShowQosGeneral,	"get|edit",	"Qos"},//QoS
 {"qos_queue",		QosQueue_param,		zcfgFeDalQosQueue,		zcfgFeDalShowQosQueue,		"get|add|edit|delete",	"Qos"},//QoS
-{"QOS_CLASS",		QosClass_param,		zcfgFeDalQosClass,		NULL,						"add|edit|delete",	""},//QoS
+{"qos_class",		QosClass_param,		zcfgFeDalQosClass,		zcfgFeDalShowQosClass,	    "get|add|edit|delete",	"Qos"},//QoS
 {"qos_shaper",		QosShaper_param,	zcfgFeDalQosShaper,		zcfgFeDalShowQosShaper,		"get|add|edit|delete",	"Qos"},//QoS
 {"qos_policer",		QosPolicer_param,	zcfgFeDalQosPolicer,	zcfgFeDalShowQosPolicer,	"get|add|edit|delete",	"Qos"},//QoS
 {"wifi_macfilter",	WIFI_MACFILTER_param,	zcfgFeDalWifiMACFilter,zcfgFeDalShowWifiMACFilter,"get|add|edit|delete",	"Wireless"},//
@@ -1032,6 +1033,34 @@
 	return ZCFG_SUCCESS;
 }
 
+
+zcfgRet_t getRouteIntfList(struct json_object **Jarray){
+	objIndex_t intfIid;	
+	struct json_object *obj = NULL;
+	struct json_object *intfObj = NULL;
+	const char *connection = NULL;
+	const char *name = NULL;
+	const char *type = NULL;
+	int count = 1;
+	*Jarray = json_object_new_array();
+	IID_INIT(intfIid);	
+	while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_IP_IFACE, &intfIid, &intfObj) == ZCFG_SUCCESS){		
+		obj = json_object_new_object();
+		connection = json_object_get_string(json_object_object_get(intfObj, "X_ZYXEL_ConnectionType"));
+		type = json_object_get_string(json_object_object_get(intfObj, "Name"));
+		name = json_object_get_string(json_object_object_get(intfObj, "X_ZYXEL_SrvName"));
+		json_object_object_add(obj, "Name", json_object_new_string(name));
+		json_object_object_add(obj, "ConnectionType", json_object_new_string(connection));
+		json_object_object_add(obj, "Type", json_object_new_string(type));
+		json_object_object_add(obj, "Number", json_object_new_int(count));
+		json_object_array_add(*Jarray, obj);
+		
+		json_object_put(intfObj);
+		count++;
+	}	
+	return ZCFG_SUCCESS;
+}
+
 zcfgRet_t getClassList(struct json_object **Jarray){
 	objIndex_t classIid;	
 	struct json_object *obj = NULL;
@@ -1053,6 +1082,30 @@
 	return ZCFG_SUCCESS;
 }
 
+zcfgRet_t getQueueList(struct json_object **Jarray){
+	objIndex_t queueIid;	
+	struct json_object *obj = NULL;
+	struct json_object *queueObj = NULL;
+	const char *trafficClasses = NULL;
+	const char *name = NULL;
+	int queueIdx = 0;
+	*Jarray = json_object_new_array();
+	IID_INIT(queueIid);	
+	while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_QOS_QUE, &queueIid, &queueObj) == ZCFG_SUCCESS){
+		obj = json_object_new_object();
+		trafficClasses = json_object_get_string(json_object_object_get(queueObj, "TrafficClasses"));
+		name = json_object_get_string(json_object_object_get(queueObj, "X_ZYXEL_Name"));
+		queueIdx = queueIid.idx[0];
+		json_object_object_add(obj, "Name", json_object_new_string(name));
+		json_object_object_add(obj, "TrafficClasses", json_object_new_string(trafficClasses));
+		json_object_object_add(obj, "QueueIdx", json_object_new_int(queueIdx));
+		json_object_array_add(*Jarray, obj);
+		
+		json_object_put(queueObj);			
+	}	
+	return ZCFG_SUCCESS;
+}
+
 
 zcfgRet_t getVoipMultiObj(struct json_object **VoipMultiObj){
 	objIndex_t voipIid;
@@ -1390,6 +1443,67 @@
 	return true;
 }
 
+int getLeftMostZeroBitPos(num) {   
+	int i = 0;   
+	int numArr[8] = {128, 64, 32, 16, 8, 4, 2, 1};   
+	for ( i = 0; i < 8; i++ ){
+		if((num & numArr[i])== 0)
+			return i;
+	}
+	return 8;
+}
+
+int getRightMostOneBitPos(num) {   
+	int i = 0;   
+	int numArr[8] = {1, 2, 4, 8, 16, 32, 64, 128};  
+	int c = 0;
+	bool found = false;
+	for ( i = 0; i < 8; i++ ){  
+		c = (num & numArr[i]);
+		if(c>>i)
+			return (8 - i - 1); 
+	}
+	return -1;
+}
+
+
+bool validMacMask(const char *mask) { 
+	char buff[32] = {0};
+	int zeros = 0;   
+	int zeroBitPos = 0, oneBitPos = 0;   
+	bool zeroBitExisted = false;
+	char *macstr = NULL, *tmp = NULL;
+	int count = 0,num = 0;
+	char c, d;
+	strcpy(buff,mask);
+	macstr = strtok_r(buff, ":", &tmp);	
+	while(macstr != NULL){
+		if(!strcmp(macstr,"00"))
+			zeros++;
+		c = *macstr; 
+		d = *(macstr+1); 
+		if(!isxdigit(c) || !isxdigit(d))
+			return false;
+		sscanf(macstr,"%x",&num);
+		if (zeroBitExisted == true && num != 0)         
+			return false;
+		zeroBitPos = getLeftMostZeroBitPos(num);	  
+		oneBitPos = getRightMostOneBitPos(num);	 
+		if (zeroBitPos < oneBitPos)		 
+			return false;		
+		if (zeroBitPos < 8)		  
+			zeroBitExisted = true;   
+		macstr = strtok_r(tmp, ":", &tmp);
+		count++;
+	}	
+	if(count != 6)
+		return false;
+	if(zeros == 6)
+		return false;
+	return true;
+}
+
+
 bool validateIPv4mask(const char *submask){
 	unsigned char oneFound = 0;
 	unsigned long int netmask = inet_addr(submask);
Index: libzcfg_fe_dal-1.0/zcfg_fe_dal_common.h
===================================================================
--- libzcfg_fe_dal-1.0.orig/zcfg_fe_dal_common.h	2017-08-08 11:18:27.441690104 +0800
+++ libzcfg_fe_dal-1.0/zcfg_fe_dal_common.h	2017-08-08 11:20:00.944526600 +0800
@@ -109,6 +109,9 @@
 	dalType_emailAddr,					//call validateEmailAddr to check email is correct or not
 	dalType_emailList,					//list Email account and check email validation
 	dalType_ClassList,
+	dalType_ClassIntf,
+	dalType_RouteIntf,
+	dalType_QueueList,
 	dalType_MacAddr,
 	dalType_MacAddrHyphen,
 	dalType_MacAddrList,
