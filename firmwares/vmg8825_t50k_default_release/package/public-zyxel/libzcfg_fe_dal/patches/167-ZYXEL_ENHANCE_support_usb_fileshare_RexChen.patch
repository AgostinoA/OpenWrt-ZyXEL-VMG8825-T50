Index: libzcfg_fe_dal-1.0/network/usbService/zcfg_fe_dal_usb_filesharing.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/network/usbService/zcfg_fe_dal_usb_filesharing.c	2017-05-02 13:21:50.561263937 +0800
+++ libzcfg_fe_dal-1.0/network/usbService/zcfg_fe_dal_usb_filesharing.c	2017-05-02 13:22:56.532891300 +0800
@@ -16,492 +16,185 @@
 //#define JSON_OBJ_COPY(json_object) json_tokener_parse(json_object_to_json_string(json_object))
 
 dal_param_t USB_FILESHARING_param[]={
-	//Group Account
-	{"userAccountEnable",		dalType_boolean,	0,	0,	NULL},
-	{"Username",		dalType_string,	0,	0,	NULL},
-	{"Password",		dalType_string,	0,	0,	NULL},
-	{"Privilege",		dalType_string,	0,	0,	NULL},
+	{"Index",				dalType_int,		0,	0,	NULL,	NULL,	NULL},
 	//SAMBA
-	{"fsEnable",		dalType_boolean,	0,	0,	NULL},
-	//SAMBA Dir
-	{"X_ZYXEL_RootPath",		dalType_string,	0,	0,	NULL},
-	{"X_ZYXEL_Hostname",		dalType_string,	0,	0,	NULL},
-	{"X_ZYXEL_FolderName",		dalType_string,	0,	0,	NULL},
-	{"X_ZYXEL_Path",		dalType_string,	0,	0,	NULL},
-	{"X_ZYXEL_Comment",		dalType_string,	0,	0,	NULL},
-	{"X_ZYXEL_ValidUsers",		dalType_string,	0,	0,	NULL},
-	{"X_ZYXEL_Public",		dalType_boolean,	0,	0,	NULL},	
-	{"X_ZYXEL_Browseable",		dalType_boolean,	0,	0,	NULL},
+	{"FileShare",			dalType_boolean,	0,	0,	NULL,	NULL,	NULL},
+	{"Browseable",	dalType_boolean,	0,	0,	NULL,	NULL,	NULL},
 	{NULL,		0,	0,	0,	NULL},
 };
-
-struct json_object *sambaObj = NULL;
-struct json_object *sambaDirObj = NULL;
-struct json_object *fsAccountObj = NULL;
-
-objIndex_t sambaIid = {0};
-objIndex_t sambaDirIid = {0};
-objIndex_t fsAccountIid = {0};
-
-bool fsEnable;
-int fsAccountLen;
-int smabaDirLen;
-int userAccountEnable;
-const char* Password;
-const char* Privilege;
-const char* Username;
-
-const char* X_ZYXEL_RootPath;
-const char* X_ZYXEL_Hostname;
-const char* X_ZYXEL_FolderName;
-const char* X_ZYXEL_Path;
-const char* X_ZYXEL_Comment;
-bool X_ZYXEL_Public;
-const char* X_ZYXEL_ValidUsers;
-bool X_ZYXEL_Browseable;
-
-bool userObjExecute = true;
-bool sambaObjExecute = true;
-
-time_t t1, t2;
-
-zcfgRet_t setAllFsObjects(struct json_object *Jobj){
-	zcfgRet_t ret = ZCFG_SUCCESS;		
-	
-	if(sambaObj) 
-		zcfgFeObjJsonSet(RDM_OID_ZY_SAMBA, &sambaIid, sambaObj, NULL);
-	
-	if(sambaDirObj && sambaObjExecute)
-		zcfgFeObjJsonSet(RDM_OID_ZY_SAMBA_DIR, &sambaDirIid, sambaDirObj, NULL);
-	if(fsAccountObj && userObjExecute)
-		zcfgFeObjJsonSet(RDM_OID_ZY_LOG_CFG_GP_ACCOUNT, &fsAccountIid, fsAccountObj, NULL);
-	
-	return ret;
-}
-
-zcfgRet_t freeAllFsObjects(){
-	zcfgRet_t ret = ZCFG_SUCCESS;
-		
-	if(sambaObj) json_object_put(sambaObj); 
-	if(sambaDirObj && sambaObjExecute) json_object_put(sambaDirObj);
-	if(fsAccountObj && userObjExecute) json_object_put(fsAccountObj);
-		
-	return ret;
-}
-
-
-void getBasicFsInfo(struct json_object *Jobj){
-	
-	userAccountEnable = json_object_get_int(json_object_object_get(Jobj, "userAccountEnable"));
-	Password = json_object_get_string(json_object_object_get(Jobj, "Password"));
-	Privilege = json_object_get_string(json_object_object_get(Jobj, "Privilege"));
-	Username = json_object_get_string(json_object_object_get(Jobj, "Username"));	
-	//userAccountEnable = json_object_get_boolean(json_object_object_get(Jobj, "userAccountEnable"));
-	fsEnable = json_object_get_boolean(json_object_object_get(Jobj, "fsEnable"));
-	X_ZYXEL_Browseable = json_object_get_boolean(json_object_object_get(Jobj, "X_ZYXEL_Browseable")); 
-	X_ZYXEL_RootPath = json_object_get_string(json_object_object_get(Jobj, "X_ZYXEL_RootPath"));
-	X_ZYXEL_Hostname = json_object_get_string(json_object_object_get(Jobj, "X_ZYXEL_Hostname"));
-	X_ZYXEL_FolderName = json_object_get_string(json_object_object_get(Jobj, "X_ZYXEL_FolderName"));
-	X_ZYXEL_Path = json_object_get_string(json_object_object_get(Jobj, "X_ZYXEL_Path"));
-	X_ZYXEL_Comment = json_object_get_string(json_object_object_get(Jobj, "X_ZYXEL_Comment"));
-	X_ZYXEL_Public = json_object_get_boolean(json_object_object_get(Jobj, "X_ZYXEL_Public")); 
-	X_ZYXEL_ValidUsers = json_object_get_string(json_object_object_get(Jobj, "X_ZYXEL_ValidUsers"));
+void zcfgFeDalShowUsbFilesharing(struct json_object *Jarray){
+	struct json_object *obj = NULL;
+	struct json_object *servconfobj = NULL;
+	struct json_object *accountobj = NULL, *accounttmpobj = NULL;
+	struct json_object *sambaobj = NULL, *sambatmpobj = NULL;
+	int len_accountobj = 0, len_sambaobj = 0;
+	int num_accountobj, num_sambaobj;
+	if(json_object_get_type(Jarray) != json_type_array){
+		printf("wrong Jobj format!\n");
 	return;
 }
-
-void initGlobalFsObjects(){
-	
-	sambaObj = NULL;
-	sambaDirObj = NULL;
-	fsAccountObj = NULL;
-	
-	IID_INIT(sambaIid);
-	IID_INIT(sambaDirIid);
-	IID_INIT(fsAccountIid);
-	
+	obj = json_object_array_get_idx(Jarray, 0);
+	servconfobj = json_object_object_get(obj, "Service Conf");
+	accountobj = json_object_object_get(obj, "Account");
+	sambaobj = json_object_object_get(obj, "Samba");
+	len_accountobj = json_object_array_length(accountobj);
+	len_sambaobj = json_object_array_length(sambaobj);
+	
+	printf("Server Configuration: \n");
+	printf("File Sharing Services:  %s \n",json_object_get_string(json_object_object_get(servconfobj, "File Sharing Services")));
+	
+	if(len_sambaobj != 0){
+		printf("\nShare Directory List: \n");
+		printf("%-10s %-10s %-35s %-50s %-10s \n", "Index", "Status", "Share Name", "Share Path", "Share Description");
+		for(num_sambaobj=0;num_sambaobj<len_sambaobj;num_sambaobj++){
+			sambatmpobj = json_object_array_get_idx(sambaobj, num_sambaobj);
+			printf("%-10s %-10s %-35s %-50s %-10s \n",
+				json_object_get_string(json_object_object_get(sambatmpobj, "Index")),
+				json_object_get_string(json_object_object_get(sambatmpobj, "Status")),
+				json_object_get_string(json_object_object_get(sambatmpobj, "Share Name")),
+				json_object_get_string(json_object_object_get(sambatmpobj, "Share Path")),
+				json_object_get_string(json_object_object_get(sambatmpobj, "Share Description")));
 }
-
-void getUserAccountObjInfo(){
-		
-	while((zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_ZY_LOG_CFG_GP_ACCOUNT, &fsAccountIid, &fsAccountObj)) == ZCFG_SUCCESS){
-		if(!strcmp(json_object_get_string(json_object_object_get(fsAccountObj, "Privilege")), "samba"))
-			fsAccountLen = fsAccountIid.idx[1];
-		json_object_put(fsAccountObj);
-		userObjExecute = false;
 	}
 	
+	printf("\nAccount Management: \n");
+	printf("%-20s %-30s \n","Status","User Name");
+	for(num_accountobj=0;num_accountobj<len_accountobj;num_accountobj++){
+		accounttmpobj = json_object_array_get_idx(accountobj, num_accountobj);
+		printf("%-20s %-30s \n",
+			json_object_get_string(json_object_object_get(accounttmpobj, "Status")),
+			json_object_get_string(json_object_object_get(accounttmpobj, "Username")));
 }
-void getSambaDirObjInfo(){
-		
-	while((zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_ZY_SAMBA_DIR, &sambaDirIid, &sambaDirObj)) == ZCFG_SUCCESS){	
-		smabaDirLen = sambaDirIid.idx[0];
-		json_object_put(sambaDirObj);
-		sambaObjExecute = false;
-	}
-		
-}
-
-zcfgRet_t editSambaObjects(struct json_object *Jobj){
-	
-	zcfgRet_t ret = ZCFG_SUCCESS;
-	struct json_object *iidArray = NULL;
-	uint8_t iidIdx =0;
-		
-	iidArray = json_object_object_get(Jobj, "fsIid");
-	sambaIid.level = iidIdx;
-	for(iidIdx=0; iidIdx < 6; iidIdx++){
-		sambaIid.idx[iidIdx] = json_object_get_int( json_object_array_get_idx(iidArray, iidIdx));
-		if(sambaIid.idx[iidIdx] != 0)
-			sambaIid.level = iidIdx+1;
 	}
 		
-	if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_ZY_SAMBA, &sambaIid, &sambaObj)) != ZCFG_SUCCESS) {
-		return ret;
-	}
-	
-	json_object_object_add(sambaObj, "Enable", json_object_new_boolean(fsEnable));
-	
-	return ret;
-}
-
-zcfgRet_t editSambaDirObject(struct json_object *Jobj){
+zcfgRet_t zcfgFeDalUsbFilesharingEdit(struct json_object *Jobj, char *replyMsg){
 	zcfgRet_t ret = ZCFG_SUCCESS;
-	struct json_object *iidArray = NULL;
-	struct json_object *browseableArray = NULL;
-	int browseableEnble;
-		
-	uint8_t iidIdx =0;
-	
-	IID_INIT(sambaDirIid);	
-	iidArray = json_object_object_get(Jobj, "fsShareDirIid");
-	browseableArray = json_object_object_get(Jobj, "X_ZYXEL_Browseable");
-	
-	for(iidIdx=0; iidIdx < smabaDirLen; iidIdx++){
-		sambaDirIid.idx[0] = json_object_get_int( json_object_array_get_idx(iidArray, iidIdx));
-		//sambaDirIid.idx[1] =sambaDirIid.idx[1] -1;
-		if(sambaDirIid.idx[0] == NULL)
-			return ret;
-		sambaDirIid.level = 1;
-		
-		if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_ZY_SAMBA_DIR, &sambaDirIid, &sambaDirObj)) != ZCFG_SUCCESS) {
-			return ret;
-		}
-		browseableEnble = json_object_get_int( json_object_array_get_idx(browseableArray, iidIdx));
-		if (browseableEnble)
-			json_object_object_add(sambaDirObj, "X_ZYXEL_Browseable", json_object_new_boolean(true));
-		else
-			json_object_object_add(sambaDirObj, "X_ZYXEL_Browseable", json_object_new_boolean(false));
-		
-		if((ret = zcfgFeObjJsonSet(RDM_OID_ZY_SAMBA_DIR, &sambaDirIid, sambaDirObj, NULL)) != ZCFG_SUCCESS)
-		{
-			return ret;
-		}
-		json_object_put(sambaDirObj);
-		sambaObjExecute = false;
-	
+	struct json_object *sambaObj = NULL;
+	struct json_object *sambadirObj = NULL;
+	objIndex_t sambaIid = {0};
+	objIndex_t sambadirIid = {0};
+	bool fileshare_enable = false; 
+	bool browseable = false;
+	struct json_object *fileshare_idxarray = NULL;
+	struct json_object *browseable_array = NULL;
+	int len = 0, i;
+	printf("%s \n",json_object_to_json_string(Jobj));
+	if(json_object_object_get(Jobj, "FileShare")){
+		if(zcfgFeObjJsonGetWithoutUpdate(RDM_OID_ZY_SAMBA, &sambaIid, &sambaObj) == ZCFG_SUCCESS){
+			fileshare_enable = json_object_get_boolean(json_object_object_get(Jobj, "FileShare"));
+			json_object_object_add(sambaObj, "Enable", json_object_new_boolean(fileshare_enable));
+			zcfgFeObjJsonSet(RDM_OID_ZY_SAMBA, &sambaIid, sambaObj, NULL);
+			zcfgFeJsonObjFree(sambaObj);
+	}
+	}
+	if(json_object_object_get(Jobj, "fsShareDirIid")){	//for GUI edit
+		fileshare_idxarray = json_object_object_get(Jobj, "fsShareDirIid");
+		browseable_array = json_object_object_get(Jobj, "Browseable");
+		printf("browseable_array = %s \n",json_object_to_json_string(browseable_array));
+		len = json_object_array_length(fileshare_idxarray);
+		printf("len = %d \n",len);
+		for(i=0;i<len;i++){
+			IID_INIT(sambadirIid);
+			sambadirIid.level = 1;
+			sambadirIid.idx[0] = atoi(json_object_get_string(json_object_array_get_idx(fileshare_idxarray, i)));
+			printf("PPP = %s \n",json_object_array_get_idx(fileshare_idxarray, i));
+			if(zcfgFeObjJsonGet(RDM_OID_ZY_SAMBA_DIR, &sambadirIid, &sambadirObj) == ZCFG_SUCCESS){
+				browseable = atoi(json_object_get_string(json_object_array_get_idx(browseable_array, i)));
+				printf("browseable = %d \n", browseable);
+				json_object_object_add(sambadirObj, "X_ZYXEL_Browseable", json_object_new_boolean(browseable));
+				ret = zcfgFeObjJsonSet(RDM_OID_ZY_SAMBA_DIR, &sambadirIid, sambadirObj, NULL);
+				zcfgFeJsonObjFree(sambadirObj);
+}
+		}
+		}
+	else if(json_object_object_get(Jobj, "Index") || json_object_object_get(Jobj, "Browseable")){	//for dalcmd edit
+		if(!json_object_object_get(Jobj, "Index") || !json_object_object_get(Jobj, "Browseable")){
+			strcpy(replyMsg, "Index and Browseable are mandatory parameter if user want to enable/disable Share Directory List.");
+			return ZCFG_INVALID_PARAM_VALUE;
+		}
+		else {
+			sambadirIid.level = 1;
+			sambadirIid.idx[0] = json_object_get_int(json_object_object_get(Jobj, "Index"));
+			if(zcfgFeObjJsonGet(RDM_OID_ZY_SAMBA_DIR, &sambadirIid, &sambadirObj) == ZCFG_SUCCESS){
+				browseable = json_object_get_boolean(json_object_object_get(Jobj, "Browseable"));
+				json_object_object_add(sambadirObj, "X_ZYXEL_Browseable", json_object_new_boolean(browseable));
+				ret = zcfgFeObjJsonSet(RDM_OID_ZY_SAMBA_DIR, &sambadirIid, sambadirObj, NULL);
+				zcfgFeJsonObjFree(sambadirObj);
 	}
-	return ret;
 }
-
-zcfgRet_t editfsAccountObject(struct json_object *Jobj){
-
-	zcfgRet_t ret = ZCFG_SUCCESS;
-	struct json_object *iidArray = NULL;
-	struct json_object *userAcntEnbleArray = NULL;
-	int userAcntEnble;
-		
-	uint8_t iidIdx =0;
-	
-	IID_INIT(fsAccountIid);	
-	iidArray = json_object_object_get(Jobj, "userAccountIid");
-	userAcntEnbleArray = json_object_object_get(Jobj, "userAccountEnable");
-	//fsAccountIid.level = iidIdx;
-	for(iidIdx=0; iidIdx < fsAccountLen; iidIdx++){
-	
-		fsAccountIid.idx[1] = json_object_get_int( json_object_array_get_idx(iidArray, iidIdx));
-		//fsAccountIid.idx[1] =fsAccountIid.idx[1] -1;
-		if(fsAccountIid.idx[1] == NULL)
-			return ret;
-		fsAccountIid.level = 2;
-		fsAccountIid.idx[0] = 3;
-			
-		if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_ZY_LOG_CFG_GP_ACCOUNT, &fsAccountIid, &fsAccountObj)) != ZCFG_SUCCESS) {
-			return ret;
 		}
-		userAcntEnble = json_object_get_int( json_object_array_get_idx(userAcntEnbleArray, iidIdx));
-		
-		if (userAcntEnble)
-			json_object_object_add(fsAccountObj, "Enabled", json_object_new_boolean(true));
-		else
-			json_object_object_add(fsAccountObj, "Enabled", json_object_new_boolean(false));
-		
-		if((ret = zcfgFeObjJsonSet(RDM_OID_ZY_LOG_CFG_GP_ACCOUNT, &fsAccountIid, fsAccountObj, NULL)) != ZCFG_SUCCESS)
-		{
 			return ret;
 		}
-		json_object_put(fsAccountObj);
-		userObjExecute = false;
-	}
-	
-	return ret;
-}
-zcfgRet_t addFsAccountObject(struct json_object *Jobj){
-	
-	zcfgRet_t ret = ZCFG_SUCCESS;
-	struct json_object *iidArray = NULL;
-	uint8_t iidIdx =0;
-			
-	iidArray = json_object_object_get(Jobj, "userAccountIid");
-	for(iidIdx = 0; iidIdx < 6; iidIdx++){
-		fsAccountIid.idx[iidIdx] = json_object_get_int( json_object_array_get_idx(iidArray, iidIdx));
-		if(fsAccountIid.idx[iidIdx] != 0)
-			fsAccountIid.level = iidIdx+1;
-	}
-	zcfgFeObjJsonAdd(RDM_OID_ZY_LOG_CFG_GP_ACCOUNT, &fsAccountIid, NULL);
-	if((ret = zcfgFeObjJsonGet(RDM_OID_ZY_LOG_CFG_GP_ACCOUNT, &fsAccountIid, &fsAccountObj)) != ZCFG_SUCCESS) {
-		return ret;
-	}
-	
-	if (userAccountEnable)
-		json_object_object_add(fsAccountObj, "Enabled", json_object_new_boolean(true));
-	else
-		json_object_object_add(fsAccountObj, "Enabled", json_object_new_boolean(false));
-
-	json_object_object_add(fsAccountObj, "Password", json_object_new_string(Password));
-	json_object_object_add(fsAccountObj, "Username", json_object_new_string(Username));
-	json_object_object_add(fsAccountObj, "Privilege", json_object_new_string(Privilege));
-	//addAction = 1;
-	userObjExecute = true;
-	
-	return ret;
-}
-zcfgRet_t addFsDirObject(struct json_object *Jobj){
-	
-	zcfgRet_t ret = ZCFG_SUCCESS;
-
-	zcfgFeObjJsonAdd(RDM_OID_ZY_SAMBA_DIR, &sambaDirIid, NULL);
-	if((ret = zcfgFeObjJsonGet(RDM_OID_ZY_SAMBA_DIR, &sambaDirIid, &sambaDirObj)) != ZCFG_SUCCESS) {
-		return ret;
-	}
-	
-	if (X_ZYXEL_Browseable)
-		json_object_object_add(sambaDirObj, "X_ZYXEL_Browseable", json_object_new_boolean(true));
-	else
-		json_object_object_add(sambaDirObj, "X_ZYXEL_Browseable", json_object_new_boolean(false));
-	
-	if (X_ZYXEL_Public)
-		json_object_object_add(sambaDirObj, "X_ZYXEL_Public", json_object_new_boolean(true));
-	else
-		json_object_object_add(sambaDirObj, "X_ZYXEL_Public", json_object_new_boolean(false));
-
-	json_object_object_add(sambaDirObj, "X_ZYXEL_RootPath", json_object_new_string(X_ZYXEL_RootPath));
-	json_object_object_add(sambaDirObj, "X_ZYXEL_Hostname", json_object_new_string(X_ZYXEL_Hostname));
-	json_object_object_add(sambaDirObj, "X_ZYXEL_FolderName", json_object_new_string(X_ZYXEL_FolderName));
-	json_object_object_add(sambaDirObj, "X_ZYXEL_Path", json_object_new_string(X_ZYXEL_Path));
-	json_object_object_add(sambaDirObj, "X_ZYXEL_Comment", json_object_new_string(X_ZYXEL_Comment));
-	json_object_object_add(sambaDirObj, "X_ZYXEL_ValidUsers", json_object_new_string(X_ZYXEL_ValidUsers));
-
-	//addAction = 1;
-	sambaObjExecute = true;
-	
-	return ret;
-}
-zcfgRet_t zcfgFeDalUsbFilesharingDirEdit(struct json_object *Jobj){
-	
-	zcfgRet_t ret = ZCFG_SUCCESS;
-	struct json_object *iidArray = NULL;
-	uint8_t iidIdx =0;
-			
-	iidArray = json_object_object_get(Jobj, "shareDirIid");
-	for(iidIdx = 0; iidIdx < 6; iidIdx++){
-		sambaDirIid.idx[iidIdx] = json_object_get_int( json_object_array_get_idx(iidArray, iidIdx));
-		if(sambaDirIid.idx[iidIdx] != 0)
-			sambaDirIid.level = iidIdx+1;
-	}
-	
-	if((ret = zcfgFeObjJsonGet(RDM_OID_ZY_SAMBA_DIR, &sambaDirIid, &sambaDirObj)) != ZCFG_SUCCESS) {
-		return ret;
-	}
-	
-	if (X_ZYXEL_Browseable)
-		json_object_object_add(sambaDirObj, "X_ZYXEL_Browseable", json_object_new_boolean(true));
-	else
-		json_object_object_add(sambaDirObj, "X_ZYXEL_Browseable", json_object_new_boolean(false));
-	
-	if (X_ZYXEL_Public)
-		json_object_object_add(sambaDirObj, "X_ZYXEL_Public", json_object_new_boolean(true));
-	else
-		json_object_object_add(sambaDirObj, "X_ZYXEL_Public", json_object_new_boolean(false));
-
-	json_object_object_add(sambaDirObj, "X_ZYXEL_RootPath", json_object_new_string(X_ZYXEL_RootPath));
-	json_object_object_add(sambaDirObj, "X_ZYXEL_Hostname", json_object_new_string(X_ZYXEL_Hostname));
-	json_object_object_add(sambaDirObj, "X_ZYXEL_FolderName", json_object_new_string(X_ZYXEL_FolderName));
-	json_object_object_add(sambaDirObj, "X_ZYXEL_Path", json_object_new_string(X_ZYXEL_Path));
-	json_object_object_add(sambaDirObj, "X_ZYXEL_Comment", json_object_new_string(X_ZYXEL_Comment));
-	json_object_object_add(sambaDirObj, "X_ZYXEL_ValidUsers", json_object_new_string(X_ZYXEL_ValidUsers));
-
-	//addAction = 1;
-	sambaObjExecute = true;
-	
-	return ret;
-}
-zcfgRet_t zcfgFeDalUsbFilesharingAccountEdit(struct json_object *Jobj){
-	
-	zcfgRet_t ret = ZCFG_SUCCESS;
-	struct json_object *iidArray = NULL;
-	uint8_t iidIdx =0;
-			
-	iidArray = json_object_object_get(Jobj, "userAccountIid");
-	for(iidIdx = 0; iidIdx < 6; iidIdx++){
-		fsAccountIid.idx[iidIdx] = json_object_get_int( json_object_array_get_idx(iidArray, iidIdx));
-		if(fsAccountIid.idx[iidIdx] != 0)
-			fsAccountIid.level = iidIdx+1;
-	}
-	
-	if((ret = zcfgFeObjJsonGet(RDM_OID_ZY_LOG_CFG_GP_ACCOUNT, &fsAccountIid, &fsAccountObj)) != ZCFG_SUCCESS) {
-		return ret;
-	}
-	if (userAccountEnable)
-		json_object_object_add(fsAccountObj, "Enabled", json_object_new_boolean(true));
-	else
-		json_object_object_add(fsAccountObj, "Enabled", json_object_new_boolean(false));
-	
-	json_object_object_add(fsAccountObj, "Password", json_object_new_string(Password));
-	json_object_object_add(fsAccountObj, "Username", json_object_new_string(Username));
-	json_object_object_add(fsAccountObj, "Privilege", json_object_new_string(Privilege));
-	//addAction = 1;
-	userObjExecute = true;
-	
-	return ret;
-}
-zcfgRet_t zcfgFeDalUsbFilesharingAccountsEdit(struct json_object *Jobj){
-	zcfgRet_t ret = ZCFG_SUCCESS;
-	
-	getUserAccountObjInfo();
-	getSambaDirObjInfo();
-	
-	if((ret = editSambaObjects(Jobj)) != ZCFG_SUCCESS)
-		return ret;
-	
-	if((ret = editSambaDirObject(Jobj)) != ZCFG_SUCCESS)
-		return ret;
-		
-	if((ret = editfsAccountObject(Jobj)) != ZCFG_SUCCESS)
-		return ret;
 	
-	return ret;
-}
-zcfgRet_t zcfgFeDalUsbFilesharingEdit(struct json_object *Jobj, char *replyMsg){
-	zcfgRet_t ret = ZCFG_SUCCESS;
-	
-	initGlobalFsObjects();
-	getBasicFsInfo(Jobj);
-		
-	t2 = time(NULL);
-    printf("line=%d, time=%d\n", __LINE__, (int) difftime(t2, t1));
-	
-	if((Username != NULL) && (Password != NULL) && (Privilege !=NULL))
-	{
-		if((ret = zcfgFeDalUsbFilesharingAccountEdit(Jobj)) != ZCFG_SUCCESS)
-			goto dalUsbFs_edit_fail;
-	}
-	else if((X_ZYXEL_Hostname != NULL) && (X_ZYXEL_RootPath != NULL) && (X_ZYXEL_FolderName !=NULL))
-	{
-		if((ret = zcfgFeDalUsbFilesharingDirEdit(Jobj)) != ZCFG_SUCCESS)
-			goto dalUsbFs_edit_fail;
-	}
-	else
-	{
-		if((ret = zcfgFeDalUsbFilesharingAccountsEdit(Jobj)) != ZCFG_SUCCESS)
-			goto dalUsbFs_edit_fail;
-	}
-	
-	t2 = time(NULL);
-		
-	printf("before set, time=%d seconds\n", (int) difftime(t2, t1));
-		
-	setAllFsObjects(Jobj);
-
-dalUsbFs_edit_fail:
-	freeAllFsObjects();
-		
-	return ret;
-}
-zcfgRet_t zcfgFeDalUsbFilesharingAdd(struct json_object *Jobj, char *replyMsg)
-{
-	zcfgRet_t ret = ZCFG_SUCCESS;
-	
-	initGlobalFsObjects();
-	getBasicFsInfo(Jobj);
-		
-	t2 = time(NULL);
-    printf("line=%d, time=%d\n", __LINE__, (int) difftime(t2, t1));
-	if((X_ZYXEL_Hostname != NULL) && (X_ZYXEL_RootPath != NULL) && (X_ZYXEL_FolderName !=NULL))
-	{
-		if((ret = addFsDirObject(Jobj)) != ZCFG_SUCCESS)
-			goto dalUsbFs_add_fail;
-	}else if((ret = addFsAccountObject(Jobj)) != ZCFG_SUCCESS)
-		goto dalUsbFs_add_fail;
-	
-	t2 = time(NULL);
-		
-	printf("before set, time=%d seconds\n", (int) difftime(t2, t1));
-		
-	setAllFsObjects(Jobj);
-
-dalUsbFs_add_fail:
-	freeAllFsObjects();
-		
-	return ret;
-}
-zcfgRet_t zcfgFeDalUsbFilesharingDelete(struct json_object *Jobj, char *replyMsg)
-{
-	zcfgRet_t ret = ZCFG_SUCCESS;
-	struct json_object *iidArray = NULL;
-	uint8_t iidIdx =0;
-	//IID_INIT(objIid);
-	if(json_object_object_get(Jobj, "userAccountIid") !=NULL)
-	{
-		iidArray = json_object_object_get(Jobj, "userAccountIid");
-
-		for(iidIdx=0; iidIdx < 6; iidIdx++){
-			fsAccountIid.idx[iidIdx] = json_object_get_int( json_object_array_get_idx(iidArray, iidIdx));
-			if(fsAccountIid.idx[iidIdx] != 0)
-				fsAccountIid.level = iidIdx+1;
-		}
-		
-		zcfgFeObjJsonDel(RDM_OID_ZY_LOG_CFG_GP_ACCOUNT, &fsAccountIid, NULL);
-	}
-	else
-	{
-		iidArray = json_object_object_get(Jobj, "fsShareDirIid");
-		for(iidIdx=0; iidIdx < 6; iidIdx++){
-			sambaDirIid.idx[iidIdx] = json_object_get_int( json_object_array_get_idx(iidArray, iidIdx));
-			if(sambaDirIid.idx[iidIdx] != 0)
-				sambaDirIid.level = iidIdx+1;
-		}
-		
-		zcfgFeObjJsonDel(RDM_OID_ZY_SAMBA_DIR, &sambaDirIid, NULL);
-	}
-
+zcfgRet_t zcfgFeDalUsbFilesharingGet(struct json_object *Jobj, char *replyMsg){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	struct json_object *accountJobj = NULL;
+	struct json_object *paramJobj = NULL;
+	struct json_object *paramJobj1 = NULL;
+	struct json_object *paramJobj2 = NULL;
+	struct json_object *acctmpJobj = NULL;
+	struct json_object *sambadirJobj = NULL;
+	struct json_object *sambadirtmpJobj = NULL;
+	struct json_object *sambaJobj = NULL;
+	struct json_object *allJobj = NULL;
+	
+	objIndex_t accountIid = {0};
+	objIndex_t sambadirIid = {0};
+	objIndex_t sambaIid = {0};
+
+	acctmpJobj = json_object_new_array();
+	sambadirtmpJobj = json_object_new_array();
+	allJobj = json_object_new_object();
+	accountIid.level = 2;
+	accountIid.idx[0] = 2;
+
+	const char *path = NULL;
+	const char *sharename = NULL;
+	const char *tmptmp = NULL;
+	char rootpath[128] = {0};
+
+	while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_ZY_LOG_CFG_GP_ACCOUNT, &accountIid, &accountJobj) == ZCFG_SUCCESS){
+		paramJobj = json_object_new_object();
+		if(json_object_object_get(accountJobj, "Enabled") && json_object_object_get(accountJobj, "Username")){
+			json_object_object_add(paramJobj, "Status", JSON_OBJ_COPY(json_object_object_get(accountJobj, "Enabled")));
+			json_object_object_add(paramJobj, "Username", JSON_OBJ_COPY(json_object_object_get(accountJobj, "Username")));
+			json_object_array_add(acctmpJobj, paramJobj);
+		}
+		zcfgFeJsonObjFree(accountJobj);
+	}
+	while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_ZY_SAMBA_DIR, &sambadirIid, &sambadirJobj) == ZCFG_SUCCESS){
+		paramJobj1 = json_object_new_object();
+		path = json_object_get_string(json_object_object_get(sambadirJobj, "X_ZYXEL_RootPath"));
+		sharename = json_object_get_string(json_object_object_get(sambadirJobj, "X_ZYXEL_Path"));
+		sprintf(rootpath,"%s/%s",path,sharename);
+		json_object_object_add(paramJobj1, "Index", json_object_new_int(sambadirIid.idx[0]));
+		json_object_object_add(paramJobj1, "Status", JSON_OBJ_COPY(json_object_object_get(sambadirJobj, "X_ZYXEL_Browseable")));
+		json_object_object_add(paramJobj1, "Share Name", json_object_new_string(sharename));
+		json_object_object_add(paramJobj1, "Share Path", json_object_new_string(rootpath));
+		json_object_object_add(paramJobj1, "Share Description", JSON_OBJ_COPY(json_object_object_get(sambadirJobj, "X_ZYXEL_Comment")));
+		json_object_array_add(sambadirtmpJobj, paramJobj1);
+		zcfgFeJsonObjFree(sambadirJobj);
+	}
+
+	if(zcfgFeObjJsonGetWithoutUpdate(RDM_OID_ZY_SAMBA, &sambaIid, &sambaJobj) == ZCFG_SUCCESS){
+		paramJobj2 = json_object_new_object();
+		json_object_object_add(paramJobj2, "File Sharing Services", JSON_OBJ_COPY(json_object_object_get(sambaJobj, "Enable")));
+		json_object_object_add(allJobj, "Service Conf", paramJobj2);
+	}
+	json_object_object_add(allJobj, "Account", acctmpJobj);
+	json_object_object_add(allJobj, "Samba", sambadirtmpJobj);
+	json_object_array_add(Jobj, allJobj);
 	return ret;
 }
 zcfgRet_t zcfgFeDalUsbFilesharing(const char *method, struct json_object *Jobj, char *replyMsg){
 	zcfgRet_t ret = ZCFG_SUCCESS;
 	
-	t1 = time(NULL);
-	
-	if(!strcmp(method, "POST"))
-		ret = zcfgFeDalUsbFilesharingAdd(Jobj, NULL);
-	else if(!strcmp(method, "DELETE"))
-	   ret = zcfgFeDalUsbFilesharingDelete(Jobj, NULL);
-	else if(!strcmp(method, "PUT"))
-		ret = zcfgFeDalUsbFilesharingEdit(Jobj, NULL);
+	if(!strcmp(method, "PUT"))
+		ret = zcfgFeDalUsbFilesharingEdit(Jobj, replyMsg);
+	else if(!strcmp(method,"GET"))
+		ret = zcfgFeDalUsbFilesharingGet(Jobj, NULL);
 	else
 		printf("Unknown method:%s\n", method);
 		
-	t2 = time(NULL);
-    printf("zcfgFeDalUsbFilesharing() Total time=%d seconds ret=%d\n", (int) difftime(t2, t1), ret);
-		
 	return ret;
 }
\ No newline at end of file
Index: libzcfg_fe_dal-1.0/network/usbService/zcfg_fe_dal_usb_samba.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ libzcfg_fe_dal-1.0/network/usbService/zcfg_fe_dal_usb_samba.c	2017-05-02 13:05:45.865259200 +0800
@@ -0,0 +1,314 @@
+#include <ctype.h>
+#include <json/json.h>
+//#include <json/json_object.h>
+#include <time.h>
+
+#include "zcfg_common.h"
+#include "zcfg_fe_rdm_string.h"
+#include "zcfg_fe_rdm_struct.h"
+#include "zcfg_rdm_oid.h"
+#include "zcfg_rdm_obj.h"
+#include "zcfg_debug.h"
+//#include "zcfg_eid.h"
+#include "zcfg_msg.h"
+#include "zcfg_fe_dal_common.h"
+
+//#define JSON_OBJ_COPY(json_object) json_tokener_parse(json_object_to_json_string(json_object))
+
+dal_param_t USB_SAMBA_param[]={
+	//Mandatory parameter for dalcmd
+	{"Index",			dalType_int,	0,	0,	NULL,	NULL,	dal_Delete|dal_Edit},
+	//SAMBA Dir
+	{"HostName",		dalType_string,	0,	0,	NULL,	NULL, 	dal_Add},
+	{"FolderName",		dalType_string,	0,	0,	NULL,	NULL, 	dal_Add},
+	{"Description",		dalType_string,	0,	0,	NULL,	NULL, 	dal_Add},
+	{"Public",			dalType_boolean,	0,	0,	NULL},	
+	{"ValidUsers",		dalType_string,	0,	0,	NULL},
+	//{"ValidUsers_GUI",		dalType_string,	0,	0,	NULL},
+	{NULL,		0,	0,	0,	NULL},
+};
+
+void zcfgFeDalShowUsbSamba(struct json_object *Jarray){
+	struct json_object *obj = NULL;
+	struct json_object *servconfobj = NULL;
+	struct json_object *accountobj = NULL, *accounttmpobj = NULL;
+	struct json_object *sambaobj = NULL, *sambatmpobj = NULL;
+	struct json_object *usbinfoobj = NULL, *usbinfotmpobj = NULL;
+	int len_accountobj = 0, len_sambaobj = 0, len_usbinfoobj = 0;
+	int num_accountobj, num_sambaobj, num_usbinfoobj;
+	if(json_object_get_type(Jarray) != json_type_array){
+		printf("wrong Jobj format!\n");
+		return;
+	}
+	obj = json_object_array_get_idx(Jarray, 0);
+	servconfobj = json_object_object_get(obj, "Service Conf");
+	accountobj = json_object_object_get(obj, "Account");
+	sambaobj = json_object_object_get(obj, "Samba");
+	usbinfoobj = json_object_object_get(obj, "Usb Info");
+	len_accountobj = json_object_array_length(accountobj);
+	len_sambaobj = json_object_array_length(sambaobj);
+	len_usbinfoobj = json_object_array_length(usbinfoobj);
+
+	if(len_usbinfoobj != 0){
+		printf("USB Information: \n");
+		printf("%-20s %-20s %-30s \n","Volume","Capacity(MB)","Used Space(MB)");
+		for(num_usbinfoobj=0;num_usbinfoobj<len_usbinfoobj;num_usbinfoobj++){
+			usbinfotmpobj = json_object_array_get_idx(usbinfoobj, num_usbinfoobj);
+			printf("%-20s %-20s %-30s \n",
+				json_object_get_string(json_object_object_get(usbinfotmpobj, "Volume")),
+				json_object_get_string(json_object_object_get(usbinfotmpobj, "Capacity")),
+				json_object_get_string(json_object_object_get(usbinfotmpobj, "Used Space")));
+		}
+	}
+	
+	printf("\nServer Configuration: \n");
+	printf("File Sharing Services:  %s \n",json_object_get_string(json_object_object_get(servconfobj, "File Sharing Services")));
+	
+	if(len_sambaobj != 0){
+		printf("\nShare Directory List: \n");
+		printf("%-10s %-10s %-35s %-50s %-10s \n", "Index", "Status", "Share Name", "Share Path", "Share Description");
+		for(num_sambaobj=0;num_sambaobj<len_sambaobj;num_sambaobj++){
+			sambatmpobj = json_object_array_get_idx(sambaobj, num_sambaobj);
+			printf("%-10s %-10s %-35s %-50s %-10s \n",
+				json_object_get_string(json_object_object_get(sambatmpobj, "Index")),
+				json_object_get_string(json_object_object_get(sambatmpobj, "Status")),
+				json_object_get_string(json_object_object_get(sambatmpobj, "Share Name")),
+				json_object_get_string(json_object_object_get(sambatmpobj, "Share Path")),
+				json_object_get_string(json_object_object_get(sambatmpobj, "Share Description")));
+		}
+	}
+
+	printf("\nAccount Management: \n");
+	printf("%-20s %-30s \n","Status","User Name");
+	for(num_accountobj=0;num_accountobj<len_accountobj;num_accountobj++){
+		accounttmpobj = json_object_array_get_idx(accountobj, num_accountobj);
+		printf("%-20s %-30s \n",
+			json_object_get_string(json_object_object_get(accounttmpobj, "Status")),
+			json_object_get_string(json_object_object_get(accounttmpobj, "Username")));
+	}
+}
+
+zcfgRet_t zcfgFeDalUsbSambaAdd(struct json_object *Jobj, char *replyMsg){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	struct json_object *sambadirObj = NULL;
+	objIndex_t sambadirIid = {0};
+
+	const char *HostName = NULL;
+	const char *FolderName = NULL;
+	const char *Description = NULL;
+	char ValidUser[128] = {0};
+	const char *Validuser_gui = NULL;
+	const char *Validuser_cli = NULL;
+	const char *user = NULL;
+	bool Browseable = false;
+	bool Public = false;
+	char RootPath[64] = {0};
+ 	char buff[128] = {0};
+	char *tmp = NULL;
+	
+	printf("Jobj = %s \n",json_object_to_json_string(Jobj));
+
+	HostName = json_object_get_string(json_object_object_get(Jobj, "HostName"));
+	FolderName = json_object_get_string(json_object_object_get(Jobj, "FolderName"));
+	Description = json_object_get_string(json_object_object_get(Jobj, "Description"));
+	//Browseable = json_object_get_boolean(json_object_object_get(Jobj, "Browseable"));	 //not necessary parameter
+	Public = json_object_get_boolean(json_object_object_get(Jobj, "Public"));
+
+	if(json_object_object_get(Jobj, "ValidUsers_GUI")){
+		Validuser_gui = json_object_get_string(json_object_object_get(Jobj, "ValidUsers_GUI"));
+		strcpy(ValidUser,Validuser_gui);
+	}
+	else if(json_object_object_get(Jobj, "ValidUsers")){
+		Validuser_cli = json_object_get_string(json_object_object_get(Jobj, "ValidUsers"));
+	 	strcpy(buff, Validuser_cli);
+	 	user = strtok_r(buff, ",", &tmp);
+	 	while(user != NULL){
+	 		strcat(ValidUser,user);
+	 		strcat(ValidUser," ");
+	 		user = strtok_r(tmp, ",", &tmp);
+	 	}
+	 }
+	sprintf(RootPath,"\/mnt\/%s",HostName);
+	if(!Public){
+		if(!json_object_object_get(Jobj, "ValidUsers")){
+			strcpy(replyMsg, "Please enter the valid users.");
+			return ZCFG_INVALID_PARAM_VALUE;
+		}
+	}
+ 	if(zcfgFeObjJsonAdd(RDM_OID_ZY_SAMBA_DIR, &sambadirIid, NULL) == ZCFG_SUCCESS){
+		if(zcfgFeObjJsonGet(RDM_OID_ZY_SAMBA_DIR, &sambadirIid, &sambadirObj) == ZCFG_SUCCESS){
+			json_object_object_add(sambadirObj, "X_ZYXEL_RootPath", json_object_new_string(RootPath));
+			json_object_object_add(sambadirObj, "X_ZYXEL_Hostname", json_object_new_string(HostName));
+			json_object_object_add(sambadirObj, "X_ZYXEL_FolderName", json_object_new_string(FolderName));
+			json_object_object_add(sambadirObj, "X_ZYXEL_Path", json_object_new_string(FolderName));
+			json_object_object_add(sambadirObj, "X_ZYXEL_Comment", json_object_new_string(Description));
+			json_object_object_add(sambadirObj, "X_ZYXEL_Browseable", json_object_new_boolean(true));
+			json_object_object_add(sambadirObj, "X_ZYXEL_Public", json_object_new_boolean(Public));
+			if(strcmp(ValidUser,""))
+				json_object_object_add(sambadirObj, "X_ZYXEL_ValidUsers", json_object_new_string(ValidUser));
+			
+			ret = zcfgFeObjJsonSet(RDM_OID_ZY_SAMBA_DIR, &sambadirIid, sambadirObj, NULL);
+			zcfgFeJsonObjFree(sambadirObj);
+		}
+	}	
+	return ret;
+}
+
+zcfgRet_t zcfgFeDalUsbSambaEdit(struct json_object *Jobj, char *replyMsg){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	struct json_object *sambadirObj = NULL;
+	objIndex_t sambadirIid = {0}; 
+	const char *Description = NULL;
+	char ValidUser[128] = {0};
+	const char *Validuser_gui = NULL;
+	const char *Validuser_cli = NULL;
+	const char *user = NULL;
+	bool Browseable = false;
+	bool Public = false;
+	char RootPath[64] = {0};
+	char buff[128] = {0};
+	char *tmp = NULL;
+
+	sambadirIid.level = 1;
+	sambadirIid.idx[0] = json_object_get_int(json_object_object_get(Jobj, "Index"));
+	Description = json_object_get_string(json_object_object_get(Jobj, "Description")); 
+	Public = json_object_get_boolean(json_object_object_get(Jobj, "Public"));
+
+	if(json_object_object_get(Jobj, "ValidUsers_GUI")){
+		Validuser_gui = json_object_get_string(json_object_object_get(Jobj, "ValidUsers_GUI"));
+		strcpy(ValidUser,Validuser_gui);
+	}
+	else if(json_object_object_get(Jobj, "ValidUsers")){
+		Validuser_cli = json_object_get_string(json_object_object_get(Jobj, "ValidUsers"));
+	 	strcpy(buff, Validuser_cli);
+	 	user = strtok_r(buff, ",", &tmp);
+	 	while(user != NULL){
+	 		strcat(ValidUser,user);
+	 		strcat(ValidUser," ");
+	 		user = strtok_r(tmp, ",", &tmp);
+	 	}
+	 }
+	if(!Public){
+		if(!json_object_object_get(Jobj, "ValidUsers")){
+			strcpy(replyMsg, "Please enter the valid users.");
+			return ZCFG_INVALID_PARAM_VALUE;
+		}
+	} 
+	if(zcfgFeObjJsonGet(RDM_OID_ZY_SAMBA_DIR, &sambadirIid, &sambadirObj) == ZCFG_SUCCESS){
+ 		json_object_object_add(sambadirObj, "X_ZYXEL_Comment", json_object_new_string(Description));
+		json_object_object_add(sambadirObj, "X_ZYXEL_Public", json_object_new_boolean(Public));
+		if(strcmp(ValidUser,""))
+			json_object_object_add(sambadirObj, "X_ZYXEL_ValidUsers", json_object_new_string(ValidUser));
+			
+		ret = zcfgFeObjJsonSet(RDM_OID_ZY_SAMBA_DIR, &sambadirIid, sambadirObj, NULL);
+		zcfgFeJsonObjFree(sambadirObj);
+	}
+	
+	return ret;
+}
+zcfgRet_t zcfgFeDalUsbSambaDelete(struct json_object *Jobj, char *replyMsg){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	objIndex_t sambadirIid = {0};
+	
+	sambadirIid.level = 1;
+	sambadirIid.idx[0] = json_object_get_int(json_object_object_get(Jobj, "Index"));
+	zcfgFeObjJsonDel(RDM_OID_ZY_SAMBA_DIR, &sambadirIid, NULL);
+	return ret;
+}
+
+zcfgRet_t zcfgFeDalUsbSambaGet(struct json_object *Jobj, char *replyMsg){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	struct json_object *accountJobj = NULL;
+	struct json_object *paramJobj = NULL;
+	struct json_object *paramJobj1 = NULL;
+	struct json_object *paramJobj2 = NULL;
+	struct json_object *paramJobj3 = NULL;
+	struct json_object *acctmpJobj = NULL;
+	struct json_object *sambadirJobj = NULL;
+	struct json_object *sambadirtmpJobj = NULL;
+	struct json_object *usbdevJobj = NULL;
+	struct json_object *usbdevtmpJobj = NULL;
+	struct json_object *sambaJobj = NULL;
+	struct json_object *allJobj = NULL;
+	struct json_object *obj = NULL;
+	
+	objIndex_t accountIid = {0};
+	objIndex_t sambadirIid = {0};
+	objIndex_t usbdevIid = {0};
+	objIndex_t sambaIid = {0};
+	objIndex_t Iid = {0};
+	
+	acctmpJobj = json_object_new_array();
+	sambadirtmpJobj = json_object_new_array();
+	usbdevtmpJobj = json_object_new_array();
+	allJobj = json_object_new_object();
+	accountIid.level = 2;
+	accountIid.idx[0] = 2;
+
+	const char *path = NULL;
+	const char *sharename = NULL;
+	const char *tmptmp = NULL;
+	char rootpath[128] = {0};
+	//trigger usb backend get usb capacity and usedspace
+	while(zcfgFeObjJsonGetNext(RDM_OID_USB_USBHOSTS_HOST_DEV, &Iid, &obj) == ZCFG_SUCCESS){
+		zcfgFeJsonObjFree(obj);
+	}
+	while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_ZY_LOG_CFG_GP_ACCOUNT, &accountIid, &accountJobj) == ZCFG_SUCCESS){
+		paramJobj = json_object_new_object();
+		if(json_object_object_get(accountJobj, "Enabled") && json_object_object_get(accountJobj, "Username")){
+			json_object_object_add(paramJobj, "Status", JSON_OBJ_COPY(json_object_object_get(accountJobj, "Enabled")));
+			json_object_object_add(paramJobj, "Username", JSON_OBJ_COPY(json_object_object_get(accountJobj, "Username")));
+			json_object_array_add(acctmpJobj, paramJobj);
+		}
+		zcfgFeJsonObjFree(accountJobj);
+	}
+	while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_ZY_SAMBA_DIR, &sambadirIid, &sambadirJobj) == ZCFG_SUCCESS){
+		paramJobj1 = json_object_new_object();
+		path = json_object_get_string(json_object_object_get(sambadirJobj, "X_ZYXEL_RootPath"));
+		sharename = json_object_get_string(json_object_object_get(sambadirJobj, "X_ZYXEL_Path"));
+		sprintf(rootpath,"%s/%s",path,sharename);
+		json_object_object_add(paramJobj1, "Index", json_object_new_int(sambadirIid.idx[0]));
+		json_object_object_add(paramJobj1, "Status", JSON_OBJ_COPY(json_object_object_get(sambadirJobj, "X_ZYXEL_Browseable")));
+		json_object_object_add(paramJobj1, "Share Name", json_object_new_string(sharename));
+		json_object_object_add(paramJobj1, "Share Path", json_object_new_string(rootpath));
+		json_object_object_add(paramJobj1, "Share Description", JSON_OBJ_COPY(json_object_object_get(sambadirJobj, "X_ZYXEL_Comment")));
+		json_object_array_add(sambadirtmpJobj, paramJobj1);
+		zcfgFeJsonObjFree(sambadirJobj);
+	}
+	while(zcfgFeObjJsonGetNext(RDM_OID_USB_USBHOSTS_HOST_DEV_PAR, &usbdevIid, &usbdevJobj) == ZCFG_SUCCESS){
+		paramJobj2 = json_object_new_object();
+		json_object_object_add(paramJobj2, "Volume", JSON_OBJ_COPY(json_object_object_get(usbdevJobj, "PartitionName")));
+		json_object_object_add(paramJobj2, "Capacity", JSON_OBJ_COPY(json_object_object_get(usbdevJobj, "Capacity")));
+		json_object_object_add(paramJobj2, "Used Space", JSON_OBJ_COPY(json_object_object_get(usbdevJobj, "UsedSpace")));
+		json_object_array_add(usbdevtmpJobj, paramJobj2);
+		zcfgFeJsonObjFree(usbdevJobj);
+	}
+	if(zcfgFeObjJsonGetWithoutUpdate(RDM_OID_ZY_SAMBA, &sambaIid, &sambaJobj) == ZCFG_SUCCESS){
+		paramJobj3 = json_object_new_object();
+		json_object_object_add(paramJobj3, "File Sharing Services", JSON_OBJ_COPY(json_object_object_get(sambaJobj, "Enable")));
+		json_object_object_add(allJobj, "Service Conf", paramJobj3);
+	}
+	json_object_object_add(allJobj, "Account", acctmpJobj);
+	json_object_object_add(allJobj, "Samba", sambadirtmpJobj);
+	json_object_object_add(allJobj, "Usb Info", usbdevtmpJobj);
+	json_object_array_add(Jobj, allJobj);
+	return ret;
+}
+
+zcfgRet_t zcfgFeDalUsbSamba(const char *method, struct json_object *Jobj, char *replyMsg){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+
+	if(!strcmp(method, "POST"))
+		ret = zcfgFeDalUsbSambaAdd(Jobj, replyMsg);
+	else if(!strcmp(method, "PUT"))
+	   ret = zcfgFeDalUsbSambaEdit(Jobj, NULL);
+	else if(!strcmp(method, "DELETE"))
+		ret = zcfgFeDalUsbSambaDelete(Jobj, NULL);
+	else if(!strcmp(method,"GET"))
+		ret = zcfgFeDalUsbSambaGet(Jobj, NULL);
+	else
+		printf("Unknown method:%s\n", method);
+		
+	return ret;
+}
+
Index: libzcfg_fe_dal-1.0/zcfg_fe_dal.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/zcfg_fe_dal.c	2017-05-02 13:21:52.313263946 +0800
+++ libzcfg_fe_dal-1.0/zcfg_fe_dal.c	2017-05-02 13:23:51.580891300 +0800
@@ -69,6 +69,7 @@
 extern dal_param_t IEEE_8023AH_param[];
 extern dal_param_t OAMPING_param[];
 extern dal_param_t USB_FILESHARING_param[];
+extern dal_param_t USB_SAMBA_param[];
 extern dal_param_t USB_MEDIASERVER_param[];
 extern dal_param_t PAREN_CTL_param[];
 extern dal_param_t SCHEDULE_param[];
@@ -141,6 +142,7 @@
 extern zcfgRet_t zcfgFe8023ah(const char *method, struct json_object *Jobj, char *replyMsg);
 extern zcfgRet_t zcfgFeOamPing(const char *method, struct json_object *Jobj, char *replyMsg);
 extern zcfgRet_t zcfgFeDalUsbFilesharing(const char *method, struct json_object *Jobj, char *replyMsg);
+extern zcfgRet_t zcfgFeDalUsbSamba(const char *method, struct json_object *Jobj, char *replyMsg);
 extern zcfgRet_t zcfgFeDalUsbMediaserver(const char *method, struct json_object *Jobj, char *replyMsg);
 extern zcfgRet_t zcfgFeDalParentCtl(const char *method, struct json_object *Jobj, char *replyMsg);
 extern zcfgRet_t zcfgFeDalSchedule(const char *method, struct json_object *Jobj, char *replyMsg);
@@ -168,6 +170,8 @@
 extern void zcfgFeDalShowTFTPSerName(struct json_object *Jarray);
 extern void zcfgFeDalShowSTBVendorID(struct json_object *Jarray);
 extern void zcfgFeDalShowAddnl(struct json_object *Jarray);
+extern void zcfgFeDalShowUsbFilesharing(struct json_object *Jarray);
+extern void zcfgFeDalShowUsbSamba(struct json_object *Jarray);
 
 dal_handler_t dalHandler[] = {
 {"WAN",				WAN_param,			zcfgFeDalWan,			zcfgFeDalShowWan,			"get",				"Broadband"},
@@ -231,7 +235,8 @@
 {"8021AG",			IEEE_8021AG_param,	zcfgFe8021ag,			NULL,						"edit",				""},//Diagnostic_Result
 {"8023AH",			IEEE_8023AH_param,	zcfgFe8023ah,			NULL,						"edit",				""},//Diagnostic_Result
 {"OAMPING", 		OAMPING_param,		zcfgFeOamPing,			NULL,						"edit",				""},//Diagnostic_Result
-{"USB_FILESHARING", USB_FILESHARING_param,	zcfgFeDalUsbFilesharing,NULL, 					"add|edit|delete", 	""},//USB_Service
+{"USB_FILESHARING", USB_FILESHARING_param,	zcfgFeDalUsbFilesharing,zcfgFeDalShowUsbFilesharing,	"get|edit", 	"USB_Service"},//USB_Service
+{"USB_SAMBA",		USB_SAMBA_param,	zcfgFeDalUsbSamba,		zcfgFeDalShowUsbSamba,		"get|add|edit|delete",	"USB_Service"},//USB_Service
 {"USB_MEDIASERVER", USB_MEDIASERVER_param,	zcfgFeDalUsbMediaserver,NULL, 					"edit",				""},//USB_Service
 {"PAREN_CTL", 		PAREN_CTL_param,	zcfgFeDalParentCtl,		NULL,						"add|edit|delete",	""},//Parental_Control
 {"SCHEDULE", 		SCHEDULE_param,	zcfgFeDalSchedule,			NULL,						"add|edit|delete",	""},//Scheduler_Rule
