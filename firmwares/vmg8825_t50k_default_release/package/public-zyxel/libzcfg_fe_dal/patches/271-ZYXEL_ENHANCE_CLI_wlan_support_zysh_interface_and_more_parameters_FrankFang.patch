Index: libzcfg_fe_dal-1.0/network/wireless/zcfg_fe_dal_wifi_general.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/network/wireless/zcfg_fe_dal_wifi_general.c	2017-07-28 08:28:31.710704170 +0800
+++ libzcfg_fe_dal-1.0/network/wireless/zcfg_fe_dal_wifi_general.c	2017-07-28 09:46:21.976495877 +0800
@@ -13,7 +13,7 @@
 #include "zcfg_msg.h"
 #include "zcfg_fe_dal_common.h"
 
-
+#define AutoChannel 0
 //#define JSON_OBJ_COPY(json_object) json_tokener_parse(json_object_to_json_string(json_object))
 
 dal_param_t WIFI_GENERAL_param[]={
@@ -21,9 +21,9 @@
 	{"Index",				dalType_int,		0,	0,	NULL,		NULL,			dal_Edit},
 	{"wlEnable",			dalType_boolean,	0,	0,	NULL,		NULL,			0},
 	{"SSID",				dalType_string,	 	0,	0,	NULL,		NULL,			0},
-	{"X_ZYXEL_Multicast_Fwd",dalType_boolean,	0,	0,	NULL,		NULL,			dalcmd_Forbid},
-	{"upRate",				dalType_int,		0,	0,	NULL,		NULL,			dalcmd_Forbid},
-	{"downRate",			dalType_int,		0,	0,	NULL,		NULL,			dalcmd_Forbid},
+	{"X_ZYXEL_Multicast_Fwd",dalType_boolean,	0,	0,	NULL,		NULL,			0},
+	{"upRate",				dalType_int,		0,	0,	NULL,		NULL,			0},
+	{"downRate",			dalType_int,		0,	0,	NULL,		NULL,			0},
 	//WiFi Radio
 	{"div_wifiAdvance",		dalType_boolean,	0,	0,	NULL,		NULL,			dalcmd_Forbid},
 	{"bandwidth",			dalType_int,		0,	0,	NULL,		NULL,			0},
@@ -31,9 +31,9 @@
 	{"channel",				dalType_int,		0,	0,	NULL,		NULL,			0},
 	//WiFi Access Point
 	{"MaxAssociatedDevices",dalType_int,		1,	64,	NULL,		NULL,			0},
-	{"wlHide",				dalType_boolean, 	0,	0,	NULL,		NULL,			dalcmd_Forbid},
-	{"wlGwMode",			dalType_string, 	0,	0,	NULL,		NULL,			dalcmd_Forbid},
-	{"wlEnableGuest",		dalType_boolean, 	0,	0,	NULL,		NULL,			dalcmd_Forbid},
+	{"wlHide",				dalType_boolean, 	0,	0,	NULL,		NULL,			0},
+	{"wlGwMode",			dalType_string, 	0,	0,	NULL,		NULL,			0},
+	{"wlEnableGuest",		dalType_boolean, 	0,	0,	NULL,		NULL,			0},
 	//WiFi Access Point Sec
 	{"securityLevel",		dalType_string,		0,	0,	NULL,		"NoSecurity|Basic|MoreSecure",	0},
 	{"secMode",				dalType_int,		0,	0,	NULL,		"43|149|255",	dalcmd_Forbid},
@@ -65,17 +65,17 @@
 	{"RadiusServerPort",	dalType_int,		0,	0,	NULL,		NULL,			dalcmd_Forbid},
 	{"RadiusSecret",		dalType_string, 	0,	0,	NULL,		NULL,			dalcmd_Forbid},
 	{"X_ZYXEL_Preauth",		dalType_boolean,	0,	0,	NULL,		NULL,			dalcmd_Forbid},
-	{"X_ZYXEL_ReauthInterval",dalType_int,		0,	0,	NULL,		NULL,			dalcmd_Forbid},
+	{"X_ZYXEL_ReauthInterval",dalType_int,		0,	0,	NULL,		NULL,			0},
 	{"encryp",				dalType_string, 	0,	0,	NULL,		"tkip|aes|tkipaes",			0},
 	{"X_ZYXEL_PassphraseType",dalType_int,		0,	0,	NULL,		NULL,			dalcmd_Forbid},
 	//DHCPV4 SRV SUBNET
 	{"div_wifiSubnet",		dalType_boolean,	0,	0,	NULL,		NULL,			dalcmd_Forbid},
-	{"wlSubnetState",		dalType_boolean,	0,	0,	NULL,		NULL,			dalcmd_Forbid},
+	{"wlSubnetState",		dalType_boolean,	0,	0,	NULL,		NULL,			0},
 	{"Interface",			dalType_string, 	0,	0,	NULL,		NULL,			dalcmd_Forbid},
-	{"MinAddress",			dalType_string, 	0,	0,	NULL,		NULL,			dalcmd_Forbid},
-	{"MaxAddress",			dalType_string, 	0,	0,	NULL,		NULL,			dalcmd_Forbid},
-	{"SubnetMask",			dalType_string, 	0,	0,	NULL,		NULL,			dalcmd_Forbid},
-	{"LANIP",				dalType_string, 	0,	0,	NULL,		NULL,			dalcmd_Forbid},
+	{"MinAddress",			dalType_string, 	0,	0,	NULL,		NULL,			0},
+	{"MaxAddress",			dalType_string, 	0,	0,	NULL,		NULL,			0},
+	{"SubnetMask",			dalType_string, 	0,	0,	NULL,		NULL,			0},
+	{"LANIP",				dalType_string, 	0,	0,	NULL,		NULL,			0},
 	{"subnetObjAction",		dalType_string, 	0,	0,	NULL,		NULL,			dalcmd_Forbid},
 	{NULL,		0,	0,	0,	NULL},
 };
@@ -438,12 +438,9 @@
 	
 	//WiFi Radio
 	div_wifiAdvance = json_object_get_boolean(json_object_object_get(Jobj, "div_wifiAdvance"));
-	if(div_wifiAdvance)
-	{
-		bandwidth = json_object_get_int(json_object_object_get(Jobj, "bandwidth"));
-		extcha = json_object_get_int(json_object_object_get(Jobj, "extcha"));
-		channel = json_object_get_int(json_object_object_get(Jobj, "channel"));
-	}
+	bandwidth = json_object_get_int(json_object_object_get(Jobj, "bandwidth"));
+	extcha = json_object_get_int(json_object_object_get(Jobj, "extcha"));
+	channel = json_object_get_int(json_object_object_get(Jobj, "channel"));
 	
 	//WiFi Access Point
 	MaxAssociatedDevices = json_object_get_int(json_object_object_get(Jobj, "MaxAssociatedDevices"));
@@ -490,20 +487,12 @@
 	//DHCPV4 SRV SUBNET
 	wlSubnetState = json_object_get_boolean(json_object_object_get(Jobj, "wlSubnetState"));
 	div_wifiSubnet = json_object_get_boolean(json_object_object_get(Jobj, "div_wifiSubnet"));
-	if(div_wifiSubnet)
-	{
-		if (wlSubnetState)
-		{
-			Interface = json_object_get_string(json_object_object_get(Jobj, "Interface"));
-			MinAddress = json_object_get_string(json_object_object_get(Jobj, "MinAddress"));
-			MaxAddress = json_object_get_string(json_object_object_get(Jobj, "MaxAddress"));
-			SubnetMask = json_object_get_string(json_object_object_get(Jobj, "SubnetMask"));
-			LANIP = json_object_get_string(json_object_object_get(Jobj, "LANIP"));
-			subnetObjAction = json_object_get_string(json_object_object_get(Jobj, "subnetObjAction"));
-			
-		}else
-			subnetObjAction = json_object_get_string(json_object_object_get(Jobj, "subnetObjAction"));
-	}
+	Interface = json_object_get_string(json_object_object_get(Jobj, "Interface"));
+	MinAddress = json_object_get_string(json_object_object_get(Jobj, "MinAddress"));
+	MaxAddress = json_object_get_string(json_object_object_get(Jobj, "MaxAddress"));
+	SubnetMask = json_object_get_string(json_object_object_get(Jobj, "SubnetMask"));
+	LANIP = json_object_get_string(json_object_object_get(Jobj, "LANIP"));
+	subnetObjAction = json_object_get_string(json_object_object_get(Jobj, "subnetObjAction"));
 	
 	return;
 }
@@ -553,17 +542,6 @@
 	struct json_object *iidArray = NULL;
 	uint8_t iidIdx =0;
 	const char *band = NULL;
-	
-	iidArray = json_object_object_get(Jobj, "wlRadioIid");
-	for(iidIdx=0;iidIdx<6;iidIdx++){
-		wifiRadioIid.idx[iidIdx] = json_object_get_int( json_object_array_get_idx(iidArray, iidIdx));
-		if(wifiRadioIid.idx[iidIdx] != 0)
-			wifiRadioIid.level = iidIdx+1;
-	}
-	
-	if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_RADIO, &wifiRadioIid, &wifiRadioObj)) != ZCFG_SUCCESS) {
-		return ret;
-	}
 
 	if (channel == 0)
 	{
@@ -735,16 +713,6 @@
 	}else{ // wireless general
 #endif
 	
-	iidArray = json_object_object_get(Jobj, "wlSsidIid");
-	for(iidIdx=0;iidIdx<6;iidIdx++){
-		wifiSsidIid.idx[iidIdx] = json_object_get_int( json_object_array_get_idx(iidArray, iidIdx));
-		if(wifiSsidIid.idx[iidIdx] != 0)
-			wifiSsidIid.level = iidIdx+1;
-	}
-	
-	if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_SSID, &wifiSsidIid, &wifiSsidObj)) != ZCFG_SUCCESS) {
-		return ret;
-	}
 	json_object_object_add(wifiSsidObj, "Enable", json_object_new_boolean(wlEnable));
 	json_object_object_add(wifiSsidObj, "X_ZYXEL_Multicast_Fwd", json_object_new_boolean(X_ZYXEL_Multicast_Fwd));
 	json_object_object_add(wifiSsidObj, "SSID", json_object_new_string(SSID));
@@ -774,17 +742,6 @@
 	struct json_object *iidArray = NULL;	
 	uint8_t iidIdx =0;
 
-	iidArray = json_object_object_get(Jobj, "wlApIid");
-	for(iidIdx=0;iidIdx<6;iidIdx++){
-		wifiApIid.idx[iidIdx] = json_object_get_int( json_object_array_get_idx(iidArray, iidIdx));
-		if(wifiApIid.idx[iidIdx] != 0)
-			wifiApIid.level = iidIdx+1;
-	}
-	
-	if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_ACCESS_POINT, &wifiApIid, &wifiApObj)) != ZCFG_SUCCESS) {
-		return ret;
-	}
-	
 	json_object_object_add(wifiApObj, "MaxAssociatedDevices", json_object_new_int(MaxAssociatedDevices));
 	if(wlHide)
 		json_object_object_add(wifiApObj, "SSIDAdvertisementEnabled", json_object_new_boolean(false));
@@ -1104,23 +1061,12 @@
 		}
 	}else{ // general wireless
 #endif
-	// Index: from dalcmd, wlSecIid: from GUI
+	// Index: from dalcmd
 	if(json_object_object_get(Jobj, "Index")){
 		wifiSecIid.idx[0] = json_object_get_int(json_object_object_get(Jobj, "Index"));
 		if(wifiSecIid.idx[0] != 0)
 			wifiSecIid.level = 1;
 	}
-	else{
-		iidArray = json_object_object_get(Jobj, "wlSecIid");
-		for(iidIdx=0;iidIdx<6;iidIdx++){
-			wifiSecIid.idx[iidIdx] = json_object_get_int( json_object_array_get_idx(iidArray, iidIdx));
-			if(wifiSecIid.idx[iidIdx] != 0)
-				wifiSecIid.level = iidIdx+1;
-		}
-	}
-	if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_ACCESS_POINT_SEC, &wifiSecIid, &wifiSecObj)) != ZCFG_SUCCESS) {
-		return ret;
-	}
 	
 	if(secMode == SLIDER_POS_NONE)
 		json_object_object_add(wifiSecObj, "ModeEnabled", json_object_new_string("None"));
@@ -1278,18 +1224,6 @@
 zcfgRet_t cfgWifiSubnetObject(struct json_object *Jobj, const char* action){
 
 	zcfgRet_t ret = ZCFG_SUCCESS;
-	struct json_object *iidArray = NULL;	
-	uint8_t iidIdx =0;
-	
-	iidArray = json_object_object_get(Jobj, "wlSubnetIid");
-	if(iidArray != NULL)
-	{
-		for(iidIdx=0;iidIdx<6;iidIdx++){
-			wifiSubnetIid.idx[iidIdx] = json_object_get_int( json_object_array_get_idx(iidArray, iidIdx));
-			if(wifiSubnetIid.idx[iidIdx] != 0)
-				wifiSubnetIid.level = iidIdx+1;
-		}
-	}
 	
 	if(!strcmp(action, "DELETE"))
 	{
@@ -1320,15 +1254,481 @@
 	return ret;
 }
 
-zcfgRet_t dalcmdValidateWifiSecObj(struct json_object *Jobj, char *replyMsg){
+/*
+zcfgRet_t dalcmdWifiGeneralEdit(struct json_object *Jobj, char *replyMsg){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	int Index;
+	struct json_object *paramObj = NULL;
+	const char *RadioReference = NULL, *SSIDReference = NULL;
+	uint8_t SSIDIdx;
+	const char *band = NULL;
+	int64_t intValue;
+	
+	Index = json_object_get_int(json_object_object_get(Jobj, "Index"));
+	IID_INIT(wifiSsidIid);
+	wifiSsidIid.level = 1;
+	wifiSsidIid.idx[0] = Index;
+	if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_SSID, &wifiSsidIid, &wifiSsidObj)) != ZCFG_SUCCESS) {
+		return ZCFG_NO_SUCH_OBJECT;
+	}
+	
+	RadioReference = json_object_get_string(json_object_object_get(wifiSsidObj, "LowerLayers"));
+	IID_INIT(wifiRadioIid);
+	wifiRadioIid.level = 1;
+	sscanf(RadioReference, "WiFi.Radio.%hhu", &(wifiRadioIid.idx[0]));
+	if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_RADIO, &wifiRadioIid, &wifiRadioObj)) != ZCFG_SUCCESS) {
+		return ZCFG_INTERNAL_ERROR;
+	}
+
+	IID_INIT(wifiApIid);
+	while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_WIFI_ACCESS_POINT, &wifiApIid, &wifiApObj) == ZCFG_SUCCESS) {
+		SSIDReference = json_object_get_string(json_object_object_get(wifiApObj, "SSIDReference"));
+		sscanf(SSIDReference, "WiFi.SSID.%hhu", &SSIDIdx);
+		if(SSIDIdx == wifiSsidIid.idx[0]){
+			break;
+		}
+		json_object_put(wifiApObj);
+		wifiApObj = NULL;
+	}
+	if(wifiApObj == NULL)
+		return ZCFG_INTERNAL_ERROR;
+
+	// Get Sec Obj
+	IID_INIT(wifiSecIid);
+	wifiSecIid.level = 1;
+	wifiSecIid.idx[0] = Index;
+	if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_ACCESS_POINT_SEC, &wifiSecIid, &wifiSecObj)) != ZCFG_SUCCESS) {
+		return ZCFG_NO_SUCH_OBJECT;
+	}
+	
+	//wlEnable
+	if((paramObj = json_object_object_get(Jobj, "wlEnable")) != NULL)
+		json_object_object_add(wifiSsidObj, "Enable", JSON_OBJ_COPY(paramObj));
+
+	//SSID
+	if((paramObj = json_object_object_get(Jobj, "SSID")) != NULL)
+		json_object_object_add(wifiSsidObj, "SSID", JSON_OBJ_COPY(paramObj));
+
+	//bandwidth
+	if((paramObj = json_object_object_get(Jobj, "bandwidth")) != NULL){
+		band = json_object_get_string(json_object_object_get(wifiApObj, "OperatingFrequencyBand"));
+
+		intValue = json_object_get_int(paramObj);
+		if(intValue == 0){
+			json_object_object_add(wifiRadioObj, "X_ZYXEL_OBSS_coex", json_object_new_boolean(true));
+			if(!strcmp(band, "2.4GHz")){
+				json_object_object_add(wifiRadioObj, "OperatingChannelBandwidth", json_object_new_string("40MHz"));
+			}
+		}
+		else{
+			json_object_object_add(wifiRadioObj, "X_ZYXEL_OBSS_coex", json_object_new_boolean(false));
+			if (intValue == 20)
+				json_object_object_add(wifiRadioObj, "OperatingChannelBandwidth", json_object_new_string("20MHz"));
+			else if (intValue == 40)
+				json_object_object_add(wifiRadioObj, "OperatingChannelBandwidth", json_object_new_string("40MHz"));
+			else if (strcmp(band, "2.4GHz") && intValue == 80)
+				json_object_object_add(wifiRadioObj, "OperatingChannelBandwidth", json_object_new_string("80MHz"));
+			else{
+				if(replyMsg != NULL)
+					strcpy(replyMsg, "Wrong bandwidth value");
+				return ZCFG_INVALID_PARAM_VALUE;
+			}
+		}
+	}
+
+	//channel
+	if((paramObj = json_object_object_get(Jobj, "channel")) != NULL){
+		intValue = json_object_get_int(paramObj);
+		if (intValue == 0){
+			json_object_object_add(wifiRadioObj, "AutoChannelEnable", json_object_new_boolean(true));
+		}
+		else{
+			json_object_object_add(wifiRadioObj, "AutoChannelEnable", json_object_new_boolean(false));
+			json_object_object_add(wifiRadioObj, "Channel", json_object_new_int(intValue));
+		}
+	}
+
+	//MaxAssociatedDevices
+	if((paramObj = json_object_object_get(Jobj, "MaxAssociatedDevices")) != NULL)
+		json_object_object_add(wifiApObj, "MaxAssociatedDevices", JSON_OBJ_COPY(paramObj));
+
+	// Security related
+	if(validateWifiSecObj(Jobj,NULL) != ZCFG_SUCCESS){
+		json_object_put(wifiSecObj);
+		wifiSecObj = NULL;
+		printf("Security related parameters failed validation..\n");
+	}
+	else{
+		if((ret = editWifiSecObject(Jobj)) != ZCFG_SUCCESS){
+			json_object_put(wifiSecObj);
+			wifiSecObj = NULL;
+			printf("Fail to set security related parameters..\n");
+		}
+	}
+	
+	//if(wifiApWpsObj) zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_ACCESS_POINT_WPS, &wifiApWpsIid, wifiApWpsObj, NULL);
+	if(wifiApObj) zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_ACCESS_POINT, &wifiApIid, wifiApObj, NULL);
+	if(wifiSecObj!=NULL) zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_ACCESS_POINT_SEC, &wifiSecIid, wifiSecObj, NULL);	
+	if(wifiSsidObj)zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_SSID, &wifiSsidIid, wifiSsidObj, NULL);
+	if(wifiRadioObj) zcfgFeObjJsonSet(RDM_OID_WIFI_RADIO, &wifiRadioIid, wifiRadioObj, NULL);
+
+	return ret;
+}
+*/
+
+zcfgRet_t zcfgFeDalWifiGeneralEdit(struct json_object *Jobj, char *replyMsg){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+
+	initGlobalWlObjects();
+	getBasicWlInfo(Jobj);
+
+	if((ret = getWlObj(Jobj,NULL)) != ZCFG_SUCCESS)
+		goto dalwlan_edit_fail;
+
+	if((ret = validateWlObj(Jobj,NULL)) != ZCFG_SUCCESS)
+		goto dalwlan_edit_fail;
+
+	prepareWlObj(Jobj);
+	
+	if((ret = editWifiSsidObjects(Jobj)) != ZCFG_SUCCESS)
+		goto dalwlan_edit_fail;
+
+	if((ret = editWifiSecObject(Jobj)) != ZCFG_SUCCESS)
+		goto dalwlan_edit_fail;
+	
+	/*if((ret = editWifiApWpsObject(Jobj)) != ZCFG_SUCCESS)
+		goto dalwlan_edit_fail;*/
+
+#ifdef CBT_CUSTOMIZATION // 20170525 Max Add
+	if(cbtGuestWifiConfig == false){ // for wireless general
+#endif
+	
+	if((ret = editWifiApObject(Jobj)) != ZCFG_SUCCESS)
+		goto dalwlan_edit_fail;
+	
+	if(div_wifiSubnet)
+	{
+		if((!strcmp(subnetObjAction, "POST")) || (!strcmp(subnetObjAction, "PUT")) || (!strcmp(subnetObjAction, "DELETE"))) {
+			if((ret = cfgWifiSubnetObject(Jobj, subnetObjAction)) != ZCFG_SUCCESS)
+				goto dalwlan_edit_fail;	
+		}
+	}
+	
+	if(div_wifiAdvance)
+	{
+		if((ret = editWifiRadioObjects(Jobj)) != ZCFG_SUCCESS)
+			goto dalwlan_edit_fail;
+	}
+	
+#ifdef CBT_CUSTOMIZATION // 20170525 Max Add
+	}
+#endif
+	setAllWlObjects(Jobj);
+
+dalwlan_edit_fail:
+	freeAllWlObjects();
+	
+	return ret;
+}
+
+zcfgRet_t getWlObj(struct json_object *Jobj, char *replyMsg){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	int ssidIndex;
+
+	// radio obj
+	objIndex_t tmpSsidIid;
+	struct json_object *tmpSsidObj = NULL;
+	const char *tmpLowerLayer = NULL;
+	uint8_t radioIndex;
+	uint8_t tmpRadioIndex;
+
+	// subnet obj
+	objIndex_t tmpSubnetIid;
+	struct json_object *tmpSubnetObj = NULL;
+	const char *tmpIntf = NULL;
+	uint8_t subnetIdx;
+	uint8_t tmpSubnetIdx;	
+	
+	if(!json_object_object_get(Jobj,"Index")){
+		printf("Error : %s needs parameter \"Index\".\n",__FUNCTION__);
+		return ZCFG_NO_SUCH_PARAMETER;
+	}
+
+	// get index
+	ssidIndex = json_object_get_int(json_object_object_get(Jobj,"Index"));
+
+	// ssid/ap/sec 
+	wifiSsidIid.level = 1;
+	wifiSsidIid.idx[0] = ssidIndex;
+	wifiApIid.level = 1;
+	wifiApIid.idx[0] = ssidIndex;
+	wifiSecIid.level = 1;
+	wifiSecIid.idx[0] = ssidIndex;
+
+	// ssid/ap/sec
+	if(zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_SSID, &wifiSsidIid, &wifiSsidObj) != ZCFG_SUCCESS){
+		printf("%s : Get RDM_OID_WIFI_SSID object failed.\n",__FUNCTION__);
+		return ZCFG_NO_SUCH_OBJECT;
+	}
+	if(zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_ACCESS_POINT, &wifiApIid, &wifiApObj) != ZCFG_SUCCESS){
+		printf("%s : Get RDM_OID_WIFI_ACCESS_POINT object failed.\n",__FUNCTION__);
+		return ZCFG_NO_SUCH_OBJECT;
+	}
+	if(zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_ACCESS_POINT_SEC, &wifiSecIid, &wifiSecObj) != ZCFG_SUCCESS){
+		printf("%s : Get RDM_OID_WIFI_ACCESS_POINT_SEC object failed.\n",__FUNCTION__);
+		return ZCFG_NO_SUCH_OBJECT;
+	}
+
+	// radio
+	if(json_object_get_boolean(json_object_object_get(wifiSsidObj, "X_ZYXEL_MainSSID"))){
+		// get radio iid
+		IID_INIT(tmpSsidIid);
+		while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_WIFI_SSID, &tmpSsidIid, &tmpSsidObj) == ZCFG_SUCCESS) {
+			tmpLowerLayer = json_object_get_string(json_object_object_get(tmpSsidObj, "LowerLayers"));
+			sscanf(tmpLowerLayer, "WiFi.Radio.%hhu", &tmpRadioIndex);
+			if(tmpRadioIndex == ssidIndex){
+				break;
+			}
+			json_object_put(tmpSsidObj);
+			tmpSsidObj = NULL;
+		}
+		radioIndex = tmpRadioIndex;
+		json_object_put(tmpSsidObj);
+		tmpSsidObj = NULL;
+		wifiRadioIid.level = 1;
+		wifiRadioIid.idx[0] = radioIndex;
+
+		// get radio obj
+		if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_RADIO, &wifiRadioIid, &wifiRadioObj)) != ZCFG_SUCCESS) {
+			printf("%s : Get RDM_OID_WIFI_RADIO object failed.\n",__FUNCTION__);
+			return ZCFG_NO_SUCH_OBJECT;
+		}
+
+	}
+	else{ // subnet
+	}
+
+	return ZCFG_SUCCESS;
+}
+bool isChannelInList(int num, char *list){
+	char tmpList[100] = {0};
+	char tmpChannel[5] = {0};
+	sprintf(tmpList,",%d,%s,",AutoChannel,list);
+	sprintf(tmpChannel,",%d,",num);
+	if(strstr(tmpList,tmpChannel))
+		return true;
+	else
+		return false;
+}
+zcfgRet_t validateWlObj(struct json_object *Jobj, char *replyMsg){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+
+	// ap: make sure when "wlEnableGuest" is set then "wlGwMode" must be set too
+	if(json_object_object_get(Jobj, "wlEnableGuest") && !json_object_object_get(Jobj, "wlGwMode")){
+		printf("\"wlEnableGuest\" and \"wlGwMode\" should be set in pair.\n");
+		return ZCFG_INVALID_PARAM_VALUE;
+	}
+
+	// radio & subnet
+	if(json_object_get_boolean(json_object_object_get(wifiSsidObj, "X_ZYXEL_MainSSID"))){
+		if((ret = validateWifiRadioObj(Jobj,NULL)) != ZCFG_SUCCESS){
+			return ret;
+		}	
+	}
+	else{
+		if((ret = validateWifiSubnetObj(Jobj,NULL)) != ZCFG_SUCCESS){
+			return ret;
+		}	
+	}
+	
+	// sec obj
+	if((ret = validateWifiSecObj(Jobj,NULL)) != ZCFG_SUCCESS){
+		printf("Security related parameters failed validation..\n");
+		return ret;
+	}	
+	/*
+	*/
+	return ret;
+}
+
+zcfgRet_t validateWifiRadioObj(struct json_object *Jobj, char *replyMsg){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+
+	// radio
+	bool isMainSSID;
+	bool hasBandwidth;
+	bool hasChannel;
+	const char *wl_mode = NULL;
+	const char *curBand = NULL;
+	const char *band;
+	const char *chList;
+	const char *chListUpper;
+	const char *chListLower;
+	const char *chListAC80;	
+
+	// radio: get mainSSID status, X_ZYXEL_Wireless_Mode
+	isMainSSID = json_object_get_boolean(json_object_object_get(wifiSsidObj, "X_ZYXEL_MainSSID"));
+	wl_mode = json_object_get_string(json_object_object_get(wifiRadioObj, "X_ZYXEL_Wireless_Mode"));
+	curBand = json_object_get_string(json_object_object_get(wifiRadioObj, "OperatingFrequencyBand"));
+
+	// radio: get bandwidth and channel status
+	if(json_object_object_get(Jobj, "bandwidth"))
+		hasBandwidth = true;
+	else
+		hasBandwidth = false;
+	if(json_object_object_get(Jobj, "channel"))
+		hasChannel = true;
+	else
+		hasChannel = false;
+
+	// radio: check "bandwidth" and "channel" show or not
+	if(!hasBandwidth && !hasChannel){
+		// pass
+	}
+	else if(!isMainSSID && (hasBandwidth || hasChannel)){
+		printf("Guest SSID does not support Bandwidth and Channel setting.\n");
+		return ZCFG_INVALID_PARAM_VALUE;
+	}
+	else if((hasBandwidth && !hasChannel) || (!hasBandwidth && hasChannel)){
+		printf("Bandwidth and Channel should be set together.\n");
+		return ZCFG_INVALID_PARAM_VALUE;
+	}
+	else{ // main_SSID and hasBandwidth and hasChannel
+
+		// check band and mode
+		if(!strcmp(curBand,"2.4GHz") && (strstr(wl_mode,"n") != NULL)){
+			if(!(bandwidth == 20 || bandwidth == 40 || bandwidth == 0)){
+				printf("In %s %s mode only support \"bandwidth\" = %s.\n",curBand,wl_mode,"20, 40, and 0");
+				return ZCFG_INVALID_PARAM_VALUE;
+			}
+		}
+		else if(!strcmp(curBand,"2.4GHz") && (strstr(wl_mode,"n") == NULL)){
+			if(!(bandwidth == 20)){
+				printf("In %s %s mode only support \"bandwidth\" = %s.\n",curBand,wl_mode,"20");
+				return ZCFG_INVALID_PARAM_VALUE;
+			}
+		}
+		else if(!strcmp(curBand,"5GHz") && (strstr(wl_mode,"n") != NULL) && (strstr(wl_mode,"ac") != NULL)){
+			if(!(bandwidth == 20 || bandwidth == 40 || bandwidth == 80)){
+				printf("In %s %s mode only support \"bandwidth\" = %s.\n",curBand,wl_mode,"20, 40, and 80");
+				return ZCFG_INVALID_PARAM_VALUE;
+			}
+		}
+		else if(!strcmp(curBand,"5GHz") && (strstr(wl_mode,"n") != NULL) && (strstr(wl_mode,"ac") == NULL)){
+			if(!(bandwidth == 20 || bandwidth == 40)){
+				printf("In %s %s mode only support \"bandwidth\" = %s.\n",curBand,wl_mode,"20 and 40");
+				return ZCFG_INVALID_PARAM_VALUE;
+			}
+		}
+		else if(!strcmp(curBand,"5GHz") && (strstr(wl_mode,"n") == NULL) && (strstr(wl_mode,"ac") != NULL)){
+			if(!(bandwidth == 20 || bandwidth == 80)){
+				printf("In %s %s mode only support \"bandwidth\" = %s.\n",curBand,wl_mode,"20 and 80");
+				return ZCFG_INVALID_PARAM_VALUE;
+			}
+		}
+		else if(!strcmp(curBand,"5GHz") && (strstr(wl_mode,"n") == NULL) && (strstr(wl_mode,"ac") == NULL)){
+			if(!(bandwidth == 20)){
+				printf("In %s %s mode only support \"bandwidth\" = %s.\n",curBand,wl_mode,"20");
+				return ZCFG_INVALID_PARAM_VALUE;
+			}
+		}
+		else{
+			// pass
+		}
+
+		// check if channel number correct
+		band = json_object_get_string(json_object_object_get(wifiRadioObj, "OperatingFrequencyBand"));
+		if(!strcmp(band,"2.4GHz")){
+			chList = json_object_get_string(json_object_object_get(wifiRadioObj, "PossibleChannels"));
+			chListUpper = json_object_get_string(json_object_object_get(wifiRadioObj, "X_ZYXEL_UpperChannels"));
+			chListLower = json_object_get_string(json_object_object_get(wifiRadioObj, "X_ZYXEL_LowerChannels"));
+
+			if(!isChannelInList(channel,chList)){
+				printf("%s : available channels are %s\n",__FUNCTION__,chList);
+				return ZCFG_INVALID_PARAM_VALUE;
+			}
+			else if(((bandwidth == 40) || (bandwidth == 0)) && !(isChannelInList(channel,chListLower) || isChannelInList(channel,chListUpper))){
+				printf("%s : available channels are %s,%s\n",__FUNCTION__,chListLower,chListUpper);
+				return ZCFG_INVALID_PARAM_VALUE;
+			}
+			else{
+				// pass
+			}			
+
+		}
+		else{ // 5G
+			chList = json_object_get_string(json_object_object_get(wifiRadioObj, "PossibleChannels"));
+			chListUpper = json_object_get_string(json_object_object_get(wifiRadioObj, "X_ZYXEL_UpperChannels"));
+			chListLower = json_object_get_string(json_object_object_get(wifiRadioObj, "X_ZYXEL_LowerChannels"));
+			chListAC80 = json_object_get_string(json_object_object_get(wifiRadioObj, "X_ZYXEL_AC80_Channels"));
+
+			if((bandwidth == 20) && !isChannelInList(channel,chList)){
+				printf("%s : available channels are %s\n",__FUNCTION__,chList);
+				return ZCFG_INVALID_PARAM_VALUE;
+			}
+			else if((bandwidth == 40) && !(isChannelInList(channel,chListLower) || isChannelInList(channel,chListUpper))){
+				printf("%s : available channels are %s,%s\n",__FUNCTION__,chListLower,chListUpper);
+				return ZCFG_INVALID_PARAM_VALUE;
+			}
+			else if((bandwidth == 80) && !isChannelInList(channel,chListAC80)){
+				printf("%s : available channels are %s\n",__FUNCTION__,chListAC80);
+				return ZCFG_INVALID_PARAM_VALUE;
+			}
+			else{
+				// pass
+			}			
+		}
+	}
+
+	return ret;
+}
+zcfgRet_t validateWifiSubnetObj(struct json_object *Jobj, char *replyMsg){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	bool newSubnetState;
+
+	// subnet: check if sunbet setting is correct
+	if(json_object_object_get(Jobj,"wlSubnetState")){
+		newSubnetState = json_object_get_boolean(json_object_object_get(Jobj,"wlSubnetState"));
+		if(newSubnetState){
+			if(!(json_object_object_get(Jobj,"MinAddress")&&
+				 json_object_object_get(Jobj,"MaxAddress")&&
+				 json_object_object_get(Jobj,"SubnetMask")&&
+				 json_object_object_get(Jobj,"LANIP"))){
+				printf("When enabling subnet setting, all subnet related parameters should be entered.\n");
+				ret = ZCFG_INVALID_PARAM_VALUE;
+			}
+		}
+		if(!newSubnetState){
+			if(json_object_object_get(Jobj,"MinAddress")||
+				 json_object_object_get(Jobj,"MaxAddress")||
+				 json_object_object_get(Jobj,"SubnetMask")||
+				 json_object_object_get(Jobj,"LANIP")){
+				printf("When disabling subnet setting, no subnet related parameter is allowed.\n");
+				ret = ZCFG_INVALID_PARAM_VALUE;
+			}
+		}
+	}
+	else{
+		if(json_object_object_get(Jobj,"MinAddress")||
+			 json_object_object_get(Jobj,"MaxAddress")||
+			 json_object_object_get(Jobj,"SubnetMask")||
+			 json_object_object_get(Jobj,"LANIP")){
+			printf("Please set \"wlSubnetState\" to 1 or 0.\n");
+			ret = ZCFG_INVALID_PARAM_VALUE;
+		}
+	}
+	return ret;
+}
+zcfgRet_t validateWifiSecObj(struct json_object *Jobj, char *replyMsg){
 	zcfgRet_t ret = ZCFG_SUCCESS;
 	objIndex_t wifiWPSIid;
 	struct json_object *wifiWPSObj = NULL;
 	int Index;
 	bool autoGenMoreSecurePasswd;
 	bool wpsEnabled = false;
+	bool isMainSSID;
 
-	if(!json_object_object_get(Jobj, "securityLevel")){
+	if(!json_object_object_get(Jobj, "securityLevel") && !json_object_object_get(Jobj, "secMode")){
 		if(json_object_object_get(Jobj, "wep")||
 			json_object_object_get(Jobj, "WEPKey")||
 			json_object_object_get(Jobj, "AutoGenWepKey")||
@@ -1352,7 +1752,10 @@
 			return ZCFG_SUCCESS;
 	}
 
+	// get parameters
 	Index = json_object_get_int(json_object_object_get(Jobj, "Index"));
+	isMainSSID = json_object_get_boolean(json_object_object_get(wifiSsidObj, "X_ZYXEL_MainSSID"));
+
 	IID_INIT(wifiWPSIid);
 	wifiWPSIid.level = 1;
 	wifiWPSIid.idx[0] = Index;
@@ -1460,8 +1863,8 @@
 			printf("wpaMode must be set to \"wpapsk\" or \"wpa2psk\" or \"wpawpa2psk\".\n");
 			return ZCFG_INVALID_PARAM_VALUE;
 		}
-		// if WPS is on, wpapsk is not available
-		if(!strcmp(wpaMode,"wpapsk") && wpsEnabled){
+		// for main SSID, if WPS is on, then wpapsk is not available
+		if(!strcmp(wpaMode,"wpapsk") && wpsEnabled && isMainSSID){
 			printf("WPS2.0 does not support WPA-PSK. You should disable WPS first.");
 			return ZCFG_REQUEST_REJECT;
 		}
@@ -1476,10 +1879,6 @@
 		else{
 			// When AutoGenPSK is set, psk_value must be set according to AutoGenPSK's value
 			autoGenMoreSecurePasswd = json_object_get_boolean(json_object_object_get(Jobj, "AutoGenPSK"));
-			if(autoGenMoreSecurePasswd && json_object_object_get(Jobj, "psk_value")){
-				printf("\"psk_value\" should not be set when auto-generated password is enabled.\n");
-				return ZCFG_INVALID_PARAM_VALUE;
-			}
 			if(!autoGenMoreSecurePasswd && !json_object_object_get(Jobj, "psk_value")){
 				printf("\"psk_value\" should be set when auto-generated password is disabled.\n");
 				return ZCFG_INVALID_PARAM_VALUE;
@@ -1502,184 +1901,257 @@
 	return ZCFG_SUCCESS;
 }
 
-zcfgRet_t dalcmdWifiGeneralEdit(struct json_object *Jobj, char *replyMsg){
-	zcfgRet_t ret = ZCFG_SUCCESS;
-	int Index;
-	struct json_object *paramObj = NULL;
-	const char *RadioReference = NULL, *SSIDReference = NULL;
-	uint8_t SSIDIdx;
-	const char *band = NULL;
-	int64_t intValue;
-	
-	Index = json_object_get_int(json_object_object_get(Jobj, "Index"));
-	IID_INIT(wifiSsidIid);
-	wifiSsidIid.level = 1;
-	wifiSsidIid.idx[0] = Index;
-	if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_SSID, &wifiSsidIid, &wifiSsidObj)) != ZCFG_SUCCESS) {
-		return ZCFG_NO_SUCH_OBJECT;
+void prepareWlObj(struct json_object *Jobj){
+
+	// ssid obj
+	if(!json_object_object_get(Jobj, "wlEnable")){
+		wlEnable = json_object_get_boolean(json_object_object_get(wifiSsidObj, "Enable"));
 	}
-	
-	RadioReference = json_object_get_string(json_object_object_get(wifiSsidObj, "LowerLayers"));
-	IID_INIT(wifiRadioIid);
-	wifiRadioIid.level = 1;
-	sscanf(RadioReference, "WiFi.Radio.%hhu", &(wifiRadioIid.idx[0]));
-	if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_RADIO, &wifiRadioIid, &wifiRadioObj)) != ZCFG_SUCCESS) {
-		return ZCFG_INTERNAL_ERROR;
+	if(!json_object_object_get(Jobj, "SSID")){
+		SSID = json_object_get_string(json_object_object_get(wifiSsidObj, "SSID"));
 	}
-
-	IID_INIT(wifiApIid);
-	while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_WIFI_ACCESS_POINT, &wifiApIid, &wifiApObj) == ZCFG_SUCCESS) {
-		SSIDReference = json_object_get_string(json_object_object_get(wifiApObj, "SSIDReference"));
-		sscanf(SSIDReference, "WiFi.SSID.%hhu", &SSIDIdx);
-		if(SSIDIdx == wifiSsidIid.idx[0]){
-			break;
-		}
-		json_object_put(wifiApObj);
-		wifiApObj = NULL;
+	if(!json_object_object_get(Jobj, "X_ZYXEL_Multicast_Fwd")){
+		X_ZYXEL_Multicast_Fwd = json_object_get_boolean(json_object_object_get(wifiSsidObj, "X_ZYXEL_Multicast_Fwd"));
 	}
-	if(wifiApObj == NULL)
-		return ZCFG_INTERNAL_ERROR;
-
-	// Get Sec Obj
-	IID_INIT(wifiSecIid);
-	wifiSecIid.level = 1;
-	wifiSecIid.idx[0] = Index;
-	if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_ACCESS_POINT_SEC, &wifiSecIid, &wifiSecObj)) != ZCFG_SUCCESS) {
-		return ZCFG_NO_SUCH_OBJECT;
+	if(!json_object_object_get(Jobj, "upRate")){
+		upRate = json_object_get_int(json_object_object_get(wifiSsidObj, "X_ZYXEL_UpstreamRate"));
+	}
+	if(!json_object_object_get(Jobj, "downRate")){
+		downRate = json_object_get_int(json_object_object_get(wifiSsidObj, "X_ZYXEL_DownstreamRate"));
 	}
-	
-	//wlEnable
-	if((paramObj = json_object_object_get(Jobj, "wlEnable")) != NULL)
-		json_object_object_add(wifiSsidObj, "Enable", JSON_OBJ_COPY(paramObj));
-
-	//SSID
-	if((paramObj = json_object_object_get(Jobj, "SSID")) != NULL)
-		json_object_object_add(wifiSsidObj, "SSID", JSON_OBJ_COPY(paramObj));
-
-	//bandwidth
-	if((paramObj = json_object_object_get(Jobj, "bandwidth")) != NULL){
-		band = json_object_get_string(json_object_object_get(wifiApObj, "OperatingFrequencyBand"));
 
-		intValue = json_object_get_int(paramObj);
-		if(intValue == 0){
-			json_object_object_add(wifiRadioObj, "X_ZYXEL_OBSS_coex", json_object_new_boolean(true));
-			if(!strcmp(band, "2.4GHz")){
-				json_object_object_add(wifiRadioObj, "OperatingChannelBandwidth", json_object_new_string("40MHz"));
-			}
+	// ap obj
+	if(!json_object_object_get(Jobj,"MaxAssociatedDevices")){
+		MaxAssociatedDevices = json_object_get_int(json_object_object_get(wifiApObj, "MaxAssociatedDevices"));
+	}
+	if(!json_object_object_get(Jobj,"wlHide")){
+		if(json_object_get_boolean(json_object_object_get(wifiApObj, "SSIDAdvertisementEnabled"))){
+			wlHide = false;
+			json_object_object_add(Jobj, "wlHide", json_object_new_boolean(false));
 		}
 		else{
-			json_object_object_add(wifiRadioObj, "X_ZYXEL_OBSS_coex", json_object_new_boolean(false));
-			if (intValue == 20)
-				json_object_object_add(wifiRadioObj, "OperatingChannelBandwidth", json_object_new_string("20MHz"));
-			else if (intValue == 40)
-				json_object_object_add(wifiRadioObj, "OperatingChannelBandwidth", json_object_new_string("40MHz"));
-			else if (strcmp(band, "2.4GHz") && intValue == 80)
-				json_object_object_add(wifiRadioObj, "OperatingChannelBandwidth", json_object_new_string("80MHz"));
-			else{
-				if(replyMsg != NULL)
-					strcpy(replyMsg, "Wrong bandwidth value");
-				return ZCFG_INVALID_PARAM_VALUE;
-			}
+			wlHide = true;
+			json_object_object_add(Jobj, "wlHide", json_object_new_boolean(true));
 		}
 	}
-
-	//channel
-	if((paramObj = json_object_object_get(Jobj, "channel")) != NULL){
-		intValue = json_object_get_int(paramObj);
-		if (intValue == 0){
-			json_object_object_add(wifiRadioObj, "AutoChannelEnable", json_object_new_boolean(true));
+	if(!json_object_object_get(Jobj,"wlEnableGuest")){
+		if(json_object_get_boolean(json_object_object_get(wifiApObj, "X_ZYXEL_BssIdIsolation"))){
+			wlEnableGuest = true;
+			json_object_object_add(Jobj, "wlEnableGuest", json_object_new_boolean(true));
 		}
 		else{
-			json_object_object_add(wifiRadioObj, "AutoChannelEnable", json_object_new_boolean(false));
-			json_object_object_add(wifiRadioObj, "Channel", json_object_new_int(intValue));
+			wlEnableGuest = false;
+			json_object_object_add(Jobj, "wlEnableGuest", json_object_new_boolean(false));
+		}
+		if(json_object_get_boolean(json_object_object_get(wifiApObj, "IsolationEnable"))){
+			//strcpy(wlGwMode,"0");
+			wlGwMode = "0";
+			json_object_object_add(Jobj, "wlGwMode", json_object_new_string("0"));
+		}
+		else{
+			//strcpy(wlGwMode,"1");
+			wlGwMode = "1";
+			json_object_object_add(Jobj, "wlGwMode", json_object_new_string("1"));
 		}
 	}
 
-	//MaxAssociatedDevices
-	if((paramObj = json_object_object_get(Jobj, "MaxAssociatedDevices")) != NULL)
-		json_object_object_add(wifiApObj, "MaxAssociatedDevices", JSON_OBJ_COPY(paramObj));
+	// radio obj
+	if(json_object_get_boolean(json_object_object_get(wifiSsidObj, "X_ZYXEL_MainSSID")))
+		prepareWifiRadioObj(Jobj);
 
-	// Security related
-	if(dalcmdValidateWifiSecObj(Jobj,NULL) != ZCFG_SUCCESS){
-		json_object_put(wifiSecObj);
-		wifiSecObj = NULL;
-		printf("Security related parameters failed validation..\n");
+	// subnet obj
+	prepareWifiSubnetObj(Jobj);
+}
+void prepareWifiRadioObj(struct json_object *Jobj){
+
+  	// radio obj: prepare extcha
+	const char *band;
+	const char *chList;
+	const char *chListUpper;
+	const char *chListLower;
+	const char *chListAC80;	
+
+	// Prepare div_wifiSubnet
+	if(!json_object_object_get(Jobj,"div_wifiAdvance")){
+		if(json_object_get_boolean(json_object_object_get(wifiSsidObj,"X_ZYXEL_MainSSID"))){
+			json_object_object_add(Jobj, "div_wifiAdvance", json_object_new_boolean(true));
+			div_wifiAdvance = true;
+		}
+		else{
+			json_object_object_add(Jobj, "div_wifiAdvance", json_object_new_boolean(false));
+			div_wifiAdvance = false;
+		}
+	}	
+
+	// Prepare extcha
+	if(!json_object_object_get(Jobj, "bandwidth")||!json_object_object_get(Jobj, "channel")){
+
+		if(!strcmp(json_object_get_string(json_object_object_get(wifiRadioObj, "ExtensionChannel")),"BelowControlChannel"))
+			extcha == 1;
+		else
+			extcha == 0;
 	}
 	else{
-		if((ret = editWifiSecObject(Jobj)) != ZCFG_SUCCESS){
-			json_object_put(wifiSecObj);
-			wifiSecObj = NULL;
-			printf("Fail to set security related parameters..\n");
+		band = json_object_get_string(json_object_object_get(wifiRadioObj, "OperatingFrequencyBand"));
+		if(!strcmp(band,"2.4GHz")){
+			chList = json_object_get_string(json_object_object_get(wifiRadioObj, "PossibleChannels"));
+			chListUpper = json_object_get_string(json_object_object_get(wifiRadioObj, "X_ZYXEL_UpperChannels"));
+			chListLower = json_object_get_string(json_object_object_get(wifiRadioObj, "X_ZYXEL_LowerChannels"));
+			if(bandwidth==20 && isChannelInList(channel,chList)){
+				extcha = 0;
+				json_object_object_add(Jobj, "extcha", json_object_new_int(0));
+			}
+			else if(bandwidth==40 && isChannelInList(channel,chListLower)){
+				extcha = 1;
+				json_object_object_add(Jobj, "extcha", json_object_new_int(1));
+			}
+			else if(bandwidth==40 && isChannelInList(channel,chListUpper)){
+				extcha = 2;
+				json_object_object_add(Jobj, "extcha", json_object_new_int(2));
+			}
+			else if(bandwidth==0 && isChannelInList(channel,chListLower)){
+				extcha = 1;
+				json_object_object_add(Jobj, "extcha", json_object_new_int(1));
+			}
+			else if(bandwidth==0 && isChannelInList(channel,chListUpper)){
+				extcha = 2;
+				json_object_object_add(Jobj, "extcha", json_object_new_int(2));
+			}
+			else{
+				printf("%s: ERROR!\n",__FUNCTION__);
+			}
+
+		}
+		else{ // 5G
+			chList = json_object_get_string(json_object_object_get(wifiRadioObj, "PossibleChannels"));
+			chListUpper = json_object_get_string(json_object_object_get(wifiRadioObj, "X_ZYXEL_UpperChannels"));
+			chListLower = json_object_get_string(json_object_object_get(wifiRadioObj, "X_ZYXEL_LowerChannels"));
+			chListAC80 = json_object_get_string(json_object_object_get(wifiRadioObj, "X_ZYXEL_AC80_Channels"));
+			if(bandwidth==20 && isChannelInList(channel,chList)){
+				extcha = 0;
+				json_object_object_add(Jobj, "extcha", json_object_new_int(0));
+			}
+			else if(bandwidth==40 && isChannelInList(channel,chListLower)){
+				extcha = 1;
+				json_object_object_add(Jobj, "extcha", json_object_new_int(1));
+			}
+			else if(bandwidth==40 && isChannelInList(channel,chListUpper)){
+				extcha = 2;
+				json_object_object_add(Jobj, "extcha", json_object_new_int(2));
+			}
+			else if(bandwidth==80 && isChannelInList(channel,chListAC80)){
+				extcha = 0;
+				json_object_object_add(Jobj, "extcha", json_object_new_int(0));
+			}
+			else{
+				printf("%s: ERROR!\n",__FUNCTION__);
+			}
 		}
 	}
-	
-	//if(wifiApWpsObj) zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_ACCESS_POINT_WPS, &wifiApWpsIid, wifiApWpsObj, NULL);
-	if(wifiApObj) zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_ACCESS_POINT, &wifiApIid, wifiApObj, NULL);
-	if(wifiSecObj!=NULL) zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_ACCESS_POINT_SEC, &wifiSecIid, wifiSecObj, NULL);	
-	if(wifiSsidObj)zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_SSID, &wifiSsidIid, wifiSsidObj, NULL);
-	if(wifiRadioObj) zcfgFeObjJsonSet(RDM_OID_WIFI_RADIO, &wifiRadioIid, wifiRadioObj, NULL);
-
-	return ret;
-	
 }
+void prepareWifiSubnetObj(struct json_object *Jobj){
+	int index = 0;
+	objIndex_t subnetIid;
+	struct json_object *subnetObj = NULL;
+
+	const char *subnetIntf = NULL;
+	uint8_t SubnetIdx;
+	bool foundSubnet = false;
+	bool curSubnetState;
+	bool newSubnetState;
+	const char *ssidIntf[20]={0};
+
+	// get index
+	index = json_object_get_int(json_object_object_get(Jobj,"Index"));
+	
+	// get RDM subnet obj
+	IID_INIT(subnetIid);
+	while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_DHCPV4_SRV_SUBNET, &subnetIid, &subnetObj) == ZCFG_SUCCESS) {
+		subnetIntf = json_object_get_string(json_object_object_get(subnetObj, "Interface"));
+		sscanf(subnetIntf, "WiFi.SSID.%hhu", &SubnetIdx);
+		if(SubnetIdx == index){
+			foundSubnet = true;
+			break;
+		}
+		json_object_put(subnetObj);
+		subnetObj = NULL;
+	}
 
-zcfgRet_t zcfgFeDalWifiGeneralEdit(struct json_object *Jobj, char *replyMsg){
-	zcfgRet_t ret = ZCFG_SUCCESS;
+	// Get current and new subnet state
+	if(foundSubnet)
+		curSubnetState = json_object_get_boolean(json_object_object_get(subnetObj,"Enable"));
+	else
+		curSubnetState = false;
 
-	initGlobalWlObjects();
-	getBasicWlInfo(Jobj);
+	newSubnetState = json_object_get_boolean(json_object_object_get(Jobj,"wlSubnetState"));
 
-	//set by dalcmd, temporary solution
-	if(json_object_object_get(Jobj, "Index") != NULL){
-		if((ret = dalcmdWifiGeneralEdit(Jobj, replyMsg)) != ZCFG_SUCCESS)
-			goto dalwlan_edit_fail;
-		else
-			return ret;
+	// Prepare action
+	if(!json_object_object_get(Jobj,"subnetObjAction")){
+		if(!curSubnetState && !newSubnetState){
+			json_object_object_add(Jobj, "subnetObjAction", json_object_new_string(""));
+			subnetObjAction = "";
+		}
+		if(!curSubnetState && newSubnetState){
+			json_object_object_add(Jobj, "subnetObjAction", json_object_new_string("POST"));
+			subnetObjAction = "POST";
+		}
+		if(curSubnetState && !newSubnetState){
+			json_object_object_add(Jobj, "subnetObjAction", json_object_new_string("DELETE"));
+			subnetObjAction = "DELETE";
+		}
+		if(curSubnetState && newSubnetState){
+			json_object_object_add(Jobj, "subnetObjAction", json_object_new_string("PUT"));
+			subnetObjAction = "PUT";
+		}
 	}
-	
-	if((ret = editWifiSsidObjects(Jobj)) != ZCFG_SUCCESS)
-		goto dalwlan_edit_fail;
-
-	if((ret = editWifiSecObject(Jobj)) != ZCFG_SUCCESS)
-		goto dalwlan_edit_fail;
-	
-	/*if((ret = editWifiApWpsObject(Jobj)) != ZCFG_SUCCESS)
-		goto dalwlan_edit_fail;*/
-
-#ifdef CBT_CUSTOMIZATION // 20170525 Max Add
-	if(cbtGuestWifiConfig == false){ // for wireless general
-#endif
-	
-	if((ret = editWifiApObject(Jobj)) != ZCFG_SUCCESS)
-		goto dalwlan_edit_fail;
-	
-	if(div_wifiSubnet)
-	{
-		if((!strcmp(subnetObjAction, "POST")) || (!strcmp(subnetObjAction, "PUT")) || (!strcmp(subnetObjAction, "DELETE"))) {
-			if((ret = cfgWifiSubnetObject(Jobj, subnetObjAction)) != ZCFG_SUCCESS)
-				goto dalwlan_edit_fail;	
+	else{
+		// special case
+		if(subnetObjAction == NULL){
+			json_object_object_add(Jobj, "subnetObjAction", json_object_new_string(""));
+			subnetObjAction = "";
 		}
 	}
-	
-	if(div_wifiAdvance)
-	{
-		if((ret = editWifiRadioObjects(Jobj)) != ZCFG_SUCCESS)
-			goto dalwlan_edit_fail;
+
+	// Prepare iid
+	if(!strcmp(subnetObjAction,"DELETE") || !strcmp(subnetObjAction,"PUT")){
+		wifiSubnetIid.level = 1;
+		wifiSubnetIid.idx[0] = subnetIid.idx[0];
 	}
-	
-#ifdef CBT_CUSTOMIZATION // 20170525 Max Add
+
+	// Prepare Interface
+	if(!json_object_object_get(Jobj,"Interface")){
+		if(newSubnetState){
+			sprintf(ssidIntf, "WiFi.SSID.%u", index);
+			json_object_object_add(Jobj, "Interface", json_object_new_string(ssidIntf));
+			Interface = json_object_get_string(json_object_object_get(Jobj,"Interface"));
+		}
 	}
-#endif
-	setAllWlObjects(Jobj);
 
-dalwlan_edit_fail:
-	freeAllWlObjects();
-	
-	return ret;
+	// Prepare div_wifiSubnet
+	if(!json_object_object_get(Jobj,"div_wifiSubnet")){
+		if(json_object_get_boolean(json_object_object_get(wifiSsidObj,"X_ZYXEL_MainSSID"))){
+			json_object_object_add(Jobj, "div_wifiSubnet", json_object_new_boolean(false));
+			div_wifiSubnet = false;
+		}
+		else{
+			json_object_object_add(Jobj, "div_wifiSubnet", json_object_new_boolean(true));
+			div_wifiSubnet = true;
+		}
+	}	
+
+	json_object_put(subnetObj);
 }
 
 void zcfgDalGetIid(struct json_object *Jobj, char *iidName, objIndex_t *iid)
 {
+	if(!strcmp(iidName,"wlSsidIid") && !strcmp(iidName,"wlApIid") && !strcmp(iidName,"wlSecIid")){
+		iid->level = 1;
+		iid->idx[0] = json_object_get_int(json_object_object_get(Jobj,"Index"));
+	}
+	else{
+		printf("Iid name %s is not yet supported.\n",iidName);
+	}	
+	/*
 	struct json_object *iidArray = NULL;
 	uint8_t iidIdx;
 
@@ -1690,6 +2162,7 @@
 			iid->level = iidIdx + 1;
 		}
 	}
+	*/
 	return;
 }
 
Index: libzcfg_fe_dal-1.0/zcfg_fe_dal.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/zcfg_fe_dal.c	2017-07-28 08:28:31.730704170 +0800
+++ libzcfg_fe_dal-1.0/zcfg_fe_dal.c	2017-07-28 09:18:32.588079036 +0800
@@ -941,6 +941,25 @@
 	return false;
 }
 
+zcfgRet_t getObjParamStr(zcfg_offset_t oid, objIndex_t *objIid, char *key, char *value){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	objIndex_t iid;
+	struct json_object *Obj = NULL;
+	
+	IID_INIT(iid);
+	iid.level = 1;
+	iid.idx[0] = objIid->idx[0];
+	if((ret = zcfgFeObjJsonGetWithoutUpdate(oid, &iid, &Obj)) != ZCFG_SUCCESS)
+		return ZCFG_NO_SUCH_OBJECT;
+
+	if(!json_object_object_get(Obj, key))
+		return ZCFG_NO_SUCH_PARAMETER;
+
+	strcpy(value,json_object_get_string(json_object_object_get(Obj, key)));
+	json_object_put(Obj);
+	return ret;
+}
+
 bool validateEmailAddr(const char *emailAddr){
 	char buff[128] = {0}, tmp1[128] = {0}, tmp2[128] = {0}, tmp3[128] = {0};
     char *temp1 = NULL, *temp2 = NULL, *temp3 = NULL;
