Index: libzcfg_fe_dal-1.0/network/dns/zcfg_fe_dal_dns_entry.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/network/dns/zcfg_fe_dal_dns_entry.c	2017-04-20 13:32:56.808256104 +0800
+++ libzcfg_fe_dal-1.0/network/dns/zcfg_fe_dal_dns_entry.c	2017-04-20 13:34:50.192173000 +0800
@@ -12,115 +12,99 @@
 
 dal_param_t DNS_ENTRY_param[] =
 {
-	{"HostName", 	dalType_string, 1, 	256, 	NULL},
-	{"IPv4Address", dalType_v4Addr,	0,	0,		NULL},	
-	{NULL, 			0, 				0, 	0, 		NULL}
+	{"Index", 		dalType_int, 	0, 	0,	 	NULL,	NULL,	dal_Edit|dal_Delete},
+	{"HostName", 	dalType_string, 1, 	256, 	NULL,	NULL,	dal_Add},
+	{"IPv4Address", dalType_v4Addr,	0,	0,		NULL,	NULL,	dal_Add},	
+	{NULL, 			0, 				0, 	0, 		NULL,	NULL,	NULL}
 };
-
-zcfgRet_t zcfgFeDalDnsEntryAdd(struct json_object *Jobj, char *replyMsg)
-{
-	zcfgRet_t ret = ZCFG_SUCCESS;
-	const char *paraName;
-	objIndex_t objIid;
-	struct json_object *dnsJobj = NULL;
-	int paramModified = 0, n = 0;
-
-	paraName = (const char *)DNS_ENTRY_param[n++].paraName;
-	
-	IID_INIT(objIid);
-	zcfgFeObjJsonAdd(RDM_OID_DNS_ENTRY, &objIid, NULL);
-	if((ret = zcfgFeObjJsonGet(RDM_OID_DNS_ENTRY, &objIid, &dnsJobj)) != ZCFG_SUCCESS) {
-		printf("%s: Object retrieve fail\n", __FUNCTION__);
-		return ret;
+void zcfgFeDalShowDnsEntry(struct json_object *Jarray){
+	int i, len = 0;
+	struct json_object *obj = NULL;
+	
+	if(json_object_get_type(Jarray) != json_type_array){
+		printf("wrong Jobj format!\n");
+		return;
+	}
+	printf("%-20s %-30s %-30s\n",
+			"Index", "Host Name", "IP Address");
+	len = json_object_array_length(Jarray);
+	for(i=0;i<len;i++){
+		obj = json_object_array_get_idx(Jarray,i);
+		printf("%-20s %-30s %-30s\n",
+			json_object_get_string(json_object_object_get(obj, "Index")),
+			json_object_get_string(json_object_object_get(obj, "HostName")),
+			json_object_get_string(json_object_object_get(obj, "IPv4Address")));
 	}
-	
-	while(paraName){
-		struct json_object *paramValue = json_object_object_get(Jobj, paraName);
-		if(!paramValue) {
-			paraName = (const char *)DNS_ENTRY_param[n++].paraName;
-			continue;
 		}
 		
-		json_object_object_add(dnsJobj, paraName, JSON_OBJ_COPY(paramValue));
-		paramModified = 1;			
+zcfgRet_t zcfgFeDalDnsEntryAdd(struct json_object *Jobj, char *replyMsg){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	struct json_object *dnsEntryObj = NULL;
+	objIndex_t dnsEntryIid = {0};
+	const char *hostname = NULL;
+	const char *IPv4Address = NULL;
+
+	if(zcfgFeObjJsonAdd(RDM_OID_DNS_ENTRY, &dnsEntryIid, NULL) == ZCFG_SUCCESS){
+		if(zcfgFeObjJsonGet(RDM_OID_DNS_ENTRY, &dnsEntryIid, &dnsEntryObj) == ZCFG_SUCCESS){
+			hostname = json_object_get_string(json_object_object_get(Jobj, "HostName"));
+			IPv4Address = json_object_get_string(json_object_object_get(Jobj, "IPv4Address"));
+			json_object_object_add(dnsEntryObj, "HostName", json_object_new_string(hostname));
+			json_object_object_add(dnsEntryObj, "IPv4Address", json_object_new_string(IPv4Address));
 
-		paraName = (const char *)DNS_ENTRY_param[n++].paraName;
+			ret = zcfgFeObjJsonSet(RDM_OID_DNS_ENTRY, &dnsEntryIid, dnsEntryObj, NULL);
+			zcfgFeJsonObjFree(dnsEntryObj);
 	}
-
-	if(paramModified) {
-		if((ret = zcfgFeObjJsonSet(RDM_OID_DNS_ENTRY, &objIid, dnsJobj, NULL)) != ZCFG_SUCCESS)
-			printf("%s: Write object fail\n", __FUNCTION__);
 	}
-
-	json_object_put(dnsJobj);
 	return ret;
 }
-zcfgRet_t zcfgFeDalDnsEntryEdit(struct json_object *Jobj, char *replyMsg)
-{
+zcfgRet_t zcfgFeDalDnsEntryEdit(struct json_object *Jobj, char *replyMsg){
+	zcfgRet_t ret= ZCFG_SUCCESS;
+	struct json_object *dnsEntryObj = NULL;
+	objIndex_t dnsEntryIid = {0};
+	const char *hostname = NULL;
+	const char *IPv4Address = NULL;
+	dnsEntryIid.level = 1;
+	dnsEntryIid.idx[0] = json_object_get_int(json_object_object_get(Jobj, "Index"));
+
+	if(zcfgFeObjJsonGet(RDM_OID_DNS_ENTRY, &dnsEntryIid, &dnsEntryObj) == ZCFG_SUCCESS){
+		hostname = json_object_get_string(json_object_object_get(Jobj, "HostName"));
+		IPv4Address = json_object_get_string(json_object_object_get(Jobj, "IPv4Address"));
+		if(hostname)
+			json_object_object_add(dnsEntryObj, "HostName", json_object_new_string(hostname));
+		if(IPv4Address)
+			json_object_object_add(dnsEntryObj, "IPv4Address", json_object_new_string(IPv4Address));
 
-	zcfgRet_t ret = ZCFG_SUCCESS;
-	const char *paraName;
-	objIndex_t objIid;
-	struct json_object *dnsJobj = NULL;
-	int paramModified = 0, n = 0;
-	struct json_object *iidArray = NULL;
-    uint8_t iidIdx =0;
-	paraName = (const char *)DNS_ENTRY_param[n++].paraName;
-	
-	//IID_INIT(objIid);
-	iidArray = json_object_object_get(Jobj, "iid");
-	
-	for(iidIdx=0;iidIdx<6;iidIdx++){
-		objIid.idx[iidIdx] = json_object_get_int( json_object_array_get_idx(iidArray, iidIdx));
-		if(objIid.idx[iidIdx] != 0)
-			objIid.level = iidIdx+1;
+		ret = zcfgFeObjJsonSet(RDM_OID_DNS_ENTRY, &dnsEntryIid, dnsEntryObj, NULL);
+		zcfgFeJsonObjFree(dnsEntryObj);
 	}
-	
-	if((ret = zcfgFeObjJsonGet(RDM_OID_DNS_ENTRY, &objIid, &dnsJobj)) != ZCFG_SUCCESS) {
 		return ret;
 	}
+zcfgRet_t zcfgFeDalDnsEntryDelete(struct json_object *Jobj, char *replyMsg){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	objIndex_t dnsEntryIid = {0};
 	
-	while(paraName){
-		struct json_object *paramValue = json_object_object_get(Jobj, paraName);
-		if(!paramValue) {
-			paraName = (const char *)DNS_ENTRY_param[n++].paraName;
-			continue;
-		}
+	dnsEntryIid.level = 1;
+	dnsEntryIid.idx[0] = json_object_get_int(json_object_object_get(Jobj, "Index"));
+	zcfgFeObjJsonDel(RDM_OID_DNS_ENTRY, &dnsEntryIid, NULL);
 		
-		json_object_object_add(dnsJobj, paraName, JSON_OBJ_COPY(paramValue));
-		paramModified = 1;			
-		paraName = (const char *)DNS_ENTRY_param[n++].paraName;
-	}
-
-	if(paramModified) {
-		if((ret = zcfgFeObjJsonSet(RDM_OID_DNS_ENTRY, &objIid, dnsJobj, NULL)) != ZCFG_SUCCESS);
-	}
-
-	json_object_put(dnsJobj);
 	return ret;
 }
-zcfgRet_t zcfgFeDalDnsEntryDelete(struct json_object *Jobj, char *replyMsg){
-
+zcfgRet_t zcfgFeDalDnsEntryGet(struct json_object *Jarray, char *replyMsg){
 	zcfgRet_t ret = ZCFG_SUCCESS;
-	objIndex_t objIid;
-	struct json_object *iidArray = NULL;
-    uint8_t iidIdx =0;
-
-	
-	//IID_INIT(objIid);
-	iidArray = json_object_object_get(Jobj, "iid");
-	
-	for(iidIdx=0;iidIdx<6;iidIdx++){
-		objIid.idx[iidIdx] = json_object_get_int( json_object_array_get_idx(iidArray, iidIdx));
-		if(objIid.idx[iidIdx] != 0)
-			objIid.level = iidIdx+1;
+	struct json_object *dnsEntryObj = NULL;
+	struct json_object *paramJobj = NULL;
+	objIndex_t dnsEntryIid = {0};
+	while(zcfgFeObjJsonGetNext(RDM_OID_DNS_ENTRY, &dnsEntryIid, &dnsEntryObj) == ZCFG_SUCCESS){
+		paramJobj = json_object_new_object();
+		json_object_object_add(paramJobj, "HostName", JSON_OBJ_COPY(json_object_object_get(dnsEntryObj, "HostName")));
+		json_object_object_add(paramJobj, "IPv4Address", JSON_OBJ_COPY(json_object_object_get(dnsEntryObj, "IPv4Address")));
+		json_object_object_add(paramJobj, "Index", json_object_new_int(dnsEntryIid.idx[0]));
+		json_object_array_add(Jarray, paramJobj);
+		zcfgFeJsonObjFree(dnsEntryObj);
 	}
-	
-	zcfgFeObjJsonDel(RDM_OID_DNS_ENTRY, &objIid, NULL);
-	
 	return ret;
-	
 }
+	
 zcfgRet_t zcfgFeDalDnsEntry(const char *method, struct json_object *Jobj, char *replyMsg)
 {
 	zcfgRet_t ret = ZCFG_SUCCESS;
@@ -137,6 +121,9 @@
 	else if(!strcmp(method, "DELETE")) {
 		ret = zcfgFeDalDnsEntryDelete(Jobj, NULL);
 	}
+	else if(!strcmp(method,"GET")){
+		ret = zcfgFeDalDnsEntryGet(Jobj, NULL);
+	}
 
 	return ret;
 }
Index: libzcfg_fe_dal-1.0/zcfg_fe_dal.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/zcfg_fe_dal.c	2017-04-20 13:32:57.712256109 +0800
+++ libzcfg_fe_dal-1.0/zcfg_fe_dal.c	2017-04-20 13:36:05.475641700 +0800
@@ -161,13 +161,14 @@
 extern void zcfgFeDalShowWan(struct json_object *Jarray);
 extern void zcfgFeDalShowDDns(struct json_object *Jarray);
 extern void zcfgFeDalShowIntrGrp(struct json_object *Jarray);
+extern void zcfgFeDalShowDnsEntry(struct json_object *Jarray);
 extern void zcfgFeDalShowIGMPMLD(struct json_object *Jarray);
 
 dal_handler_t dalHandler[] = {
 {"WAN",				WAN_param,			zcfgFeDalWan,			zcfgFeDalShowWan,			"get",				"Broadband"},
 {"MGMT",			MGMT_param,			zcfgFeDalMgmt,			NULL,						"edit",				""}, //TR-069_Client
 {"ETHWANLAN", 		ETHWANLAN_param, 	zcfgFeDalEthWanLan,		NULL,						"edit",				""}, //Broadband
-{"DNS_ENTRY",		DNS_ENTRY_param,	zcfgFeDalDnsEntry,		NULL,						"add|edit|delete",	""}, //DNS
+{"DNS_ENTRY",		DNS_ENTRY_param,	zcfgFeDalDnsEntry,		zcfgFeDalShowDnsEntry,		"get|add|edit|delete",	"DNS"}, //DNS
 {"D_DNS",			D_DNS_param,		zcfgFeDalDDns,			zcfgFeDalShowDDns,			"get|edit",			"DNS"},
 {"ADVANCE",			ADVANCE_param,		zcfgFeDalWanAdvance,	NULL,						"edit",				""}, //Broadband
 {"WWANBACKUP", 		WWANBACKUP_param,	zcfgFeDalWwanBackup,	NULL,						"edit",				""}, //Broadband
