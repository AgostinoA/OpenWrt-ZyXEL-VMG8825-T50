Index: libzcfg_fe_dal-1.0/network/nat/zcfg_fe_dal_nat_port_triggering.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/network/nat/zcfg_fe_dal_nat_port_triggering.c	2017-06-28 21:33:03.802493312 +0800
+++ libzcfg_fe_dal-1.0/network/nat/zcfg_fe_dal_nat_port_triggering.c	2017-06-28 21:40:47.782641053 +0800
@@ -12,17 +12,17 @@
 
 dal_param_t NAT_PORT_TRIGGERING_param[] =
 {
-	{"Enable",		dalType_boolean,	0,	0,	NULL},
-	{"Interface",		dalType_string,	0,	256,	NULL},
-	{"TriggerPort",		dalType_int,	0,	63737,	NULL},
-	{"TriggerPortEndRange",		dalType_int,	0,	63737,	NULL},
-	{"OpenPort",		dalType_int,	0,	63737,	NULL},
-	{"OpenPortEndRange",		dalType_int,	0,	63737,	NULL},
-	{"Protocol",		dalType_string,	0,	3,	NULL},
-	{"TriggerProtocol",		dalType_string,	0,	3,	NULL},
-	{"Description",		dalType_string,	0,	256,	NULL},			
-	{"Index",		dalType_int,	0,	0,	NULL},
-	{NULL,		0,	0,	0,	NULL}
+	{"Index",				dalType_int,			0,	0,		NULL,	NULL,			dal_Edit|dal_Delete},
+	{"Enable",			dalType_boolean,		0,	0,		NULL,	NULL,			0},
+	{"Description",		dalType_string,		1,	256,		NULL,	NULL,			dal_Add},
+	{"Interface",			dalType_RtWanWWan,	0,	0,		NULL,	NULL,			dal_Add},
+	{"TriggerPortStart",	dalType_int,			1,	65535,	NULL,	NULL,			dal_Add},
+	{"TriggerPortEnd",		dalType_int,			1,	65535,	NULL,	NULL,			dal_Add},
+	{"OpenPortStart",		dalType_int,			1,	65535,	NULL,	NULL,			dal_Add},
+	{"OpenPortEnd",		dalType_int,			1,	65535,	NULL,	NULL,			dal_Add},
+	{"OpenProtocol",		dalType_string,		0,	0,		NULL,	"TCP|UDP|ALL",	dal_Add},
+	{"TriggerProtocol",		dalType_string,		0,	0,		NULL,	"TCP|UDP|ALL",	dal_Add},
+	{NULL,				0,					0,	0,		NULL,	NULL,			0}
 };
 
 zcfgRet_t zcfgFeDalNatPortTriggeringAdd(struct json_object *Jobj, char *replyMsg)
@@ -31,7 +31,6 @@
 	struct json_object *NatPortTriggeringJobj = NULL;
 	objIndex_t objIid = {0};
 	bool enable = false;
-	const char *name = NULL;
 	const char *interface = NULL;
 	int triggerport = 0;
 	int triggerportendrange = 0;
@@ -41,6 +40,21 @@
 	const char *triggerprotocol = NULL;
 	const char *description = NULL;
 
+	if (json_object_object_get(Jobj, "Description")) {
+		// check Description is duplicated or not.
+		description = json_object_get_string(json_object_object_get(Jobj, "Description"));
+		IID_INIT(objIid);
+		while(ret = zcfgFeObjJsonGetNext(RDM_OID_NAT_PORT_TRIGGERING, &objIid, &NatPortTriggeringJobj) == ZCFG_SUCCESS) {
+			if(strcmp(description,json_object_get_string(json_object_object_get(NatPortTriggeringJobj, "Description")))==0){
+				if(replyMsg != NULL)
+					strcat(replyMsg, "Description is duplicated");
+				zcfgFeJsonObjFree(NatPortTriggeringJobj);
+				return ZCFG_INVALID_PARAM_VALUE;
+			}
+			zcfgFeJsonObjFree(NatPortTriggeringJobj);
+		}
+	}
+
 	IID_INIT(objIid);
 	ret = zcfgFeObjJsonAdd(RDM_OID_NAT_PORT_TRIGGERING, &objIid, NULL);
 	if(ret == ZCFG_SUCCESS){
@@ -50,14 +64,20 @@
 	if(ret == ZCFG_SUCCESS){
 		enable = json_object_get_boolean(json_object_object_get(Jobj, "Enable"));
 		interface = json_object_get_string(json_object_object_get(Jobj, "Interface"));
-		triggerport = json_object_get_int(json_object_object_get(Jobj, "TriggerPort"));
-		triggerportendrange = json_object_get_int(json_object_object_get(Jobj, "TriggerPortEndRange"));
-		openport = json_object_get_int(json_object_object_get(Jobj, "OpenPort"));
-		openportendrange = json_object_get_int(json_object_object_get(Jobj, "OpenPortEndRange"));
-		protocol = json_object_get_string(json_object_object_get(Jobj, "Protocol"));
+		triggerport = json_object_get_int(json_object_object_get(Jobj, "TriggerPortStart"));
+		triggerportendrange = json_object_get_int(json_object_object_get(Jobj, "TriggerPortEnd"));
+		openport = json_object_get_int(json_object_object_get(Jobj, "OpenPortStart"));
+		openportendrange = json_object_get_int(json_object_object_get(Jobj, "OpenPortEnd"));
+		protocol = json_object_get_string(json_object_object_get(Jobj, "OpenProtocol"));
 		triggerprotocol = json_object_get_string(json_object_object_get(Jobj, "TriggerProtocol"));
 		description = json_object_get_string(json_object_object_get(Jobj, "Description"));
 	
+		if (triggerport > triggerportendrange || openport > openportendrange) {
+			if(replyMsg != NULL)
+				strcat(replyMsg, "start port can not great than end port.");
+			zcfgFeJsonObjFree(NatPortTriggeringJobj);
+			return ZCFG_INVALID_PARAM_VALUE;
+		}
 		json_object_object_add(NatPortTriggeringJobj, "Enable", json_object_new_boolean(enable));
 		json_object_object_add(NatPortTriggeringJobj, "Interface", json_object_new_string(interface));
 		json_object_object_add(NatPortTriggeringJobj, "TriggerPort", json_object_new_int(triggerport));
@@ -73,12 +93,13 @@
 	zcfgFeJsonObjFree(NatPortTriggeringJobj);
 	return ret;
 }
+
 zcfgRet_t zcfgFeDalNatPortTriggeringEdit(struct json_object *Jobj, char *replyMsg)
 {
 
 	zcfgRet_t ret = ZCFG_SUCCESS;
 	struct json_object *NatPortTriggeringJobj = NULL;
-	objIndex_t objIid = {0};
+	objIndex_t objIid = {0}, iid = {0};
 	bool enable = false;
 	const char *interface = NULL;
 	int triggerport = 0;
@@ -89,43 +110,79 @@
 	const char *triggerprotocol = NULL;
 	const char *description = NULL;
 	int index = 0;
-	int count = 0;
-	bool found = false;
 	
 	index = json_object_get_int(json_object_object_get(Jobj, "Index"));
-	IID_INIT(objIid);
-	while(ret = zcfgFeObjJsonGetNext(RDM_OID_NAT_PORT_TRIGGERING, &objIid, &NatPortTriggeringJobj) == ZCFG_SUCCESS) {
-		if(count == index){
-			found = true;
-			break;
+	ret = convertIndextoIid(index, &objIid, RDM_OID_NAT_PORT_TRIGGERING, NULL, NULL, replyMsg);
+	if(ret != ZCFG_SUCCESS)
+		return ret;
+
+	if (json_object_object_get(Jobj, "Description")) {
+		// check Description is duplicated or not.
+		description = json_object_get_string(json_object_object_get(Jobj, "Description"));
+		IID_INIT(iid);
+		while(ret = zcfgFeObjJsonGetNext(RDM_OID_NAT_PORT_TRIGGERING, &iid, &NatPortTriggeringJobj) == ZCFG_SUCCESS) {
+			if (objIid.idx[0] == iid.idx[0]) {
+				zcfgFeJsonObjFree(NatPortTriggeringJobj);
+				continue;
 		}
-		else
-			count++;
+			if(strcmp(description,json_object_get_string(json_object_object_get(NatPortTriggeringJobj, "Description")))==0){
+				if(replyMsg != NULL)
+					strcat(replyMsg, "Description is duplicated");
+				zcfgFeJsonObjFree(NatPortTriggeringJobj);
+				return ZCFG_INVALID_PARAM_VALUE;
+			}
+			zcfgFeJsonObjFree(NatPortTriggeringJobj);
+		}
+		}
+
+	if((ret = zcfgFeObjJsonGet(RDM_OID_NAT_PORT_TRIGGERING, &objIid, &NatPortTriggeringJobj)) != ZCFG_SUCCESS) {
+		printf("%s():(ERROR) zcfgFeObjJsonGet get port trigger fail oid(%d)\n ",__FUNCTION__,RDM_OID_NAT_PORT_TRIGGERING);
+		return ZCFG_INTERNAL_ERROR;
 	}
-	if(found){
-		enable = json_object_get_boolean(json_object_object_get(Jobj, "Enable"));
-		interface = json_object_get_string(json_object_object_get(Jobj, "Interface"));
-		triggerport = json_object_get_int(json_object_object_get(Jobj, "TriggerPort"));
-		triggerportendrange = json_object_get_int(json_object_object_get(Jobj, "TriggerPortEndRange"));
-		openport = json_object_get_int(json_object_object_get(Jobj, "OpenPort"));
-		openportendrange = json_object_get_int(json_object_object_get(Jobj, "OpenPortEndRange"));
-		protocol = json_object_get_string(json_object_object_get(Jobj, "Protocol"));
-		triggerprotocol = json_object_get_string(json_object_object_get(Jobj, "TriggerProtocol"));
-		description = json_object_get_string(json_object_object_get(Jobj, "Description"));
 
+	if (json_object_object_get(Jobj, "Enable")) {
+		enable = json_object_get_boolean(json_object_object_get(Jobj, "Enable"));
 		json_object_object_add(NatPortTriggeringJobj, "Enable", json_object_new_boolean(enable));
+	}
+	if (json_object_object_get(Jobj, "Interface")) {
+		interface = json_object_get_string(json_object_object_get(Jobj, "Interface"));
 		json_object_object_add(NatPortTriggeringJobj, "Interface", json_object_new_string(interface));
+	}
+	if (json_object_object_get(Jobj, "TriggerPortStart")) {
+		triggerport = json_object_get_int(json_object_object_get(Jobj, "TriggerPortStart"));
 		json_object_object_add(NatPortTriggeringJobj, "TriggerPort", json_object_new_int(triggerport));
+	}
+	if (json_object_object_get(Jobj, "TriggerPortEnd")) {
+		triggerportendrange = json_object_get_int(json_object_object_get(Jobj, "TriggerPortEnd"));
 		json_object_object_add(NatPortTriggeringJobj, "TriggerPortEndRange", json_object_new_int(triggerportendrange));
+	}
+	if (json_object_object_get(Jobj, "OpenPortStart")) {
+		openport = json_object_get_int(json_object_object_get(Jobj, "OpenPortStart"));
 		json_object_object_add(NatPortTriggeringJobj, "OpenPort", json_object_new_int(openport));
+	}
+	if (json_object_object_get(Jobj, "OpenPortEnd")) {
+		openportendrange = json_object_get_int(json_object_object_get(Jobj, "OpenPortEnd"));
 		json_object_object_add(NatPortTriggeringJobj, "OpenPortEndRange", json_object_new_int(openportendrange));
+	}
+	if (json_object_object_get(Jobj, "OpenProtocol")) {
+		protocol = json_object_get_string(json_object_object_get(Jobj, "OpenProtocol"));
 		json_object_object_add(NatPortTriggeringJobj, "Protocol", json_object_new_string(protocol));
+	}
+	if (json_object_object_get(Jobj, "TriggerProtocol")) {
+		triggerprotocol = json_object_get_string(json_object_object_get(Jobj, "TriggerProtocol"));
 		json_object_object_add(NatPortTriggeringJobj, "TriggerProtocol", json_object_new_string(triggerprotocol));
+	}
+	if (json_object_object_get(Jobj, "Description")) {
+		description = json_object_get_string(json_object_object_get(Jobj, "Description"));
 		json_object_object_add(NatPortTriggeringJobj, "Description", json_object_new_string(description));
-
-		ret = zcfgFeObjJsonSet(RDM_OID_NAT_PORT_TRIGGERING, &objIid, NatPortTriggeringJobj, NULL);
 	}
-
+	if (triggerport > triggerportendrange || openport > openportendrange) {
+		if(replyMsg != NULL)
+			strcat(replyMsg, "start port can not great than end port.");
+		zcfgFeJsonObjFree(NatPortTriggeringJobj);
+		return ZCFG_INVALID_PARAM_VALUE;
+	}
+		ret = zcfgFeObjJsonSet(RDM_OID_NAT_PORT_TRIGGERING, &objIid, NatPortTriggeringJobj, NULL);
 	zcfgFeJsonObjFree(NatPortTriggeringJobj);
 	return ret;
 }
@@ -136,10 +193,10 @@
 	struct json_object *NatPortTriggeringJobj = NULL;
 	objIndex_t objIid = {0};
 	int index = 0;
-	int count = 0;
+	int count = 1;
 	bool found = false;
 	
-	index = json_object_get_int(json_object_object_get(Jobj, "rowIdx"));
+	index = json_object_get_int(json_object_object_get(Jobj, "Index"));
 	
 	IID_INIT(objIid);
 	while(zcfgFeObjJsonGetNext(RDM_OID_NAT_PORT_TRIGGERING, &objIid, &NatPortTriggeringJobj) == ZCFG_SUCCESS) {
@@ -158,6 +215,64 @@
 	return ret;
 	
 }
+
+zcfgRet_t zcfgFeDalNatPortTriggeringGet(struct json_object *Jobj, char *replyMsg)
+{
+	struct json_object *NatPortTriggeringJobj = NULL;
+	struct json_object *paramJobj = NULL;
+	objIndex_t objIid = {0};
+	int index = 0;
+
+	IID_INIT(objIid);
+	while(zcfgFeObjJsonGetNext(RDM_OID_NAT_PORT_TRIGGERING, &objIid, &NatPortTriggeringJobj) == ZCFG_SUCCESS) {
+		++index;
+		paramJobj = json_object_new_object();
+		json_object_object_add(paramJobj, "Enable", JSON_OBJ_COPY(json_object_object_get(NatPortTriggeringJobj, "Enable")));
+		json_object_object_add(paramJobj, "Interface", JSON_OBJ_COPY(json_object_object_get(NatPortTriggeringJobj, "Interface")));
+		json_object_object_add(paramJobj, "TriggerPort", JSON_OBJ_COPY(json_object_object_get(NatPortTriggeringJobj, "TriggerPort")));
+		json_object_object_add(paramJobj, "TriggerPortEndRange", JSON_OBJ_COPY(json_object_object_get(NatPortTriggeringJobj, "TriggerPortEndRange")));
+		json_object_object_add(paramJobj, "OpenPort", JSON_OBJ_COPY(json_object_object_get(NatPortTriggeringJobj, "OpenPort")));
+		json_object_object_add(paramJobj, "OpenPortEndRange", JSON_OBJ_COPY(json_object_object_get(NatPortTriggeringJobj, "OpenPortEndRange")));
+		json_object_object_add(paramJobj, "Protocol", JSON_OBJ_COPY(json_object_object_get(NatPortTriggeringJobj, "Protocol")));
+		json_object_object_add(paramJobj, "TriggerProtocol", JSON_OBJ_COPY(json_object_object_get(NatPortTriggeringJobj, "TriggerProtocol")));
+		json_object_object_add(paramJobj, "Description", JSON_OBJ_COPY(json_object_object_get(NatPortTriggeringJobj, "Description")));
+		json_object_object_add(paramJobj, "Index", json_object_new_int(index));
+		json_object_array_add(Jobj, paramJobj);
+		zcfgFeJsonObjFree(NatPortTriggeringJobj);
+	}
+
+	return ZCFG_SUCCESS;
+	
+}
+
+void zcfgFeDalShowPortTrigger(struct json_object *Jarray){
+	int i, len = 0;
+	struct json_object *obj;
+
+	if(json_object_get_type(Jarray) != json_type_array){
+		printf("wrong Jobj format!\n");
+		return;
+	}
+
+	printf("%-5s %-15s %-7s %-15s %-17s %-15s %-15s %-15s %-15s %-13s\n",
+		    "Index", "Description", "Enable", "WAN Interface", "TriggerPortStart", "TriggerPortEnd", "TriggerProto.", "OpenPortStart", "OpenPortEnd", "OpenProtocol");
+	len = json_object_array_length(Jarray);
+	for(i=0;i<len;i++){
+		obj = json_object_array_get_idx(Jarray, i);
+		printf("%-5s %-15s %-7d %-15s %-17s %-15s %-15s %-15s %-15s %-13s\n",
+			json_object_get_string(json_object_object_get(obj, "Index")),
+			json_object_get_string(json_object_object_get(obj, "Description")),
+			json_object_get_boolean(json_object_object_get(obj, "Enable")),
+			json_object_get_string(json_object_object_get(obj, "Interface")),
+			json_object_get_string(json_object_object_get(obj, "TriggerPort")),
+			json_object_get_string(json_object_object_get(obj, "TriggerPortEndRange")),
+			json_object_get_string(json_object_object_get(obj, "TriggerProtocol")),
+			json_object_get_string(json_object_object_get(obj, "OpenPort")),
+			json_object_get_string(json_object_object_get(obj, "OpenPortEndRange")),
+			json_object_get_string(json_object_object_get(obj, "Protocol")));
+	}
+}
+
 zcfgRet_t zcfgFeDalNatPortTriggering(const char *method, struct json_object *Jobj, char *replyMsg)
 {
 	zcfgRet_t ret = ZCFG_SUCCESS;
@@ -174,6 +289,9 @@
 	else if(!strcmp(method, "DELETE")) {
 		ret = zcfgFeDalNatPortTriggeringDelete(Jobj, NULL);
 	}
+	else if(!strcmp(method, "GET")){
+		ret = zcfgFeDalNatPortTriggeringGet(Jobj, replyMsg);
+	}
 
 	return ret;
 }
Index: libzcfg_fe_dal-1.0/zcfg_fe_dal.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/zcfg_fe_dal.c	2017-06-28 21:33:05.242493286 +0800
+++ libzcfg_fe_dal-1.0/zcfg_fe_dal.c	2017-06-28 21:41:27.888384549 +0800
@@ -168,6 +168,7 @@
 extern void zcfgFeDalShowMgmtSrv(struct json_object *Jarray);
 extern void zcfgFeDalShowSPMgmtSrv(struct json_object *Jarray);
 extern void zcfgFeDalShowPortFwd(struct json_object *Jarray);
+extern void zcfgFeDalShowPortTrigger(struct json_object *Jarray);
 extern void zcfgFeDalShowNetworkMAP(struct json_object *Jarray);
 extern void zcfgFeDalShowEthCtl(struct json_object *Jarray);
 extern void zcfgFeDalShowFirewallACL(struct json_object *Jarray);
@@ -218,7 +219,7 @@
 {"policy_route", 	POLICYROUTE_param,	zcfgFeDalPolicyRoute,	zcfgFeDalShowPolicyRoute,	"get|add|edit|delete",	"Routing"}, //Routing
 {"RIP", 			RIP_param,			zcfgFeDalRip,			NULL,						"edit",				""}, //Routing
 {"nat",				NatPortFwd_param,	zcfgFeDalNatPortMapping,zcfgFeDalShowPortFwd,		"get|add|edit|delete", "NAT"},
-{"NAT_PORT_TRIGGERING",NAT_PORT_TRIGGERING_param,zcfgFeDalNatPortTriggering,NULL,			"add|edit|delete", 	""}, //NAT
+{"nat_trigger",NAT_PORT_TRIGGERING_param,zcfgFeDalNatPortTriggering,zcfgFeDalShowPortTrigger,			"get|add|edit|delete", 	"NAT"}, //NAT
 {"NAT_DMZ_ALG",		NAT_DMZ_ALG_param,	zcfgFeDalNatDMZALG, 	NULL,						"edit",				""}, //NAT
 {"NAT_ADDR_MAPPING",NAT_ADDR_MAPPING_param,	zcfgFeDalNatAddrMapping,NULL,					"add|edit|delete",	 ""}, //NAT
 {"NAT_SESSION_CTL", NAT_SESSION_CTL_param,	zcfgFeDalNatSessionCtl,NULL,					"edit",				""}, //NAT
