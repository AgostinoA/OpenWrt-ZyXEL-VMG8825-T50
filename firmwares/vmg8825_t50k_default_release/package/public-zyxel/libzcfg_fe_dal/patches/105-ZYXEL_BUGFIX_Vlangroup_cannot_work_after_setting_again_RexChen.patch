Index: libzcfg_fe_dal-1.0/network/interfaceGrouping/zcfg_fe_dal_intfGrp.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/network/interfaceGrouping/zcfg_fe_dal_intfGrp.c	2017-01-12 17:28:00.066365909 +0800
+++ libzcfg_fe_dal-1.0/network/interfaceGrouping/zcfg_fe_dal_intfGrp.c	2017-01-12 18:24:44.534714900 +0800
@@ -90,11 +90,9 @@
 	char tmp[20] = {0};
 	char *rest_str = NULL;
 
-	//printf("Ipv4AddrtoInt: %s\n", Ipv4_str); 
 	memcpy(tmp, Ipv4_str, strlen(Ipv4_str)+1);
 	pch = strtok_r(tmp, ".", &rest_str);
 	while(pch!=NULL) {
-		//printf("Ipv4AddrtoInt debug: %s\n", pch);
 		Ipv4_int += ((StrToIntConv(pch))<<((3-check_cnt)<<3));
 		pch = strtok_r(rest_str, ".", &rest_str);
 		check_cnt++;
@@ -104,14 +102,12 @@
 			break;
 		}
 	}
-	//printf("Ipv4AddrtoInt, Ipv4_str %s, Ipv4_int %08X\n", Ipv4_str, Ipv4_int);
 	return Ipv4_int;
 }
 
 
 void get_json_array_proc(json_object *ArrayObj, int length, int *output_array) {
 	int i = 0;
-	//printf("get_json_array_proc\n");
 	for(i=0; i<length; i++) {
 		output_array[i] = json_object_get_int(json_object_array_get_idx(ArrayObj, i));
 	}
@@ -133,8 +129,6 @@
 	for(i=0; i<IntfGrpDel_Info->length; i++) {
 		printf("%d ", IntfGrpDel_Info->array[i]);
 	}
-	printf("\n");
-	printf("=====================================\n");
 
 	return;
 }
@@ -168,7 +162,6 @@
 		IntfGrp_info->Iid.array = (int*) malloc((IntfGrp_info->Iid.length)*sizeof(int));
 		get_json_array_proc(IidArrayObj, IntfGrp_info->Iid.length, IntfGrp_info->Iid.array);
 	}
-	//IntfGrp_info->Iid = json_object_get_array(json_object_object_get(Jobj, "Iid"));
 	IntfGrp_info->X_ZYXEL_BridgeName = json_object_get_string(json_object_object_get(Jobj, "X_ZYXEL_BridgeName"));
 	IntfGrp_info->wanIntf = json_object_get_string(json_object_object_get(Jobj, "wanIntf"));
 	IntfGrp_info->lanIntf = json_object_get_string(json_object_object_get(Jobj, "lanIntf"));
@@ -189,7 +182,6 @@
 				(int*)malloc((IntfGrp_info->critInfo[i].critIid.length)*sizeof(int));
 			get_json_array_proc(IidArrayObj, IntfGrp_info->critInfo[i].critIid.length, IntfGrp_info->critInfo[i].critIid.array);
 		}
-		//IntfGrp_info->critInfo[i].critIid = json_object_get_array(json_object_object_get(sub_critInfo, "Iid"));
 		IntfGrp_info->critInfo[i].Bridge = json_object_get_string(json_object_object_get(sub_critInfo, "Bridge"));
 		IntfGrp_info->critInfo[i].org_type = json_object_get_string(json_object_object_get(sub_critInfo, "__org_type"));
 		IntfGrp_info->critInfo[i].optionStr = json_object_get_string(json_object_object_get(sub_critInfo, "optionStr"));
@@ -255,12 +247,6 @@
 		IntfGrp_info->critInfoDel[i].org_type = json_object_get_string(json_object_object_get(sub_critInfo, "__org_type"));
 	}
 
-#if 1
-	printf("======= Dump IntfGrp_info =======\n");
-	printf("X_ZYXEL_BridgeName %s\n", IntfGrp_info->X_ZYXEL_BridgeName);
-	printf("wanIntf %s\n", IntfGrp_info->wanIntf);
-	printf("lanIntf %s\n", IntfGrp_info->lanIntf);
-	printf("critInfoLen %d\n", IntfGrp_info->critInfoLen);
 	for(i=0; i<IntfGrp_info->critInfoLen; i++) {
 		printf("[%d]Iid Length %d\n", i, IntfGrp_info->critInfo[i].critIid.length);
 		printf("[%d]Iid ",i);
@@ -293,11 +279,9 @@
 		for(k=0; k<(IntfGrp_info->critInfoDel[i].critIid.length); k++) {
 			printf("%d ", IntfGrp_info->critInfoDel[i].critIid.array[k]);
 		}
-		printf("\n");
-		printf("[%d]org_type %s\n", i, IntfGrp_info->critInfoDel[i].org_type);
 	}	
-	printf("=================================\n");
-#endif
+
+
 	return;
 }
 
@@ -332,7 +316,7 @@
 	json_object* ethLinkObj;
 	json_object* ipIntfObj;
 	objIndex_t ethLinkIid;
-	//objIndex_t ipIntfIid;
+
 	char ethLinkIntf[50] = "Ethernet.Link.";
 	char temp[30];
 	const char *LowerLayer;
@@ -396,7 +380,6 @@
 		sprintf(temp, "%d", bridgingBrIid.idx[0]);
 		strcat(BridgePortStr, temp);
 		strcat(BridgePortStr, BridgePortStr_2);
-		//ipIntfObj = getIpIfaceBybrManPort(BridgePortStr);
 		IID_INIT(v4AddrIid);
 		while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_IP_IFACE_V4_ADDR, &v4AddrIid, &v4AddrObj) == ZCFG_SUCCESS) {
 			IPAddress = Ipv4AddrtoInt((char*)json_object_get_string(json_object_object_get(v4AddrObj, "IPAddress")));
@@ -408,7 +391,6 @@
 				printf("FindIPidx Error: avlIpRange,length is larger than %d\n", MAX_NUM_OF_IP_INFO);
 				break;
 			}
-			//printf("IP range[%d], Start %08X, End %08X\n", i, avlIpRange.ipRangInfo[i].Start, avlIpRange.ipRangInfo[i].End);
 			i++;
 			zcfgFeJsonObjFree(v4AddrObj);
 		}
@@ -420,7 +402,6 @@
 	while(ipIndex <= 255) {
 		ipS = (192<<24) + (168<<16) + (ipIndex<<8) + 0;
 		ipE = ipS + 255;
-		//printf("ipS %08X, ipE %08X\n", ipS, ipE);
 		for(i=0; i<avlIpRange.length; i++) {
 			if((avlIpRange.ipRangInfo[i].Start <= ipS && ipS <= avlIpRange.ipRangInfo[i].End) &&
 				(avlIpRange.ipRangInfo[i].Start <= ipE && ipE <= avlIpRange.ipRangInfo[i].End))
@@ -429,7 +410,6 @@
 		if(i >= avlIpRange.length) break;
 		ipIndex++;
 	}
-	
 	*IP_idx = ipIndex;
 	return ret;
 }
@@ -503,7 +483,6 @@
 	}
 
 	free(macList_tmp);
-	//printf("macList %s new_macList %s\n", macList, new_macList);
 
 	return;
 }
@@ -631,9 +610,6 @@
 	getIntfGrpBasicInfo(Jobj, &IntfGrp_info);
 
 	//GET RDM_OID_IP_IFACE_V4_ADDR
-	//if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_IP_IFACE_V4_ADDR, &v4AddrIid, &v4AddrObj)) != ZCFG_SUCCESS) {
-	//	return ret;
-	//}
 	/*======================================================================*/
 
 	//printf("1. POST RDM_OID_BRIDGING_BR\n");
@@ -855,26 +831,26 @@
 	sprintf(tmp, "%d", BrIdx);
 	strcat(BrStr, ",br");
 	strcat(BrStr, tmp);
-	strcat(BrStr,"|1");
+	strcat(BrStr,"|2");
 	char snpBr_str[60] = {0};
 	char *snpBrName = NULL;
 	// PUT RDM_OID_ZY_IGMP
-	while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_ZY_IGMP, &igmpIid, &igmpObj) == ZCFG_SUCCESS) {
+	ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_ZY_IGMP, &igmpIid, &igmpObj);
+	if(ret == ZCFG_SUCCESS){
 		snpBrName = (char*)json_object_get_string(json_object_object_get(igmpObj, "SnoopingBridgeIfName"));
 		memcpy(snpBr_str, snpBrName, strlen(snpBrName)+1);
 		strcat(snpBr_str, BrStr);
 		json_object_object_add(igmpObj, "SnoopingBridgeIfName", json_object_new_string(snpBr_str));
-		zcfgFeObjJsonSetWithoutApply(RDM_OID_ZY_IGMP, &igmpIid, igmpObj, NULL);
-		break;
+		zcfgFeObjJsonSet(RDM_OID_ZY_IGMP, &igmpIid, igmpObj, NULL);
 	}
 	// PUT RDM_OID_ZY_MLD
-	while(zcfgFeObjJsonGetWithoutUpdate(RDM_OID_ZY_MLD, &mldIid, &mldObj) == ZCFG_SUCCESS) {
+	ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_ZY_MLD, &mldIid, &mldObj);
+	if(ret == ZCFG_SUCCESS){
 		snpBrName = (char*)json_object_get_string(json_object_object_get(mldObj, "SnoopingBridgeIfName"));
 		memcpy(snpBr_str, snpBrName, strlen(snpBrName)+1);
 		strcat(snpBr_str, BrStr);
 		json_object_object_add(mldObj, "SnoopingBridgeIfName", json_object_new_string(snpBr_str));
-		zcfgFeObjJsonSetWithoutApply(RDM_OID_ZY_MLD, &mldIid, mldObj, NULL);
-		break;
+		zcfgFeObjJsonSet(RDM_OID_ZY_MLD, &mldIid, mldObj, NULL);
 	}
 	/*============================================================================================*/
 
@@ -932,34 +908,17 @@
 	sprintf(temp, "%d", IntfGrp_info.Iid.array[0]);
 	strcat(brPathName, temp);
 
-	for(i=0; i<IntfGrp_info.critInfoDelLen; i++) {
-		if( (IntfGrp_info.critInfoDel[i].org_type != NULL) &&
-			strcmp(IntfGrp_info.critInfoDel[i].org_type, "vlangroup") && 
-			(IntfGrp_info.critInfoDel[i].critIid.length != 0)) {
-			IID_INIT(delBrFilterIid);
-			find = FindObjIid(RDM_OID_BRIDGING_FILTER, IntfGrp_info.critInfoDel[i].critIid, &delBrFilterIid, &delBrFilterObj);
-			if(find == true) {
-				printf("RDM_OID_BRIDGING_FILTER delete %d\n", delBrFilterIid.idx[0]);
-				zcfgFeObjJsonDel(RDM_OID_BRIDGING_FILTER, &delBrFilterIid, NULL);
-				zcfgFeJsonObjFree(delBrFilterObj);
-			}
-		}
-	}
-
 	//Get and PUT RDM_OID_VLAN_GROUP
 	//printf("1. Get and PUT RDM_OID_VLAN_GROUP\n");
 	while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_VLAN_GROUP, &vlanGroupIid, &vlanGroupObj) == ZCFG_SUCCESS) {
-		put = false;
 		vlan_grpName = (char*)json_object_get_string(json_object_object_get(vlanGroupObj, "GroupName"));			
 		org_BrRefKey = (int)json_object_get_int(json_object_object_get(vlanGroupObj, "BrRefKey"));			
 		for(i=0; i<IntfGrp_info.critInfoLen; i++) {
-			if((!strcmp(IntfGrp_info.critInfo[i].type, "vlangroup")) && 
-				(!strcmp(IntfGrp_info.critInfo[i].value, vlan_grpName))) {
+			if((!strcmp(IntfGrp_info.critInfo[i].type, "vlangroup")) && (!strcmp(IntfGrp_info.critInfo[i].value, vlan_grpName))) {
 				put = true;
 				// For type change cases, type change from non-vlan to vlan
 				//delete the old criteria
-				if((IntfGrp_info.critInfo[i].org_type != NULL) && 
-					(strcmp(IntfGrp_info.critInfo[i].org_type, "vlangroup")) &&
+				if((IntfGrp_info.critInfo[i].org_type != NULL) && (strcmp(IntfGrp_info.critInfo[i].org_type, "vlangroup")) &&
 					(IntfGrp_info.critInfo[i].critIid.length != 0)) {
 					IID_INIT(delBrFilterIid);
 					find = FindObjIid(RDM_OID_BRIDGING_FILTER, IntfGrp_info.critInfo[i].critIid, &delBrFilterIid, &delBrFilterObj);
@@ -984,18 +943,29 @@
 		}
 
 		if(put == true) {
-			if(BrRefKey) {
-				json_object_object_add(vlanGroupObj, "BrRefKey", json_object_new_int(*BrRefKey));
-				free(BrRefKey);
-			}
-			else {
+			if(!BrRefKey) {
 				json_object_object_add(vlanGroupObj, "BrRefKey", json_object_new_string(""));
+				zcfgFeObjJsonSet(RDM_OID_VLAN_GROUP, &vlanGroupIid, vlanGroupObj, NULL);
 			}
-			zcfgFeObjJsonSet(RDM_OID_VLAN_GROUP, &vlanGroupIid, vlanGroupObj, NULL);	
 		}
 		zcfgFeJsonObjFree(vlanGroupObj);
 	}
 
+
+	for(i=0; i<IntfGrp_info.critInfoDelLen; i++) {
+		if( (IntfGrp_info.critInfoDel[i].org_type != NULL) &&
+			strcmp(IntfGrp_info.critInfoDel[i].org_type, "vlangroup") && 
+			(IntfGrp_info.critInfoDel[i].critIid.length != 0)) {
+			IID_INIT(delBrFilterIid);
+			find = FindObjIid(RDM_OID_BRIDGING_FILTER, IntfGrp_info.critInfoDel[i].critIid, &delBrFilterIid, &delBrFilterObj);
+			if(find == true) {
+				printf("RDM_OID_BRIDGING_FILTER delete %d\n", delBrFilterIid.idx[0]);
+				zcfgFeObjJsonDel(RDM_OID_BRIDGING_FILTER, &delBrFilterIid, NULL);
+				zcfgFeJsonObjFree(delBrFilterObj);
+			}
+		}
+	}
+
 	//add or update criteria
 	//printf("2. add or update criteria\n");
 	for(i=0; i<IntfGrp_info.critInfoLen; i++) {
@@ -1019,7 +989,7 @@
 				find = FindObjIid(RDM_OID_BRIDGING_FILTER, IntfGrp_info.critInfo[i].critIid, &BrFilterIid, &BrFilterObj);
 				if(find == true) {
 					cirteriaToObject(BrFilterObj, brPathName, &IntfGrp_info.critInfo[i]);
-					zcfgFeObjJsonSetWithoutApply(RDM_OID_BRIDGING_FILTER, &BrFilterIid, BrFilterObj, NULL);
+					zcfgFeObjJsonSet(RDM_OID_BRIDGING_FILTER, &BrFilterIid, BrFilterObj, NULL);
 					zcfgFeJsonObjFree(BrFilterObj);
 					break;
 				}
@@ -1034,7 +1004,7 @@
 				return ret;
 			}
 			cirteriaToObject(newBrFilterObj, brPathName, &IntfGrp_info.critInfo[i]);
-			zcfgFeObjJsonSetWithoutApply(RDM_OID_BRIDGING_FILTER, &newBrFilterIid, newBrFilterObj, NULL);
+			zcfgFeObjJsonSet(RDM_OID_BRIDGING_FILTER, &newBrFilterIid, newBrFilterObj, NULL);
 			zcfgFeJsonObjFree(newBrFilterObj);
 		}
 	}
@@ -1055,7 +1025,7 @@
 			find = FindObjIid(RDM_OID_BRIDGING_BR, IntfGrp_info.Iid, &BrIid, &BrObj);
 			if(find == true) {
 				json_object_object_add(BrObj, "X_ZYXEL_BridgeName", json_object_new_string(IntfGrp_info.X_ZYXEL_BridgeName));
-				zcfgFeObjJsonSetWithoutApply(RDM_OID_BRIDGING_BR, &BrIid, BrObj, NULL);
+				zcfgFeObjJsonSet(RDM_OID_BRIDGING_BR, &BrIid, BrObj, NULL);
 				zcfgFeJsonObjFree(BrObj);
 			}
 		}
@@ -1073,11 +1043,11 @@
 				if(IntfGrp_info.org->X_ZYXEL_BridgeName != NULL) {
 					json_object_object_add(ipIntf_obj, "X_ZYXEL_SrvName", json_object_new_string(IntfGrp_info.X_ZYXEL_BridgeName));
 				}
-				zcfgFeObjJsonSetWithoutApply(RDM_OID_IP_IFACE, &ipIntf_Iid, ipIntf_obj, NULL);
+				zcfgFeObjJsonSet(RDM_OID_IP_IFACE, &ipIntf_Iid, ipIntf_obj, NULL);
 			}
 			else if(IntfGrp_info.X_ZYXEL_BridgeName != NULL) {
 				json_object_object_add(ipIntf_obj, "X_ZYXEL_SrvName", json_object_new_string(IntfGrp_info.X_ZYXEL_BridgeName));
-				zcfgFeObjJsonSetWithoutApply(RDM_OID_IP_IFACE, &ipIntf_Iid, ipIntf_obj, NULL);
+				zcfgFeObjJsonSet(RDM_OID_IP_IFACE, &ipIntf_Iid, ipIntf_obj, NULL);
 			}
 			zcfgFeJsonObjFree(ipIntf_obj);
 			ipIntf_obj = NULL;
@@ -1168,9 +1138,9 @@
 	char tmp[10] = {0};
 	char BrStr[30] = {0};
 	char snoopingList[100] = {0};
-	char *snoopingStr = NULL;
-	char *single_snpStr = NULL;
-	char *rest_str = NULL;
+	const char *snoopingStr = NULL;
+	const char *single_snpStr = NULL;
+	const char *rest_str = NULL;
 
 	json_object *vlanGroupObj = NULL;
 	json_object *BrObj = NULL;
@@ -1192,7 +1162,7 @@
 		BrRefKey = (int)json_object_get_int(json_object_object_get(vlanGroupObj, "BrRefKey"));
 		if(BrRefKey == IntfGrpDel_Info.array[0]) {
 			json_object_object_add(vlanGroupObj, "BrRefKey", json_object_new_string(""));
-			zcfgFeObjJsonSetWithoutApply(RDM_OID_VLAN_GROUP, &vlanGroupIid, vlanGroupObj, NULL);
+			zcfgFeObjJsonSet(RDM_OID_VLAN_GROUP, &vlanGroupIid, vlanGroupObj, NULL);
 			zcfgFeJsonObjFree(vlanGroupObj);
 			break;
 		}
@@ -1204,41 +1174,31 @@
 		zcfgFeJsonObjFree(BrObj);
 	}
 	
-	// BrStr = "br" + brIdx + "|1"
 	BrIdx = IntfGrpDel_Info.array[0]-1;
 	memset(tmp, 0, sizeof(tmp));
 	sprintf(tmp, "%d", BrIdx);
 	memset(BrStr, 0, sizeof(BrStr));
-	strcat(BrStr, ",br");
+	strcat(BrStr, "br");
 	strcat(BrStr, tmp);
-	strcat(BrStr,"|1");
-	// snoopingList = "br0|1"
 	memset(snoopingList, 0 ,sizeof(snoopingList));
 	strcat(snoopingList, "br0|1");
-	while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_ZY_IGMP, &igmpIid, &igmpObj) == ZCFG_SUCCESS) {
-		snoopingStr = (char*)json_object_get_string(json_object_object_get(igmpObj, "SnoopingBridgeIfName"));
+	ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_ZY_IGMP, &igmpIid, &igmpObj);
+	if(ret == ZCFG_SUCCESS){
+		snoopingStr = json_object_get_string(json_object_object_get(igmpObj, "SnoopingBridgeIfName"));
 		single_snpStr = strtok_r(snoopingStr, ",", &rest_str);
-		i = 0;
-		while(single_snpStr != NULL) {
-			if(i == 0) {
-				continue;
-			}
-			if(strcmp(BrStr, single_snpStr)) {
-				strcat(snoopingList, ",");
-				strcat(snoopingList, single_snpStr);
-				break;
+		while(strcmp(rest_str,"")) {
+			if(!strstr(rest_str, BrStr)) {
+				sprintf(snoopingList,"%s%s",",",single_snpStr);
 			}
 			single_snpStr = strtok_r(rest_str, ",", &rest_str);
-			i++;
 		}
 		json_object_object_add(igmpObj, "SnoopingBridgeIfName", json_object_new_string(snoopingList));
-		zcfgFeObjJsonSetWithoutApply(RDM_OID_ZY_IGMP, &igmpIid, igmpObj, NULL);
-		break;
+		zcfgFeObjJsonSet(RDM_OID_ZY_IGMP, &igmpIid, igmpObj, NULL);
 	}
-	while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_ZY_MLD, &mldIid, &mldObj) == ZCFG_SUCCESS) {
+	ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_ZY_MLD, &mldIid, &mldObj);
+	if(ret == ZCFG_SUCCESS){
 		json_object_object_add(mldObj, "SnoopingBridgeIfName", json_object_new_string(snoopingList));
-		zcfgFeObjJsonSetWithoutApply(RDM_OID_ZY_MLD, &mldIid, mldObj, NULL);
-		break;
+		zcfgFeObjJsonSet(RDM_OID_ZY_MLD, &mldIid, mldObj, NULL);
 	}
 
 	freeIntefGrpDelKey(&IntfGrpDel_Info);
@@ -1268,4 +1228,4 @@
     printf("zcfgFeDalIntrGrp() Total time=%d seconds ret=%d\n", (int) difftime(t2, t1), ret);
 
 	return ret;
-}
\ No newline at end of file
+}
