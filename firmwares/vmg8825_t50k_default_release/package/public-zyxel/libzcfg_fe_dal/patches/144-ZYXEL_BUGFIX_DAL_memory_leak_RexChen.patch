Index: libzcfg_fe_dal-1.0/network/broadband/zcfg_fe_dal_advance.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/network/broadband/zcfg_fe_dal_advance.c	2017-03-20 18:15:58.912540072 +0800
+++ libzcfg_fe_dal-1.0/network/broadband/zcfg_fe_dal_advance.c	2017-03-20 18:20:07.120771700 +0800
@@ -72,17 +72,15 @@
 	//PTM Link
 	enableADSLPtm = json_object_get_boolean(json_object_object_get(Jobj, "X_ZYXEL_EnableADSLPtm"));
 
-	while(zcfgFeObjJsonGetNext(RDM_OID_PTM_LINK, &advPtmLinkIid, &advPtmLinkObj)== ZCFG_SUCCESS){
+	if(zcfgFeObjJsonGet(RDM_OID_PTM_LINK, &advPtmLinkIid, &advPtmLinkObj)== ZCFG_SUCCESS){
 		json_object_object_add(advPtmLinkObj, "X_ZYXEL_EnableADSLPtm", json_object_new_boolean(enableADSLPtm));
 		zcfgFeObjJsonBlockedSet(RDM_OID_PTM_LINK, &advPtmLinkIid, advPtmLinkObj, NULL);
-		break;
 	}
 
 
 
 	//DSL Line
-	while(zcfgFeObjJsonGetNext(RDM_OID_DSL_LINE, &advDSLLineIid, &advDSLLineObj) == ZCFG_SUCCESS){
-		if(advDSLLineObj){
+	if(zcfgFeObjJsonGet(RDM_OID_DSL_LINE, &advDSLLineIid, &advDSLLineObj) == ZCFG_SUCCESS){
 			dslPhyCfg2Mask = json_object_get_int(json_object_object_get(Jobj, "X_ZYXEL_DslPhyCfg2Mask"));
 			json_object_object_add(advDSLLineObj, "X_ZYXEL_DslPhyCfg2Mask", json_object_new_int(dslPhyCfg2Mask));
 			
@@ -135,13 +133,10 @@
 			VDSL_US0_8a = json_object_get_boolean(json_object_object_get(Jobj, "X_ZYXEL_VDSL_US0_8a"));
 			json_object_object_add(advDSLLineObj, "X_ZYXEL_VDSL_US0_8a", json_object_new_boolean(VDSL_US0_8a));
 
-			//set
 			zcfgFeObjJsonSet(RDM_OID_DSL_LINE, &advDSLLineIid, advDSLLineObj, NULL);
 		}
-	}
-
-	zcfgFeJsonObjFree(advPtmLinkObj);
 	zcfgFeJsonObjFree(advDSLLineObj);
+	zcfgFeJsonObjFree(advPtmLinkObj);
 	return ret;
 }
 
Index: libzcfg_fe_dal-1.0/network/broadband/zcfg_fe_dal_broadband.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/network/broadband/zcfg_fe_dal_broadband.c	2017-03-20 18:15:59.432540075 +0800
+++ libzcfg_fe_dal-1.0/network/broadband/zcfg_fe_dal_broadband.c	2017-03-20 18:19:59.964617400 +0800
@@ -3456,13 +3456,13 @@
 		}
 
 	//Basic param
-	json_object_object_add(pramJobj, "Name", json_object_object_get(ipIfaceObj, "X_ZYXEL_SrvName"));
-	json_object_object_add(pramJobj, "Enable", json_object_object_get(ipIfaceObj, "Enable"));
-	json_object_object_add(pramJobj, "Type", json_object_new_string(CurrType));
-	json_object_object_add(pramJobj, "Mode", json_object_new_string(CurrMode));
-	json_object_object_add(pramJobj, "VLANID", json_object_object_get(vlanTermObj, "VLANID"));
-	json_object_object_add(pramJobj, "VLANEnable", json_object_object_get(vlanTermObj, "X_ZYXEL_VLANEnable"));
-	json_object_object_add(pramJobj, "VLANPriority", json_object_object_get(vlanTermObj, "X_ZYXEL_VLANPriority"));
+	json_object_object_add(pramJobj, "Name", JSON_OBJ_COPY(json_object_object_get(ipIfaceObj, "X_ZYXEL_SrvName")));
+	json_object_object_add(pramJobj, "Enable", JSON_OBJ_COPY(json_object_object_get(ipIfaceObj, "Enable")));
+	json_object_object_add(pramJobj, "Type", JSON_OBJ_COPY(json_object_new_string(CurrType)));
+	json_object_object_add(pramJobj, "Mode", JSON_OBJ_COPY(json_object_new_string(CurrMode)));
+	json_object_object_add(pramJobj, "VLANID", JSON_OBJ_COPY(json_object_object_get(vlanTermObj, "VLANID")));
+	json_object_object_add(pramJobj, "VLANEnable", JSON_OBJ_COPY(json_object_object_get(vlanTermObj, "X_ZYXEL_VLANEnable")));
+	json_object_object_add(pramJobj, "VLANPriority", JSON_OBJ_COPY(json_object_object_get(vlanTermObj, "X_ZYXEL_VLANPriority")));
 	json_object_object_add(pramJobj, "Iid", json_object_new_int(ipIfaceIid.idx[0]));
 	if(vlanTermObj == NULL){
 		json_object_object_add(pramJobj, "VLANID", json_object_new_int(-1));
@@ -3470,12 +3470,12 @@
 	}
 
 	if(!strcmp(CurrType, "ATM")){
-		json_object_object_add(pramJobj, "vpivci", json_object_object_get(atmLinkObj, "DestinationAddress"));
-		json_object_object_add(pramJobj, "AtmEncapsulation", json_object_object_get(atmLinkObj, "Encapsulation"));
-		json_object_object_add(pramJobj, "QoSClass", json_object_object_get(atmLinkQosObj, "QoSClass"));
-		json_object_object_add(pramJobj, "atmMaxBurstSize", json_object_object_get(atmLinkQosObj, "MaximumBurstSize"));
-		json_object_object_add(pramJobj, "atmSustainedCellRate",json_object_object_get(atmLinkQosObj, "SustainableCellRate"));
-		json_object_object_add(pramJobj, "atmPeakCellRate", json_object_object_get(atmLinkQosObj, "PeakCellRate"));
+		json_object_object_add(pramJobj, "vpivci", JSON_OBJ_COPY(json_object_object_get(atmLinkObj, "DestinationAddress")));
+		json_object_object_add(pramJobj, "AtmEncapsulation", JSON_OBJ_COPY(json_object_object_get(atmLinkObj, "Encapsulation")));
+		json_object_object_add(pramJobj, "QoSClass", JSON_OBJ_COPY(json_object_object_get(atmLinkQosObj, "QoSClass")));
+		json_object_object_add(pramJobj, "atmMaxBurstSize", JSON_OBJ_COPY(json_object_object_get(atmLinkQosObj, "MaximumBurstSize")));
+		json_object_object_add(pramJobj, "atmSustainedCellRate",JSON_OBJ_COPY(json_object_object_get(atmLinkQosObj, "SustainableCellRate")));
+		json_object_object_add(pramJobj, "atmPeakCellRate", JSON_OBJ_COPY(json_object_object_get(atmLinkQosObj, "PeakCellRate")));
 	}
 
 	return ret;
@@ -3613,6 +3613,7 @@
 	const char *WanMacType;
 	const char *WanMacAddr;
 	const char *WanMacIP;
+	const char *value = NULL;
 	bool ipStatic = false;
 	bool ip6Static = false;
 	int tag = 0;
@@ -3643,6 +3644,7 @@
 				json_object_object_add(pramJobj, "WanMacIP", json_object_object_get(ethLinkObj, "X_ZYXEL_WanMacClientIP"));
 				break;
 			}
+			zcfgFeJsonObjFree(ethLinkObj);
 		}
 	}
 #endif
@@ -3674,6 +3676,7 @@
 				GatewayIPAddress= json_object_get_string(json_object_object_get(v4FwdObj, "GatewayIPAddress"));
 				json_object_object_add(pramJobj, "GatewayIPAddress", json_object_new_string(GatewayIPAddress));
 			}
+			zcfgFeJsonObjFree(v4FwdObj);
 		}
 	}else{
 		//DHCP REQ OPT
@@ -3683,11 +3686,10 @@
 			opt = json_object_get_boolean(json_object_object_get(obj, "Enable"));
 			if(tag == 42 )
 				json_object_object_add(pramJobj, "option42Enable", json_object_new_boolean(opt));
-			if(tag == 43 )
+			else if(tag == 43)
 				json_object_object_add(pramJobj, "option43Enable", json_object_new_boolean(opt));
 			else if(tag == 121 )
 				json_object_object_add(pramJobj, "option121Enable", json_object_new_boolean(opt));
-			else
 				zcfgFeJsonObjFree(obj);                                                                                           
    		}
 		//DHCP SENT OPT
@@ -3695,20 +3697,20 @@
 		while(zcfgFeSubInObjJsonGetNextWithoutUpdate(RDM_OID_DHCPV4_SENT_OPT, &v4ClientIid, &iid, &obj) == ZCFG_SUCCESS){
 			tag = json_object_get_int(json_object_object_get(obj, "Tag"));
 			opt = json_object_get_boolean(json_object_object_get(obj, "Enable"));
+			value = json_object_get_string(json_object_object_get(obj, "Value"));
 			if(tag == 60 ){
 				json_object_object_add(pramJobj, "option60Enable", json_object_new_boolean(opt));
-				json_object_object_add(pramJobj, "option60Value", json_object_object_get(obj, "Value"));
+				json_object_object_add(pramJobj, "option60Value", json_object_new_string(value));
 			}else if(tag == 61 ){
 				json_object_object_add(pramJobj, "option61Enable", json_object_new_boolean(opt));
-				json_object_object_add(pramJobj, "option61Value", json_object_object_get(obj, "Value"));
+				json_object_object_add(pramJobj, "option61Value", json_object_new_string(value));
 			}else if(tag == 125 ){
 				json_object_object_add(pramJobj, "option125Enable", json_object_new_boolean(opt));
-				json_object_object_add(pramJobj, "option125Value", json_object_object_get(obj, "Value"));
-			}else{
+				json_object_object_add(pramJobj, "option125Value", json_object_new_string(value));
+			}
 				zcfgFeJsonObjFree(obj);
 			}                                                                                                
    		}
-	}
 
 	//static ppp
 	if(strstr(CurrEncapsulation, "PPP") && pppIfaceObj != NULL){
@@ -3742,8 +3744,10 @@
 		if(strstr(CurrEncapsulation, "IP") && ip6Static){
 			if(!strcmp(Interface, ipIfacePath)){
 				json_object_object_add(pramJobj, "NextHop", json_object_object_get(v6FwdObj, "NextHop"));
+				break;
 			}
 		}
+		zcfgFeJsonObjFree(v6FwdObj);
 	}
 
 
@@ -3779,18 +3783,21 @@
 zcfgRet_t zcfgFeDalWanGet(struct json_object *Jobj, char *replyMsg){
 	zcfgRet_t ret = ZCFG_SUCCESS;
 	struct json_object *pramJobj = NULL;
+	struct json_object *ipIfObj = NULL;
 	initGlobalObjects();
-	while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_IP_IFACE, &ipIfaceIid, &ipIfaceObj) == ZCFG_SUCCESS) {
+	while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_IP_IFACE, &ipIfaceIid, &ipIfObj) == ZCFG_SUCCESS) {
+		
 		pramJobj = json_object_new_object();
-		ret = parseIpIfaceObj(pramJobj, ipIfaceIid, ipIfaceObj);
+		ret = parseIpIfaceObj(pramJobj, ipIfaceIid, ipIfObj);
 		if( ret == ZCFG_SUCCESS ){
 			if(strcmp(CurrMode, "IP_Bridged")){
-				getWanInfo(pramJobj, ipIfaceIid, ipIfaceObj);
-				getStaticInfo(pramJobj, ipIfaceIid, ipIfaceObj);
+				getWanInfo(pramJobj, ipIfaceIid, ipIfObj);
+				getStaticInfo(pramJobj, ipIfaceIid, ipIfObj);
 			}
 			json_object_array_add(Jobj, JSON_OBJ_COPY(pramJobj));
-		}else
-			json_object_put(pramJobj);
+			zcfgFeJsonObjFree(pramJobj);
+		}
+		zcfgFeJsonObjFree(ipIfObj);
 	}
 
 	freeAllObjects();
@@ -3800,22 +3807,18 @@
 zcfgRet_t zcfgFeDalWan(const char *method, struct json_object *Jobj, char *replyMsg){
 	zcfgRet_t ret = ZCFG_SUCCESS;
 
-	t1 = time(NULL);
-	
 	if(!strcmp(method, "POST"))
 		ret = zcfgFeDalWanAdd(Jobj, NULL);
 	else if(!strcmp(method, "PUT"))
 		ret = zcfgFeDalWanEdit(Jobj, NULL);
 	else if(!strcmp(method, "DELETE"))
 		ret = zcfgFeDalWanDelete(Jobj, NULL);
-	else if(!strcmp(method, "GET"))
+	else if(!strcmp(method, "GET")){
 		ret = zcfgFeDalWanGet(Jobj, NULL);
+	}
 	else
 		printf("Unknown method:%s\n", method);
 
-	t2 = time(NULL);
-    printf("zcfgFeDalWan() Total time=%d seconds ret=%d\n", (int) difftime(t2, t1), ret);
-
 	return ret;
 }
 
Index: libzcfg_fe_dal-1.0/network/homeNetworking/zcfg_fe_dal_addnl_subnet.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/network/homeNetworking/zcfg_fe_dal_addnl_subnet.c	2017-03-20 18:15:58.196540069 +0800
+++ libzcfg_fe_dal-1.0/network/homeNetworking/zcfg_fe_dal_addnl_subnet.c	2017-03-20 18:19:34.026582600 +0800
@@ -27,10 +27,7 @@
 	{NULL,					0,	0,	0,	NULL},
 };
 
-static struct json_object *ipIntfObj = NULL;
-static objIndex_t ipIntfIid = {0};
-
-zcfgRet_t setIPAlias(struct json_object *Jobj){
+zcfgRet_t setIPAlias(struct json_object *Jobj, objIndex_t *ipIntfIid){
 	zcfgRet_t ret = ZCFG_SUCCESS;
 	struct json_object *ipAliasObj = NULL;
 	struct json_object *ipv4AddrObj = NULL;
@@ -50,7 +47,8 @@
 	while(zcfgFeObjJsonGetNext(RDM_OID_IP_IFACE_V4_ADDR, &ipv4AddrIid, &ipv4AddrObj) == ZCFG_SUCCESS) {
 		curAlias = json_object_get_boolean(json_object_object_get(ipv4AddrObj, "X_ZYXEL_Alias"));
 		X_ZYXEL_Dhcp4Subnet_Ref = json_object_get_string(json_object_object_get(ipv4AddrObj, "X_ZYXEL_Dhcp4Subnet_Ref"));
-		if((ipv4AddrIid.idx[0] != ipIntfIid.idx[0]) || (curAlias == false) || (strstr(X_ZYXEL_Dhcp4Subnet_Ref, "DHCPv4.Server.X_ZYXEL_Subnet"))){
+		if((ipv4AddrIid.idx[0] != ipIntfIid->idx[0]) || (curAlias == false) || (strstr(X_ZYXEL_Dhcp4Subnet_Ref, "DHCPv4.Server.X_ZYXEL_Subnet"))){
+			zcfgFeJsonObjFree(ipv4AddrObj);
 			continue;
 		}
 		curAliasAddr = json_object_get_string(json_object_object_get(ipv4AddrObj, "IPAddress"));
@@ -86,19 +84,20 @@
 			json_object_object_add(ipAliasObj, "SubnetMask", json_object_new_string(aliasSubMask));
 
 			zcfgFeObjJsonSet(RDM_OID_IP_IFACE_V4_ADDR, &ipAliasIid, ipAliasObj, NULL);
+			zcfgFeJsonObjFree(ipAliasObj);
 		}
 	}else{
+		zcfgFeJsonObjFree(ipAliasObj);
 		if(found){
 			ret = zcfgFeObjJsonDel(RDM_OID_IP_IFACE_V4_ADDR, &ipAliasIid, NULL);
 		}
 	}
 	
-	zcfgFeJsonObjFree(ipAliasObj);
 	zcfgFeJsonObjFree(ipv4AddrObj);
 	return ret;
 }
 
-zcfgRet_t setPublicLan(struct json_object *Jobj){
+zcfgRet_t setPublicLan(struct json_object *Jobj, struct json_object *ipIntfObj, objIndex_t *ipIntfIid){
 	zcfgRet_t ret = ZCFG_SUCCESS;
 	bool pubLan = false, curPubLan = false;
 	bool pubLanDHCP = false, curPubDHCP = false;
@@ -130,14 +129,17 @@
 			json_object_object_add(ipIntfObj, "X_ZYXEL_PubLan_DHCP", json_object_new_boolean(pubLanDHCP));
 			json_object_object_add(ipIntfObj, "X_ZYXEL_PubLan_ARP", json_object_new_boolean(pubLanARP));
 			
-			zcfgFeObjJsonSet(RDM_OID_IP_IFACE, &ipIntfIid, ipIntfObj, NULL);
+			zcfgFeObjJsonSet(RDM_OID_IP_IFACE, ipIntfIid, ipIntfObj, NULL);
 		}
+		zcfgFeJsonObjFree(ipIntfObj);
 	}
 
 	return ret;
 }
 
 zcfgRet_t zcfgFeDal_Addnl_Subnet_Edit(struct json_object *Jobj, char *replyMsg){
+	struct json_object *ipIntfObj = NULL;
+	objIndex_t ipIntfIid = {0};
 	zcfgRet_t ret = ZCFG_SUCCESS;
 	const char *selectedGrp = NULL, *srvName = NULL, *ifName = NULL;
 	selectedGrp = json_object_get_string(json_object_object_get(Jobj, "selectedGrp"));
@@ -150,12 +152,12 @@
 			!strncmp(ifName, "br", 2)){
 			break;
 		}                                           
+		zcfgFeJsonObjFree(ipIntfObj);
     }
 
-	setIPAlias(Jobj);
-	setPublicLan(Jobj);
+	setIPAlias(Jobj, &ipIntfIid);
+	setPublicLan(Jobj, ipIntfObj, &ipIntfIid);
 	
-	zcfgFeJsonObjFree(ipIntfObj);
 	return ret;
 }
 
Index: libzcfg_fe_dal-1.0/network/homeNetworking/zcfg_fe_dal_lansetup.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/network/homeNetworking/zcfg_fe_dal_lansetup.c	2017-03-20 18:15:58.692540071 +0800
+++ libzcfg_fe_dal-1.0/network/homeNetworking/zcfg_fe_dal_lansetup.c	2017-03-20 18:19:30.322606100 +0800
@@ -107,6 +107,7 @@
 		if((ret = zcfgFeObjJsonGet(RDM_OID_PPP_IFACE, &pppIid, &pppObj)) == ZCFG_SUCCESS){
 			lowLayer = json_object_get_string(json_object_object_get(pppObj, "LowerLayers"));
 			if((strlen(lowLayer) == 0) ||(!strncmp(lowLayer, "USB.", 4))){
+				zcfgFeJsonObjFree(pppObj);
 				return true;
 			}
 		}
@@ -117,13 +118,11 @@
 		if((ret = zcfgFeObjJsonGet(RDM_OID_ETH_LINK, &ethlinkIid, &ethlinkObj)) == ZCFG_SUCCESS){
 			lowLayer = json_object_get_string(json_object_object_get(ethlinkObj, "LowerLayers"));
 			if((strlen(lowLayer) == 0) ||(!strncmp(lowLayer, "USB.", 4))){
+				zcfgFeJsonObjFree(ethlinkObj);
 				return true;
 			}
 		}
 	}
-	
-	zcfgFeJsonObjFree(ethlinkObj);
-	zcfgFeJsonObjFree(pppObj);
 	return false;
 }
 
@@ -149,16 +148,18 @@
 					groupWANIf = json_object_get_string(json_object_object_get(curIpIfaceObj, "X_ZYXEL_Group_WAN_IpIface"));
 					if(!isLowerLayerUSBorEmpty(subIpIfaceObj) || strstr(natIf,groupWANIf)){					
 						nat = true;
+						zcfgFeJsonObjFree(natObj);
 						break;
 					}
 				}
-			}//for
-			if(nat == true)
+			}
+			if(nat == true){
+				zcfgFeJsonObjFree(natObj);
 				break;
-		}//if
-	}//while
-
+			}
+		}
 	zcfgFeJsonObjFree(natObj);
+	}
 	return nat;
 }
 
@@ -213,10 +214,10 @@
 					group = true;
 				}
 			}	
+			zcfgFeJsonObjFree(natObj);
 		}//while
 			
 	}//if
-	zcfgFeJsonObjFree(natObj);
 	return ret;
 }
 
@@ -317,7 +318,6 @@
 			}
 			else if((strlen(strstr(mldSnooping, IfName))-strlen(mldSnooping))>=0){
 				strcpy(snoopbrList,mldSnooping);
-				snoopbrListtmp = (char*)malloc(strlen(snoopbrList)+1);
 				mldsnoopingtmp= strtok_r(snoopbrList,",",&snoopbrList_tmp);
 				while(mldsnoopingtmp!=NULL){
 					g = strtok_r(mldSnooping,"|",&mldSnooping);
@@ -411,6 +411,7 @@
 			curDhcpAutoReserve = json_object_get_boolean(json_object_object_get(dhcpSrvObj, "X_ZYXEL_AutoReserveLanIp"));
 			break;
 		}
+		zcfgFeJsonObjFree(dhcpSrvObj);
 	}
 	
 	IID_INIT(dhcpRelayIid);
@@ -421,6 +422,7 @@
 			curdhcpRelayAddr = json_object_get_string(json_object_object_get(dhcpRelayObj, "DHCPServerIPAddress"));
 			break;
 		}
+		zcfgFeJsonObjFree(dhcpRelayObj);
 	}
 
 	if(relayDhcp){
@@ -529,7 +531,7 @@
 				radvdObj = obj;
 				found = true;
 				break;
-			}else
+			}
 				zcfgFeJsonObjFree(obj);
 		}
 	}
@@ -542,7 +544,7 @@
 		}
 	}
 
-	if(found == true){
+	if(found){
 		json_object_object_add(radvdObj, "Enable", json_object_new_boolean(true));
 		json_object_object_add(radvdObj, "Interface", json_object_new_string(ifacePath));
 		
@@ -710,6 +712,7 @@
 			if(!strcmp(ip6Origin, "Static") && !strncmp(curIp6LinkLocalAdr, "fe80", 4)){
 				ret = zcfgFeObjJsonDel(RDM_OID_IP_IFACE_V6_ADDR, &v6AddrIid, NULL);
 			}
+			zcfgFeJsonObjFree(v6AddrObj);
 		}
 	}else{
 		ip6LinkLocalAdr = json_object_get_string(json_object_object_get(Jobj, "IPv6_LinkLocalAddress"));
@@ -721,6 +724,7 @@
 				json_object_object_add(v6AddrObj, "IPAddress", json_object_new_string(ip6LinkLocalAdr));
 				zcfgFeObjJsonSet(RDM_OID_IP_IFACE_V6_ADDR, &v6AddrIid, v6AddrObj, NULL);
 			}
+			zcfgFeJsonObjFree(v6AddrObj);
 		}
 
 		if(!found){//Post
@@ -733,11 +737,11 @@
 				zcfgFeObjJsonGet(RDM_OID_IP_IFACE_V6_ADDR, &v6AddrIid, &v6AddrObj);
 				json_object_object_add(v6AddrObj, "IPAddress", json_object_new_string(ip6LinkLocalAdr));
 				zcfgFeObjJsonSet(RDM_OID_IP_IFACE_V6_ADDR, &v6AddrIid, v6AddrObj, NULL);
+				zcfgFeJsonObjFree(v6AddrObj);
 			}
 		}
 	}
 	
-	zcfgFeJsonObjFree(v6AddrObj);
 	return ret;
 }
 
@@ -758,6 +762,7 @@
 			found = true;
 			break;
 		}
+		zcfgFeJsonObjFree(v6prefixObj);
 	}
 
 	if(!found){//Post
@@ -771,7 +776,6 @@
 		}
 	}
 
-	
 	if(found){
 		sprintf(manualPrefixes, "IP.Interface.%hhu.IPv6Prefix.%hhu", v6prefixIid.idx[0], v6prefixIid.idx[1]);
 		
@@ -813,6 +817,7 @@
 				found = true;
 				break;
 			}
+			zcfgFeJsonObjFree(dhcp6SrvObj);
 	}
 
 	if(!found){//Post
@@ -882,6 +887,7 @@
 	if(ret == ZCFG_SUCCESS){
 		json_object_object_add(dnsObj, "X_ZYXEL_DNSQueryScenario", json_object_new_int(dnsQueryScenario));
 		zcfgFeObjJsonBlockedSet(RDM_OID_DNS, &dnsIid, dnsObj, NULL);
+		zcfgFeJsonObjFree(dnsObj);
 	}
 
 	return ret;
@@ -904,10 +910,11 @@
 	while(zcfgFeObjJsonGetNext(RDM_OID_BRIDGING_BR, &bridgingIid, &bridgingObj) == ZCFG_SUCCESS) {
 		brName = json_object_get_string(json_object_object_get(bridgingObj, "X_ZYXEL_BridgeName"));
 		if(!strcmp(selbrName, brName)){
-
+			zcfgFeJsonObjFree(bridgingObj);
 			break;
-		}else
+		}
 			selectIndex++;                                           
+		zcfgFeJsonObjFree(bridgingObj);
     }
 
 	allIpIfaceObj = json_object_new_array();
Index: libzcfg_fe_dal-1.0/network/homeNetworking/zcfg_fe_dal_static_dhcp.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/network/homeNetworking/zcfg_fe_dal_static_dhcp.c	2017-03-20 18:15:58.076540068 +0800
+++ libzcfg_fe_dal-1.0/network/homeNetworking/zcfg_fe_dal_static_dhcp.c	2017-03-20 18:19:27.146426300 +0800
@@ -49,11 +49,12 @@
 		if(!strncmp(IfName, "br", 2)){
 			if(targetIdx == count){//found
 				sprintf(ifacePath, "IP.Interface.%hhu", ifaceIid.idx[0]);
+				zcfgFeJsonObjFree(ipIfaceObj);
 				break;
 			}
-			else
 				count++;
 		}
+		zcfgFeJsonObjFree(ipIfaceObj);
 	}
 	
 	IID_INIT(dhcpIid);
@@ -63,8 +64,10 @@
 		if(!strcmp(ifacePath, dhcpIfacePath)){
 			memcpy(&dhcpSrvIid, &dhcpIid, sizeof(objIndex_t));
 			found = true;
+			zcfgFeJsonObjFree(dhcpObj);
 			break;
 		}
+		zcfgFeJsonObjFree(dhcpObj);
 	}
 
 	if(found){//POST
@@ -77,7 +80,6 @@
 			enable = json_object_get_boolean(json_object_object_get(Jobj, "Enable"));
 			ipAddr = json_object_get_string(json_object_object_get(Jobj, "IPAddr"));
 			mac = json_object_get_string(json_object_object_get(Jobj, "MACAddr"));
-			
 			json_object_object_add(dhcpSrvObj, "Enable", json_object_new_boolean(enable));
 			json_object_object_add(dhcpSrvObj, "Yiaddr", json_object_new_string(ipAddr));
 			json_object_object_add(dhcpSrvObj, "Chaddr", json_object_new_string(mac));
@@ -87,8 +89,6 @@
 
 	}
 
-	zcfgFeJsonObjFree(ipIfaceObj);
-	zcfgFeJsonObjFree(dhcpObj);
 	zcfgFeJsonObjFree(dhcpSrvObj);
 	return ret;
 }
@@ -112,10 +112,9 @@
 			found = true;
 			break;
 		}
-		else
 			count++;
+		zcfgFeJsonObjFree(dhcpSrvObj);
 	}
-	
 	if(found){
 		enable = json_object_get_boolean(json_object_object_get(Jobj, "Enable"));
 		ipAddr = json_object_get_string(json_object_object_get(Jobj, "IPAddr"));
@@ -126,10 +125,8 @@
 		json_object_object_add(dhcpSrvObj, "Chaddr", json_object_new_string(mac));
 
 		ret = zcfgFeObjJsonSet(RDM_OID_DHCPV4_SRV_POOL_STATIC_ADDR, &dhcpSrvIid, dhcpSrvObj, NULL);
-
+		zcfgFeJsonObjFree(dhcpSrvObj);
 	}
-
-	zcfgFeJsonObjFree(dhcpSrvObj);
 	return ret;
 }
 zcfgRet_t zcfgFeDalStatic_DHCP_Delete(struct json_object *Jobj, char *replyMsg){
@@ -148,15 +145,15 @@
 			found = true;
 			break;
 		}
-		else
 			count++;
+		zcfgFeJsonObjFree(dhcpSrvObj);
 	}
 
 	if(found){
 		ret = zcfgFeObjJsonDel(RDM_OID_DHCPV4_SRV_POOL_STATIC_ADDR, &dhcpSrvIid, NULL);
+		zcfgFeJsonObjFree(dhcpSrvObj);
 	}
 
-	zcfgFeJsonObjFree(dhcpSrvObj);
 	return ret;
 	
 }
Index: libzcfg_fe_dal-1.0/network/interfaceGrouping/zcfg_fe_dal_intfGrp.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/network/interfaceGrouping/zcfg_fe_dal_intfGrp.c	2017-03-20 18:15:59.448540075 +0800
+++ libzcfg_fe_dal-1.0/network/interfaceGrouping/zcfg_fe_dal_intfGrp.c	2017-03-20 18:17:58.155226900 +0800
@@ -895,7 +895,9 @@
 	if(newBrFilterObj) zcfgFeJsonObjFree(newBrFilterObj);
 	if(vlanGroupObj) zcfgFeJsonObjFree(vlanGroupObj);
 	if(dhcpV4SrvObj) zcfgFeJsonObjFree(dhcpV4SrvObj);
-
+	if(newBrPortObj) zcfgFeJsonObjFree(newBrPortObj);
+	if(igmpObj) zcfgFeJsonObjFree(igmpObj);
+	if(mldObj) zcfgFeJsonObjFree(mldObj);
 	
 	return ret;
 }
@@ -1045,6 +1047,7 @@
 	IID_INIT(BrFilterIid);
 	while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_BRIDGING_FILTER, &BrFilterIid, &BrFilterObj) == ZCFG_SUCCESS) {
 		zcfgFeObjJsonSet(RDM_OID_BRIDGING_FILTER, &BrFilterIid, BrFilterObj, NULL);
+		zcfgFeJsonObjFree(BrFilterObj);
 		break;
 	}
 
@@ -1082,7 +1085,6 @@
 				zcfgFeObjJsonSet(RDM_OID_IP_IFACE, &ipIntf_Iid, ipIntf_obj, NULL);
 			}
 			zcfgFeJsonObjFree(ipIntf_obj);
-			ipIntf_obj = NULL;
 		}
 
 		//printf("5. compare lanIntf\n");
@@ -1107,10 +1109,10 @@
 							if((BrFilter_interface!=NULL) && (!strcmp(single_lanIntf, BrFilter_interface))) {
 								json_object_object_add(BrFilterObj, "Bridge", json_object_new_string("Bridging.Bridge.1"));
 								zcfgFeObjJsonBlockedSet(RDM_OID_BRIDGING_FILTER, &BrFilterIid, BrFilterObj, NULL);
-								zcfgFeJsonObjFree(newBrFilterObj);
+								zcfgFeJsonObjFree(BrFilterObj);
 								break;
 							}
-							zcfgFeJsonObjFree(newBrFilterObj);
+							zcfgFeJsonObjFree(BrFilterObj);
 						}
 					}
 					single_lanIntf = strtok_r(rest_str, ",", &rest_str);
@@ -1136,10 +1138,10 @@
 							if((BrFilter_interface!=NULL) && (!strcmp(single_lanIntf, BrFilter_interface))) {
 								json_object_object_add(BrFilterObj, "Bridge", json_object_new_string(brPathName));
 								zcfgFeObjJsonBlockedSet(RDM_OID_BRIDGING_FILTER, &BrFilterIid, BrFilterObj, NULL);
-								zcfgFeJsonObjFree(newBrFilterObj);
+								zcfgFeJsonObjFree(BrFilterObj);
 								break;
 							}
-							zcfgFeJsonObjFree(newBrFilterObj);
+							zcfgFeJsonObjFree(BrFilterObj);
 						}
 					}
 					single_lanIntf = strtok_r(rest_str, ",", &rest_str);
@@ -1175,8 +1177,8 @@
 
 	json_object *vlanGroupObj = NULL;
 	json_object *BrObj = NULL;
-	json_object *igmpObj;
-	json_object *mldObj;
+	json_object *igmpObj = NULL;
+	json_object *mldObj = NULL;
 	objIndex_t vlanGroupIid = {0};
 	objIndex_t BrIid = {0};
 	objIndex_t igmpIid = {0};
@@ -1223,13 +1225,18 @@
 		}
 		json_object_object_add(igmpObj, "SnoopingBridgeIfName", json_object_new_string(snoopingList));
 		zcfgFeObjJsonSet(RDM_OID_ZY_IGMP, &igmpIid, igmpObj, NULL);
+		zcfgFeJsonObjFree(igmpObj);
 	}
 	ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_ZY_MLD, &mldIid, &mldObj);
 	if(ret == ZCFG_SUCCESS){
 		json_object_object_add(mldObj, "SnoopingBridgeIfName", json_object_new_string(snoopingList));
 		zcfgFeObjJsonSet(RDM_OID_ZY_MLD, &mldIid, mldObj, NULL);
+		zcfgFeJsonObjFree(mldObj);
 	}
 
+	if(igmpObj) zcfgFeJsonObjFree(igmpObj);
+	if(mldObj) zcfgFeJsonObjFree(mldObj);
+
 	return ret;
 }
 
Index: libzcfg_fe_dal-1.0/network/nat/zcfg_fe_dal_nat_application.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/network/nat/zcfg_fe_dal_nat_application.c	2017-03-20 18:15:58.644540071 +0800
+++ libzcfg_fe_dal-1.0/network/nat/zcfg_fe_dal_nat_application.c	2017-03-20 18:17:38.916149100 +0800
@@ -133,11 +133,11 @@
 			if(!strcmp(description,description_datamodel) && !strcmp(protocol,protocol_datamodel) 
 				&& externalport-externalport_datamodel == 0 && externalportendrange-externalportendrange_datamodel == 0){
 				zcfgFeObjJsonDel(RDM_OID_NAT_PORT_MAPPING, &natIid, NULL);
+				zcfgFeJsonObjFree(NatAppJobj);
 			}
-			
+			zcfgFeJsonObjFree(NatAppJobj);
 		}
 	}	
-	zcfgFeJsonObjFree(NatAppJobj);
 	return ret;
 }
 
Index: libzcfg_fe_dal-1.0/network/qos/zcfg_fe_QosClass.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/network/qos/zcfg_fe_QosClass.c	2017-03-20 18:15:59.504540075 +0800
+++ libzcfg_fe_dal-1.0/network/qos/zcfg_fe_QosClass.c	2017-03-20 18:17:18.128689400 +0800
@@ -501,7 +501,7 @@
 	// PUT RDM_OID_QOS_CLS
 	prepare_qos_classObj(classObj, QosClass_Info->ClassObj_Info);
 	zcfgFeObjJsonBlockedSet(RDM_OID_QOS_CLS, &classIid, classObj, NULL);
-
+	zcfgFeJsonObjFree(classObj);
 #if(QOS_DAL_DEBUG == 1)			
 	printf("update Order\n");
 #endif
