Index: libzcfg_fe_dal-1.0/network/wireless/zcfg_fe_dal_wifi_others.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/network/wireless/zcfg_fe_dal_wifi_others.c	2017-08-01 15:19:55.596073091 +0800
+++ libzcfg_fe_dal-1.0/network/wireless/zcfg_fe_dal_wifi_others.c	2017-08-01 19:45:33.239787678 +0800
@@ -17,33 +17,34 @@
 
 dal_param_t WIFI_OTHERS_param[]={
 	//WiFi Radio
-	{"wlRtsThrshld",		dalType_int,	0,	0,	NULL},
-	{"wlFrgThrshld",		dalType_int, 0,	0,	NULL},
-	{"AutoChannelTimer",		dalType_int,	0,	0,	NULL},
-	{"wlCsScanTimer",		dalType_int,	0,	0,	NULL},
-	{"wlTxPwrPcnt",		dalType_int,	0,	0,	NULL},
-	{"wlBcnIntvl",		dalType_int,	0,	0,	NULL},
-	{"wlDtmIntvl",		dalType_int,	0,	0,	NULL},
-	{"wlMode",		dalType_string,	0,	0,	NULL},
-	{"wlProtect",		dalType_string,	0,	0,	NULL},
-	//{"wlRifsAdvert",		dalType_string,	0,	0,	NULL},
-	{"wlPreamble",		dalType_string, 0,	0,	NULL},
-	{"wlRxChainPwrSave",		dalType_int, 0,	0,	NULL},
-	//{"wlObssCox",		dalType_boolean, 0,	0,	NULL},
-	{"wlFrameburst",		dalType_boolean,	0,	0,	NULL},
-	{"wlRegMode",		dalType_int,	0,	0,	NULL},
-	{"wlDfsPreIsm",		dalType_int, 0,	0,	NULL},
-	{"wlTpcDb",		dalType_int, 0,	0,	NULL},
-	{"wlDfsPostIsm",		dalType_int, 0,	0,	NULL},
-	{"OperatingChannelBandwidth",		dalType_string, 0,	0,	NULL},
+	{"Index",						dalType_int,		1,	8,	NULL,	NULL,	dal_Edit},
+	{"wlRtsThrshld",				dalType_int,		0,	0,	NULL,	NULL,	0},
+	{"wlFrgThrshld",				dalType_int, 		0,	0,	NULL,	NULL,	0},
+	{"AutoChannelTimer",			dalType_int,		0,	0,	NULL,	NULL,	dalcmd_Forbid},
+	{"wlCsScanTimer",				dalType_int,		0,	0,	NULL,	NULL,	dalcmd_Forbid},
+	{"wlTxPwrPcnt",					dalType_int,		0,	0,	NULL,	NULL,	0},
+	{"wlBcnIntvl",					dalType_int,		0,	0,	NULL,	NULL,	0},
+	{"wlDtmIntvl",					dalType_int,		0,	0,	NULL,	NULL,	0},
+	{"wlMode",						dalType_string,		0,	0,	NULL,	NULL,	0},
+	{"wlProtect",					dalType_string,		0,	0,	NULL,	NULL,	0},
+	//{"wlRifsAdvert",				dalType_string,		0,	0,	NULL,	NULL,	dalcmd_Forbid},
+	{"wlPreamble",					dalType_string, 	0,	0,	NULL,	NULL,	0},
+	{"wlRxChainPwrSave",			dalType_int, 		0,	0,	NULL,	NULL,	dalcmd_Forbid},
+	//{"wlObssCox",					dalType_boolean, 	0,	0,	NULL,	NULL,	dalcmd_Forbid},
+	{"wlFrameburst",				dalType_boolean,	0,	0,	NULL,	NULL,	dalcmd_Forbid},
+	{"wlRegMode",					dalType_int,		0,	0,	NULL,	NULL,	dalcmd_Forbid},
+	{"wlDfsPreIsm",					dalType_int, 		0,	0,	NULL,	NULL,	dalcmd_Forbid},
+	{"wlTpcDb",						dalType_int, 		0,	0,	NULL,	NULL,	dalcmd_Forbid},
+	{"wlDfsPostIsm",				dalType_int, 		0,	0,	NULL,	NULL,	dalcmd_Forbid},
+	{"OperatingChannelBandwidth",	dalType_string, 	0,	0,	NULL,	NULL,	dalcmd_Forbid},
 	//WiFi AP Sec
-	{"wlPmf",		dalType_string, 0,	0,	NULL},
+	{"wlPmf",						dalType_string, 	0,	0,	NULL,	NULL,	dalcmd_Forbid},
 	//WiFi AP WPS
-	{"wps_v2",		dalType_boolean, 0,	0,	NULL},
-	{"atf",			dalType_boolean, 0,	0,	NULL},
-	{"InActiveChan",	dalType_string, 0,	0,	NULL},
-	{"singleSKU", 	dalType_string, 0, 0, 	NULL},
-	{NULL,		0,	0,	0,	NULL},
+	{"wps_v2",						dalType_boolean, 	0,	0,	NULL,	NULL,	dalcmd_Forbid},
+	{"atf",							dalType_boolean, 	0,	0,	NULL,	NULL,	dalcmd_Forbid},
+	{"InActiveChan",				dalType_string, 	0,	0,	NULL,	NULL,	dalcmd_Forbid},
+	{"singleSKU", 					dalType_string, 	0,	0, 	NULL,	NULL,	dalcmd_Forbid},
+	{NULL,		0,	0,	0,	NULL,	NULL,	0},
 };
 
 struct json_object *wifiRadioOthersObj = NULL;
@@ -131,6 +132,78 @@
 
 time_t t1, t2;
 
+void zcfgFeDalShowWifiOthers(struct json_object *Jarray){
+	int i, len = 0;
+	struct json_object *obj;
+	char channel[16] = {0};
+	
+	if(json_object_get_type(Jarray) != json_type_array){
+		printf("wrong Jobj format!\n");
+		return;
+	}
+
+	len = json_object_array_length(Jarray);
+	for(i=0;i<len;i++){
+		obj = json_object_array_get_idx(Jarray, i);
+		if(obj != NULL){
+			printf("%-20s : %s\n","Band",json_object_get_string(json_object_object_get(obj, "Band")));
+			printf("-----------------------------------------------\n");
+			printf("%-30s : %s\n","RTS/CTS Threshold",json_object_get_string(json_object_object_get(obj, "wlRtsThrshld")));
+			printf("%-30s : %s\n","Fragmentation Threshold",json_object_get_string(json_object_object_get(obj, "wlFrgThrshld")));
+			printf("%-30s : %s\n","Beacon Interval",json_object_get_string(json_object_object_get(obj, "wlBcnIntvl")));
+			printf("%-30s : %s\n","DTIM Interval",json_object_get_string(json_object_object_get(obj, "wlDtmIntvl")));
+			printf("%-30s : %s\n","802.11 Mode",json_object_get_string(json_object_object_get(obj, "wlMode")));
+			printf("%-30s : %s\n","Output Power",json_object_get_string(json_object_object_get(obj, "wlTxPwrPcnt")));
+			printf("%-30s : %s\n","802.11 Protection",json_object_get_string(json_object_object_get(obj, "wlProtect")));
+			printf("%-30s : %s\n","Preamble",json_object_get_string(json_object_object_get(obj, "wlPreamble")));
+			printf("\n");
+		}
+	}
+	
+}
+
+zcfgRet_t zcfgFeDalWifiOthersGet(struct json_object *Jobj, struct json_object *Jarray, char *replyMsg){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	objIndex_t SsidIid={0};
+	objIndex_t RadioIid={0};
+	char *wlRtsThrshld=NULL, *wlFrgThrshld=NULL, *wlBcnIntvl=NULL, *wlDtmIntvl=NULL, *wlMode=NULL, *wlProtect=NULL, *wlPreamble=NULL;
+	int wlTxPwrPcnt=0;
+	struct json_object *SsidObj = NULL;
+	struct json_object *RadioObj = NULL;
+	struct json_object *pramJobj = NULL;
+	const char *tmpLowerLayer = NULL;
+	int index;
+	uint8_t tmpRadioIndex;
+
+	index = json_object_get_int(json_object_object_get(Jobj, "Index"));
+	SsidIid.level = 1;
+	SsidIid.idx[0] = index;
+	if((ret = zcfgFeObjJsonGet(RDM_OID_WIFI_SSID, &SsidIid, &SsidObj)) != ZCFG_SUCCESS)
+		return ret;
+	tmpLowerLayer = json_object_get_string(json_object_object_get(SsidObj, "LowerLayers"));
+	sscanf(tmpLowerLayer, "WiFi.Radio.%hhu", &tmpRadioIndex);
+	RadioIid.level = 1;
+	RadioIid.idx[0] = tmpRadioIndex;
+	if((ret = zcfgFeObjJsonGet(RDM_OID_WIFI_RADIO, &RadioIid, &RadioObj)) != ZCFG_SUCCESS)
+		return ret;
+
+	pramJobj = json_object_new_object();
+	json_object_object_add(pramJobj, "Band", JSON_OBJ_COPY(json_object_object_get(RadioObj, "OperatingFrequencyBand")));
+	json_object_object_add(pramJobj, "wlRtsThrshld", JSON_OBJ_COPY(json_object_object_get(RadioObj, "X_ZYXEL_RTS_CTS_Threshold")));
+	json_object_object_add(pramJobj, "wlFrgThrshld", JSON_OBJ_COPY(json_object_object_get(RadioObj, "X_ZYXEL_Fragment_Threshold")));
+	json_object_object_add(pramJobj, "wlBcnIntvl", JSON_OBJ_COPY(json_object_object_get(RadioObj, "X_ZYXEL_Beacon_Interval")));
+	json_object_object_add(pramJobj, "wlDtmIntvl", JSON_OBJ_COPY(json_object_object_get(RadioObj, "X_ZYXEL_DTIM_Interval")));
+	json_object_object_add(pramJobj, "wlMode", JSON_OBJ_COPY(json_object_object_get(RadioObj, "X_ZYXEL_Wireless_Mode")));
+	json_object_object_add(pramJobj, "wlTxPwrPcnt", JSON_OBJ_COPY(json_object_object_get(RadioObj, "TransmitPower")));
+	json_object_object_add(pramJobj, "wlProtect", JSON_OBJ_COPY(json_object_object_get(RadioObj, "X_ZYXEL_Protection")));
+	json_object_object_add(pramJobj, "wlPreamble", JSON_OBJ_COPY(json_object_object_get(RadioObj, "X_ZYXEL_Preamble")));
+	json_object_array_add(Jarray, pramJobj);
+
+	zcfgFeJsonObjFree(SsidObj);
+	zcfgFeJsonObjFree(RadioObj);
+	return ret;
+}
+
 zcfgRet_t setAllWlOthersObjects(struct json_object *Jobj){
 	zcfgRet_t ret = ZCFG_SUCCESS;
 
@@ -384,57 +457,91 @@
 	struct json_object *iidArray = NULL;
 	uint8_t iidIdx =0;
 	const char* tmpOperatingFrequencyBand;
-	
+	/*
 	iidArray = json_object_object_get(Jobj, "wifiRadioOthersIid");
 	for(iidIdx=0;iidIdx<6;iidIdx++){
 		wifiRadioOthersIid.idx[iidIdx] = json_object_get_int( json_object_array_get_idx(iidArray, iidIdx));
 		if(wifiRadioOthersIid.idx[iidIdx] != 0)
 			wifiRadioOthersIid.level = iidIdx+1;
 	}
+	*/
+	objIndex_t SsidIid={0};
+	struct json_object *SsidObj = NULL;
+	const char *tmpLowerLayer = NULL;
+	uint8_t tmpRadioIndex;	
+	
+	SsidIid.level = 1;
+	SsidIid.idx[0] = json_object_get_int(json_object_object_get(Jobj, "Index"));
+	if((ret = zcfgFeObjJsonGet(RDM_OID_WIFI_SSID, &SsidIid, &SsidObj)) != ZCFG_SUCCESS)
+		return ret;
+	tmpLowerLayer = json_object_get_string(json_object_object_get(SsidObj, "LowerLayers"));
+	sscanf(tmpLowerLayer, "WiFi.Radio.%hhu", &tmpRadioIndex);
+	IID_INIT(wifiRadioOthersIid);
+	wifiRadioOthersIid.level = 1;
+	wifiRadioOthersIid.idx[0] = tmpRadioIndex;
+	zcfgFeJsonObjFree(SsidObj);
 	
 	if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_RADIO, &wifiRadioOthersIid, &wifiRadioOthersObj)) != ZCFG_SUCCESS) {
 		return ret;
 	}
-	
-	json_object_object_add(wifiRadioOthersObj, "X_ZYXEL_RTS_CTS_Threshold", json_object_new_int(wlRtsThrshld));
-	json_object_object_add(wifiRadioOthersObj, "X_ZYXEL_Fragment_Threshold", json_object_new_int(wlFrgThrshld));
-	json_object_object_add(wifiRadioOthersObj, "AutoChannelRefreshPeriod", json_object_new_int(AutoChannelTimer));
-	json_object_object_add(wifiRadioOthersObj, "X_ZYXEL_Beacon_Interval", json_object_new_int(wlBcnIntvl));
-	json_object_object_add(wifiRadioOthersObj, "X_ZYXEL_DTIM_Interval", json_object_new_int(wlDtmIntvl));
-	json_object_object_add(wifiRadioOthersObj, "X_ZYXEL_Wireless_Mode", json_object_new_string(wlMode));
-	json_object_object_add(wifiRadioOthersObj, "TransmitPower", json_object_new_int(wlTxPwrPcnt));
-	if(!strcmp(wlProtect, "off"))
-		json_object_object_add(wifiRadioOthersObj, "X_ZYXEL_Protection", json_object_new_boolean(false));
-	else
-		json_object_object_add(wifiRadioOthersObj, "X_ZYXEL_Protection", json_object_new_boolean(true));
-	
-	json_object_object_add(wifiRadioOthersObj, "X_ZYXEL_Preamble", json_object_new_string(wlPreamble));
+
+	if(json_object_object_get(Jobj, "wlRtsThrshld"))
+		json_object_object_add(wifiRadioOthersObj, "X_ZYXEL_RTS_CTS_Threshold", json_object_new_int(wlRtsThrshld));
+	if(json_object_object_get(Jobj, "wlFrgThrshld"))
+		json_object_object_add(wifiRadioOthersObj, "X_ZYXEL_Fragment_Threshold", json_object_new_int(wlFrgThrshld));
+	if(json_object_object_get(Jobj, "AutoChannelTimer"))
+		json_object_object_add(wifiRadioOthersObj, "AutoChannelRefreshPeriod", json_object_new_int(AutoChannelTimer));
+	if(json_object_object_get(Jobj, "wlBcnIntvl"))
+		json_object_object_add(wifiRadioOthersObj, "X_ZYXEL_Beacon_Interval", json_object_new_int(wlBcnIntvl));
+	if(json_object_object_get(Jobj, "wlDtmIntvl"))
+		json_object_object_add(wifiRadioOthersObj, "X_ZYXEL_DTIM_Interval", json_object_new_int(wlDtmIntvl));
+	if(json_object_object_get(Jobj, "wlMode"))
+		json_object_object_add(wifiRadioOthersObj, "X_ZYXEL_Wireless_Mode", json_object_new_string(wlMode));
+	if(json_object_object_get(Jobj, "wlTxPwrPcnt"))
+		json_object_object_add(wifiRadioOthersObj, "TransmitPower", json_object_new_int(wlTxPwrPcnt));
+	if(json_object_object_get(Jobj, "wlProtect")){
+		if(!strcmp(wlProtect, "off"))
+			json_object_object_add(wifiRadioOthersObj, "X_ZYXEL_Protection", json_object_new_boolean(false));
+		else
+			json_object_object_add(wifiRadioOthersObj, "X_ZYXEL_Protection", json_object_new_boolean(true));
+	}
+	if(json_object_object_get(Jobj, "wlPreamble"))
+		json_object_object_add(wifiRadioOthersObj, "X_ZYXEL_Preamble", json_object_new_string(wlPreamble));
 	//if (!strcmp(wlRifsAdvert, "off"))
 	//	json_object_object_add(wifiRadioOthersObj, "X_ZYXEL_RIFS_Advertisement", json_object_new_boolean(false));
 	//else
 	//	json_object_object_add(wifiRadioOthersObj, "X_ZYXEL_RIFS_Advertisement", json_object_new_boolean(true));
-	json_object_object_add(wifiRadioOthersObj, "X_ZYXEL_Frameburst", json_object_new_boolean(wlFrameburst));
+	if(json_object_object_get(Jobj, "wlFrameburst"))
+		json_object_object_add(wifiRadioOthersObj, "X_ZYXEL_Frameburst", json_object_new_boolean(wlFrameburst));
 	//json_object_object_add(wifiRadioOthersObj, "X_ZYXEL_OBSS_coex", json_object_new_boolean(wlObssCox));
 	tmpOperatingFrequencyBand = json_object_object_get(wifiRadioOthersObj, "OperatingFrequencyBand");
 	if(!strcmp(tmpOperatingFrequencyBand,"5GHz"))
 	{
-		json_object_object_add(wifiRadioOthersObj, "X_ZYXEL_DfsPreIsm", json_object_new_int(wlDfsPreIsm));
-		json_object_object_add(wifiRadioOthersObj, "X_ZYXEL_DfsPostIsm", json_object_new_int(wlDfsPostIsm));
-		json_object_object_add(wifiRadioOthersObj, "X_ZYXEL_TpcDb", json_object_new_int(wlTpcDb));
-	}
-	json_object_object_add(wifiRadioOthersObj, "X_ZYXEL_AirtimeFairness", json_object_new_boolean(atf));
-	if(InActiveChan) {
-		json_object_object_add(wifiRadioOthersObj, "X_ZYXEL_InActiveChannels", json_object_new_string(InActiveChan));
-	}
-	else {
-		json_object_object_add(wifiRadioOthersObj, "X_ZYXEL_InActiveChannels", json_object_new_string(""));
+		if(json_object_object_get(Jobj, "wlDfsPreIsm"))
+			json_object_object_add(wifiRadioOthersObj, "X_ZYXEL_DfsPreIsm", json_object_new_int(wlDfsPreIsm));
+		if(json_object_object_get(Jobj, "wlDfsPostIsm"))
+			json_object_object_add(wifiRadioOthersObj, "X_ZYXEL_DfsPostIsm", json_object_new_int(wlDfsPostIsm));
+		if(json_object_object_get(Jobj, "wlTpcDb"))
+			json_object_object_add(wifiRadioOthersObj, "X_ZYXEL_TpcDb", json_object_new_int(wlTpcDb));
+	}
+	if(json_object_object_get(Jobj, "atf"))
+		json_object_object_add(wifiRadioOthersObj, "X_ZYXEL_AirtimeFairness", json_object_new_boolean(atf));
+	if(json_object_object_get(Jobj, "InActiveChan")){
+		if(InActiveChan) {
+			json_object_object_add(wifiRadioOthersObj, "X_ZYXEL_InActiveChannels", json_object_new_string(InActiveChan));
+		}
+		else {
+			json_object_object_add(wifiRadioOthersObj, "X_ZYXEL_InActiveChannels", json_object_new_string(""));
+		}
 	}
 /* __ZyXEL__, Melissa, 20161111, Costomization for VMG1312-T20A Brazil */
-	if(singleSKU) {
-		json_object_object_add(wifiRadioOthersObj, "X_ZYXEL_SingleSKU", json_object_new_string(singleSKU));
-	}
-	else {
-		json_object_object_add(wifiRadioOthersObj, "X_ZYXEL_SingleSKU", json_object_new_string(""));
+	if(json_object_object_get(Jobj, "singleSKU")){
+		if(singleSKU) {
+			json_object_object_add(wifiRadioOthersObj, "X_ZYXEL_SingleSKU", json_object_new_string(singleSKU));
+		}
+		else {
+			json_object_object_add(wifiRadioOthersObj, "X_ZYXEL_SingleSKU", json_object_new_string(""));
+		}
 	}
 	
 	return ret;
@@ -446,29 +553,37 @@
 	struct json_object *iidArray = NULL;
 	uint8_t iidIdx =0;
 	
+	/*
 	iidArray = json_object_object_get(Jobj, "wifiSecOthersIid");
 	for(iidIdx=0;iidIdx<6;iidIdx++){
 		wifiSecOthersIid.idx[iidIdx] = json_object_get_int( json_object_array_get_idx(iidArray, iidIdx));
 		if(wifiSecOthersIid.idx[iidIdx] != 0)
 			wifiSecOthersIid.level = iidIdx+1;
 	}
+	*/
+	IID_INIT(wifiSecOthersIid);
+	wifiSecOthersIid.level = 1;
+	wifiSecOthersIid.idx[0] = json_object_get_int(json_object_object_get(Jobj,"Index"));
 	
 	if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_ACCESS_POINT_SEC, &wifiSecOthersIid, &wifiSecOthersObj)) != ZCFG_SUCCESS) {
 		return ret;
 	}
 	
-	if (!strcmp(wlPmf, "disabled"))
-	{
-		json_object_object_add(wifiSecOthersObj, "EnableManagementFrameProtection", json_object_new_boolean(false));
-	} else if(!strcmp(wlPmf, "capable"))
-	{
-		json_object_object_add(wifiSecOthersObj, "EnableManagementFrameProtection", json_object_new_boolean(true));
-		json_object_object_add(wifiSecOthersObj, "X_ZYXEL_PmfMethod", json_object_new_int(0));
-	}
-	else
+	if(json_object_object_get(Jobj, "wlPmf"))
 	{
-		json_object_object_add(wifiSecOthersObj, "EnableManagementFrameProtection", json_object_new_boolean(true));
-		json_object_object_add(wifiSecOthersObj, "X_ZYXEL_PmfMethod", json_object_new_int(1));
+		if (!strcmp(wlPmf, "disabled"))
+		{
+			json_object_object_add(wifiSecOthersObj, "EnableManagementFrameProtection", json_object_new_boolean(false));
+		} else if(!strcmp(wlPmf, "capable"))
+		{
+			json_object_object_add(wifiSecOthersObj, "EnableManagementFrameProtection", json_object_new_boolean(true));
+			json_object_object_add(wifiSecOthersObj, "X_ZYXEL_PmfMethod", json_object_new_int(0));
+		}
+		else
+		{
+			json_object_object_add(wifiSecOthersObj, "EnableManagementFrameProtection", json_object_new_boolean(true));
+			json_object_object_add(wifiSecOthersObj, "X_ZYXEL_PmfMethod", json_object_new_int(1));
+		}
 	}
 		
 	
@@ -521,18 +636,23 @@
 	struct json_object *iidArray = NULL;
 	uint8_t iidIdx =0;
 	
+	/*
 	iidArray = json_object_object_get(Jobj, "wifiApWpsOthersIid");
 	for(iidIdx=0;iidIdx<6;iidIdx++){
 		wifiApWpsOthersIid.idx[iidIdx] = json_object_get_int( json_object_array_get_idx(iidArray, iidIdx));
 		if(wifiApWpsOthersIid.idx[iidIdx] != 0)
 			wifiApWpsOthersIid.level = iidIdx+1;
 	}
-	
+	*/
+	IID_INIT(wifiApWpsOthersIid);
+	wifiApWpsOthersIid.level = 1;
+	wifiApWpsOthersIid.idx[0] = json_object_get_int(json_object_object_get(Jobj,"Index"));
 	if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_ACCESS_POINT_WPS, &wifiApWpsOthersIid, &wifiApWpsOthersObj)) != ZCFG_SUCCESS) {
 		return ret;
 	}
 	
-	json_object_object_add(wifiApWpsOthersObj, "X_ZYXEL_WPS_V2", json_object_new_boolean(wps_v2));
+	if(json_object_object_get(Jobj, "wps_v2"))
+		json_object_object_add(wifiApWpsOthersObj, "X_ZYXEL_WPS_V2", json_object_new_boolean(wps_v2));
 	
 	return ret;
 }
@@ -667,6 +787,8 @@
 		//ret = zcfgFeDalWifiOthersAdd(Jobj, NULL);
 	if(!strcmp(method, "PUT"))
 		ret = zcfgFeDalWifiOthersEdit(Jobj, NULL);
+	else if(!strcmp(method, "GET"))
+		ret = zcfgFeDalWifiOthersGet(Jobj, Jarray, replyMsg);
 	else
 		printf("Unknown method:%s\n", method);
 	
Index: libzcfg_fe_dal-1.0/zcfg_fe_dal.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/zcfg_fe_dal.c	2017-08-01 15:19:55.920073085 +0800
+++ libzcfg_fe_dal-1.0/zcfg_fe_dal.c	2017-08-01 16:48:54.180702467 +0800
@@ -221,6 +221,7 @@
 extern void zcfgFeDalShowTime(struct json_object *Jarray);
 extern void zcfgFeDalShowSysLog(struct json_object *Jarray);
 extern void zcfgFeDalShowWifiMACFilter(struct json_object *Jarray);
+extern void zcfgFeDalShowWifiOthers(struct json_object *Jarray);
 
 
 dal_handler_t dalHandler[] = {
@@ -264,7 +265,7 @@
 #ifdef BUILD_SONIQ
 {"WIFI_SONIQ",		WIFI_SONIQ_param, 	zcfgFeDalWifiSoniq,		NULL,						"edit", 			""},//Wireless
 #endif
-{"WIFI_OTHERS",		WIFI_OTHERS_param,	zcfgFeDalWifiOthers,	NULL,						"edit",				""},//Wireless
+{"wifi_others",		WIFI_OTHERS_param,	zcfgFeDalWifiOthers,	zcfgFeDalShowWifiOthers,	"edit|get",				"Wireless"},//
 {"snmp",			SNMP_param, 		zcfgFeDalSNMP,			zcfgFeDalShowSNMP,			"edit|get",				"SNMP"},
 {"time",			TIME_param, 		zcfgFeDalTime,			zcfgFeDalShowTime,			"edit|get",				"Time"},//Time
 {"trust_domain",	TRUST_DOMAIN_param, zcfgFeDalTrustDomain,	zcfgFeDalShowTrustDomain,	"get|add|delete",		"Remote_MGMT"},//Remote_MGMT
