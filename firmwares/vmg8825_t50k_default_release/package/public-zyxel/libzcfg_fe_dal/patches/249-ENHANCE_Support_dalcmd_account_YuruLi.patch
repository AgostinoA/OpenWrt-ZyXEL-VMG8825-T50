Index: libzcfg_fe_dal-1.0/maintenance/useraccount/zcfg_fe_dal_user_account.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/maintenance/useraccount/zcfg_fe_dal_user_account.c	2017-07-06 14:51:56.117375999 +0800
+++ libzcfg_fe_dal-1.0/maintenance/useraccount/zcfg_fe_dal_user_account.c	2017-07-06 14:51:56.277376000 +0800
@@ -11,101 +11,140 @@
 #include "zcfg_debug.h"
 #include "zcfg_msg.h"
 #include "zcfg_fe_dal_common.h"
+#include "zcfg_fe_dal.h"
 
 int highGpIdx = 1;
 int mediumGpIdx = 2;
 int lowGpIdx = 3;
 
-
 dal_param_t USER_ACCOUNT_param[] =  //RDM_OID_ZY_LOG_CFG_GP_ACCOUNT
 {
-	{"Index",				dalType_int,	 0, 	0,		NULL,	NULL,	dal_Edit|dal_Delete},
-	{"FirstIndex",			dalType_int,	 0, 	0,		NULL,	NULL,	dalcmd_Forbid},
-	{"SecondIndex", 		dalType_int,	 0, 	0,		NULL,	NULL,	dalcmd_Forbid},
-	{"Enabled", 			dalType_boolean, 0, 	0,		NULL,	NULL,	dal_Add},
-	{"EnableQuickStart",	dalType_boolean, 0, 	0,		NULL,	NULL,	0},
-	{"Username",			dalType_string,  0, 	0,		NULL,	NULL,	dal_Add},
+	{"Username",			dalType_string,  0, 	0,		NULL,	NULL,	dal_Add|dal_Edit|dal_Delete},
+	{"Enabled", 			dalType_boolean, 0, 	0,		NULL,	NULL,	0}, //default true
+	{"EnableQuickStart",	dalType_boolean, 0, 	0,		NULL,	NULL,	0}, //default value based on schema.json
+	{"oldPw",				dalType_string,  0, 	0,		NULL,	NULL,	dal_Add_ignore},
 	{"Password",			dalType_string,  0, 	0,		NULL,	NULL,	dal_Add},
-	{"AccountRetryTime",	dalType_int,	 0, 	5,		NULL,	NULL,	dal_Add},
-	{"AccountIdleTime", 	dalType_int,	 1, 	3600,	NULL,	NULL,	dal_Add},
-	{"AccountLockTime", 	dalType_int,	 5, 	5400,	NULL,	NULL,	dal_Add},
-	{"oldPw",				dalType_string,  0, 	0,		NULL,	NULL,	0},
-	{"verifyNewpassword",	dalType_string,  0, 	0,		NULL,	NULL,	0},
-	{"groupnumber", 		dalType_int,	 0, 	0,		NULL,	NULL,	dalcmd_Forbid},
-	{"groupName",			dalType_string,  0, 	0,		NULL,	"Administrator|User", 	dal_Add},
+	{"verifyNewpassword",	dalType_string,  0, 	0,		NULL,	NULL,	dal_Add},
+	{"AccountRetryTime",	dalType_int,	 0, 	5,		NULL,	NULL,	0},
+	{"AccountIdleTime", 	dalType_int,	 60, 	3600,	NULL,	NULL,	0},
+	{"AccountLockTime", 	dalType_int,	 300, 	5400,	NULL,	NULL,	0},
+	{"group",				dalType_string,  0, 	0,		NULL,	"Administrator|User", dal_Add|dal_Edit_ignore}, //depend on login acocunt, see paramPrevilegeChange(), defatul is "User"
+	{"Index",				dalType_string,  0, 	0,		NULL,	NULL,	dal_Add_ignore|dal_Edit_ignore},
 	{NULL,					0,				 0, 	0,		NULL,	NULL,	0}
 };
 
 void zcfgFeDalShowUserAccount(struct json_object *Jarray){
 	int i, len = 0;
 	struct json_object *obj;
+	int AccountRetryTime, AccountIdleTime, AccountLockTime;
 
 	if(json_object_get_type(Jarray) != json_type_array){
 		printf("wrong Jobj format!\n");
 		return;
 	}
 
-	printf("%-10s %-10s %-15s %-15s %-15s %-15s %-15s\n", "Index", "Active", "User Name", "Retry Times", "Idle Timeout", "Lock Period", "Group");		
+	//printf("%-10s %-10s %-15s %-15s %-15s %-15s %-15s\n", "Index", "Active", "User Name", "Retry Times", "Idle Timeout", "Lock Period", "Group");
+	printf("%-15s %-10s %-15s %-22s %-22s %-15s\n", "User Name", "Active", "Retry Times", "Idle Timeout(second)", "Lock Period(second)", "Group");
 	len = json_object_array_length(Jarray);
 	for(i=0;i<len;i++){
 		obj = json_object_array_get_idx(Jarray, i);
-		printf("%-10s ",json_object_get_string(json_object_object_get(obj, "Index")));
-		if(json_object_get_boolean(json_object_object_get(obj, "Enabled")))
+		//printf("%-10s ",json_object_get_string(json_object_object_get(obj, "Index")));
+		printf("%-15s ",Jgets(obj, "Username"));
+		if(Jgetb(obj, "Enabled"))
 			printf("%-10s ","Enable");
 		else
 			printf("%-10s ","Disable");
-		printf("%-15s ",json_object_get_string(json_object_object_get(obj, "Username")));
-		printf("%-15s ",json_object_get_string(json_object_object_get(obj, "AccountRetryTime")));
-		printf("%-15s ",json_object_get_string(json_object_object_get(obj, "AccountIdleTime")));
-		printf("%-15s ",json_object_get_string(json_object_object_get(obj, "AccountLockTime")));
-		printf("%-15s ",json_object_get_string(json_object_object_get(obj, "groupName")));
+
+		AccountRetryTime= Jgeti(obj, "AccountRetryTime");
+		AccountIdleTime= Jgeti(obj, "AccountIdleTime");
+		AccountLockTime= Jgeti(obj, "AccountLockTime");
+		printf("%-15d ", AccountRetryTime);
+		printf("%-22d ", AccountIdleTime);
+		printf("%-22d ", AccountLockTime);
+		printf("%-15s ",json_object_get_string(json_object_object_get(obj, "group")));
 		printf("\n");
 	}
 	
 }
 
+#if 0 //use username as key, not use index
+static zcfgRet_t index_to_iid(int index, objIndex_t &iid){
+	struct json_object *obj = NULL;
+	int idx = 0;
+
+	IID_INIT(*iid);
+	iid->level=2;
+	if(!strcmp(loginLevel, "high") || !strcmp(loginLevel, "medium"))
+		iid->idx[0]=mediumGpIdx;
+	else
+		iid->idx[0]=lowGpIdx;
+
+	while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_ZY_LOG_CFG_GP_ACCOUNT, iid, &obj) == ZCFG_SUCCESS) {
+		idx++;
+		zcfgFeJsonObjFree(obj);
+		if(idx == index){
+			return ZCFG_SUCCESS;
+		}
+	}
+	return ZCFG_NOT_FOUND;
+}
+#endif
+
+/*
+ * For current design, high level account data not showen on GUI
+ * high and medium level user get medium and low level account data
+ * low level user get only low level account data
+ *
+ * Note: the index is not the same for different level login user
+ * Index to iid maping mechanism need be the same for zcfgFeDal_User_Account_Get() and index_to_iid()
+*/
 zcfgRet_t zcfgFeDal_User_Account_Get(struct json_object *Jobj, struct json_object *Jarray, char *replyMsg){
 	zcfgRet_t ret = ZCFG_SUCCESS;
 	objIndex_t iid;
 	struct json_object *obj = NULL;
 	struct json_object *pramJobj = NULL;
-	struct json_object *accountEnabled = NULL;
-	struct json_object *userName = NULL;
-	struct json_object *retryTime = NULL;
-	struct json_object *idleTime = NULL;
-	struct json_object *lockTime = NULL;
-	
-	int index = 1; // show index 1,2,3,...
+	char loginLevel[16] = {0};
+	int index = 0;
+
+	if(getLoginUserInfo(Jobj, NULL, loginLevel) != ZCFG_SUCCESS){
+		if(replyMsg) strcpy(replyMsg, "Internal Error, can't get account information");
+		dbg_printf("getLoginUserInfo Fail");
+		return ZCFG_INTERNAL_ERROR;
+	}
 
 	IID_INIT(iid);
 	iid.level=2;
-	iid.idx[0]=mediumGpIdx; // group administrator (iid:[2,x,0,0,0,0]), group user (iid:[3,x,0,0,0,0])
+	if(!strcmp(loginLevel, "high") || !strcmp(loginLevel, "medium"))
+		iid.idx[0]=mediumGpIdx; // group administrator (iid:[2,x,0,0,0,0]), group user (iid:[3,x,0,0,0,0])
+	else
+		iid.idx[0]=lowGpIdx;
+	
 	while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_ZY_LOG_CFG_GP_ACCOUNT, &iid, &obj) == ZCFG_SUCCESS) {
-		accountEnabled = json_object_object_get(obj, "Enabled");
-		userName = json_object_object_get(obj, "Username");
-		retryTime = json_object_object_get(obj, "AccountRetryTime");
-		idleTime = json_object_object_get(obj, "AccountIdleTime");
-		lockTime = json_object_object_get(obj, "AccountLockTime");
 		pramJobj = json_object_new_object();
+		index++;
 		json_object_object_add(pramJobj, "Index", json_object_new_int(index));
-		json_object_object_add(pramJobj, "Enabled", JSON_OBJ_COPY(accountEnabled));
-		json_object_object_add(pramJobj, "Username", JSON_OBJ_COPY(userName));
-		json_object_object_add(pramJobj, "AccountRetryTime", JSON_OBJ_COPY(retryTime));
-		json_object_object_add(pramJobj, "AccountIdleTime", JSON_OBJ_COPY(idleTime));
-		json_object_object_add(pramJobj, "AccountLockTime", JSON_OBJ_COPY(lockTime));
-		if(iid.idx[0]==mediumGpIdx){
-			json_object_object_add(pramJobj, "groupName",json_object_new_string("Administrator"));
+		replaceParam(pramJobj, "Enabled", obj, "Enabled");
+		replaceParam(pramJobj, "Username", obj, "Username");
+		replaceParam(pramJobj, "AccountRetryTime", obj, "AccountRetryTime");
+		replaceParam(pramJobj, "AccountIdleTime", obj, "AccountIdleTime");
+		replaceParam(pramJobj, "AccountLockTime", obj, "AccountLockTime");
+
+		if(iid.idx[0]==highGpIdx){//should not happen for current design
+			json_object_object_add(pramJobj, "group",json_object_new_string("Root"));
+		}
+		else if(iid.idx[0]==mediumGpIdx){
+			json_object_object_add(pramJobj, "group",json_object_new_string("Administrator"));
 		}
 		else if(iid.idx[0]==lowGpIdx){
-			json_object_object_add(pramJobj, "groupName",json_object_new_string("User"));
+			json_object_object_add(pramJobj, "group",json_object_new_string("User"));
 		}
 		else{
 			dbg_printf("%s : Error\n",__FUNCTION__);
 		}
 		json_object_array_add(Jarray, pramJobj);
-		index++;
 		zcfgFeJsonObjFree(obj);
 	}
+
 	return ret;
 }
 
@@ -115,6 +154,7 @@
 	struct json_object *accountObj = NULL;
 	objIndex_t accountIid ={0};
 	const char *username = NULL;
+#if	0
 	const char *password = NULL;
 	const char *oldPw = NULL;
 	const char *verifyNewpassword = NULL;
@@ -125,40 +165,45 @@
 	bool enable = false;
 	bool enableQuickStart = false;
 	int groupnumber = 0;
+#endif
 	int FirstIndex = 0;
-	int SecondIndex = 0;
+	char loginLevel[16] = {0};
 
-	if(json_object_object_get(Jobj, "groupName")){ // from dalcmd
-		if(!strcmp("Administrator",json_object_get_string(json_object_object_get(Jobj, "groupName")))){
-			FirstIndex = 2;
-		}
-		else if(!strcmp("User",json_object_get_string(json_object_object_get(Jobj, "groupName")))){
-			FirstIndex = 3;
-		}
-		else{
-			printf("ERROR!\n");
-		}
-	}
-	else{ // from GUI
-		FirstIndex = json_object_get_int(json_object_object_get(Jobj, "FirstIndex"));
+	if(getLoginUserInfo(Jobj, NULL, loginLevel) != ZCFG_SUCCESS){
+		if(replyMsg) strcpy(replyMsg, "Internal Error, can't get account information");
+		dbg_printf("getLoginUserInfo Fail");
+		return ZCFG_INTERNAL_ERROR;
 	}
-	
-	//get iid[0] of this item
-	FirstIndex = json_object_get_int(json_object_object_get(Jobj, "FirstIndex"));
-	username = json_object_get_string(json_object_object_get(Jobj, "Username"));
 
-	IID_INIT(accountIid);
-
-	while(zcfgFeObjJsonGetNext(RDM_OID_ZY_LOG_CFG_GP_ACCOUNT, &accountIid, &accountObj) == ZCFG_SUCCESS)
-	{
-		accountName = json_object_get_string(json_object_object_get(accountObj, "Username"));
-		if(strcmp(accountName, username) == 0)
-		{
-			zcfgFeJsonObjFree(accountObj);
+	if(strcmp(Jgets(Jobj, "Password"), Jgets(Jobj, "verifyNewpassword"))){
+		if(replyMsg) strcpy(replyMsg, "Password and verifyNewpassword don't match");
+		return ZCFG_REQUEST_REJECT;
+	}
+
+	username = Jgets(Jobj, "Username");
+	if(getSpecificObj(RDM_OID_ZY_LOG_CFG_GP_ACCOUNT, "Username", json_type_string, username, NULL, NULL)){
+		if(replyMsg) strcpy(replyMsg, "Username is duplicated");
+		return ZCFG_REQUEST_REJECT;
+	}
+
+	//add default value
+	if(!ISSET("group")) Jadds(Jobj, "group", "User");
+	if(!ISSET("Enabled")) Jaddb(Jobj, "Enabled", true);
+	if(!ISSET("AccountRetryTime")) Jaddi(Jobj, "AccountRetryTime", 3);
+	if(!ISSET("AccountIdleTime")) Jaddi(Jobj, "AccountIdleTime", 5*60);
+	if(!ISSET("AccountLockTime")) Jaddi(Jobj, "AccountLockTime", 5*60);
+
+	if(!strcmp("Administrator", Jgets(Jobj, "group"))){
+		if(!strcmp(loginLevel, "low")){
+			if(replyMsg) strcpy(replyMsg, "Request Deny, can't add Administrator level account");
 			return ZCFG_REQUEST_REJECT;
-		}		
-		zcfgFeJsonObjFree(accountObj);
+		}
+		FirstIndex = 2;
 	}
+	else if(!strcmp("User",Jgets(Jobj, "group")))
+		FirstIndex = 3;
+	else
+		dbg_printf("ERROR!\n");
 
 	IID_INIT(accountIid);
 	accountIid.level = 1;
@@ -170,28 +215,16 @@
 	}
 
 	if(ret == ZCFG_SUCCESS){
-		SecondIndex = json_object_get_int(json_object_object_get(Jobj, "SecondIndex"));
-		enable = json_object_get_boolean(json_object_object_get(Jobj, "Enabled"));
-		enableQuickStart = json_object_get_boolean(json_object_object_get(Jobj, "EnableQuickStart"));
-		username = json_object_get_string(json_object_object_get(Jobj, "Username"));
-		password = json_object_get_string(json_object_object_get(Jobj, "Password"));
-		accountRetryTime = json_object_get_int(json_object_object_get(Jobj, "AccountRetryTime"));
-		accountIdleTime = json_object_get_int(json_object_object_get(Jobj, "AccountIdleTime"));
-		accountLockTime = json_object_get_int(json_object_object_get(Jobj, "AccountLockTime"));
-		verifyNewpassword = json_object_get_string(json_object_object_get(Jobj, "verifyNewpassword"));
-		groupnumber = json_object_get_int(json_object_object_get(Jobj, "groupnumber"));
+		replaceParam(accountObj, "Enabled", Jobj, "Enabled");
+		replaceParam(accountObj, "EnableQuickStart", Jobj, "EnableQuickStart");
+		replaceParam(accountObj, "Username", Jobj, "Username");
+		replaceParam(accountObj, "Password", Jobj, "Password");
+		replaceParam(accountObj, "AccountRetryTime", Jobj, "AccountRetryTime");
+		replaceParam(accountObj, "AccountIdleTime", Jobj, "AccountIdleTime");
+		replaceParam(accountObj, "AccountLockTime", Jobj, "AccountLockTime");
+		//replaceParam(accountObj, "verifyNewpassword", Jobj, "verifyNewpassword");
+		//replaceParam(accountObj, "groupnumber", Jobj, "groupnumber");
 		
-		json_object_object_add(accountObj, "FirstIndex", json_object_new_int(FirstIndex));
-		json_object_object_add(accountObj, "SecondIndex", json_object_new_int(SecondIndex));
-		json_object_object_add(accountObj, "Enabled", json_object_new_boolean(enable));
-		json_object_object_add(accountObj, "EnableQuickStart", json_object_new_boolean(enableQuickStart));
-		json_object_object_add(accountObj, "Username", json_object_new_string(username));
-		json_object_object_add(accountObj, "Password", json_object_new_string(password));
-		json_object_object_add(accountObj, "AccountRetryTime", json_object_new_int(accountRetryTime));
-		json_object_object_add(accountObj, "AccountIdleTime", json_object_new_int(accountIdleTime));
-		json_object_object_add(accountObj, "AccountLockTime", json_object_new_int(accountLockTime));
-		json_object_object_add(accountObj, "verifyNewpassword", json_object_new_string(verifyNewpassword));
-		json_object_object_add(accountObj, "groupnumber", json_object_new_int(groupnumber));
 		ret = zcfgFeObjJsonSet(RDM_OID_ZY_LOG_CFG_GP_ACCOUNT, &accountIid, accountObj, NULL);
 	}
 	zcfgFeJsonObjFree(accountObj);
@@ -203,82 +236,88 @@
 	zcfgRet_t ret = ZCFG_SUCCESS;
 	struct json_object *accountObj = NULL;
 	struct json_object *reqObj = NULL;
-	int reqObjIdx = 0;
+	int arrayIdx = 0;
 	objIndex_t accountIid = {0};
 	const char *username = NULL;
-	const char *password = NULL;
-	const char *oldPw = NULL;
-	const char *verifyNewpassword = NULL;
-	int accountRetryTime = 0;
-	int accountIdleTime = 0;
-	int accountLockTime = 0;
+	const char *curPassword = NULL;
 	bool enable = false;
-	int FirstIndex = 0;
-	int SecondIndex = 0;
 	enum json_type jsonType;
-	
+	char loginLevel[16] = {0};
+
+	if(getLoginUserInfo(Jobj, NULL, loginLevel) != ZCFG_SUCCESS){
+		if(replyMsg) strcpy(replyMsg, "Internal Error, can't get account information");
+		dbg_printf("getLoginUserInfo Fail");
+		return ZCFG_INTERNAL_ERROR;
+	}
+
 	jsonType = json_object_get_type(Jobj);
 	
-	//Enter object format for accoutObj
 	if(jsonType == json_type_object){
-		//get iid[0] and iid[1] of this item 
-		FirstIndex = json_object_get_int(json_object_object_get(Jobj, "FirstIndex"));
-		SecondIndex = json_object_get_int(json_object_object_get(Jobj, "SecondIndex"));
-	
-		IID_INIT(accountIid);
-		accountIid.level = 2;
-		accountIid.idx[0] = FirstIndex;
-		accountIid.idx[1] = SecondIndex;
 		
-		ret = zcfgFeObjJsonGet(RDM_OID_ZY_LOG_CFG_GP_ACCOUNT, &accountIid, &accountObj);
-		if(ret == ZCFG_SUCCESS) {
-			enable = json_object_get_boolean(json_object_object_get(Jobj, "Enabled"));
-			password = json_object_get_string(json_object_object_get(Jobj, "Password"));
-			accountRetryTime = json_object_get_int(json_object_object_get(Jobj, "AccountRetryTime"));
-			accountIdleTime = json_object_get_int(json_object_object_get(Jobj, "AccountIdleTime"));
-			accountLockTime = json_object_get_int(json_object_object_get(Jobj, "AccountLockTime"));
-			oldPw = json_object_get_string(json_object_object_get(Jobj, "oldPw"));
-			verifyNewpassword = json_object_get_string(json_object_object_get(Jobj, "verifyNewpassword"));
-			if((strlen(password)> 0)||(strlen(oldPw)> 0)){
-				// compare if password is same, if correct, then change password into new password
-				if (strcmp(json_object_get_string(json_object_object_get(accountObj, "Password")), oldPw)){
-					return ZCFG_NOT_FOUND;
-				}
-				else{
-					json_object_object_add(accountObj, "Password", json_object_new_string(password));
-				}			
+		username = Jgets(Jobj, "Username");
+		if(!getSpecificObj(RDM_OID_ZY_LOG_CFG_GP_ACCOUNT, "Username", json_type_string, username, &accountIid, &accountObj)){
+			if(replyMsg) strcpy(replyMsg, "Request reject");
+			return ZCFG_REQUEST_REJECT;
+		}
+
+		if(accountIid.idx[0] < mediumGpIdx || (!strcmp(loginLevel, "low") && accountIid.idx[0] < lowGpIdx)){
+			if(replyMsg) strcpy(replyMsg, "Request reject");
+			zcfgFeJsonObjFree(accountObj);
+			return ZCFG_REQUEST_REJECT;
+		}
+
+		if(ISSET("Password")){
+			if(!ISSET("oldPw") || !ISSET("verifyNewpassword")){
+				if(replyMsg) strcpy(replyMsg, "Need --oldPw and --verifyNewpassword to modify Password");
+				zcfgFeJsonObjFree(accountObj);
+				return ZCFG_DELETE_REJECT;
+			}
+
+			if(strcmp(Jgets(Jobj, "Password"), Jgets(Jobj, "verifyNewpassword"))){
+				if(replyMsg) strcpy(replyMsg, "--Password and --verifyNewpassword don't match");
+				zcfgFeJsonObjFree(accountObj);
+				return ZCFG_REQUEST_REJECT;
+			}
+				
+			curPassword = Jgets(accountObj, "Password");
+			if(strcmp(curPassword, Jgets(Jobj ,"oldPw"))){
+				if(replyMsg) strcpy(replyMsg, "Wrong --oldPw value");
+				zcfgFeJsonObjFree(accountObj);
+				return ZCFG_NOT_FOUND; //GUI use ZCFG_NOT_FOUND to detect oldPw error.
 			}
-			json_object_object_add(accountObj, "Enabled", json_object_new_boolean(enable));
-			json_object_object_add(accountObj, "AccountRetryTime", json_object_new_int(accountRetryTime));
-			json_object_object_add(accountObj, "AccountIdleTime", json_object_new_int(accountIdleTime));
-			json_object_object_add(accountObj, "AccountLockTime", json_object_new_int(accountLockTime));
-			ret = zcfgFeObjJsonSet(RDM_OID_ZY_LOG_CFG_GP_ACCOUNT, &accountIid, accountObj, NULL);
 		}
+		
+		replaceParam(accountObj, "Enabled", Jobj, "Enabled");
+		replaceParam(accountObj, "Password", Jobj, "Password");
+		replaceParam(accountObj, "AccountRetryTime", Jobj, "AccountRetryTime");
+		replaceParam(accountObj, "AccountIdleTime", Jobj, "AccountIdleTime");
+		replaceParam(accountObj, "AccountLockTime", Jobj, "AccountLockTime");
+			
+		ret = zcfgFeObjJsonSet(RDM_OID_ZY_LOG_CFG_GP_ACCOUNT, &accountIid, accountObj, NULL);
+		zcfgFeJsonObjFree(accountObj);
 	}
 
-	//Enter array format for accoutObj
-	else if(jsonType == json_type_array){
-		while((reqObj = json_object_array_get_idx(Jobj, reqObjIdx)) !=NULL){
-			//get iid[0] and iid[1] of this item 
-			FirstIndex = json_object_get_int(json_object_object_get(reqObj, "FirstIndex"));
-			SecondIndex = json_object_get_int(json_object_object_get(reqObj, "SecondIndex"));
-			reqObjIdx++;
-		
-			IID_INIT(accountIid);
-			accountIid.level = 2;
-			accountIid.idx[0] = FirstIndex;
-			accountIid.idx[1] = SecondIndex;
-		
-			ret = zcfgFeObjJsonGet(RDM_OID_ZY_LOG_CFG_GP_ACCOUNT, &accountIid, &accountObj);
-			if(ret == ZCFG_SUCCESS) {
-				enable = json_object_get_boolean(json_object_object_get(reqObj, "Enabled"));
-				json_object_object_add(accountObj, "Enabled", json_object_new_boolean(enable));
-				ret = zcfgFeObjJsonSet(RDM_OID_ZY_LOG_CFG_GP_ACCOUNT, &accountIid, accountObj, NULL);
+	//GUI only, enable/dissable mutil accounts
+	if(jsonType == json_type_array){
+		while((reqObj = json_object_array_get_idx(Jobj, arrayIdx)) !=NULL){
+			arrayIdx++;
+			username = Jgets(reqObj, "Username");
+			if((Jget(reqObj, "Enabled")!=NULL) && getSpecificObj(RDM_OID_ZY_LOG_CFG_GP_ACCOUNT, "Username", json_type_string, username, &accountIid, &accountObj)){
+				if(accountIid.idx[0] < mediumGpIdx || (!strcmp(loginLevel, "low") && accountIid.idx[0] < lowGpIdx)){
+					zcfgFeJsonObjFree(accountObj);
+					continue;
+				}
+				
+				enable = Jgetb(accountObj, "Enabled");
+				if(enable != Jgetb(reqObj, "Enabled")){
+					replaceParam(accountObj, "Enabled", reqObj, "Enabled");
+					zcfgFeObjJsonSet(RDM_OID_ZY_LOG_CFG_GP_ACCOUNT, &accountIid, accountObj, NULL);
+				}
+				zcfgFeJsonObjFree(accountObj);
 			}
 		}
 	}
-	zcfgFeJsonObjFree(reqObj);
-	zcfgFeJsonObjFree(accountObj);
+	
 	return ret;
 }
 
@@ -287,41 +326,57 @@
 	zcfgRet_t ret = ZCFG_SUCCESS;
 	struct json_object *accountObj = NULL;
 	objIndex_t accountIid = {0};
-	int FirstIndex = 0;
-	int SecondIndex = 0;
+	const char *username;
+	char loginLevel[16] = {0};
+	char loginUserName[32] = {0};
+
+	if(getLoginUserInfo(Jobj, loginUserName, loginLevel) != ZCFG_SUCCESS){
+		dbg_printf("getLoginUserInfo Fail");
+		if(replyMsg) strcpy(replyMsg, "Internal Error, can't get account information");
+		return ZCFG_INTERNAL_ERROR;
+	}
 
-	//get iid[0] and iid[1] of this item 
-	FirstIndex  = json_object_get_int(json_object_object_get(Jobj, "FirstIndex"));
-	SecondIndex = json_object_get_int(json_object_object_get(Jobj, "SecondIndex"));
-	
-	IID_INIT(accountIid);
-	accountIid.level = 2;
-	accountIid.idx[0] = FirstIndex;
-	accountIid.idx[1] = SecondIndex;
-	
-	ret = zcfgFeObjJsonGet(RDM_OID_ZY_LOG_CFG_GP_ACCOUNT, &accountIid, &accountObj);
-	if(ret == ZCFG_SUCCESS) { 
-		ret = zcfgFeObjJsonDel(RDM_OID_ZY_LOG_CFG_GP_ACCOUNT, &accountIid, NULL);
+	username = Jgets(Jobj, "Username");
+	if(!strcmp(username, loginUserName)){
+		if(replyMsg) strcpy(replyMsg, "Can't delete yourself");
+		return ZCFG_REQUEST_REJECT;
+	}
+	if(!getSpecificObj(RDM_OID_ZY_LOG_CFG_GP_ACCOUNT, "Username", json_type_string, username, &accountIid, &accountObj)){
+		if(replyMsg) strcpy(replyMsg, "Request reject");
+		return ZCFG_REQUEST_REJECT;
+	}
+	if(accountIid.idx[0] < mediumGpIdx || (!strcmp(loginLevel, "low") && accountIid.idx[0] < lowGpIdx)){
+		if(replyMsg) strcpy(replyMsg, "Request reject");
+		zcfgFeJsonObjFree(accountObj);
+		return ZCFG_REQUEST_REJECT;
 	}
 	
+	ret = zcfgFeObjJsonDel(RDM_OID_ZY_LOG_CFG_GP_ACCOUNT, &accountIid, NULL);
 	zcfgFeJsonObjFree(accountObj);
 	return ret;
 }
 
 zcfgRet_t zcfgFeDalUserAccount(const char *method, struct json_object *Jobj, struct json_object *Jarray, char *replyMsg){
-	zcfgRet_t ret = ZCFG_SUCCESS;
+	zcfgRet_t ret = ZCFG_SUCCESS;	
+	char loginLevel[16] = {0};
+	char loginUserName[32] = {0};
 
 	if(!method || !Jobj)
 		return ZCFG_INTERNAL_ERROR;
 
+	if(getLoginUserInfo(Jobj, loginUserName, loginLevel) != ZCFG_SUCCESS){
+		printf("getLoginUserInfo Fail");
+		return ZCFG_INTERNAL_ERROR;
+	}
+
 	if(!strcmp(method, "GET")){
-		ret = zcfgFeDal_User_Account_Get(Jobj, Jarray, NULL);
+		ret = zcfgFeDal_User_Account_Get(Jobj, Jarray, replyMsg);
 	}else if(!strcmp(method, "PUT")) {
-		ret = zcfgFeDal_User_Account_Edit(Jobj, NULL);
+		ret = zcfgFeDal_User_Account_Edit(Jobj, replyMsg);
 	}else if(!strcmp(method, "POST")) {
-		ret = zcfgFeDal_User_Account_Add(Jobj, NULL);
+		ret = zcfgFeDal_User_Account_Add(Jobj, replyMsg);
 	}else if(!strcmp(method, "DELETE")) {
-		ret = zcfgFeDal_User_Account_Delete(Jobj, NULL);
+		ret = zcfgFeDal_User_Account_Delete(Jobj, replyMsg);
 	}else
 		printf("Unknown method:%s\n", method);
 
Index: libzcfg_fe_dal-1.0/network/broadband/zcfg_fe_dal_broadband.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/network/broadband/zcfg_fe_dal_broadband.c	2017-07-06 14:51:56.121375999 +0800
+++ libzcfg_fe_dal-1.0/network/broadband/zcfg_fe_dal_broadband.c	2017-07-06 14:51:56.277376000 +0800
@@ -302,52 +302,6 @@
 	return changed;
 }
 
-bool getSpecificObj(zcfg_offset_t oid, char *key, json_type type, void *value, objIndex_t *outIid, struct json_object **outJobj)
-{
-	objIndex_t iid;
-	struct json_object *Obj = NULL;
-	struct json_object *pramJobj;
-	bool found = false;
-
-	IID_INIT(iid);
-	while(zcfgFeObjJsonGetNextWithoutUpdate(oid, &iid, &Obj) == ZCFG_SUCCESS) {
-		pramJobj = json_object_object_get(Obj, key);
-		if(pramJobj != NULL){
-			if(type == json_type_string){
-				if(!strcmp((const char*)value, json_object_get_string(pramJobj))){
-					found = true;
-				}
-			}
-			else{
-				if(*(int*)value == json_object_get_int(pramJobj))
-					found = true;
-			}
-			
-			if(found){
-				if(outIid) memcpy(outIid, &iid, sizeof(objIndex_t));
-				if(outJobj) *outJobj = Obj;
-				else json_object_put(Obj);
-				break;
-			}
-		}
-		json_object_put(Obj);
-	}
-
-	return found;
-}
-
-//find key2 in Jobj2, if it exist add it to Jobj1 as key1
-int replaceParam(struct json_object *Jobj1, char *key1, struct json_object *Jobj2, char *key2){
-	struct json_object *pramJobj = NULL;
-
-	pramJobj = json_object_object_get(Jobj2, key2);
-	if(pramJobj){
-		json_object_object_add(Jobj1, key1, JSON_OBJ_COPY(pramJobj));
-		return 1;
-	}
-	return 0;
-}
-
 static zcfgRet_t addDefaultParam(struct json_object *Jobj, char *replyMsg){
 
 	if(Type == NULL){
Index: libzcfg_fe_dal-1.0/zcfg_fe_dal.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/zcfg_fe_dal.c	2017-07-06 14:51:56.201375999 +0800
+++ libzcfg_fe_dal-1.0/zcfg_fe_dal.c	2017-07-06 14:51:56.277376000 +0800
@@ -4,9 +4,13 @@
 #include <ctype.h>
 #include "zcfg_rdm_oid.h"
 #include "zcfg_fe_dal_common.h"
+#include "zcfg_fe_dal.h"
 
 #define isdigit(c) ((c >= 0x30) && (c < 0x3A))
 
+#define DAL_LOGIN_LEVEL "DAL_LOGIN_LEVEL"
+#define DAL_LOGIN_USERNAME "DAL_LOGIN_USERNAME"
+
 bool printDebugMsg = false;
 
 extern dal_param_t WAN_param[];
@@ -276,7 +280,7 @@
 {"sp_mgmt_srv", 		SP_MGMT_SRV_param,	zcfgFeDalSPMgmtSrv,			NULL,		"edit",			""},
 {"LOGIN_PRIVILEGE", LOGIN_PRIVILEGE_param,	zcfgFeDalLoginPrivilege,NULL, 					"edit",				""},//root_only
 {"QUICKSTART", 		QUICK_START_param,	zcfgFeDalQuickStart,	NULL,						"edit",				""},//root_only
-{"USER_ACCOUNT",	USER_ACCOUNT_param, zcfgFeDalUserAccount,	zcfgFeDalShowUserAccount,	"get|add|edit|delete",	"User_Account"}, //temporarily root_only //User_Account
+{"user_account",	USER_ACCOUNT_param, zcfgFeDalUserAccount,	zcfgFeDalShowUserAccount,	"get|add|edit|delete",	"User_Account"}, //temporarily root_only //User_Account
 {"lanhosts",		NETWORK_MAP_param, zcfgFeDalNetworkMAP,	zcfgFeDalShowNetworkMAP,		"get",				"Status"},
 {NULL,				NULL,				NULL, 					NULL,						NULL,				 NULL}
 };
@@ -340,8 +344,39 @@
 {NULL,		NULL,		NULL}
 };
 
+bool getSpecificObj(zcfg_offset_t oid, char *key, json_type type, void *value, objIndex_t *outIid, struct json_object **outJobj)
+{
+	objIndex_t iid;
+	struct json_object *Obj = NULL;
+	struct json_object *pramJobj;
+	bool found = false;
 
+	IID_INIT(iid);
+	while(zcfgFeObjJsonGetNextWithoutUpdate(oid, &iid, &Obj) == ZCFG_SUCCESS) {
+		pramJobj = json_object_object_get(Obj, key);
+		if(pramJobj != NULL){
+			if(type == json_type_string){
+				if(!strcmp((const char*)value, json_object_get_string(pramJobj))){
+					found = true;
+				}
+			}
+			else{
+				if(*(int*)value == json_object_get_int(pramJobj))
+					found = true;
+			}
+			
+			if(found){
+				if(outIid) memcpy(outIid, &iid, sizeof(objIndex_t));
+				if(outJobj) *outJobj = Obj;
+				else json_object_put(Obj);
+				break;
+			}
+		}
+		json_object_put(Obj);
+	}
 
+	return found;
+}
 
 zcfgRet_t getCertList(struct json_object **Jarray){
 	struct json_object *obj = NULL;
@@ -831,6 +866,18 @@
 	return 1;
 }
 
+//find key2 in Jobj2, if it exist add it to Jobj1 as key1
+int replaceParam(struct json_object *Jobj1, char *key1, struct json_object *Jobj2, char *key2){
+	struct json_object *pramJobj = NULL;
+
+	pramJobj = json_object_object_get(Jobj2, key2);
+	if(pramJobj){
+		json_object_object_add(Jobj1, key1, JSON_OBJ_COPY(pramJobj));
+		return 1;
+	}
+	return 0;
+}
+
 bool findInList(char *list, char *target, char *separator){
 	char *buf, *ptr, *tmp_ptr = NULL;
 
@@ -955,6 +1002,55 @@
 	return true;
 }
 
+zcfgRet_t insertLoginUserInfo(struct json_object *Jobj, const char *userName, const char *level){
+	struct json_object *subJobj;
+	
+	if(!Jobj || !userName || !level)
+		return ZCFG_INTERNAL_ERROR;
+	
+	if(json_object_get_type(Jobj) == json_type_object){
+		json_object_object_add(Jobj, DAL_LOGIN_LEVEL, json_object_new_string(level));
+		json_object_object_add(Jobj, DAL_LOGIN_USERNAME, json_object_new_string(userName));
+	}
+	else if(json_object_get_type(Jobj) == json_type_array){
+		subJobj = json_object_array_get_idx(Jobj, 0);
+		if(!subJobj)
+			return ZCFG_INTERNAL_ERROR;
+		
+		json_object_object_add(subJobj, DAL_LOGIN_LEVEL, json_object_new_string(level));
+		json_object_object_add(subJobj, DAL_LOGIN_USERNAME, json_object_new_string(userName));
+	}
+	else
+		return ZCFG_INTERNAL_ERROR;
+
+	return ZCFG_SUCCESS;
+}
+
+zcfgRet_t getLoginUserInfo(struct json_object *Jobj, char *userName, char *level){
+	struct json_object *subJobj;
+
+	if(!Jobj)
+		return ZCFG_INTERNAL_ERROR;
+	
+	if(json_object_get_type(Jobj) == json_type_object){
+		if(userName) strcpy(userName, json_object_get_string(json_object_object_get(Jobj, DAL_LOGIN_USERNAME)));
+		if(level) strcpy(level, json_object_get_string(json_object_object_get(Jobj, DAL_LOGIN_LEVEL)));
+	}
+	else if(json_object_get_type(Jobj) == json_type_array){
+		subJobj = json_object_array_get_idx(Jobj, 0);
+		if(!subJobj)
+			return ZCFG_INTERNAL_ERROR;
+		
+		if(userName) strcpy(userName, json_object_get_string(json_object_object_get(subJobj, DAL_LOGIN_USERNAME)));
+		if(level) strcpy(level, json_object_get_string(json_object_object_get(subJobj, DAL_LOGIN_LEVEL)));
+	}
+	else
+		return ZCFG_INTERNAL_ERROR;
+
+	return ZCFG_SUCCESS;
+}
+
+
 //bool validateParam(struct json_object *Jobj, dal_param_t *paramList) //return invalidParm to gui
 bool validateParam(struct json_object *Jobj, dal_param_t *paramList, char *invalidParm)
 {
Index: libzcfg_fe_dal-1.0/zcfg_fe_dal_common.h
===================================================================
--- libzcfg_fe_dal-1.0.orig/zcfg_fe_dal_common.h	2017-07-06 14:51:56.129375999 +0800
+++ libzcfg_fe_dal-1.0/zcfg_fe_dal_common.h	2017-07-06 14:51:56.277376000 +0800
@@ -1,6 +1,14 @@
 #include <stdbool.h>
 
 #define JSON_OBJ_COPY(json_object) json_tokener_parse(json_object_to_json_string(json_object))
+#define Jget(obj, key) json_object_object_get(obj, key)
+#define Jgets(obj, key) json_object_get_string(json_object_object_get(obj, key))
+#define Jgeti(obj, key) json_object_get_int(json_object_object_get(obj, key))
+#define Jgetb(obj, key) json_object_get_boolean(json_object_object_get(obj, key))
+#define Jadds(obj, key, val) json_object_object_add(obj, key, json_object_new_string(val))
+#define Jaddi(obj, key, val) json_object_object_add(obj, key, json_object_new_int(val))
+#define Jaddb(obj, key, val) json_object_object_add(obj, key, json_object_new_boolean(val))
+#define ISSET(key) json_object_object_get(Jobj, key)
 
 #define dal_Add 	1 << 0
 #define dal_Edit	1 << 1
@@ -93,4 +101,8 @@
 	dalType_LocalCert
 };
 
+bool getSpecificObj(zcfg_offset_t oid, char *key, json_type type, void *value, objIndex_t *outIid, struct json_object **outJobj);
+int replaceParam(struct json_object *Jobj1, char *key1, struct json_object *Jobj2, char *key2);
+int isDigitString(char *getString);
+
 
Index: libzcfg_fe_dal-1.0/zcfg_fe_dal.h
===================================================================
--- libzcfg_fe_dal-1.0.orig/zcfg_fe_dal.h	2017-07-06 14:51:56.217375999 +0800
+++ libzcfg_fe_dal-1.0/zcfg_fe_dal.h	2017-07-06 14:51:56.277376000 +0800
@@ -1,5 +1,7 @@
 
-zcfgRet_t zcfgFeDalHandler(const char *handlerName, const char *method, struct json_object *Jobj,  struct json_object *Jarray, char *replyMsg);
+zcfgRet_t zcfgFeDalHandler(const char *handlerName, const char *method, struct json_object *Jobj, struct json_object *Jarray, char *replyMsg);
 zcfgRet_t getWanLanList(struct json_object **Jarray);
 int isDigitString(char *getString);
+zcfgRet_t insertLoginUserInfo(struct json_object *Jobj, const char *userName, const char *level);
+zcfgRet_t getLoginUserInfo(struct json_object *Jobj, char *userName, char *level);
 
Index: libzcfg_fe_dal-1.0/network/wireless/zcfg_fe_dal_wifi_general.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/network/wireless/zcfg_fe_dal_wifi_general.c	2017-07-06 14:53:46.881483362 +0800
+++ libzcfg_fe_dal-1.0/network/wireless/zcfg_fe_dal_wifi_general.c	2017-07-06 14:54:16.012724723 +0800
@@ -193,19 +193,6 @@
 
 time_t t1, t2;
 
-//find key2 in Jobj2, if it exist add it to Jobj1 as key1
-static int replaceParam(struct json_object *Jobj1, char *key1, struct json_object *Jobj2, char *key2)
-{
-	struct json_object *pramJobj = NULL;
-
-	pramJobj = json_object_object_get(Jobj2, key2);
-	if (pramJobj) {
-		json_object_object_add(Jobj1, key1, JSON_OBJ_COPY(pramJobj));
-		return 1;
-	}
-	return 0;
-}
-
 //convert string to lower case
 void stolower(char *str, char *buf, size_t size)
 {
