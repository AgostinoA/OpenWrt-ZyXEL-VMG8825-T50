Index: libzcfg_fe_dal-1.0/zcfg_fe_dal.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/zcfg_fe_dal.c	2017-05-23 11:14:30.940213914 +0800
+++ libzcfg_fe_dal-1.0/zcfg_fe_dal.c	2017-05-23 18:01:04.209744278 +0800
@@ -6,6 +6,7 @@
 
 #define isdigit(c) ((c >= 0x30) && (c < 0x3A))
 
+bool printDebugMsg = false;
 
 extern dal_param_t WAN_param[];
 extern dal_param_t MGMT_param[];
Index: libzcfg_fe_dal-1.0/zcfg_fe_dal_common.h
===================================================================
--- libzcfg_fe_dal-1.0.orig/zcfg_fe_dal_common.h	2017-05-23 11:14:30.840213915 +0800
+++ libzcfg_fe_dal-1.0/zcfg_fe_dal_common.h	2017-05-23 11:25:50.898171562 +0800
@@ -8,6 +8,11 @@
 #define dal_Get		1 << 3
 #define dalcmd_Forbid  1 << 4
 
+extern bool printDebugMsg;
+#ifndef dbg_printf
+	#define dbg_printf(fmt, args...) do{if(printDebugMsg)fprintf(stdout, fmt, ## args);else;}while(0)
+#endif
+
 typedef struct dal_param_s {
 	char		*paraName;
 	json_type 	type;
Index: libzcfg_fe_dal-1.0/network/broadband/zcfg_fe_dal_broadband.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/network/broadband/zcfg_fe_dal_broadband.c	2017-05-23 11:14:30.648213919 +0800
+++ libzcfg_fe_dal-1.0/network/broadband/zcfg_fe_dal_broadband.c	2017-05-24 10:31:06.943709528 +0800
@@ -449,7 +449,7 @@
 	zcfg_offset_t currRefOid; 
 	objIndex_t currRefIid;
 
-	printf("isXTMLinkHasReference\n");
+	dbg_printf("isXTMLinkHasReference\n");
 
 	if(!strcmp(CurrType, "ATM") && (atmLinkObj != NULL))
 		sprintf(atmLinkPath, "ATM.Link.%u", atmLinkIid.idx[0]);
@@ -458,7 +458,7 @@
 	else
 		return true;
 
-	printf("atmLinkPath=%s\n", atmLinkPath);
+	dbg_printf("atmLinkPath=%s\n", atmLinkPath);
 	
 	IID_INIT(currRefIid);
 	if(!strcmp(CurrEncapsulation, "PPPoA")){
@@ -474,7 +474,7 @@
 		memcpy(&currRefIid, &ethLinkIid, sizeof(objIndex_t));
 	}
 
-	printf("currRefOid=%d\n", currRefOid);
+	dbg_printf("currRefOid=%d\n", currRefOid);
 
 	oid = RDM_OID_ETH_LINK;
 	IID_INIT(iid);
@@ -483,7 +483,7 @@
 		if((LowerLayer != NULL) && !strcmp(LowerLayer, atmLinkPath)){
 			if((oid != currRefOid) || memcmp(&iid, &currRefIid, sizeof(objIndex_t))){
 				json_object_put(Obj);
-				printf("line=%d\n", __LINE__);
+				dbg_printf("line=%d\n", __LINE__);
 				return true;
 			}
 		}
@@ -502,7 +502,7 @@
 		if((LowerLayer != NULL) && !strcmp(LowerLayer, atmLinkPath)){
 			if((oid != currRefOid) || memcmp(&iid, &currRefIid, sizeof(objIndex_t))){
 				json_object_put(Obj);
-				printf("line=%d\n", __LINE__);
+				dbg_printf("line=%d\n", __LINE__);
 				return true;
 			}
 		}
@@ -516,14 +516,14 @@
 		if((LowerLayer != NULL) && !strcmp(LowerLayer, atmLinkPath)){
 			if((oid != currRefOid) || memcmp(&iid, &currRefIid, sizeof(objIndex_t))){
 				json_object_put(Obj);
-				printf("line=%d\n", __LINE__);
+				dbg_printf("line=%d\n", __LINE__);
 				return true;
 			}
 		}
 		json_object_put(Obj);
 	}
 
-	printf("isXTMLinkHasReference false\n");
+	dbg_printf("isXTMLinkHasReference false\n");
 	return false;
 	
 }
@@ -585,7 +585,7 @@
 		json_object_object_add(atmLinkObj, "LowerLayers", json_object_new_string("DSL.Channel.1"));
 #endif
 
-		printf("%s: SetIpIfaceStackModified  \n", __FUNCTION__);
+		dbg_printf("%s: SetIpIfaceStackModified  \n", __FUNCTION__);
 		if(ipIfaceObj)
 			json_object_object_add(ipIfaceObj, "X_ZYXEL_AccessDescription", json_object_new_string("SetIpIfaceStackModified"));
 	}
@@ -722,11 +722,11 @@
 		{
 			json_object_object_add(ethLinkObj, "X_ZYXEL_WanMacType", json_object_new_string(WanMacType));
 			if (!strcmp(WanMacType, WAN_MAC_CLIENTIP)) {
-				printf("%s, set WanMacIP\n", __FUNCTION__);
+				dbg_printf("%s, set WanMacIP\n", __FUNCTION__);
 				if (WanMacIP != NULL)
 					json_object_object_add(ethLinkObj, "X_ZYXEL_WanMacClientIP", json_object_new_string(WanMacIP));
 			} else if (!strcmp(WanMacType, WAN_MAC_USER)) {
-				printf("%s, set WanMacAddr\n", __FUNCTION__);
+				dbg_printf("%s, set WanMacAddr\n", __FUNCTION__);
 				if (WanMacAddr != NULL)
 					json_object_object_add(ethLinkObj, "X_ZYXEL_WanMacAddr", json_object_new_string(WanMacAddr));
 			}
@@ -795,8 +795,8 @@
 			FullConeEnabled = CurrFullConeEnabled;
 	}
 
-	printf("CurrNatEnabled=%d NatEnable=%d\n", CurrNatEnabled, NatEnable);
-	printf("CurrFullConeEnabled=%d FullConeEnabled=%d\n", CurrFullConeEnabled, FullConeEnabled);
+	dbg_printf("CurrNatEnabled=%d NatEnable=%d\n", CurrNatEnabled, NatEnable);
+	dbg_printf("CurrFullConeEnabled=%d FullConeEnabled=%d\n", CurrFullConeEnabled, FullConeEnabled);
 
 	if(CurrNatEnabled && NatEnable){ //enable to enable
 		if(FullConeEnabled != CurrFullConeEnabled){
@@ -859,8 +859,8 @@
 	else
 		ip6DnsStatic = CurrIp6DnsStatic;
 	
-	printf("CurrIpDnsStatic=%d ipDnsStatic=%d\n", CurrIpDnsStatic, ipDnsStatic);
-	printf("CurrIp6DnsStatic=%d ip6DnsStatic=%d\n", CurrIp6DnsStatic, ip6DnsStatic);
+	dbg_printf("CurrIpDnsStatic=%d ipDnsStatic=%d\n", CurrIpDnsStatic, ipDnsStatic);
+	dbg_printf("CurrIp6DnsStatic=%d ip6DnsStatic=%d\n", CurrIp6DnsStatic, ip6DnsStatic);
 
 	if(CurrIpDnsStatic && ipDnsStatic){ //enable to enable
 		DNSServer = json_object_get_string(json_object_object_get(Jobj, "DNSServer"));
@@ -1044,8 +1044,8 @@
 	if(strstr(Encapsulation, "PPP"))
 		ipStatic = false;
 
-	printf("CurrIpStatic=%d ipStatic=%d\n", CurrIpStatic, ipStatic);
-	printf("CurrIp6Static=%d ip6Static=%d\n", CurrIp6Static, ip6Static);
+	dbg_printf("CurrIpStatic=%d ipStatic=%d\n", CurrIpStatic, ipStatic);
+	dbg_printf("CurrIp6Static=%d ip6Static=%d\n", CurrIp6Static, ip6Static);
 
 	if(CurrIpStatic){
 		if(v4AddrObj == NULL){
@@ -1646,7 +1646,7 @@
 	if(!strcmp(Encapsulation, "PPPoE") || !strcmp(Encapsulation, "PPPoA"))
 		dhcpEnable = false;
 
-	printf("CrrrDhcpEnable=%d dhcpEnable=%d\n", CrrrDhcpEnable, dhcpEnable);
+	dbg_printf("CrrrDhcpEnable=%d dhcpEnable=%d\n", CrrrDhcpEnable, dhcpEnable);
 
 	if(CrrrDhcpEnable && dhcpEnable){
 		json_object_object_add(v4ClientObj, "Enable", json_object_new_boolean(true));
@@ -2037,8 +2037,8 @@
 	else
 		v6GwEnable = CurrV6GwEnable;
 
-	printf("CurrV4GwEnable=%d v4GwEnable=%d\n", CurrV4GwEnable, v4GwEnable);
-	printf("CurrV6GwEnable=%d v6GwEnable=%d\n", CurrV6GwEnable, v6GwEnable);
+	dbg_printf("CurrV4GwEnable=%d v4GwEnable=%d\n", CurrV4GwEnable, v4GwEnable);
+	dbg_printf("CurrV6GwEnable=%d v6GwEnable=%d\n", CurrV6GwEnable, v6GwEnable);
 
 	Interface = json_object_get_string(json_object_object_get(routerObj, "X_ZYXEL_ActiveDefaultGateway"));
 	if(CurrV4GwEnable && !v4GwEnable){ ////enable to disable
@@ -2162,7 +2162,7 @@
 	//objIndex_t dnsIid;
 	//struct json_object *dnsObj = NULL;
 
-	printf("line:%d\n", __LINE__);
+	dbg_printf("line:%d\n", __LINE__);
 
 	IID_INIT(ipIfaceIid);
 	if((ret = zcfgFeObjJsonAdd(RDM_OID_IP_IFACE, &ipIfaceIid, NULL)) != ZCFG_SUCCESS)
@@ -2170,7 +2170,7 @@
 	if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_IP_IFACE, &ipIfaceIid, &ipIfaceObj)) != ZCFG_SUCCESS)
 		return ret;
 
-	printf("line:%d\n", __LINE__);
+	dbg_printf("line:%d\n", __LINE__);
 
 	//Name = json_object_get_string(json_object_object_get(Jobj, "Name"));
 	//Mode = json_object_get_string(json_object_object_get(Jobj, "Mode"));
@@ -2185,7 +2185,7 @@
 	json_object_object_add(ipIfaceObj, "X_ZYXEL_SrvName", json_object_new_string(Name));
 	json_object_object_add(ipIfaceObj, "X_ZYXEL_ConnectionType", json_object_new_string(Mode));
 
-	printf("line:%d\n", __LINE__);
+	dbg_printf("line:%d\n", __LINE__);
 
 	if(!strcmp(Mode, "IP_Bridged")){
 		json_object_object_add(ipIfaceObj, "LowerLayers", json_object_new_string(currLowerLayers));
@@ -2196,14 +2196,14 @@
 
 	replaceParam(ipIfaceObj, "X_ZYXEL_ConcurrentWan", Jobj, "ConcurrentWan");
 		
-	printf("line:%d\n", __LINE__);
+	dbg_printf("line:%d\n", __LINE__);
 	sprintf(ipIfacePath, "IP.Interface.%u", ipIfaceIid.idx[0]);
 
 	//routting mode, need to set Nat and Static DNS before set IP and PPP.
 	editNatSetting(Jobj);
 	editDnsSetting(Jobj);
 	
-	printf("line:%d\n", __LINE__);
+	dbg_printf("line:%d\n", __LINE__);
 	if(!strcmp(ipMode, "IPv4")){
 		json_object_object_add(ipIfaceObj, "IPv4Enable", json_object_new_boolean(true));
 		replaceParam(ipIfaceObj, "X_ZYXEL_Enable_6RD", Jobj, "Enable_6RD");
@@ -2232,11 +2232,11 @@
 		replaceParam(ipIfaceObj, "MaxMTUSize", Jobj, "MaxMTUSize");
 		json_object_object_add(ipIfaceObj, "LowerLayers", json_object_new_string(currLowerLayers));
 		//ret = zcfgFeObjJsonSet(RDM_OID_IP_IFACE, &ipIfaceIid, ipIfaceObj, NULL);
-		printf("line:%d\n", __LINE__);
+		dbg_printf("line:%d\n", __LINE__);
 		sprintf(currLowerLayers, "IP.Interface.%u", ipIfaceIid.idx[0]);
 		addStaticAddrSetting(Jobj);
 		addDhcpSetting(Jobj);
-    	printf("line=%d\n", __LINE__);
+    	dbg_printf("line=%d\n", __LINE__);
 	}
 	//json_object_put(ipIfaceObj);
 
@@ -2248,7 +2248,7 @@
 	//ret = zcfgFeObjJsonSet(RDM_OID_DNS, &dnsIid, dnsObj, NULL);
 	//json_object_put(dnsObj);
 
-	printf("line=%d\n", __LINE__);
+	dbg_printf("line=%d\n", __LINE__);
 	
 	return ret;
 }
@@ -2256,7 +2256,7 @@
 zcfgRet_t editLayer3Objects(struct json_object *Jobj){
 	zcfgRet_t ret = ZCFG_SUCCESS;
 
-	printf("line:%d\n", __LINE__);
+	dbg_printf("line:%d\n", __LINE__);
 #ifdef ISKON_CUSTOMIZATION //Adam
 	int mark;
 #endif
@@ -2273,7 +2273,7 @@
 		zcfgFeObjJsonGetWithoutUpdate(RDM_OID_DNS, &dnsIid, &dnsObj);
 	}
 
-	printf("line:%d\n", __LINE__);
+	dbg_printf("line:%d\n", __LINE__);
 #ifdef ISKON_CUSTOMIZATION //Adam
 	mark = json_object_get_int(json_object_object_get(ipIfaceObj, "X_ZYXEL_IPR2_MARKING"));
 	//printf("%s(%d)  mark value %d\n",__FUNCTION__, __LINE__, mark);
@@ -2290,7 +2290,7 @@
 	json_object_object_add(ipIfaceObj, "X_ZYXEL_SrvName", json_object_new_string(Name));
 	json_object_object_add(ipIfaceObj, "X_ZYXEL_ConnectionType", json_object_new_string(Mode));
 
-	printf("line:%d\n", __LINE__);
+	dbg_printf("line:%d\n", __LINE__);
 
 	if(!strcmp(Mode, "IP_Bridged")){
 		json_object_object_add(ipIfaceObj, "LowerLayers", json_object_new_string(currLowerLayers));
@@ -2299,7 +2299,7 @@
 
 	replaceParam(ipIfaceObj, "X_ZYXEL_ConcurrentWan", Jobj, "ConcurrentWan");
 	
-	printf("line:%d\n", __LINE__);
+	dbg_printf("line:%d\n", __LINE__);
 	if(!strcmp(ipMode, "IPv4")){
 		json_object_object_add(ipIfaceObj, "IPv4Enable", json_object_new_boolean(true));
 		json_object_object_add(ipIfaceObj, "IPv6Enable", json_object_new_boolean(false));
@@ -2339,7 +2339,7 @@
 		sprintf(currLowerLayers, "IP.Interface.%u", ipIfaceIid.idx[0]);
 	}
 
-   	printf("line=%d\n", __LINE__);
+   	dbg_printf("line=%d\n", __LINE__);
 
 	editNatSetting(Jobj);
 	editDnsSetting(Jobj);
@@ -2348,7 +2348,7 @@
 	editIgmpMldSetting(Jobj);
 	editDefaultGwSetting(Jobj);
 
-	printf("line=%d\n", __LINE__);
+	dbg_printf("line=%d\n", __LINE__);
 	
 	return ret;
 }
@@ -2378,7 +2378,7 @@
 	    }
 	}
 	if(!strcmp(Mode, "IP_Bridged")){
-		printf("IP_Bridged\n");
+		dbg_printf("IP_Bridged\n");
 		if(ipIfaceObj)zcfgFeObjJsonSet(RDM_OID_IP_IFACE, &ipIfaceIid, ipIfaceObj, NULL);
 #if 0
 		if(!isAdd && !strcmp(CurrMode, "IP_Routed")){ //route to bridge case , need to restart or reload service?
@@ -2610,9 +2610,9 @@
 
 	HigherLayer = "IP.Interface.";
 	while(count < 4){
-		printf("count=%d\n", count);
-		printf("HigherLayer=%s\n", HigherLayer);
-		printf("LowerLayer=%s\n", LowerLayer);
+		dbg_printf("count=%d\n", count);
+		dbg_printf("HigherLayer=%s\n", HigherLayer);
+		dbg_printf("LowerLayer=%s\n", LowerLayer);
 		
 		count++;
 		if(!strncmp(HigherLayer, "IP.Interface.", 13)){
@@ -2990,7 +2990,7 @@
 
 	bool delPpp = false, delVlanEthLink = false;
 
-	printf("CurrMode=%s, Mode=%s\n", CurrMode, Mode);
+	dbg_printf("CurrMode=%s, Mode=%s\n", CurrMode, Mode);
 
 	if(!strcmp(CurrMode, "IP_Routed") && !strcmp(Mode, "IP_Bridged")){
 		if(strstr(CurrEncapsulation, "PPP"))
@@ -3012,14 +3012,14 @@
 	}
 
 	if(delPpp){
-		printf("delPpp\n");
+		dbg_printf("delPpp\n");
 		json_object_object_add(ipIfaceObj, "X_ZYXEL_AccessDescription", json_object_new_string("SetIpIfaceStackModified"));
 		zcfgFeObjJsonDel(RDM_OID_PPP_IFACE, &pppIfaceIid, NULL);
 		zcfgFeJsonObjFree(pppIfaceObj);
 	}
 
 	if(delVlanEthLink){
-		printf("delVlanEthLink\n");
+		dbg_printf("delVlanEthLink\n");
 		json_object_object_add(ipIfaceObj, "X_ZYXEL_AccessDescription", json_object_new_string("SetIpIfaceStackModified"));
 		zcfgFeObjJsonDel(RDM_OID_ETH_VLAN_TERM, &vlanTermIid, NULL);
 		zcfgFeObjJsonDel(RDM_OID_ETH_LINK, &ethLinkIid, NULL);
@@ -3057,12 +3057,12 @@
 		return ret;
 
 	t2 = time(NULL);
-    printf("before set, time=%d seconds\n", (int) difftime(t2, t1));
+    dbg_printf("before set, time=%d seconds\n", (int) difftime(t2, t1));
 	
 	setAllObjects(Jobj);
 
 	t2 = time(NULL);
-    printf("after set, time=%d seconds ret=%d\n", (int) difftime(t2, t1), ret);
+    dbg_printf("after set, time=%d seconds ret=%d\n", (int) difftime(t2, t1), ret);
 
 	freeAllObjects();
 	
@@ -3138,7 +3138,7 @@
 		return ZCFG_INVALID_OBJECT;
 	}
 
-	printf("%s: enable/disable %d EthWAN %s\n", __FUNCTION__, (int)enable, ethIfaceName);
+	dbg_printf("%s: enable/disable %d EthWAN %s\n", __FUNCTION__, (int)enable, ethIfaceName);
 
 	IID_INIT(ethIntfIid);
 	ethIntfIid.level = 1;
@@ -3190,7 +3190,7 @@
 	getBasicInfo(Jobj);
 
 	t2 = time(NULL);
-    printf("line=%d, time=%d\n", __LINE__, (int) difftime(t2, t1));
+    dbg_printf("line=%d, time=%d\n", __LINE__, (int) difftime(t2, t1));
 
 	if(json_object_object_get(Jobj, "EnableEthWAN")){
 		// it's EthWAN enable/disable
@@ -3204,7 +3204,7 @@
 		goto dalwan_edit_fail;
 
 	t2 = time(NULL);
-    printf("line=%d, time=%d\n", __LINE__, (int) difftime(t2, t1));
+    dbg_printf("line=%d, time=%d\n", __LINE__, (int) difftime(t2, t1));
 
 	//disable ipIface pppIface first
 	json_object_object_add(ipIfaceObj, "Enable", json_object_new_boolean(false));
@@ -3265,15 +3265,15 @@
 	if((ret = editVlanTermObject(Jobj)) != ZCFG_SUCCESS)
 		goto dalwan_edit_fail;
 	
-    printf("line=%d\n", __LINE__);
+    dbg_printf("line=%d\n", __LINE__);
 	
 	if((ret = editLayer3Objects(Jobj)) != ZCFG_SUCCESS)
 		goto dalwan_edit_fail;
 
-    printf("line=%d\n", __LINE__);
+    dbg_printf("line=%d\n", __LINE__);
 
 	t2 = time(NULL);
-    printf("before set, time=%d seconds\n", (int) difftime(t2, t1));
+    dbg_printf("before set, time=%d seconds\n", (int) difftime(t2, t1));
 	
 	setAllObjects(Jobj);
 
@@ -3324,16 +3324,16 @@
 	int count = 0;
 
 	sprintf(ipIfacePath, "IP.Interface.%u", ipIfaceIid.idx[0]);
-	printf("%s: enter , ipIfacePath = %s\n",__FUNCTION__,ipIfacePath);
+	dbg_printf("%s: enter , ipIfacePath = %s\n",__FUNCTION__,ipIfacePath);
 
 	LowerLayer = json_object_get_string(json_object_object_get(ipIfaceObj, "LowerLayers"));
 	strcpy(CurrMode, json_object_get_string(json_object_object_get(ipIfaceObj, "X_ZYXEL_ConnectionType")));
 	
 		HigherLayer = "IP.Interface.";
 		while(count < 4){
-			printf("count=%d\n", count);
-			printf("HigherLayer=%s\n", HigherLayer);
-			printf("LowerLayer=%s\n", LowerLayer);
+			dbg_printf("count=%d\n", count);
+			dbg_printf("HigherLayer=%s\n", HigherLayer);
+			dbg_printf("LowerLayer=%s\n", LowerLayer);
 			
 			count++;
 			if(!strncmp(HigherLayer, "IP.Interface.", 13)){
@@ -3593,7 +3593,7 @@
 		json_object_object_add(pramJobj, "MLDEnable", json_object_new_boolean(false));
 
 	
-	printf("====testH %s: exit\n",__FUNCTION__);
+	dbg_printf("====testH %s: exit\n",__FUNCTION__);
 	return ret;
 }
 
Index: libzcfg_fe_dal-1.0/network/interfaceGrouping/zcfg_fe_dal_intfGrp.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/network/interfaceGrouping/zcfg_fe_dal_intfGrp.c	2017-05-23 11:20:17.716207703 +0800
+++ libzcfg_fe_dal-1.0/network/interfaceGrouping/zcfg_fe_dal_intfGrp.c	2017-05-24 10:30:01.890067176 +0800
@@ -147,7 +147,7 @@
 	json_object *critInfoDel = NULL;
 	int idx = 0;
 
-	printf("getIntfGrpBasicInfo\n");
+	dbg_printf("getIntfGrpBasicInfo\n");
 
 	IidArrayObj = json_object_object_get(Jobj, "Iid");
 	idx = json_object_get_int(json_object_object_get(Jobj, "Index"));
@@ -298,7 +298,7 @@
 void freeIntfGrpBasicInfo(s_IntfGrp *IntfGrp_info) {
 	int i = 0;
 
-	printf("freeIntfGrpBasicInfo\n");
+	dbg_printf("freeIntfGrpBasicInfo\n");
 	if((IntfGrp_info->Iid.array)) {
 		free(IntfGrp_info->Iid.array);
 		IntfGrp_info->Iid.array = NULL;
@@ -564,7 +564,7 @@
 		printf("Can't find the target Iid in RDM %d\n", RDM_OID);
 	}
 	
-	printf("FindObjIid: find = %d, idx[0] = %d\n", find, Iid->idx[0]);	
+	dbg_printf("FindObjIid: find = %d, idx[0] = %d\n", find, Iid->idx[0]);	
 	return find;
 }
 
@@ -585,7 +585,7 @@
 		printf("Can't find the target Iid in RDM %d\n", RDM_OID);
 	}
 	
-	printf("FindObjIid: find = %d, idx[0] = %d\n", find, Iid->idx[0]);	
+	dbg_printf("FindObjIid: find = %d, idx[0] = %d\n", find, Iid->idx[0]);	
 	return find;
 }
 
@@ -636,7 +636,7 @@
 	IID_INIT(igmpIid);
 	IID_INIT(mldIid);
 
-	printf("zcfgFeDalIntrGrpAdd\n");
+	dbg_printf("zcfgFeDalIntrGrpAdd\n");
 
 	memset(&IntfGrp_info, 0, sizeof(s_IntfGrp));
 	getIntfGrpBasicInfo(Jobj, &IntfGrp_info);
@@ -785,7 +785,7 @@
 			while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_VLAN_GROUP, &vlanGroupIid, &vlanGroupObj) == ZCFG_SUCCESS) {
 				vlan_grpName = (char*)json_object_get_string(json_object_object_get(vlanGroupObj, "GroupName"));
 				if(!strcmp(vlan_grpName, vlanCrit.critInfo[i].value)) {
-					printf("VLAN BrRefKey %d\n", newBrIid.idx[0]);
+					dbg_printf("VLAN BrRefKey %d\n", newBrIid.idx[0]);
 					json_object_object_add(vlanGroupObj, "BrRefKey", json_object_new_int(newBrIid.idx[0]));
 					found = true;
 					if(vlanGroupObj) {
@@ -957,7 +957,7 @@
 					IID_INIT(delBrFilterIid);
 					find = FindObjIid(RDM_OID_BRIDGING_FILTER, IntfGrp_info.critInfo[i].critIid, &delBrFilterIid, &delBrFilterObj);
 					if(find == true) {
-						printf("RDM_OID_BRIDGING_FILTER delete %d\n", delBrFilterIid.idx[0]);
+						dbg_printf("RDM_OID_BRIDGING_FILTER delete %d\n", delBrFilterIid.idx[0]);
 						zcfgFeObjJsonDel(RDM_OID_BRIDGING_FILTER, &delBrFilterIid, NULL);
 						zcfgFeJsonObjFree(delBrFilterObj);
 						break;
@@ -993,7 +993,7 @@
 			IID_INIT(delBrFilterIid);
 			find = FindObjIid(RDM_OID_BRIDGING_FILTER, IntfGrp_info.critInfoDel[i].critIid, &delBrFilterIid, &delBrFilterObj);
 			if(find == true) {
-				printf("RDM_OID_BRIDGING_FILTER delete %d\n", delBrFilterIid.idx[0]);
+				dbg_printf("RDM_OID_BRIDGING_FILTER delete %d\n", delBrFilterIid.idx[0]);
 				zcfgFeObjJsonDel(RDM_OID_BRIDGING_FILTER, &delBrFilterIid, NULL);
 				zcfgFeJsonObjFree(delBrFilterObj);
 			}
@@ -1344,7 +1344,7 @@
 									if(p != NULL) 
 										*p = '\0';
 								}
-								printf("adsadcascassdawdqwdq\n");
+								dbg_printf("adsadcascassdawdqwdq\n");
 								OUI = strstr(SourceMACFromVSIFilter, "\%\%1=");
 								if(OUI)
 									OUI = OUI+4;								
@@ -1492,7 +1492,7 @@
 	IID_INIT(igmpIid);
 	IID_INIT(mldIid);
 
-	printf("zcfgFeDalIntrGrpAdd\n");
+	dbg_printf("zcfgFeDalIntrGrpAdd\n");
 
 	memset(&IntfGrp_info, 0, sizeof(s_IntfGrp));
 
@@ -1557,7 +1557,7 @@
 			if(p != NULL) 
 				*p = '\0';
 		}
-		printf("adsadcascassdawdqwdq\n");
+		dbg_printf("adsadcascassdawdqwdq\n");
 		OUI = strstr(op125value, ",OUI=");
 		if(OUI)
 			OUI = OUI+5;		
@@ -1614,7 +1614,7 @@
 				strcat(op125tmp, class);
 			}
 		}
-		printf("cccccc=%s\n",op125tmp);
+		dbg_printf("cccccc=%s\n",op125tmp);
 	}
 
 	//GET RDM_OID_IP_IFACE_V4_ADDR
@@ -1760,7 +1760,7 @@
 			while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_VLAN_GROUP, &vlanGroupIid, &vlanGroupObj) == ZCFG_SUCCESS) {
 				vlan_grpName = (char*)json_object_get_string(json_object_object_get(vlanGroupObj, "GroupName"));
 				if(!strcmp(vlan_grpName, vlanvalue)) {
-					printf("VLAN BrRefKey %d\n", newBrIid.idx[0]);
+					dbg_printf("VLAN BrRefKey %d\n", newBrIid.idx[0]);
 					json_object_object_add(vlanGroupObj, "BrRefKey", json_object_new_int(newBrIid.idx[0]));
 					found = true;
 					if(vlanGroupObj) {
