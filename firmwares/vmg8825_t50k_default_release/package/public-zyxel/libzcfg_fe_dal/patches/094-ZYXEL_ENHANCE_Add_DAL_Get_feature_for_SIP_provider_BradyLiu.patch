Index: libzcfg_fe_dal-1.0/voip/sip/zcfg_fe_dal_sip_provider.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/voip/sip/zcfg_fe_dal_sip_provider.c	2016-12-19 13:38:30.282519802 +0800
+++ libzcfg_fe_dal-1.0/voip/sip/zcfg_fe_dal_sip_provider.c	2016-12-26 15:20:45.436766379 +0800
@@ -39,7 +39,6 @@
 	{"RegisterExpires",							dalType_int,	0,	0,	NULL},
 	{"RegisterRetryInterval",					dalType_int,	0,	0,	NULL},
 	{"InviteExpires",							dalType_int,	0,	0,	NULL},
-	{"ReInviteExpires",							dalType_int,	0,	0,	NULL},
 	{"X_ZYXEL_MinSE",							dalType_int,	0,	0,	NULL},
 	{"X_ZYXEL_Rfc3263Support",					dalType_boolean,0,	0,	NULL},
 	{"X_ZYXEL_Rfc3262Support",					dalType_boolean,0,	0,	NULL},
@@ -104,7 +103,6 @@
 unsigned int RegisterExpires;
 unsigned int RegisterRetryInterval;
 unsigned int InviteExpires;
-unsigned int ReInviteExpires;
 unsigned int X_ZYXEL_MinSE;
 bool X_ZYXEL_Rfc3263Support;
 bool X_ZYXEL_Rfc3262Support;
@@ -139,6 +137,8 @@
 const char* X_ZYXEL_OUTGOING_SIP;
 const char* X_ZYXEL_CALL_REDIAL;
 const char* X_SINGLE_INTERNAL_CALL;
+const char* PrefixRange;
+const char* FacilityAction;
 
 struct json_object *multiJobj;
 struct json_object *guiCustObj;
@@ -148,6 +148,7 @@
 struct json_object *profRtpSrtpObj;
 struct json_object *profNumPlanpObj;
 struct json_object *profNumPlanpInfoObj;
+struct json_object *singleProObj;
 
 unsigned int flag1;
 
@@ -175,6 +176,7 @@
 	if(profRtpObj) json_object_put(profRtpObj);
 	if(profNumPlanpObj) json_object_put(profNumPlanpObj);
 	if(profNumPlanpInfoObj) json_object_put(profNumPlanpInfoObj);
+	if(singleProObj) json_object_put(singleProObj);
 
 	return;
 }
@@ -210,7 +212,6 @@
 	RegisterExpires = json_object_get_int(json_object_object_get(Jobj, "RegisterExpires"));
 	RegisterRetryInterval = json_object_get_int(json_object_object_get(Jobj, "RegisterRetryInterval"));
 	InviteExpires = json_object_get_int(json_object_object_get(Jobj, "InviteExpires"));
-	ReInviteExpires = json_object_get_int(json_object_object_get(Jobj, "ReInviteExpires"));
 	X_ZYXEL_MinSE = json_object_get_int(json_object_object_get(Jobj, "X_ZYXEL_MinSE"));
 	DSCPMark = json_object_get_int(json_object_object_get(Jobj, "DSCPMark"));
 	X_ZYXEL_Rfc3263Support = json_object_get_boolean(json_object_object_get(Jobj, "X_ZYXEL_Rfc3263Support"));
@@ -281,7 +282,7 @@
 	profRtpSrtpObj = NULL;
 	profNumPlanpObj = NULL;
 	profNumPlanpInfoObj = NULL;
-
+	singleProObj = NULL;
 	return;
 }
 
@@ -337,6 +338,7 @@
 			zcfgFeJsonObjFree(profObj);
 			return ZCFG_INTERNAL_ERROR;
 		}
+		zcfgFeJsonObjFree(profObj);
 	}
 	//printf("%s(): Append Pro obj to multiJobj (%s) \n ",__FUNCTION__,json_object_to_json_string(multiJobj));
 	//printf("%s() exit \n ",__FUNCTION__);
@@ -371,7 +373,6 @@
 		json_object_object_add(profSipObj, "RegisterExpires", json_object_new_int(RegisterExpires));
 		json_object_object_add(profSipObj, "RegisterRetryInterval", json_object_new_int(RegisterRetryInterval));
 		json_object_object_add(profSipObj, "InviteExpires", json_object_new_int(InviteExpires));
-		json_object_object_add(profSipObj, "ReInviteExpires", json_object_new_int(ReInviteExpires));
 		json_object_object_add(profSipObj, "X_ZYXEL_MinSE", json_object_new_int(X_ZYXEL_MinSE));
 		json_object_object_add(profSipObj, "DSCPMark", json_object_new_int(DSCPMark));
 		json_object_object_add(profSipObj, "X_ZYXEL_Rfc3263Support", json_object_new_boolean(X_ZYXEL_Rfc3263Support));
@@ -382,6 +383,7 @@
 			zcfgFeJsonObjFree(profSipObj);
 			return ZCFG_INTERNAL_ERROR;
 		}
+		zcfgFeJsonObjFree(profSipObj);
 	}
 	//printf("%s(): Append Pro obj to multiJobj (%s) \n ",__FUNCTION__,json_object_to_json_string(multiJobj));
 	//printf("%s() exit \n ",__FUNCTION__);
@@ -417,6 +419,7 @@
 			zcfgFeJsonObjFree(profRtpObj);
 			return ZCFG_INTERNAL_ERROR;
 		}
+		zcfgFeJsonObjFree(profRtpObj);
 	}
 	//printf("%s(): Append Pro obj to multiJobj (%s) \n ",__FUNCTION__,json_object_to_json_string(multiJobj));
 	//printf("%s() exit \n ",__FUNCTION__);
@@ -445,6 +448,7 @@
 			zcfgFeJsonObjFree(profRtpSrtpObj);
 			return ZCFG_INTERNAL_ERROR;
 		}
+		zcfgFeJsonObjFree(profRtpSrtpObj);
 	}
 	//printf("%s(): Append Pro obj to multiJobj (%s) \n ",__FUNCTION__,json_object_to_json_string(multiJobj));
 	//printf("%s() exit \n ",__FUNCTION__);
@@ -472,6 +476,7 @@
 			zcfgFeJsonObjFree(profNumPlanpObj);
 			return ZCFG_INTERNAL_ERROR;
 		}
+		zcfgFeJsonObjFree(profNumPlanpObj);
 	}
 	//printf("%s(): Append Pro obj to multiJobj (%s) \n ",__FUNCTION__,json_object_to_json_string(multiJobj));
 	//printf("%s() exit \n ",__FUNCTION__);
@@ -697,6 +702,265 @@
 	//printf("%s(): Exit.. \n ",__FUNCTION__);
 	return ret;
 }
+
+zcfgRet_t zcfgFeDalparseSingleProfObj(struct json_object *paserobj){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	//printf("%s() Enter..\n", __FUNCTION__);
+
+	char* profPath = NULL;
+
+	ProfName = json_object_get_string(json_object_object_get(profObj, "Name"));
+	ProfleEnable = json_object_get_string(json_object_object_get(profObj, "Enable"));
+	X_ZYXEL_BoundIfName = json_object_get_string(json_object_object_get(profObj, "X_ZYXEL_BoundIfName"));
+	X_ZYXEL_BoundIfList = json_object_get_string(json_object_object_get(profObj, "X_ZYXEL_BoundIfList"));
+	DTMFMethodG711 = json_object_get_string(json_object_object_get(profObj, "DTMFMethodG711"));
+	DTMFMethod = json_object_get_string(json_object_object_get(profObj, "DTMFMethod"));
+	if(SHOW_NOT_USE_OFTEN_VOIP_SETTING&flag1){
+		DigitMapEnable = json_object_get_boolean(json_object_object_get(profObj, "DigitMapEnable"));
+		DigitMap = json_object_get_string(json_object_object_get(profObj, "DigitMap"));
+	}
+	X_ZYXEL_VoipIOPFlags = json_object_get_int(json_object_object_get(profObj, "X_ZYXEL_VoipIOPFlags"));
+	X_ZYXEL_FaxMode = json_object_get_string(json_object_object_get(profObj, "X_ZYXEL_FaxMode"));
+	FAXPassThrough = json_object_get_string(json_object_object_get(profObj, "FAXPassThrough"));
+	ModemPassThrough = json_object_get_string(json_object_object_get(profObj, "ModemPassThrough"));
+	X_ZYXEL_IgnoreDirectIP = json_object_get_boolean(json_object_object_get(profObj, "X_ZYXEL_IgnoreDirectIP"));
+
+	json_object_object_add(paserobj, "ProfName", json_object_new_string(ProfName));
+	json_object_object_add(paserobj, "ProfleEnable", json_object_new_string(ProfleEnable));
+	json_object_object_add(paserobj, "X_ZYXEL_BoundIfName", json_object_new_string(X_ZYXEL_BoundIfName));
+	json_object_object_add(paserobj, "X_ZYXEL_BoundIfList", json_object_new_string(X_ZYXEL_BoundIfList));
+	json_object_object_add(paserobj, "DTMFMethodG711", json_object_new_string(DTMFMethodG711));
+	json_object_object_add(paserobj, "DTMFMethod", json_object_new_string(DTMFMethod));
+	if(SHOW_NOT_USE_OFTEN_VOIP_SETTING&flag1){
+		json_object_object_add(paserobj, "DigitMapEnable", json_object_new_boolean(DigitMapEnable));
+		json_object_object_add(paserobj, "DigitMap", json_object_new_string(DigitMap));
+	}
+	json_object_object_add(paserobj, "X_ZYXEL_VoipIOPFlags", json_object_new_int(X_ZYXEL_VoipIOPFlags));
+	json_object_object_add(paserobj, "X_ZYXEL_FaxMode", json_object_new_string(X_ZYXEL_FaxMode));
+	json_object_object_add(paserobj, "FAXPassThrough", json_object_new_string(FAXPassThrough));
+	json_object_object_add(paserobj, "ModemPassThrough", json_object_new_string(ModemPassThrough));
+	json_object_object_add(paserobj, "X_ZYXEL_IgnoreDirectIP", json_object_new_boolean(X_ZYXEL_IgnoreDirectIP));
+
+	json_object_object_add(paserobj, "profileIdx", json_object_new_int(profIid.idx[1]));
+
+	return ret;
+}
+
+zcfgRet_t zcfgFeDalparseSingleProfSipObj(struct json_object *paserobj){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	//printf("%s() Enter..\n", __FUNCTION__);
+
+	if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_VOICE_PROF_SIP, &profIid, &profSipObj)) != ZCFG_SUCCESS){
+		printf("%s():(ERROR) zcfgFeObjJsonGetWithoutUpdate get prof sip fail~ \n ",__FUNCTION__);
+		return ZCFG_INTERNAL_ERROR;
+	}
+	if(profSipObj != NULL){
+		UserAgentPort = json_object_get_int(json_object_object_get(profSipObj, "UserAgentPort"));
+		ProxyServer = json_object_get_string(json_object_object_get(profSipObj, "ProxyServer"));
+		ProxyServerPort = json_object_get_int(json_object_object_get(profSipObj, "ProxyServerPort"));
+		ProxyServerTransport = json_object_get_string(json_object_object_get(profSipObj, "ProxyServerTransport"));
+		RegistrarServer = json_object_get_string(json_object_object_get(profSipObj, "RegistrarServer"));
+		RegistrarServerPort = json_object_get_int(json_object_object_get(profSipObj, "RegistrarServerPort"));
+		RegistrarServerTransport = json_object_get_string(json_object_object_get(profSipObj, "RegistrarServerTransport"));
+		UserAgentDomain = json_object_get_string(json_object_object_get(profSipObj, "UserAgentDomain"));
+		UserAgentTransport = json_object_get_string(json_object_object_get(profSipObj, "UserAgentTransport"));
+		OutboundProxy = json_object_get_string(json_object_object_get(profSipObj, "OutboundProxy"));
+		OutboundProxyPort = json_object_get_int(json_object_object_get(profSipObj, "OutboundProxyPort"));
+		X_ZYXEL_Option120Use = json_object_get_boolean(json_object_object_get(profSipObj, "X_ZYXEL_Option120Use"));
+		RegisterExpires = json_object_get_int(json_object_object_get(profSipObj, "RegisterExpires"));
+		RegisterRetryInterval = json_object_get_int(json_object_object_get(profSipObj, "RegisterRetryInterval"));
+		InviteExpires = json_object_get_int(json_object_object_get(profSipObj, "InviteExpires"));
+		X_ZYXEL_MinSE = json_object_get_int(json_object_object_get(profSipObj, "X_ZYXEL_MinSE"));
+		DSCPMark = json_object_get_int(json_object_object_get(profSipObj, "DSCPMark"));
+		X_ZYXEL_Rfc3263Support = json_object_get_boolean(json_object_object_get(profSipObj, "X_ZYXEL_Rfc3263Support"));
+		X_ZYXEL_Rfc3262Support = json_object_get_boolean(json_object_object_get(profSipObj, "X_ZYXEL_Rfc3262Support"));
+		json_object_object_add(paserobj, "UserAgentPort", json_object_new_int(UserAgentPort));
+		json_object_object_add(paserobj, "ProxyServer", json_object_new_string(ProxyServer));
+		json_object_object_add(paserobj, "ProxyServerPort", json_object_new_int(ProxyServerPort));
+		json_object_object_add(paserobj, "ProxyServerTransport", json_object_new_string(ProxyServerTransport));
+		json_object_object_add(paserobj, "RegistrarServer", json_object_new_string(RegistrarServer));
+		json_object_object_add(paserobj, "RegistrarServerPort", json_object_new_int(RegistrarServerPort));
+		json_object_object_add(paserobj, "RegistrarServerTransport", json_object_new_string(RegistrarServerTransport));
+		json_object_object_add(paserobj, "UserAgentDomain", json_object_new_string(UserAgentDomain));
+		json_object_object_add(paserobj, "UserAgentTransport", json_object_new_string(UserAgentTransport));
+		json_object_object_add(paserobj, "OutboundProxy", json_object_new_string(OutboundProxy));
+		json_object_object_add(paserobj, "OutboundProxyPort", json_object_new_int(OutboundProxyPort));
+		json_object_object_add(paserobj, "X_ZYXEL_Option120Use", json_object_new_boolean(X_ZYXEL_Option120Use));
+		json_object_object_add(paserobj, "RegisterExpires", json_object_new_int(RegisterExpires));
+		json_object_object_add(paserobj, "RegisterRetryInterval", json_object_new_int(RegisterRetryInterval));
+		json_object_object_add(paserobj, "InviteExpires", json_object_new_int(InviteExpires));
+		json_object_object_add(paserobj, "X_ZYXEL_MinSE", json_object_new_int(X_ZYXEL_MinSE));
+		json_object_object_add(paserobj, "DSCPMark", json_object_new_int(DSCPMark));
+		json_object_object_add(paserobj, "X_ZYXEL_Rfc3263Support", json_object_new_boolean(X_ZYXEL_Rfc3263Support));
+		json_object_object_add(paserobj, "X_ZYXEL_Rfc3262Support", json_object_new_boolean(X_ZYXEL_Rfc3262Support));
+
+		zcfgFeJsonObjFree(profSipObj);
+	}
+
+	return ret;
+}
+
+zcfgRet_t zcfgFeDalparseSingleProfRTPObj(struct json_object *paserobj){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	//printf("%s() Enter..\n", __FUNCTION__);
+
+	if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_VOICE_PROF_RTP, &profIid, &profRtpObj)) != ZCFG_SUCCESS){
+		printf("%s():(ERROR) zcfgFeObjJsonGetWithoutUpdate get prof sip fail~ \n ",__FUNCTION__);
+		return ZCFG_INTERNAL_ERROR;
+	}
+
+	if(profRtpObj != NULL){
+		LocalPortMin = json_object_get_int(json_object_object_get(profRtpObj, "LocalPortMin"));
+		LocalPortMax = json_object_get_int(json_object_object_get(profRtpObj, "LocalPortMax"));
+		RTPDSCPMark = json_object_get_int(json_object_object_get(profRtpObj, "DSCPMark"));
+
+		json_object_object_add(paserobj, "LocalPortMin", json_object_new_int(LocalPortMin));
+		json_object_object_add(paserobj, "LocalPortMax", json_object_new_int(LocalPortMax));
+		json_object_object_add(paserobj, "RTPDSCPMark", json_object_new_int(RTPDSCPMark));
+
+		zcfgFeJsonObjFree(profRtpObj);
+	}
+
+	return ret;
+}
+
+zcfgRet_t zcfgFeDalparseSingleProfRTPSRTPObj(struct json_object *paserobj){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	//printf("%s() Enter..\n", __FUNCTION__);
+
+	if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_VOICE_PROF_RTP_SRTP, &profIid, &profRtpSrtpObj)) != ZCFG_SUCCESS){
+		printf("%s():(ERROR) zcfgFeObjJsonGetWithoutUpdate get prof sip fail~ \n ",__FUNCTION__);
+		return ZCFG_INTERNAL_ERROR;
+	}
+
+	if(profRtpSrtpObj != NULL){
+		SRTPEnable = json_object_get_boolean(json_object_object_get(profRtpSrtpObj, "Enable"));
+		X_ZYXEL_Crypto_Suite_Name = json_object_get_string(json_object_object_get(profRtpSrtpObj, "X_ZYXEL_Crypto_Suite_Name"));
+		json_object_object_add(paserobj, "SRTPEnable", json_object_new_boolean(SRTPEnable));
+		json_object_object_add(paserobj, "X_ZYXEL_Crypto_Suite_Name", json_object_new_string(X_ZYXEL_Crypto_Suite_Name));
+		zcfgFeJsonObjFree(profRtpSrtpObj);
+	}
+
+	return ret;
+}
+
+zcfgRet_t zcfgFeDalparseSingleProfNumberingPlanObj(struct json_object *paserobj){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	//printf("%s() Enter..\n", __FUNCTION__);
+
+	if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_VOICE_PROF_NUM_PLAN, &profIid, &profNumPlanpObj)) != ZCFG_SUCCESS){
+		printf("%s():(ERROR) zcfgFeObjJsonGetWithoutUpdate get prof numbering plan fail~ \n ",__FUNCTION__);
+		return ZCFG_INTERNAL_ERROR;
+	}
+
+	if(profNumPlanpObj != NULL){
+		InterDigitTimerStd = json_object_get_int(json_object_object_get(profNumPlanpObj, "InterDigitTimerStd"));
+		json_object_object_add(paserobj, "InterDigitTimerStd", json_object_new_int(InterDigitTimerStd));
+
+		zcfgFeJsonObjFree(profNumPlanpObj);
+	}
+
+	return ret;
+}
+
+zcfgRet_t zcfgFeDalparseSingleProfNumberingPlanPrefixInfoObj(struct json_object *paserobj){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	char prefixRange[1024] = {};
+	char facilityAction[1024] = {};
+	char temp[1024] = {};
+	//printf("%s() Enter..\n", __FUNCTION__);
+	int featureNum = 0;
+
+	IID_INIT(profPrefixInfoIid);
+	while(zcfgFeSubInObjJsonGetNextWithoutUpdate(RDM_OID_VOICE_PROF_NUM_PLAN_PREFIX_INFO, &profIid, &profPrefixInfoIid, &profNumPlanpInfoObj) == ZCFG_SUCCESS){
+		if(profNumPlanpInfoObj != NULL){
+			PrefixRange = json_object_get_string(json_object_object_get(profNumPlanpInfoObj, "PrefixRange"));
+			memset(temp, 0 , sizeof(temp));
+			if(profPrefixInfoIid.idx[2] == 1){
+				sprintf(prefixRange,"%s", PrefixRange);
+			}else{
+				sprintf(temp,"%s,%s", prefixRange, PrefixRange);
+				strncpy(prefixRange, temp, sizeof(prefixRange));
+			}
+			memset(temp, 0 , sizeof(temp));
+			FacilityAction = json_object_get_string(json_object_object_get(profNumPlanpInfoObj, "FacilityAction"));
+			if(profPrefixInfoIid.idx[2] == 1){
+				sprintf(facilityAction,"%s", FacilityAction);
+			}else{
+				sprintf(temp,"%s,%s",facilityAction , FacilityAction);
+				strncpy(facilityAction, temp, sizeof(facilityAction));
+			}
+
+			featureNum++;
+			zcfgFeJsonObjFree(profNumPlanpInfoObj);
+		}
+	}
+
+	json_object_object_add(paserobj, "prefixRange", json_object_new_string(prefixRange));
+	json_object_object_add(paserobj, "facilityAction", json_object_new_string(facilityAction));
+	json_object_object_add(paserobj, "featureKeyNum", json_object_new_int(featureNum));
+
+	return ret;
+}
+
+zcfgRet_t zcfgFeDalVoipProfileGet(struct json_object *Jobj, char *replyMsg){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+
+	zcfgFeDalCustomflagGet();
+	initProfGlobalObjects();
+
+	IID_INIT(profIid);
+	while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_VOICE_PROF, &profIid, &profObj) == ZCFG_SUCCESS) {
+		if(profObj != NULL){
+			singleProObj = json_object_new_object();
+			if(singleProObj == NULL){
+				printf("%s:Create new json Obj fail \n", __FUNCTION__);
+				goto exit;
+			}
+			if((ret = zcfgFeDalparseSingleProfObj(singleProObj)) != ZCFG_SUCCESS){
+				printf("%s:(ERROR) fail to parse single Prof Obj \n", __FUNCTION__);
+				goto exit;
+			}
+			if((ret = zcfgFeDalparseSingleProfSipObj(singleProObj)) != ZCFG_SUCCESS){
+				printf("%s:(ERROR) fail to parse single Prof SIP Obj \n", __FUNCTION__);
+				goto exit;
+			}
+			if((ret = zcfgFeDalparseSingleProfRTPObj(singleProObj)) != ZCFG_SUCCESS){
+				printf("%s:(ERROR) fail to parse single Prof RTP Obj \n", __FUNCTION__);
+				goto exit;
+			}
+			if(!(HIDE_VOICE_SRTP&flag1)){
+				if((ret = zcfgFeDalparseSingleProfRTPSRTPObj(singleProObj)) != ZCFG_SUCCESS){
+					printf("%s:(ERROR) fail to parse single Prof SRTP Obj \n", __FUNCTION__);
+					goto exit;
+				}
+			}
+			if((ret = zcfgFeDalparseSingleProfNumberingPlanObj(singleProObj)) != ZCFG_SUCCESS){
+				printf("%s:(ERROR) fail to parse single Prof numbering plan Obj \n", __FUNCTION__);
+				goto exit;
+			}
+			if(SHOW_NOT_USE_OFTEN_VOIP_SETTING&flag1){
+				if((ret = zcfgFeDalparseSingleProfNumberingPlanPrefixInfoObj(singleProObj)) != ZCFG_SUCCESS){
+					printf("%s:(ERROR) fail to parse single Prof numbering plan Obj \n", __FUNCTION__);
+					goto exit;
+				}
+			}
+			if( ret == ZCFG_SUCCESS ){
+				json_object_array_add(Jobj, JSON_OBJ_COPY(singleProObj));
+			}
+
+			zcfgFeJsonObjFree(singleProObj);
+			zcfgFeJsonObjFree(profObj);
+		}
+	}
+
+	//printf("%s(): Jobj :%s \n ",__FUNCTION__,json_object_to_json_string(Jobj));
+exit:
+	freeAllProfObjects();
+	return ret;
+}
+
+
 zcfgRet_t zcfgFeDalVoipProfile(const char *method, struct json_object *Jobj, char *replyMsg)
 {
 	zcfgRet_t ret = ZCFG_SUCCESS;
@@ -719,6 +983,9 @@
 	else if(!strcmp(method, "DELETE")) {
 		ret = zcfgFeDalVoipProfileDel(Jobj, NULL);
 	}
+	else if(!strcmp(method, "GET")) {
+		ret = zcfgFeDalVoipProfileGet(Jobj, NULL);
+	}
 
 	return ret;
 }
Index: libzcfg_fe_dal-1.0/voip/sip/zcfg_fe_dal_sip_account.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/voip/sip/zcfg_fe_dal_sip_account.c	2016-12-19 13:38:30.474519796 +0800
+++ libzcfg_fe_dal-1.0/voip/sip/zcfg_fe_dal_sip_account.c	2016-12-23 17:44:34.633928505 +0800
@@ -373,6 +373,7 @@
 			zcfgFeJsonObjFree(lineObj);
 			return ZCFG_INTERNAL_ERROR;
 		}
+		zcfgFeJsonObjFree(lineObj);
 	}
 	//printf("%s(): Append Line obj to multiJobj (%s) \n ",__FUNCTION__,json_object_to_json_string(multiJobj));
 	//printf("%s() exit \n ",__FUNCTION__);
@@ -399,6 +400,7 @@
 			zcfgFeJsonObjFree(lineSipObj);
 			return ZCFG_INTERNAL_ERROR;
 		}
+		zcfgFeJsonObjFree(lineSipObj);
 	}
 	//printf("%s():Append Line Sip obj to multiJobj (%s) \n ",__FUNCTION__,json_object_to_json_string(multiJobj));
 	//printf("%s() exit \n ",__FUNCTION__);
@@ -451,6 +453,7 @@
 			zcfgFeJsonObjFree(lineCallingFeatureObj);
 			return ZCFG_INTERNAL_ERROR;
 		}
+		zcfgFeJsonObjFree(lineCallingFeatureObj);
 	}
 
 	//printf("%s(): Append Line Call Feature obj to multiJobj :%s \n ",__FUNCTION__,json_object_to_json_string(multiJobj));
@@ -526,6 +529,7 @@
 			zcfgFeJsonObjFree(lineProcessingObj);
 			return ZCFG_INTERNAL_ERROR;
 		}
+		zcfgFeJsonObjFree(lineProcessingObj);
 	}
 
 	//printf("%s() exit \n ",__FUNCTION__);
@@ -557,6 +561,7 @@
 			tmpEvent = json_object_get_string(json_object_object_get(lineMailCfgObj, "Event"));
 			if(strcmp(tmpEvent,eventTarget) == 0){
 				mailEventConfigIsExist = true;
+				zcfgFeJsonObjFree(lineMailCfgObj);
 				break;
 			}
 			zcfgFeJsonObjFree(lineMailCfgObj);
@@ -588,6 +593,7 @@
 		zcfgFeJsonObjFree(lineMailCfgObj);
 		return ZCFG_INTERNAL_ERROR;
 	}
+	zcfgFeJsonObjFree(lineMailCfgObj);
 
 	//printf("%s(): Append mailCfg obj to multiJobj :%s \n ",__FUNCTION__,json_object_to_json_string(multiJobj));
 	//printf("%s() exit \n ",__FUNCTION__);
@@ -622,6 +628,7 @@
 			zcfgFeJsonObjFree(lineMailCfgObj);
 			return ZCFG_INTERNAL_ERROR;
 		}
+		zcfgFeJsonObjFree(lineMailCfgObj);
 	}else{
 		if((ret = zcfgFeObjJsonBlockedAdd(RDM_OID_MAIL_EVENT_CFG, &lineMailCfgIid, NULL)) != ZCFG_SUCCESS){
 			printf("%s():(ERROR) zcfgFeObjJsonAdd add mail config fail~ \n ",__FUNCTION__);
@@ -645,6 +652,7 @@
 				zcfgFeJsonObjFree(lineMailCfgObj);
 				return ZCFG_INTERNAL_ERROR;
 			}
+			zcfgFeJsonObjFree(lineMailCfgObj);
 		}
 	}
 
@@ -770,6 +778,7 @@
 			tmpEvent = json_object_get_string(json_object_object_get(lineMailCfgObj, "Event"));
 			if(strcmp(tmpEvent,eventTarget) == 0){
 				printf("%s():Delete Mail Event Config - (%s)\n", __FUNCTION__, tmpEvent);
+				zcfgFeJsonObjFree(lineMailCfgObj);
 				break;
 			}
 			zcfgFeJsonObjFree(lineMailCfgObj);
@@ -826,7 +835,7 @@
 	while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_VOICE_PHY_INTF, &phyIntfIid, &phyIntfObj) == ZCFG_SUCCESS){
 		if(phyIntfObj != NULL){
 			phyIntfCounter++;
-			zcfgFeJsonObjFree(lineCodecListObj);
+			zcfgFeJsonObjFree(phyIntfObj);
 		}
 	}
 	json_object_object_add(paserobj, "phyIntfCounter", json_object_new_int(phyIntfCounter));
@@ -840,24 +849,23 @@
 	//printf("%s(): Enter.. \n ",__FUNCTION__);
 	char sipAccount[32] = {0};
 
-	if(paserobj != NULL){
-		enable = json_object_get_string(json_object_object_get(lineObj, "Enable"));
-		DirectoryNumber = json_object_get_string(json_object_object_get(lineObj, "DirectoryNumber"));
-		if(VOIP_SIP_PHONE_MAPPING_BY_STD_PHY_REFERENCE_LIST&flag1){
-			PhyReferenceList = json_object_get_string(json_object_object_get(lineObj, "PhyReferenceList"));
-		}
-
-		json_object_object_add(paserobj, "Enable", json_object_new_string(enable));
-		json_object_object_add(paserobj, "DirectoryNumber", json_object_new_string(DirectoryNumber));
-		if(VOIP_SIP_PHONE_MAPPING_BY_STD_PHY_REFERENCE_LIST&flag1){
-			json_object_object_add(paserobj, "PhyReferenceList", json_object_new_string(PhyReferenceList));
-		}
-
-		json_object_object_add(paserobj, "lineIdx", json_object_new_int(lineIid.idx[2]));
-		snprintf(sipAccount, sizeof(sipAccount), "SIP%d", sipAccountIdx);
-		json_object_object_add(paserobj, "SipAccount", json_object_new_string(sipAccount));
+	enable = json_object_get_string(json_object_object_get(lineObj, "Enable"));
+	DirectoryNumber = json_object_get_string(json_object_object_get(lineObj, "DirectoryNumber"));
+	if(VOIP_SIP_PHONE_MAPPING_BY_STD_PHY_REFERENCE_LIST&flag1){
+		PhyReferenceList = json_object_get_string(json_object_object_get(lineObj, "PhyReferenceList"));
+	}
+
+	json_object_object_add(paserobj, "Enable", json_object_new_string(enable));
+	json_object_object_add(paserobj, "DirectoryNumber", json_object_new_string(DirectoryNumber));
+	if(VOIP_SIP_PHONE_MAPPING_BY_STD_PHY_REFERENCE_LIST&flag1){
+		json_object_object_add(paserobj, "PhyReferenceList", json_object_new_string(PhyReferenceList));
 	}
 
+	json_object_object_add(paserobj, "lineIdx", json_object_new_int(lineIid.idx[2]));
+	snprintf(sipAccount, sizeof(sipAccount), "SIP%d", sipAccountIdx);
+	json_object_object_add(paserobj, "SipAccount", json_object_new_string(sipAccount));
+
+
 	return ret;
 }
 
@@ -878,6 +886,8 @@
 		json_object_object_add(paserobj, "AuthUserName", json_object_new_string(AuthUserName));
 		json_object_object_add(paserobj, "AuthPassword", json_object_new_string(AuthPassword));
 		json_object_object_add(paserobj, "X_ZYXEL_Url_Type", json_object_new_string(X_ZYXEL_Url_Type));
+
+		zcfgFeJsonObjFree(lineSipObj);
 	}
 
 	return ret;
@@ -956,6 +966,7 @@
 			json_object_object_add(paserobj, "X_ZYXEL_CCBSEnable", json_object_new_boolean(X_ZYXEL_CCBSEnable));
 		}
 
+		zcfgFeJsonObjFree(lineCallingFeatureObj);
 	}
 
 	return ret;
@@ -995,7 +1006,7 @@
 		json_object_object_add(paserobj, "X_ZYXEL_ComfortNoise", json_object_new_boolean(X_ZYXEL_ComfortNoise));
 
 		codecCounter++;
-		json_object_put(lineCodecListObj);
+		zcfgFeJsonObjFree(lineCodecListObj);
 	}
 	json_object_object_add(paserobj, "CodecCounter", json_object_new_int(codecCounter));
 	return ret;
@@ -1019,6 +1030,8 @@
 		json_object_object_add(paserobj, "EchoCancellationEnable", json_object_new_boolean(EchoCancellationEnable));
 		json_object_object_add(paserobj, "TransmitGain", json_object_new_int(TransmitGain));
 		json_object_object_add(paserobj, "ReceiveGain", json_object_new_int(ReceiveGain));
+
+		zcfgFeJsonObjFree(lineProcessingObj);
 	}
 
 	return ret;
@@ -1050,6 +1063,8 @@
 					json_object_object_add(paserobj, "EmailTo", json_object_new_string(EmailTo));
 					json_object_object_add(paserobj, "Event", json_object_new_string(Event));
 					exist = true;
+
+					zcfgFeJsonObjFree(lineMailCfgObj);
 					break;
 				}
 			}
@@ -1083,6 +1098,7 @@
 				zcfgFeJsonObjFree(lineMailCfgObj);
 				return ZCFG_INTERNAL_ERROR;
 			}
+			zcfgFeJsonObjFree(lineMailCfgObj);
 		}
 
 	}
@@ -1139,6 +1155,7 @@
 		profileName = json_object_get_string(json_object_object_get(profileObj, "Name"));
 		json_object_object_add(paserobj, "Name", json_object_new_string(profileName));
 		json_object_object_add(paserobj, "profileIdx", json_object_new_int(profileIid.idx[1]));
+		zcfgFeJsonObjFree(profileObj);
 	}
 
 	IID_INIT(profPrefixInfoIid);
@@ -1152,6 +1169,7 @@
 				}else{
 					showDefaultOnly = false;
 				}
+				zcfgFeJsonObjFree(profNumPlanpInfoObj);
 				break;
 			}
 			zcfgFeJsonObjFree(profNumPlanpInfoObj);
@@ -1178,6 +1196,10 @@
 	while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_VOICE_LINE, &lineIid, &lineObj) == ZCFG_SUCCESS) {
 		if(lineObj != NULL){
 			singleLineobj = json_object_new_object();
+			if(singleLineobj == NULL){
+				printf("%s:Create new json Obj fail \n", __FUNCTION__);
+				goto exit;
+			}
 
 			/*if((ret = zcfgFeDalparsePhyIntfObj(singleLineobj)) != ZCFG_SUCCESS){
 				printf("%s:(ERROR) fail to parse single Line Obj \n", __FUNCTION__);
@@ -1221,7 +1243,7 @@
 				json_object_array_add(Jobj, JSON_OBJ_COPY(singleLineobj));
 			}
 
-			json_object_put(singleLineobj);
+			zcfgFeJsonObjFree(singleLineobj);
 			sipAccountIdx++;
 			zcfgFeJsonObjFree(lineObj);
 		}
