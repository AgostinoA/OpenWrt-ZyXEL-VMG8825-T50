Index: libzcfg_fe_dal-1.0/zcfg_fe_dal_rdmacl.c
===================================================================
--- /dev/null	2018-01-01 00:00:00.000000000 +0000
+++ libzcfg_fe_dal-1.0/zcfg_fe_dal_rdmacl.c	2018-03-15 18:01:38.397642000 +0800
@@ -0,0 +1,266 @@
+#include <json/json.h>
+#include <sys/types.h>
+
+#include "zcfg_common.h"
+#include "zcfg_ret.h"
+#include "zcfg_rdm_oid.h"
+#include "zcfg_fe_rdm_access.h"
+#include "zcfg_fe_rdm_string.h"
+#include "zcfg_fe_rdm_struct.h"
+
+#include "zcfg_fe_dal_common.h"
+#include "zcfg_fe_dal_rdmacl.h"
+
+enum {
+	ZHTTP_RDM_ACL_METHOD_QUERY = 1
+
+};
+
+const char *rdmACLIpIfaceParams[] = {"Name", "X_ZYXEL_SrvName", NULL};
+const char *rdmACLDevSecCertParams[] = {"X_ZYXEL_Name", NULL};
+const char *rdmACLVlanGroupParams[] = {"GroupName", "VlanId", NULL};
+const char *rdmACLBridgingBrParams[] = {"X_ZYXEL_BridgeName", NULL};
+const char *rdmACLBridgingFltParams[] = {"Bridge", "SourceMACAddressFilterList", "SourceMACFromVendorClassIDFilter",
+		"SourceMACFromVendorClassIDMode", "SourceMACFromClientIDFilter", "X_ZYXEL_SourceMACFromVSIFilter", NULL};
+
+
+//char *rdmACLObjectIid[] = {"1,2", "2"}; //[1,2,0,0,0,0], [2,0,0,0,0,0]
+const char *rdmACLBridgingBrIid[] = {"1", NULL};
+
+static rdmObjectACL_t rdmObjectACList[] = {
+	{RDM_OID_IP_IFACE, ZHTTP_RDM_ACL_METHOD_QUERY, NULL, rdmACLIpIfaceParams},
+	{RDM_OID_DEV_SEC_CERT, ZHTTP_RDM_ACL_METHOD_QUERY, NULL, rdmACLDevSecCertParams},
+	{RDM_OID_VLAN_GROUP, ZHTTP_RDM_ACL_METHOD_QUERY, NULL, rdmACLVlanGroupParams},
+	{RDM_OID_BRIDGING_BR, ZHTTP_RDM_ACL_METHOD_QUERY, NULL, rdmACLBridgingBrParams},
+	{RDM_OID_BRIDGING_FILTER, ZHTTP_RDM_ACL_METHOD_QUERY, NULL, rdmACLBridgingFltParams},
+	{0, 0, NULL, NULL}
+};
+
+static int zcfgFeDalACLIidAuth(const char *objIidAuth[], char *iid)
+{
+	int n = 0, rst = -1;
+	char iidStr[30+1] = {0};
+	bool running = true;
+	char *p;
+
+	//!iid, !strlen(iid)
+	strncpy(iidStr, iid, sizeof(iidStr)-1);
+	p = strstr(iidStr, "0");
+	if(p && p != &iidStr[0]){
+		*(p-1) = '\0'; //n,0
+	}
+
+	while(objIidAuth[n] && strlen(iidStr) && running){
+		rst = strcmp(iidStr, objIidAuth[n++]);
+		running = (rst == 0) ? false : true;
+	}
+
+	return rst;
+}
+
+static zcfgRet_t zcfgFeDalQueryRdmObj(rdmObjectACL_t *objAcl, queryRdmSubObjRout querySubObjRout, queryRdmObjRout queryObjNextRout, queryRdmObjRout queryObjRout,
+			const char *oidStr, zcfg_offset_t objOid, objIndex_t *objIid, objIndex_t *childIid, struct json_object *response)
+{
+	objIndex_t *outIid;
+	struct json_object *queriedObj, *value;
+	zcfgRet_t ret;
+
+	// !oidStr, !objIid, !response
+	// !querySubObjRout && !queryObjNextRout && !queryObjRout
+	if(querySubObjRout){ // query sub object
+		if(!childIid)
+			return ZCFG_INTERNAL_ERROR;
+
+		ret = querySubObjRout(objOid, objIid, childIid, &queriedObj);
+		outIid = childIid;
+	}else if(queryObjNextRout){  // query next
+		if(!objIid)
+			return ZCFG_INTERNAL_ERROR;
+
+		ret = queryObjNextRout(objOid, objIid, &queriedObj);
+		outIid = objIid;
+	}else{  // query specific
+		if(!objIid)
+			return ZCFG_INTERNAL_ERROR;
+
+		ret = queryObjRout(objOid, objIid, &queriedObj);
+		outIid = objIid;
+	}
+
+	if(ret != ZCFG_SUCCESS){
+		return ret;
+	}
+	printf("%s: %u %hhu,%hhu,%hhu,%hhu,%hhu,%hhu queried!\n", __FUNCTION__, objOid, objIid->idx[0],objIid->idx[1],objIid->idx[2],
+		objIid->idx[3],objIid->idx[4],objIid->idx[5]);
+
+	const char **iidACL = objAcl->iid;
+	if(iidACL && queryObjNextRout){
+		//require iid authorization
+		char objIidStrSave[30+1] = {0};
+		sprintf(objIidStrSave, "%hhu,%hhu,%hhu,%hhu,%hhu,%hhu", objIid->idx[0],objIid->idx[1],objIid->idx[2],
+				objIid->idx[3],objIid->idx[4],objIid->idx[5]);
+		char *p = strstr(objIidStrSave, "0");
+		if(p && p != &objIidStrSave[0]){
+			*(p-1) = '\0'; //n,0
+		}
+
+		if(zcfgFeDalACLIidAuth(iidACL, objIidStrSave) != 0)
+			return ZCFG_SUCCESS;
+	}
+
+	const char **rdmAcLParams = objAcl->params;
+	if(rdmAcLParams){
+		struct json_object *paramObj;
+		const char *parmName;
+		value = json_object_new_object();
+		int n = 0;
+		while((parmName = rdmAcLParams[n++])){
+			paramObj = json_object_object_get(queriedObj, parmName);
+			if(paramObj)
+				json_object_object_add(value, parmName, JSON_OBJ_COPY(paramObj));
+		}
+	}else{
+		value = queriedObj;
+	}
+
+	//char *retString = retStringGet[ret-ZCFG_RET_OFFSET];
+	struct json_object *responseObj = json_object_new_object();
+	struct json_object *iidArray = json_object_new_array();
+	int iidIdx = 0;
+	bool running = true;
+	while(running){
+		json_object_array_add(iidArray, json_object_new_int(outIid->idx[iidIdx++]));
+		running = (iidIdx > 5) ? false : true;
+	}
+
+	json_object_object_add(responseObj, "Iid", iidArray);
+	json_object_object_add(responseObj, "Object", value);
+	json_object_array_add(response, responseObj);
+	if(rdmAcLParams)
+		json_object_put(queriedObj);
+
+	return ZCFG_SUCCESS;
+}
+
+static zcfgRet_t zcfgFeDalQueryRdmObjs(rdmObjectACL_t *objAcl, queryRdmSubObjRout querySubObjRout, queryRdmObjRout queryObjNextRout,
+			const char *oidStr, zcfg_offset_t objOid, objIndex_t *objIid, struct json_object *response)
+{
+	zcfgRet_t ret;
+	objIndex_t childIid;
+	bool querying = true;
+	//char *rdmAcLParams[]
+	// !objOid, !objIid, !response
+	// !querySubObjRout && !queryObjRout
+
+	IID_INIT(childIid);
+	while(querying){
+		if(querySubObjRout){
+			ret = zcfgFeDalQueryRdmObj(objAcl, querySubObjRout, NULL, NULL, oidStr, objOid, objIid, &childIid, response);
+		}else{ // query object next
+			ret = zcfgFeDalQueryRdmObj(objAcl, NULL, queryObjNextRout, NULL, oidStr, objOid, objIid, NULL, response);
+		}
+
+		if(ret != ZCFG_SUCCESS){
+			querying = false;
+		}
+	}
+
+	return ZCFG_SUCCESS;
+}
+
+static rdmObjectACL_t *retrieveRdmObjectACL(zcfg_offset_t oid)
+{
+	int n = 0;
+	int picked = -1;
+	rdmObjectACL_t *rdmObjectACListAddr = rdmObjectACList;
+	rdmObjectACL_t *pickZhttpRdmACL = NULL;
+
+	while(picked == -1 && rdmObjectACList[n].method)
+	{
+		picked = (oid == rdmObjectACList[n].oid) ? n : -1;
+		n++;
+	}
+
+	pickZhttpRdmACL = (picked >= 0) ? (rdmObjectACListAddr+picked) : NULL;
+
+	return pickZhttpRdmACL;
+}
+
+static void iidStr2ObjIid(const char *iid, objIndex_t *objIid)
+{
+	char iidStr[30+1] = {0};
+	char *iidSavePtr = NULL, *p;
+	int n = 0;
+
+	strncpy(iidStr, iid, sizeof(iidStr)-1);
+	IID_INIT((*objIid));
+	p = strtok_r(iidStr, ",", &iidSavePtr);
+	bool running = p ? true : false;
+
+	while(running){
+		objIid->idx[n] = atoi(p);
+		objIid->level = (objIid->idx[n]) ? n+1 : objIid->level;
+		running = (objIid->idx[n] > 0) ? true : false;
+
+		p = running ? strtok_r(NULL, ",", &iidSavePtr) : NULL;
+		running = p ? true : false;
+		n++;
+	}
+}
+
+zcfgRet_t zcfgFeDalQueryRdmObjHandler(zcfg_offset_t oid, const char *method, struct json_object *Jobj, struct json_object *Jarray, char *replyMsg)
+{
+	struct json_object *iidObj;
+	char oidStr[256+1] = {0};
+	char iidStrSave[30+1] = {0};
+	objIndex_t objIid;
+
+	//printf("%s: Jobj=%s\n", __FUNCTION__, json_object_to_json_string(Jobj));
+	printf("%s: oid=%u\n", __FUNCTION__, oid);
+	//sprintf(oidStr, "%u", oid);
+
+	const char *iidStr = (iidObj = json_object_object_get(Jobj, "iid")) ? json_object_get_string(iidObj) : NULL;
+	printf("%s: iid=%s\n", __FUNCTION__, iidStr ? iidStr : "empty");
+	if(iidStr){
+		char *p1 = (p1 = strstr(iidStr, "[")) ? p1+1 : NULL;
+		char *p2 = p1 ? strstr(p1, "]") : NULL;
+		if(p1 && p2 && (p2 > p1)){
+			strncpy(iidStrSave, p1, sizeof(iidStrSave)-1);
+			iidStrSave[p2-p1] = '\0';
+		}
+	}
+
+	rdmObjectACL_t *objACL = retrieveRdmObjectACL(oid);
+	if(!objACL){
+		// only authorized object could access by rdm oid/iid
+		// printf("Not authorized!\n");
+		return ZCFG_REQUEST_REJECT;
+	}
+
+	// authorize iid
+	if(objACL->iid){
+		//require iid authorization
+		if(strlen(iidStrSave)){
+			if(zcfgFeDalACLIidAuth(objACL->iid, iidStrSave) != 0)
+				return ZCFG_REQUEST_REJECT;
+
+			printf("%s: %s, %s authorized\n", __FUNCTION__, oidStr, iidStrSave);
+			iidStr2ObjIid(iidStrSave, &objIid);
+		}
+	}else{
+		if(strlen(iidStrSave))
+			iidStr2ObjIid(iidStrSave, &objIid);
+	}
+
+	if(!strlen(iidStrSave)){
+		IID_INIT(objIid);
+		zcfgFeDalQueryRdmObjs(objACL, NULL, (queryRdmObjRout)zcfgFeObjJsonGetNext,
+					oidStr, oid, &objIid, Jarray);
+	}else{ // specific
+		zcfgFeDalQueryRdmObj(objACL, NULL, NULL, (queryRdmObjRout)zcfgFeObjJsonGet,
+				oidStr, oid, &objIid, NULL, Jarray);
+	}
+
+	return ZCFG_SUCCESS;
+}
+
Index: libzcfg_fe_dal-1.0/zcfg_fe_dal_rdmacl.h
===================================================================
--- /dev/null	2018-01-01 00:00:00.000000000 +0000
+++ libzcfg_fe_dal-1.0/zcfg_fe_dal_rdmacl.h	2018-03-15 18:21:16.599681109 +0800
@@ -0,0 +1,20 @@
+#ifndef _ZCFG_FE_DAL_RDMACL_H
+#define _ZCFG_FE_DAL_RDMACL_H
+
+//
+// on white list,
+//  iid null implies no restriction on iid
+//  params not null means it would reply only these listed
+typedef struct rdmObjectACL_s {
+	zcfg_offset_t oid;
+	int method;
+	const char **iid;
+	const char **params;
+}rdmObjectACL_t;
+
+typedef zcfgRet_t (*queryRdmObjRout)(zcfg_offset_t objOid, objIndex_t *objIid, struct json_object **response);
+typedef zcfgRet_t (*queryRdmSubObjRout)(zcfg_offset_t objOid, objIndex_t *objIid, objIndex_t *childIid, struct json_object **response);
+
+zcfgRet_t zcfgFeDalQueryRdmObjHandler(zcfg_offset_t oid, const char *method, struct json_object *Jobj, struct json_object *Jarray, char *replyMsg);
+
+#endif
