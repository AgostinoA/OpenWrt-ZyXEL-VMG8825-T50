Index: libzcfg_fe_dal-1.0/network/nat/zcfg_fe_dal_nat_addr_mapping.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/network/nat/zcfg_fe_dal_nat_addr_mapping.c	2018-02-05 11:25:03.323562386 +0800
+++ libzcfg_fe_dal-1.0/network/nat/zcfg_fe_dal_nat_addr_mapping.c	2018-02-05 11:28:13.384292779 +0800
@@ -288,6 +288,7 @@
 	zcfgRet_t ret = ZCFG_SUCCESS;
 	objIndex_t objIid;
 	struct json_object *iidArray = NULL;
+	struct json_object *NatAddrMappingJobj = NULL;
 	uint8_t iidIdx =0;
 
 	IID_INIT(objIid);
@@ -298,9 +299,41 @@
 			objIid.level = iidIdx+1;
 	}
 	} else if (iidArray = json_object_object_get(Jobj, "Index")) {
-		objIid.level = 1;
-		objIid.idx[0] = json_object_get_int(iidArray);
-		json_object_object_del(Jobj, "Index");
+		int index = 0;
+		int count = 1;
+		bool found = false;
+	
+		index = json_object_get_int(iidArray);
+	
+		IID_INIT(objIid);
+		while(zcfgFeObjJsonGetNext(RDM_OID_NAT_ADDR_MAPPING, &objIid, &NatAddrMappingJobj) == ZCFG_SUCCESS) {
+			zcfgFeJsonObjFree(NatAddrMappingJobj);
+			if(count == index){
+				found = true;
+				break;
+			}
+			else
+				count++;
+		}
+		if(found){
+			ret = zcfgFeObjJsonDel(RDM_OID_NAT_ADDR_MAPPING, &objIid, NULL);
+			if (ret != ZCFG_SUCCESS)
+			{
+				if(replyMsg != NULL)
+					strcat(replyMsg, "internal error");
+				return ZCFG_INTERNAL_ERROR;
+			}
+		}
+		else
+		{
+			if (ret != ZCFG_SUCCESS)
+			{
+				if(replyMsg != NULL)
+					strcat(replyMsg, "Can not find the rule");
+				return ZCFG_INTERNAL_ERROR;
+			}
+		}
+		return ret;
 	}
 	else {
 		if(replyMsg != NULL)
