Index: libzcfg_fe_dal-1.0/Makefile
===================================================================
--- libzcfg_fe_dal-1.0.orig/Makefile	2016-11-08 15:59:08.390007729 +0800
+++ libzcfg_fe_dal-1.0/Makefile	2016-11-08 16:07:04.813448400 +0800
@@ -22,6 +22,11 @@
 VOIP_SIP_PATH = ./voip/sip
 VOIP_SIP_PHONE_PATH = ./voip/phone
 VOIP_SIP_CALLRULE_PATH = ./voip/callRule
+SECURITY_FIREWALL_PATH = ./security/firewall
+SECURITY_MACFILTER_PATH = ./security/macFilter
+SECURITY_PARENTALCTL_PATH = ./security/parentalControl
+SECURITY_SCHEDULERRULE_PATH = ./security/schedulerRule
+SECURITY_CERTIFICATE_PATH = ./security/certificate
 SOURCES += $(wildcard $(FE_PATH)/*.c)
 SOURCES += $(wildcard $(NETWORK_BR_PATH)/*.c)
 SOURCES += $(wildcard $(NETWORK_DNS_PATH)/*.c)
@@ -39,7 +44,12 @@
 SOURCES += $(wildcard $(MAINTENANCE_EMAIL_PATH)/*.c)
 SOURCES += $(wildcard $(MAINTENANCE_LOG_PATH)/*.c)
 SOURCES += $(wildcard $(VOIP_SIP_CALLRULE_PATH)/*.c)
+SOURCES += $(wildcard $(SECURITY_FIREWALL_PATH)/*.c)
 SOURCES += $(wildcard $(NETWORK_WIRELESS_PATH)/*.c)
+SOURCES += $(wildcard $(SECURITY_MACFILTER_PATH)/*.c)
+SOURCES += $(wildcard $(SECURITY_PARENTALCTL_PATH)/*.c)
+SOURCES += $(wildcard $(SECURITY_SCHEDULERRULE_PATH)/*.c)
+SOURCES += $(wildcard $(SECURITY_CERTIFICATE_PATH)/*.c)
 OBJS = $(patsubst %.c, %.o, $(SOURCES))
 
 #OBJ_FILES = zcfg_fe_dal.o zcfg_fe_dal_broadband.o zcfg_fe_dal_mgmt.o
Index: libzcfg_fe_dal-1.0/security/certificate/zcfg_fe_dal_localCertificates.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ libzcfg_fe_dal-1.0/security/certificate/zcfg_fe_dal_localCertificates.c	2016-10-05 11:09:43.755255900 +0800
@@ -0,0 +1,151 @@
+
+#include <json/json.h>
+
+#include "zcfg_common.h"
+#include "zcfg_rdm_oid.h"
+#include "zcfg_rdm_obj.h"
+#include "zcfg_debug.h"
+#include "zcfg_fe_rdm_string.h"
+#include "zcfg_fe_dal_common.h"
+
+#define CWMP_SOAP_MSG_DEBUG (1 << 1)
+
+dal_param_t DEV_SEC_CERT_param[] =
+{
+	//DevSecCert
+	{"Enable",		dalType_boolean,	0,	0,	NULL},
+	{"X_ZYXEL_Name",		dalType_string,	0,	0,	NULL},
+	{"X_ZYXEL_Type",		dalType_string,	0,	0,	NULL},
+	{"X_ZYXEL_Certificate",		dalType_string,	0,	0,	NULL},
+	{"X_ZYXEL_PrivateKey",		dalType_string,	0,	0,	NULL},	
+	{"X_ZYXEL_SigningRequest",		dalType_string,	0,	0,	NULL},
+	{"X_ZYXEL_CommonName",		dalType_string,	0,	0,	NULL},	
+	{"X_ZYXEL_OrgName",		dalType_string,	0,	0,	NULL},
+	{"X_ZYXEL_StateName",		dalType_string,	0,	0,	NULL},	
+	{"X_ZYXEL_CountryName",		dalType_string,	0,	0,	NULL},
+	{"LastModif",		dalType_string,	0,	0,	NULL},	
+	{"SerialNumber",		dalType_string,	0,	0,	NULL},
+	{"Issuer",		dalType_string,	0,	0,	NULL},
+	{"NotBefore",		dalType_string,	0,	0,	NULL},
+	{"NotAfter",		dalType_string,	0,	0,	NULL},	
+	{"Subject",		dalType_string,	0,	0,	NULL},
+	{"SubjectAlt",		dalType_string,	0,	0,	NULL},
+	{"SignatureAlgorithm",		dalType_string,	0,	0,	NULL},		
+	{NULL,		0,	0,	0,	NULL}
+};
+
+zcfgRet_t zcfgFeDalDevSecCertAdd(struct json_object *Jobj, char *replyMsg)
+{
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	const char *paraName;
+	objIndex_t objIid;
+	struct json_object *DevSecCertJobj = NULL;
+	int n=0;
+	paraName = (const char *)DEV_SEC_CERT_param[n++].paraName;
+
+	IID_INIT(objIid);
+	zcfgFeObjJsonAdd(RDM_OID_DEV_SEC_CERT, &objIid, NULL);
+	if((ret = zcfgFeObjJsonGet(RDM_OID_DEV_SEC_CERT, &objIid, &DevSecCertJobj)) != ZCFG_SUCCESS) {
+		printf("%s: Object retrieve fail\n", __FUNCTION__);
+		return ret;
+	}	
+	while(paraName){
+		struct json_object *paramValue = json_object_object_get(Jobj, paraName);
+		if(!paramValue) {
+			printf("function:%s, Line =%d\n", __FUNCTION__,__LINE__);
+			paraName = (const char *)DEV_SEC_CERT_param[n++].paraName;
+			continue;
+		}
+		json_object_object_add(DevSecCertJobj, paraName, JSON_OBJ_COPY(paramValue));
+		paraName = (const char *)DEV_SEC_CERT_param[n++].paraName;
+	}
+
+	if((ret = zcfgFeObjJsonBlockedSet(RDM_OID_DEV_SEC_CERT, &objIid, DevSecCertJobj, NULL)) != ZCFG_SUCCESS)
+	{
+		return ret;
+	}
+	
+	json_object_put(DevSecCertJobj);
+	return ret;
+}
+zcfgRet_t zcfgFeDalDevSecCertEdit(struct json_object *Jobj, char *replyMsg)
+{
+
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	const char *paraName;
+	objIndex_t objIid;
+	struct json_object *DevSecCertJobj = NULL;
+	int paramModified = 0, n = 0;
+	struct json_object *iidArray = NULL;
+	uint8_t iidIdx =0;
+	paraName = (const char *)DEV_SEC_CERT_param[n++].paraName;
+	
+	//IID_INIT(objIid);
+	iidArray = json_object_object_get(Jobj, "Iid");
+	for(iidIdx=0;iidIdx<6;iidIdx++){
+		objIid.idx[iidIdx] = json_object_get_int( json_object_array_get_idx(iidArray, iidIdx));
+		if(objIid.idx[iidIdx] != 0)
+			objIid.level = iidIdx+1;
+	}
+	if((ret = zcfgFeObjJsonGet(RDM_OID_DEV_SEC_CERT, &objIid, &DevSecCertJobj)) != ZCFG_SUCCESS) {
+		return ret;
+	}
+	while(paraName){
+		struct json_object *paramValue = json_object_object_get(Jobj, paraName);
+		if(!paramValue) {
+			paraName = (const char *)DEV_SEC_CERT_param[n++].paraName;
+			continue;
+		}
+		json_object_object_add(DevSecCertJobj, paraName, JSON_OBJ_COPY(paramValue));
+		paramModified = 1;				
+		paraName = (const char *)DEV_SEC_CERT_param[n++].paraName;
+	}
+
+	if(paramModified) {
+		if((ret = zcfgFeObjJsonSet(RDM_OID_DEV_SEC_CERT, &objIid, DevSecCertJobj, NULL)) != ZCFG_SUCCESS);
+	}
+	json_object_put(DevSecCertJobj);
+	return ret;
+}
+zcfgRet_t zcfgFeDalDevSecCertDelete(struct json_object *Jobj, char *replyMsg)
+{
+	
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	objIndex_t objIid;
+	struct json_object *iidArray = NULL;
+	uint8_t iidIdx =0;
+
+	
+	//IID_INIT(objIid);
+	iidArray = json_object_object_get(Jobj, "Iid");
+	
+	for(iidIdx=0;iidIdx<6;iidIdx++){
+		objIid.idx[iidIdx] = json_object_get_int( json_object_array_get_idx(iidArray, iidIdx));
+		if(objIid.idx[iidIdx] != 0)
+			objIid.level = iidIdx+1;
+	}
+	
+	zcfgFeObjJsonDel(RDM_OID_DEV_SEC_CERT, &objIid, NULL);
+	
+	return ret;
+	
+}
+zcfgRet_t zcfgFeDalDevSecCert(const char *method, struct json_object *Jobj, char *replyMsg)
+{
+	zcfgRet_t ret = ZCFG_SUCCESS;
+
+	if(!method || !Jobj)
+		return ZCFG_INTERNAL_ERROR;
+
+	if(!strcmp(method, "PUT")) {
+		ret = zcfgFeDalDevSecCertEdit(Jobj, NULL);
+	}
+	else if(!strcmp(method, "POST")) {
+		ret = zcfgFeDalDevSecCertAdd(Jobj, NULL);
+	}
+	else if(!strcmp(method, "DELETE")) {
+		ret = zcfgFeDalDevSecCertDelete(Jobj, NULL);
+	}
+
+	return ret;
+}
Index: libzcfg_fe_dal-1.0/security/firewall/zcfg_fe_dal_firewall_acl.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ libzcfg_fe_dal-1.0/security/firewall/zcfg_fe_dal_firewall_acl.c	2016-10-05 11:09:43.727255900 +0800
@@ -0,0 +1,199 @@
+#include <ctype.h>
+#include <json/json.h>
+#include <time.h>
+#include "zcfg_common.h"
+#include "zcfg_fe_rdm_string.h"
+#include "zcfg_fe_rdm_struct.h"
+#include "zcfg_rdm_oid.h"
+#include "zcfg_rdm_obj.h"
+#include "zcfg_debug.h"
+#include "zcfg_msg.h"
+#include "zcfg_fe_dal_common.h"
+
+#define LEVEL_NAME_UD "UserDefined"
+
+
+dal_param_t FIREWALL_ACL_param[] =
+{
+	{"Index", 				dalType_int, 	 0, 	0, 	NULL},
+	{"Enable", 				dalType_boolean,  0, 	0,	NULL},
+	{"Description", 		dalType_string,  0, 	0,	NULL},
+	{"Order", 				dalType_int, 	 0, 	0, 	NULL},
+	{"Target", 				dalType_string,  0, 	0, 	NULL},
+	{"SourceIPExclude", 	dalType_string,	 0,		0,	NULL},
+	{"DestIPExclude", 		dalType_string,	 0,		0,	NULL},
+	/*protocol*/
+	{"Protocol", 			dalType_int, 	-2, 	255,	NULL},
+	{"ProtocolExclude", 	dalType_int, 	 0, 	0, 	NULL},
+	{"IPVersion", 			dalType_int, 	 0, 	0, 	NULL},
+	/*src des ip*/
+	{"SourceIP", 			dalType_string,  0, 	0, 	NULL},
+	{"SourceMask", 			dalType_string,  0, 	0, 	NULL},
+	{"DestIP", 				dalType_string,  0, 	0, 	NULL},
+	{"DestMask", 			dalType_string,  0, 	0, 	NULL},
+	/*Port*/
+	{"DestPortExclude", 	dalType_int, 	 0, 	0, 	NULL},
+	{"DestPort", 			dalType_int, 	-1, 	65535, 	NULL},
+	{"DestPortRangeMax", 	dalType_int, 	-1, 	65535, 	NULL},
+	{"SourcePortExclude", 	dalType_int, 	 0, 	0, 	NULL},
+	{"SourcePort", 			dalType_int, 	-1, 	65535, 	NULL},
+	{"SourcePortRangeMax", 	dalType_int, 	-1, 	65535, 	NULL},
+	/*TCP flag*/
+	{"X_ZYXEL_TCPFlagComp", dalType_string,  0, 	0, 	NULL},
+	{"X_ZYXEL_TCPFlagMask", dalType_string,  0, 	0, 	NULL},
+	{"X_ZYXEL_ServiceIndex",dalType_int, 	 0, 	0, 	NULL},
+	{"X_ZYXEL_Direction", 	dalType_string,  0, 	0, 	NULL},
+	/*rate limit*/
+	{"X_ZYXEL_LimitRate", 	dalType_int, 	 0, 	0, 	NULL},
+	{"X_ZYXEL_LimitRateUnit", dalType_string,  0, 	0, 	NULL},
+	{"X_ZYXEL_ScheduleRule",dalType_int, 	 0, 	0, 	NULL},
+	{"X_ZYXEL_ICMPType", 			dalType_int, 	-1, 	143, 	NULL},
+	{"X_ZYXEL_ICMPTypeCode", 		dalType_int, 	-1, 	4, 	NULL},
+	{NULL, 					0, 				0, 	0, 	NULL}
+};
+
+static objIndex_t chainIid = {0};
+
+bool getChainRuleIid(){
+	struct json_object *chainObj = NULL;
+	struct json_object *levelObj = NULL;
+	objIndex_t levelIid = {0};
+	bool found = false;
+	const char *name = NULL;
+	char chain[32] = {0};
+	int chainIdx = 0;
+
+	IID_INIT(levelIid);
+	while(zcfgFeObjJsonGetNext(RDM_OID_FIREWALL_LEVEL, &levelIid, &levelObj) == ZCFG_SUCCESS) {
+		name = json_object_get_string(json_object_object_get(levelObj, "Name"));
+		if(!strcmp(name, LEVEL_NAME_UD)){
+			strcpy(chain, json_object_get_string(json_object_object_get(levelObj, "Chain")));
+			chainIdx = atoi(&chain[15]);
+			break;
+		}
+	}
+
+	IID_INIT(chainIid);
+	while(zcfgFeObjJsonGetNext(RDM_OID_FIREWALL_CHAIN, &chainIid, &chainObj) == ZCFG_SUCCESS) {
+		name = json_object_get_string(json_object_object_get(chainObj, "Name"));
+		if(chainIid.idx[0] == chainIdx){
+			found = true;
+			break;
+		}
+	}
+
+	zcfgFeJsonObjFree(levelObj);
+	zcfgFeJsonObjFree(chainObj);
+	return found;
+}
+
+zcfgRet_t zcfgFeDal_Firewall_ACL_Add(struct json_object *Jobj, char *replyMsg){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	struct json_object *aclObj = NULL;
+ 	objIndex_t aclIid = {0};
+
+	IID_INIT(aclIid);
+	if(getChainRuleIid()){
+		ret = zcfgFeObjJsonBlockedAdd(RDM_OID_FIREWALL_CHAIN_RULE, &chainIid, NULL);
+		if(ret == ZCFG_SUCCESS){
+			memcpy(&aclIid, &chainIid, sizeof(objIndex_t));
+			ret = zcfgFeObjJsonGet(RDM_OID_FIREWALL_CHAIN_RULE, &aclIid, &aclObj);
+		}
+
+		if(ret == ZCFG_SUCCESS){
+			json_object_object_foreach(Jobj, key, val){
+				if(!strcmp(key, "Index")){
+					continue;
+				}
+				json_object_object_add(aclObj, key, val);
+			}
+			
+			ret = zcfgFeObjJsonBlockedSet(RDM_OID_FIREWALL_CHAIN_RULE, &aclIid, aclObj, NULL);
+		}
+	}
+
+	zcfgFeJsonObjFree(aclObj);
+	return ret;
+}
+
+zcfgRet_t zcfgFeDal_Firewall_ACL_Edit(struct json_object *Jobj, char *replyMsg){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	struct json_object *aclObj = NULL;
+	objIndex_t aclIid = {0};
+	int order = 0;
+	int index = 0;
+	bool found = false;
+
+	IID_INIT(aclIid);
+	if(getChainRuleIid()){
+		index = json_object_get_int(json_object_object_get(Jobj, "Index"));
+		IID_INIT(aclIid);
+		while(zcfgFeSubInObjJsonGetNext(RDM_OID_FIREWALL_CHAIN_RULE, &chainIid, &aclIid , &aclObj)== ZCFG_SUCCESS) {
+			order = json_object_get_int(json_object_object_get(aclObj, "Order"));
+			if(index == (order-1)){
+				found = true;
+				break;
+			}
+		}
+
+		if(found){
+			json_object_object_foreach(Jobj, key, val){
+				if(!strcmp(key, "Index")){
+					continue;
+				}
+				json_object_object_add(aclObj, key, val);
+			}
+			
+			ret = zcfgFeObjJsonBlockedSet(RDM_OID_FIREWALL_CHAIN_RULE, &aclIid, aclObj, NULL);
+		}
+	}
+
+	zcfgFeJsonObjFree(aclObj);
+	return ret;
+}
+zcfgRet_t zcfgFeDal_Firewall_ACL_Delete(struct json_object *Jobj, char *replyMsg){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	struct json_object *aclObj = NULL;
+	objIndex_t aclIid = {0};
+	int index = 0;
+	int order = 0;
+	bool found = false;
+
+	IID_INIT(aclIid);
+	if(getChainRuleIid()){
+		index = json_object_get_int(json_object_object_get(Jobj, "Index"));
+		while(zcfgFeSubInObjJsonGetNext(RDM_OID_FIREWALL_CHAIN_RULE, &chainIid, &aclIid , &aclObj)== ZCFG_SUCCESS) {
+			order = json_object_get_int(json_object_object_get(aclObj, "Order"));
+			if(index == (order-1)){
+				found = true;
+				break;
+			}
+		}
+
+		if(found){
+			ret = zcfgFeObjJsonDel(RDM_OID_FIREWALL_CHAIN_RULE, &aclIid, NULL);
+		}
+	}
+
+	zcfgFeJsonObjFree(aclObj);
+	return ret;
+}
+
+zcfgRet_t zcfgFeDalFirewallACL(const char *method, struct json_object *Jobj, char *replyMsg){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+
+	if(!method || !Jobj)
+		return ZCFG_INTERNAL_ERROR;
+
+	if(!strcmp(method, "PUT")) {
+		ret = zcfgFeDal_Firewall_ACL_Edit(Jobj, NULL);
+	}else if(!strcmp(method, "POST")) {
+		ret = zcfgFeDal_Firewall_ACL_Add(Jobj, NULL);
+	}else if(!strcmp(method, "DELETE")) {
+		ret = zcfgFeDal_Firewall_ACL_Delete(Jobj, NULL);
+	}else
+		printf("Unknown method:%s\n", method);
+
+	return ret;
+}
+
Index: libzcfg_fe_dal-1.0/security/firewall/zcfg_fe_dal_firewall_dos.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ libzcfg_fe_dal-1.0/security/firewall/zcfg_fe_dal_firewall_dos.c	2016-10-05 11:09:43.723255900 +0800
@@ -0,0 +1,52 @@
+#include <ctype.h>
+#include <json/json.h>
+#include <time.h>
+#include "zcfg_common.h"
+#include "zcfg_fe_rdm_string.h"
+#include "zcfg_fe_rdm_struct.h"
+#include "zcfg_rdm_oid.h"
+#include "zcfg_rdm_obj.h"
+#include "zcfg_debug.h"
+#include "zcfg_msg.h"
+#include "zcfg_fe_dal_common.h"
+
+dal_param_t FIREWALL_DOS_param[]={
+	{"enableDos", 		dalType_boolean,	0,	0,	NULL},
+	{"enablePingRes",	dalType_boolean,	0,	0,	NULL},
+	{NULL,					0,	0,	0,	NULL},
+
+};
+
+zcfgRet_t zcfgFeDal_DOS_Edit(struct json_object *Jobj, char *replyMsg){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	struct json_object *dosObj = NULL;
+	objIndex_t dosIid = {0};
+	bool enableDos = false;
+	bool enablePingRes = false;
+
+	IID_INIT(dosIid);
+	ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_FIREWALL, &dosIid, &dosObj);
+
+	if(ret == ZCFG_SUCCESS){
+		enableDos = json_object_get_boolean(json_object_object_get(Jobj, "enableDos"));
+		enablePingRes = json_object_get_boolean(json_object_object_get(Jobj, "enablePingRes"));
+		json_object_object_add(dosObj, "X_ZYXEL_Dos_Enable", json_object_new_boolean(enableDos));
+		json_object_object_add(dosObj, "X_ZYXEL_DenyPing", json_object_new_boolean(enablePingRes));
+		ret = zcfgFeObjJsonSet(RDM_OID_FIREWALL, &dosIid, dosObj, NULL);
+	}
+	
+	zcfgFeJsonObjFree(dosObj);
+	return ret;
+}
+
+zcfgRet_t zcfgFeDalFirewallDos(const char *method, struct json_object *Jobj, char *replyMsg){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	
+	if(!strcmp(method, "PUT"))
+		ret = zcfgFeDal_DOS_Edit(Jobj, NULL);
+	else
+		printf("Unknown method:%s\n", method);
+
+	return ret;
+}
+
Index: libzcfg_fe_dal-1.0/security/firewall/zcfg_fe_dal_firewall_generic.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ libzcfg_fe_dal-1.0/security/firewall/zcfg_fe_dal_firewall_generic.c	2016-10-05 11:09:43.723255900 +0800
@@ -0,0 +1,237 @@
+#include <ctype.h>
+#include <json/json.h>
+//#include <json/json_object.h>
+#include <time.h>
+
+#include "zcfg_common.h"
+#include "zcfg_fe_rdm_string.h"
+#include "zcfg_fe_rdm_struct.h"
+#include "zcfg_rdm_oid.h"
+#include "zcfg_rdm_obj.h"
+#include "zcfg_debug.h"
+//#include "zcfg_eid.h"
+#include "zcfg_msg.h"
+#include "zcfg_fe_dal_common.h"
+
+#define LEVEL_NAME_UD "UserDefined"
+
+dal_param_t FIREWALL_param[] =
+{
+	{"initFirewall", 	dalType_boolean, 	0, 	0, 	NULL},
+	{"Firewall_Enable", 	dalType_boolean, 	0, 	0, 	NULL},
+	{"IPv4_Enable", 		dalType_boolean, 	0, 	0, 	NULL},
+	{"IPv6_Enable", 		dalType_boolean, 	0, 	0, 	NULL},
+	{"AdvancedLevel", 		dalType_string, 	0, 	0, 	NULL},
+	{"Level", 				dalType_string, 	0, 	0, 	NULL},
+	{"Config", 				dalType_string, 	0, 	0, 	NULL},
+	{"Level_Name", 			dalType_string, 	0, 	0, 	NULL},
+	{"Description", 		dalType_string, 	0, 	0, 	NULL},
+	{"Order", 				dalType_string, 	0, 	0, 	NULL},
+	{"X_ZYXEL_Enable_Firewall", dalType_boolean, 	0, 	0, 	NULL},
+	{"RSA_Telkom", 			dalType_boolean, 	0, 	0, 	NULL},
+	{"Chain_Enable", 		dalType_boolean, 	0, 	0, 	NULL},
+	{"Chain_Name", 			dalType_boolean, 	0, 	0, 	NULL},
+	{"initChain", 			dalType_boolean, 	0, 	0, 	NULL},
+	{NULL, 			0, 					0, 	0, 	NULL}
+};
+
+zcfgRet_t zcfgFeDal_Firewall_Add(struct json_object *Jobj, char *replyMsg){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	struct json_object *levelObj = NULL;
+	objIndex_t levelIid = {0};
+	const char *level = NULL;
+	const char *name = NULL;
+	const char *description = NULL;
+	int order = 0;
+
+	IID_INIT(levelIid);
+	ret = zcfgFeObjJsonAdd(RDM_OID_FIREWALL_LEVEL, &levelIid, NULL);
+	if(ret == ZCFG_SUCCESS){
+		ret = zcfgFeObjJsonGet(RDM_OID_FIREWALL_LEVEL, &levelIid, &levelObj);
+	}
+
+	if(ret == ZCFG_SUCCESS){
+		name = json_object_get_string(json_object_object_get(Jobj, "Level_Name"));
+		level = json_object_get_string(json_object_object_get(Jobj, "Level"));
+		description = json_object_get_string(json_object_object_get(Jobj, "Description"));
+		order = json_object_get_int(json_object_object_get(Jobj, "Order"));
+		
+
+		json_object_object_add(levelObj, "Order", json_object_new_int(order));
+		json_object_object_add(levelObj, "Name", json_object_new_string(name));
+		json_object_object_add(levelObj, "X_ZYXEL_DefaultConfig", json_object_new_string(level));
+		json_object_object_add(levelObj, "Description", json_object_new_string(description));
+		
+		ret = zcfgFeObjJsonSet(RDM_OID_FIREWALL_LEVEL, &levelIid, levelObj, NULL);
+	}
+
+	zcfgFeJsonObjFree(levelObj);
+	return ret;
+}
+
+zcfgRet_t setFirewallEnable(struct json_object *Jobj){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	struct json_object *firewallObj = NULL;
+	objIndex_t firewallIid = {0};
+	bool v4Enable = false;
+	bool v6Enable = false;
+	bool firewallEnable = false;
+	bool initFirewall = false;
+	const char *config = NULL;
+	const char *advancedLevel = NULL;
+	
+	
+	IID_INIT(firewallIid);
+	ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_FIREWALL, &firewallIid, &firewallObj);
+
+	if(ret == ZCFG_SUCCESS ){
+		initFirewall = json_object_get_boolean(json_object_object_get(Jobj, "initFirewall"));
+
+		if(initFirewall){
+			config = json_object_get_string(json_object_object_get(Jobj, "Config"));
+			advancedLevel = json_object_get_string(json_object_object_get(Jobj, "AdvancedLevel"));
+			json_object_object_add(firewallObj, "Config", json_object_new_string(config));
+			json_object_object_add(firewallObj, "AdvancedLevel", json_object_new_string(advancedLevel));
+		}else{
+			v4Enable = json_object_get_boolean(json_object_object_get(Jobj, "IPv4_Enable"));
+			v6Enable = json_object_get_boolean(json_object_object_get(Jobj, "IPv6_Enable"));
+			firewallEnable = json_object_get_boolean(json_object_object_get(Jobj, "Firewall_Enable"));
+			json_object_object_add(firewallObj, "IPv4_Enable", json_object_new_boolean(v4Enable));
+			json_object_object_add(firewallObj, "IPv6_Enable", json_object_new_boolean(v6Enable));
+			json_object_object_add(firewallObj, "Enable", json_object_new_boolean(firewallEnable));
+		}
+		
+		ret = zcfgFeObjJsonSet(RDM_OID_FIREWALL, &firewallIid, firewallObj, NULL);
+	}
+
+	zcfgFeJsonObjFree(firewallObj);
+	return ret;
+}
+
+
+zcfgRet_t setFirewallLevel(struct json_object *Jobj){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	struct json_object *levelObj = NULL;
+	objIndex_t levelIid = {0};
+	struct json_object *intfObj = NULL;
+	objIndex_t intfIid = {0};
+	const char *level = NULL;
+	const char *name = NULL;
+	const char *Ifname = NULL;
+	bool zyxelFirewallEnable = false;
+	bool found = false;
+	bool RSA_Telkom = false;
+
+
+	// RSA Telkom - Firewall per Interface
+	RSA_Telkom = json_object_get_boolean(json_object_object_get(Jobj, "RSA_Telkom"));
+	if(RSA_Telkom){
+		found = false;
+		zyxelFirewallEnable = json_object_get_boolean(json_object_object_get(Jobj, "X_ZYXEL_Enable_Firewall"));
+		IID_INIT(intfIid);
+		while(zcfgFeObjJsonGetNext(RDM_OID_IP_IFACE, &intfIid, &intfObj) == ZCFG_SUCCESS) {
+				Ifname = json_object_get_string(json_object_object_get(intfObj, "X_ZYXEL_IfName"));
+				if(strncmp(Ifname, "br", 2)){
+					json_object_object_add(intfObj, "X_ZYXEL_Enable_Firewall", json_object_new_boolean(zyxelFirewallEnable));
+					zcfgFeObjJsonSet(RDM_OID_IP_IFACE, &intfIid, intfObj, NULL);
+				}
+		}
+		zcfgFeJsonObjFree(intfObj);
+	}
+	
+	IID_INIT(levelIid);
+	while(zcfgFeObjJsonGetNext(RDM_OID_FIREWALL_LEVEL, &levelIid, &levelObj) == ZCFG_SUCCESS) {
+		name = json_object_get_string(json_object_object_get(levelObj, "Name"));
+		if(!strcmp(name, LEVEL_NAME_UD)){
+			found = true;
+			break;
+		}
+	}
+
+	if(found){
+		level = json_object_get_string(json_object_object_get(Jobj, "Level"));
+		json_object_object_add(levelObj, "X_ZYXEL_DefaultConfig", json_object_new_string(level));
+		ret = zcfgFeObjJsonSet(RDM_OID_FIREWALL_LEVEL, &levelIid, levelObj, NULL);
+	}
+
+	zcfgFeJsonObjFree(levelObj);
+	return ret;
+}
+
+zcfgRet_t setFirewallChain(struct json_object *Jobj){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	struct json_object *chainObj = NULL;
+	struct json_object *levelObj = NULL;
+	objIndex_t chainIid = {0};
+	objIndex_t levelIid = {0};
+	const char *name = NULL;
+	bool enable = false;
+	bool found = false;
+	char chain[32] = {0};
+	int chainIdx = 0;
+
+	IID_INIT(levelIid);
+	while(zcfgFeObjJsonGetNext(RDM_OID_FIREWALL_LEVEL, &levelIid, &levelObj) == ZCFG_SUCCESS) {
+		name = json_object_get_string(json_object_object_get(levelObj, "Name"));
+		if(!strcmp(name, LEVEL_NAME_UD)){
+			strcpy(chain, json_object_get_string(json_object_object_get(levelObj, "Chain")));
+			chainIdx = atoi(&chain[15]);
+			break;
+		}
+	}
+
+
+	IID_INIT(chainIid);
+	while(zcfgFeObjJsonGetNext(RDM_OID_FIREWALL_CHAIN, &chainIid, &chainObj) == ZCFG_SUCCESS) {
+		name = json_object_get_string(json_object_object_get(chainObj, "Name"));
+		if(chainIid.idx[0] == chainIdx){
+			found = true;
+			break;
+		}
+	}
+
+	if(found){
+		name = json_object_get_string(json_object_object_get(Jobj, "Chain_Name"));
+		enable = json_object_get_string(json_object_object_get(Jobj, "Chain_Enable"));
+		json_object_object_add(chainObj, "Name", json_object_new_string(name));
+		json_object_object_add(chainObj, "Enable", json_object_new_boolean(enable));
+		ret = zcfgFeObjJsonSet(RDM_OID_FIREWALL_CHAIN, &chainIid, chainObj, NULL);
+	}
+
+
+	zcfgFeJsonObjFree(levelObj);
+	zcfgFeJsonObjFree(chainObj);
+	return ret;
+}
+
+zcfgRet_t zcfgFeDal_Firewall_Edit(struct json_object *Jobj, char *replyMsg){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	bool initChain = false;
+
+	initChain = json_object_get_boolean(json_object_object_get(Jobj, "initChain"));
+	if(initChain){
+		setFirewallChain(Jobj);	
+		return ret;
+	}
+	
+	setFirewallEnable(Jobj);
+	setFirewallLevel(Jobj);	
+	return ret;
+}
+
+zcfgRet_t zcfgFeDalFirewall(const char *method, struct json_object *Jobj, char *replyMsg){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+
+	if(!method || !Jobj)
+		return ZCFG_INTERNAL_ERROR;
+
+	if(!strcmp(method, "PUT")) {
+		ret = zcfgFeDal_Firewall_Edit(Jobj, NULL);
+	}else if(!strcmp(method, "POST")) {
+		ret = zcfgFeDal_Firewall_Add(Jobj, NULL);
+	}else
+		printf("Unknown method:%s\n", method);
+
+	return ret;
+}
+
Index: libzcfg_fe_dal-1.0/security/firewall/zcfg_fe_dal_firewall_protocol.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ libzcfg_fe_dal-1.0/security/firewall/zcfg_fe_dal_firewall_protocol.c	2016-10-05 11:09:43.727255900 +0800
@@ -0,0 +1,177 @@
+#include <ctype.h>
+#include <json/json.h>
+#include <time.h>
+#include "zcfg_common.h"
+#include "zcfg_fe_rdm_string.h"
+#include "zcfg_fe_rdm_struct.h"
+#include "zcfg_rdm_oid.h"
+#include "zcfg_rdm_obj.h"
+#include "zcfg_debug.h"
+#include "zcfg_msg.h"
+#include "zcfg_fe_dal_common.h"
+
+dal_param_t FIREWALL_PROTOCOL_param[] =
+{
+	{"Index", 				dalType_int, 	0, 	0, 	NULL},
+	{"SourcePort", 			dalType_int, 	-1, 	65535, 	NULL},
+	{"SourcePortRangeMax", 	dalType_int, 	-1, 	65535, 	NULL},
+	{"DestPort", 			dalType_int, 	-1, 	65535, 	NULL},
+	{"DestPortRangeMax", 	dalType_int, 	-1, 	65535, 	NULL},
+	{"Name", 				dalType_string,		0,	0,	NULL},
+	{"Description", 		dalType_string,		0,	0,	NULL},
+	{"Protocol", 			dalType_int, 	0, 	255, 	NULL},
+	{"ICMPType", 			dalType_int, 	-1, 	143, 	NULL},
+	{"ICMPTypeCode", 		dalType_int, 	-1, 	4, 	NULL},
+	{NULL, 					0, 				0, 	0, 	NULL}
+};
+
+zcfgRet_t zcfgFeDal_Firewall_Protocol_Add(struct json_object *Jobj, char *replyMsg){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	struct json_object *protocolObj = NULL;
+	objIndex_t protocolIid = {0};
+	const char *name = NULL;
+	const char *description = NULL;
+	int sourceport = 0;
+	int sourcePortRangeMax = 0;
+	int destPort = 0;
+	int destPortRangeMax = 0;
+	int protocol = 0;
+	int ICMPType = 0;
+	int ICMPTypeCode = 0;
+
+	IID_INIT(protocolIid);
+	ret = zcfgFeObjJsonAdd(RDM_OID_NETWORK_SRV_GP, &protocolIid, NULL);
+	if(ret == ZCFG_SUCCESS){
+		ret = zcfgFeObjJsonGet(RDM_OID_NETWORK_SRV_GP, &protocolIid, &protocolObj);
+	}
+
+	if(ret == ZCFG_SUCCESS){
+		sourceport = json_object_get_int(json_object_object_get(Jobj, "SourcePort"));
+		sourcePortRangeMax = json_object_get_int(json_object_object_get(Jobj, "SourcePortRangeMax"));
+		destPort = json_object_get_int(json_object_object_get(Jobj, "DestPort"));
+		destPortRangeMax = json_object_get_int(json_object_object_get(Jobj, "DestPortRangeMax"));
+		protocol = json_object_get_int(json_object_object_get(Jobj, "Protocol"));
+		ICMPType = json_object_get_int(json_object_object_get(Jobj, "ICMPType"));
+		ICMPTypeCode = json_object_get_int(json_object_object_get(Jobj, "ICMPTypeCode"));
+		name = json_object_get_string(json_object_object_get(Jobj, "Name"));
+		description = json_object_get_string(json_object_object_get(Jobj, "Description"));
+
+		json_object_object_add(protocolObj, "SourcePort", json_object_new_int(sourceport));
+		json_object_object_add(protocolObj, "SourcePortRangeMax", json_object_new_int(sourcePortRangeMax));
+		json_object_object_add(protocolObj, "DestPort", json_object_new_int(destPort));
+		json_object_object_add(protocolObj, "DestPortRangeMax", json_object_new_int(destPortRangeMax));
+		json_object_object_add(protocolObj, "Protocol", json_object_new_int(protocol));
+		json_object_object_add(protocolObj, "ICMPType", json_object_new_int(ICMPType));
+		json_object_object_add(protocolObj, "ICMPTypeCode", json_object_new_int(ICMPTypeCode));
+		json_object_object_add(protocolObj, "Name", json_object_new_string(name));
+		json_object_object_add(protocolObj, "Description", json_object_new_string(description));
+		
+		ret = zcfgFeObjJsonSet(RDM_OID_NETWORK_SRV_GP, &protocolIid, protocolObj, NULL);
+	}
+
+	zcfgFeJsonObjFree(protocolObj);
+	return ret;
+}
+
+zcfgRet_t zcfgFeDal_Firewall_Protocol_Edit(struct json_object *Jobj, char *replyMsg){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	struct json_object *protocolObj = NULL;
+	objIndex_t protocolIid = {0};
+	const char *name = NULL;
+	const char *description = NULL;
+	int sourceport = 0;
+	int sourcePortRangeMax = 0;
+	int destPort = 0;
+	int destPortRangeMax = 0;
+	int protocol = 0;
+	int ICMPType = 0;
+	int ICMPTypeCode = 0;
+	int index = 0;
+	int count = 0;
+	bool found = false;
+	
+	index = json_object_get_int(json_object_object_get(Jobj, "Index"));
+
+	IID_INIT(protocolIid);
+	while(zcfgFeObjJsonGetNext(RDM_OID_NETWORK_SRV_GP, &protocolIid, &protocolObj) == ZCFG_SUCCESS) {
+		if(count == index){
+			found = true;
+			break;
+		}
+		else
+			count++;
+	}
+	
+	if(found){
+		sourceport = json_object_get_int(json_object_object_get(Jobj, "SourcePort"));
+		sourcePortRangeMax = json_object_get_int(json_object_object_get(Jobj, "SourcePortRangeMax"));
+		destPort = json_object_get_int(json_object_object_get(Jobj, "DestPort"));
+		destPortRangeMax = json_object_get_int(json_object_object_get(Jobj, "DestPortRangeMax"));
+		protocol = json_object_get_int(json_object_object_get(Jobj, "Protocol"));
+		ICMPType = json_object_get_int(json_object_object_get(Jobj, "ICMPType"));
+		ICMPTypeCode = json_object_get_int(json_object_object_get(Jobj, "ICMPTypeCode"));
+		name = json_object_get_string(json_object_object_get(Jobj, "Name"));
+		description = json_object_get_string(json_object_object_get(Jobj, "Description"));
+
+		json_object_object_add(protocolObj, "SourcePort", json_object_new_int(sourceport));
+		json_object_object_add(protocolObj, "SourcePortRangeMax", json_object_new_int(sourcePortRangeMax));
+		json_object_object_add(protocolObj, "DestPort", json_object_new_int(destPort));
+		json_object_object_add(protocolObj, "DestPortRangeMax", json_object_new_int(destPortRangeMax));
+		json_object_object_add(protocolObj, "Protocol", json_object_new_int(protocol));
+		json_object_object_add(protocolObj, "ICMPType", json_object_new_int(ICMPType));
+		json_object_object_add(protocolObj, "ICMPTypeCode", json_object_new_int(ICMPTypeCode));
+		json_object_object_add(protocolObj, "Name", json_object_new_string(name));
+		json_object_object_add(protocolObj, "Description", json_object_new_string(description));
+		
+		ret = zcfgFeObjJsonSet(RDM_OID_NETWORK_SRV_GP, &protocolIid, protocolObj, NULL);
+	}
+
+	zcfgFeJsonObjFree(protocolObj);
+	return ret;
+}
+zcfgRet_t zcfgFeDal_Firewall_Protocol_Delete(struct json_object *Jobj, char *replyMsg){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	struct json_object *protocolObj = NULL;
+	objIndex_t protocolIid = {0};
+	int index = 0;
+	int count = 0;
+	bool found = false;
+
+	index = json_object_get_int(json_object_object_get(Jobj, "Index"));
+
+	IID_INIT(protocolIid);
+	while(zcfgFeObjJsonGetNext(RDM_OID_NETWORK_SRV_GP, &protocolIid, &protocolObj) == ZCFG_SUCCESS) {
+		if(count == index){
+			found = true;
+			break;
+		}
+		else
+			count++;
+	}
+
+	if(found){
+		ret = zcfgFeObjJsonDel(RDM_OID_NETWORK_SRV_GP, &protocolIid, NULL);
+	}
+	
+	zcfgFeJsonObjFree(protocolObj);
+	return ret;
+}
+
+zcfgRet_t zcfgFeDalFirewallProtocol(const char *method, struct json_object *Jobj, char *replyMsg){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+
+	if(!method || !Jobj)
+		return ZCFG_INTERNAL_ERROR;
+
+	if(!strcmp(method, "PUT")) {
+		ret = zcfgFeDal_Firewall_Protocol_Edit(Jobj, NULL);
+	}else if(!strcmp(method, "POST")) {
+		ret = zcfgFeDal_Firewall_Protocol_Add(Jobj, NULL);
+	}else if(!strcmp(method, "DELETE")) {
+		ret = zcfgFeDal_Firewall_Protocol_Delete(Jobj, NULL);
+	}else
+		printf("Unknown method:%s\n", method);
+
+	return ret;
+}
+
Index: libzcfg_fe_dal-1.0/security/macFilter/zcfg_fe_dal_mac_filter.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ libzcfg_fe_dal-1.0/security/macFilter/zcfg_fe_dal_mac_filter.c	2016-10-05 11:09:43.731255900 +0800
@@ -0,0 +1,122 @@
+#include <ctype.h>
+#include <json/json.h>
+#include <time.h>
+#include "zcfg_common.h"
+#include "zcfg_fe_rdm_string.h"
+#include "zcfg_fe_rdm_struct.h"
+#include "zcfg_rdm_oid.h"
+#include "zcfg_rdm_obj.h"
+#include "zcfg_debug.h"
+#include "zcfg_msg.h"
+#include "zcfg_fe_dal_common.h"
+
+dal_param_t MAC_Filter_param[] =
+{
+	{"Index", 			dalType_int, 		0, 	0, 	NULL},
+	{"Filter_Enable", 			dalType_boolean, 	0, 	0, 	NULL},
+	{"Restrict", 		dalType_boolean, 	0, 	0, 	NULL},
+	{"List_Enable", 	dalType_boolean, 	0, 	0, 	NULL},
+	{"HostName", 		dalType_string, 	0, 	0, 	NULL},
+	{"MACAddress", 		dalType_string, 	0, 	0, 	NULL},
+	{NULL, 					0, 				0, 	0, 	NULL}
+};
+
+zcfgRet_t setMACFilterEnable(struct json_object *Jobj){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	struct json_object *macfilterObj = NULL;
+	struct json_object *reqObject = NULL;
+	objIndex_t macfilterIid = {0};
+	bool filterEnable = false;
+	bool restrictMode = false;
+	int reqObjIdx = 0;
+	
+	IID_INIT(macfilterIid); 
+	ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_ZY_MAC_FILTER, &macfilterIid, &macfilterObj);
+	 
+	reqObject = json_object_array_get_idx(Jobj, reqObjIdx);
+
+	
+	if(reqObject && ret == ZCFG_SUCCESS){
+		filterEnable = json_object_get_boolean(json_object_object_get(reqObject, "Filter_Enable"));
+		restrictMode = json_object_get_boolean(json_object_object_get(reqObject, "Restrict"));
+		json_object_object_add(macfilterObj, "Enable", json_object_new_boolean(filterEnable));
+		json_object_object_add(macfilterObj, "Restrict", json_object_new_boolean(restrictMode));
+			
+		zcfgFeObjJsonSet(RDM_OID_ZY_MAC_FILTER, &macfilterIid, macfilterObj, NULL);
+	}
+
+	zcfgFeJsonObjFree(macfilterObj);
+	return ret;
+}
+
+zcfgRet_t zcfgFeDal_MAC_Filter_Edit(struct json_object *Jobj, char *replyMsg){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	struct json_object *whiteListObj = NULL;
+	struct json_object *reqObject = NULL;
+	objIndex_t whiteListIid = {0};
+	int reqObjIdx = 1;
+	const char *hostName = NULL;
+	const char *MACAddress = NULL;
+	const char *action = NULL;
+	bool listEnable = false;
+	int index = 0;
+	
+	while((reqObject = json_object_array_get_idx(Jobj, reqObjIdx)) !=NULL){
+		IID_INIT(whiteListIid);
+		index = json_object_get_int(json_object_object_get(reqObject, "Index"));
+		action = json_object_get_string(json_object_object_get(reqObject, "Action"));
+		reqObjIdx++;
+		
+		if(!strcmp(action, "DELE")){
+			whiteListIid.idx[0] = index;
+			whiteListIid.level = 1;
+			ret = zcfgFeObjJsonDel(RDM_OID_ZY_MAC_FILTER_WHITE_LIST, &whiteListIid, NULL);
+			continue;
+		}else if(!strcmp(action, "ADD")){
+			ret = zcfgFeObjJsonAdd(RDM_OID_ZY_MAC_FILTER_WHITE_LIST, &whiteListIid, NULL);
+			if(ret == ZCFG_SUCCESS){
+				ret = zcfgFeObjJsonGet(RDM_OID_ZY_MAC_FILTER_WHITE_LIST, &whiteListIid, &whiteListObj);
+			}
+		}else if(!strcmp(action, "EDIT")){
+			whiteListIid.idx[0] = index;
+			whiteListIid.level = 1;
+			ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_ZY_MAC_FILTER_WHITE_LIST, &whiteListIid, &whiteListObj);
+		}else{
+			printf("Unknown action:%s\n", action);
+			ret = ZCFG_NOT_FOUND;
+		}
+
+		//set Param
+		if(ret == ZCFG_SUCCESS){
+			listEnable = json_object_get_boolean(json_object_object_get(reqObject, "List_Enable"));
+			hostName = json_object_get_string(json_object_object_get(reqObject, "HostName"));
+			MACAddress = json_object_get_string(json_object_object_get(reqObject, "MACAddress"));
+
+			json_object_object_add(whiteListObj, "Enable", json_object_new_boolean(listEnable));
+			json_object_object_add(whiteListObj, "HostName", json_object_new_string(hostName));
+			json_object_object_add(whiteListObj, "MACAddress", json_object_new_string(MACAddress));
+			zcfgFeObjJsonSet(RDM_OID_ZY_MAC_FILTER_WHITE_LIST, &whiteListIid, whiteListObj, NULL);
+		}
+	}
+	
+	zcfgFeJsonObjFree(whiteListObj);
+
+	setMACFilterEnable(Jobj);
+	return ret;
+}
+
+
+zcfgRet_t zcfgFeDalMACFilter(const char *method, struct json_object *Jobj, char *replyMsg){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+
+	if(!method || !Jobj)
+		return ZCFG_INTERNAL_ERROR;
+
+	if(!strcmp(method, "PUT")) {
+		ret = zcfgFeDal_MAC_Filter_Edit(Jobj, NULL);
+	}else
+		printf("Unknown method:%s\n", method);
+
+	return ret;
+}
+
Index: libzcfg_fe_dal-1.0/security/parentalControl/zcfg_fe_dal_parentalControl.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ libzcfg_fe_dal-1.0/security/parentalControl/zcfg_fe_dal_parentalControl.c	2016-10-05 11:09:43.751255900 +0800
@@ -0,0 +1,463 @@
+#include <ctype.h>
+#include <json/json.h>
+//#include <json/json_object.h>
+#include <time.h>
+
+#include "zcfg_common.h"
+#include "zcfg_fe_rdm_string.h"
+#include "zcfg_fe_rdm_struct.h"
+#include "zcfg_rdm_oid.h"
+#include "zcfg_rdm_obj.h"
+#include "zcfg_debug.h"
+//#include "zcfg_eid.h"
+#include "zcfg_msg.h"
+#include "zcfg_fe_dal_common.h"
+
+//#define JSON_OBJ_COPY(json_object) json_tokener_parse(json_object_to_json_string(json_object))
+
+dal_param_t PAREN_CTL_param[]={
+	//Parental Ctl Profile
+	{"pcpEnable",		dalType_boolean,	0,	0,	NULL},
+	{"pcpName",		dalType_string,	0,	0,	NULL},
+	{"WebRedirect",		dalType_boolean,	0,	0,	NULL},
+	{"ServicePolicy",		dalType_string,	0,	0,	NULL},
+	{"Type",		dalType_int,	0,	0,	NULL},
+	{"MACAddressList",		dalType_string,	0,	0,	NULL},
+	{"ScheduleRuleList",		dalType_string,	0,	0,	NULL},
+	{"URLFilter",		dalType_string,	0,	0,	NULL},
+	{"NetworkServiceList",		dalType_string,	0,	0,	NULL},
+	//Parental Ctl
+	{"PrentalCtlEnable",		dalType_boolean,	0,	0,	NULL},
+	//Schedule
+	{"Enable",		dalType_boolean,	0,	0,	NULL},
+	{"Name",		dalType_string,	0,	0,	NULL},
+	{"Description",		dalType_string,	0,	0,	NULL},
+	{"Days",		dalType_int,	0,	0,	NULL},
+	{"TimeStartHour",		dalType_int,	0,	0,	NULL},
+	{"TimeStartMin",		dalType_int,	0,	0,	NULL},
+	{"TimeStopHour",		dalType_int,	0,	0,	NULL},
+	{"TimeStopMin",		dalType_int,	0,	0,	NULL},
+	{NULL,		0,	0,	0,	NULL},
+};
+
+struct json_object *schTimeObj = NULL;
+struct json_object *parCtlObj = NULL;
+struct json_object *pcpObj = NULL;
+
+objIndex_t schTimeObjIid = {0};
+objIndex_t parCtlObjIid = {0};
+objIndex_t pcpObjIid = {0};
+
+//Parental Ctl Profile
+bool pcpEnable;
+const char* pcpName;
+bool WebRedirect;
+const char* ServicePolicy;
+int Type;
+const char* MACAddressList;
+char ScheduleRuleList[64] = {0};
+const char* URLFilter;
+const char* NetworkServiceList;
+//Parental Ctl
+bool PrentalCtlEnable;
+
+//Schedule
+bool Enable;
+const char* Name;
+const char* Description;
+int Days;
+int TimeStartHour;
+int TimeStartMin;
+int TimeStopHour;
+int TimeStopMin;
+
+char curScheduleRuleList[64] = {0};
+time_t t1, t2;
+
+zcfgRet_t setAllPcpObjects(struct json_object *Jobj){
+	
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	
+	if(schTimeObj) 
+		zcfgFeObjJsonSet(RDM_OID_SCHEDULE, &schTimeObjIid, schTimeObj, NULL);
+	if(parCtlObj)
+		zcfgFeObjJsonSet(RDM_OID_PAREN_CTL, &parCtlObjIid, parCtlObj, NULL);
+	if(pcpObj)
+		zcfgFeObjJsonSet(RDM_OID_PAREN_CTL_PROF, &pcpObjIid, pcpObj, NULL);
+		
+	return ret;
+}
+
+zcfgRet_t freeAllPcpObjects(){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+			
+	if(schTimeObj) json_object_put(schTimeObj); 
+	if(parCtlObj) json_object_put(parCtlObj);
+	if(pcpObj) json_object_put(pcpObj);
+			
+	return ret;
+}
+
+void getBasicPcpInfo(struct json_object *Jobj){
+	
+	//Parental Ctl Profile
+	pcpEnable = json_object_get_boolean(json_object_object_get(Jobj, "pcpEnable"));
+	pcpName = json_object_get_string(json_object_object_get(Jobj, "pcpName"));
+	WebRedirect = json_object_get_boolean(json_object_object_get(Jobj, "WebRedirect"));
+	ServicePolicy = json_object_get_string(json_object_object_get(Jobj, "ServicePolicy"));
+	Type = json_object_get_int(json_object_object_get(Jobj, "Type"));
+	MACAddressList = json_object_get_string(json_object_object_get(Jobj, "MACAddressList"));
+	URLFilter = json_object_get_string(json_object_object_get(Jobj, "URLFilter"));
+	NetworkServiceList = json_object_get_string(json_object_object_get(Jobj, "NetworkServiceList"));
+		
+	//Parental Ctl
+	PrentalCtlEnable = json_object_get_boolean(json_object_object_get(Jobj, "PrentalCtlEnable"));
+	
+	return;
+}
+
+void getBasicSchTimeInfo(struct json_object *Jobj){
+		
+	//Schedule
+	Enable = json_object_get_boolean(json_object_object_get(Jobj, "Enable"));
+	Name = json_object_get_string(json_object_object_get(Jobj, "Name"));
+	Description = json_object_get_string(json_object_object_get(Jobj, "Description"));
+	Days = json_object_get_int(json_object_object_get(Jobj, "Days"));
+	TimeStartHour = json_object_get_int(json_object_object_get(Jobj, "TimeStartHour"));
+	TimeStartMin = json_object_get_int(json_object_object_get(Jobj, "TimeStartMin"));
+	TimeStopHour = json_object_get_int(json_object_object_get(Jobj, "TimeStopHour"));
+	TimeStopMin = json_object_get_int(json_object_object_get(Jobj, "TimeStopMin"));
+	
+	return;
+}
+
+void initGlobalPcpObjects(){
+		
+	schTimeObj = NULL;
+	parCtlObj = NULL;
+	pcpObj = NULL;
+		
+	IID_INIT(schTimeObjIid);
+	IID_INIT(parCtlObjIid);
+	IID_INIT(pcpObjIid);
+		
+}
+
+zcfgRet_t editPcObject(struct json_object *Jobj){
+	
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	
+	if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_PAREN_CTL, &parCtlObjIid, &parCtlObj)) != ZCFG_SUCCESS) {
+			return ret;
+	}
+	if (PrentalCtlEnable)
+		json_object_object_add(parCtlObj, "Enable", json_object_new_boolean(true));
+	else
+		json_object_object_add(parCtlObj, "Enable", json_object_new_boolean(false));
+		
+	return ret;
+}
+
+zcfgRet_t addPcpObject(struct json_object *Jobj){
+		
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	struct json_object *reqSchRuleObjArray = NULL;
+	//struct json_object *reqSchRuleObj= NULL;
+	uint8_t iidIdx =0;
+	ScheduleRuleList[0] = '\0';
+	
+	reqSchRuleObjArray = json_object_object_get(Jobj, "reqSchRule");
+	for(iidIdx = 0; iidIdx < json_object_array_length(reqSchRuleObjArray); iidIdx++)
+	{
+		Name = json_object_get_string(json_object_object_get(json_object_array_get_idx(reqSchRuleObjArray, iidIdx), "Name"));
+		Description = json_object_get_string(json_object_object_get(json_object_array_get_idx(reqSchRuleObjArray, iidIdx), "Description"));
+		Days = json_object_get_int(json_object_object_get(json_object_array_get_idx(reqSchRuleObjArray, iidIdx), "Days"));
+		TimeStartHour = json_object_get_int(json_object_object_get(json_object_array_get_idx(reqSchRuleObjArray, iidIdx), "TimeStartHour"));
+		TimeStartMin = json_object_get_int(json_object_object_get(json_object_array_get_idx(reqSchRuleObjArray, iidIdx), "TimeStartMin"));
+		TimeStopHour = json_object_get_int(json_object_object_get(json_object_array_get_idx(reqSchRuleObjArray, iidIdx), "TimeStopHour"));
+		TimeStopMin = json_object_get_int(json_object_object_get(json_object_array_get_idx(reqSchRuleObjArray, iidIdx), "TimeStopMin"));
+		IID_INIT(schTimeObjIid);
+		zcfgFeObjJsonAdd(RDM_OID_SCHEDULE, &schTimeObjIid, NULL);
+		if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_SCHEDULE, &schTimeObjIid, &schTimeObj)) != ZCFG_SUCCESS) {
+			return ret;
+		}	
+		json_object_object_add(schTimeObj, "Enable", json_object_new_boolean(Enable));
+		json_object_object_add(schTimeObj, "Name", json_object_new_string(Name));
+		json_object_object_add(schTimeObj, "Description", json_object_new_string(Description));
+		json_object_object_add(schTimeObj, "Days", json_object_new_int(Days));
+		json_object_object_add(schTimeObj, "TimeStartHour", json_object_new_int(TimeStartHour));
+		json_object_object_add(schTimeObj, "TimeStartMin", json_object_new_int(TimeStartMin));		
+		json_object_object_add(schTimeObj, "TimeStopHour", json_object_new_int(TimeStopHour));
+		json_object_object_add(schTimeObj, "TimeStopMin", json_object_new_int(TimeStopMin));
+			
+		if((ret = zcfgFeObjJsonSet(RDM_OID_SCHEDULE, &schTimeObjIid, schTimeObj, NULL)) != ZCFG_SUCCESS)
+		{
+			return ret;
+		}
+			
+		char temp[20]  = {0};
+		
+		if(ScheduleRuleList[0] == '\0'){
+			sprintf(temp, "X_ZYXEL_Schedule.%d", schTimeObjIid.idx[0]);
+		}
+		else{
+			sprintf(temp, ",X_ZYXEL_Schedule.%d", schTimeObjIid.idx[0]);
+		}
+		
+		strcat(ScheduleRuleList, temp);
+		printf("line=%d seconds  string %s\n", __LINE__, ScheduleRuleList);	
+	
+	}
+	
+	IID_INIT(pcpObjIid);
+	zcfgFeObjJsonAdd(RDM_OID_PAREN_CTL_PROF, &pcpObjIid, NULL);
+	if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_PAREN_CTL_PROF, &pcpObjIid, &pcpObj)) != ZCFG_SUCCESS) {
+		return ret;
+	}
+	
+	json_object_object_add(pcpObj, "Enable", json_object_new_boolean(pcpEnable));
+	json_object_object_add(pcpObj, "Name", json_object_new_string(pcpName));
+	json_object_object_add(pcpObj, "WebRedirect", json_object_new_boolean(WebRedirect));
+	json_object_object_add(pcpObj, "ServicePolicy", json_object_new_string(ServicePolicy));
+	json_object_object_add(pcpObj, "Type", json_object_new_int(Type));
+	json_object_object_add(pcpObj, "MACAddressList", json_object_new_string(MACAddressList));
+	json_object_object_add(pcpObj, "URLFilter", json_object_new_string(URLFilter));
+	
+	if(ScheduleRuleList != NULL)
+		json_object_object_add(pcpObj, "ScheduleRuleList", json_object_new_string(ScheduleRuleList));
+	else 
+		return ret = ZCFG_INVALID_FORMAT;
+	json_object_object_add(pcpObj, "NetworkServiceList", json_object_new_string(NetworkServiceList));
+	
+	
+	return ret;
+}
+zcfgRet_t curPcpSchRuleDel(){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	
+	char* buffer = NULL;
+	buffer = strtok (curScheduleRuleList, ",");
+	
+	if ((buffer == NULL) && strstr(curScheduleRuleList, "X_ZYXEL_Schedule."))
+	{
+		printf("line=%d string %s\n", __LINE__, buffer);
+		schTimeObjIid.level = 1;
+		sscanf(curScheduleRuleList, "X_ZYXEL_Schedule.%hhu", &schTimeObjIid.idx[0]);
+		
+		zcfgFeObjJsonDel(RDM_OID_SCHEDULE, &schTimeObjIid, NULL);
+		
+	}else
+	{
+		while (buffer) {
+			printf("line=%d string %s\n", __LINE__, buffer);
+			schTimeObjIid.level = 1;
+			sscanf(buffer, "X_ZYXEL_Schedule.%hhu", &schTimeObjIid.idx[0]);
+			zcfgFeObjJsonDel(RDM_OID_SCHEDULE, &schTimeObjIid, NULL);			
+			buffer = strtok (NULL, ",");
+		}
+	}
+	return ret;
+	
+}
+zcfgRet_t editPcpObject(struct json_object *Jobj){
+		
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	struct json_object *reqSchRuleObjArray = NULL;
+	struct json_object *reqSchRuleIidArray = NULL;
+	struct json_object *pcpIidArray = NULL;
+	ScheduleRuleList[0] = '\0';
+	const char *delschRules;
+	char test[60] = {0};
+	uint8_t iidIdx =0;
+				
+	reqSchRuleObjArray = json_object_object_get(Jobj, "reqSchRule");
+	reqSchRuleIidArray = json_object_object_get(Jobj, "reqSchRuleIid");
+	
+	for(iidIdx = 0; iidIdx < json_object_array_length(reqSchRuleIidArray); iidIdx++){
+		
+		Name = json_object_get_string(json_object_object_get(json_object_array_get_idx(reqSchRuleObjArray, iidIdx), "Name"));
+		Description = json_object_get_string(json_object_object_get(json_object_array_get_idx(reqSchRuleObjArray, iidIdx), "Description"));
+		Days = json_object_get_int(json_object_object_get(json_object_array_get_idx(reqSchRuleObjArray, iidIdx), "Days"));
+		TimeStartHour = json_object_get_int(json_object_object_get(json_object_array_get_idx(reqSchRuleObjArray, iidIdx), "TimeStartHour"));
+		TimeStartMin = json_object_get_int(json_object_object_get(json_object_array_get_idx(reqSchRuleObjArray, iidIdx), "TimeStartMin"));
+		TimeStopHour = json_object_get_int(json_object_object_get(json_object_array_get_idx(reqSchRuleObjArray, iidIdx), "TimeStopHour"));
+		TimeStopMin = json_object_get_int(json_object_object_get(json_object_array_get_idx(reqSchRuleObjArray, iidIdx), "TimeStopMin"));
+		
+		schTimeObjIid.idx[0] = json_object_get_int( json_object_array_get_idx(reqSchRuleIidArray, iidIdx));
+		schTimeObjIid.level = 1;
+		if(schTimeObjIid.idx[0] == 0)
+		{
+			IID_INIT(schTimeObjIid);
+			zcfgFeObjJsonAdd(RDM_OID_SCHEDULE, &schTimeObjIid, NULL);
+		}
+		
+		if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_SCHEDULE, &schTimeObjIid, &schTimeObj)) != ZCFG_SUCCESS) {
+			return ret;
+		}
+			
+		json_object_object_add(schTimeObj, "Enable", json_object_new_boolean(Enable));
+		json_object_object_add(schTimeObj, "Name", json_object_new_string(Name));
+		json_object_object_add(schTimeObj, "Description", json_object_new_string(Description));
+		json_object_object_add(schTimeObj, "Days", json_object_new_int(Days));
+		json_object_object_add(schTimeObj, "TimeStartHour", json_object_new_int(TimeStartHour));
+		json_object_object_add(schTimeObj, "TimeStartMin", json_object_new_int(TimeStartMin));		
+		json_object_object_add(schTimeObj, "TimeStopHour", json_object_new_int(TimeStopHour));
+		json_object_object_add(schTimeObj, "TimeStopMin", json_object_new_int(TimeStopMin));
+			
+		if((ret = zcfgFeObjJsonSet(RDM_OID_SCHEDULE, &schTimeObjIid, schTimeObj, NULL)) != ZCFG_SUCCESS)
+		{
+			return ret;
+		}
+			
+		char temp[20]  = {0};
+		if(ScheduleRuleList[0] == '\0'){
+			snprintf(temp, sizeof(temp), "X_ZYXEL_Schedule.%d", schTimeObjIid.idx[0]);
+		}
+		else{
+			snprintf(temp, sizeof(temp), ",X_ZYXEL_Schedule.%d", schTimeObjIid.idx[0]);
+		}
+			
+        strcat(ScheduleRuleList, temp);
+			
+	}
+	
+	pcpIidArray = json_object_object_get(Jobj, "iid");
+	for(iidIdx = 0; iidIdx < json_object_array_length(pcpIidArray); iidIdx++){
+		pcpObjIid.idx[iidIdx] = json_object_get_int( json_object_array_get_idx(pcpIidArray, iidIdx));
+		if(pcpObjIid.idx[iidIdx] != 0)
+			pcpObjIid.level = iidIdx+1;
+	}
+	if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_PAREN_CTL_PROF, &pcpObjIid, &pcpObj)) != ZCFG_SUCCESS) {
+		return ret;
+	}
+	
+	strcpy(curScheduleRuleList, json_object_get_string(json_object_object_get(pcpObj, "ScheduleRuleList")));		
+	json_object_object_add(pcpObj, "Enable", json_object_new_boolean(pcpEnable));
+	json_object_object_add(pcpObj, "Name", json_object_new_string(pcpName));
+	json_object_object_add(pcpObj, "WebRedirect", json_object_new_boolean(WebRedirect));
+	json_object_object_add(pcpObj, "ServicePolicy", json_object_new_string(ServicePolicy));
+	json_object_object_add(pcpObj, "Type", json_object_new_int(Type));
+	json_object_object_add(pcpObj, "MACAddressList", json_object_new_string(MACAddressList));
+	json_object_object_add(pcpObj, "URLFilter", json_object_new_string(URLFilter));
+	
+	if(ScheduleRuleList != NULL)
+		json_object_object_add(pcpObj, "ScheduleRuleList", json_object_new_string(ScheduleRuleList));
+	else 
+		return ret = ZCFG_INVALID_FORMAT;
+	json_object_object_add(pcpObj, "NetworkServiceList", json_object_new_string(NetworkServiceList));
+	
+	zcfgFeObjJsonSet(RDM_OID_PAREN_CTL_PROF, &pcpObjIid, pcpObj, NULL);
+	
+	curPcpSchRuleDel();
+	
+	return ret;
+}
+zcfgRet_t zcfgFeDalParentCtlEdit(struct json_object *Jobj, char *replyMsg){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+		
+	initGlobalPcpObjects();
+	getBasicPcpInfo(Jobj);
+			
+	t2 = time(NULL);
+	
+	if(pcpName != NULL)
+	{
+		if((ret = editPcpObject(Jobj)) != ZCFG_SUCCESS)
+			goto dalPcp_edit_fail;
+	}
+	else 
+	{
+		if((ret = editPcObject(Jobj)) != ZCFG_SUCCESS)
+			goto dalPcp_edit_fail;
+	}
+	
+	t2 = time(NULL);
+	
+	setAllPcpObjects(Jobj);
+	
+dalPcp_edit_fail:
+	freeAllPcpObjects();
+			
+	return ret;
+}
+zcfgRet_t zcfgFeDalParentCtlAdd(struct json_object *Jobj, char *replyMsg)
+{
+	zcfgRet_t ret = ZCFG_SUCCESS;
+		
+	initGlobalPcpObjects();
+	getBasicPcpInfo(Jobj);
+	
+	t2 = time(NULL);
+	
+	if((ret = addPcpObject(Jobj)) != ZCFG_SUCCESS)
+			goto dalPcp_add_fail;
+	t2 = time(NULL);
+	
+	setAllPcpObjects(Jobj);
+	
+dalPcp_add_fail:
+	freeAllPcpObjects();
+			
+	return ret;
+}
+zcfgRet_t zcfgFeDalParentCtlDelete(struct json_object *Jobj, char *replyMsg)
+{
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	struct json_object *pctlObjIidArray = NULL;
+	uint8_t iidIdx =0;
+	const char * scheduleRules = NULL;
+	char* buffer = NULL;
+	
+	pctlObjIidArray = json_object_object_get(Jobj, "PctlObjIid");
+	for(iidIdx=0; iidIdx < json_object_array_length(pctlObjIidArray); iidIdx++){
+		pcpObjIid.idx[iidIdx] = json_object_get_int( json_object_array_get_idx(pctlObjIidArray, iidIdx));
+		if(pcpObjIid.idx[iidIdx] != 0)
+			pcpObjIid.level = iidIdx+1;
+	}
+	
+	if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_PAREN_CTL_PROF, &pcpObjIid, &pcpObj)) != ZCFG_SUCCESS)
+		return ret;
+	scheduleRules = json_object_get_string(json_object_object_get(pcpObj, "ScheduleRuleList"));
+	
+	if((ret = zcfgFeObjJsonDel(RDM_OID_PAREN_CTL_PROF, &pcpObjIid, NULL)) != ZCFG_SUCCESS)
+		return ret;
+	
+	buffer = strtok (scheduleRules, ",");
+	if ((buffer == NULL) && strstr(scheduleRules, "X_ZYXEL_Schedule."))
+	{
+		schTimeObjIid.level = 1;
+		sscanf(ScheduleRuleList, "X_ZYXEL_Schedule.%hhu", &schTimeObjIid.idx[0]);
+		if((ret = zcfgFeObjJsonDel(RDM_OID_SCHEDULE, &schTimeObjIid, NULL)) != ZCFG_SUCCESS)
+			return ret;
+	}else
+	{
+		while (buffer) {
+			printf ("%s\n", buffer);
+			schTimeObjIid.level = 1;
+			sscanf(buffer, "X_ZYXEL_Schedule.%hhu", &schTimeObjIid.idx[0]);
+			if((ret = zcfgFeObjJsonDel(RDM_OID_SCHEDULE, &schTimeObjIid, NULL)) != ZCFG_SUCCESS)
+				return ret;			
+			buffer = strtok (NULL, ",");
+		}
+	}
+	
+	return ret;
+}
+zcfgRet_t zcfgFeDalParentCtl(const char *method, struct json_object *Jobj, char *replyMsg){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	
+	t1 = time(NULL);
+		
+	if(!strcmp(method, "POST"))
+		ret = zcfgFeDalParentCtlAdd(Jobj, NULL);
+	else if(!strcmp(method, "DELETE"))
+	   ret = zcfgFeDalParentCtlDelete(Jobj, NULL);
+	else if(!strcmp(method, "PUT"))
+		ret = zcfgFeDalParentCtlEdit(Jobj, NULL);
+	else
+		printf("Unknown method:%s\n", method);
+		
+	t2 = time(NULL);
+		
+	return ret;
+}
\ No newline at end of file
Index: libzcfg_fe_dal-1.0/security/schedulerRule/zcfg_fe_dal_schedulerRule.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ libzcfg_fe_dal-1.0/security/schedulerRule/zcfg_fe_dal_schedulerRule.c	2016-10-05 11:09:43.755255900 +0800
@@ -0,0 +1,141 @@
+
+#include <json/json.h>
+
+#include "zcfg_common.h"
+#include "zcfg_rdm_oid.h"
+#include "zcfg_rdm_obj.h"
+#include "zcfg_debug.h"
+#include "zcfg_fe_rdm_string.h"
+#include "zcfg_fe_dal_common.h"
+
+#define CWMP_SOAP_MSG_DEBUG (1 << 1)
+
+dal_param_t SCHEDULE_param[] =
+{
+	//Schedule
+	{"Enable",		dalType_boolean,	0,	0,	NULL},
+	{"Name",		dalType_string,	0,	0,	NULL},
+	{"Description",		dalType_string,	0,	0,	NULL},
+	{"Days",		dalType_int,	0,	0,	NULL},
+	{"TimeStartHour",		dalType_int,	0,	0,	NULL},
+	{"TimeStartMin",		dalType_int,	0,	0,	NULL},
+	{"TimeStopHour",		dalType_int,	0,	0,	NULL},
+	{"TimeStopMin",		dalType_int,	0,	0,	NULL},		
+	{NULL,		0,	0,	0,	NULL}
+};
+
+zcfgRet_t zcfgFeDalScheduleAdd(struct json_object *Jobj, char *replyMsg)
+{
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	const char *paraName;
+	objIndex_t objIid;
+	struct json_object *ScheduleJobj = NULL;
+	int n=0;
+	paraName = (const char *)SCHEDULE_param[n++].paraName;
+
+	IID_INIT(objIid);
+	zcfgFeObjJsonAdd(RDM_OID_SCHEDULE, &objIid, NULL);
+	if((ret = zcfgFeObjJsonGet(RDM_OID_SCHEDULE, &objIid, &ScheduleJobj)) != ZCFG_SUCCESS) {
+		printf("%s: Object retrieve fail\n", __FUNCTION__);
+		return ret;
+	}	
+	while(paraName){
+		struct json_object *paramValue = json_object_object_get(Jobj, paraName);
+		if(!paramValue) {
+			printf("function:%s, Line =%d\n", __FUNCTION__,__LINE__);
+			paraName = (const char *)SCHEDULE_param[n++].paraName;
+			continue;
+		}
+		json_object_object_add(ScheduleJobj, paraName, JSON_OBJ_COPY(paramValue));
+		paraName = (const char *)SCHEDULE_param[n++].paraName;
+	}
+
+	if((ret = zcfgFeObjJsonSet(RDM_OID_SCHEDULE, &objIid, ScheduleJobj, NULL)) != ZCFG_SUCCESS)
+	{
+		return ret;
+	}
+	
+	json_object_put(ScheduleJobj);
+	return ret;
+}
+zcfgRet_t zcfgFeDalScheduleEdit(struct json_object *Jobj, char *replyMsg)
+{
+
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	const char *paraName;
+	objIndex_t objIid;
+	struct json_object *ScheduleJobj = NULL;
+	int paramModified = 0, n = 0;
+	struct json_object *iidArray = NULL;
+	uint8_t iidIdx =0;
+	paraName = (const char *)SCHEDULE_param[n++].paraName;
+	
+	//IID_INIT(objIid);
+	iidArray = json_object_object_get(Jobj, "iid");
+	for(iidIdx=0;iidIdx<6;iidIdx++){
+		objIid.idx[iidIdx] = json_object_get_int( json_object_array_get_idx(iidArray, iidIdx));
+		if(objIid.idx[iidIdx] != 0)
+			objIid.level = iidIdx+1;
+	}
+	if((ret = zcfgFeObjJsonGet(RDM_OID_SCHEDULE, &objIid, &ScheduleJobj)) != ZCFG_SUCCESS) {
+		return ret;
+	}
+	while(paraName){
+		struct json_object *paramValue = json_object_object_get(Jobj, paraName);
+		if(!paramValue) {
+			paraName = (const char *)SCHEDULE_param[n++].paraName;
+			continue;
+		}
+		json_object_object_add(ScheduleJobj, paraName, JSON_OBJ_COPY(paramValue));
+		paramModified = 1;				
+		paraName = (const char *)SCHEDULE_param[n++].paraName;
+	}
+
+	if(paramModified) {
+		if((ret = zcfgFeObjJsonSet(RDM_OID_SCHEDULE, &objIid, ScheduleJobj, NULL)) != ZCFG_SUCCESS);
+	}
+	json_object_put(ScheduleJobj);
+	return ret;
+}
+zcfgRet_t zcfgFeDalScheduleDelete(struct json_object *Jobj, char *replyMsg)
+{
+	
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	objIndex_t objIid;
+	struct json_object *iidArray = NULL;
+	uint8_t iidIdx =0;
+
+	
+	//IID_INIT(objIid);
+	iidArray = json_object_object_get(Jobj, "iid");
+	
+	for(iidIdx=0;iidIdx<6;iidIdx++){
+		objIid.idx[iidIdx] = json_object_get_int( json_object_array_get_idx(iidArray, iidIdx));
+		if(objIid.idx[iidIdx] != 0)
+			objIid.level = iidIdx+1;
+	}
+	
+	zcfgFeObjJsonDel(RDM_OID_SCHEDULE, &objIid, NULL);
+	
+	return ret;
+	
+}
+zcfgRet_t zcfgFeDalSchedule(const char *method, struct json_object *Jobj, char *replyMsg)
+{
+	zcfgRet_t ret = ZCFG_SUCCESS;
+
+	if(!method || !Jobj)
+		return ZCFG_INTERNAL_ERROR;
+
+	if(!strcmp(method, "PUT")) {
+		ret = zcfgFeDalScheduleEdit(Jobj, NULL);
+	}
+	else if(!strcmp(method, "POST")) {
+		ret = zcfgFeDalScheduleAdd(Jobj, NULL);
+	}
+	else if(!strcmp(method, "DELETE")) {
+		ret = zcfgFeDalScheduleDelete(Jobj, NULL);
+	}
+
+	return ret;
+}
Index: libzcfg_fe_dal-1.0/zcfg_fe_dal.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/zcfg_fe_dal.c	2016-11-08 15:59:08.394007729 +0800
+++ libzcfg_fe_dal-1.0/zcfg_fe_dal.c	2016-11-08 16:06:38.456813000 +0800
@@ -31,7 +31,12 @@
 extern dal_param_t STATIC_DHCP_param[];
 extern dal_param_t VLANGRP_param[];
 extern dal_param_t IGMPMLD_param[];
+extern dal_param_t FIREWALL_param[];
+extern dal_param_t FIREWALL_DOS_param[];
+extern dal_param_t FIREWALL_PROTOCOL_param[];
+extern dal_param_t FIREWALL_ACL_param[];
 extern dal_param_t WIFI_GENERAL_param[];
+extern dal_param_t MAC_Filter_param[];
 extern dal_param_t WIFI_MACFILTER_param[];
 extern dal_param_t WIFI_WPS_param[];
 extern dal_param_t WIFI_WMM_param[];
@@ -51,6 +56,10 @@
 extern dal_param_t LOG_SETTING_param[];
 extern dal_param_t USB_FILESHARING_param[];
 extern dal_param_t USB_MEDIASERVER_param[];
+extern dal_param_t PAREN_CTL_param[];
+extern dal_param_t SCHEDULE_param[];
+extern dal_param_t DEV_SEC_CERT_param[];
+
 extern zcfgRet_t zcfgFeDalWan(const char *method, struct json_object *Jobj, char *replyMsg);
 extern zcfgRet_t zcfgFeDalMgmt(const char *method, struct json_object *Jobj, char *replyMsg);
 extern zcfgRet_t zcfgFeDalDnsEntry(const char *method, struct json_object *Jobj, char *replyMsg);
@@ -75,7 +84,12 @@
 extern zcfgRet_t zcfgFeDalStaticDHCP(const char *method, struct json_object *Jobj, char *replyMsg);
 extern zcfgRet_t zcfgFeDalVlanGroup(const char *method, struct json_object *Jobj, char *replyMsg);
 extern zcfgRet_t zcfgFeDalIGMPMLD(const char *method, struct json_object *Jobj, char *replyMsg);
+extern zcfgRet_t zcfgFeDalFirewall(const char *method, struct json_object *Jobj, char *replyMsg);
+extern zcfgRet_t zcfgFeDalFirewallDos(const char *method, struct json_object *Jobj, char *replyMsg);
+extern zcfgRet_t zcfgFeDalFirewallProtocol(const char *method, struct json_object *Jobj, char *replyMsg);
+extern zcfgRet_t zcfgFeDalFirewallACL(const char *method, struct json_object *Jobj, char *replyMsg);
 extern zcfgRet_t zcfgFeDalWifiGeneral(const char *method, struct json_object *Jobj, char *replyMsg);
+extern zcfgRet_t zcfgFeDalMACFilter(const char *method, struct json_object *Jobj, char *replyMsg);
 extern zcfgRet_t zcfgFeDalWifiMACFilter(const char *method, struct json_object *Jobj, char *replyMsg);
 extern zcfgRet_t zcfgFeDalWifiWps(const char *method, struct json_object *Jobj, char *replyMsg);
 extern zcfgRet_t zcfgFeDalWifiWmm(const char *method, struct json_object *Jobj, char *replyMsg);
@@ -95,6 +109,9 @@
 extern zcfgRet_t zcfgFeDalLogSetting(const char *method, struct json_object *Jobj, char *replyMsg);
 extern zcfgRet_t zcfgFeDalUsbFilesharing(const char *method, struct json_object *Jobj, char *replyMsg);
 extern zcfgRet_t zcfgFeDalUsbMediaserver(const char *method, struct json_object *Jobj, char *replyMsg);
+extern zcfgRet_t zcfgFeDalParentCtl(const char *method, struct json_object *Jobj, char *replyMsg);
+extern zcfgRet_t zcfgFeDalSchedule(const char *method, struct json_object *Jobj, char *replyMsg);
+extern zcfgRet_t zcfgFeDalDevSecCert(const char *method, struct json_object *Jobj, char *replyMsg);
 
 typedef struct dal_handler_s {
 	char				*name;
@@ -128,7 +145,12 @@
 {"STATICDHCP",		STATIC_DHCP_param,	zcfgFeDalStaticDHCP},
 {"VLANGRP", 		VLANGRP_param,		zcfgFeDalVlanGroup},
 {"IGMPMLD", 		IGMPMLD_param,		zcfgFeDalIGMPMLD},
+{"FIREWALL",		FIREWALL_param, 	zcfgFeDalFirewall},
+{"DOS", 			FIREWALL_DOS_param, zcfgFeDalFirewallDos},
+{"PROTOCOL",		FIREWALL_PROTOCOL_param, zcfgFeDalFirewallProtocol},
+{"ACL", 			FIREWALL_ACL_param, zcfgFeDalFirewallACL},
 {"WIFI_GENERAL",	WIFI_GENERAL_param,	zcfgFeDalWifiGeneral},
+{"MACFILTER",		MAC_Filter_param,	zcfgFeDalMACFilter},
 {"WIFI_MACFILTER",	WIFI_MACFILTER_param,	zcfgFeDalWifiMACFilter},
 {"WIFI_WPS",		WIFI_WPS_param,		zcfgFeDalWifiWps},
 {"WIFI_WMM",		WIFI_WMM_param,		zcfgFeDalWifiWmm},
@@ -148,6 +170,9 @@
 {"LOGSETTING",		LOG_SETTING_param,	zcfgFeDalLogSetting},
 {"USB_FILESHARING", 		USB_FILESHARING_param,	zcfgFeDalUsbFilesharing},
 {"USB_MEDIASERVER", 		USB_MEDIASERVER_param,	zcfgFeDalUsbMediaserver},
+{"PAREN_CTL", 		PAREN_CTL_param,	zcfgFeDalParentCtl},
+{"SCHEDULE", 		SCHEDULE_param,	zcfgFeDalSchedule},
+{"DEV_SEC_CERT", 		DEV_SEC_CERT_param,	zcfgFeDalDevSecCert},
 {NULL,				NULL,				NULL}
 };
 
