Index: libzcfg_fe_dal-1.0/network/wireless/zcfg_fe_dal_wifi_general.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/network/wireless/zcfg_fe_dal_wifi_general.c	2017-02-06 17:26:45.290208452 +0800
+++ libzcfg_fe_dal-1.0/network/wireless/zcfg_fe_dal_wifi_general.c	2017-02-06 17:26:47.698208472 +0800
@@ -13,58 +13,60 @@
 #include "zcfg_msg.h"
 #include "zcfg_fe_dal_common.h"
 
+
 //#define JSON_OBJ_COPY(json_object) json_tokener_parse(json_object_to_json_string(json_object))
 
 dal_param_t WIFI_GENERAL_param[]={
 	//WiFi SSID
-	{"wlEnable",		dalType_boolean,	0,	0,	NULL},
-	{"SSID",		dalType_string, 0,	0,	NULL},
-	{"X_ZYXEL_Multicast_Fwd",		dalType_boolean,	0,	0,	NULL},
-	{"upRate",		dalType_int,	0,	0,	NULL},
-	{"downRate",		dalType_int,	0,	0,	NULL},
+	{"Index",				dalType_int,		0,	0,	NULL,		NULL,			dal_Edit},
+	{"wlEnable",			dalType_boolean,	0,	0,	NULL,		NULL,			0},
+	{"SSID",				dalType_string,	 	0,	0,	NULL,		NULL,			0},
+	{"X_ZYXEL_Multicast_Fwd",dalType_boolean,	0,	0,	NULL,		NULL,			dalcmd_Forbid},
+	{"upRate",				dalType_int,		0,	0,	NULL,		NULL,			dalcmd_Forbid},
+	{"downRate",			dalType_int,		0,	0,	NULL,		NULL,			dalcmd_Forbid},
 	//WiFi Radio
-	{"div_wifiAdvance",		dalType_boolean,	0,	0,	NULL},
-	{"bandwidth",		dalType_int,	0,	0,	NULL},
-	{"extcha",		dalType_int,	0,	0,	NULL},
-	{"channel",		dalType_int,	0,	0,	NULL},
+	{"div_wifiAdvance",		dalType_boolean,	0,	0,	NULL,		NULL,			dalcmd_Forbid},
+	{"bandwidth",			dalType_int,		0,	0,	NULL,		NULL,			0},
+	{"extcha",				dalType_int,		0,	0,	NULL,		NULL,			dalcmd_Forbid},
+	{"channel",				dalType_int,		0,	0,	NULL,		NULL,			0},
 	//WiFi Access Point
-	{"MaxAssociatedDevices",		dalType_int,	0,	0,	NULL},
-	{"wlHide",		dalType_boolean, 0,	0,	NULL},
-	{"wlGwMode",		dalType_string, 0,	0,	NULL},
-	{"wlEnableGuest",		dalType_boolean, 0,	0,	NULL},
+	{"MaxAssociatedDevices",dalType_int,		1,	32,	NULL,		NULL,			0},
+	{"wlHide",				dalType_boolean, 	0,	0,	NULL,		NULL,			dalcmd_Forbid},
+	{"wlGwMode",			dalType_string, 	0,	0,	NULL,		NULL,			dalcmd_Forbid},
+	{"wlEnableGuest",		dalType_boolean, 	0,	0,	NULL,		NULL,			dalcmd_Forbid},
 	//WiFi Access Point Sec
-	{"secMode",		dalType_int,	0,	0,	NULL},
-	{"wep",		dalType_string,	0,	0,	NULL},
-	{"WEPKey",		dalType_string, 0,	0,	NULL},
-	{"X_ZYXEL_AutoGenWepKey",		dalType_boolean,	0,	0,	NULL},
-	{"X_ZYXEL_WEPKey2",		dalType_string, 0,	0,	NULL},
-	{"X_ZYXEL_WEPKey3",		dalType_string, 0,	0,	NULL},
-	{"X_ZYXEL_WEPKey4",		dalType_string, 0,	0,	NULL},
-	{"X_ZYXEL_WEP64Key1",		dalType_string, 0,	0,	NULL},
-	{"X_ZYXEL_WEP64Key2",		dalType_string, 0,	0,	NULL},
-	{"X_ZYXEL_WEP64Key3",		dalType_string, 0,	0,	NULL},
-	{"X_ZYXEL_WEP64Key4",		dalType_string, 0,	0,	NULL},
-	{"wepid",		dalType_string,	0,	0,	NULL},
-	{"wpaMode",		dalType_string,	0,	0,	NULL},
-	{"X_ZYXEL_AutoGenPSK",		dalType_boolean,	0,	0,	NULL},
-	{"psk_value",			dalType_string, 0,	0,	NULL},
-	{"RekeyingInterval",		dalType_int,	0,	0,	NULL},
-	{"RadiusServerIPAddr",		dalType_string, 0,	0,	NULL},
-	{"RadiusServerPort",		dalType_int,	0,	0,	NULL},
-	{"RadiusSecret",		dalType_string, 0,	0,	NULL},
-	{"X_ZYXEL_Preauth",		dalType_boolean,	0,	0,	NULL},
-	{"X_ZYXEL_ReauthInterval",		dalType_int,	0,	0,	NULL},
-	{"encryp",		dalType_string, 0,	0,	NULL},
-	{"X_ZYXEL_PassphraseType",		dalType_int,	0,	0,	NULL},
+	{"secMode",				dalType_int,		0,	0,	NULL,		NULL,			dalcmd_Forbid},
+	{"wep",					dalType_string,		0,	0,	NULL,		NULL,			dalcmd_Forbid},
+	{"WEPKey",				dalType_string, 	0,	0,	NULL,		NULL,			dalcmd_Forbid},
+	{"X_ZYXEL_AutoGenWepKey",dalType_boolean,	0,	0,	NULL,		NULL,			dalcmd_Forbid},
+	{"X_ZYXEL_WEPKey2",		dalType_string, 	0,	0,	NULL,		NULL,			dalcmd_Forbid},
+	{"X_ZYXEL_WEPKey3",		dalType_string, 	0,	0,	NULL,		NULL,			dalcmd_Forbid},
+	{"X_ZYXEL_WEPKey4",		dalType_string, 	0,	0,	NULL,		NULL,			dalcmd_Forbid},
+	{"X_ZYXEL_WEP64Key1",	dalType_string, 	0,	0,	NULL,		NULL,			dalcmd_Forbid},
+	{"X_ZYXEL_WEP64Key2",	dalType_string, 	0,	0,	NULL,		NULL,			dalcmd_Forbid},
+	{"X_ZYXEL_WEP64Key3",	dalType_string, 	0,	0,	NULL,		NULL,			dalcmd_Forbid},
+	{"X_ZYXEL_WEP64Key4",	dalType_string, 	0,	0,	NULL,		NULL,			dalcmd_Forbid},
+	{"wepid",				dalType_string,		0,	0,	NULL,		NULL,			dalcmd_Forbid},
+	{"wpaMode",				dalType_string,		0,	0,	NULL,		NULL,			dalcmd_Forbid},
+	{"X_ZYXEL_AutoGenPSK",	dalType_boolean,	0,	0,	NULL,		NULL,			dalcmd_Forbid},
+	{"psk_value",			dalType_string, 	0,	0,	NULL,		NULL,			dalcmd_Forbid},
+	{"RekeyingInterval",	dalType_int,		0,	0,	NULL,		NULL,			dalcmd_Forbid},
+	{"RadiusServerIPAddr",	dalType_string, 	0,	0,	NULL,		NULL,			dalcmd_Forbid},
+	{"RadiusServerPort",	dalType_int,		0,	0,	NULL,		NULL,			dalcmd_Forbid},
+	{"RadiusSecret",		dalType_string, 	0,	0,	NULL,		NULL,			dalcmd_Forbid},
+	{"X_ZYXEL_Preauth",		dalType_boolean,	0,	0,	NULL,		NULL,			dalcmd_Forbid},
+	{"X_ZYXEL_ReauthInterval",dalType_int,		0,	0,	NULL,		NULL,			dalcmd_Forbid},
+	{"encryp",				dalType_string, 	0,	0,	NULL,		NULL,			dalcmd_Forbid},
+	{"X_ZYXEL_PassphraseType",dalType_int,		0,	0,	NULL,		NULL,			dalcmd_Forbid},
 	//DHCPV4 SRV SUBNET
-	{"div_wifiSubnet",		dalType_boolean,	0,	0,	NULL},
-	{"wlSubnetState",		dalType_boolean,	0,	0,	NULL},
-	{"Interface",		dalType_string, 0,	0,	NULL},
-	{"MinAddress",		dalType_string, 0,	0,	NULL},
-	{"MaxAddress",		dalType_string, 0,	0,	NULL},
-	{"SubnetMask",		dalType_string, 0,	0,	NULL},
-	{"LANIP",		dalType_string, 0,	0,	NULL},
-	{"subnetObjAction",		dalType_string, 0,	0,	NULL},
+	{"div_wifiSubnet",		dalType_boolean,	0,	0,	NULL,		NULL,			dalcmd_Forbid},
+	{"wlSubnetState",		dalType_boolean,	0,	0,	NULL,		NULL,			dalcmd_Forbid},
+	{"Interface",			dalType_string, 	0,	0,	NULL,		NULL,			dalcmd_Forbid},
+	{"MinAddress",			dalType_string, 	0,	0,	NULL,		NULL,			dalcmd_Forbid},
+	{"MaxAddress",			dalType_string, 	0,	0,	NULL,		NULL,			dalcmd_Forbid},
+	{"SubnetMask",			dalType_string, 	0,	0,	NULL,		NULL,			dalcmd_Forbid},
+	{"LANIP",				dalType_string, 	0,	0,	NULL,		NULL,			dalcmd_Forbid},
+	{"subnetObjAction",		dalType_string, 	0,	0,	NULL,		NULL,			dalcmd_Forbid},
 	{NULL,		0,	0,	0,	NULL},
 };
 
@@ -156,6 +158,114 @@
 
 }
 
+zcfgRet_t zcfgFeDalWifiGeneralGet(struct json_object *Jarray, char *replyMsg){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	objIndex_t iid;
+	struct json_object *obj = NULL;
+	struct json_object *obj2 = NULL;
+	char path[64] = {0};
+	const char *RadioReference = NULL;
+	const char *SSIDReference = NULL;
+	struct json_object *RadioMultiObj = NULL;
+	struct json_object *AccessPointMultiObj = NULL;
+	objIndex_t radioIid;
+	struct json_object *pramJobj = NULL;
+
+	RadioMultiObj = json_object_new_object();
+	IID_INIT(iid);
+	while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_WIFI_RADIO, &iid, &obj) == ZCFG_SUCCESS) {
+		sprintf(path, "WiFi.Radio.%u", iid.idx[0]);
+		json_object_object_add(RadioMultiObj, path, obj);
+	}
+
+	AccessPointMultiObj = json_object_new_object();
+	IID_INIT(iid);
+	while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_WIFI_ACCESS_POINT, &iid, &obj) == ZCFG_SUCCESS) {
+		//sprintf(path, "WiFi.AccessPoint.%u", iid.idx[0]);
+		SSIDReference = json_object_get_string(json_object_object_get(obj, "SSIDReference"));
+		json_object_object_add(AccessPointMultiObj, SSIDReference, obj);
+
+		if(zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_ACCESS_POINT_SEC, &iid, &obj2)== ZCFG_SUCCESS){
+			json_object_object_add(obj, "Security", obj2);
+		}
+	}
+
+	IID_INIT(iid);
+	while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_WIFI_SSID, &iid, &obj) == ZCFG_SUCCESS) {
+		pramJobj = json_object_new_object();
+		json_object_object_add(pramJobj, "Index", json_object_new_int(iid.idx[0]));
+		json_object_object_add(pramJobj, "wlEnable", JSON_OBJ_COPY(json_object_object_get(obj, "Enable")));
+		json_object_object_add(pramJobj, "SSID", JSON_OBJ_COPY(json_object_object_get(obj, "SSID")));
+
+		RadioReference = json_object_get_string(json_object_object_get(obj, "LowerLayers"));
+		obj2 = json_object_object_get(RadioMultiObj, RadioReference);
+		if(obj2){
+			json_object_object_add(pramJobj, "band", JSON_OBJ_COPY(json_object_object_get(obj2, "OperatingFrequencyBand")));
+			json_object_object_add(pramJobj, "AutoChannelEnable", JSON_OBJ_COPY(json_object_object_get(obj2, "AutoChannelEnable")));
+			json_object_object_add(pramJobj, "channel", JSON_OBJ_COPY(json_object_object_get(obj2, "Channel")));
+			json_object_object_add(pramJobj, "bandwidth", JSON_OBJ_COPY(json_object_object_get(obj2, "OperatingChannelBandwidth")));
+		}
+
+		//json_object_object_add(pramJobj, "SecurityMode", json_object_new_string("None"));
+		sprintf(path, "WiFi.SSID.%u", iid.idx[0]);
+		SSIDReference = (const char*)path;
+		obj2 = json_object_object_get(AccessPointMultiObj, SSIDReference);
+		if(obj2){
+			json_object_object_add(pramJobj, "MaxAssociatedDevices", JSON_OBJ_COPY(json_object_object_get(obj2, "MaxAssociatedDevices")));
+			
+			obj2 = json_object_object_get(obj2, "Security");
+			if(obj2){
+				json_object_object_add(pramJobj, "SecurityMode", JSON_OBJ_COPY(json_object_object_get(obj2, "ModeEnabled")));
+			}
+		}
+		json_object_array_add(Jarray, pramJobj);
+		zcfgFeJsonObjFree(obj);
+	}
+
+	zcfgFeJsonObjFree(RadioMultiObj);
+	zcfgFeJsonObjFree(AccessPointMultiObj);
+	
+	return ret;
+}
+
+void zcfgFeDalShowWifiGeneral(struct json_object *Jarray){
+
+	int i, len = 0;
+	struct json_object *obj;
+	char channel[16] = {0};
+	
+	if(json_object_get_type(Jarray) != json_type_array){
+		printf("wrong Jobj format!\n");
+		return;
+	}
+
+	printf("%-7s %-8s %-35s %-10s %-10s %-10s %-25s %-12s\n",
+		    "Index", "Band", "SSID", "Enable", "Bandwidth", "Channel", "MaxAssociatedDevices", "SecurityMode");
+	
+	len = json_object_array_length(Jarray);
+	for(i=0;i<len;i++){
+		obj = json_object_array_get_idx(Jarray, i);
+		if(obj != NULL){
+			if(json_object_get_boolean(json_object_object_get(obj, "AutoChannelEnable")))
+				strcpy(channel, "Auto");
+			else
+				sprintf(channel, "%llu", json_object_get_int(json_object_object_get(obj, "channel")));
+			
+			printf("%-7llu %-8s %-35s %-10u %-10s %-10s %-25llu %-12s\n",
+			    json_object_get_int(json_object_object_get(obj, "Index")),
+			    json_object_get_string(json_object_object_get(obj, "band")),
+			    json_object_get_string(json_object_object_get(obj, "SSID")),
+			    json_object_get_boolean(json_object_object_get(obj, "wlEnable")),
+			    json_object_get_string(json_object_object_get(obj, "bandwidth")),
+			    channel,
+			    json_object_get_int(json_object_object_get(obj, "MaxAssociatedDevices")),
+			    json_object_get_string(json_object_object_get(obj, "SecurityMode")));
+		}
+	}
+	
+}
+
+
 zcfgRet_t setAllWlObjects(struct json_object *Jobj){
 	zcfgRet_t ret = ZCFG_SUCCESS;
 	
@@ -621,15 +731,110 @@
 	return ret;
 }
 
+zcfgRet_t dalcmdWifiGeneralEdit(struct json_object *Jobj, char *replyMsg){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	int Index;
+	objIndex_t iid;
+	struct json_object *paramObj = NULL;
+	const char *RadioReference = NULL, *SSIDReference = NULL;
+	uint8_t SSIDIdx;
+	const char *band = NULL;
+	int64_t intValue;
+	
+	Index = json_object_get_int(json_object_object_get(Jobj, "Index"));
+	IID_INIT(wifiSsidIid);
+	wifiSsidIid.level = 1;
+	wifiSsidIid.idx[0] = Index;
+	if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_SSID, &wifiSsidIid, &wifiSsidObj)) != ZCFG_SUCCESS) {
+		return ZCFG_NO_SUCH_OBJECT;
+	}
+	
+	RadioReference = json_object_get_string(json_object_object_get(wifiSsidObj, "LowerLayers"));
+	IID_INIT(wifiRadioIid);
+	wifiRadioIid.level = 1;
+	sscanf(RadioReference, "WiFi.Radio.%hhu", &(wifiRadioIid.idx[0]));
+	if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_RADIO, &wifiRadioIid, &wifiRadioObj)) != ZCFG_SUCCESS) {
+		return ZCFG_INTERNAL_ERROR;
+	}
+
+	IID_INIT(wifiApIid);
+	while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_WIFI_ACCESS_POINT, &wifiApIid, &wifiApObj) == ZCFG_SUCCESS) {
+		SSIDReference = json_object_get_string(json_object_object_get(wifiApObj, "SSIDReference"));
+		sscanf(SSIDReference, "WiFi.SSID.%hhu", &SSIDIdx);
+		if(SSIDIdx == wifiSsidIid.idx[0]){
+			break;
+		}
+		json_object_put(wifiApObj);
+		wifiApObj = NULL;
+	}
+	if(wifiApObj == NULL)
+		return ZCFG_INTERNAL_ERROR;
+
+	//wlEnable
+	if((paramObj = json_object_object_get(Jobj, "wlEnable")) != NULL)
+		json_object_object_add(wifiSsidObj, "Enable", JSON_OBJ_COPY(paramObj));
+
+	//SSID
+	if((paramObj = json_object_object_get(Jobj, "SSID")) != NULL)
+		json_object_object_add(wifiSsidObj, "SSID", JSON_OBJ_COPY(paramObj));
+
+	//bandwidth
+	if((paramObj = json_object_object_get(Jobj, "bandwidth")) != NULL){
+		band = json_object_get_string(json_object_object_get(wifiApObj, "OperatingFrequencyBand"));
+
+		intValue = json_object_get_int(paramObj);
+		if (intValue == 20)
+			json_object_object_add(wifiRadioObj, "OperatingChannelBandwidth", json_object_new_string("20MHz"));
+		else if (intValue == 40)
+			json_object_object_add(wifiRadioObj, "OperatingChannelBandwidth", json_object_new_string("40MHz"));
+		else if (strcmp(band, "2.4GHz") && intValue == 80)
+			json_object_object_add(wifiRadioObj, "OperatingChannelBandwidth", json_object_new_string("80MHz"));
+		else{
+			if(replyMsg != NULL)
+				strcpy(replyMsg, "Wrong bandwidth value");
+			return ZCFG_INVALID_PARAM_VALUE;
+		}
+	}
+
+	//channel
+	if((paramObj = json_object_object_get(Jobj, "channel")) != NULL){
+		intValue = json_object_get_int(paramObj);
+		if (intValue == 0){
+			json_object_object_add(wifiRadioObj, "AutoChannelEnable", json_object_new_boolean(true));
+		}
+		else{
+			json_object_object_add(wifiRadioObj, "AutoChannelEnable", json_object_new_boolean(false));
+			json_object_object_add(wifiRadioObj, "Channel", json_object_new_int(intValue));
+		}
+	}
+
+	//MaxAssociatedDevices
+	if((paramObj = json_object_object_get(Jobj, "MaxAssociatedDevices")) != NULL)
+		json_object_object_add(wifiApObj, "MaxAssociatedDevices", JSON_OBJ_COPY(paramObj));
+
+	//if(wifiApWpsObj) zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_ACCESS_POINT_WPS, &wifiApWpsIid, wifiApWpsObj, NULL);
+	if(wifiApObj) zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_ACCESS_POINT, &wifiApIid, wifiApObj, NULL);
+	//if(wifiSecObj) zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_ACCESS_POINT_SEC, &wifiSecIid, wifiSecObj, NULL);
+	if(wifiSsidObj)zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_SSID, &wifiSsidIid, wifiSsidObj, NULL);
+	if(wifiRadioObj) zcfgFeObjJsonSet(RDM_OID_WIFI_RADIO, &wifiRadioIid, wifiRadioObj, NULL);
+
+	return ret;
+	
+}
+
 zcfgRet_t zcfgFeDalWifiGeneralEdit(struct json_object *Jobj, char *replyMsg){
 	zcfgRet_t ret = ZCFG_SUCCESS;
 
 	initGlobalWlObjects();
 	getBasicWlInfo(Jobj);
 
-	t2 = time(NULL);
-    printf("line=%d, time=%d\n", __LINE__, (int) difftime(t2, t1));
-	
+	//set by dalcmd, temporary solution
+	if(json_object_object_get(Jobj, "Index") != NULL){
+		if((ret = dalcmdWifiGeneralEdit(Jobj, replyMsg)) != ZCFG_SUCCESS)
+			goto dalwlan_edit_fail;
+		else
+			return ret;
+	}
 	
 	if((ret = editWifiSsidObjects(Jobj)) != ZCFG_SUCCESS)
 		goto dalwlan_edit_fail;
@@ -656,9 +861,6 @@
 		if((ret = editWifiRadioObjects(Jobj)) != ZCFG_SUCCESS)
 			goto dalwlan_edit_fail;
 	}
-	t2 = time(NULL);
-	
-	printf("before set, time=%d seconds\n", (int) difftime(t2, t1));
 	
 	setAllWlObjects(Jobj);
 
@@ -670,19 +872,16 @@
 
 zcfgRet_t zcfgFeDalWifiGeneral(const char *method, struct json_object *Jobj, char *replyMsg){
 	zcfgRet_t ret = ZCFG_SUCCESS;
-
-	t1 = time(NULL);
 	
 	//if(!strcmp(method, "POST"))
 		//ret = zcfgFeDalWifiGeneralAdd(Jobj, NULL);
 	if(!strcmp(method, "PUT"))
 		ret = zcfgFeDalWifiGeneralEdit(Jobj, NULL);
+	else if(!strcmp(method, "GET"))
+		ret = zcfgFeDalWifiGeneralGet(Jobj, NULL);
 	else
 		printf("Unknown method:%s\n", method);
 
-	t2 = time(NULL);
-    printf("zcfgFeDalWifiGeneral() Total time=%d seconds ret=%d\n", (int) difftime(t2, t1), ret);
-
 	return ret;
 }
 
Index: libzcfg_fe_dal-1.0/zcfg_fe_dal.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/zcfg_fe_dal.c	2017-02-06 17:26:45.000000000 +0800
+++ libzcfg_fe_dal-1.0/zcfg_fe_dal.c	2017-02-06 17:28:05.308944038 +0800
@@ -153,7 +153,7 @@
 extern void zcfgFeDalShowPortFwd(struct json_object *Jarray);
 extern void zcfgFeDalShowNetworkMAP(struct json_object *Jarray);
 extern void zcfgFeDalShowFirewallACL(struct json_object *Jarray);
-
+extern void zcfgFeDalShowWifiGeneral(struct json_object *Jarray);
 
 dal_handler_t dalHandler[] = {
 {"WAN",				WAN_param,			zcfgFeDalWan,			NULL,						"add|edit|delete",	"Broadband"},
@@ -186,7 +186,7 @@
 {"DOS", 			FIREWALL_DOS_param, zcfgFeDalFirewallDos,	NULL,						"edit",				"Firewall"},
 {"PROTOCOL",		FIREWALL_PROTOCOL_param, zcfgFeDalFirewallProtocol,NULL,				"add|edit|delete", "Firewall"},
 {"ACL", 			FIREWALL_ACL_param, zcfgFeDalFirewallACL,	zcfgFeDalShowFirewallACL,	"add|edit|delete|get",	"Firewall"},
-{"WIFI_GENERAL",	WIFI_GENERAL_param,	zcfgFeDalWifiGeneral,	NULL,						"edit",				"Wireless"},
+{"WIFI_GENERAL",	WIFI_GENERAL_param,	zcfgFeDalWifiGeneral,   zcfgFeDalShowWifiGeneral,	"edit|get",			"Wireless"},
 {"MACFILTER",		MAC_Filter_param,	zcfgFeDalMACFilter,		NULL,						"edit",				"MAC_Filter"},
 {"QOS_GENERAL",		QosGeneral_param,	zcfgFeDalQosGeneral,	NULL,						"add|edit|delete",	"QoS"},
 {"QOS_QUEUE",		QosQueue_param,		zcfgFeDalQosQueue,		NULL,						"add|edit|delete",	"QoS"},
