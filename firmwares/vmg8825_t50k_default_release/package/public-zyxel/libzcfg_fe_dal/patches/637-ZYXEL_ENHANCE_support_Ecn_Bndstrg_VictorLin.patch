Index: libzcfg_fe_dal-1.0/Makefile
===================================================================
--- libzcfg_fe_dal-1.0.orig/Makefile	2018-10-16 11:55:16.140169391 +0800
+++ libzcfg_fe_dal-1.0/Makefile	2018-10-16 11:55:16.332073391 +0800
@@ -159,6 +159,10 @@
 CFLAGS += -DAPSTEERING
 endif
 
+ifeq ($(CONFIG_ZYXEL_EASYMESH),y)
+    CFLAGS += -DZYXEL_EASYMESH
+endif
+
 #SONiQ Steering
 ifeq ($(CONFIG_ZYXEL_SONIQ),y)
     CFLAGS += -DBUILD_SONIQ
Index: libzcfg_fe_dal-1.0/zcfg_fe_dal.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/zcfg_fe_dal.c	2018-10-16 11:55:16.276101391 +0800
+++ libzcfg_fe_dal-1.0/zcfg_fe_dal.c	2018-10-16 11:55:16.332073391 +0800
@@ -60,6 +60,9 @@
 #ifdef BUILD_SONIQ
 extern dal_param_t WIFI_SONIQ_param[];
 #endif
+#ifdef ZYXEL_EASYMESH
+extern dal_param_t WIFI_EASYMESH_param[];
+#endif
 extern dal_param_t WIFI_OTHERS_param[];
 extern dal_param_t WLAN_SCHEDULER_param[];
 extern dal_param_t WLAN_SCH_ACCESS_param[];
@@ -155,6 +158,9 @@
 #ifdef BUILD_SONIQ
 extern zcfgRet_t zcfgFeDalWifiSoniq(const char *method, struct json_object *Jobj, struct json_object *Jarray, char *replyMsg);
 #endif
+#ifdef ZYXEL_EASYMESH
+extern zcfgRet_t zcfgFeDalWifiEasyMesh(const char *method, struct json_object *Jobj, struct json_object *Jarray, char *replyMsg);
+#endif
 extern zcfgRet_t zcfgFeDalWlanScheduler(const char *method, struct json_object *Jobj, char *replyMsg);
 extern zcfgRet_t zcfgFeDalWlanSchAccess(const char *method, struct json_object *Jobj, struct json_object *Jarray, char *replyMsg);
 extern zcfgRet_t zcfgFeDalWifiOthers(const char *method, struct json_object *Jobj, struct json_object *Jarray, char *replyMsg);
@@ -324,6 +330,9 @@
 #ifdef BUILD_SONIQ
 {"WIFI_SONIQ",		WIFI_SONIQ_param, 	zcfgFeDalWifiSoniq,		NULL,						"edit|get", 			"Wireless"},//Wireless
 #endif
+#ifdef ZYXEL_EASYMESH
+{"WIFI_EasyMesh",		WIFI_EASYMESH_param, 	zcfgFeDalWifiEasyMesh,		NULL,						"edit|get", 			"Wireless"},//Wireless
+#endif
 {"wifi_others",		WIFI_OTHERS_param,	zcfgFeDalWifiOthers,	zcfgFeDalShowWifiOthers,	"edit|get",				"Wireless"},//
 {"wlan_scheduler",	WLAN_SCHEDULER_param, zcfgFeDalWlanScheduler,	zcfgFeDalShowWlanScheduler,	"add|edit|delete|get",	"Wireless"},
 {"wlan_sch_access",	WLAN_SCH_ACCESS_param, zcfgFeDalWlanSchAccess,	zcfgFeDalShowWlanSchAccess, "edit|get",	"Wireless"},
Index: libzcfg_fe_dal-1.0/network/wireless/zcfg_fe_dal_wifi_easymesh.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ libzcfg_fe_dal-1.0/network/wireless/zcfg_fe_dal_wifi_easymesh.c	2018-10-16 15:20:47.692650490 +0800
@@ -0,0 +1,72 @@
+#include <json/json.h>
+
+#include "zcfg_common.h"
+#include "zcfg_rdm_oid.h"
+#include "zcfg_rdm_obj.h"
+#include "zcfg_debug.h"
+#include "zcfg_fe_rdm_string.h"
+#include "zcfg_fe_dal_common.h"
+
+#ifdef ZYXEL_EASYMESH
+dal_param_t WIFI_EASYMESH_param[] =
+{
+	{"EasyMeshEnable",		dalType_boolean,	0,	0,	NULL, 	NULL, 	0},
+	{NULL,		0,	0,	0,	NULL,	NULL, 0}
+};
+
+zcfgRet_t zcfgFeDalWifiEasyMeshGet(struct json_object *Jobj, struct json_object *Jarray, char *replyMsg){
+
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	objIndex_t easymeshIid={0};
+	struct json_object *easymeshObj = NULL;
+	struct json_object *pramJobj = NULL;
+
+	IID_INIT(easymeshIid);
+	if(zcfgFeObjJsonGet(RDM_OID_EASY_MESH, &easymeshIid, &easymeshObj) != ZCFG_SUCCESS){
+		return ret;
+	}
+
+	pramJobj = json_object_new_object();
+	json_object_object_add(pramJobj, "EasyMeshEnable", JSON_OBJ_COPY(json_object_object_get(easymeshObj, "Enable")));
+	json_object_array_add(Jarray, pramJobj);
+
+	zcfgFeJsonObjFree(easymeshObj);
+
+	return ret;
+}
+
+zcfgRet_t zcfgFeDalWifiEasyMeshEdit(struct json_object *Jobj, char *replyMsg)
+{
+	zcfgRet_t ret = ZCFG_SUCCESS;
+
+	bool EasyMeshEnable = false;
+	EasyMeshEnable = json_object_get_int(json_object_object_get(Jobj, "EasyMeshEnable"));
+	struct json_object *EasyMeshObj = NULL;
+	objIndex_t EasyMeshIid;
+
+	IID_INIT(EasyMeshIid);
+	if(zcfgFeObjJsonGet(RDM_OID_EASY_MESH, &EasyMeshIid, &EasyMeshObj) == ZCFG_SUCCESS){
+		json_object_object_add(EasyMeshObj, "Enable", json_object_new_boolean(EasyMeshEnable));
+		zcfgFeObjJsonBlockedSet(RDM_OID_EASY_MESH, &EasyMeshIid, EasyMeshObj, NULL);
+		zcfgFeJsonObjFree(EasyMeshObj);
+	}
+	return ret;
+}
+
+zcfgRet_t zcfgFeDalWifiEasyMesh(const char *method, struct json_object *Jobj, struct json_object *Jarray, char *replyMsg)
+{
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	if(!method || !Jobj){
+		return ZCFG_INTERNAL_ERROR;
+	}
+
+	if(!strcmp(method, "PUT"))
+		ret = zcfgFeDalWifiEasyMeshEdit(Jobj, NULL);
+	else if(!strcmp(method, "GET"))
+		ret = zcfgFeDalWifiEasyMeshGet(Jobj, Jarray, replyMsg);
+	else
+		printf("Unknown method:%s\n", method);
+
+	return ret;
+}
+#endif
