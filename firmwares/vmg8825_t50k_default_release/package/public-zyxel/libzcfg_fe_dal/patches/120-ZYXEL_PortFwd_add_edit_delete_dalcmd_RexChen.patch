Index: libzcfg_fe_dal-1.0/network/nat/zcfg_fe_dal_nat_port_mapping.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/network/nat/zcfg_fe_dal_nat_port_mapping.c	2017-02-08 09:22:16.027205651 +0800
+++ libzcfg_fe_dal-1.0/network/nat/zcfg_fe_dal_nat_port_mapping.c	2017-02-08 09:24:49.134213500 +0800
@@ -12,18 +12,18 @@
 
 dal_param_t NAT_PORT_MAPPING_param[] =
 {
-	{"Enable",		dalType_boolean,	0,	0,	NULL},
-	{"Interface",		dalType_string,	0,	256,	NULL},
-	{"OriginatingIpAddress",	dalType_string, 0, 45, NULL},
-	{"ExternalPort",		dalType_int,	0,	63737,	NULL},
-	{"ExternalPortEndRange",		dalType_int,	0,	63737,	NULL},
-	{"InternalPort",		dalType_int,	0,	63737,	NULL},
-	{"X_ZYXEL_InternalPortEndRange",		dalType_int,	0,	63737,	NULL},
-	{"X_ZYXEL_SetOriginatingIP",	dalType_boolean, 0, 0, NULL},
-	{"Protocol",		dalType_string,	0,	3,	NULL},
-	{"InternalClient",		dalType_string,	0,	256,	NULL},
-	{"Description",		dalType_string,	0,	256,	NULL},			
-	{"Index",		dalType_int,	0,	0,	NULL},
+	{"Enable",		dalType_boolean,	0,	0,	NULL,	NULL,	0},
+	{"Interface",		dalType_string,	0,	256,	NULL,	NULL,	0},
+	{"OriginatingIpAddress",	dalType_string, 0, 45, NULL,	NULL,	0},
+	{"ExternalPort",		dalType_int,	0,	63737,	NULL,	NULL,	0},
+	{"ExternalPortEndRange",		dalType_int,	0,	63737,	NULL,	NULL,	0},
+	{"InternalPort",		dalType_int,	0,	63737,	NULL,	NULL,	0},
+	{"X_ZYXEL_InternalPortEndRange",		dalType_int,	0,	63737,	NULL,	NULL,	0},
+	{"X_ZYXEL_SetOriginatingIP",	dalType_boolean, 0, 0, NULL,	NULL,	0},
+	{"Protocol",		dalType_string,	0,	3,	NULL,	NULL,	0},
+	{"InternalClient",		dalType_string,	0,	256,	NULL,	NULL,	0},
+	{"Description",		dalType_string,	0,	256,	NULL,	NULL,	0},			
+	{"Index",		dalType_int,	0,	0,	NULL,	NULL,	dal_Edit|dal_Delete},
 	{NULL,		0,	0,	0,	NULL}
 };
 void zcfgFeDalShowPortFwd(struct json_object *Jarray){
@@ -36,8 +36,8 @@
 		printf("wrong Jobj format!\n");
 		return;
 	}
-	printf("%-20s %-7s %-20s %-17s %-15s %-10s %-10s %-25s %-25s %-10s\n",
-		    "Service Name", "Enable", "Originating IP", "Server IP Address", "WAN Interface", "Start Port", "End Port", "Translation Start Port", "Translation End Port", "Protocol");
+	printf("%-5s %-15s %-7s %-15s %-17s %-15s %-10s %-10s %-25s %-25s %-10s\n",
+		    "Index", "Service Name", "Enable", "Originating IP", "Server IP Address", "WAN Interface", "Start Port", "End Port", "Translation Start Port", "Translation End Port", "Protocol");
 	len = json_object_array_length(Jarray);
 	for(i=0;i<len;i++){
 		obj = json_object_array_get_idx(Jarray, i);
@@ -46,7 +46,8 @@
 		}
 		else
 			origIP = json_object_get_string(json_object_object_get(obj, "Orig_IP"));
-		printf("%-20s %-7d %-20s %-17s %-15s %-10s %-10s %-25s %-25s %-10s\n",
+		printf("%-5s %-15s %-7d %-15s %-17s %-15s %-10s %-10s %-25s %-25s %-10s\n",
+			json_object_get_string(json_object_object_get(obj, "idx")),
 			json_object_get_string(json_object_object_get(obj, "Service_Name")),
 			json_object_get_boolean(json_object_object_get(obj, "Active")),
 			origIP,
@@ -133,8 +134,21 @@
 	int index = 0;
 	int count = 0;
 	bool found = false;
+	bool tmp = false;
 	
 	index = json_object_get_int(json_object_object_get(Jobj, "Index"));
+	while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_NAT_PORT_MAPPING, &objIid, &NatPortMappingJobj) == ZCFG_SUCCESS){
+		if(strncmp(json_object_get_string(json_object_object_get(NatPortMappingJobj, "Description")),"APP:",4)){
+			if(index == objIid.idx[0]){
+				tmp = true;
+				break;
+			}
+		}
+	}
+	if(!tmp){
+		printf("Cannot find the rule.\n");
+		return ret;
+	}
 	IID_INIT(objIid);
 	while(ret = zcfgFeObjJsonGetNext(RDM_OID_NAT_PORT_MAPPING, &objIid, &NatPortMappingJobj) == ZCFG_SUCCESS) {
 		if(count == index-1){
@@ -156,17 +170,27 @@
 		protocol = json_object_get_string(json_object_object_get(Jobj, "Protocol"));
 		internalclient = json_object_get_string(json_object_object_get(Jobj, "InternalClient"));
 		description = json_object_get_string(json_object_object_get(Jobj, "Description"));
-	
+		if(json_object_object_get(Jobj, "Enable") != NULL)
 		json_object_object_add(NatPortMappingJobj, "Enable", json_object_new_boolean(enable));
+		if(json_object_object_get(Jobj, "Interface") != NULL)
 		json_object_object_add(NatPortMappingJobj, "Interface", json_object_new_string(interface));
+		if(json_object_object_get(Jobj, "OriginatingIpAddress") != NULL)
 		json_object_object_add(NatPortMappingJobj, "OriginatingIpAddress", json_object_new_string(originatingipaddress));
+		if(json_object_object_get(Jobj, "ExternalPort") != NULL)
 		json_object_object_add(NatPortMappingJobj, "ExternalPort", json_object_new_int(externalport));
+		if(json_object_object_get(Jobj, "ExternalPortEndRange") != NULL)
 		json_object_object_add(NatPortMappingJobj, "ExternalPortEndRange", json_object_new_int(externalportendrange));
+		if(json_object_object_get(Jobj, "InternalPort") != NULL)
 		json_object_object_add(NatPortMappingJobj, "InternalPort", json_object_new_int(internalport));
+		if(json_object_object_get(Jobj, "X_ZYXEL_InternalPortEndRange") != NULL)
 		json_object_object_add(NatPortMappingJobj, "X_ZYXEL_InternalPortEndRange", json_object_new_int(internalportendrange));
+		if(json_object_object_get(Jobj, "X_ZYXEL_SetOriginatingIP") != NULL)
 		json_object_object_add(NatPortMappingJobj, "X_ZYXEL_SetOriginatingIP", json_object_new_boolean(setoriginatingip));
+		if(json_object_object_get(Jobj, "Protocol") != NULL)
 		json_object_object_add(NatPortMappingJobj, "Protocol", json_object_new_string(protocol));
+		if(json_object_object_get(Jobj, "InternalClient") != NULL)
 		json_object_object_add(NatPortMappingJobj, "InternalClient", json_object_new_string(internalclient));
+		if(json_object_object_get(Jobj, "Description") != NULL)
 		json_object_object_add(NatPortMappingJobj, "Description", json_object_new_string(description));
 
 		ret = zcfgFeObjJsonSet(RDM_OID_NAT_PORT_MAPPING, &objIid, NatPortMappingJobj, NULL);
@@ -186,7 +210,6 @@
 	bool found = false;
 	
 	index = json_object_get_int(json_object_object_get(Jobj, "Index"));
-	printf("index === %d",index);
 	IID_INIT(objIid);
 	while(zcfgFeObjJsonGetNext(RDM_OID_NAT_PORT_MAPPING, &objIid, &NatPortMappingJobj) == ZCFG_SUCCESS) {
 		if(count == index-1){
