Index: libzcfg_fe_dal-1.0/network/broadband/zcfg_fe_dal_broadband.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/network/broadband/zcfg_fe_dal_broadband.c	2017-07-24 15:14:33.672456932 +0800
+++ libzcfg_fe_dal-1.0/network/broadband/zcfg_fe_dal_broadband.c	2017-07-24 15:17:09.060304100 +0800
@@ -18,7 +18,8 @@
 //#define JSON_OBJ_COPY(json_object) json_tokener_parse(json_object_to_json_string(json_object))
 
 dal_param_t WAN_param[]={
-	{"Name",				dalType_string,	1,	32,	NULL, NULL, dal_Add|dal_Edit|dal_Delete|dal_Get},
+	{"Index",				dalType_int,	0,	0,	NULL},
+	{"Name",				dalType_string,	1,	32,	NULL, NULL, dal_Add|dal_Edit|dal_Delete},
 	{"Enable",				dalType_boolean,	0,	0,	NULL},
 	{"Type",				dalType_string,	3,	4,	NULL, "ATM|PTM|ETH|GPON", dal_Add | dal_Edit_ignore},
 	{"Mode",				dalType_string,	9,	10,	NULL, "IP_Routed|IP_Bridged", dal_Add},
@@ -193,7 +194,7 @@
 
 void zcfgFeDalShowWan(struct json_object *Jarray){
 	int i, len = 0;
-	struct json_object *obj;
+	struct json_object *obj, *obj_idx = NULL;
 	const char *mode = NULL;
 	const char *encapsulation = NULL;
 	const char *vlanpriority = NULL;
@@ -201,18 +202,136 @@
 	const char *igmpEnable = NULL;
 	const char *nat = NULL;
 	const char *defaultgateway = NULL;
-	const char *IPv6 = NULL;
-	const char *MLDProxy = NULL;
+	const char *dnsServer = NULL, *dns6Server =NULL;
+	char *primaryDns = NULL, *secondaryDns = NULL, *primary6Dns = NULL, *secondary6Dns = NULL;
 	
 
 	if(json_object_get_type(Jarray) != json_type_array){
 		printf("wrong Jobj format!\n");
 		return;
 	}
-
-	printf("%-30s %-10s %-12s %-15s %-8s %-8s %-12s %-5s %-17s %-5s %-10s\n",
-		    "Name", "Type", "Mode", "Encapsulation", "802.1p", "802.1q", "IGMP Proxy", "NAT", "Default Gateway", "IPv6", "MLD Proxy");
+	printf("%s %s %d \n",json_object_to_json_string(Jarray),__func__,__LINE__);
 	len = json_object_array_length(Jarray);
+	obj_idx = json_object_array_get_idx(Jarray, 0);
+	if(len == 1 && json_object_get_boolean(json_object_object_get(obj_idx, "ShowDetail"))){
+		if(json_object_get_boolean(json_object_object_get(obj_idx, "ipDnsStatic"))){
+			dnsServer = json_object_get_string(json_object_object_get(obj_idx, "DNSServer"));
+			primaryDns = strtok_r(dnsServer, ",", &secondaryDns);
+		}
+		if(json_object_get_boolean(json_object_object_get(obj_idx, "ip6DnsStatic"))){
+			dns6Server = json_object_get_string(json_object_object_get(obj_idx, "DNS6Server"));
+			primary6Dns = strtok_r(dns6Server, ",", &secondary6Dns);
+		}
+		printf("General: \n");
+		printf("%-2s %-20s %-10s \n", "", "Active", json_object_get_string(json_object_object_get(obj_idx, "Enable")));
+		printf("%-2s %-20s %-10s \n", "", "Name", json_object_get_string(json_object_object_get(obj_idx, "Name")));
+		if(!strcmp("ATM",json_object_get_string(json_object_object_get(obj_idx, "Type"))))
+			printf("%-2s %-20s %-10s \n", "", "Type", "ADSL over ATM.");
+		else if(!strcmp("PTM",json_object_get_string(json_object_object_get(obj_idx, "Type"))))
+			printf("%-2s %-20s %-10s \n", "", "Type", "ADSL/VDSL over PTM.");
+		else if(!strcmp("ETH",json_object_get_string(json_object_object_get(obj_idx, "Type"))))
+			printf("%-2s %-20s %-10s \n", "", "Type", "Ethnet.");
+		if(!strcmp("IP_Routed",json_object_get_string(json_object_object_get(obj_idx, "Mode"))))
+			printf("%-2s %-20s %-10s \n", "", "Mode", "Routing");
+		else if(!strcmp("IP_Bridged",json_object_get_string(json_object_object_get(obj_idx, "Mode"))))
+			printf("%-2s %-20s %-10s \n", "", "Mode", "Bridge");
+		if(!strcmp("IP_Routed",json_object_get_string(json_object_object_get(obj_idx, "Mode")))){
+			printf("%-2s %-20s %-10s \n", "", "Mode", json_object_get_string(json_object_object_get(obj_idx, "Encapsulation")));
+			printf("%-2s %-20s %-10s \n", "", "IPv4/IPv6 Mode", json_object_get_string(json_object_object_get(obj_idx, "Encapsulation")));
+			printf("%-2s %-20s %-10s \n", "", "Static IP", json_object_get_string(json_object_object_get(obj_idx, "ipStatic")));
+			if(json_object_get_boolean(json_object_object_get(obj_idx, "ipStatic"))){
+				printf("%-2s %-20s %-10s \n", "", "IP Address", json_object_get_string(json_object_object_get(obj_idx, "IPAddress")));
+				printf("%-2s %-20s %-10s \n", "", "Subnet Mask", json_object_get_string(json_object_object_get(obj_idx, "SubnetMask")));
+				printf("%-2s %-20s %-10s \n", "", "Gateway IP Address", json_object_get_string(json_object_object_get(obj_idx, "GatewayIPAddress")));
+				printf("%-2s %-20s %-10s \n", "", "DNS Server", json_object_get_string(json_object_object_get(obj_idx, "ipDnsStatic")));
+				printf("%-2s %-25s %-10s \n", "", "Primary DNS Server", primaryDns);
+				printf("%-2s %-25s %-10s \n", "", "Secondary DNS Server", secondaryDns);
+			}
+			else if(json_object_get_boolean(json_object_object_get(obj_idx, "ipDnsStatic"))){
+				printf("%-2s %-20s %-10s \n", "", "DNS Server", json_object_get_string(json_object_object_get(obj_idx, "ipDnsStatic")));
+				printf("%-2s %-25s %-10s \n", "", "Primary DNS Server", primaryDns);
+				printf("%-2s %-25s %-10s \n", "", "Secondary DNS Server", secondaryDns);
+			}
+			else
+				printf("%-2s %-20s %-10s \n", "", "DNS Server", json_object_get_string(json_object_object_get(obj_idx, "ipDnsStatic")));
+		}
+		if(!strcmp("ATM",json_object_get_string(json_object_object_get(obj_idx, "Type")))){
+			printf("%-2s %-20s %-10s \n", "", "VPI/VCI", json_object_get_string(json_object_object_get(obj_idx, "vpivci")));
+			if(!strcmp("LLC",json_object_get_string(json_object_object_get(obj_idx, "AtmEncapsulation"))))
+				printf("%-2s %-20s %-10s \n", "", "Encapsulation", "LLC/SNAP-BRIDGING");
+			else if(!strcmp("VCMUX",json_object_get_string(json_object_object_get(obj_idx, "AtmEncapsulation"))))
+				printf("%-2s %-20s %-10s \n", "", "Encapsulation", "VC/MUX");
+			if(!strcmp("UBR",json_object_get_string(json_object_object_get(obj_idx, "QoSClass"))))
+				printf("%-2s %-20s %-10s \n", "", "Encapsulation", "UBR without PCR");
+			else if(!strcmp("CBR",json_object_get_string(json_object_object_get(obj_idx, "QoSClass")))){
+				printf("%-2s %-20s %-10s \n", "", "Encapsulation", "CBR");
+				printf("%-4s %-20s %-10s \n", "", "Peak Cell Rate [cells/s]", json_object_get_string(json_object_object_get(obj_idx, "atmPeakCellRate")));
+			}
+			else if(!strcmp("VBR-nrt",json_object_get_string(json_object_object_get(obj_idx, "QoSClass")))){
+				printf("%-2s %-20s %-10s \n", "", "Encapsulation", "Non Realtime VBR");
+				printf("%-4s %-20s %-10s \n", "", "Peak Cell Rate [cells/s]", json_object_get_string(json_object_object_get(obj_idx, "atmPeakCellRate")));
+				printf("%-4s %-20s %-10s \n", "", "Sustainable Cell Rate", json_object_get_string(json_object_object_get(obj_idx, "atmSustainedCellRate")));
+				printf("%-4s %-20s %-10s \n", "", "Maximum Burst Size [cells]", json_object_get_string(json_object_object_get(obj_idx, "atmMaxBurstSize")));
+			}
+			else if(!strcmp("VBR-rt",json_object_get_string(json_object_object_get(obj_idx, "QoSClass")))){
+				printf("%-2s %-20s %-10s \n", "", "Encapsulation", "Realtime VBR");
+				printf("%-4s %-20s %-10s \n", "", "Peak Cell Rate [cells/s]", json_object_get_string(json_object_object_get(obj_idx, "atmPeakCellRate")));
+				printf("%-4s %-20s %-10s \n", "", "Sustainable Cell Rate", json_object_get_string(json_object_object_get(obj_idx, "atmSustainedCellRate")));
+				printf("%-4s %-20s %-10s \n", "", "Maximum Burst Size [cells]", json_object_get_string(json_object_object_get(obj_idx, "atmMaxBurstSize")));
+			}
+		}
+		printf("VLAN: \n");
+		printf("%-2s %-20s %-10s \n", "", "Active :", json_object_get_string(json_object_object_get(obj_idx, "VLANEnable")));
+		if(!strcmp("-1",json_object_get_string(json_object_object_get(obj_idx, "VLANPriority"))))
+			printf("%-2s %-20s \n", "", "802.1p :");
+		else
+			printf("%-2s %-20s %-10s \n", "", "802.1p :", json_object_get_string(json_object_object_get(obj_idx, "VLANPriority")));
+		if(!strcmp("-1",json_object_get_string(json_object_object_get(obj_idx, "VLANID"))))
+			printf("%-2s %-20s \n", "", "802.1q :");
+		else 
+			printf("%-2s %-20s %-10s \n", "", "802.1q :", json_object_get_string(json_object_object_get(obj_idx, "VLANID")));
+		printf("%-20s %-10s \n", "MTU :", json_object_get_string(json_object_object_get(obj_idx, "MaxMTUSize")));
+		printf("Routing Feature: \n");
+		printf("%-2s %-30s %-10s \n", "", "NAT Enable :", json_object_get_string(json_object_object_get(obj_idx, "NatEnable")));
+		if(json_object_get_boolean(json_object_object_get(obj_idx, "NatEnable")))
+			printf("%-2s %-30s %-10s \n", "", "Fullcone NAT Enable :", json_object_get_string(json_object_object_get(obj_idx, "FullConeEnabled")));
+		printf("%-2s %-30s %-10s \n", "", "IGMP Proxy Enable :", json_object_get_string(json_object_object_get(obj_idx, "IGMPEnable")));
+		printf("%-2s %-30s %-10s \n", "", "Apply as Default Gateway :", json_object_get_string(json_object_object_get(obj_idx, "sysGwEnable")));
+		if(!json_object_get_boolean(json_object_object_get(obj_idx, "ipStatic"))){
+			printf("DHCPC Options: \n");
+			printf("%-2s %-20s %-10s \n", "", "options43", json_object_get_string(json_object_object_get(obj_idx, "option43Enable")));
+			printf("%-2s %-20s %-10s \n", "", "options60", json_object_get_string(json_object_object_get(obj_idx, "option60Enable")));
+			printf("%-2s %-20s %-10s \n", "", "options61", json_object_get_string(json_object_object_get(obj_idx, "option61Enable")));
+			printf("%-2s %-20s %-10s \n", "", "options120", json_object_get_string(json_object_object_get(obj_idx, "option120Enable")));
+			printf("%-2s %-20s %-10s \n", "", "options121", json_object_get_string(json_object_object_get(obj_idx, "option121Enable")));
+			printf("%-2s %-20s %-10s \n", "", "options125", json_object_get_string(json_object_object_get(obj_idx, "option125Enable")));
+		}
+		printf("IPv6 Address: \n");
+		printf("%-2s %-20s %-10s \n", "", "IPv6 Address", json_object_get_string(json_object_object_get(obj_idx, "ip6Static")));
+		if(json_object_get_boolean(json_object_object_get(obj_idx, "ip6Static"))){
+			printf("%-2s %-20s %-10s \n", "", "Static IPv6 Address", json_object_get_string(json_object_object_get(obj_idx, "IP6Address")));
+			printf("%-2s %-20s %-10s \n", "", "IPv6 Default Gateway", json_object_get_string(json_object_object_get(obj_idx, "NextHop")));
+			printf("%-2s %-20s %-10s \n", "", "IPv6 DNS Server", json_object_get_string(json_object_object_get(obj_idx, "ip6DnsStatic")));
+			printf("%-2s %-25s %-10s \n", "", "Primary DNS Server", primary6Dns);
+			printf("%-2s %-25s %-10s \n", "", "Secondary DNS Server", secondary6Dns);
+		}
+		else if(json_object_get_boolean(json_object_object_get(obj_idx, "ipDnsStatic"))){
+			printf("%-2s %-20s %-10s \n", "", "IPv6 DNS Server", json_object_get_string(json_object_object_get(obj_idx, "ip6DnsStatic")));
+			printf("%-2s %-25s %-10s \n", "", "Primary DNS Server", primary6Dns);
+			printf("%-2s %-25s %-10s \n", "", "Secondary DNS Server", secondary6Dns);
+		}
+		else
+			printf("%-2s %-20s %-10s \n", "", "IPv6 DNS Server", json_object_get_string(json_object_object_get(obj_idx, "ip6DnsStatic")));
+		printf("IPv6 Routing Feature: \n");
+		printf("%-2s %-30s %-10s \n", "", "MLD Proxy Enable", json_object_get_string(json_object_object_get(obj_idx, "MLDEnable")));
+		printf("%-2s %-30s %-10s \n", "", "Apply as Default Gateway", json_object_get_string(json_object_object_get(obj_idx, "sysGw6Enable")));
+		
+		
+
+	}
+	else{
+		printf("%-10s %-30s %-10s %-12s %-15s %-8s %-8s %-12s %-5s %-17s\n",
+			    "Index", "Name", "Type", "Mode", "Encapsulation", "802.1p", "802.1q", "IGMP Proxy", "NAT", "Default Gateway");
 	for(i=0;i<len;i++){
 		obj = json_object_array_get_idx(Jarray, i);
 		if(!strcmp(json_object_get_string(json_object_object_get(obj, "Mode")),"IP_Routed")){
@@ -242,19 +361,13 @@
 			defaultgateway = "Y";
 		else
 			defaultgateway = "N";
-		if(json_object_get_boolean(json_object_object_get(obj, "sysGw6Enable")))
-			IPv6 = "Y";
-		else
-			IPv6 = "N";
-		if(json_object_get_boolean(json_object_object_get(obj, "MLDEnable")))
-			MLDProxy = "Y";
-		else
-			MLDProxy = "N";
 
-		printf("%-30s %-10s %-12s %-15s %-8s %-8s %-12s %-5s %-17s %-5s %-10s\n",
+			printf("%-10s %-30s %-10s %-12s %-15s %-8s %-8s %-12s %-5s %-17s\n",
+				json_object_get_string(json_object_object_get(obj, "index")),
 		   json_object_get_string(json_object_object_get(obj, "Name")),
 		   json_object_get_string(json_object_object_get(obj, "Type")),
-		   mode, encapsulation, vlanpriority, vlanID, igmpEnable, nat, defaultgateway, IPv6, MLDProxy);
+			  	mode, encapsulation, vlanpriority, vlanID, igmpEnable, nat, defaultgateway);
+		}
 	}
 	
 }
@@ -3784,7 +3897,7 @@
 
 zcfgRet_t zcfgFeDalWanGet(struct json_object *Jobj, struct json_object *Jarray, char *replyMsg){
 	zcfgRet_t ret = ZCFG_SUCCESS;
-	int index = 1;
+	int count = 0, index = 0;
 	
 	struct json_object *pramJobj = NULL;
 	struct json_object *ipIfObj = NULL;
@@ -3794,10 +3907,20 @@
 		pramJobj = json_object_new_object();
 		ret = parseIpIfaceObj(pramJobj, ipIfaceIid, ipIfObj);
 		if( ret == ZCFG_SUCCESS ){
+				count++;
+				json_object_object_add(pramJobj, "index", json_object_new_int(count));
 			if(strcmp(CurrMode, "IP_Bridged")){
 				getWanInfo(pramJobj, ipIfaceIid, ipIfObj);
 				getStaticInfo(pramJobj, ipIfaceIid, ipIfObj);
 			}
+				if(json_object_object_get(Jobj, "Index")){
+					index = json_object_get_int(json_object_object_get(Jobj, "Index"));
+					if(index == count){
+						json_object_object_add(pramJobj, "ShowDetail", json_object_new_boolean(true));
+						json_object_array_add(Jarray, JSON_OBJ_COPY(pramJobj));
+					}
+				}
+				else
 			json_object_array_add(Jarray, JSON_OBJ_COPY(pramJobj));
 			zcfgFeJsonObjFree(pramJobj);
 		}
