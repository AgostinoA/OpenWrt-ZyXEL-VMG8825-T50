Index: libzcfg_fe_dal-1.0/network/nat/zcfg_fe_dal_nat_port_mapping.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/network/nat/zcfg_fe_dal_nat_port_mapping.c	2016-12-08 00:14:34.372262472 +0800
+++ libzcfg_fe_dal-1.0/network/nat/zcfg_fe_dal_nat_port_mapping.c	2016-12-08 00:21:29.877560100 +0800
@@ -13,123 +13,160 @@
 dal_param_t NAT_PORT_MAPPING_param[] =
 {
 	{"Enable",		dalType_boolean,	0,	0,	NULL},
-	{"Status",		dalType_string,	0,	19,	NULL},
-	{"Alias",		dalType_string,	0,	64,	NULL},
 	{"Interface",		dalType_string,	0,	256,	NULL},
-	{"X_ZYXEL_WANIP",		dalType_string,	0,	45,	NULL},
 	{"OriginatingIpAddress",	dalType_string, 0, 45, NULL},
-	{"AllInterfaces",		dalType_boolean,	0,	0,	NULL},
-	{"LeaseDuration",		dalType_int,	0,	63737,	NULL},
-	{"RemoteHost",		dalType_string,	0,	45,	NULL},
 	{"ExternalPort",		dalType_int,	0,	63737,	NULL},
 	{"ExternalPortEndRange",		dalType_int,	0,	63737,	NULL},
 	{"InternalPort",		dalType_int,	0,	63737,	NULL},
 	{"X_ZYXEL_InternalPortEndRange",		dalType_int,	0,	63737,	NULL},
-	{"X_ZYXEL_StartTime",		dalType_string,	0,	31,	NULL},
-	{"X_ZYXEL_StopTime",		dalType_string,	0,	31,	NULL},
-	{"X_ZYXEL_AutoDetectWanStatus",		dalType_boolean,	0,	0,	NULL},
 	{"X_ZYXEL_SetOriginatingIP",	dalType_boolean, 0, 0, NULL},
 	{"Protocol",		dalType_string,	0,	3,	NULL},
 	{"InternalClient",		dalType_string,	0,	256,	NULL},
 	{"Description",		dalType_string,	0,	256,	NULL},			
+	{"Index",		dalType_int,	0,	0,	NULL},
 	{NULL,		0,	0,	0,	NULL}
 };
 
 zcfgRet_t zcfgFeDalNatPortMappingAdd(struct json_object *Jobj, char *replyMsg)
 {
 	zcfgRet_t ret = ZCFG_SUCCESS;
-	const char *paraName;
-	objIndex_t objIid;
 	struct json_object *NatPortMappingJobj = NULL;
-	int n=0;
-	paraName = (const char *)NAT_PORT_MAPPING_param[n++].paraName;
+	objIndex_t objIid = {0};
 
-	IID_INIT(objIid);
-	zcfgFeObjJsonAdd(RDM_OID_NAT_PORT_MAPPING, &objIid, NULL);
-	if((ret = zcfgFeObjJsonGet(RDM_OID_NAT_PORT_MAPPING, &objIid, &NatPortMappingJobj)) != ZCFG_SUCCESS) {
-		printf("%s: Object retrieve fail\n", __FUNCTION__);
-		return ret;
-	}	
-	while(paraName){
-		struct json_object *paramValue = json_object_object_get(Jobj, paraName);
-		if(!paramValue) {
-			printf("function:%s, Line =%d\n", __FUNCTION__,__LINE__);
-			paraName = (const char *)NAT_PORT_MAPPING_param[n++].paraName;
-			continue;
-		}
-		json_object_object_add(NatPortMappingJobj, paraName, JSON_OBJ_COPY(paramValue));
-		paraName = (const char *)NAT_PORT_MAPPING_param[n++].paraName;
-	}
+	bool enable = false;
+	const char *interface = NULL;
+	const char *originatingipaddress = NULL;
+	int externalport = 0;
+	int externalportendrange = 0;
+	int internalport = 0;
+	int internalportendrange = 0;
+	bool setoriginatingip = false;
+	const char *protocol = NULL;
+	const char *internalclient = NULL;
+	const char *description = NULL;
 
-	if((ret = zcfgFeObjJsonSet(RDM_OID_NAT_PORT_MAPPING, &objIid, NatPortMappingJobj, NULL)) == ZCFG_SUCCESS)
-	{
-		sprintf(replyMsg, "[%d,%d,%d,%d,%d,%d]",objIid.idx[0],objIid.idx[1],objIid.idx[2],
-				objIid.idx[3],objIid.idx[4],objIid.idx[5]);
-		//printf("reply msg %s\n",replyMsg);		
+	IID_INIT(objIid);
+	ret = zcfgFeObjJsonAdd(RDM_OID_NAT_PORT_MAPPING, &objIid, NULL);
+	if(ret == ZCFG_SUCCESS){
+		ret = zcfgFeObjJsonGet(RDM_OID_NAT_PORT_MAPPING, &objIid, &NatPortMappingJobj);
+	}
+	if(ret == ZCFG_SUCCESS){
+		enable = json_object_get_boolean(json_object_object_get(Jobj, "Enable"));
+		interface = json_object_get_string(json_object_object_get(Jobj, "Interface"));
+		originatingipaddress = json_object_get_string(json_object_object_get(Jobj, "OriginatingIpAddress"));		
+		externalport = json_object_get_int(json_object_object_get(Jobj, "ExternalPort"));
+		externalportendrange = json_object_get_int(json_object_object_get(Jobj, "ExternalPortEndRange"));
+		internalport = json_object_get_int(json_object_object_get(Jobj, "InternalPort"));
+		internalportendrange = json_object_get_int(json_object_object_get(Jobj, "X_ZYXEL_InternalPortEndRange"));
+		setoriginatingip = json_object_get_boolean(json_object_object_get(Jobj, "X_ZYXEL_SetOriginatingIP"));
+		protocol = json_object_get_string(json_object_object_get(Jobj, "Protocol"));
+		internalclient = json_object_get_string(json_object_object_get(Jobj, "InternalClient"));
+		description = json_object_get_string(json_object_object_get(Jobj, "Description"));
+	
+		json_object_object_add(NatPortMappingJobj, "Enable", json_object_new_boolean(enable));
+		json_object_object_add(NatPortMappingJobj, "Interface", json_object_new_string(interface));
+		json_object_object_add(NatPortMappingJobj, "OriginatingIpAddress", json_object_new_string(originatingipaddress));
+		json_object_object_add(NatPortMappingJobj, "ExternalPort", json_object_new_int(externalport));
+		json_object_object_add(NatPortMappingJobj, "ExternalPortEndRange", json_object_new_int(externalportendrange));
+		json_object_object_add(NatPortMappingJobj, "InternalPort", json_object_new_int(internalport));
+		json_object_object_add(NatPortMappingJobj, "X_ZYXEL_InternalPortEndRange", json_object_new_int(internalportendrange));
+		json_object_object_add(NatPortMappingJobj, "X_ZYXEL_SetOriginatingIP", json_object_new_boolean(setoriginatingip));
+		json_object_object_add(NatPortMappingJobj, "Protocol", json_object_new_string(protocol));
+		json_object_object_add(NatPortMappingJobj, "InternalClient", json_object_new_string(internalclient));
+		json_object_object_add(NatPortMappingJobj, "Description", json_object_new_string(description));
+		ret = zcfgFeObjJsonSet(RDM_OID_NAT_PORT_MAPPING, &objIid, NatPortMappingJobj, NULL);
 	}
-	
-	json_object_put(NatPortMappingJobj);
+	zcfgFeJsonObjFree(NatPortMappingJobj);
 	return ret;
 }
 zcfgRet_t zcfgFeDalNatPortMappingEdit(struct json_object *Jobj, char *replyMsg)
 {
 
 	zcfgRet_t ret = ZCFG_SUCCESS;
-	const char *paraName;
-	objIndex_t objIid;
 	struct json_object *NatPortMappingJobj = NULL;
-	int paramModified = 0, n = 0;
-	struct json_object *iidArray = NULL;
-	uint8_t iidIdx =0;
-	paraName = (const char *)NAT_PORT_MAPPING_param[n++].paraName;
-	
-	//IID_INIT(objIid);
-	iidArray = json_object_object_get(Jobj, "iid");
-	for(iidIdx=0;iidIdx<6;iidIdx++){
-		objIid.idx[iidIdx] = json_object_get_int( json_object_array_get_idx(iidArray, iidIdx));
-		if(objIid.idx[iidIdx] != 0)
-			objIid.level = iidIdx+1;
-	}
-	if((ret = zcfgFeObjJsonGet(RDM_OID_NAT_PORT_MAPPING, &objIid, &NatPortMappingJobj)) != ZCFG_SUCCESS) {
-		return ret;
-	}
-	while(paraName){
-		struct json_object *paramValue = json_object_object_get(Jobj, paraName);
-		if(!paramValue) {
-			paraName = (const char *)NAT_PORT_MAPPING_param[n++].paraName;
-			continue;
+	objIndex_t objIid = {0};
+	bool enable = false;
+	const char *interface = NULL;
+	const char *originatingipaddress = NULL;
+	int externalport = 0;
+	int externalportendrange = 0;
+	int internalport = 0;
+	int internalportendrange = 0;
+	bool setoriginatingip = false;
+	const char *protocol = NULL;
+	const char *internalclient = NULL;
+	const char *description = NULL;
+	int index = 0;
+	int count = 0;
+	bool found = false;
+	
+	index = json_object_get_int(json_object_object_get(Jobj, "Index"));
+	IID_INIT(objIid);
+	while(ret = zcfgFeObjJsonGetNext(RDM_OID_NAT_PORT_MAPPING, &objIid, &NatPortMappingJobj) == ZCFG_SUCCESS) {
+		if(count == index-1){
+			found = true;
+			break;
 		}
-		json_object_object_add(NatPortMappingJobj, paraName, JSON_OBJ_COPY(paramValue));
-		paramModified = 1;				
-		paraName = (const char *)NAT_PORT_MAPPING_param[n++].paraName;
+		else
+			count++;
 	}
+	if(found){
+		enable = json_object_get_boolean(json_object_object_get(Jobj, "Enable"));
+		interface = json_object_get_string(json_object_object_get(Jobj, "Interface"));
+		originatingipaddress = json_object_get_string(json_object_object_get(Jobj, "OriginatingIpAddress"));		
+		externalport = json_object_get_int(json_object_object_get(Jobj, "ExternalPort"));
+		externalportendrange = json_object_get_int(json_object_object_get(Jobj, "ExternalPortEndRange"));
+		internalport = json_object_get_int(json_object_object_get(Jobj, "InternalPort"));
+		internalportendrange = json_object_get_int(json_object_object_get(Jobj, "X_ZYXEL_InternalPortEndRange"));
+		setoriginatingip = json_object_get_boolean(json_object_object_get(Jobj, "X_ZYXEL_SetOriginatingIP"));
+		protocol = json_object_get_string(json_object_object_get(Jobj, "Protocol"));
+		internalclient = json_object_get_string(json_object_object_get(Jobj, "InternalClient"));
+		description = json_object_get_string(json_object_object_get(Jobj, "Description"));
+	
+		json_object_object_add(NatPortMappingJobj, "Enable", json_object_new_boolean(enable));
+		json_object_object_add(NatPortMappingJobj, "Interface", json_object_new_string(interface));
+		json_object_object_add(NatPortMappingJobj, "OriginatingIpAddress", json_object_new_string(originatingipaddress));
+		json_object_object_add(NatPortMappingJobj, "ExternalPort", json_object_new_int(externalport));
+		json_object_object_add(NatPortMappingJobj, "ExternalPortEndRange", json_object_new_int(externalportendrange));
+		json_object_object_add(NatPortMappingJobj, "InternalPort", json_object_new_int(internalport));
+		json_object_object_add(NatPortMappingJobj, "X_ZYXEL_InternalPortEndRange", json_object_new_int(internalportendrange));
+		json_object_object_add(NatPortMappingJobj, "X_ZYXEL_SetOriginatingIP", json_object_new_boolean(setoriginatingip));
+		json_object_object_add(NatPortMappingJobj, "Protocol", json_object_new_string(protocol));
+		json_object_object_add(NatPortMappingJobj, "InternalClient", json_object_new_string(internalclient));
+		json_object_object_add(NatPortMappingJobj, "Description", json_object_new_string(description));
 
-	if(paramModified) {
-		if((ret = zcfgFeObjJsonSet(RDM_OID_NAT_PORT_MAPPING, &objIid, NatPortMappingJobj, NULL)) != ZCFG_SUCCESS);
+		ret = zcfgFeObjJsonSet(RDM_OID_NAT_PORT_MAPPING, &objIid, NatPortMappingJobj, NULL);
 	}
-	json_object_put(NatPortMappingJobj);
+
+	zcfgFeJsonObjFree(NatPortMappingJobj);
 	return ret;
 }
 zcfgRet_t zcfgFeDalNatPortMappingDelete(struct json_object *Jobj, char *replyMsg)
 {
 
 	zcfgRet_t ret = ZCFG_SUCCESS;
-	objIndex_t objIid;
-	struct json_object *iidArray = NULL;
-	uint8_t iidIdx =0;
-
-	
-	//IID_INIT(objIid);
-	iidArray = json_object_object_get(Jobj, "iid");
+	struct json_object *NatPortMappingJobj = NULL;
+	objIndex_t objIid = {0};
+	int index = 0;
+	int count = 0;
+	bool found = false;
 	
-	for(iidIdx=0;iidIdx<6;iidIdx++){
-		objIid.idx[iidIdx] = json_object_get_int( json_object_array_get_idx(iidArray, iidIdx));
-		if(objIid.idx[iidIdx] != 0)
-			objIid.level = iidIdx+1;
+	index = json_object_get_int(json_object_object_get(Jobj, "Index"));
+	printf("index === %d",index);
+	IID_INIT(objIid);
+	while(zcfgFeObjJsonGetNext(RDM_OID_NAT_PORT_MAPPING, &objIid, &NatPortMappingJobj) == ZCFG_SUCCESS) {
+		if(count == index-1){
+			found = true;
+			break;
+		}
+		else
+			count++;
+	}
+	if(found){
+		ret = zcfgFeObjJsonDel(RDM_OID_NAT_PORT_MAPPING, &objIid, NULL);
 	}
 	
-	zcfgFeObjJsonDel(RDM_OID_NAT_PORT_MAPPING, &objIid, NULL);
-	
+	zcfgFeJsonObjFree(NatPortMappingJobj);
 	return ret;
 	
 }
