Index: libzcfg_fe_dal-1.0/maintenance/zcfg_fe_dal_time.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ libzcfg_fe_dal-1.0/maintenance/zcfg_fe_dal_time.c	2016-09-23 23:58:10.991836500 +0800
@@ -0,0 +1,74 @@
+#include <ctype.h>
+#include <json/json.h>
+#include <time.h>
+#include "zcfg_common.h"
+#include "zcfg_fe_rdm_string.h"
+#include "zcfg_fe_rdm_struct.h"
+#include "zcfg_rdm_oid.h"
+#include "zcfg_rdm_obj.h"
+#include "zcfg_debug.h"
+#include "zcfg_msg.h"
+#include "zcfg_fe_dal_common.h"
+
+dal_param_t TIME_param[] =
+{
+	{"NTPServer1", 			dalType_string,  0, 	0, 	NULL},
+	{"NTPServer2", 			dalType_string,  0, 	0, 	NULL},
+	{"NTPServer3", 			dalType_string,  0, 	0, 	NULL},
+	{"NTPServer4", 			dalType_string,  0, 	0, 	NULL},
+	{"NTPServer5", 			dalType_string,  0, 	0, 	NULL},
+	{"Enable", 				dalType_boolean,  0, 	0,	NULL},
+	{"X_ZYXEL_DaylightSavings",	dalType_boolean,	0, 	0,	NULL},
+	{"X_ZYXEL_TimeZone", 	dalType_string,	 0, 	0, 	NULL},
+	{"X_ZYXEL_Location", 	dalType_string,  0, 	0, 	NULL},
+	/*End*/
+	{"X_ZYXEL_EndDay", 		dalType_int,	 0,		0,	NULL},
+	{"X_ZYXEL_EndDayOfWeek", dalType_int,	 0,		0,	NULL},
+	{"X_ZYXEL_EndMin", 		dalType_int, 	 0, 	0,	NULL},
+	{"X_ZYXEL_EndHour", 	dalType_int, 	 0, 	0, 	NULL},
+	{"X_ZYXEL_EndMonth", 	dalType_int, 	 0, 	0, 	NULL},
+	{"X_ZYXEL_EndWeek", 	dalType_int,  	 0, 	0, 	NULL},
+	/*Start*/
+	{"X_ZYXEL_StartDay", 	dalType_int, 	 0, 	0, 	NULL},
+	{"X_ZYXEL_StartDayOfWeek", 	dalType_int, 0, 	0, 	NULL},
+	{"X_ZYXEL_StartMin", 	dalType_int,  	 0, 	0, 	NULL},
+	{"X_ZYXEL_StartHour", 	dalType_int, 	 0, 	0, 	NULL},
+	{"X_ZYXEL_StartHour", 	dalType_int, 	 0, 	0, 	NULL},
+	{"X_ZYXEL_StartMonth", 	dalType_int, 	 0, 	0, 	NULL},
+	{"X_ZYXEL_StartWeek", 	dalType_int, 	 0, 	0, 	NULL},
+	{NULL, 					0, 				 0, 	0, 	NULL}
+};
+
+zcfgRet_t zcfgFeDal_Time_Edit(struct json_object *Jobj, char *replyMsg){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	struct json_object *timeObj = NULL;
+	objIndex_t timeIid = {0};
+
+	IID_INIT(timeObj);
+	ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_TIME, &timeIid, &timeObj);
+
+	if(ret == ZCFG_SUCCESS){
+		json_object_object_foreach(Jobj, key, val){
+			json_object_object_add(timeObj, key, val);
+		}
+		ret = zcfgFeObjJsonBlockedSet(RDM_OID_TIME, &timeIid, timeObj, NULL);
+	}
+
+	zcfgFeJsonObjFree(timeObj);
+	return ret;
+}
+
+zcfgRet_t zcfgFeDalTime(const char *method, struct json_object *Jobj, char *replyMsg){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+
+	if(!method || !Jobj)
+		return ZCFG_INTERNAL_ERROR;
+
+	if(!strcmp(method, "PUT")) {
+		ret = zcfgFeDal_Time_Edit(Jobj, NULL);
+	}else
+		printf("Unknown method:%s\n", method);
+
+	return ret;
+}
+
Index: libzcfg_fe_dal-1.0/zcfg_fe_dal.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/zcfg_fe_dal.c	2016-09-30 15:23:41.551279151 +0800
+++ libzcfg_fe_dal-1.0/zcfg_fe_dal.c	2016-09-30 15:28:10.556661600 +0800
@@ -11,10 +11,12 @@
 extern dal_param_t MGMT_param[];
 extern dal_param_t SYSTEM_INFO_param[];
 extern dal_param_t SNMP_param[];
+extern dal_param_t TIME_param[];
 extern zcfgRet_t zcfgFeDalWan(const char *method, struct json_object *Jobj, char *replyMsg);
 extern zcfgRet_t zcfgFeDalMgmt(const char *method, struct json_object *Jobj, char *replyMsg);
 extern zcfgRet_t zcfgFeDalSystemInfo(const char *method, struct json_object *Jobj, char *replyMsg);
 extern zcfgRet_t zcfgFeDalSNMP(const char *method, struct json_object *Jobj, char *replyMsg);
+extern zcfgRet_t zcfgFeDalTime(const char *method, struct json_object *Jobj, char *replyMsg);
 
 typedef struct dal_handler_s {
 	char				*name;
@@ -28,6 +30,7 @@
 {"MGMT",			MGMT_param,			zcfgFeDalMgmt},
 {"SYSINFO", 		SYSTEM_INFO_param,	zcfgFeDalSystemInfo},
 {"SNMP",			SNMP_param, 		zcfgFeDalSNMP},
+{"TIME",			TIME_param, 		zcfgFeDalTime},
 {NULL,				NULL,				NULL}
 };
 
