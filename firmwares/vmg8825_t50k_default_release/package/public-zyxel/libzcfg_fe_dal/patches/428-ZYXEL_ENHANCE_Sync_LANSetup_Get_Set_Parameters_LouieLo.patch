Index: libzcfg_fe_dal-1.0/network/homeNetworking/zcfg_fe_dal_lansetup.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/network/homeNetworking/zcfg_fe_dal_lansetup.c	2018-01-18 17:18:46.467372980 +0800
+++ libzcfg_fe_dal-1.0/network/homeNetworking/zcfg_fe_dal_lansetup.c	2018-01-18 17:32:11.426914712 +0800
@@ -1261,16 +1261,16 @@
 			ipv4addrIid.idx[0] = ipifaceIid.idx[0];
 			ipv4addrIid.idx[1] = 1;
 			if(zcfgFeObjJsonGet(RDM_OID_IP_IFACE_V4_ADDR, &ipv4addrIid, &ipv4addrObj) == ZCFG_SUCCESS){
-				json_object_object_add(paramJobj, "IPv4Addr", JSON_OBJ_COPY(json_object_object_get(ipv4addrObj, "IPAddress")));
-				json_object_object_add(paramJobj, "IPv4Submask", JSON_OBJ_COPY(json_object_object_get(ipv4addrObj, "SubnetMask")));
+				json_object_object_add(paramJobj, "IPAddress", JSON_OBJ_COPY(json_object_object_get(ipv4addrObj, "IPAddress")));
+				json_object_object_add(paramJobj, "SubnetMask", JSON_OBJ_COPY(json_object_object_get(ipv4addrObj, "SubnetMask")));
 
 				zcfgFeJsonObjFree(ipv4addrObj);
 			}
 			sprintf(currintf,"IP.Interface.%u",ipifaceIid.idx[0]);	// IP.Interface.1 , IP.Interface.6 , IP.Interface.7
 			while(zcfgFeObjJsonGetNext(RDM_OID_DHCPV4_RELAY_FWD, &dhcpv4fwdIid, &dhcpv4fwdObj) == ZCFG_SUCCESS){
 				if(!strcmp(json_object_get_string(json_object_object_get(dhcpv4fwdObj, "Interface")),currintf)){
-					json_object_object_add(paramJobj, "DHCP", json_object_new_string("DHCP Relay"));
-					json_object_object_add(paramJobj, "DHCPServerIPAddr", JSON_OBJ_COPY(json_object_object_get(dhcpv4fwdObj, "DHCPServerIPAddress")));
+					json_object_object_add(paramJobj, "DHCPType", json_object_new_string("DHCPRelay"));
+					json_object_object_add(paramJobj, "DHCP_RelayAddr", JSON_OBJ_COPY(json_object_object_get(dhcpv4fwdObj, "DHCPServerIPAddress")));
 					dchprelay = true;
 					zcfgFeJsonObjFree(dhcpv4fwdObj);
 					break;
@@ -1279,49 +1279,44 @@
 			}
 			while(zcfgFeObjJsonGetNext(RDM_OID_DHCPV4_SRV_POOL, &dhcpv4srvIid, &dhcpv4srvObj) == ZCFG_SUCCESS){
 				if(!strcmp(json_object_get_string(json_object_object_get(dhcpv4srvObj, "Interface")),currintf) && !dchprelay){
-					if(json_object_get_boolean(json_object_object_get(dhcpv4srvObj, "Enable"))){
-						json_object_object_add(paramJobj, "DHCP", json_object_new_string("Enable"));
-						json_object_object_add(paramJobj, "minAddr", JSON_OBJ_COPY(json_object_object_get(dhcpv4srvObj, "MinAddress")));
-						json_object_object_add(paramJobj, "maxAddr", JSON_OBJ_COPY(json_object_object_get(dhcpv4srvObj, "MaxAddress")));
-						json_object_object_add(paramJobj, "AutoReserveLanIp", JSON_OBJ_COPY(json_object_object_get(dhcpv4srvObj, "X_ZYXEL_AutoReserveLanIp")));
-						leasetime = json_object_get_int(json_object_object_get(dhcpv4srvObj, "LeaseTime"));
-						leasetime = leasetime / 60;
-						min = leasetime % 60;
-						leasetime = (leasetime - (leasetime % 60)) / 60;
-						hour = leasetime % 24;
-						leasetime = (leasetime - (leasetime % 24)) / 24;
-						day = leasetime;
-						json_object_object_add(paramJobj, "minutes", json_object_new_int(min));
-						json_object_object_add(paramJobj, "hours", json_object_new_int(hour));
-						json_object_object_add(paramJobj, "days", json_object_new_int(day));
-						dnstype = json_object_get_string(json_object_object_get(dhcpv4srvObj, "X_ZYXEL_DNS_Type"));
-						if(!strcmp(dnstype, "DNS Proxy") )
-							json_object_object_add(paramJobj, "dnstype", json_object_new_string(dnstype));
-						else if(!strcmp(dnstype, "Static") || !strcmp(dnstype, "From ISP")){
-							json_object_object_add(paramJobj, "dnstype", json_object_new_string(dnstype));
-							dnsserver = json_object_get_string(json_object_object_get(dhcpv4srvObj, "DNSServers"));
-							strcpy(buff, dnsserver);
-							dns1 = strtok_r(buff, ",", &dns2);
-							json_object_object_add(paramJobj, "DNS1", json_object_new_string(dns1));
-							json_object_object_add(paramJobj, "DNS2", json_object_new_string(dns2));
-						}
-					}
+					json_object_object_add(paramJobj, "DHCPType", json_object_new_string("DHCPServer"));
+					if(json_object_get_boolean(json_object_object_get(dhcpv4srvObj, "Enable")))
+						json_object_object_add(paramJobj, "EnableDHCP", json_object_new_string("true"));
 					else
-						json_object_object_add(paramJobj, "DHCP", json_object_new_string("Disable"));
+						json_object_object_add(paramJobj, "EnableDHCP", json_object_new_string("false"));
+
+					json_object_object_add(paramJobj, "DHCP_MinAddress", JSON_OBJ_COPY(json_object_object_get(dhcpv4srvObj, "MinAddress")));
+					json_object_object_add(paramJobj, "DHCP_MaxAddress", JSON_OBJ_COPY(json_object_object_get(dhcpv4srvObj, "MaxAddress")));
+					json_object_object_add(paramJobj, "DHCP_AutoReserveLanIp", JSON_OBJ_COPY(json_object_object_get(dhcpv4srvObj, "X_ZYXEL_AutoReserveLanIp")));
+					json_object_object_add(paramJobj, "DHCP_LeaseTime", JSON_OBJ_COPY(json_object_object_get(dhcpv4srvObj, "LeaseTime")));
+					dnstype = json_object_get_string(json_object_object_get(dhcpv4srvObj, "X_ZYXEL_DNS_Type"));
+					if(!strcmp(dnstype, "DNS Proxy") )
+						json_object_object_add(paramJobj, "DNS_Type", json_object_new_string("DNSProxy"));
+					else if(!strcmp(dnstype, "Static") || !strcmp(dnstype, "From ISP")){
+						if(!strcmp(dnstype, "Static"))
+							json_object_object_add(paramJobj, "DNS_Type", json_object_new_string("Static"));
+						else if(!strcmp(dnstype, "From ISP"))
+							json_object_object_add(paramJobj, "DNS_Type", json_object_new_string("FromISP"));
+						dnsserver = json_object_get_string(json_object_object_get(dhcpv4srvObj, "DNSServers"));
+						strcpy(buff, dnsserver);
+						dns1 = strtok_r(buff, ",", &dns2);
+						json_object_object_add(paramJobj, "DNS_Servers1", json_object_new_string(dns1));
+						json_object_object_add(paramJobj, "DNS_Servers2", json_object_new_string(dns2));
+					}
 					zcfgFeJsonObjFree(dhcpv4srvObj);
 					break;
 
 				}
 				zcfgFeJsonObjFree(dhcpv4srvObj);	
 			}
-			json_object_object_add(paramJobj, "IPv6Enable", JSON_OBJ_COPY(json_object_object_get(ipifaceObj, "IPv6Enable")));
+			json_object_object_add(paramJobj, "IPv6_LanEnable", JSON_OBJ_COPY(json_object_object_get(ipifaceObj, "IPv6Enable")));
 			if(json_object_get_boolean(json_object_object_get(ipifaceObj, "IPv6Enable"))){	//IPv6
 				ipv6addrIid.level = 2;
 				ipv6addrIid.idx[0] = ipifaceIid.idx[0];
 				ipv6addrIid.idx[1] = 1;
 				if(zcfgFeObjJsonGet(RDM_OID_IP_IFACE_V6_ADDR, &ipv6addrIid, &ipv6addrObj) == ZCFG_SUCCESS){
 					json_object_object_add(paramJobj, "IPv6_LinkLocalAddressType", json_object_new_string("Manual"));
-					json_object_object_add(paramJobj, "IPv6localAddr", JSON_OBJ_COPY(json_object_object_get(ipv6addrObj, "IPAddress")));
+					json_object_object_add(paramJobj, "IPv6_LinkLocalAddress", JSON_OBJ_COPY(json_object_object_get(ipv6addrObj, "IPAddress")));
 					zcfgFeJsonObjFree(ipv6addrObj);
 				}
 				else
@@ -1355,13 +1350,13 @@
 					while(zcfgFeObjJsonGetNext(RDM_OID_DHCPV6_SRV_POOL, &dhcpv6srvIid, &dhcpv6srvObj) == ZCFG_SUCCESS){
 						if(!strcmp(currintf, json_object_get_string(json_object_object_get(dhcpv6srvObj, "Interface")))){ 
 						if(json_object_get_int(json_object_object_get(ipifaceObj, "X_ZYXEL_AdvManagedFlag")) == 1){
-							json_object_object_add(paramJobj, "IPv6_AddressAssignSetup", json_object_new_string("Stateful"));
+							json_object_object_add(paramJobj, "IPv6_LanAddrAssign", json_object_new_string("Stateful"));
 							json_object_object_add(paramJobj, "IPv6_MinAddress", JSON_OBJ_COPY(json_object_object_get(dhcpv6srvObj, "X_ZYXEL_MinAddress")));
 							json_object_object_add(paramJobj, "IPv6_MaxAddress", JSON_OBJ_COPY(json_object_object_get(dhcpv6srvObj, "X_ZYXEL_MaxAddress")));
 							json_object_object_add(paramJobj, "IPv6_DNSSuffix", JSON_OBJ_COPY(json_object_object_get(dhcpv6srvObj, "X_ZYXEL_DNSSuffix")));
 						}
 						else
-							json_object_object_add(paramJobj, "IPv6_AddressAssignSetup", json_object_new_string("Stateless"));
+							json_object_object_add(paramJobj, "IPv6_LanAddrAssign", json_object_new_string("Stateless"));
 							v6DNSServer = json_object_get_string(json_object_object_get(dhcpv6srvObj, "X_ZYXEL_DNSServers"));
 							v6DNSList = json_object_get_string(json_object_object_get(dhcpv6srvObj, "X_ZYXEL_DNSList")); 
 							
@@ -1370,17 +1365,23 @@
 							v6dnstype1 = strtok_r(v6DNSListTmp, ",", &v6dnstypetmp);
 							v6dnstype2 = strtok_r(NULL, ",", &v6dnstypetmp);
 							v6dnstype3 = strtok_r(NULL, ",", &v6dnstypetmp);
-							json_object_object_add(paramJobj, "IPv6_DNSType1", json_object_new_string(v6dnstype1));
-							json_object_object_add(paramJobj, "IPv6_DNSType2", json_object_new_string(v6dnstype2));
-							json_object_object_add(paramJobj, "IPv6_DNSType3", json_object_new_string(v6dnstype3));
 							v6dnsServer1=v6DNSServerTmp;
 							*(ptr = strchr(v6dnsServer1, ',')) = '\0';
 							v6dnsServer2=ptr+1;
 							*(ptr = strchr(v6dnsServer2, ',')) = '\0';
 							v6dnsServer3=ptr+1;
-							json_object_object_add(paramJobj, "IPv6_DNSServer1", json_object_new_string(v6dnsServer1));
-							json_object_object_add(paramJobj, "IPv6_DNSServer2", json_object_new_string(v6dnsServer2));
-							json_object_object_add(paramJobj, "IPv6_DNSServer3", json_object_new_string(v6dnsServer3));
+							if(!strcmp(v6dnstype1, "None") || !strcmp(v6dnstype1, "ISP"))
+								json_object_object_add(paramJobj, "IPv6_DNSServer1", json_object_new_string(v6dnstype1));
+							else
+								json_object_object_add(paramJobj, "IPv6_DNSServer1", json_object_new_string(v6dnsServer1));
+							if(!strcmp(v6dnstype2, "None") || !strcmp(v6dnstype2, "ISP"))
+								json_object_object_add(paramJobj, "IPv6_DNSServer2", json_object_new_string(v6dnstype2));
+							else
+								json_object_object_add(paramJobj, "IPv6_DNSServer2", json_object_new_string(v6dnsServer2));
+							if(!strcmp(v6dnstype3, "None") || !strcmp(v6dnstype3, "ISP"))
+								json_object_object_add(paramJobj, "IPv6_DNSServer3", json_object_new_string(v6dnstype3));
+							else
+								json_object_object_add(paramJobj, "IPv6_DNSServer3", json_object_new_string(v6dnsServer3));
 							zcfgFeJsonObjFree(dhcpv6srvObj);
 							break;
 						}
@@ -1390,15 +1391,15 @@
 				if(zcfgFeObjJsonGet(RDM_OID_DNS, &dnsIid, &dnsObj) == ZCFG_SUCCESS){
 					DNSQueryScenario = json_object_get_int(json_object_object_get(dnsObj, "X_ZYXEL_DNSQueryScenario"));
 					if(DNSQueryScenario == 0)
-						json_object_object_add(paramJobj, "IPv6_DNSQueryScenario", json_object_new_string("IPv4/IPv6 DNS Server"));
+						json_object_object_add(paramJobj, "DNSQueryScenario", json_object_new_string("IPv4IPv6"));
 					else if(DNSQueryScenario == 1)
-						json_object_object_add(paramJobj, "IPv6_DNSQueryScenario", json_object_new_string("IPv6 DNS Server Only"));
+						json_object_object_add(paramJobj, "DNSQueryScenario", json_object_new_string("IPv6Only"));
 					else if(DNSQueryScenario == 2)
-						json_object_object_add(paramJobj, "IPv6_DNSQueryScenario", json_object_new_string("IPv4 DNS Server Only"));
+						json_object_object_add(paramJobj, "DNSQueryScenario", json_object_new_string("IPv4Only"));
 					else if(DNSQueryScenario == 3)
-						json_object_object_add(paramJobj, "IPv6_DNSQueryScenario", json_object_new_string("IPv6 DNS Server First"));
+						json_object_object_add(paramJobj, "DNSQueryScenario", json_object_new_string("IPv6First"));
 					else if(DNSQueryScenario == 4)
-						json_object_object_add(paramJobj, "IPv6_DNSQueryScenario", json_object_new_string("IPv4 DNS Server First"));
+						json_object_object_add(paramJobj, "DNSQueryScenario", json_object_new_string("IPv4First"));
 					zcfgFeJsonObjFree(dnsObj);
 				}
 			}
@@ -1420,6 +1421,7 @@
 void zcfgFeDalShowLanSetup(struct json_object *Jarray){
 	struct json_object *obj = NULL, *obj_idx = NULL;
 	int len = 0, i;
+	int leasetime = 0, min = 0, hour = 0, day = 0;
 	if(json_object_get_type(Jarray) != json_type_array){
 		printf("wrong Jobj format!\n");
 		return;
@@ -1429,24 +1431,34 @@
 	if(len == 1 && json_object_get_boolean(json_object_object_get(obj_idx, "ShowDetail"))){
 	obj = json_object_array_get_idx(Jarray, 0);
 	printf("%-15s %s \n","Group Name",json_object_get_string(json_object_object_get(obj, "Name")));
-	printf("%-15s %s \n","IP Address",json_object_get_string(json_object_object_get(obj, "IPv4Addr")));
-	printf("%-15s %s \n","Subnet Mask",json_object_get_string(json_object_object_get(obj, "IPv4Submask")));
+	printf("%-15s %s \n","IP Address",json_object_get_string(json_object_object_get(obj, "IPAddress")));
+	printf("%-15s %s \n","Subnet Mask",json_object_get_string(json_object_object_get(obj, "SubnetMask")));
 
 	
-	printf("%-15s %s \n","DHCP",json_object_get_string(json_object_object_get(obj, "DHCP")));
-	if(!strcmp("DHCP Relay",json_object_get_string(json_object_object_get(obj, "DHCP")))){
+	if(!strcmp("DHCPRelay",json_object_get_string(json_object_object_get(obj, "DHCPType")))){
+		printf("%-15s %s \n","DHCP",json_object_get_string(json_object_object_get(obj, "DHCP Relay")));
 		printf("%-20s %-10s\n", "DHCP IP Address", json_object_get_string(json_object_object_get(obj, "DHCPServerIPAddr")));
+	} else {
+		if(json_object_get_boolean(json_object_object_get(obj, "EnableDHCP"))){
+			printf("%-15s %s \n","DHCP","Enable");
+			printf("%-2s %-25s %s \n", "", "Beginning IP Address",json_object_get_string(json_object_object_get(obj, "DHCP_MinAddress")));
+			printf("%-2s %-25s %s \n", "", "Ending IP Address",json_object_get_string(json_object_object_get(obj, "DHCP_MaxAddress")));
+			printf("%-2s %-25s %s \n", "", "DHCP_AutoReserveLanIp",json_object_get_string(json_object_object_get(obj, "AutoReserveLanIp")));
+			leasetime = json_object_get_int(json_object_object_get(obj, "DHCP_LeaseTime"));
+			leasetime = leasetime / 60;
+			min = leasetime % 60;
+			leasetime = (leasetime - (leasetime % 60)) / 60;
+			hour = leasetime % 24;
+			leasetime = (leasetime - (leasetime % 24)) / 24;
+			day = leasetime;
+			printf("%-2s %-25s %s %s %s %s %s %s \n", "", "DHCP Server Lease Time",json_object_new_int(day),"Days",json_object_new_int(hour),"Hours",json_object_new_int(min),"Minutes");
+			printf("%-2s %-15s %s \n", "", "DNS Values",json_object_get_string(json_object_object_get(obj, "DNS_Type")));
+		}else{
+			printf("%-15s %s \n","DHCP","Disable");
+		}
 	}
-		else if(!strcmp("Enable",json_object_get_string(json_object_object_get(obj, "DHCP")))){
-		printf("%-2s %-25s %s \n", "", "Beginning IP Address",json_object_get_string(json_object_object_get(obj, "minAddr")));
-		printf("%-2s %-25s %s \n", "", "Ending IP Address",json_object_get_string(json_object_object_get(obj, "maxAddr")));
-		printf("%-2s %-25s %s \n", "", "AutoReserveLanIp",json_object_get_string(json_object_object_get(obj, "AutoReserveLanIp")));
-		printf("%-2s %-25s %s %s %s %s %s %s \n", "", "DHCP Server Lease Time",json_object_get_string(json_object_object_get(obj, "days")),"Days",json_object_get_string(json_object_object_get(obj, "hours")),"Hours",json_object_get_string(json_object_object_get(obj, "minutes")),"Minutes");
-		printf("%-2s %-15s %s \n", "", "DNS Values",json_object_get_string(json_object_object_get(obj, "dnstype")));
-
-	}
-	printf("%-15s %s \n","IPv6 Active",json_object_get_string(json_object_object_get(obj, "IPv6Enable")));
-	if(json_object_get_boolean(json_object_object_get(obj, "IPv6Enable"))){
+	printf("%-15s %s \n","IPv6 Active",json_object_get_string(json_object_object_get(obj, "IPv6_LanEnable")));
+	if(json_object_get_boolean(json_object_object_get(obj, "IPv6_LanEnable"))){
 		if(!strcmp(json_object_get_string(json_object_object_get(obj, "IPv6_LinkLocalAddressType")),"Manual"))
 			printf("%-30s %-10s %-10s\n", "Link Local Address Type", json_object_get_string(json_object_object_get(obj, "IPv6_LinkLocalAddressType")),json_object_get_string(json_object_object_get(obj, "IPv6localAddr")));
 		else if(!strcmp(json_object_get_string(json_object_object_get(obj, "IPv6_LinkLocalAddressType")),"EUI64"))
@@ -1459,33 +1471,64 @@
 			printf("%-30s %-30s %-10s\n", "LAN IPv6 Prefix Setup", "Delegate prefix from WAN", json_object_get_string(json_object_object_get(obj, "IPv6_PrefixWan")));
 		else if(!strcmp(json_object_get_string(json_object_object_get(obj, "IPv6_PrefixType")),"IPv6_PrefixType"))
 			printf("%-30s %-10s %-10s\n", "LAN IPv6 Prefix Setup", "Static", json_object_get_string(json_object_object_get(obj, "DHCPServerIPAddr")));
-		printf("%-30s %-10s\n", "LAN IPv6 Address Assign Setup", json_object_get_string(json_object_object_get(obj, "IPv6_AddressAssignSetup")));
+		printf("%-30s %-10s\n", "LAN IPv6 Address Assign Setup", json_object_get_string(json_object_object_get(obj, "IPv6_LanAddrAssign")));
 		printf("%-30s %-10s\n", "LAN IPv6 DNS Assign Setup", json_object_get_string(json_object_object_get(obj, "IPv6_DNSAssignSetup")));
 		if(!strcmp(json_object_get_string(json_object_object_get(obj, "IPv6_DNSAssignSetup")), "From Router Advertisement"))
 			printf("%-30s %-10s\n", "DHCPv6 Active", "DHCPv6 Disable");
 		else
 			printf("%-30s %-10s\n", "DHCPv6 Active", "DHCPv6 Server");
-			if(!strcmp(json_object_get_string(json_object_object_get(obj, "IPv6_AddressAssignSetup")),"Stateful")){
+			if(!strcmp(json_object_get_string(json_object_object_get(obj, "IPv6_LanAddrAssign")),"Stateful")){
 				printf("%-30s %-10s\n", "IPv6 Start Address", json_object_get_string(json_object_object_get(obj, "IPv6_MinAddress")));
 				printf("%-30s %-10s\n", "IPv6 End Address", json_object_get_string(json_object_object_get(obj, "IPv6_MaxAddress")));
 				printf("%-30s %-10s\n", "IPv6 Domain Name Server", json_object_get_string(json_object_object_get(obj, "IPv6_DNSSuffix")));
 			}
 			printf("IPv6 DNS Values \n");
-			printf("%-2s %-25s %-12s %-10s\n", "", "IPv6 DNS Server 1", json_object_get_string(json_object_object_get(obj, "IPv6_DNSType1")), json_object_get_string(json_object_object_get(obj, "IPv6_DNSServer1")));
-			printf("%-2s %-25s %-12s %-10s\n", "", "IPv6 DNS Server 2", json_object_get_string(json_object_object_get(obj, "IPv6_DNSType2")), json_object_get_string(json_object_object_get(obj, "IPv6_DNSServer2")));
-			printf("%-2s %-25s %-12s %-10s\n", "", "IPv6 DNS Server 3", json_object_get_string(json_object_object_get(obj, "IPv6_DNSType3")), json_object_get_string(json_object_object_get(obj, "IPv6_DNSServer3")));
-			printf("%-30s %-10s\n", "DHCPv6 Active", json_object_get_string(json_object_object_get(obj, "IPv6_DNSQueryScenario")));		
+			if(!strcmp(json_object_get_string(json_object_object_get(obj, "IPv6_DNSServer1")),"None") || !strcmp(json_object_get_string(json_object_object_get(obj, "IPv6_DNSServer1")),"ISP")){
+				printf("%-2s %-25s %-12s\n", "", "IPv6 DNS Server 1", json_object_get_string(json_object_object_get(obj, "IPv6_DNSServer1")));
+			} else {
+				printf("%-2s %-25s %-12s %-10s\n", "", "IPv6 DNS Server 1", "User Defined", json_object_get_string(json_object_object_get(obj, "IPv6_DNSServer1")));
+			}
+			if(!strcmp(json_object_get_string(json_object_object_get(obj, "IPv6_DNSServer2")),"None") || !strcmp(json_object_get_string(json_object_object_get(obj, "IPv6_DNSServer2")),"ISP")){
+				printf("%-2s %-25s %-12s\n", "", "IPv6 DNS Server 2", json_object_get_string(json_object_object_get(obj, "IPv6_DNSServer2")));
+			} else {
+				printf("%-2s %-25s %-12s %-10s\n", "", "IPv6 DNS Server 2", "User Defined", json_object_get_string(json_object_object_get(obj, "IPv6_DNSServer2")));
+			}
+			if(!strcmp(json_object_get_string(json_object_object_get(obj, "IPv6_DNSServer3")),"None") || !strcmp(json_object_get_string(json_object_object_get(obj, "IPv6_DNSServer3")),"ISP")){
+				printf("%-2s %-25s %-12s\n", "", "IPv6 DNS Server 3", json_object_get_string(json_object_object_get(obj, "IPv6_DNSServer3")));
+			} else {
+				printf("%-2s %-25s %-12s %-10s\n", "", "IPv6 DNS Server 3", "User Defined", json_object_get_string(json_object_object_get(obj, "IPv6_DNSServer3")));
+			}
+			printf("%-30s ", "DNS Query Scenario");		
+			if(!strcmp(json_object_get_string(json_object_object_get(obj, "IPv6_DNSQueryScenario")), "IPv4IPv6"))
+				printf("%-10s\n", "IPv4/IPv6 DNS Server");		
+			else if(!strcmp(json_object_get_string(json_object_object_get(obj, "IPv6_DNSQueryScenario")), "IPv6Only"))
+				printf("%-10s\n", "IPv6 DNS Server Only");		
+			else if(!strcmp(json_object_get_string(json_object_object_get(obj, "IPv6_DNSQueryScenario")), "IPv4Only"))
+				printf("%-10s\n", "IPv4 DNS Server Only");		
+			else if(!strcmp(json_object_get_string(json_object_object_get(obj, "IPv6_DNSQueryScenario")), "IPv6First"))
+				printf("%-10s\n", "IPv6 DNS Server First");		
+			else //if(!strcmp(json_object_get_string(json_object_object_get(obj, "IPv6_DNSQueryScenario")), "IPv4First"))
+				printf("%-10s\n", "IPv4 DNS Server First");		
+
 		}
 	}
 	else{
 		printf("%-15s %-20s %-20s %-15s \n", "Group Name", "LAN IP Address", "IPv4 DHCP Server", "IPv6 Enable");
 		for(i=0;i<len;i++){
 			obj = json_object_array_get_idx(Jarray, i);
-			printf("%-15s %-20s %-20s %-15s \n", 
-				json_object_get_string(json_object_object_get(obj, "Name")),
-				json_object_get_string(json_object_object_get(obj, "IPv4Addr")),
-				json_object_get_string(json_object_object_get(obj, "DHCP")),
-				json_object_get_string(json_object_object_get(obj, "IPv6Enable")));
+			if(json_object_get_boolean(json_object_object_get(obj, "EnableDHCP"))){
+				printf("%-15s %-20s %-20s %-15s \n", 
+					json_object_get_string(json_object_object_get(obj, "Name")),
+					json_object_get_string(json_object_object_get(obj, "IPAddress")),
+					"Enable",
+					json_object_get_string(json_object_object_get(obj, "IPv6_LanEnable")));
+			}else{
+				printf("%-15s %-20s %-20s %-15s \n", 
+					json_object_get_string(json_object_object_get(obj, "Name")),
+					json_object_get_string(json_object_object_get(obj, "IPAddress")),
+					"Disable",
+					json_object_get_string(json_object_object_get(obj, "IPv6_LanEnable")));
+			}
 		}
 	}
 }
