Index: libzcfg_fe_dal-1.0/maintenance/mgmt/zcfg_fe_dal_trust_domain.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ libzcfg_fe_dal-1.0/maintenance/mgmt/zcfg_fe_dal_trust_domain.c	2016-09-23 23:58:10.999836500 +0800
@@ -0,0 +1,74 @@
+#include <ctype.h>
+#include <json/json.h>
+#include <time.h>
+#include "zcfg_common.h"
+#include "zcfg_fe_rdm_string.h"
+#include "zcfg_fe_rdm_struct.h"
+#include "zcfg_rdm_oid.h"
+#include "zcfg_rdm_obj.h"
+#include "zcfg_debug.h"
+#include "zcfg_msg.h"
+#include "zcfg_fe_dal_common.h"
+
+dal_param_t TRUST_DOMAIN_param[] =
+{
+	{"Enable", 		dalType_boolean, 	0, 	0, 	NULL},
+	{"IPAddress", 	dalType_string, 	0, 	0, 	NULL},
+	{"SubnetMask", 	dalType_string, 	0, 	0, 	NULL},
+	{NULL, 			0, 					0, 	0, 	NULL}
+};
+
+zcfgRet_t zcfgFeDal_TrustDomain_Add(struct json_object *Jobj, char *replyMsg){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	struct json_object *trustDomainObj = NULL;
+	objIndex_t trustDomainIid = {0};
+
+	IID_INIT(trustDomainIid);
+	ret = zcfgFeObjJsonAdd(RDM_OID_REMO_MGMT_TRUST_DOMAIN, &trustDomainIid, NULL);
+	if(ret == ZCFG_SUCCESS){
+		ret = zcfgFeObjJsonGet(RDM_OID_REMO_MGMT_TRUST_DOMAIN, &trustDomainIid, &trustDomainObj);
+	}
+
+	if(ret == ZCFG_SUCCESS){
+		json_object_object_foreach(Jobj, key, val){
+			json_object_object_add(trustDomainObj, key, val);
+		}
+		ret = zcfgFeObjJsonBlockedSet(RDM_OID_REMO_MGMT_TRUST_DOMAIN, &trustDomainIid, trustDomainObj, NULL);
+	}
+
+	zcfgFeJsonObjFree(trustDomainObj);
+	return ret;
+}
+
+zcfgRet_t zcfgFeDal_TrustDomain_Delete(struct json_object *Jobj, char *replyMsg){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	objIndex_t trustDomainIid = {0};
+	int index = 0;
+
+	index = json_object_get_int(json_object_object_get(Jobj, "Index"));
+
+	IID_INIT(trustDomainIid);
+	trustDomainIid.idx[0] = index;
+	trustDomainIid.level = 1;
+	
+	ret = zcfgFeObjJsonDel(RDM_OID_REMO_MGMT_TRUST_DOMAIN, &trustDomainIid, NULL);
+	return ret;
+}
+
+zcfgRet_t zcfgFeDalTrustDomain(const char *method, struct json_object *Jobj, char *replyMsg){
+	zcfgRet_t ret = ZCFG_SUCCESS;
+
+	if(!method || !Jobj)
+		return ZCFG_INTERNAL_ERROR;
+
+	if(!strcmp(method, "POST")) {
+		ret = zcfgFeDal_TrustDomain_Add(Jobj, NULL);
+	}else if(!strcmp(method, "DELETE")) {
+		ret = zcfgFeDal_TrustDomain_Delete(Jobj, NULL);
+	}else
+		printf("Unknown method:%s\n", method);
+
+	return ret;
+}
+
+
Index: libzcfg_fe_dal-1.0/zcfg_fe_dal.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/zcfg_fe_dal.c	2016-09-30 17:45:19.511033992 +0800
+++ libzcfg_fe_dal-1.0/zcfg_fe_dal.c	2016-09-30 17:48:36.872957400 +0800
@@ -12,11 +12,13 @@
 extern dal_param_t SYSTEM_INFO_param[];
 extern dal_param_t SNMP_param[];
 extern dal_param_t TIME_param[];
+extern dal_param_t TRUST_DOMAIN_param[];
 extern zcfgRet_t zcfgFeDalWan(const char *method, struct json_object *Jobj, char *replyMsg);
 extern zcfgRet_t zcfgFeDalMgmt(const char *method, struct json_object *Jobj, char *replyMsg);
 extern zcfgRet_t zcfgFeDalSystemInfo(const char *method, struct json_object *Jobj, char *replyMsg);
 extern zcfgRet_t zcfgFeDalSNMP(const char *method, struct json_object *Jobj, char *replyMsg);
 extern zcfgRet_t zcfgFeDalTime(const char *method, struct json_object *Jobj, char *replyMsg);
+extern zcfgRet_t zcfgFeDalTrustDomain(const char *method, struct json_object *Jobj, char *replyMsg);
 
 typedef struct dal_handler_s {
 	char				*name;
@@ -31,6 +33,7 @@
 {"SYSINFO", 		SYSTEM_INFO_param,	zcfgFeDalSystemInfo},
 {"SNMP",			SNMP_param, 		zcfgFeDalSNMP},
 {"TIME",			TIME_param, 		zcfgFeDalTime},
+{"TRUST_DOMAIN",	TRUST_DOMAIN_param, zcfgFeDalTrustDomain},
 {NULL,				NULL,				NULL}
 };
 
