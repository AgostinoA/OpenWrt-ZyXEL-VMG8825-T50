Index: libzcfg_fe_dal-1.0/network/broadband/zcfg_fe_dal_broadband.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/network/broadband/zcfg_fe_dal_broadband.c	2018-09-14 16:00:00.328247793 +0800
+++ libzcfg_fe_dal-1.0/network/broadband/zcfg_fe_dal_broadband.c	2018-09-14 16:59:49.432346683 +0800
@@ -1997,7 +1997,7 @@
 	//objIndex_t iid;
 	//struct json_object *obj = NULL;
 	const char *Interface = NULL;
-	char newInterface[320] = {0};
+	char newInterface[512] = {0};
 	struct json_object *pramJobj = NULL;
 	bool igmpEnable = false, mldEnable = false;
 	bool CurrIgmpEnable = false, CurrMldEnable = false;
@@ -2051,7 +2051,7 @@
 			json_object_object_add(igmpObj, "Interface", json_object_new_string(newInterface));
 		}
 #else
-		char IgmpIntf[321] = {0};
+		char IgmpIntf[512] = {0};
 		DisableSameWanTypeIgmpMld(IgmpIntf, Interface, ipIfacePath, 0);
 		if(genNewInterface(",", newInterface, IgmpIntf, ipIfacePath, true)){
 			json_object_object_add(igmpObj, "Interface", json_object_new_string(newInterface));
@@ -2084,7 +2084,7 @@
 			json_object_object_add(mldObj, "Interface", json_object_new_string(newInterface));
 		}
 #else
-		char MldIntf[321] = {0};
+		char MldIntf[512] = {0};
 		DisableSameWanTypeIgmpMld(MldIntf, Interface, ipIfacePath, 0);	
 		if(genNewInterface(",", newInterface, MldIntf, ipIfacePath, true)){
 			json_object_object_add(mldObj, "Interface", json_object_new_string(newInterface));
@@ -2105,7 +2105,7 @@
 {
 	zcfgRet_t ret = ZCFG_SUCCESS;
 	struct json_object *pramJobj = NULL;
-	char buff[321] = {0}, *intf = NULL, *tmp_ptr = NULL;
+	char buff[512] = {0}, *intf = NULL, *tmp_ptr = NULL;
 	char ipWanType[16] = {0}, otherWanType[16] = {0};	
 
 	memset(ipWanType, 0, sizeof(ipWanType));
@@ -2317,7 +2317,7 @@
 	//objIndex_t iid;
 	//struct json_object *obj = NULL;
 	const char *Interface = NULL;
-	char newInterface[320] = {0};
+	char newInterface[512] = {0};
 	struct json_object *pramJobj = NULL;
 	bool v4GwEnable = false, v6GwEnable = false;
 	bool CurrV4GwEnable = false, CurrV6GwEnable = false;
@@ -2960,7 +2960,7 @@
 	LowerLayer = json_object_get_string(json_object_object_get(ipIfaceObj, "LowerLayers"));
 	strcpy(CurrMode, json_object_get_string(json_object_object_get(ipIfaceObj, "X_ZYXEL_ConnectionType")));
 
-	HigherLayer = "IP.Interface.";
+	HigherLayer = ipIfacePath;
 	while(count < 4){
 		dbg_printf("count=%d\n", count);
 		dbg_printf("HigherLayer=%s\n", HigherLayer);
@@ -2995,7 +2995,6 @@
 			}
 			else{
 				return ZCFG_REQUEST_REJECT;
-				//break;
 			}
 		}
 		else if(!strncmp(HigherLayer, "PPP.Interface.", 14)){
@@ -3019,7 +3018,6 @@
 			}
 			else{
 				return ZCFG_REQUEST_REJECT;
-				//break;
 			}
 		}
 		else if(!strncmp("Ethernet.VLANTermination.", HigherLayer, 25)){
@@ -3032,7 +3030,6 @@
 			}
 			else{
 				return ZCFG_REQUEST_REJECT;
-				//break;
 			}
 		}
 		else if(!strncmp("Ethernet.Link.", HigherLayer, 14)){
@@ -3060,9 +3057,9 @@
 				if(json_object_get_boolean(json_object_object_get(ethIfaceObj, "Upstream")) == false){
 					if(json_object_get_boolean(json_object_object_get(ethLinkObj, "X_ZYXEL_OrigEthWAN")) == false){
 						return ZCFG_REQUEST_REJECT;
-						//break;
 					}
 				}
+				break;
 			}
 			else if(!strncmp("Optical.Interface.", LowerLayer, 18)){
 				optIfaceIid.level = 1;
@@ -3078,13 +3075,12 @@
 			else if(!strcmp("", LowerLayer)){
 				if(json_object_get_boolean(json_object_object_get(ethLinkObj, "X_ZYXEL_OrigEthWAN")) == false){
 					return ZCFG_REQUEST_REJECT;
-					//break;
 				}
 				strcpy(CurrType, "ETH");
+				break;
 			}
 			else{
 				return ZCFG_REQUEST_REJECT;
-				//break;
 			}
 		}
 	}
@@ -3865,7 +3861,7 @@
 	LowerLayer = json_object_get_string(json_object_object_get(ipIfaceObj, "LowerLayers"));
 	strcpy(CurrMode, json_object_get_string(json_object_object_get(ipIfaceObj, "X_ZYXEL_ConnectionType")));
 	
-		HigherLayer = "IP.Interface.";
+		HigherLayer = ipIfacePath;
 		while(count < 4){
 			dbg_printf("count=%d\n", count);
 			dbg_printf("HigherLayer=%s\n", HigherLayer);
@@ -3900,7 +3896,6 @@
 				}
 				else{
 					return ZCFG_REQUEST_REJECT;
-					//break;
 				}
 			}
 			else if(!strncmp(HigherLayer, "PPP.Interface.", 14)){
@@ -3924,7 +3919,6 @@
 				}
 				else{
 					return ZCFG_REQUEST_REJECT;
-					//break;
 				}
 			}
 			else if(!strncmp("Ethernet.VLANTermination.", HigherLayer, 25)){
@@ -3937,7 +3931,6 @@
 				}
 				else{
 					return ZCFG_REQUEST_REJECT;
-					//break;
 				}
 			}
 			else if(!strncmp("Ethernet.Link.", HigherLayer, 14)){
@@ -3965,9 +3958,9 @@
 					if(json_object_get_boolean(json_object_object_get(ethIfaceObj, "Upstream")) == false){
 						if(json_object_get_boolean(json_object_object_get(ethLinkObj, "X_ZYXEL_OrigEthWAN")) == false){
 							return ZCFG_REQUEST_REJECT;
-							//break;
 						}
 					}
+					break;
 				}
 				else if(!strncmp("Optical.Interface.", LowerLayer, 18)){
 					optIfaceIid.level = 1;
@@ -3983,13 +3976,12 @@
 				else if(!strcmp("", LowerLayer)){
 					if(json_object_get_boolean(json_object_object_get(ethLinkObj, "X_ZYXEL_OrigEthWAN")) == false){
 						return ZCFG_REQUEST_REJECT;
-						//break;
 					}
 					strcpy(CurrType, "ETH");
+					break;
 				}
 				else{
 					return ZCFG_REQUEST_REJECT;
-					//break;
 				}
 			}
 		}
@@ -4009,8 +4001,8 @@
 	}
 
     /* __ZyXEL__, Albert, 20180209,Support IPv6 option IA_NA and IA_PD  */
-	json_object_object_add(pramJobj, "IPv6Manual_IANA", json_object_object_get(ipIfaceObj, "X_ZYXEL_AdvManagedFlag_Manual"));
-	json_object_object_add(pramJobj, "IPv6Manual_IAPD", json_object_object_get(ipIfaceObj, "X_ZYXEL_AdvOtherConfigFlag_Manual"));
+	json_object_object_add(pramJobj, "IPv6Manual_IANA", JSON_OBJ_COPY(json_object_object_get(ipIfaceObj, "X_ZYXEL_AdvManagedFlag_Manual")));
+	json_object_object_add(pramJobj, "IPv6Manual_IAPD", JSON_OBJ_COPY(json_object_object_get(ipIfaceObj, "X_ZYXEL_AdvOtherConfigFlag_Manual")));
 
 	if(!strcmp(CurrType, "ATM")){
 		json_object_object_add(pramJobj, "vpivci", JSON_OBJ_COPY(json_object_object_get(atmLinkObj, "DestinationAddress")));
@@ -4094,6 +4086,7 @@
 	}
 #endif
 
+	if(v4ClientObj) zcfgFeJsonObjFree(v4ClientObj);
 	getSpecificObj(RDM_OID_DHCPV4_CLIENT, "Interface", json_type_string, ipIfacePath, &v4ClientIid, &v4ClientObj);
 	if(v4ClientObj){
 		getDhcpv4ClientOpt(&v4ClientIid);
@@ -4121,6 +4114,7 @@
 	}
 
 	//NAT
+	if(natIntfObj) zcfgFeJsonObjFree(natIntfObj);
 	if (getSpecificObj(RDM_OID_NAT_INTF_SETTING, "Interface", json_type_string, ipIfacePath, &natIntfIid, &natIntfObj)) {
 		json_object_object_add(pramJobj, "NatEnable",JSON_OBJ_COPY(json_object_object_get(natIntfObj, "Enable")));
 		json_object_object_add(pramJobj, "FullConeEnabled",JSON_OBJ_COPY(json_object_object_get(natIntfObj, "X_ZYXEL_FullConeEnabled")));
@@ -4134,6 +4128,7 @@
 	IID_INIT(routerIid);
 	routerIid.level = 1;
 	routerIid.idx[0] = 1;
+	if(routerObj) zcfgFeJsonObjFree(routerObj);
 	zcfgFeObjJsonGetWithoutUpdate(RDM_OID_ROUTING_ROUTER, &routerIid, &routerObj);
 	Interface = json_object_get_string(json_object_object_get(routerObj, "X_ZYXEL_ActiveDefaultGateway"));
 	if(strstr(Interface, ipIfacePath))
@@ -4150,6 +4145,7 @@
 
 	//IGMP
 	IID_INIT(igmpIid);
+	if(igmpObj) zcfgFeJsonObjFree(igmpObj);
 	zcfgFeObjJsonGetWithoutUpdate(RDM_OID_ZY_IGMP, &igmpIid, &igmpObj);
 	Interface = json_object_get_string(json_object_object_get(igmpObj, "Interface"));
 	if(strstr(Interface, ipIfacePath))
@@ -4159,6 +4155,7 @@
 
 	//MLD
 	IID_INIT(mldIid);
+	if(mldObj) zcfgFeJsonObjFree(mldObj);
 	zcfgFeObjJsonGetWithoutUpdate(RDM_OID_ZY_MLD, &mldIid, &mldObj);
 	Interface = json_object_get_string(json_object_object_get(mldObj, "Interface"));
 	if(strstr(Interface, ipIfacePath))
@@ -4170,6 +4167,7 @@
 	IID_INIT(ethIfaceIid);
 	ethIfaceIid.level = 1;
 	ethIfaceIid.idx[0] = 4;
+	if(ethIfaceObj) zcfgFeJsonObjFree(ethIfaceObj);
 	if(zcfgFeObjJsonGetWithoutUpdate(RDM_OID_ETH_IFACE, &ethIfaceIid, &ethIfaceObj)== ZCFG_SUCCESS){
 		lanport = json_object_get_string(json_object_object_get(ethIfaceObj, "X_ZYXEL_LanPort"));
 		if(!strcmp(lanport,"ETHWAN")){
@@ -4230,6 +4228,7 @@
 	v4AddrIid.level = 2;
 	v4AddrIid.idx[0] = ipIfaceIid.idx[0];
 	v4AddrIid.idx[1] = 1;
+	if(v4AddrObj) zcfgFeJsonObjFree(v4AddrObj);
 	ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_IP_IFACE_V4_ADDR, &v4AddrIid, &v4AddrObj);
 	if(ret == ZCFG_SUCCESS && v4AddrObj){
 		AddressingType = json_object_get_string(json_object_object_get(v4AddrObj, "AddressingType"));
@@ -4245,6 +4244,7 @@
 	if(ipStatic){
 		//GatewayIPAddress
 		IID_INIT(v4FwdIid);
+		if(v4FwdObj) zcfgFeJsonObjFree(v4FwdObj);
 		while(zcfgFeSubInObjJsonGetNextWithoutUpdate(RDM_OID_ROUTING_ROUTER_V4_FWD, &routerIid, &v4FwdIid, &v4FwdObj) == ZCFG_SUCCESS){
 			Interface = json_object_get_string(json_object_object_get(v4FwdObj, "Interface"));
 			staticRoute =  json_object_get_boolean(json_object_object_get(v4FwdObj, "StaticRoute"));
@@ -4317,6 +4317,7 @@
 	v6AddrIid.level = 2;
 	v6AddrIid.idx[0] = ipIfaceIid.idx[0];
 	v6AddrIid.idx[1] = 1;
+	if(v6AddrObj) zcfgFeJsonObjFree(v6AddrObj);
 	ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_IP_IFACE_V6_ADDR, &v6AddrIid, &v6AddrObj);
 	if(ret == ZCFG_SUCCESS && v6AddrObj){
 		Origin = json_object_get_string(json_object_object_get(v6AddrObj, "Origin"));
@@ -4329,6 +4330,7 @@
 	}
 
 	IID_INIT(v6FwdIid);
+	if(v6FwdObj) zcfgFeJsonObjFree(v6FwdObj);
 	while(zcfgFeSubInObjJsonGetNextWithoutUpdate(RDM_OID_ROUTING_ROUTER_V6_FWD, &routerIid, &v6FwdIid, &v6FwdObj) == ZCFG_SUCCESS){
 		Interface = json_object_get_string(json_object_object_get(v6FwdObj, "Interface"));
 		Origin = json_object_get_string(json_object_object_get(v6FwdObj, "Origin"));
@@ -4483,6 +4485,7 @@
                 {
                     zcfgFeJsonObjFree(pramJobj);
                     zcfgFeJsonObjFree(ipIfObj);
+					freeAllObjects();
                     continue;
                 }
             }
@@ -4499,6 +4502,7 @@
 
 					zcfgFeJsonObjFree(pramJobj);
 					zcfgFeJsonObjFree(ipIfObj);
+					freeAllObjects();
 					break;
 				}
 			}
@@ -4506,12 +4510,12 @@
             {
 			    json_object_array_add(Jarray, JSON_OBJ_COPY(pramJobj));
             }
-			
-			zcfgFeJsonObjFree(pramJobj);
 		}
+		zcfgFeJsonObjFree(pramJobj);
 		zcfgFeJsonObjFree(ipIfObj);
+		freeAllObjects();
 	}
-	freeAllObjects();
+
 	return ZCFG_SUCCESS;
 }
 
@@ -4547,14 +4551,14 @@
 			if(ipv4static && !dnsv4static){
 				if(replyMsg)
 					strcpy(replyMsg, "--ipDnsStatic should be set as 1.");
-				return ZCFG_INVALID_PARAM_VALUE;
+				ret = ZCFG_INVALID_PARAM_VALUE;
 			}
 		}
 		else if(!json_object_object_get(Jobj, "ipStatic") && json_object_object_get(Jobj, "ipDnsStatic")){
 			if(oriipv4static && !dnsv4static){
 				if(replyMsg)
 					strcpy(replyMsg, "--ipDnsStatic should be set as 1.");
-				return ZCFG_INVALID_PARAM_VALUE;
+				ret = ZCFG_INVALID_PARAM_VALUE;
 			}
 		}
 
@@ -4562,14 +4566,14 @@
 			if(ipv6static && !dnsv6static){
 				if(replyMsg)
 					strcpy(replyMsg, "--ip6DnsStatic should be set as 1.");
-				return ZCFG_INVALID_PARAM_VALUE;
+				ret = ZCFG_INVALID_PARAM_VALUE;
 			}
 		}
 		else if(!json_object_object_get(Jobj, "ip6Static") && json_object_object_get(Jobj, "ip6DnsStatic")){
 			if(oriipv6static && !dnsv6static){
 				if(replyMsg)
 					strcpy(replyMsg, "--ip6DnsStatic should be set as 1.");
-				return ZCFG_INVALID_PARAM_VALUE;
+				ret = ZCFG_INVALID_PARAM_VALUE;
 			}
 		}
 	}
@@ -4578,27 +4582,29 @@
 			if(!json_object_object_get(Jobj, "ipDnsStatic")){
 				if(replyMsg)
 					strcpy(replyMsg, "Please set --ipDnsStatic parameter.");
-				return ZCFG_INVALID_PARAM_VALUE;
+				ret = ZCFG_INVALID_PARAM_VALUE;
 			}
 			else if(!dnsv4static){
 				if(replyMsg)
 					strcpy(replyMsg, "--ipDnsStatic should be set as 1.");
-				return ZCFG_INVALID_PARAM_VALUE;
+				ret = ZCFG_INVALID_PARAM_VALUE;
 			}
 		}
 		if(ipv6static){	//for ipv6 case
 			if(!json_object_object_get(Jobj, "ip6DnsStatic")){
 				if(replyMsg)
 					strcpy(replyMsg, "Please set --i6pDnsStatic parameter.");
-				return ZCFG_INVALID_PARAM_VALUE;
+				ret = ZCFG_INVALID_PARAM_VALUE;
 			}
 			else if(!dnsv6static){
 				if(replyMsg)
 					strcpy(replyMsg, "--ip6DnsStatic should be set as 1.");
-				return ZCFG_INVALID_PARAM_VALUE;
+				ret = ZCFG_INVALID_PARAM_VALUE;
 			}
 		}
 	}
+
+	zcfgFeJsonObjFree(Jarray);
 	return ret;
 }
 
Index: libzcfg_fe_dal-1.0/network/interfaceGrouping/zcfg_fe_dal_intfGrp.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/network/interfaceGrouping/zcfg_fe_dal_intfGrp.c	2018-09-14 16:00:00.316247793 +0800
+++ libzcfg_fe_dal-1.0/network/interfaceGrouping/zcfg_fe_dal_intfGrp.c	2018-09-14 16:57:49.904233100 +0800
@@ -14,7 +14,7 @@
 #include "zcfg_msg.h"
 #include "zcfg_fe_dal_common.h"
 
-#define MAX_NUM_OF_IP_INFO 32 //temp define
+#define MAX_NUM_OF_IP_INFO 128 //temp define
 //#define JSON_OBJ_COPY(json_object) json_tokener_parse(json_object_to_json_string(json_object))
 typedef struct s_IpRangeInfo{
 	uint32_t Start;
@@ -96,34 +96,22 @@
 	int ipIndex;
 	uint32_t ipS, ipE = 0;
 
-	memset(BridgePortStr, 0, sizeof(BridgePortStr));
-	memset(BridgePortStr_2, 0, sizeof(BridgePortStr_2));
-	memset(temp, 0, sizeof(temp));
-	strcat(BridgePortStr, "Bridging.Bridge.");
-	strcat(BridgePortStr_2, ".Port.1");
-	avlIpRange.length = 0;
-
-	IID_INIT(bridgingBrIid);
-	while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_BRIDGING_BR, &bridgingBrIid, &bridgingBrObj) == ZCFG_SUCCESS) {
-		sprintf(temp, "%d", bridgingBrIid.idx[0]);
-		strcat(BridgePortStr, temp);
-		strcat(BridgePortStr, BridgePortStr_2);
-		IID_INIT(v4AddrIid);
-		while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_IP_IFACE_V4_ADDR, &v4AddrIid, &v4AddrObj) == ZCFG_SUCCESS) {
-			IPAddress = Ipv4AddrtoInt((char*)json_object_get_string(json_object_object_get(v4AddrObj, "IPAddress")));
-			SubnetMask = Ipv4AddrtoInt((char*)json_object_get_string(json_object_object_get(v4AddrObj, "SubnetMask")));
-			avlIpRange.ipRangInfo[i].Start = IPAddress & SubnetMask;
-			avlIpRange.ipRangInfo[i].End = (avlIpRange.ipRangInfo[i].Start) | (~SubnetMask);
-			avlIpRange.length ++;
-			if(avlIpRange.length > MAX_NUM_OF_IP_INFO) {
-				printf("FindIPidx Error: avlIpRange,length is larger than %d\n", MAX_NUM_OF_IP_INFO);
-						break;
-					}
-			i++;
+	memset(&avlIpRange, 0, sizeof(avlIpRange));
+	IID_INIT(v4AddrIid);
+	while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_IP_IFACE_V4_ADDR, &v4AddrIid, &v4AddrObj) == ZCFG_SUCCESS) {
+		IPAddress = Ipv4AddrtoInt((char*)json_object_get_string(json_object_object_get(v4AddrObj, "IPAddress")));
+		SubnetMask = Ipv4AddrtoInt((char*)json_object_get_string(json_object_object_get(v4AddrObj, "SubnetMask")));
+		avlIpRange.ipRangInfo[i].Start = IPAddress & SubnetMask;
+		avlIpRange.ipRangInfo[i].End = (avlIpRange.ipRangInfo[i].Start) | (~SubnetMask);
+		avlIpRange.length ++;
+		if(avlIpRange.length > MAX_NUM_OF_IP_INFO) {
+			printf("FindIPidx Error: avlIpRange,length is larger than %d\n", MAX_NUM_OF_IP_INFO);
 			zcfgFeJsonObjFree(v4AddrObj);
-				}
-		zcfgFeJsonObjFree(bridgingBrObj);
+			break;
 		}
+		i++;
+		zcfgFeJsonObjFree(v4AddrObj);
+	}
 
 	/*make sure the ipS~ipE not be used in avlIpRange*/
 	ipIndex = newBrIid.idx[0];
@@ -134,13 +122,14 @@
 			if((avlIpRange.ipRangInfo[i].Start <= ipS && ipS <= avlIpRange.ipRangInfo[i].End) &&
 				(avlIpRange.ipRangInfo[i].Start <= ipE && ipE <= avlIpRange.ipRangInfo[i].End))
 					break;
-				}
-		if(i >= avlIpRange.length) break;
+		}
+		if(i >= avlIpRange.length)
+			break;
 		ipIndex++;
-			}
+	}
 	*IP_idx = ipIndex;
-				return ret;
-			}
+	return ret;
+}
 
 bool dalcmdFindObjIid(zcfg_offset_t RDM_OID, int index, objIndex_t* Iid, json_object** Obj) {
 	int k = 0;
@@ -420,16 +409,20 @@
 							idx = bridgefilterIid.idx[0];
 							if(strcmp(SourceMACFromVSIFilter,"")){
 								sprintf(criinfo,"op125<%s>",op125tmp);
+								zcfgFeJsonObjFree(bridgefilterObj);
 								break;
 							}else if(strcmp(SourceMACFromClientIDFilter,"")){
 								sprintf(criinfo,"op61<%s>",SourceMACFromClientIDFilter);
+								zcfgFeJsonObjFree(bridgefilterObj);
 								break;
 							}else if(strcmp(SourceMACFromVendorClassIDFilter,"")){
 								sprintf(criinfo,"op60<%s>",SourceMACFromVendorClassIDFilter);
+								zcfgFeJsonObjFree(bridgefilterObj);
 								break;
 							}
 							else if(strcmp(SourceMACAddressFilterList,"")){
 								sprintf(criinfo,"mac<%s>",SourceMACAddressFilterList);
+								zcfgFeJsonObjFree(bridgefilterObj);
 								break;
 							}
 							
@@ -450,6 +443,8 @@
 		zcfgFeJsonObjFree(bridgeJobj);
 	}
 
+	zcfgFeJsonObjFree(obj);
+
 	return ret;
 }
 
Index: libzcfg_fe_dal-1.0/js/zcfg_fe_dal_networkmap.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/js/zcfg_fe_dal_networkmap.c	2018-09-14 16:00:00.336247793 +0800
+++ libzcfg_fe_dal-1.0/js/zcfg_fe_dal_networkmap.c	2018-09-14 16:59:49.432346683 +0800
@@ -267,7 +267,7 @@
 	unsigned char idx;
 	const char *X_ZYXEL_BridgeName, *X_ZYXEL_SrvName, *X_ZYXEL_ConnectionType, *X_ZYXEL_IfName, *X_ZYXEL_Group_WAN_IpIface, *LowerLayers;
 	const char *X_ZYXEL_Type, *dns_tmp;
-	char intfGrpWANList[256] = {0};
+	char intfGrpWANList[512] = {0};
 	char *intf = NULL, *tmp_ptr = NULL;
 	const char *IpIfacePath = NULL;
 	char DHCPStatus[16] = {0}, DHCPtr181Path[32] = {0}, ipv6dns[128] = {0}, ipv4dns[32] = {0};
Index: libzcfg_fe_dal-1.0/zcfg_fe_dal.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/zcfg_fe_dal.c	2018-09-14 16:00:00.348247794 +0800
+++ libzcfg_fe_dal-1.0/zcfg_fe_dal.c	2018-09-14 16:59:49.432346683 +0800
@@ -915,7 +915,7 @@
 	const char *X_ZYXEL_BridgeName, *X_ZYXEL_SrvName, *X_ZYXEL_ConnectionType, *X_ZYXEL_IfName, *X_ZYXEL_Group_WAN_IpIface, *LowerLayers;
 	const char *Status, *ipIfaceStatus, *IPAddress, *X_ZYXEL_ActiveDefaultGateway, *X_ZYXEL_ActiveV6DefaultGateway;
 	const char *Username, Password;
-	char intfGrpWANList[256] = {0};
+	char intfGrpWANList[512] = {0};
 	char *intf = NULL, *tmp_ptr = NULL;
 	const char *IpIfacePath = NULL, *natInterface = NULL, *igmpInterface = NULL, *mldInterface = NULL;
 
