Index: libzcfg_fe_dal-1.0/security/firewall/zcfg_fe_dal_firewall_acl.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/security/firewall/zcfg_fe_dal_firewall_acl.c	2017-02-13 14:31:20.439126098 +0800
+++ libzcfg_fe_dal-1.0/security/firewall/zcfg_fe_dal_firewall_acl.c	2017-02-13 20:35:31.743644765 +0800
@@ -15,64 +15,72 @@
 
 dal_param_t FIREWALL_ACL_param[] =
 {
-	{"Index", 				dalType_int, 	 0, 	0, 	NULL},
-	{"Enable", 				dalType_boolean,  0, 	0,	NULL},
-	{"Description", 		dalType_string,  0, 	0,	NULL},
-	{"Order", 				dalType_int, 	 0, 	0, 	NULL},
-	{"Target", 				dalType_string,  0, 	0, 	NULL},
-	{"SourceIPExclude", 	dalType_string,	 0,		0,	NULL},
-	{"DestIPExclude", 		dalType_string,	 0,		0,	NULL},
+	{"Index", 				dalType_int, 	 0, 	0,		NULL,	NULL, 							dal_Edit|dal_Delete},
+	{"Enable", 				dalType_boolean, 0, 	0,		NULL,	NULL, 							0},
+	{"Description", 		dalType_string,  1, 	128,	NULL,	NULL, 							dal_Add},
+	{"Order", 				dalType_int, 	 0, 	0, 		NULL,	NULL, 							dal_Add},
+	{"Target", 				dalType_string,  0, 	0, 		NULL,	"Accept|Drop|Reject", 			0},
+	{"SourceIPExclude", 	dalType_string,	 0,		0,		NULL,	NULL, 							dalcmd_Forbid},
+	{"DestIPExclude", 		dalType_string,	 0,		0,		NULL,	NULL, 							dalcmd_Forbid},
 	/*protocol*/
-	{"Protocol", 			dalType_int, 	-2, 	255,	NULL},
-	{"ProtocolExclude", 	dalType_int, 	 0, 	0, 	NULL},
-	{"IPVersion", 			dalType_int, 	 0, 	0, 	NULL},
+	{"Protocol", 			dalType_string,  0, 	0,		NULL,	"ALL|TCP|UDP|TCPUDP|ICMP|ICMPv6", dal_Add},
+	{"ProtocolExclude", 	dalType_int, 	 0, 	0, 		NULL,	NULL, 							dalcmd_Forbid},
+	{"IPVersion", 			dalType_string,	 0, 	0, 		NULL,	"IPv4|IPv6", 					dal_Add},
 	/*src des ip*/
-	{"SourceIP", 			dalType_string,  0, 	0, 	NULL},
-	{"SourceMask", 			dalType_string,  0, 	0, 	NULL},
-	{"DestIP", 				dalType_string,  0, 	0, 	NULL},
-	{"DestMask", 			dalType_string,  0, 	0, 	NULL},
+	{"SourceIP", 			dalType_v4v6Addr,  0, 	0, 		NULL,	NULL, 							dal_Add},
+	{"SourceMask", 			dalType_string,  0, 	0, 		NULL,	NULL, 							dalcmd_Forbid},
+	{"SourceMaskLen", 		dalType_int,  	 0, 	0, 		NULL,	NULL, 							dal_Add}, //same parameter to SourceMask, for dalcmd
+	{"DestIP", 				dalType_v4v6Addr,  0, 	0, 		NULL,	NULL, 							dal_Add},
+	{"DestMask", 			dalType_string,  0, 	0, 		NULL,	NULL, 							dalcmd_Forbid},
+	{"DestMaskLen", 		dalType_int,  	 0, 	0, 		NULL,	NULL, 							dal_Add}, //same parameter to DestMask, for dalcmd
 	/*Port*/
-	{"DestPortExclude", 	dalType_int, 	 0, 	0, 	NULL},
-	{"DestPort", 			dalType_int, 	-1, 	65535, 	NULL},
-	{"DestPortRangeMax", 	dalType_int, 	-1, 	65535, 	NULL},
-	{"SourcePortExclude", 	dalType_int, 	 0, 	0, 	NULL},
-	{"SourcePort", 			dalType_int, 	-1, 	65535, 	NULL},
-	{"SourcePortRangeMax", 	dalType_int, 	-1, 	65535, 	NULL},
+	{"DestPortExclude", 	dalType_int, 	 0, 	0, 		NULL,	NULL, 							dalcmd_Forbid},
+	{"DestPort", 			dalType_int, 	-1, 	65535, 	NULL,	NULL, 							dal_Add},
+	{"DestPortRangeMax", 	dalType_int, 	-1, 	65535, 	NULL,	NULL, 							0},
+	{"SourcePortExclude", 	dalType_int, 	 0, 	0, 		NULL,	NULL, 							dalcmd_Forbid},
+	{"SourcePort", 			dalType_int, 	-1, 	65535, 	NULL,	NULL, 							dal_Add},
+	{"SourcePortRangeMax", 	dalType_int, 	-1, 	65535, 	NULL,	NULL, 							0},
 	/*TCP flag*/
-	{"X_ZYXEL_TCPFlagComp", dalType_string,  0, 	0, 	NULL},
-	{"X_ZYXEL_TCPFlagMask", dalType_string,  0, 	0, 	NULL},
-	{"X_ZYXEL_ServiceIndex",dalType_int, 	 0, 	0, 	NULL},
-	{"X_ZYXEL_Direction", 	dalType_string,  0, 	0, 	NULL},
+	{"X_ZYXEL_TCPFlagComp", dalType_string,  0, 	0, 		NULL,	NULL, 							dalcmd_Forbid},
+	{"X_ZYXEL_TCPFlagMask", dalType_string,  0, 	0, 		NULL,	NULL, 							dalcmd_Forbid},
+	{"X_ZYXEL_ServiceIndex",dalType_int, 	 0, 	0, 		NULL,	NULL, 							dalcmd_Forbid},
+	{"Direction", 			dalType_string,  0, 	0, 		NULL,	"WAN_TO_LAN|LAN_TO_WAN|WAN_TO_ROUTER|LAN_TO_ROUTER", dal_Add},
 	/*rate limit*/
-	{"X_ZYXEL_LimitRate", 	dalType_int, 	 0, 	0, 	NULL},
-	{"X_ZYXEL_LimitRateUnit", dalType_string,  0, 	0, 	NULL},
-	{"X_ZYXEL_ScheduleRule",dalType_int, 	 0, 	0, 	NULL},
-	{"X_ZYXEL_ICMPType", 			dalType_int, 	-1, 	143, 	NULL},
-	{"X_ZYXEL_ICMPTypeCode", 		dalType_int, 	-1, 	4, 	NULL},
-	{NULL, 					0, 				0, 	0, 	NULL}
+	{"X_ZYXEL_LimitRate", 	dalType_int, 	 0, 	0, 		NULL,	NULL, 							dalcmd_Forbid},
+	{"X_ZYXEL_LimitRateUnit",dalType_string,  0, 	0, 		NULL,	NULL, 							dalcmd_Forbid},
+	{"X_ZYXEL_ScheduleRule",dalType_int, 	 0, 	0, 		NULL,	NULL, 							dalcmd_Forbid},
+	{"ICMPv6Type", 			dalType_int, 	-1, 	143, 	NULL,	NULL, 							0},
+	{"ICMPv6TypeCode",		dalType_int, 	-1, 	4, 		NULL,	NULL, 							0},
+	{NULL, 					0, 				 0, 	0, 		NULL,	NULL, 							0}
 };
 
 void zcfgFeDalShowFirewallACL(struct json_object *Jarray){
 	int i, len = 0;
-	int j = 1;
+	//int j = 1;
 	struct json_object *obj = NULL;
 	if(json_object_get_type(Jarray) != json_type_array){
 		printf("wrong Jobj format!\n");
 		return;
 	}
-	printf("%-7s %-10s %-41s %-41s %-40s %-12s\n",
-		    "Order", "Name", "Source IP", "Destination IP", "Service", "Action");
+	
+	printf("%-6s %-6s %-13s %-41s %-41s %-40s %-12s\n",
+		    "Index", "Order", "Description", "Source IP", "Destination IP", "Service", "Action");
+
 	len = json_object_array_length(Jarray);
 	for(i=0;i<len;i++){
+#if 0
 		int k = 0;
 		while(atoi(json_object_get_string(json_object_object_get(json_object_array_get_idx(Jarray, k), "Order"))) != j){
 			k=k+1;
 		}
 		j=j+1;
 		obj = json_object_array_get_idx(Jarray, k);
-			printf("%-7s %-10s %-41s %-41s %-40s %-12s\n",
+#endif
+		obj = json_object_array_get_idx(Jarray, i);
+		printf("%-6s %-6s %-13s %-41s %-41s %-40s %-12s\n",
+			json_object_get_string(json_object_object_get(obj, "Index")),
 		    json_object_get_string(json_object_object_get(obj, "Order")),
-		    json_object_get_string(json_object_object_get(obj, "Name")),
+		    json_object_get_string(json_object_object_get(obj, "Description")),
 		    json_object_get_string(json_object_object_get(obj, "SourceIP")),
 		    json_object_get_string(json_object_object_get(obj, "DestIP")),
 		    json_object_get_string(json_object_object_get(obj, "Protocol")),
@@ -80,44 +88,32 @@
 	}
 }
 
-
-static objIndex_t chainIid = {0};
-
-bool getChainRuleIid(){
-	struct json_object *chainObj = NULL;
+bool getChainRuleIid(objIndex_t *chainIid){
 	struct json_object *levelObj = NULL;
 	objIndex_t levelIid = {0};
-	bool found = false;
-	const char *name = NULL;
-	char chain[32] = {0};
-	int chainIdx = 0;
+	const char *name = NULL, *chain = NULL;
 
+	IID_INIT(*chainIid);
 	IID_INIT(levelIid);
-	while(zcfgFeObjJsonGetNext(RDM_OID_FIREWALL_LEVEL, &levelIid, &levelObj) == ZCFG_SUCCESS) {
+	while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_FIREWALL_LEVEL, &levelIid, &levelObj) == ZCFG_SUCCESS) {
 		name = json_object_get_string(json_object_object_get(levelObj, "Name"));
 		if(!strcmp(name, LEVEL_NAME_UD)){
-			strcpy(chain, json_object_get_string(json_object_object_get(levelObj, "Chain")));
-			chainIdx = atoi(&chain[15]);
-			break;
-		}
-	}
-
-	IID_INIT(chainIid);
-	while(zcfgFeObjJsonGetNext(RDM_OID_FIREWALL_CHAIN, &chainIid, &chainObj) == ZCFG_SUCCESS) {
-		name = json_object_get_string(json_object_object_get(chainObj, "Name"));
-		if(chainIid.idx[0] == chainIdx){
-			found = true;
+			chain = json_object_get_string(json_object_object_get(levelObj, "Chain"));
+			chainIid->level = 1;
+			if (sscanf(chain, "Firewall.Chain.%hhu", &(chainIid->idx[0])) == 1){
+				zcfgFeJsonObjFree(levelObj);
+				return true;
+			}
+			zcfgFeJsonObjFree(levelObj);
 			break;
 		}
+		zcfgFeJsonObjFree(levelObj);
 	}
-
-	zcfgFeJsonObjFree(levelObj);
-	zcfgFeJsonObjFree(chainObj);
-	return found;
+	return false;
 }
 
 char* ICMPv6_type( int icmptype, int icmptypecode){
-	char *v6type = NULL;
+	char *v6type = "";
 	if(icmptype == 1 && icmptypecode == 0)
 		v6type = "1/No-Rute";
 	else if(icmptype == 1 && icmptypecode == 1)
@@ -166,14 +162,19 @@
 zcfgRet_t zcfgFeDal_Firewall_ACL_Add(struct json_object *Jobj, char *replyMsg){
 	zcfgRet_t ret = ZCFG_SUCCESS;
 	struct json_object *aclObj = NULL;
+	struct json_object *paramObj = NULL;
  	objIndex_t aclIid = {0};
+	objIndex_t chainIid = {0};
+	const char *charVal = NULL;
+	int intVal = 0;
+	char buf[32] = {0};
 
 	IID_INIT(aclIid);
-	if(getChainRuleIid()){
+	if(getChainRuleIid(&chainIid)){
 		ret = zcfgFeObjJsonBlockedAdd(RDM_OID_FIREWALL_CHAIN_RULE, &chainIid, NULL);
 		if(ret == ZCFG_SUCCESS){
 			memcpy(&aclIid, &chainIid, sizeof(objIndex_t));
-			ret = zcfgFeObjJsonGet(RDM_OID_FIREWALL_CHAIN_RULE, &aclIid, &aclObj);
+			ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_FIREWALL_CHAIN_RULE, &aclIid, &aclObj);
 		}
 
 		if(ret == ZCFG_SUCCESS){
@@ -184,6 +185,53 @@
 				json_object_object_add(aclObj, key, val);
 			}
 			
+			if((paramObj = json_object_object_get(Jobj, "IPVersion")) != NULL){
+				charVal = json_object_get_string(paramObj);
+				if(!strcmp(charVal, "IPv4"))
+					json_object_object_add(aclObj, "IPVersion", json_object_new_int(4));
+				else if(!strcmp(charVal, "IPv6"))
+					json_object_object_add(aclObj, "IPVersion", json_object_new_int(6));
+			}
+			if((paramObj = json_object_object_get(Jobj, "Protocol")) != NULL){
+				charVal = json_object_get_string(paramObj);
+				if(!strcmp(charVal, "ALL"))
+					json_object_object_add(aclObj, "Protocol", json_object_new_int(-1));
+				else if(!strcmp(charVal, "TCP"))
+					json_object_object_add(aclObj, "Protocol", json_object_new_int(6));
+				else if(!strcmp(charVal, "UDP"))
+					json_object_object_add(aclObj, "Protocol", json_object_new_int(17));
+				else if(!strcmp(charVal, "TCPUDP"))
+					json_object_object_add(aclObj, "Protocol", json_object_new_int(-2));
+				else if(!strcmp(charVal, "ICMP"))
+					json_object_object_add(aclObj, "Protocol", json_object_new_int(1));
+				else if(!strcmp(charVal, "ICMPv6"))
+					json_object_object_add(aclObj, "Protocol", json_object_new_int(58));
+			}
+			if((paramObj = json_object_object_get(Jobj, "SourceMaskLen")) != NULL){
+				intVal = json_object_get_int(paramObj);
+				sprintf(buf, "%d", intVal);
+				json_object_object_add(aclObj, "SourceMask", json_object_new_string(buf));
+				json_object_object_del(aclObj, "SourceMaskLen");
+			}
+			if((paramObj = json_object_object_get(Jobj, "DestMaskLen")) != NULL){
+				intVal = json_object_get_int(paramObj);
+				sprintf(buf, "%d", intVal);				
+				json_object_object_add(aclObj, "DestMask", json_object_new_string(buf));
+				json_object_object_del(aclObj, "DestMaskLen");
+			}
+			if((paramObj = json_object_object_get(Jobj, "Direction")) != NULL){
+				json_object_object_add(aclObj, "X_ZYXEL_Direction", JSON_OBJ_COPY(paramObj));
+				json_object_object_del(aclObj, "Direction");
+			}
+			if((paramObj = json_object_object_get(Jobj, "ICMPv6Type")) != NULL){
+				json_object_object_add(aclObj, "X_ZYXEL_ICMPType", JSON_OBJ_COPY(paramObj));
+				json_object_object_del(aclObj, "ICMPv6Type");
+			}
+			if((paramObj = json_object_object_get(Jobj, "ICMPv6TypeCode")) != NULL){
+				json_object_object_add(aclObj, "X_ZYXEL_ICMPTypeCode", JSON_OBJ_COPY(paramObj));
+				json_object_object_del(aclObj, "ICMPv6TypeCode");
+			}
+			
 			ret = zcfgFeObjJsonBlockedSet(RDM_OID_FIREWALL_CHAIN_RULE, &aclIid, aclObj, NULL);
 		}
 	}
@@ -197,61 +245,94 @@
 	struct json_object *aclObj = NULL;
 	objIndex_t aclIid = {0};
 	int order = 0;
-	int index = 0;
 	bool found = false;
-
-	IID_INIT(aclIid);
-	if(getChainRuleIid()){
-		index = json_object_get_int(json_object_object_get(Jobj, "Index"));
-		IID_INIT(aclIid);
-		while(zcfgFeSubInObjJsonGetNext(RDM_OID_FIREWALL_CHAIN_RULE, &chainIid, &aclIid , &aclObj)== ZCFG_SUCCESS) {
-			order = json_object_get_int(json_object_object_get(aclObj, "Order"));
-			if(index == (order-1)){
-				found = true;
-				break;
-			}
-		}
-
-		if(found){
+	struct json_object *paramObj = NULL;
+	const char *charVal = NULL;
+	int intVal = 0;
+	char buf[32] = {0};
+	
+	if(getChainRuleIid(&aclIid)){
+		aclIid.level = 2;
+		aclIid.idx[1] = json_object_get_int(json_object_object_get(Jobj, "Index"));
+		if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_FIREWALL_CHAIN_RULE, &aclIid, &aclObj)) == ZCFG_SUCCESS){
 			json_object_object_foreach(Jobj, key, val){
 				if(!strcmp(key, "Index")){
 					continue;
 				}
 				json_object_object_add(aclObj, key, val);
 			}
-			
+			if((paramObj = json_object_object_get(Jobj, "IPVersion")) != NULL){
+				charVal = json_object_get_string(paramObj);
+				if(!strcmp(charVal, "IPv4"))
+					json_object_object_add(aclObj, "IPVersion", json_object_new_int(4));
+				else if(!strcmp(charVal, "IPv6"))
+					json_object_object_add(aclObj, "IPVersion", json_object_new_int(6));
+			}
+			if((paramObj = json_object_object_get(Jobj, "Protocol")) != NULL){
+				charVal = json_object_get_string(paramObj);
+				if(!strcmp(charVal, "ALL"))
+					json_object_object_add(aclObj, "Protocol", json_object_new_int(-1));
+				else if(!strcmp(charVal, "TCP"))
+					json_object_object_add(aclObj, "Protocol", json_object_new_int(6));
+				else if(!strcmp(charVal, "UDP"))
+					json_object_object_add(aclObj, "Protocol", json_object_new_int(17));
+				else if(!strcmp(charVal, "TCPUDP"))
+					json_object_object_add(aclObj, "Protocol", json_object_new_int(-2));
+				else if(!strcmp(charVal, "ICMP"))
+					json_object_object_add(aclObj, "Protocol", json_object_new_int(1));
+				else if(!strcmp(charVal, "ICMPv6"))
+					json_object_object_add(aclObj, "Protocol", json_object_new_int(58));
+			}
+			if((paramObj = json_object_object_get(Jobj, "SourceMaskLen")) != NULL){
+				intVal = json_object_get_int(paramObj);
+				sprintf(buf, "%d", intVal);
+				json_object_object_add(aclObj, "SourceMask", json_object_new_string(buf));
+				json_object_object_del(aclObj, "SourceMaskLen");
+			}
+			if((paramObj = json_object_object_get(Jobj, "DestMaskLen")) != NULL){
+				intVal = json_object_get_int(paramObj);
+				sprintf(buf, "%d", intVal);				
+				json_object_object_add(aclObj, "DestMask", json_object_new_string(buf));
+				json_object_object_del(aclObj, "DestMaskLen");
+			}
+			if((paramObj = json_object_object_get(Jobj, "Direction")) != NULL){
+				json_object_object_add(aclObj, "X_ZYXEL_Direction", JSON_OBJ_COPY(paramObj));
+				json_object_object_del(aclObj, "Direction");
+			}
+			if((paramObj = json_object_object_get(Jobj, "ICMPv6Type")) != NULL){
+				json_object_object_add(aclObj, "X_ZYXEL_ICMPType", JSON_OBJ_COPY(paramObj));
+				json_object_object_del(aclObj, "ICMPv6Type");
+			}
+			if((paramObj = json_object_object_get(Jobj, "ICMPv6TypeCode")) != NULL){
+				json_object_object_add(aclObj, "X_ZYXEL_ICMPTypeCode", JSON_OBJ_COPY(paramObj));
+				json_object_object_del(aclObj, "ICMPv6TypeCode");
+			}
 			ret = zcfgFeObjJsonBlockedSet(RDM_OID_FIREWALL_CHAIN_RULE, &aclIid, aclObj, NULL);
+			zcfgFeJsonObjFree(aclObj);
 		}
 	}
+	else
+		ret = ZCFG_NOT_FOUND;
 
-	zcfgFeJsonObjFree(aclObj);
 	return ret;
+	
 }
 zcfgRet_t zcfgFeDal_Firewall_ACL_Delete(struct json_object *Jobj, char *replyMsg){
 	zcfgRet_t ret = ZCFG_SUCCESS;
 	struct json_object *aclObj = NULL;
 	objIndex_t aclIid = {0};
-	int index = 0;
-	int order = 0;
-	bool found = false;
-
-	IID_INIT(aclIid);
-	if(getChainRuleIid()){
-		index = json_object_get_int(json_object_object_get(Jobj, "Index"));
-		while(zcfgFeSubInObjJsonGetNext(RDM_OID_FIREWALL_CHAIN_RULE, &chainIid, &aclIid , &aclObj)== ZCFG_SUCCESS) {
-			order = json_object_get_int(json_object_object_get(aclObj, "Order"));
-			if(index == (order-1)){
-				found = true;
-				break;
-			}
-		}
-
-		if(found){
+	
+	if(getChainRuleIid(&aclIid)){
+		aclIid.level = 2;
+		aclIid.idx[1] = json_object_get_int(json_object_object_get(Jobj, "Index"));
+		if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_FIREWALL_CHAIN_RULE, &aclIid, &aclObj)) == ZCFG_SUCCESS){
 			ret = zcfgFeObjJsonDel(RDM_OID_FIREWALL_CHAIN_RULE, &aclIid, NULL);
+			zcfgFeJsonObjFree(aclObj);
 		}
 	}
+	else
+		ret = ZCFG_NOT_FOUND;
 
-	zcfgFeJsonObjFree(aclObj);
 	return ret;
 }
 
@@ -259,71 +340,91 @@
 	zcfgRet_t ret = ZCFG_SUCCESS;
 	struct json_object *paramJobj = NULL;
 	struct json_object *FiremallACLJobj = NULL;
-	char Protocol[32] = {0};
+	int Protocol = 0;
 	const char *SourceIP = NULL;
 	const char *DestIP = NULL;
-	int SourceMask = 0;
-	int DestMask = 0;
-	int Order = 0;
-	int SourcePort = 0;
-	int DestPort = 0;
+	char buf[64] = {0};
+	const char *SourceMask = 0;
+	const char *DestMask = 0;
+	int SourcePort = NULL;
+	int DestPort = NULL;
 	int icmptype = 0;
 	int icmptypecode = 0;
 	const char *tmp = NULL;
 	objIndex_t FiremallACLIid = {0};
+
 	while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_FIREWALL_CHAIN_RULE, &FiremallACLIid, &FiremallACLJobj) == ZCFG_SUCCESS){
 		paramJobj = json_object_new_object();
-
-		json_object_object_add(paramJobj, "Protocol", json_object_object_get(FiremallACLJobj, "Protocol"));
-		if(!strcmp(json_object_get_string(json_object_object_get(FiremallACLJobj, "Protocol")),"-2")){
-			json_object_object_add(paramJobj, "Protocol", json_object_new_string("ALL"));
-		}else if(!strcmp(json_object_get_string(json_object_object_get(FiremallACLJobj, "Protocol")),"17") || !strcmp(json_object_get_string(json_object_object_get(FiremallACLJobj, "Protocol")),"6")){
-			SourcePort = json_object_get_int(json_object_object_get(FiremallACLJobj, "SourcePort"));
-			DestPort = json_object_get_int(json_object_object_get(FiremallACLJobj, "DestPort"));
-			if(!strcmp(json_object_get_string(json_object_object_get(FiremallACLJobj, "Protocol")),"17")){
-				sprintf(Protocol,"UDP:%d-->%d",SourcePort,DestPort);
-				json_object_object_add(paramJobj, "Protocol", json_object_new_string(Protocol));
-			}else{
-				sprintf(Protocol,"TCP:%d-->%d",SourcePort,DestPort);
-				json_object_object_add(paramJobj, "Protocol", json_object_new_string(Protocol));
-			}
-		}else if(!strcmp(json_object_get_string(json_object_object_get(FiremallACLJobj, "Protocol")),"1")){
-			json_object_object_add(paramJobj, "Protocol", json_object_new_string("ICMP"));
-		}else if(!strcmp(json_object_get_string(json_object_object_get(FiremallACLJobj, "Protocol")),"58")){
-			json_object_object_add(paramJobj, "Protocol", json_object_new_string("ICMPV6"));
-			icmptype = json_object_get_int(json_object_object_get(FiremallACLJobj,"X_ZYXEL_ICMPType"));
-			icmptypecode = json_object_get_int(json_object_object_get(FiremallACLJobj,"X_ZYXEL_ICMPTypeCode"));
-			tmp = ICMPv6_type(icmptype,icmptypecode);
-			sprintf(Protocol,"ICMPv6:%s",tmp);
-			json_object_object_add(paramJobj, "Protocol", json_object_new_string(Protocol));
-
-		}else if(!strcmp(json_object_get_string(json_object_object_get(FiremallACLJobj, "Protocol")),"-1")){
-			json_object_object_add(paramJobj, "Protocol", json_object_new_string("ALL"));
-		}
-		Order = json_object_get_int(json_object_object_get(FiremallACLJobj, "Order"));
-		json_object_object_add(paramJobj, "Name", json_object_object_get(FiremallACLJobj, "Description"));
-		json_object_object_add(paramJobj, "Order", json_object_new_int(Order));
+		json_object_object_add(paramJobj, "Index", json_object_new_int(FiremallACLIid.idx[1]));
+		
+		Protocol = json_object_get_int(json_object_object_get(FiremallACLJobj, "Protocol"));
+		switch(Protocol){
+			case -2: //TCPUDP
+			case 6:	 //TPC
+			case 17: //UDP
+				SourcePort = json_object_get_int(json_object_object_get(FiremallACLJobj, "SourcePort"));
+				DestPort = json_object_get_int(json_object_object_get(FiremallACLJobj, "DestPort"));
+				
+				if(Protocol == -2)
+					sprintf(buf, "TCP/UDP:%d-->%d", SourcePort,DestPort);
+				else if(Protocol == 6)
+					sprintf(buf, "TCP:%d-->%d", SourcePort,DestPort);
+				else if(Protocol == 17)
+					sprintf(buf, "UDP:%d-->%d", SourcePort,DestPort);
+					
+				json_object_object_add(paramJobj, "Protocol", json_object_new_string(buf));
+				break;
+			case -1: //ALL
+				json_object_object_add(paramJobj, "Protocol", json_object_new_string("ALL"));
+				break;
+			case 1: //ICMP
+				json_object_object_add(paramJobj, "Protocol", json_object_new_string("ICMP"));
+				break;
+			case 58: //ICMPv6
+				json_object_object_add(paramJobj, "Protocol", json_object_new_string("ICMPV6"));
+				icmptype = json_object_get_int(json_object_object_get(FiremallACLJobj,"X_ZYXEL_ICMPType"));
+				icmptypecode = json_object_get_int(json_object_object_get(FiremallACLJobj,"X_ZYXEL_ICMPTypeCode"));
+				tmp = ICMPv6_type(icmptype,icmptypecode);
+				sprintf(buf, "ICMPv6:%s", tmp);
+				json_object_object_add(paramJobj, "Protocol", json_object_new_string(buf));
+				break;
+			default:
+				json_object_object_add(paramJobj, "Protocol", json_object_new_string(""));
+				break;
+		}
+		
+		
+		json_object_object_add(paramJobj, "Order", JSON_OBJ_COPY(json_object_object_get(FiremallACLJobj, "Order")));
+		json_object_object_add(paramJobj, "Description", JSON_OBJ_COPY(json_object_object_get(FiremallACLJobj, "Description")));
+		
 		SourceIP = json_object_get_string(json_object_object_get(FiremallACLJobj, "SourceIP"));
 		DestIP = json_object_get_string(json_object_object_get(FiremallACLJobj, "DestIP"));
-		if(!strcmp(SourceIP,""))
+		if(!strcmp(SourceIP,"")){
 			json_object_object_add(paramJobj, "SourceIP", json_object_new_string("Any"));
+		}
 		else{
-			SourceMask = json_object_get_int(json_object_object_get(FiremallACLJobj, "SourceMask"));
-			sprintf(SourceIP, "%s%s%d",SourceIP,"/",SourceMask);
-			json_object_object_add(paramJobj, "SourceIP", json_object_new_string(SourceIP));
+			SourceMask = json_object_get_string(json_object_object_get(FiremallACLJobj, "SourceMask"));
+			sprintf(buf, "%s/%s", SourceIP, SourceMask);
+			json_object_object_add(paramJobj, "SourceIP", json_object_new_string(buf));
 		}
-		if(!strcmp(DestIP,""))
+		if(!strcmp(DestIP,"")){
+
 			json_object_object_add(paramJobj, "DestIP", json_object_new_string("Any"));
+		}
 		else{
-			DestMask = json_object_get_int(json_object_object_get(FiremallACLJobj, "DestMask"));
-			sprintf(DestIP, "%s%s%d",DestIP,"/",DestMask);
-			json_object_object_add(paramJobj, "DestIP", json_object_new_string(SourceIP));
-		}
-		json_object_object_add(paramJobj, "Action", json_object_object_get(FiremallACLJobj, "Target"));
-		json_object_array_add(Jobj, JSON_OBJ_COPY(paramJobj));
-		zcfgFeJsonObjFree(paramJobj);
+			DestMask = json_object_get_string(json_object_object_get(FiremallACLJobj, "DestMask"));
+			sprintf(buf, "%s/%s", DestIP, DestMask);
+			json_object_object_add(paramJobj, "DestIP", json_object_new_string(buf));
+		}
+
+		json_object_object_add(paramJobj, "Action", JSON_OBJ_COPY(json_object_object_get(FiremallACLJobj, "Target")));
+		
+		json_object_array_add(Jobj, paramJobj);
+
+		zcfgFeJsonObjFree(FiremallACLJobj);
+		
 	}	
-	zcfgFeJsonObjFree(FiremallACLJobj);
+	
 	return ret;
 }
 
Index: libzcfg_fe_dal-1.0/zcfg_fe_dal.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/zcfg_fe_dal.c	2017-02-13 14:31:20.611126100 +0800
+++ libzcfg_fe_dal-1.0/zcfg_fe_dal.c	2017-02-13 15:22:07.433038980 +0800
@@ -191,7 +191,7 @@
 {"FIREWALL",		FIREWALL_param, 	zcfgFeDalFirewall,		NULL,						"add|edit",			"Firewall"}, //why no delete?
 {"DOS", 			FIREWALL_DOS_param, zcfgFeDalFirewallDos,	NULL,						"edit",				"Firewall"},
 {"PROTOCOL",		FIREWALL_PROTOCOL_param, zcfgFeDalFirewallProtocol,NULL,				"add|edit|delete", "Firewall"},
-{"ACL", 			FIREWALL_ACL_param, zcfgFeDalFirewallACL,	zcfgFeDalShowFirewallACL,	"add|edit|delete|get",	"Firewall"},
+{"FirewallAcl", 	FIREWALL_ACL_param, zcfgFeDalFirewallACL,	zcfgFeDalShowFirewallACL,	"add|edit|delete|get",	"Firewall"},
 {"WIFI_GENERAL",	WIFI_GENERAL_param,	zcfgFeDalWifiGeneral,   zcfgFeDalShowWifiGeneral,	"edit|get",			"Wireless"},
 {"MACFILTER",		MAC_Filter_param,	zcfgFeDalMACFilter,		NULL,						"edit",				"MAC_Filter"},
 {"QOS_GENERAL",		QosGeneral_param,	zcfgFeDalQosGeneral,	NULL,						"add|edit|delete",	"QoS"},
@@ -317,6 +317,9 @@
 	if(Jobj == NULL || paramList == NULL)
 		return true;
 
+
+	printf("Jobj=%s\n", json_object_to_json_string(Jobj));
+
 	for(i=0;paramList[i].paraName;i++){
 
         if(invalidParm != NULL)
