Index: libzcfg_fe_tr98-1.0/l2bridge.c
===================================================================
--- libzcfg_fe_tr98-1.0.orig/l2bridge.c	2015-08-25 19:00:34.157765495 +0800
+++ libzcfg_fe_tr98-1.0/l2bridge.c	2015-08-25 19:00:23.319033500 +0800
@@ -1,3 +1,6 @@
+
+#include <stdlib.h>
+#include <errno.h>
 #include <json/json.h>
 
 #include "zcfg_common.h"
@@ -522,6 +525,7 @@
 	return ZCFG_SUCCESS;
 }
 
+// InternetGatewayDevice.Layer2Bridging.Bridge.{i}.        Bridging.Bridge.{i}.
 zcfgRet_t l2BrObjAdd(char *tr98FullPathName, int *idx)
 {
 	zcfgRet_t ret;
@@ -1537,8 +1541,16 @@
 		if(!paramValue){
 			if(!strcmp(paramList->name, "PortEnable"))
 				paramValue = json_object_object_get(tr181BrPortObj, "Enable");
-			else if(!strcmp(paramList->name, "PortInterface"))
+			else if(!strcmp(paramList->name, "PortInterface")) {
 				paramValue = json_object_object_get(tr181BrPortObj, "X_ZYXEL_AvailableInterfaceKey");
+				if(paramValue) {
+					char portInterface[20] = {0};
+					sprintf(portInterface, "%d", json_object_get_int(paramValue));
+					json_object_object_add(*tr98Jobj, paramList->name, json_object_new_string(portInterface));
+				}
+				paramList++;
+				continue;
+			}
 		}
 
 		if(paramValue){
@@ -1556,6 +1568,197 @@
 	return ZCFG_SUCCESS;
 }
 
+#define MAX_INTERFACEKEY  20
+/*
+
+  InternetGatewayDevice.Layer2Bridging.Bridge.{i}.Port.{i}.        Bridging.Bridge.{i}.Port.{i}.
+*/
+zcfgRet_t l2BrPortObjSet(char *tr98FullPathName, int handler, struct json_object *tr98Jobj, struct json_object *multiJobj, char *paramfault)
+{
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	objIndex_t brBdgPtIid;
+	struct json_object *brBdgPtObj = NULL, *tmpObj = NULL;
+	char mappingPathName[MAX_TR181_PATHNAME] = {0};
+	struct json_object *paramValue, *tr181ParamValue;
+	tr98Parameter_t *paramList = NULL;
+
+	printf("%s\n", __FUNCTION__);
+
+	if((ret = zcfgFe98To181MappingNameGet(tr98FullPathName, mappingPathName)) != ZCFG_SUCCESS){
+		printf("98 to 181 Mapping Fail!!\n");
+		return ret;
+	}
+
+	if(!strstr(mappingPathName, "Bridge")) {
+		printf("%s: Mapping not correct\n", __FUNCTION__);
+		return ZCFG_INTERNAL_ERROR;
+	}
+
+	IID_INIT(brBdgPtIid);
+	sscanf(mappingPathName, "Bridging.Bridge.%hhu.Port.%hhu", &brBdgPtIid.idx[0], &brBdgPtIid.idx[1]);
+	brBdgPtIid.level = 2;
+	if((ret = zcfgFeObjJsonGet(RDM_OID_BRIDGING_BR_PORT, &brBdgPtIid, &brBdgPtObj)) != ZCFG_SUCCESS) {
+		printf("%s: Retrieve Bridging.Bridge.i.Port.i fail\n", __FUNCTION__);
+		return ret;
+	}
+
+	if(multiJobj){
+		tmpObj = brBdgPtObj;
+		brBdgPtObj = NULL;
+		brBdgPtObj = zcfgFeJsonMultiObjAppend(RDM_OID_BRIDGING_BR_PORT, &brBdgPtIid, multiJobj, tmpObj);
+		json_object_put(tmpObj);
+	}
+
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL){
+		/*Write new parameter value from tr98 object to tr181 objects*/
+		//printf("Parameter Name %s\n", paramList->name);
+		paramValue = json_object_object_get(tr98Jobj, paramList->name);
+		if(paramValue != NULL){
+			/*Write value from Config to Device.Bridging.Bridge.i*/
+			tr181ParamValue = json_object_object_get(brBdgPtObj, paramList->name);
+			if(tr181ParamValue != NULL) {
+				json_object_object_add(brBdgPtObj, paramList->name, JSON_OBJ_COPY(paramValue));
+				paramList++;
+				continue;
+			}
+		}
+
+		/*special case*/
+		if(strstr(paramList->name, "PortEnable") != NULL){
+			json_object_object_add(brBdgPtObj, "Enable", JSON_OBJ_COPY(paramValue));
+			paramList++;
+			continue;
+		}
+
+		if(strstr(paramList->name, "PortInterface") != NULL){
+			const char *portIntf = json_object_get_string(paramValue);
+			char *endptr = NULL;
+			long int interfaceKey = strtol(portIntf, &endptr, 10);
+			errno = 0;
+			if((errno == ERANGE && (interfaceKey == LONG_MAX || interfaceKey == LONG_MIN)) || (errno != 0 && interfaceKey == 0)
+				|| (interfaceKey > MAX_INTERFACEKEY)) {			
+				zcfgLog(ZCFG_LOG_ERR, "%s: %s not valid\n", __FUNCTION__, paramList->name);
+				if(!multiJobj)
+					json_object_put(brBdgPtObj);
+
+				return ZCFG_INVALID_PARAM_VALUE;
+			}
+			json_object_object_add(brBdgPtObj, "X_ZYXEL_AvailableInterfaceKey", json_object_new_int((int)interfaceKey));
+			paramList++;
+			continue;
+		}
+
+		paramList++;	
+	} /*Edn while*/
+
+	/*Set Bridging.Bridge.i */
+	if(multiJobj) {
+		//printf("%s: Deliver multiObj\n", __FUNCTION__);
+		zcfgLog(ZCFG_LOG_INFO, "%s: Deliver multiObj\n", __FUNCTION__);
+	}
+	else{
+		if((ret = zcfgFeObjJsonSet(RDM_OID_BRIDGING_BR, &brBdgPtIid, brBdgPtObj, NULL)) != ZCFG_SUCCESS ){
+			zcfgLog(ZCFG_LOG_ERR, "%s : Set Device.Bridging.Bridge.i.Port.i Fail\n", __FUNCTION__);
+			json_object_put(brBdgPtObj);
+			return ret;
+		}
+		else
+			zcfgLog(ZCFG_LOG_DEBUG, "%s : Set Device.Bridging.Bridge.i.Port.i Success\n", __FUNCTION__);
+
+		json_object_put(brBdgPtObj);	
+	}
+
+	return ZCFG_SUCCESS;
+}
+
+// InternetGatewayDevice.Layer2Bridging.Bridge.{i}.Port.
+zcfgRet_t l2BrPortObjAdd(char *tr98FullPathName, int *idx)
+{
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	objIndex_t objIid;
+	rdm_BridgingBrPort_t *brBdgPtObj = NULL;
+	char mappingPathName[MAX_TR181_PATHNAME] = {0};
+	char tr98TmpName[MAX_TR181_PATHNAME] = {0};
+	char *ptr = NULL;
+
+	printf("%s\n", __FUNCTION__);
+
+	strcpy(tr98TmpName, tr98FullPathName);
+	ptr = strstr(tr98TmpName, ".Port");
+	*ptr = '\0';
+
+	if((ret = zcfgFe98To181MappingNameGet(tr98TmpName, mappingPathName)) != ZCFG_SUCCESS){
+		zcfgLog(ZCFG_LOG_INFO, "%s: Mapping query fail\n", __FUNCTION__);
+		return ret;
+	}
+
+	IID_INIT(objIid);
+	sscanf(mappingPathName, "Bridging.Bridge.%hhu", &objIid.idx[0]);
+	objIid.level = 1;
+	if((ret = zcfgFeObjStructAdd(RDM_OID_BRIDGING_BR_PORT, &objIid, NULL)) != ZCFG_SUCCESS){
+		printf("%s: Add Bridge Port Object Fail!!\n", __FUNCTION__);
+		return ret;
+	}
+
+	if((ret = zcfgFeObjStructGet(RDM_OID_BRIDGING_BR_PORT, &objIid, (void **)&brBdgPtObj)) == ZCFG_SUCCESS){
+		brBdgPtObj->Enable = true;
+		brBdgPtObj->ManagementPort = false;
+		if((ret = zcfgFeObjStructSet(RDM_OID_BRIDGING_BR_PORT, &objIid, (void *)brBdgPtObj, NULL)) != ZCFG_SUCCESS)
+			printf("%s: Set Bridge Port Object Fail\n", __FUNCTION__);
+
+		zcfgFeObjStructFree(brBdgPtObj);
+	}
+
+	//add mapping
+#ifndef ZCFG_DYNAMIC_NAMEMAPPING
+	*idx = objIid.idx[0];
+#else
+	printf("%s: return %d\n", __FUNCTION__, ret);
+
+	if((ret == ZCFG_SUCCESS) || (ret == ZCFG_DELAY_APPLY)) {
+		objIndex_t tr98ObjIid;
+
+		IID_INIT(tr98ObjIid);
+		sscanf(tr98FullPathName, "InternetGatewayDevice.Layer2Bridging.Bridge.%hhu", &tr98ObjIid.idx[0]);
+		tr98ObjIid.level = 1;
+		if(zcfg98To181ObjMappingAdd(e_TR98_PORT, &tr98ObjIid, RDM_OID_BRIDGING_BR_PORT, &objIid) == ZCFG_SUCCESS) {
+			printf("%s: Added Bridge.Port %hhu\n", __FUNCTION__, tr98ObjIid.idx[1]);
+			*idx = tr98ObjIid.idx[1];
+		}
+	}
+#endif
+
+	return ret;
+}
+
+// InternetGatewayDevice.Layer2Bridging.Bridge.{i}.Port.
+zcfgRet_t l2BrPortObjDel(char *tr98FullPathName)
+{
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	objIndex_t objIid;
+	char mappingPathName[MAX_TR181_PATHNAME] = {0};
+
+	if((ret = zcfgFe98To181MappingNameGet(tr98FullPathName, mappingPathName)) != ZCFG_SUCCESS){
+		zcfgLog(ZCFG_LOG_INFO, "%s: Mapping query fail\n", __FUNCTION__);
+		return ret;
+	}
+
+	if(!strstr(mappingPathName, "Bridge")) {
+		printf("%s: Mapping not correct\n", __FUNCTION__);
+		return ZCFG_INTERNAL_ERROR;
+	}
+
+	IID_INIT(objIid);
+	sscanf(mappingPathName, "Bridging.Bridge.%hhu.Port.%hhu", &objIid.idx[0], &objIid.idx[1]);
+	objIid.level = 2;
+	ret = zcfgFeObjJsonDel(RDM_OID_BRIDGING_BR_PORT, &objIid, NULL);
+	if((ret != ZCFG_SUCCESS) && (ret != ZCFG_DELAY_APPLY))
+		printf("%s: Delete Bridging.Bridge.Port fail\n", __FUNCTION__);
+
+	return ret;
+}
+
 zcfgRet_t l2BrVlanObjGet(char *tr98FullPathName, int handler, struct json_object **tr98Jobj, bool updateFlag)
 {
 	zcfgRet_t ret;
Index: libzcfg_fe_tr98-1.0/l2bridge.h
===================================================================
--- libzcfg_fe_tr98-1.0.orig/l2bridge.h	2015-08-25 19:00:34.161765495 +0800
+++ libzcfg_fe_tr98-1.0/l2bridge.h	2015-08-25 18:59:30.215996200 +0800
@@ -22,6 +22,9 @@
 extern zcfgRet_t l2BrObjAttrSet(char *, int, char *, int , struct json_object *);
 
 extern zcfgRet_t l2BrPortObjGet(char *, int , struct json_object **, bool );
+extern zcfgRet_t l2BrPortObjSet(char *, int , struct json_object *, struct json_object *, char *);
+extern zcfgRet_t l2BrPortObjAdd(char *, int *);
+extern zcfgRet_t l2BrPortObjDel(char *);
 
 extern zcfgRet_t l2BrFilterObjGet(char *tr98FullPathName, int handler, struct json_object **tr98Jobj, bool updateFlag);
 extern zcfgRet_t l2BrFilterObjSet(char *tr98FullPathName, int handler, struct json_object *tr98Jobj, struct json_object *multiJobj);
Index: libzcfg_fe_tr98-1.0/zcfg_fe_tr98_handle.h
===================================================================
--- libzcfg_fe_tr98-1.0.orig/zcfg_fe_tr98_handle.h	2015-08-25 19:00:34.437765500 +0800
+++ libzcfg_fe_tr98-1.0/zcfg_fe_tr98_handle.h	2015-08-25 18:59:37.742426700 +0800
@@ -289,7 +289,7 @@
 {TR98_FWD,                      ATTR_INDEX_CREA,para_Fwd,               l3fwdFwdTbObjGet,        l3fwdFwdTbObjSet,       l3fwdFwdTbObjAdd, l3fwdFwdTbObjDel,  NULL, NULL, l3fwdFwdTbObjAttrSet},
 {TR98_L2_BR,                    0,               para_L2Br,              l2BridingObjGet,         NULL,                   NULL,             NULL,            l2BridingObjNotify, l2BridingObjAttrGet, l2BridingObjAttrSet},
 {TR98_BR,                       ATTR_INDEX_CREA, para_Br,                l2BrObjGet,              l2BrObjSet,             l2BrObjAdd,       l2BrObjDel,      l2BrObjNotify, l2BrObjAttrGet, l2BrObjAttrSet},
-{TR98_PORT,                     ATTR_INDEXNODE, para_Port,              l2BrPortObjGet,           NULL,         NULL,                   NULL,             NULL,            NULL, NULL},
+{TR98_PORT,                     ATTR_INDEX_CREA, para_Port,              l2BrPortObjGet,           l2BrPortObjSet,         l2BrPortObjAdd,   l2BrPortObjDel,   NULL,         NULL,           NULL},
 {TR98_VLAN,                     ATTR_INDEXNODE,  para_Vlan,              l2BrVlanObjGet,          l2BrVlanObjSet,        l2BrVlanObjAdd,   l2BrVlanObjDel,  l2BrVlanObjNotify, l2BrVlanObjAttrGet, l2BrVlanObjAttrSet},
 {TR98_FILTER,                   ATTR_INDEX_CREA, para_Filter,            l2BrFilterObjGet,        l2BrFilterObjSet,       l2BrFilterObjAdd, l2BrFilterObjDel,l2BrFilterObjNotify, l2BrFilterObjAttrGet, l2BrFilterObjAttrSet},
 {TR98_MARK,                     ATTR_INDEXNODE, para_Mark,              NULL,                    NULL,                   NULL,             NULL,            NULL},
