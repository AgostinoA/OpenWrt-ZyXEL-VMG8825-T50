Index: libzcfg_fe_tr98-1.0/l2bridge.c
===================================================================
--- libzcfg_fe_tr98-1.0.orig/l2bridge.c	2017-11-03 14:39:26.187716004 +0800
+++ libzcfg_fe_tr98-1.0/l2bridge.c	2017-11-03 14:46:47.363427109 +0800
@@ -2,6 +2,7 @@
 #include <stdlib.h>
 #include <errno.h>
 #include <json/json.h>
+#include <limits.h>
 
 #include "zcfg_common.h"
 #include "zcfg_fe_rdm_access.h"
@@ -45,8 +46,8 @@
 		else if (ptr = strstr(tr98pathname, "WANPPPConnection."))
 			ptr += 17;
 
-		*ptr = ipConnIindex; 
-		
+		*ptr = ipConnIindex;
+
 		if(zcfgFe98To181MappingNameGet(tr98pathname, tr181PathName) == ZCFG_SUCCESS){
 			IID_INIT(objIid);
 			objIid.level = 1;
@@ -79,7 +80,7 @@
 			ret = ZCFG_SUCCESS;
 		}
 	}
-	
+
 	return ret;
 }
 #endif
@@ -98,11 +99,11 @@
 	objIndex_t bridingIid;
 	struct json_object *bridingJobj = NULL;
 	struct json_object *paramValue = NULL;
-	tr98Parameter_t *paramList = NULL;	
+	tr98Parameter_t *paramList = NULL;
 	char zyxelPrefixParam[64] = {0};
 
 	printf("Enter %s\n", __FUNCTION__);
-	
+
 	if((ret = zcfgFe98To181MappingNameGet(tr98FullPathName, mappingPathName)) != ZCFG_SUCCESS){
 		printf("98 to 181 Mapping Fail!!\n");
 		return ret;
@@ -115,7 +116,7 @@
 	bridingOid = zcfgFeObjNameToObjId(tr181Obj, &bridingIid);
 	if((ret = feObjJsonGet(bridingOid, &bridingIid, &bridingJobj, updateFlag)) != ZCFG_SUCCESS)
 		return ret;
-	
+
 	/*fill up tr98 Bridging object*/
 	*tr98Jobj = json_object_new_object();
 	paramList = tr98Obj[handler].parameter;
@@ -164,7 +165,7 @@
 			sprintf(tr98Notify, "%s.%s", tr98ObjName, paramList->name);
 			break;
 		}
-		
+
 		if(strcmp(tr181ParamName, "X_ZYXEL_MaxMarkingEntries") == 0) {
 			found = true;
 			sprintf(tr98Notify, "%s.%s", tr98ObjName, "MaxMarkingEntries");
@@ -176,13 +177,13 @@
 			sprintf(tr98Notify, "%s.%s", tr98ObjName, "MarkingNumberOfEntries");
 			break;
 		}
-		
+
 		if(strcmp(tr181ParamName, "X_ZYXEL_AvailableInterfaceNumberOfEntries") == 0) {
 			found = true;
 			sprintf(tr98Notify, "%s.%s", tr98ObjName, "AvailableInterfaceNumberOfEntries");
 			break;
 		}
-		
+
 		paramList++;
 	}
 
@@ -207,12 +208,12 @@
 	if(zcfgFe98To181MappingNameGet(tr98FullPathName, mapObj) != ZCFG_SUCCESS) {
 		return ZCFG_INVALID_OBJECT;
 	}
-	
+
 
 	IID_INIT(devInfoIid);
 	snprintf(tr181Obj, sizeof(tr181Obj),"Device.%s", mapObj);
 	devInfoOid = zcfgFeObjNameToObjId(tr181Obj, &devInfoIid);
-		
+
 
 	/*fill up tr98 devInfo object*/
 	paramList = tr98Obj[handler].parameter;
@@ -221,7 +222,7 @@
 			paramList++;
 			continue;
 		}
-		
+
 		/*special case*/
 		if(strcmp(paramList->name, "MaxMarkingEntries") == 0){
 			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "X_ZYXEL_MaxMarkingEntries");
@@ -232,13 +233,13 @@
 		}else{
 			attrValue = zcfgFeParamAttrGetByName(devInfoOid, paramList->name);
 		}
-		
+
 		if(attrValue < 0 ) {
 			attrValue = 0;
 		}
 		break;
 	}
-	
+
 	return attrValue;
 }
 
@@ -256,7 +257,7 @@
 	if(zcfgFe98To181MappingNameGet(tr98FullPathName, mapObj) != ZCFG_SUCCESS) {
 		return ZCFG_INVALID_OBJECT;
 	}
-	
+
 
 	IID_INIT(devInfoIid);
 	snprintf(tr181Obj, sizeof(tr181Obj),"Device.%s", mapObj);
@@ -295,14 +296,14 @@
 		}else{
 			ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, paramList->name, attrValue);
 		}
-		
+
 		if( ret != ZCFG_SUCCESS){
 			zcfgLog(ZCFG_LOG_ERR, "%s(): set %d %s attribute fail\n", __FUNCTION__, devInfoOid, paramList->name);
 		}
 		break;
 
 	} /*Edn while*/
-	
+
 	return ret;
 }
 
@@ -357,7 +358,7 @@
 	}
 	else        /* mappingPathName will be Bridging */
 		ztrdbg(ZTR_DL_DEBUG, "%s : TR181 object %s\n", __FUNCTION__, mappingPathName);
-	
+
 	ptr = strrchr(mappingPathName, '.');
 	strcpy(tmpChar, ptr+1);
 	numOfInstance = atoi(tmpChar);
@@ -367,7 +368,7 @@
 	brOid = zcfgFeObjNameToObjId(tr181Obj, &brIid);
 	if((ret = feObjJsonGet(brOid, &brIid, &brJobj, updateFlag)) != ZCFG_SUCCESS)
 		return ret;
-	
+
 	/*fill up tr98 Bridging object*/
 	*tr98Jobj = json_object_new_object();
 	paramList = tr98Obj[handler].parameter;
@@ -398,17 +399,17 @@
 			if(paramValue != NULL){
 				json_object_object_add(*tr98Jobj, paramList->name, JSON_OBJ_COPY(paramValue));
 				paramList++;
-				continue;	
+				continue;
 			}
 		}
-		
+
 		if(strstr(paramList->name, "Enable") != NULL){
 			sprintf(paramName, "%s", "Enable");
 			paramValue = json_object_object_get(brJobj, paramName);
 			if(paramValue != NULL){
 				json_object_object_add(*tr98Jobj, paramList->name, JSON_OBJ_COPY(paramValue));
 				paramList++;
-				continue;	
+				continue;
 			}
 		}
 
@@ -418,10 +419,10 @@
 			if(paramValue != NULL){
 				json_object_object_add(*tr98Jobj, paramList->name, JSON_OBJ_COPY(paramValue));
 				paramList++;
-				continue;	
+				continue;
 			}
-		}	
-		
+		}
+
 		strcpy(zyxelPrefixParam, "X_ZYXEL_");
 		strcat(zyxelPrefixParam, paramList->name);
 		paramValue = json_object_object_get(brJobj, zyxelPrefixParam);
@@ -430,7 +431,7 @@
 			paramList++;
 			continue;
 		}
-		
+
 		/*Not defined in tr181, give it a default value*/
 		ztrdbg(ZTR_DL_INFO, "%s: Can't find parameter %s in TR181\n", __FUNCTION__, paramList->name);
 		paramList++;
@@ -454,7 +455,7 @@
 	char zyxelPrefixParam[64] = {0};
 
 	ztrdbg(ZTR_DL_INFO, "Enter %s\n", __FUNCTION__);
-	
+
 	if((ret = zcfgFe98To181MappingNameGet(tr98FullPathName, mappingPathName)) != ZCFG_SUCCESS){
 		ztrdbg(ZTR_DL_ERR, "98 to 181 Mapping Fail!!\n");
 		return ret;
@@ -472,7 +473,7 @@
 		brJobj = NULL;
 		brJobj = zcfgFeJsonMultiObjAppend(RDM_OID_BRIDGING_BR, &brIid, multiJobj, tmpObj);
 	}
-	
+
 	paramList = tr98Obj[handler].parameter;
 	while(paramList->name != NULL){
 		/*Write new parameter value from tr98 object to tr181 objects*/
@@ -494,7 +495,7 @@
 			paramList++;
 			continue;
 		}
-			
+
 		if(strstr(paramList->name, "Enable") != NULL){
 			json_object_object_add(brJobj, "Enable", JSON_OBJ_COPY(paramValue));
 			paramList++;
@@ -508,9 +509,9 @@
 			json_object_object_add(brJobj, zyxelPrefixParam, JSON_OBJ_COPY(paramValue));
 			paramList++;
 			continue;
-		}		
+		}
 
-		paramList++;	
+		paramList++;
 	} /*Edn while*/
 
 	/*Set Bridging.Bridge.i */
@@ -525,7 +526,7 @@
 		else
 			zcfgLog(ZCFG_LOG_DEBUG, "%s : Set Device.Bridging.Bridge.i Success\n", __FUNCTION__);
 
-		json_object_put(brJobj);	
+		json_object_put(brJobj);
 	}
 	return ZCFG_SUCCESS;
 }
@@ -536,29 +537,29 @@
 	zcfgRet_t ret;
 	objIndex_t iid;
 	rdm_BridgingBrPort_t *bridgePortObj = NULL;
-			
+
 	printf("Enter %s\n", __FUNCTION__);
-	
+
 	/*add the object "Device.Bridging.Bridge.i" */
-	IID_INIT(iid);	
+	IID_INIT(iid);
 	if((ret = zcfgFeObjStructAdd(RDM_OID_BRIDGING_BR, &iid, NULL)) != ZCFG_SUCCESS){
 		printf("Add Instance Fail!!\n");
 		return ret;
 	}
-	
+
 	/*add the management object "Device.Bridging.Bridge.i.Port.1"*/
 	if((ret = zcfgFeObjStructAdd(RDM_OID_BRIDGING_BR_PORT, &iid, NULL)) != ZCFG_SUCCESS){
 		printf("Add Instance Fail!!\n");
 		return ret;
 	}
 //printf("306 Level %d objIid.idx[%d,%d,%d,%d,%d,%d]\n",  iid.level, iid.idx[0], iid.idx[1], iid.idx[2], iid.idx[3], iid.idx[4], iid.idx[5]);
-		
+
 	if((ret = zcfgFeObjStructGet(RDM_OID_BRIDGING_BR_PORT, &iid, (void **)&bridgePortObj)) == ZCFG_SUCCESS){
 		bridgePortObj->Enable = true;
 		bridgePortObj->ManagementPort = true;
 		if((ret = zcfgFeObjStructSet(RDM_OID_BRIDGING_BR_PORT, &iid, (void *)bridgePortObj, NULL)) != ZCFG_SUCCESS)
 			printf("Set Bridge Port Object Fail\n");
-		
+
 		zcfgFeObjStructFree(bridgePortObj);
 	}
 	else
@@ -625,7 +626,7 @@
 			sprintf(tr98Notify, "%s.%s", tr98ObjName, paramList->name);
 			break;
 		}
-		
+
 		if(strcmp(tr181ParamName, "Standard") == 0) {
 			found = true;
 			sprintf(tr98Notify, "%s.%s", tr98ObjName, "BridgeStandard");
@@ -637,25 +638,25 @@
 			sprintf(tr98Notify, "%s.%s", tr98ObjName, "BridgeEnable");
 			break;
 		}
-		
+
 		if(strcmp(tr181ParamName, "Status") == 0) {
 			found = true;
 			sprintf(tr98Notify, "%s.%s", tr98ObjName, "BridgeStatus");
 			break;
 		}
-		
+
 		if(strcmp(tr181ParamName, "X_ZYXEL_BridgeName") == 0) {
 			found = true;
 			sprintf(tr98Notify, "%s.%s", tr98ObjName, "BridgeName");
 			break;
 		}
-		
+
 		if(strcmp(tr181ParamName, "X_ZYXEL_VLANID") == 0) {
 			found = true;
 			sprintf(tr98Notify, "%s.%s", tr98ObjName, "VLANID");
 			break;
 		}
-		
+
 		paramList++;
 	}
 
@@ -680,12 +681,12 @@
 	if(zcfgFe98To181MappingNameGet(tr98FullPathName, mapObj) != ZCFG_SUCCESS) {
 		return ZCFG_INVALID_OBJECT;
 	}
-	
+
 
 	IID_INIT(devInfoIid);
 	snprintf(tr181Obj, sizeof(tr181Obj),"Device.%s", mapObj);
 	devInfoOid = zcfgFeObjNameToObjId(tr181Obj, &devInfoIid);
-		
+
 
 	/*fill up tr98 devInfo object*/
 	paramList = tr98Obj[handler].parameter;
@@ -694,7 +695,7 @@
 			paramList++;
 			continue;
 		}
-		
+
 		/*special case*/
 		if(strcmp(paramList->name, "BridgeStandard") == 0){
 			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "Standard");
@@ -709,13 +710,13 @@
 		}else{
 			attrValue = zcfgFeParamAttrGetByName(devInfoOid, paramList->name);
 		}
-		
+
 		if(attrValue < 0 ) {
 			attrValue = 0;
 		}
 		break;
 	}
-	
+
 	return attrValue;
 }
 
@@ -733,7 +734,7 @@
 	if(zcfgFe98To181MappingNameGet(tr98FullPathName, mapObj) != ZCFG_SUCCESS) {
 		return ZCFG_INVALID_OBJECT;
 	}
-	
+
 
 	IID_INIT(devInfoIid);
 	snprintf(tr181Obj, sizeof(tr181Obj),"Device.%s", mapObj);
@@ -760,7 +761,7 @@
 		}else{
 			attrValue = zcfgFeParamAttrGetByName(devInfoOid, paramList->name);
 		}
-		
+
 		if(attrValue < 0) {
 			ret = ZCFG_INVALID_ARGUMENTS;
 			break;
@@ -781,14 +782,14 @@
 		}else{
 			ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, paramList->name, attrValue);
 		}
-		
+
 		if( ret != ZCFG_SUCCESS){
 			zcfgLog(ZCFG_LOG_ERR, "%s(): set %d %s attribute fail\n", __FUNCTION__, devInfoOid, paramList->name);
 		}
 		break;
 
 	} /*Edn while*/
-	
+
 	return ret;
 }
 
@@ -828,7 +829,7 @@
 
 	ptr = strrchr(mappingPathName, '.');
 	strcpy(tmpChar, ptr+1);
-	numOfInstance = atoi(tmpChar);	
+	numOfInstance = atoi(tmpChar);
 
 	IID_INIT(brFilterIid);
 #if 0
@@ -843,7 +844,7 @@
 		ztrdbg(ZTR_DL_ERR, "%s : Get Obj Fail\n", __FUNCTION__);
 		return ret;
 	}
-#endif	
+#endif
 
 	/*fill up tr98 Bridging object*/
 	*tr98Jobj = json_object_new_object();
@@ -864,7 +865,7 @@
 			paramList++;
 			continue;
 		}
-		
+
 		/*we default use index number of object "Device.Bridging.Bridge.i" as the parameter 'FilterBridgeReference' under tr98 */
 		if(strstr(paramList->name, "FilterBridgeReference") != NULL){
 			//sprintf(paramName, "%s", "Bridge");
@@ -875,7 +876,7 @@
 				ptr = NULL;
 				ptr = strrchr(filterBrRef, '.');
 				strcpy(tmpChar, ptr+1);
-				numOfInstance = atoi(tmpChar);	
+				numOfInstance = atoi(tmpChar);
 				json_object_object_add(*tr98Jobj, paramList->name,  json_object_new_int(numOfInstance));
 			}
 			else
@@ -885,10 +886,10 @@
 			continue;
 		}
 
-		/*  we default use parameter 'X_ZYXEL_AvailableInterfaceKey' under object "Bridging.Bridge.i.Port.i" as the parameter 'FilterInterface' under tr98. 
-		 *  actually in tr98 , the parameter 'FilterInterface' is associated with the corresponding 'AvailableInterfaceKey' under tr98 object 
+		/*  we default use parameter 'X_ZYXEL_AvailableInterfaceKey' under object "Bridging.Bridge.i.Port.i" as the parameter 'FilterInterface' under tr98.
+		 *  actually in tr98 , the parameter 'FilterInterface' is associated with the corresponding 'AvailableInterfaceKey' under tr98 object
 		 *  'InternetGatewayDevice.Layer2Bridging.AvailableInterface.i',
-		 *  but in tr181, it doesn't have the AvailableInterface object, so we add the parameters which belong 'AvailableInterface' under object 'Bridging.Bridge.i.Port.i'. 
+		 *  but in tr181, it doesn't have the AvailableInterface object, so we add the parameters which belong 'AvailableInterface' under object 'Bridging.Bridge.i.Port.i'.
 		 */
 		if(strstr(paramList->name, "FilterInterface") != NULL){
 			//sprintf(paramName, "%s", "Interface");
@@ -901,7 +902,7 @@
 					sprintf(numOfFilterIntf,"%d",brPortObj->X_ZYXEL_AvailableInterfaceKey);
 					zcfgFeObjStructFree(brPortObj);
 				}
-				
+
 				if(strlen(numOfFilterIntf))
 					json_object_object_add(*tr98Jobj, paramList->name,  json_object_new_string(numOfFilterIntf));
 				else
@@ -920,7 +921,7 @@
 			if(paramValue != NULL) {
 				json_object_object_add(*tr98Jobj, paramList->name, JSON_OBJ_COPY(paramValue));
 				paramList++;
-				continue;	
+				continue;
 			}
 		}
 
@@ -930,7 +931,7 @@
 			if(paramValue != NULL) {
 				json_object_object_add(*tr98Jobj, paramList->name, JSON_OBJ_COPY(paramValue));
 				paramList++;
-				continue;	
+				continue;
 			}
 		}
 
@@ -1006,7 +1007,7 @@
 	bool bridgeSpecified = false;
 
 	printf("Enter %s\n", __FUNCTION__);
-	
+
 	if((ret = zcfgFe98To181MappingNameGet(tr98FullPathName, mappingPathName)) != ZCFG_SUCCESS){
 		printf("98 to 181 Mapping Fail!!\n");
 		return ret;
@@ -1027,7 +1028,7 @@
 		brFilterJobj = NULL;
 		brFilterJobj = zcfgFeJsonMultiObjAppend(RDM_OID_BRIDGING_FILTER, &brFilterIid, multiJobj, tmpObj);
 	}
-	
+
 	paramList = tr98Obj[handler].parameter;
 	while(paramList->name != NULL){
 		/*Write new parameter value from tr98 object to tr181 objects*/
@@ -1078,13 +1079,13 @@
 						zcfgFeObjStructFree(brPortObj);
 				}
 			}
-			
+
 			if(strlen(brPortPath))
 				json_object_object_add(brFilterJobj, "Interface", json_object_new_string(brPortPath));
 			paramList++;
 			continue;
-		}		
-			
+		}
+
 		strcpy(zyxelPrefixParam, "X_ZYXEL_");
 		strcat(zyxelPrefixParam, paramList->name);
 		tr181ParamValue = json_object_object_get(brFilterJobj, zyxelPrefixParam);
@@ -1092,9 +1093,9 @@
 			json_object_object_add(brFilterJobj, zyxelPrefixParam, JSON_OBJ_COPY(paramValue));
 			paramList++;
 			continue;
-		}		
+		}
 
-		paramList++;	
+		paramList++;
 	} /*Edn while*/
 
 	if(bridgeReference > 0) {
@@ -1155,7 +1156,7 @@
 {
 	zcfgRet_t ret;
 	objIndex_t objIid;
-		
+
 	ztrdbg(ZTR_DL_INFO, "Enter %s\n", __FUNCTION__);
 
 	/*add the object "Device.Bridging.Filter.i" */
@@ -1181,7 +1182,7 @@
 
 	if((ret = zcfgFe98To181MappingNameGet(tr98FullPathName, mappingPathName)) != ZCFG_SUCCESS)
 		return ret;
-		
+
 	IID_INIT(objIid);
 	ztrdbg(ZTR_DL_DEBUG, "%s: mappingPathName %s\n", __FUNCTION__, mappingPathName);
 	sprintf(tr181Obj, "Device.%s", mappingPathName);
@@ -1213,7 +1214,7 @@
 			sprintf(tr98Notify, "%s.%s", tr98ObjName, paramList->name);
 			break;
 		}
-		
+
 		if(strcmp(tr181ParamName, "Bridge") == 0) {
 			found = true;
 			sprintf(tr98Notify, "%s.%s", tr98ObjName, "FilterBridgeReference");
@@ -1225,19 +1226,19 @@
 			sprintf(tr98Notify, "%s.%s", tr98ObjName, "FileterEnable");
 			break;
 		}
-		
+
 		if(strcmp(tr181ParamName, "Status") == 0) {
 			found = true;
 			sprintf(tr98Notify, "%s.%s", tr98ObjName, "FilterStatus");
 			break;
 		}
-		
+
 		if(strcmp(tr181ParamName, "Interface") == 0) {
 			found = true;
 			sprintf(tr98Notify, "%s.%s", tr98ObjName, "FilterInterface");
 			break;
 		}
-		
+
 		paramList++;
 	}
 
@@ -1262,12 +1263,12 @@
 	if(zcfgFe98To181MappingNameGet(tr98FullPathName, mapObj) != ZCFG_SUCCESS) {
 		return ZCFG_INVALID_OBJECT;
 	}
-	
+
 
 	IID_INIT(devInfoIid);
 	snprintf(tr181Obj, sizeof(tr181Obj),"Device.%s", mapObj);
 	devInfoOid = zcfgFeObjNameToObjId(tr181Obj, &devInfoIid);
-		
+
 
 	/*fill up tr98 devInfo object*/
 	paramList = tr98Obj[handler].parameter;
@@ -1276,7 +1277,7 @@
 			paramList++;
 			continue;
 		}
-		
+
 		/*special case*/
 		if(strcmp(paramList->name, "FilterBridgeReference") == 0){
 			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "Bridge");
@@ -1289,13 +1290,13 @@
 		}else{
 			attrValue = zcfgFeParamAttrGetByName(devInfoOid, paramList->name);
 		}
-		
+
 		if(attrValue < 0 ) {
 			attrValue = 0;
 		}
 		break;
 	}
-	
+
 	return attrValue;
 }
 
@@ -1313,7 +1314,7 @@
 	if(zcfgFe98To181MappingNameGet(tr98FullPathName, mapObj) != ZCFG_SUCCESS) {
 		return ZCFG_INVALID_OBJECT;
 	}
-	
+
 
 	IID_INIT(devInfoIid);
 	snprintf(tr181Obj, sizeof(tr181Obj),"Device.%s", mapObj);
@@ -1338,7 +1339,7 @@
 		}else{
 			attrValue = zcfgFeParamAttrGetByName(devInfoOid, paramList->name);
 		}
-		
+
 		if(attrValue < 0) {
 			ret = ZCFG_INVALID_ARGUMENTS;
 			break;
@@ -1357,14 +1358,14 @@
 		}else{
 			ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, paramList->name, attrValue);
 		}
-		
+
 		if( ret != ZCFG_SUCCESS){
 			zcfgLog(ZCFG_LOG_ERR, "%s(): set %d %s attribute fail\n", __FUNCTION__, devInfoOid, paramList->name);
 		}
 		break;
 
 	} /*Edn while*/
-	
+
 	return ret;
 }
 
@@ -1393,12 +1394,12 @@
 	}
 	else   /* mappingPathName will be Bridging */
 		printf("TR181 object %s\n", mappingPathName);
-		
+
 	IID_INIT(objIid);
 #if 0
 	sprintf(tr181Obj, "Device.%s", mappingPathName);
 	oid = zcfgFeObjNameToObjId(tr181Obj, &objIid);
-	
+
 	if((ret = feObjJsonGet(oid, &objIid, &brPortJobj, updateFlag)) != ZCFG_SUCCESS)
 		return ret;
 #else
@@ -1410,19 +1411,19 @@
 	/*fill up tr98 Bridging object*/
 	*tr98Jobj = json_object_new_object();
 	paramList = tr98Obj[handler].parameter;
-	while(paramList->name != NULL){		
+	while(paramList->name != NULL){
 		/*special case*/
 		if(strstr(paramList->name, "InterfaceReference") != NULL){
-			sprintf(tr181Obj, "%s", json_object_get_string(json_object_object_get(brPortJobj, "LowerLayers")));	
+			sprintf(tr181Obj, "%s", json_object_get_string(json_object_object_get(brPortJobj, "LowerLayers")));
 			zcfgFe181To98MappingNameGet(tr181Obj, mapping98ObjName);
 			json_object_object_add(*tr98Jobj, paramList->name, json_object_new_string(mapping98ObjName));
 			paramList++;
 			continue;
 		}
-		
+
 		strcpy(zyxelPrefixParam, "X_ZYXEL_");
 		strcat(zyxelPrefixParam, paramList->name);
-		paramValue = json_object_object_get(brPortJobj, zyxelPrefixParam);	
+		paramValue = json_object_object_get(brPortJobj, zyxelPrefixParam);
 		if(paramValue != NULL){
 			json_object_object_add(*tr98Jobj, paramList->name, JSON_OBJ_COPY(paramValue));
 			paramList++;
@@ -1457,7 +1458,7 @@
 			sprintf(tr98Notify, "%s.%s", tr98ObjName, paramList->name);
 			break;
 		}
-		
+
 		if(strcmp(tr181ParamName, "LowerLayers") == 0) {
 			found = true;
 			sprintf(tr98Notify, "%s.%s", tr98ObjName, "InterfaceReference");
@@ -1469,13 +1470,13 @@
 			sprintf(tr98Notify, "%s.%s", tr98ObjName, "AvailableInterfaceKey");
 			break;
 		}
-		
+
 		if(strcmp(tr181ParamName, "X_ZYXEL_InterfaceType") == 0) {
 			found = true;
 			sprintf(tr98Notify, "%s.%s", tr98ObjName, "InterfaceType");
 			break;
 		}
-		
+
 		paramList++;
 	}
 
@@ -1500,12 +1501,12 @@
 	if(zcfgFe98To181MappingNameGet(tr98FullPathName, mapObj) != ZCFG_SUCCESS) {
 		return ZCFG_INVALID_OBJECT;
 	}
-	
+
 
 	IID_INIT(devInfoIid);
 	snprintf(tr181Obj, sizeof(tr181Obj),"Device.%s", mapObj);
 	devInfoOid = zcfgFeObjNameToObjId(tr181Obj, &devInfoIid);
-		
+
 
 	/*fill up tr98 devInfo object*/
 	paramList = tr98Obj[handler].parameter;
@@ -1514,7 +1515,7 @@
 			paramList++;
 			continue;
 		}
-		
+
 		/*special case*/
 		if(strcmp(paramList->name, "InterfaceReference") == 0){
 			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "LowerLayers");
@@ -1525,13 +1526,13 @@
 		}else{
 			attrValue = zcfgFeParamAttrGetByName(devInfoOid, paramList->name);
 		}
-		
+
 		if(attrValue < 0 ) {
 			attrValue = 0;
 		}
 		break;
 	}
-	
+
 	return attrValue;
 }
 
@@ -1549,7 +1550,7 @@
 	if(zcfgFe98To181MappingNameGet(tr98FullPathName, mapObj) != ZCFG_SUCCESS) {
 		return ZCFG_INVALID_OBJECT;
 	}
-	
+
 
 	IID_INIT(devInfoIid);
 	snprintf(tr181Obj, sizeof(tr181Obj),"Device.%s", mapObj);
@@ -1572,7 +1573,7 @@
 		}else{
 			attrValue = zcfgFeParamAttrGetByName(devInfoOid, paramList->name);
 		}
-		
+
 		if(attrValue < 0) {
 			ret = ZCFG_INVALID_ARGUMENTS;
 			break;
@@ -1589,7 +1590,7 @@
 		}else{
 			ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, paramList->name, attrValue);
 		}
-		
+
 		if(strcmp(paramList->name, "InterfaceReference") == 0){
 			ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, "LowerLayers", attrValue);
 		}else if(strcmp(paramList->name, "AvailableInterfaceKey") == 0){
@@ -1605,7 +1606,7 @@
 		break;
 
 	} /*Edn while*/
-	
+
 	return ret;
 }
 
@@ -1646,7 +1647,7 @@
 				paramValue = json_object_object_get(tr181BrPortObj, "X_ZYXEL_AvailableInterfaceKey");
 				if(paramValue) {
 					char portInterface[20] = {0};
-					sprintf(portInterface, "%d", json_object_get_int(paramValue));
+					sprintf(portInterface, "%lld", json_object_get_int(paramValue));
 					json_object_object_add(*tr98Jobj, paramList->name, json_object_new_string(portInterface));
 				}
 				paramList++;
@@ -1692,7 +1693,7 @@
 	else if(interfaceKey == 12) \
 		sprintf(ifName, "wl1.3"); \
 }
-			
+
 /*
 
   InternetGatewayDevice.Layer2Bridging.Bridge.{i}.Port.{i}.        Bridging.Bridge.{i}.Port.{i}.
@@ -1763,7 +1764,7 @@
 
 			errno = 0;
 			if((errno == ERANGE && (interfaceKey == LONG_MAX || interfaceKey == LONG_MIN)) || (errno != 0 && interfaceKey == 0)
-				|| (interfaceKey > MAX_INTERFACEKEY)) {			
+				|| (interfaceKey > MAX_INTERFACEKEY)) {
 				zcfgLog(ZCFG_LOG_ERR, "%s: %s not valid\n", __FUNCTION__, paramList->name);
 				if(!multiJobj)
 					json_object_put(brBdgPtObj);
@@ -1798,7 +1799,7 @@
 			continue;
 		}
 
-		paramList++;	
+		paramList++;
 	} /*Edn while*/
 
 	/*Set Bridging.Bridge.i */
@@ -1815,7 +1816,7 @@
 		else
 			zcfgLog(ZCFG_LOG_DEBUG, "%s : Set Device.Bridging.Bridge.i.Port.i Success\n", __FUNCTION__);
 
-		json_object_put(brBdgPtObj);	
+		json_object_put(brBdgPtObj);
 	}
 
 	return ZCFG_SUCCESS;
@@ -1952,15 +1953,15 @@
 	char mappingPathName[128] = {0};
 	char tr181Obj[128] = {0};
 	char tmpChar[4] ={0};
-	char paramName[64] = {0};
+	//char paramName[64] = {0};
 	uint32_t  vlanOid = 0;
 	objIndex_t vlanIid;
 	struct json_object *vlanJobj = NULL;
 	struct json_object *paramValue = NULL;
 	tr98Parameter_t *paramList = NULL;
-	uint8_t numOfInstance = 0;
+	uint8_t numOfInstance;
 	char *ptr = NULL;
-	char zyxelPrefixParam[64] = {0};
+	//char zyxelPrefixParam[64] = {0};
 #ifdef SUNRISE_BRIDGE_INDEX_CUSTOMIZATION
 	char tr98vlanPathName[128];
 #endif
@@ -1989,7 +1990,7 @@
 	else
 		printf("TR181 object %s\n", mappingPathName);
 #endif
-	
+
 	ptr = strstr(mappingPathName, "VLANTermination.");
 	strcpy(tmpChar, ptr+16);
 	numOfInstance = atoi(tmpChar);
@@ -2000,7 +2001,7 @@
 	if((ret = feObjJsonGet(vlanOid, &vlanIid, &vlanJobj, updateFlag)) != ZCFG_SUCCESS){
 		return ret;
 	}
-	
+
 	*tr98Jobj = json_object_new_object();
 	paramList = tr98Obj[handler].parameter;
 	while(paramList->name != NULL){
@@ -2035,9 +2036,9 @@
 			paramList++;
 			continue;
 		}
-		
+
 #endif
-		
+
 		/*Not defined in tr181, give it a default value*/
 		printf("Can't find parameter %s in TR181\n", paramList->name);
 		paramList++;
@@ -2058,7 +2059,7 @@
 	struct json_object *tr181ParamValue = NULL;
 	struct json_object *tmpObj = NULL;
 	tr98Parameter_t *paramList = NULL;
-	char zyxelPrefixParam[64] = {0};
+	//char zyxelPrefixParam[64] = {0};
 #ifdef SUNRISE_BRIDGE_INDEX_CUSTOMIZATION
 	char tr98vlanPathName[128] = {0};
 	char *ptr = NULL;
@@ -2072,7 +2073,7 @@
 		if (getMappingVlanTermPathName(*ptr ,tr98vlanPathName) != ZCFG_SUCCESS)
 			return ZCFG_NO_SUCH_OBJECT;
 	}
-	
+
 	printf("tr98vlanPathName=%s\n",tr98vlanPathName);
 	if((ret = zcfgFe98To181MappingNameGet(tr98vlanPathName, mappingPathName)) != ZCFG_SUCCESS){
 		printf("98 to 181 Mapping Fail!!\n");
@@ -2100,7 +2101,7 @@
 		vlanJobj = NULL;
 		vlanJobj = zcfgFeJsonMultiObjAppend(RDM_OID_ETH_VLAN_TERM, &vlanIid, multiJobj, tmpObj);
 	}
-	
+
 	paramList = tr98Obj[handler].parameter;
 	while(paramList->name != NULL){
 		/*Write new parameter value from tr98 object to tr181 objects*/
@@ -2137,7 +2138,7 @@
 			continue;
 		}
 #endif
-		paramList++;	
+		paramList++;
 	} /*Edn while*/
 
 	if(multiJobj)
@@ -2151,7 +2152,7 @@
 		else
 			zcfgLog(ZCFG_LOG_DEBUG, "%s : Set Device.Ethernet.VLANTermination.i Success\n", __FUNCTION__);
 
-		json_object_put(vlanJobj);	
+		json_object_put(vlanJobj);
 	}
 	return ZCFG_SUCCESS;
 }
@@ -2167,8 +2168,8 @@
 #endif
 
 	printf("Enter %s\n", __FUNCTION__);
-	
-	
+
+
 #ifdef SUNRISE_TR98_CUSTOMIZATION
 	printf("tr98FullPathName=%s\n", tr98FullPathName);
 
@@ -2198,8 +2199,8 @@
 		printf("Add Instance Fail!!\n");
 		return ret;
 	}
-	
-#ifdef SUNRISE_TR98_CUSTOMIZATION	
+
+#ifdef SUNRISE_TR98_CUSTOMIZATION
 	*idx = 1;
 #else
 	*idx = objIid.idx[0];
@@ -2228,7 +2229,7 @@
 		if (getMappingVlanTermPathName(*ptr ,tr98vlanPathName) != ZCFG_SUCCESS)
 			return ZCFG_NO_SUCH_OBJECT;
 	}
-	
+
 	printf("tr98vlanPathName=%s\n",tr98vlanPathName);
 
 	if((ret = zcfgFe98To181MappingNameGet(tr98vlanPathName, mappingPathName)) != ZCFG_SUCCESS)
@@ -2237,7 +2238,7 @@
 	if((ret = zcfgFe98To181MappingNameGet(tr98FullPathName, mappingPathName)) != ZCFG_SUCCESS)
 		return ret;
 #endif
-		
+
 	IID_INIT(objIid);
 	printf("mappingPathName %s\n", mappingPathName);
 	sprintf(tr181Obj, "Device.%s", mappingPathName);
@@ -2273,7 +2274,7 @@
 			sprintf(tr98Notify, "%s.%s", tr98ObjName, paramList->name);
 			break;
 		}
-		
+
 		if(strcmp(tr181ParamName, "Enable") == 0) {
 			found = true;
 			sprintf(tr98Notify, "%s.%s", tr98ObjName, "VLANEnable");
@@ -2285,7 +2286,7 @@
 			sprintf(tr98Notify, "%s.%s", tr98ObjName, "VLANName");
 			break;
 		}
-		
+
 		paramList++;
 	}
 
@@ -2335,7 +2336,7 @@
 	IID_INIT(devInfoIid);
 	snprintf(tr181Obj, sizeof(tr181Obj),"Device.%s", mapObj);
 	devInfoOid = zcfgFeObjNameToObjId(tr181Obj, &devInfoIid);
-		
+
 
 	/*fill up tr98 devInfo object*/
 	paramList = tr98Obj[handler].parameter;
@@ -2344,7 +2345,7 @@
 			paramList++;
 			continue;
 		}
-		
+
 		/*special case*/
 		if(strcmp(paramList->name, "VLANEnable") == 0){
 			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "Enable");
@@ -2353,13 +2354,13 @@
 		}else{
 			attrValue = zcfgFeParamAttrGetByName(devInfoOid, paramList->name);
 		}
-		
+
 		if(attrValue < 0 ) {
 			attrValue = 0;
 		}
 		break;
 	}
-	
+
 	return attrValue;
 }
 
@@ -2385,7 +2386,7 @@
 		if (getMappingVlanTermPathName(*ptr ,tr98vlanPathName) != ZCFG_SUCCESS)
 			return ZCFG_NO_SUCH_OBJECT;
 	}
-	
+
 	printf("tr98vlanPathName=%s\n",tr98vlanPathName);
 	if((ret = zcfgFe98To181MappingNameGet(tr98vlanPathName, mapObj)) != ZCFG_SUCCESS){
 		printf("98 to 181 Mapping Fail!!\n");
@@ -2418,7 +2419,7 @@
 		}else{
 			attrValue = zcfgFeParamAttrGetByName(devInfoOid, paramList->name);
 		}
-		
+
 		if(attrValue < 0) {
 			ret = ZCFG_INVALID_ARGUMENTS;
 			break;
@@ -2433,14 +2434,14 @@
 		}else{
 			ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, paramList->name, attrValue);
 		}
-		
+
 		if( ret != ZCFG_SUCCESS){
 			zcfgLog(ZCFG_LOG_ERR, "%s(): set %d %s attribute fail\n", __FUNCTION__, devInfoOid, paramList->name);
 		}
 		break;
 
 	} /*Edn while*/
-	
+
 	return ret;
 }
 
