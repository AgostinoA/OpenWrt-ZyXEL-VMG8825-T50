Index: libzcfg_fe_tr98-1.0/l3fwd.c
===================================================================
--- libzcfg_fe_tr98-1.0.orig/l3fwd.c	2017-01-11 18:45:58.861730097 +0800
+++ libzcfg_fe_tr98-1.0/l3fwd.c	2017-01-11 18:46:05.899643500 +0800
@@ -56,6 +56,44 @@
         return ZCFG_SUCCESS;
 }
 
+zcfgRet_t ifNameToIpIfaceName(const char *ifName, char *ipIfaceName)
+{
+	objIndex_t objIid;
+	struct json_object *ifaceObj = NULL;
+
+	//ifName, ipIfaceName
+	if(strlen(ifName) == 0)
+		return ZCFG_NO_SUCH_OBJECT;
+
+	int objNum = strstr(ifName, "ppp") ? RDM_OID_PPP_IFACE : RDM_OID_IP_IFACE;
+
+
+	IID_INIT(objIid);
+	while(zcfgFeObjJsonGetNextWithoutUpdate(objNum, &objIid, &ifaceObj) == ZCFG_SUCCESS){
+		const char *X_ZYXEL_IfName = json_object_get_string(json_object_object_get(ifaceObj, "X_ZYXEL_IfName"));
+		if(!strcmp(X_ZYXEL_IfName, ifName)){
+			json_object_put(ifaceObj);
+			if(objNum == RDM_OID_PPP_IFACE){
+				char pppIfaceName[30] = {0};
+				sprintf(pppIfaceName, "PPP.Interface.%hhu", objIid.idx[0]);
+				zcfgFeTr181IfaceStackHigherLayerGet(pppIfaceName, ipIfaceName);
+				if(!strstr(ipIfaceName, "IP.Interface"))
+					ipIfaceName[0] = '\0';
+			}else{
+				sprintf(ipIfaceName, "IP.Interface.%hhu", objIid.idx[0]);
+			}
+
+			if(strlen(ipIfaceName))
+				return ZCFG_SUCCESS;
+			else
+				return ZCFG_NO_SUCH_OBJECT;
+		}
+		json_object_put(ifaceObj);
+	}
+
+	return ZCFG_NO_SUCH_OBJECT;
+}
+
 /*
  *   TR98 Object Name : InternetGatewayDevice.Layer3Forwarding
  *
@@ -82,6 +120,7 @@
 		printf("%s : Get Routing.Router.1 Fail\n", __FUNCTION__);
 		return ZCFG_INTERNAL_ERROR;
 	}
+#if 0
 	strcpy(X_ZYXEL_ActiveDefaultGateway, routerObj->X_ZYXEL_ActiveDefaultGateway);
 
 	intf = strtok_r(X_ZYXEL_ActiveDefaultGateway, ",", &tmp_ptr);
@@ -106,14 +145,22 @@
 		}
 		intf = strtok_r(NULL, ",", &tmp_ptr);
 	}
-
+#endif
 	*tr98Jobj = json_object_new_object();
-	json_object_object_add(*tr98Jobj, "DefaultConnectionService", json_object_new_string(DefaultConnectionService));
+	//json_object_object_add(*tr98Jobj, "DefaultConnectionService", json_object_new_string(DefaultConnectionService));
 	json_object_object_add(*tr98Jobj, "ForwardNumberOfEntries", json_object_new_int(routerObj->IPv4ForwardingNumberOfEntries));
 	json_object_object_add(*tr98Jobj, "X_ZYXEL_AutoSecureDefaultIface", json_object_new_boolean(routerObj->X_ZYXEL_AutoSecureDefaultIface));
 	
 	X_ZYXEL_ActiveDefaultGateway[0] = '\0';
 	l3fwdGetDfGwByRtTable(X_ZYXEL_ActiveDefaultGateway, 4);
+	char ipIfaceName[300] = {0};
+	if(ifNameToIpIfaceName((const char *)X_ZYXEL_ActiveDefaultGateway, ipIfaceName) == ZCFG_SUCCESS){
+		char *tr98WanIpIface = translateWanIpIface(TRANS_WANIPIFACE_181TO98, ipIfaceName);
+		if(tr98WanIpIface){
+			json_object_object_add(*tr98Jobj, "DefaultConnectionService", json_object_new_string(tr98WanIpIface));
+			free(tr98WanIpIface);
+		}
+	}
 	json_object_object_add(*tr98Jobj, "X_ZYXEL_DefaultGwInterface", json_object_new_string(X_ZYXEL_ActiveDefaultGateway));
 
 	zcfgFeObjStructFree(routerObj);
@@ -131,7 +178,6 @@
 {
 	zcfgRet_t ret = ZCFG_SUCCESS;
 	objIndex_t objIid;
-	char defaultIfaceName[MAX_TR181_PATHNAME] = {0};
 	struct json_object *routerObj = NULL, *paramValue = NULL;
 	char DefaultConnectionService[513] = {0};
 	char X_ZYXEL_ActiveDefaultGateway[321] = {0};
@@ -145,18 +191,38 @@
 	IID_INIT(objIid);
 	objIid.level = 1;
 	objIid.idx[0] = 1;
-	if(zcfgFeObjJsonGet(RDM_OID_ROUTING_ROUTER, &objIid, (void **)&routerObj) != ZCFG_SUCCESS ) {
+	if(zcfgFeObjJsonGet(RDM_OID_ROUTING_ROUTER, &objIid, &routerObj) != ZCFG_SUCCESS ) {
 		printf("%s : Get Routing.Router.1 Fail\n", __FUNCTION__);
 		return ZCFG_INTERNAL_ERROR;
 	}
+	const char *tr181_X_ZYXEL_ActiveDefaultGateway = json_object_get_string(json_object_object_get(routerObj, "X_ZYXEL_ActiveDefaultGateway"));
 
 	if(paramValue = json_object_object_get(tr98Jobj, "X_ZYXEL_AutoSecureDefaultIface"))
 		json_object_object_add(routerObj, "X_ZYXEL_AutoSecureDefaultIface", JSON_OBJ_COPY(paramValue));
 
 	if(paramValue = json_object_object_get(tr98Jobj, "DefaultConnectionService")){
-		strcpy(DefaultConnectionService, json_object_get_string(paramValue));
-		printf("DefaultConnectionService=%s\n", DefaultConnectionService);
+		const char *tr98DefaultConnectionService = json_object_get_string(paramValue);
+		if(strlen(tr98DefaultConnectionService) && (!strstr(tr98DefaultConnectionService, "WANDevice") || !strstr(tr98DefaultConnectionService, "WANConnectionDevice"))){
+			ret = ZCFG_INVALID_PARAM_VALUE;
+		}else if(strlen(tr98DefaultConnectionService)){
+			strcpy(DefaultConnectionService, json_object_get_string(paramValue));
+			printf("DefaultConnectionService=%s\n", DefaultConnectionService);
+			char *tr181WanIpIface = translateWanIpIface(TRANS_WANIPIFACE_98TO181, DefaultConnectionService);
+			if(tr181WanIpIface) {
+				if(strlen(tr181_X_ZYXEL_ActiveDefaultGateway) == 0)
+					strcpy(X_ZYXEL_ActiveDefaultGateway, tr181WanIpIface);
+				else if(!strstr(tr181_X_ZYXEL_ActiveDefaultGateway, tr181WanIpIface))
+					sprintf(X_ZYXEL_ActiveDefaultGateway, "%s,%s", tr181_X_ZYXEL_ActiveDefaultGateway, tr181WanIpIface);
+				else
+					strcpy(X_ZYXEL_ActiveDefaultGateway, tr181_X_ZYXEL_ActiveDefaultGateway);
+
+				free(tr181WanIpIface);
+			}else{
+				ret = ZCFG_INVALID_PARAM_VALUE;
+			}
+		}
 		
+#if 0
 		intf = strtok_r(DefaultConnectionService, ",", &tmp_ptr);
 		while(intf != NULL){
 			if(*intf != '\0' && strstr(intf, "InternetGatewayDevice.WANDevice.")){
@@ -178,8 +244,15 @@
 			}
 			intf = strtok_r(NULL, ",", &tmp_ptr);
 		}
-		printf("X_ZYXEL_ActiveDefaultGateway=%s\n", X_ZYXEL_ActiveDefaultGateway);
-		json_object_object_add(routerObj, "X_ZYXEL_ActiveDefaultGateway", json_object_new_string(X_ZYXEL_ActiveDefaultGateway));
+#endif
+
+		if(ret == ZCFG_SUCCESS){
+			printf("X_ZYXEL_ActiveDefaultGateway=%s\n", X_ZYXEL_ActiveDefaultGateway);
+			json_object_object_add(routerObj, "X_ZYXEL_ActiveDefaultGateway", json_object_new_string(X_ZYXEL_ActiveDefaultGateway));
+		}else{
+			json_object_put(routerObj);
+			return ret;
+		}
 	}
 
 	if(multiJobj) {
Index: libzcfg_fe_tr98-1.0/lanDev.c
===================================================================
--- libzcfg_fe_tr98-1.0.orig/lanDev.c	2017-01-11 18:45:59.141730102 +0800
+++ libzcfg_fe_tr98-1.0/lanDev.c	2017-01-11 18:45:59.265730105 +0800
@@ -1537,74 +1537,6 @@
 	return ZCFG_SUCCESS;
 }
 
-#define MAX_TR181_GRPWANIPIFACE_PARAM_LEN 1024
-#define MAX_TR98_GRPWANIPIFACE_PARAM_LEN 1500
-
-#define TRANS_WANIPIFACE_98TO181   1
-#define TRANS_WANIPIFACE_181TO98   2
-
-static char *translateWanIpIface(int dataTransType, const char *grpWanIpIfaces)
-{
-	char *grpWanIfacesTok = NULL, *transGrpWanIface = NULL;
-	char mappingPathName[TR98_MAX_OBJ_NAME_LENGTH] = {0};
-	char *token, *tmp = NULL;
-	int grpWanIfacesTok_Len = 0, transGrpWanIface_Len = 0;
-	int hasMapping;
-
-	if(!grpWanIpIfaces || !strlen(grpWanIpIfaces) ||
-		 ((dataTransType != TRANS_WANIPIFACE_98TO181) && (dataTransType != TRANS_WANIPIFACE_181TO98)))
-		return NULL;
-
-	grpWanIfacesTok_Len = (dataTransType == TRANS_WANIPIFACE_181TO98) ? MAX_TR181_GRPWANIPIFACE_PARAM_LEN : MAX_TR98_GRPWANIPIFACE_PARAM_LEN;
-	grpWanIfacesTok = (char *)malloc(grpWanIfacesTok_Len);
-	memset(grpWanIfacesTok, 0, grpWanIfacesTok_Len);
-	strncpy(grpWanIfacesTok, grpWanIpIfaces, grpWanIfacesTok_Len);
-
-	transGrpWanIface_Len = (dataTransType == TRANS_WANIPIFACE_181TO98) ? MAX_TR98_GRPWANIPIFACE_PARAM_LEN : MAX_TR181_GRPWANIPIFACE_PARAM_LEN;
-	transGrpWanIface = (char *)malloc(transGrpWanIface_Len);
-	memset(transGrpWanIface, 0, transGrpWanIface_Len);
-
-	token = strtok_r(grpWanIfacesTok, ",", &tmp);
-	while(token) {
-		memset(mappingPathName, 0, sizeof(mappingPathName));
-		hasMapping = 0;
-		if( ((dataTransType == TRANS_WANIPIFACE_181TO98) && strstr(token, "IP.Interface") && 
-                                  (zcfgFe181To98MappingNameGet(token, mappingPathName) == ZCFG_SUCCESS)) ||
-			((dataTransType == TRANS_WANIPIFACE_98TO181) && strstr(token, "IPConnection") && 
-                                  (zcfgFe98To181MappingNameGet(token, mappingPathName) == ZCFG_SUCCESS)) ) {
-			hasMapping = 1;
-		}
-		else if( (dataTransType == TRANS_WANIPIFACE_98TO181) && strstr(token, "PPPConnection") &&
-                                  (zcfgFe98To181MappingNameGet(token, mappingPathName) == ZCFG_SUCCESS) ) {
-			char higherLayer[MAX_TR181_PATHNAME] = {0};
-			if(strstr(mappingPathName, "PPP.Interface") && (zcfgFeTr181IfaceStackHigherLayerGet(mappingPathName, higherLayer) == ZCFG_SUCCESS)
-				&& strstr(higherLayer, "IP.Interface")) {
-				strncpy(mappingPathName, higherLayer, sizeof(mappingPathName)-1);
-				hasMapping = 1;
-			}
-		}
-		if(hasMapping){
-			if(strlen(transGrpWanIface)) {
-				strcat(transGrpWanIface, ",");
-				strcat(transGrpWanIface, mappingPathName);
-			}
-			else
-				strcpy(transGrpWanIface, mappingPathName);
-		}
-		token = strtok_r(NULL, ",", &tmp);
-	}
-
-	if(!strlen(transGrpWanIface)) {
-		free(grpWanIfacesTok);
-		free(transGrpWanIface);
-		return NULL;
-	}
-
-	free(grpWanIfacesTok);
-
-	return transGrpWanIface;
-}
-
 /*  TR98 Object Name : InternetGatewayDevice.LANDevice.i.LANHostConfigManagement.IPInterface.i
 
     Related object in TR181:
Index: libzcfg_fe_tr98-1.0/zcfg_fe_tr98.c
===================================================================
--- libzcfg_fe_tr98-1.0.orig/zcfg_fe_tr98.c	2017-01-11 18:45:59.233730104 +0800
+++ libzcfg_fe_tr98-1.0/zcfg_fe_tr98.c	2017-01-11 18:45:59.265730105 +0800
@@ -1002,6 +1002,71 @@
 	return ZCFG_SUCCESS;
 }
 
+#define MAX_TR181_WANIPIFACE_PARAM_LEN 1024
+#define MAX_TR98_WANIPIFACE_PARAM_LEN 1500
+
+char *translateWanIpIface(int dataTransType, const char *wanIpIfaces)
+{
+	char *wanIfacesTok = NULL, *transWanIface = NULL;
+	char mappingPathName[TR98_MAX_OBJ_NAME_LENGTH] = {0};
+	char *token, *tmp = NULL;
+	int wanIfacesTok_Len = 0, transWanIface_Len = 0;
+	int hasMapping;
+
+	if(!wanIpIfaces || !strlen(wanIpIfaces) ||
+		 ((dataTransType != TRANS_WANIPIFACE_98TO181) && (dataTransType != TRANS_WANIPIFACE_181TO98)))
+		return NULL;
+
+	wanIfacesTok_Len = (dataTransType == TRANS_WANIPIFACE_181TO98) ? MAX_TR181_WANIPIFACE_PARAM_LEN : MAX_TR98_WANIPIFACE_PARAM_LEN;
+	wanIfacesTok = (char *)malloc(wanIfacesTok_Len);
+	memset(wanIfacesTok, 0, wanIfacesTok_Len);
+	strncpy(wanIfacesTok, wanIpIfaces, wanIfacesTok_Len);
+
+	transWanIface_Len = (dataTransType == TRANS_WANIPIFACE_181TO98) ? MAX_TR98_WANIPIFACE_PARAM_LEN : MAX_TR181_WANIPIFACE_PARAM_LEN;
+	transWanIface = (char *)malloc(transWanIface_Len);
+	memset(transWanIface, 0, transWanIface_Len);
+
+	token = strtok_r(wanIfacesTok, ",", &tmp);
+	while(token) {
+		memset(mappingPathName, 0, sizeof(mappingPathName));
+		hasMapping = 0;
+		if( ((dataTransType == TRANS_WANIPIFACE_181TO98) && strstr(token, "IP.Interface") &&
+                                  (zcfgFe181To98MappingNameGet(token, mappingPathName) == ZCFG_SUCCESS)) ||
+			((dataTransType == TRANS_WANIPIFACE_98TO181) && strstr(token, "IPConnection") &&
+                                  (zcfgFe98To181MappingNameGet(token, mappingPathName) == ZCFG_SUCCESS)) ) {
+			hasMapping = 1;
+		}
+		else if( (dataTransType == TRANS_WANIPIFACE_98TO181) && strstr(token, "PPPConnection") &&
+                                  (zcfgFe98To181MappingNameGet(token, mappingPathName) == ZCFG_SUCCESS) ) {
+			char higherLayer[MAX_TR181_PATHNAME] = {0};
+			if(strstr(mappingPathName, "PPP.Interface") && (zcfgFeTr181IfaceStackHigherLayerGet(mappingPathName, higherLayer) == ZCFG_SUCCESS)
+				&& strstr(higherLayer, "IP.Interface")) {
+				strncpy(mappingPathName, higherLayer, sizeof(mappingPathName)-1);
+				hasMapping = 1;
+			}
+		}
+		if(hasMapping){
+			if(strlen(transWanIface)) {
+				strcat(transWanIface, ",");
+				strcat(transWanIface, mappingPathName);
+			}
+			else
+				strcpy(transWanIface, mappingPathName);
+		}
+		token = strtok_r(NULL, ",", &tmp);
+	}
+
+	if(!strlen(transWanIface)) {
+		free(wanIfacesTok);
+		free(transWanIface);
+		return NULL;
+	}
+
+	free(wanIfacesTok);
+
+	return transWanIface;
+}
+
 #define setLinkObjParm(linkObj, value) { \
 	struct json_object *obj = (struct json_object *)(linkObj); \
 	bool paramValue = value; \
Index: libzcfg_fe_tr98-1.0/zcfg_fe_tr98.h
===================================================================
--- libzcfg_fe_tr98-1.0.orig/zcfg_fe_tr98.h	2017-01-11 18:45:59.077730101 +0800
+++ libzcfg_fe_tr98-1.0/zcfg_fe_tr98.h	2017-01-11 18:45:59.265730105 +0800
@@ -131,6 +131,10 @@
 	} while(0)
 
 
+#define TRANS_WANIPIFACE_98TO181   1
+#define TRANS_WANIPIFACE_181TO98   2
+
+
 extern int myEid; /*use source Eid to know who use this library*/
 typedef struct tr98Parameter_s {
 	char 			*name;			/*parameter name*/
@@ -228,6 +232,7 @@
 zcfgRet_t zcfgFe98ParamGuard(struct json_object *, const char *, struct json_object *);
 void zcfgFe98ParamGuardRelease(struct json_object *);
 
+char *translateWanIpIface(int dataTransType, const char *wanIpIfaces);
 zcfgRet_t zcfgFe98To181IpIface(const char *tr98IfaceName, char *ipIface);
 zcfg_offset_t zcfgFeTr181WanSetLink(char *wanLinkName, bool set, void **retObj, objIndex_t *retObjIndex, int *applied);
 
