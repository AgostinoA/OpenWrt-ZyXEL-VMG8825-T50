Index: libzcfg_fe_tr98-1.0/wanDev.c
===================================================================
--- libzcfg_fe_tr98-1.0.orig/wanDev.c	2014-09-29 16:25:59.463825321 +0800
+++ libzcfg_fe_tr98-1.0/wanDev.c	2014-09-29 16:26:07.558402551 +0800
@@ -2147,6 +2147,7 @@
 	char wanLinkObj[128] = {0};
 	char wanIpConnObj[TR98_MAX_OBJ_NAME_LENGTH] = {0};
 	char ethLinkPathName[32] = {0};
+	char vlanTermPathName[32] = {0};
 	char ipIfacePathName[32] = {0};
 	char higherLayer[64] = {0};
 	char tr98TmpName[TR98_MAX_OBJ_NAME_LENGTH] = {0};  /*tr98TmpName is used to look up mapping table*/
@@ -2200,10 +2201,14 @@
 						return ret;
 					}
 
-					/*VLAN Consideration in the future*/
+					/*add Device.Ethernet.VLANTermination.i*/
+					if((ret = vlanTermAdd(vlanTermPathName, ethLinkPathName)) != ZCFG_SUCCESS) {
+						zcfgFeObjStructFree(atmLinkObj);
+						return ret;
+					}
 
 					/*Add Device.IP.Interface.i*/
-					if((ret = ipIfaceAdd(ipIfacePathName, ethLinkPathName)) != ZCFG_SUCCESS) {
+					if((ret = ipIfaceAdd(ipIfacePathName, vlanTermPathName)) != ZCFG_SUCCESS) {
 						zcfgFeObjStructFree(atmLinkObj);
 						return ret;
 					}
@@ -2230,9 +2235,19 @@
 			else {
 				/*Ethernet.Link already exists*/
 				if(strstr(higherLayer, "Ethernet.Link") != NULL) {
-					printf("Ethernet.Link already exists, only add Device.IP.Interface\n");
+
+					printf("Ethernet.Link already exists\n");
+
+					zcfgFeTr181IfaceStackHigherLayerGet(higherLayer, vlanTermPathName);
+					if (strstr(vlanTermPathName, "Ethernet.VLANTermination.") == NULL){
+						if((ret = vlanTermAdd(vlanTermPathName, higherLayer)) != ZCFG_SUCCESS) {
+							zcfgFeObjStructFree(atmLinkObj);
+							return ret;
+						}
+					}
+					
 					/*Add Device.IP.Interface.i*/
-					if((ret = ipIfaceAdd(ipIfacePathName, higherLayer)) != ZCFG_SUCCESS) {
+					if((ret = ipIfaceAdd(ipIfacePathName, vlanTermPathName)) != ZCFG_SUCCESS) {
 						zcfgFeObjStructFree(atmLinkObj);
 						return ret;
 					}
@@ -2265,10 +2280,14 @@
 					return ret;
 				}
 
-				/*VLAN Consideration in the future*/
+				/*add Device.Ethernet.VLANTermination.i*/
+				if((ret = vlanTermAdd(vlanTermPathName, ethLinkPathName)) != ZCFG_SUCCESS) {
+					zcfgFeObjStructFree(ptmLinkObj);
+					return ret;
+				}
 
 				/*Add Device.IP.Interface.i*/
-				if((ret = ipIfaceAdd(ipIfacePathName, ethLinkPathName)) != ZCFG_SUCCESS) {
+				if((ret = ipIfaceAdd(ipIfacePathName, vlanTermPathName)) != ZCFG_SUCCESS) {
 					zcfgFeObjStructFree(ptmLinkObj);
 					printf("%s : Add Device.IP.Interface.i fail\n", __FUNCTION__);
 					return ret;
@@ -2284,9 +2303,19 @@
 			else {
 				/*Ethernet.Link already exists*/
 				if(strstr(higherLayer, "Ethernet.Link") != NULL) {
-					printf("Ethernet.Link already exists, only add Device.IP.Interface\n");
+
+					printf("Ethernet.Link already exists\n");
+
+					zcfgFeTr181IfaceStackHigherLayerGet(higherLayer, vlanTermPathName);
+					if (strstr(vlanTermPathName, "Ethernet.VLANTermination.") == NULL){
+						if((ret = vlanTermAdd(vlanTermPathName, higherLayer)) != ZCFG_SUCCESS) {
+							zcfgFeObjStructFree(ptmLinkObj);
+							return ret;
+						}
+					}
+					
 					/*Add Device.IP.Interface.i*/
-					if((ret = ipIfaceAdd(ipIfacePathName, higherLayer)) != ZCFG_SUCCESS) {
+					if((ret = ipIfaceAdd(ipIfacePathName, vlanTermPathName)) != ZCFG_SUCCESS) {
 						zcfgFeObjStructFree(ptmLinkObj);
 						return ret;
 					}
@@ -2318,8 +2347,15 @@
 			return ret;
 		}
 
+		zcfgFeTr181IfaceStackHigherLayerGet(wanLinkObj, vlanTermPathName);
+		if (strstr(vlanTermPathName, "Ethernet.VLANTermination.") == NULL){
+			if((ret = vlanTermAdd(vlanTermPathName, wanLinkObj)) != ZCFG_SUCCESS) {
+				return ret;
+			}
+		}
+					
 		/*Add Device.IP.Interface.i*/
-		if((ret = ipIfaceAdd(ipIfacePathName, wanLinkObj)) != ZCFG_SUCCESS) {
+		if((ret = ipIfaceAdd(ipIfacePathName, vlanTermPathName)) != ZCFG_SUCCESS) {
 			return ret;
 		}
 
@@ -3559,6 +3595,7 @@
 	char wanLinkObj[128] = {0};
 	char wanPppConnObj[128] = {0};
 	char ethLinkPathName[32] = {0};
+	char vlanTermPathName[32] = {0};
 	char pppIfacePathName[32] = {0};
 	char higherLayer[64] = {0};
 	char tr98TmpName[TR98_MAX_OBJ_NAME_LENGTH] = {0};  /*tr98TmpName is used to look up mapping table*/
@@ -3616,10 +3653,14 @@
 						return ret;
 					}
 
-					/*VLAN Consideration in the future*/
+					/*Add Device.Ethernet.VLANTermination.i*/
+					if((ret = vlanTermAdd(vlanTermPathName, ethLinkPathName)) != ZCFG_SUCCESS) {
+						zcfgFeObjStructFree(atmLinkObj);
+						return ret;
+					}
 
 					/*Add Device.PPP.Interface.i*/
-					if((ret = pppIfaceAdd(pppIfacePathName, ethLinkPathName)) != ZCFG_SUCCESS) {
+					if((ret = pppIfaceAdd(pppIfacePathName, vlanTermPathName)) != ZCFG_SUCCESS) {
 						zcfgFeObjStructFree(atmLinkObj);
 						return ret;
 					}
@@ -3646,9 +3687,19 @@
 			else {
 				/*Ethernet.Link already exists*/
 				if(strstr(higherLayer, "Ethernet.Link") != NULL) {
-					printf("%s : Ethernet.Link already exists, only add Device.PPP.Interface\n", __FUNCTION__);
+
+					printf("%s : Ethernet.Link already exists\n", __FUNCTION__);
+
+					zcfgFeTr181IfaceStackHigherLayerGet(higherLayer, vlanTermPathName);
+					if (strstr(vlanTermPathName, "Ethernet.VLANTermination.") == NULL){
+						if((ret = vlanTermAdd(vlanTermPathName, higherLayer)) != ZCFG_SUCCESS) {
+							zcfgFeObjStructFree(atmLinkObj);
+							return ret;
+						}
+					}
+					
 					/*Add Device.PPP.Interface.i*/
-					if((ret = pppIfaceAdd(pppIfacePathName, higherLayer)) != ZCFG_SUCCESS) {
+					if((ret = pppIfaceAdd(pppIfacePathName, vlanTermPathName)) != ZCFG_SUCCESS) {
 						zcfgFeObjStructFree(atmLinkObj);
 						return ret;
 					}
@@ -3681,10 +3732,14 @@
 					return ret;
 				}
 
-				/*VLAN Consideration in the future*/
+				/*Add Device.Ethernet.VLANTermination.i*/
+				if((ret = vlanTermAdd(vlanTermPathName, ethLinkPathName)) != ZCFG_SUCCESS) {
+					zcfgFeObjStructFree(ptmLinkObj);
+					return ret;
+				}
 
 				/*Add Device.PPP.Interface.i*/
-				if((ret = pppIfaceAdd(pppIfacePathName, ethLinkPathName)) != ZCFG_SUCCESS) {
+				if((ret = pppIfaceAdd(pppIfacePathName, vlanTermPathName)) != ZCFG_SUCCESS) {
 					zcfgFeObjStructFree(ptmLinkObj);
 					return ret;
 				}
@@ -3699,9 +3754,18 @@
 			else {
 				/*Ethernet.Link already exists*/
 				if(strstr(higherLayer, "Ethernet.Link") != NULL) {
-					printf("%s : Ethernet.Link already exists, only add Device.IP.Interface\n", __FUNCTION__);
+					printf("%s : Ethernet.Link already exists\n", __FUNCTION__);
+
+					zcfgFeTr181IfaceStackHigherLayerGet(higherLayer, vlanTermPathName);
+					if (strstr(vlanTermPathName, "Ethernet.VLANTermination.") == NULL){
+						if((ret = vlanTermAdd(vlanTermPathName, higherLayer)) != ZCFG_SUCCESS) {
+							zcfgFeObjStructFree(ptmLinkObj);
+							return ret;
+						}
+					}
+					
 					/*Add Device.PPP.Interface.i*/
-					if((ret = pppIfaceAdd(pppIfacePathName, ethLinkPathName)) != ZCFG_SUCCESS) {
+					if((ret = pppIfaceAdd(pppIfacePathName, vlanTermPathName)) != ZCFG_SUCCESS) {
 						zcfgFeObjStructFree(ptmLinkObj);
 						return ret;
 					}
@@ -3736,8 +3800,15 @@
 
 		printf("Ethernet Link %s\n", wanLinkObj);
 
+		zcfgFeTr181IfaceStackHigherLayerGet(wanLinkObj, vlanTermPathName);
+		if (strstr(vlanTermPathName, "Ethernet.VLANTermination.") == NULL){
+			if((ret = vlanTermAdd(vlanTermPathName, wanLinkObj)) != ZCFG_SUCCESS) {
+				return ret;
+			}
+		}
+
 		/*Add Device.PPP.Interface.i*/
-		if((ret = pppIfaceAdd(pppIfacePathName, wanLinkObj)) != ZCFG_SUCCESS) {
+		if((ret = pppIfaceAdd(pppIfacePathName, vlanTermPathName)) != ZCFG_SUCCESS) {
 			return ret;
 		}
 
Index: libzcfg_fe_tr98-1.0/wanDev_api.c
===================================================================
--- libzcfg_fe_tr98-1.0.orig/wanDev_api.c	2014-09-29 16:25:59.351825322 +0800
+++ libzcfg_fe_tr98-1.0/wanDev_api.c	2014-09-29 16:25:59.503825321 +0800
@@ -206,6 +206,39 @@
 	return ret;	
 }
 
+zcfgRet_t vlanTermAdd(char *vlanTermPathName, char *lowerLayer)
+{
+	zcfgRet_t ret;
+	objIndex_t objIid;
+	rdm_EthVlanTerm_t *vlanTermObj = NULL;
+
+	printf("%s : Enter\n", __FUNCTION__);
+
+	IID_INIT(objIid);
+	if((ret = zcfgFeObjStructAdd(RDM_OID_ETH_VLAN_TERM, &objIid, NULL)) != ZCFG_SUCCESS) {
+		return ret;
+	}
+
+	sprintf(vlanTermPathName, "Ethernet.VLANTermination.%d", objIid.idx[0]);
+
+	/*Set LowerLayer for Ethernet.Link*/
+	if((ret = zcfgFeObjStructGet(RDM_OID_ETH_VLAN_TERM, &objIid, (void **)&vlanTermObj)) == ZCFG_SUCCESS) {
+		vlanTermObj->Enable = true;
+		strcpy(vlanTermObj->LowerLayers, lowerLayer);
+		vlanTermObj->VLANID = -1;
+		if((ret = zcfgFeObjStructSet(RDM_OID_ETH_VLAN_TERM, &objIid, (void *)vlanTermObj, NULL)) != ZCFG_SUCCESS) {
+			printf("%s : Set Ethernet.VLANTermination LowerLayers Fail\n", __FUNCTION__);
+		}
+
+		zcfgFeObjStructFree(vlanTermObj);
+	}
+	else {
+		return ret;
+	}
+
+	return ret;	
+}
+
 zcfgRet_t ipIfaceAdd(char *ipIfacePathName, char *lowerLayer)
 {
 	zcfgRet_t ret;
Index: libzcfg_fe_tr98-1.0/wanDev_api.h
===================================================================
--- libzcfg_fe_tr98-1.0.orig/wanDev_api.h	2014-09-29 16:25:59.351825322 +0800
+++ libzcfg_fe_tr98-1.0/wanDev_api.h	2014-09-29 16:25:59.503825321 +0800
@@ -12,6 +12,7 @@
 #endif
 bool isIGMPProxyEnable(char *ipIface);
 zcfgRet_t ethLinkAdd(char *, char *);
+zcfgRet_t vlanTermAdd(char *vlanTermPathName, char *lowerLayer);
 zcfgRet_t ipIfaceAdd(char *, char *);
 zcfgRet_t pppIfaceAdd(char *, char *);
 void addDhcpObj(char *);
