Index: libzcfg_fe_tr98-1.0/zcfg_fe_tr98.c
===================================================================
--- libzcfg_fe_tr98-1.0.orig/zcfg_fe_tr98.c	2014-06-12 15:25:27.803775710 +0800
+++ libzcfg_fe_tr98-1.0/zcfg_fe_tr98.c	2014-06-12 15:28:27.682105198 +0800
@@ -17,6 +17,7 @@
 #include "qos.h"
 #include "voice.h"
 
+#include "zcfg_fe_rdm_access.h"
 #include "zcfg_fe_rdm_string.h"
 #include "zcfg_fe_rdm_struct.h"
 #include "zcfg_rdm_oid.h"
@@ -24,6 +25,28 @@
 #include "zcfg_debug.h"
 #include "zcfg_fe_tr98_handle.h"
 
+zcfgRet_t zcfgFeTr98AllIGDNameGet()
+{
+#if 0
+	zcfgRet_t ret;
+
+	if(tr98_names_array != NULL)
+		json_object_put(tr98_names_array);
+
+	tr98_names_array = NULL;
+
+	if((ret = zcfgFeAllIGDNameGet()) != ZCFG_SUCCESS) {
+		printf("%s : Error. ret %d\n", __FUNCTION__, ret);
+		return ret;
+	}
+
+	tr98_names_array = json_object_from_file("/tmp/ALL_IGD");
+
+	return ret;
+#else
+	return zcfgFeAllIGDNameGet();
+#endif
+}
 static zcfgRet_t zcfgFeTr98ClassNameGet(char *objName, char *className)
 {
 	char *token = NULL;
@@ -771,22 +794,55 @@
 		if(tr98Obj[handler].getAttr != NULL){
 			return tr98Obj[handler].getAttr(tr98ObjName, handler, name);
 		}
-		else{
+		else {
+			paramList = tr98Obj[handler].parameter;
+			if(paramList == NULL)
+			{
+				return ZCFG_NO_SUCH_PARAMETER;
+			}
+
+			while(paramList->name!= NULL) {
+				if(strcmp(paramList->name, name) == 0){
+					return paramList->attr;
+				}
+				paramList++;
+			}
+		}
+	}
+	
+	return ZCFG_NO_SUCH_PARAMETER;
+}
+
+zcfgRet_t zcfgFeTr98AllParamAttrGetByObjName(char *tr98ObjName, struct json_object *result)
+{
+	zcfgRet_t ret;
+	char tr98ClassName[256] = {0};
+	int handler = 0;
+	tr98Parameter_t *paramList = NULL;
+	char paraName[64] = {0};
+
+	if((ret = zcfgFeTr98ClassNameGet(tr98ObjName, tr98ClassName)) != ZCFG_SUCCESS) {
+		return ret;
+	}
+
+	handler = zcfgFeTr98HandlerGet(tr98ClassName);
+	if(handler != -1) {
 		paramList = tr98Obj[handler].parameter;
-		if(paramList == NULL)
-		{
+
+		if(paramList == NULL) {
 			return ZCFG_NO_SUCH_PARAMETER;
 		}
-		while(paramList->name!= NULL) {
-			if(strcmp(paramList->name, name) == 0){
-				return paramList->attr;
-			}
+
+		while(paramList->name != NULL) {
+			json_object_object_add(result, paramList->name, json_object_new_int(paramList->attr));
 			paramList++;
 		}
 	}
+	else {
+		return ZCFG_NO_SUCH_OBJECT;
 	}
-	
-	return ZCFG_NO_SUCH_PARAMETER;
+
+	return ZCFG_SUCCESS;
 }
 
 int zcfgFeTr98ParamAttrMultiSetByName(char *tr98ObjName, char *name, int notify, struct json_object *multiJobj)
Index: libzcfg_fe_tr98-1.0/zcfg_fe_tr98.h
===================================================================
--- libzcfg_fe_tr98-1.0.orig/zcfg_fe_tr98.h	2014-06-12 15:25:27.611778124 +0800
+++ libzcfg_fe_tr98-1.0/zcfg_fe_tr98.h	2014-06-12 15:27:41.806307301 +0800
@@ -38,6 +38,8 @@
 
 #define TR98_MAX_OBJ_NAME_LENGTH 128
 
+zcfgRet_t zcfgFeTr98AllIGDNameGet();
+
 
 zcfgRet_t zcfgFeTr98ObjGet(char *, struct json_object **);
 zcfgRet_t zcfgFeTr98ObjNameGet(char *, struct  json_object** );
@@ -53,6 +55,7 @@
 zcfgRet_t zcfgFeTr98ParamList(char *);
 
 int zcfgFeTr98ParamAttrGetByName(char *, char *);
+zcfgRet_t zcfgFeTr98AllParamAttrGetByObjName(char *, struct json_object *);
 int zcfgFeTr98ParamAttrMultiSetByName(char *, char *, int , struct json_object *);
 int zcfgFeTr98ParamTypeGetByName(char *, char *);
 zcfgRet_t zcfgFeTr98ParamChk(char *, char *, char *);
