Index: libzcfg_fe_tr98-1.0/zcfg_fe_msg.c
===================================================================
--- libzcfg_fe_tr98-1.0.orig/zcfg_fe_msg.c	2015-07-29 18:47:10.001001335 +0800
+++ libzcfg_fe_tr98-1.0/zcfg_fe_msg.c	2015-07-29 18:47:17.279989800 +0800
@@ -12,6 +12,9 @@
 
 	zcfgLog(ZCFG_LOG_INFO, "%s\n", __FUNCTION__);
 
+	if(!tr98ObjIid || !objIid)
+		return ZCFG_INTERNAL_ERROR;
+
 	sendBuf = (char *)malloc(sizeof(zcfgMsg_t) + sizeof(zcfgMapData_t));
 	memset(sendBuf, 0, (sizeof(zcfgMsg_t) + sizeof(zcfgMapData_t)));
 
@@ -63,6 +66,12 @@
 
 	zcfgLog(ZCFG_LOG_INFO, "%s\n", __FUNCTION__);
 
+	if(!objIdxData_1 || !num_2 || !objIdxData_2)
+		return ZCFG_INTERNAL_ERROR;
+
+	*num_2 = 0;
+	IID_INIT(*objIdxData_2);
+
 	sendBuf = (char *)malloc(sizeof(zcfgMsg_t) + sizeof(zcfgMapData_t));
 	memset(sendBuf, 0, (sizeof(zcfgMsg_t) + sizeof(zcfgMapData_t)));
 
@@ -82,8 +91,8 @@
 	}
 
 	recvMsgHdr = (zcfgMsg_t*)recvBuf;
+	ret = recvMsgHdr->statCode;
 	if ( recvMsgHdr->type == RESPONSE_FAIL ) {
-		ret = recvMsgHdr->statCode;
 		free(recvBuf);
 		return ret; //ZCFG_INTERNAL_ERROR;
 	}
@@ -101,7 +110,7 @@
 
 	free(recvBuf);
 
-	return recvMsgHdr->statCode;//ZCFG_SUCCESS;
+	return ret; //ZCFG_SUCCESS
 }
 
 zcfgRet_t zcfgFeParmAttrQry(zcfg_name_t seqnum, objIndex_t *tr98ObjIid, const char *parmName, zcfg_offset_t *oid, objIndex_t *objIid, char *queriedParmName, uint32_t *attr)
@@ -115,8 +124,8 @@
 
 	zcfgLog(ZCFG_LOG_INFO, "%s\n", __FUNCTION__);
 
-	//if(!tr98ObjIid || !parmName || !oid || objIid || queriedParmName || !attr)
-	//	return ZCFG_INTERNAL_ERROR;
+	if(!tr98ObjIid || !parmName || !oid || !objIid || !queriedParmName)
+		return ZCFG_INTERNAL_ERROR;
 
 	zcfgLog(ZCFG_LOG_INFO, "%s: %u %hu,%hu,%hu,%hu,%hu,%hu %s\n", __FUNCTION__, seqnum, tr98ObjIid->idx[0],
          tr98ObjIid->idx[1], tr98ObjIid->idx[2], tr98ObjIid->idx[3], tr98ObjIid->idx[4], tr98ObjIid->idx[5], parmName);
Index: libzcfg_fe_tr98-1.0/zcfg_fe_tr98.c
===================================================================
--- libzcfg_fe_tr98-1.0.orig/zcfg_fe_tr98.c	2015-07-29 18:47:10.049001336 +0800
+++ libzcfg_fe_tr98-1.0/zcfg_fe_tr98.c	2015-07-29 18:47:10.065001336 +0800
@@ -718,7 +718,7 @@
 	zcfg_name_t nameSeqNum = 0;
 	objIndex_t tr181ObjIid, objIid;
 	zcfg_offset_t oid;
-	char fulltr181PathName[256] = {0};
+	char queriedTr181PathName[OBJ_NAME_BUFF_SIZE] = {0};
 
 #ifndef ZCFG_DYNAMIC_NAMEMAPPING
 	return ZCFG_SUCCESS;
@@ -727,10 +727,10 @@
 	zcfgLog(ZCFG_LOG_INFO, "%s\n", __FUNCTION__);
 	//printf("Enter %s()\n", __FUNCTION__);
 
-	if(!tr98PathName || !tr181PathName)
+	if(!tr98PathName || !tr181PathName || strlen(tr98PathName) == 0)
 		return ZCFG_INTERNAL_ERROR;
 
-	printf("*** tr98PathName=%s\n", tr98PathName);
+	printf("*** query tr98PathName=%s\n", tr98PathName);
 	
  	IID_INIT(objIid);
 	if((ret = zcfgFe98NameToSeqnum(tr98PathName, &nameSeqNum, &objIid)) != ZCFG_SUCCESS) {
@@ -738,29 +738,28 @@
 		printf("111 ret=%d\n", ret);
 		return ret;
 	}
-	printf("e_TR98_LAN_DEV=%d\n", e_TR98_LAN_DEV);
+	//printf("e_TR98_LAN_DEV=%d\n", e_TR98_LAN_DEV);
 
 	printf("nameSeqNum=%d\n", nameSeqNum);
 
 	IID_INIT(tr181ObjIid);
-	//if((ret = zcfgObjMappingGet(ZCFG_MSG_REQUEST_TR98_MAPPING, nameSeqNum, &objIid, &oid, &tr181ObjIid)) != ZCFG_SUCCESS) {
 	if((ret = zcfgObjMappingGet(ZCFG_MSG_REQUEST_TR98_OBJMAPPING, nameSeqNum, &objIid, &oid, &tr181ObjIid)) != ZCFG_SUCCESS) {
 		zcfgLog(ZCFG_LOG_INFO, "%s: 98To181 mapping query fail\n", __FUNCTION__);
 		printf("222 ret=%d\n", ret);
 		return ret;
 	}
 
-	//if((ret = zcfgFeObjIdToName(oid, &tr181ObjIid, tr181PathName)) != ZCFG_SUCCESS) {
-	if((ret = zcfgFeObjIdToName(oid, &tr181ObjIid, fulltr181PathName)) != ZCFG_SUCCESS) {
+	if((ret = zcfgFeObjIdToName(oid, &tr181ObjIid, queriedTr181PathName)) != ZCFG_SUCCESS) {
 		zcfgLog(ZCFG_LOG_INFO, "%s: ObjId to Name fail\n", __FUNCTION__);
 		printf("333 et=%d\n", ret);
 		return ret;	
 	}
 
-	if (!strncmp(fulltr181PathName, "Device.", strlen("Device.")))
-		strcpy(tr181PathName, fulltr181PathName + strlen("Device."));
+	tr181PathName[0] = '\0';
+	if (!strncmp(queriedTr181PathName, "Device.", strlen("Device.")))
+		strcpy(tr181PathName, queriedTr181PathName + strlen("Device."));
 	else
-		strcpy(tr181PathName, fulltr181PathName);
+		strcpy(tr181PathName, queriedTr181PathName);
 	
 	printf("result tr181PathName=%s\n", tr181PathName);
 
@@ -792,7 +791,6 @@
 	}
 
 	IID_INIT(objIid);
-	//if((ret = zcfgObjMappingGet(ZCFG_MSG_REQUEST_TR181_MAPPING, oid, &tr181ObjIid, &nameSeqNum, &objIid)) != ZCFG_SUCCESS) {
 	if((ret = zcfgObjMappingGet(ZCFG_MSG_REQUEST_TR181_OBJMAPPING, oid, &tr181ObjIid, &nameSeqNum, &objIid)) != ZCFG_SUCCESS) {
 		zcfgLog(ZCFG_LOG_INFO, "%s: 181To98 mapping query fail\n", __FUNCTION__);
 		return ret;
@@ -812,7 +810,7 @@
 zcfgRet_t zcfgFe98NameToSeqnum(const char *tr98PathName, zcfg_name_t *seqnum, objIndex_t *tr98ObjIid)
 {
 	const char *pos = NULL;
-	int n = 0, n_subpathname = 0;
+	int n = 0, level = 0;
 	bool subpathname = false;
 	char instNumStr[5] = {0};
 	char pathName[TR98_MAX_OBJ_NAME_LENGTH] = {0};
@@ -825,6 +823,9 @@
 	if(!tr98PathName || !seqnum || !tr98ObjIid || (strlen(tr98PathName) <= 0))
 		return ZCFG_INTERNAL_ERROR;
 
+	*seqnum = 0;
+	IID_INIT(*tr98ObjIid);
+
 	IID_INIT(objIid);
 	pos = (tr98PathName + n);
 	while(*pos != '\0') {
@@ -859,7 +860,10 @@
 		pos = tr98PathName+(++n);
 		if(((subpathname == false) && instNumStrLen) || ((*pos == '\0') && instNumStrLen)) {
 			int idx = 0;
-			objIid.idx[n_subpathname++] = ((idx = atoi(instNumStr)) > 255) ? 255 : idx;
+			if(level < SUPPORTED_INDEX_LEVEL)
+				objIid.idx[level] = ((idx = atoi(instNumStr)) > 255) ? 255 : idx;
+
+			level++;
 			instNumStrLen = 0;
 			memset(instNumStr, 0, sizeof(instNumStr));
 		}
@@ -867,7 +871,12 @@
 
 	zcfgLog(ZCFG_LOG_INFO, "%s: parsed, %s\n", __FUNCTION__, pathName);
 
-	objIid.level = n_subpathname;
+	if(level >= SUPPORTED_INDEX_LEVEL) {
+		zcfgLog(ZCFG_LOG_INFO, "%s: Object index error\n", __FUNCTION__);
+		return ZCFG_NO_SUCH_OBJECT;
+	}
+
+	objIid.level = level;
 	entry = (tr98NameObj_t *)json_object_object_get(tr98StaticNameTable, (const char *)pathName);
 	if(!entry)
 		return ZCFG_NO_SUCH_OBJECT;
@@ -903,7 +912,10 @@
 	pos = (pathName + n);
 	while(*pos != '\0') {
 		if(*pos == 'i' && (n != 0) && (*(pos - 1) == '.' && (*(pos + 1) == '.' || *(pos + 1) == '\0'))) {
-			sprintf(instNumStr, "%hhu", objIid->idx[level++]);
+			if(level < SUPPORTED_INDEX_LEVEL)
+				sprintf(instNumStr, "%hhu", objIid->idx[level]);
+
+			level++;
 			strcat(tr98PathName, instNumStr);
 			tr98PathNameLen += strlen(instNumStr);
 			instNumStr[0] = '\0';
@@ -915,6 +927,11 @@
 	}
 	*(tr98PathName + tr98PathNameLen) = '\0';
 
+	if(level >= SUPPORTED_INDEX_LEVEL) {
+		zcfgLog(ZCFG_LOG_INFO, "%s: Object index error\n", __FUNCTION__);
+		return ZCFG_NO_SUCH_OBJECT;
+	}
+
 	zcfgLog(ZCFG_LOG_INFO, "%s: translated, %s\n", __FUNCTION__, tr98PathName);
 
 	return ZCFG_SUCCESS;
@@ -956,6 +973,7 @@
 			}
 		else if(*c == '.' && instNumStrLen) {
 			int idx = 0;
+			if(tr98ObjIid.level < SUPPORTED_INDEX_LEVEL)
 			tr98ObjIid.idx[tr98ObjIid.level++] = ((idx = atoi(instNumStr)) > 255) ? 255 : idx;
 			instNumStrLen = 0;
 			memset(instNumStr, 0, sizeof(instNumStr));
@@ -963,6 +981,7 @@
 		c = idxstr+(++n);
 		if((*c == '\0') && instNumStrLen) {
 			int idx = 0;
+			if(tr98ObjIid.level < SUPPORTED_INDEX_LEVEL)
 			tr98ObjIid.idx[tr98ObjIid.level++] = ((idx = atoi(instNumStr)) > 255) ? 255 : idx;
 			instNumStrLen = 0;
 			memset(instNumStr, 0, sizeof(instNumStr));
