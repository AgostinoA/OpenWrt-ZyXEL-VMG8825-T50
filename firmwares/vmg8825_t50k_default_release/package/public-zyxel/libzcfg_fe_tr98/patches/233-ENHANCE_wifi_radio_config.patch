Index: libzcfg_fe_tr98-1.0/lanDev.c
===================================================================
--- libzcfg_fe_tr98-1.0.orig/lanDev.c	2015-10-13 20:24:20.717941749 +0800
+++ libzcfg_fe_tr98-1.0/lanDev.c	2015-10-13 20:22:59.159768000 +0800
@@ -86,6 +86,8 @@
   		\"WPAAuthenticationMode\": { \"PSKAuthentication\": { }, \"Emp\": { } },\
   		\"IEEE11iEncryptionModes\": { \"AESEncryption\": { }, \"TKIPandAESEncryption\": { }, \"Emp\": { } },\
   		\"IEEE11iAuthenticationMode\": { \"PSKAuthentication\": { }, \"Emp\": { } },\
+		\"X_ZYXEL_OperatingFrequencyBand\": { \"2.4GHz\": { }, \"5GHz\": { } },\
+		\"X_ZYXEL_OperatingChannelBandwidth\": { \"20MHz\": { }, \"40MHz\": { }, \"80MHz\": { } },\
 		}"
 
 #endif
@@ -3897,6 +3899,12 @@
 		else if(!strcmp(paramList->name, "RadioEnabled")) {
 			paramValue = json_object_object_get(radioJobj, "Enable");
 		}
+		else if(!strcmp(paramList->name, "X_ZYXEL_OperatingFrequencyBand")) {
+			paramValue = json_object_object_get(radioJobj, "OperatingFrequencyBand");
+		}
+		else if(!strcmp(paramList->name, "X_ZYXEL_OperatingChannelBandwidth")) {
+			paramValue = json_object_object_get(radioJobj, "OperatingChannelBandwidth");
+		}
 		else if(!strcmp(paramList->name, "PeerBSSID")) {
 			paramValue = json_object_new_string("");
 			freeflag = 1;
@@ -4217,12 +4225,93 @@
 	return ret;
 }
 
-#define MAX_WEPKEY_NUM   4
 #define WIFI24_FIRST_AP  1
 #define WIFI24_LAST_AP  4
 #define WIFI5_FIRST_AP  5
 #define WIFI5_LAST_AP  8
 
+#define BANDWIDTH24_20Mhz { 1, 13};
+#define BANDWIDTH24_40Mhz { 1, 9};
+
+#define BANDWIDTH5_20Mhz { 36, 40, 44, 48, 52, 56, 60, 64, 100, 104, 108, 112, 116, 120, 124, 128, 132, 136, 140, 0};
+#define BANDWIDTH5_40Mhz { 36, 44, 52, 60, 100, 108, 116, 124, 136, 0};
+#define BANDWIDTH5_80Mhz { 36, 40, 44, 48, 52, 56, 60, 64, 100, 104, 108, 112, 116, 120, 124, 128, 0};
+#define BANDWIDTH5_160Mhz { 0};
+
+zcfgRet_t lanDevWlanConfirmRadio(objIndex_t *apIid, struct json_object *tr98Jobj, struct json_object *radioJobj)
+{
+	const char *opBand = json_object_get_string(json_object_object_get(tr98Jobj, "X_ZYXEL_OperatingFrequencyBand"));
+	const char *opBandwidth = json_object_get_string(json_object_object_get(tr98Jobj, "X_ZYXEL_OperatingChannelBandwidth"));
+
+	int tr181Channel = json_object_get_int(json_object_object_get(radioJobj, "Channel"));
+	bool tr98AutoChannel = json_object_get_boolean(json_object_object_get(tr98Jobj, "AutoChannelEnable"));
+	int tr98SetChannel = json_object_get_int(json_object_object_get(tr98Jobj, "Channel"));
+
+	if(tr98AutoChannel)
+		return ZCFG_SUCCESS;
+
+	if(tr181Channel != tr98SetChannel) {
+		if(apIid->idx[0] > WIFI24_FIRST_AP && apIid->idx[0] <= WIFI24_LAST_AP) {
+			return ZCFG_INVALID_PARAM_VALUE;
+		}
+		else if(apIid->idx[0] > WIFI5_FIRST_AP && apIid->idx[0] <= WIFI5_LAST_AP) {
+			return ZCFG_INVALID_PARAM_VALUE;
+		}
+
+		if(!strcmp(opBand, "2.4GHz")) {
+			int bandwidth20Mhz[] = BANDWIDTH24_20Mhz
+			int bandwidth40Mhz[] = BANDWIDTH24_40Mhz
+			int *bandwidthChannelNum = NULL;
+
+			if(!strcmp(opBandwidth, "20MHz")) {
+				bandwidthChannelNum = bandwidth20Mhz;
+			}
+			else if(!strcmp(opBandwidth, "40MHz")) {
+				bandwidthChannelNum = bandwidth40Mhz;
+			}
+			else
+				return ZCFG_INVALID_PARAM_VALUE;
+
+			if((tr98SetChannel >= bandwidthChannelNum[0]) && (tr98SetChannel <= bandwidthChannelNum[1]))
+				return ZCFG_SUCCESS;
+			else
+				return ZCFG_INVALID_PARAM_VALUE;
+		}
+		else if(!strcmp(opBand, "5GHz")) {
+			int bandwidth20Mhz[] = BANDWIDTH5_20Mhz
+			int bandwidth40Mhz[] = BANDWIDTH5_40Mhz
+			int bandwidth80Mhz[] = BANDWIDTH5_80Mhz
+			int bandwidth160Mhz[] = BANDWIDTH5_160Mhz
+			int *bandwidthChannelNum = NULL;
+
+			if(!strcmp(opBandwidth, "20MHz")) {
+				bandwidthChannelNum = bandwidth20Mhz;
+			}
+			else if(!strcmp(opBandwidth, "40MHz")) {
+				bandwidthChannelNum = bandwidth40Mhz;
+			}
+			else if(!strcmp(opBandwidth, "80MHz")) {
+				bandwidthChannelNum = bandwidth80Mhz;
+			}
+			else if(!strcmp(opBandwidth, "160MHz")) {
+				bandwidthChannelNum = bandwidth160Mhz;
+			}
+			else
+				return ZCFG_INVALID_PARAM_VALUE;
+
+			int n = 0;
+			while(bandwidthChannelNum[n] && (tr98SetChannel != bandwidthChannelNum[n]))
+				n++;
+			
+			return (bandwidthChannelNum[n]) ? ZCFG_SUCCESS : ZCFG_INVALID_PARAM_VALUE;
+		}
+	}
+
+	return ZCFG_SUCCESS;
+}
+
+#define MAX_WEPKEY_NUM   4
+
 /*   TR98 Object Name : InternetGatewayDevice.LANDevice.i.WLANConfiguration.i
  *
  *   Related object in TR181:
@@ -4397,6 +4486,13 @@
 			continue;
 		}
 
+		zcfgRet_t paramSecured = zcfgFe98ParamGuard(paramGuardObj, (const char *)paramList->name, paramValue);
+		if(paramSecured == ZCFG_INVALID_PARAM_VALUE){
+			printf("%s: %s, invalid parameter value\n", __FUNCTION__, paramList->name);
+			ret = paramSecured;
+			goto finish;
+		}
+		
 		if((paramValue != NULL) && !strcmp(paramList->name, "MaxBitRate")) {
 			struct json_object *paramRate_1 = json_object_object_get(ssidJobj, "X_ZYXEL_UpstreamRate");
 			struct json_object *paramRate_2 = json_object_object_get(ssidJobj, "X_ZYXEL_DownstreamRate");
@@ -4429,7 +4525,21 @@
 			}
 		}
 
-		if(paramValue != NULL) {
+		if(!strcmp(paramList->name, "X_ZYXEL_OperatingFrequencyBand")) {
+			json_object_object_add(radioJobj, "OperatingFrequencyBand", JSON_OBJ_COPY(paramValue));
+			paramList++;
+			continue;
+		}
+		else if(!strcmp(paramList->name, "X_ZYXEL_OperatingChannelBandwidth")) {
+			json_object_object_add(radioJobj, "OperatingChannelBandwidth", JSON_OBJ_COPY(paramValue));
+			paramList++;
+			continue;
+		}
+		else {
+			if(!strcmp(paramList->name, "Channel")) {
+				if((ret = lanDevWlanConfirmRadio(&apIid, tr98Jobj, radioJobj)) != ZCFG_SUCCESS)
+					return ret;
+			}
 			tr181ParamValue = json_object_object_get(radioJobj, paramList->name);
 			if(tr181ParamValue != NULL) {
 				json_object_object_add(radioJobj, paramList->name, JSON_OBJ_COPY(paramValue));
@@ -4456,14 +4566,14 @@
 					continue;
 				}
 			}
-
+#if 0
 			zcfgRet_t paramSecured = zcfgFe98ParamGuard(paramGuardObj, (const char *)paramList->name, paramValue);
 			if(paramSecured == ZCFG_INVALID_PARAM_VALUE){
 				printf("%s: invalid parameter value\n", __FUNCTION__);
 				ret = paramSecured;
 				goto finish;
 			}
-
+#endif
 			/*special case*/
 			if(!strcmp(paramList->name, "BeaconType")) {
 				int wepKeyLength = (wepKeyLen > wepKey64Len) ? wepKeyLen : wepKey64Len;
Index: libzcfg_fe_tr98-1.0/lanDev_parameter.h
===================================================================
--- libzcfg_fe_tr98-1.0.orig/lanDev_parameter.h	2015-10-13 20:24:20.489941742 +0800
+++ libzcfg_fe_tr98-1.0/lanDev_parameter.h	2015-10-13 20:24:20.733941749 +0800
@@ -278,6 +278,8 @@
 	{ "X_ZYXEL_AP_AutoConfig", PARAMETER_ATTR_WRITE, 0, json_type_boolean},
 #endif
 	{ "X_ZYXEL_AutoGenWepKey", PARAMETER_ATTR_WRITE, 0, json_type_boolean},
+	{ "X_ZYXEL_OperatingFrequencyBand", PARAMETER_ATTR_WRITE, 10, json_type_string},
+	{ "X_ZYXEL_OperatingChannelBandwidth", PARAMETER_ATTR_WRITE, 20, json_type_string},
 	{ NULL, 0, 0, 0}
 };
 
