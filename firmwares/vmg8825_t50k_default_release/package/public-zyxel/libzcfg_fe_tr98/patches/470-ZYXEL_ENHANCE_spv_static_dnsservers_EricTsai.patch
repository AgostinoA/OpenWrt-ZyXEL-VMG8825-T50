Index: libzcfg_fe_tr98-1.0/wanDev.c
===================================================================
--- libzcfg_fe_tr98-1.0.orig/wanDev.c	2017-06-23 16:22:59.776126695 +0800
+++ libzcfg_fe_tr98-1.0/wanDev.c	2017-06-23 16:25:04.489493600 +0800
@@ -2748,6 +2748,11 @@
 			paramList++;
 			continue;
 		}
+		else if(!strcmp(paramList->name, "DNSOverrideAllowed")){
+			json_object_object_add(*tr98Jobj, paramList->name, json_object_new_boolean(true));
+			paramList++;
+			continue;
+		}
 		else if(!strcmp(paramList->name, "DNSEnabled")) {
 			if(dnsSrvJobj != NULL) {
 				paramValue = json_object_object_get(dnsSrvJobj, "Enable");
@@ -2758,8 +2763,7 @@
 			}
 			paramList++;
 			continue;
-		}
-		else if(!strcmp(paramList->name, "DNSServers")){
+		}else if(!strcmp(paramList->name, "DNSServers")){
 			if(dnsSrvJobj != NULL) {
 				paramValue = json_object_object_get(dnsSrvJobj, "DNSServer");
 				json_object_object_add(*tr98Jobj, paramList->name, JSON_OBJ_COPY(paramValue));
@@ -3285,6 +3289,10 @@
 		}
 	}
 
+
+	struct json_object *tr98SpvObj = NULL;
+	tr98SpvObj = zcfgFeRetrieveSpv(tr98FullPathName);
+
 	if(multiJobj){
 		multiJobj = zcfgFeSessMultiObjSetUtilize(multiJobj);
 
@@ -3524,7 +3532,12 @@
 				}
 			}
 			else if(!strcmp(paramList->name, "DNSServers")){
-				if(dnsSrvJobj){
+				if(json_object_object_get(tr98SpvObj, "DNSServers")){
+					printf("%s: spv DNSServers \n", __FUNCTION__);
+					json_object_object_add(dnsSrvJobj, "DNSServer", JSON_OBJ_COPY(paramValue));
+					json_object_object_add(dnsSrvJobj, "X_ZYXEL_Type", json_object_new_string("Static"));
+				}
+				else if(dnsSrvJobj){
 					paramValue2 = json_object_object_get(dnsSrvJobj, "DNSServer");
 #if 0
 					if(paramValue2){
@@ -3546,11 +3559,17 @@
 				}
 			}
 			else if(!strcmp(paramList->name, "X_ZYXEL_DNSType")){
+				struct json_object *spvParamValue;
+				if((spvParamValue = json_object_object_get(tr98SpvObj, "X_ZYXEL_DNSType"))){
+					json_object_object_add(dnsSrvJobj, "X_ZYXEL_Type", JSON_OBJ_COPY(spvParamValue));
+				}
+#if 0
 				if(dnsSrvJobj){
 					json_object_object_add(dnsSrvJobj, "X_ZYXEL_Type", JSON_OBJ_COPY(paramValue));
 					paramList++;
 					continue;
 				}
+#endif
 			}
 			else if(!strcmp(paramList->name, "X_ZYXEL_IGMPProxyEnable")) {
 				igmpInterface = strdup(json_object_get_string(json_object_object_get(igmpJobj, "Interface")));
@@ -5755,6 +5774,11 @@
 			paramList++;
 			continue;
 		}
+		else if(!strcmp(paramList->name, "DNSOverrideAllowed")){
+			json_object_object_add(*tr98Jobj, paramList->name, json_object_new_boolean(true));
+			paramList++;
+			continue;
+		}
 		else if(!strcmp(paramList->name, "DNSServers")){
 			if(dnsSrvJobj != NULL) {
 				paramValue = json_object_object_get(dnsSrvJobj, "DNSServer");
@@ -6156,6 +6180,9 @@
 		return ret;
 	}
 
+	struct json_object *tr98SpvObj = NULL;
+	tr98SpvObj = zcfgFeRetrieveSpv(tr98FullPathName);
+
 	if(multiJobj){
 		multiJobj = zcfgFeSessMultiObjSetUtilize(multiJobj);
 
@@ -6358,7 +6385,12 @@
 				}
 			}
 			else if(!strcmp(paramList->name, "DNSServers")){
-				if(dnsSrvJobj){
+				if(json_object_object_get(tr98SpvObj, "DNSServers")){
+					printf("%s: spv DNSServers \n", __FUNCTION__);
+					json_object_object_add(dnsSrvJobj, "DNSServer", JSON_OBJ_COPY(paramValue));
+					json_object_object_add(dnsSrvJobj, "X_ZYXEL_Type", json_object_new_string("Static"));
+				}
+				else if(dnsSrvJobj){
 					paramValue2 = json_object_object_get(dnsSrvJobj, "DNSServer");
 #if 0
 					if(paramValue2){
@@ -6380,11 +6412,17 @@
 				}
 			}
 			else if(!strcmp(paramList->name, "X_ZYXEL_DNSType")){
+				struct json_object *spvParamValue;
+				if((spvParamValue = json_object_object_get(tr98SpvObj, "X_ZYXEL_DNSType"))){
+					json_object_object_add(dnsSrvJobj, "X_ZYXEL_Type", JSON_OBJ_COPY(spvParamValue));
+				}
+#if 0
 				if(dnsSrvJobj){
 					json_object_object_add(dnsSrvJobj, "X_ZYXEL_Type", JSON_OBJ_COPY(paramValue));
 					paramList++;
 					continue;
 				}
+#endif
 			}
 			else if(!strcmp(paramList->name, "X_ZYXEL_IGMPProxyEnable")) {
 				igmpInterface = strdup(json_object_get_string(json_object_object_get(igmpJobj, "Interface")));
