Index: libzcfg_fe_tr98-1.0/devInfo.c
===================================================================
--- libzcfg_fe_tr98-1.0.orig/devInfo.c	2014-06-06 19:51:25.236824575 +0800
+++ libzcfg_fe_tr98-1.0/devInfo.c	2014-06-06 19:57:27.783635092 +0800
@@ -37,20 +37,23 @@
 	FILE *fd2 = NULL;
 	char *lst = calloc(256, sizeof(char));
 
-	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
-
+#if 0
 	if(zcfgFe98To181MappingNameGet(tr98FullPathName, mapObj) != ZCFG_SUCCESS) {
 		return ZCFG_INVALID_OBJECT;
 	}
 	
-
 	IID_INIT(devInfoIid);
 	snprintf(tr181Obj, sizeof(tr181Obj),"Device.%s", mapObj);
 	devInfoOid = zcfgFeObjNameToObjId(tr181Obj, &devInfoIid);
 
 	if((ret = feObjJsonGet(devInfoOid, &devInfoIid, &devInfoObj, updateFlag)) != ZCFG_SUCCESS)
 		return ret;
-		
+#else
+	/* InternetGatewayDevice.DeviceInfo <-> Device.DeviceInfo */
+	IID_INIT(devInfoIid);
+	if((ret = feObjJsonGet(RDM_OID_DEV_INFO, &devInfoIid, &devInfoObj, updateFlag)) != ZCFG_SUCCESS)
+		return ret;
+#endif	
 
 	/*fill up tr98 devInfo object*/
 	*tr98Jobj = json_object_new_object();
Index: libzcfg_fe_tr98-1.0/devTime.c
===================================================================
--- libzcfg_fe_tr98-1.0.orig/devTime.c	2014-06-06 19:51:25.164825480 +0800
+++ libzcfg_fe_tr98-1.0/devTime.c	2014-06-06 19:57:20.059177655 +0800
@@ -22,26 +22,14 @@
 zcfgRet_t timeObjGet(char *tr98FullPathName, int handler, struct json_object **tr98Jobj, bool updateFlag)
 {
 	zcfgRet_t ret;
-	char timeObjName[128] = {0};
-	char mapObj[128] = {0};
-	uint32_t  timeOid = 0;
 	objIndex_t timeIid;
 	struct json_object *timeObj = NULL;
 	struct json_object *paramValue = NULL;
 	tr98Parameter_t *paramList = NULL;
 
-	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
-	
-	if((ret = zcfgFe98To181MappingNameGet(tr98FullPathName, mapObj)) != ZCFG_SUCCESS) {
-		return ret;
-	}
 	IID_INIT(timeIid);
-	snprintf(timeObjName, sizeof(timeObjName),"Device.%s", mapObj);
-	timeOid = zcfgFeObjNameToObjId(timeObjName, &timeIid);
-
-	if((ret = feObjJsonGet(timeOid, &timeIid, &timeObj, updateFlag)) != ZCFG_SUCCESS)
+	if((ret = feObjJsonGet(RDM_OID_TIME, &timeIid, &timeObj, updateFlag)) != ZCFG_SUCCESS)
 		return ret;
-	
 
 	/*fill up tr98 time object*/
 	*tr98Jobj = json_object_new_object();
Index: libzcfg_fe_tr98-1.0/l2bridge.c
===================================================================
--- libzcfg_fe_tr98-1.0.orig/l2bridge.c	2014-06-06 19:51:25.164825480 +0800
+++ libzcfg_fe_tr98-1.0/l2bridge.c	2014-06-06 19:57:00.882668352 +0800
@@ -14,7 +14,6 @@
 
 extern tr98Object_t tr98Obj[];
 
-
 /*  TR98 Object Name : InternetGatewayDevice.Layer2Bridging
 
     Related object in TR181:
@@ -34,14 +33,13 @@
 
 	printf("Enter %s\n", __FUNCTION__);
 	
-       if((ret = zcfgFe98To181MappingNameGet(tr98FullPathName, mappingPathName)) != ZCFG_SUCCESS){
+	if((ret = zcfgFe98To181MappingNameGet(tr98FullPathName, mappingPathName)) != ZCFG_SUCCESS){
 		printf("98 to 181 Mapping Fail!!\n");
 		return ret;
-       }
+	}
 	else                /* mappingPathName will be Bridging */
 		printf("TR181 object %s\n", mappingPathName);
 
-
 	IID_INIT(bridingIid);
 	sprintf(tr181Obj, "Device.%s", mappingPathName);
 	bridingOid = zcfgFeObjNameToObjId(tr181Obj, &bridingIid);
@@ -263,7 +261,7 @@
 
 	printf("Enter %s\n", __FUNCTION__);
 	
-      if((ret = zcfgFe98To181MappingNameGet(tr98FullPathName, mappingPathName)) != ZCFG_SUCCESS){
+	if((ret = zcfgFe98To181MappingNameGet(tr98FullPathName, mappingPathName)) != ZCFG_SUCCESS){
 #ifdef SUNRISE_TR98_CUSTOMIZATION
 		//check if there are Ethernet.VLANTermination.i. 
 		char tr98vlanPathName[128];
@@ -277,9 +275,9 @@
 #endif
 		printf("98 to 181 Mapping Fail!!\n");
 		return ret;
-       }
+	}
 	else        /* mappingPathName will be Bridging */
-		printf("TR181 object %s\n", mappingPathName);
+		printf("%s : TR181 object %s\n", __FUNCTION__, mappingPathName);
 	
 	ptr = strrchr(mappingPathName, '.');
 	strcpy(tmpChar, ptr+1);
@@ -711,7 +709,7 @@
 	char mappingPathName[128] = {0};
 	char tmpChar[4] = {0};
 	char tr181Obj[128] = {0};
-	char paramName[64] = {0};
+	//char paramName[64] = {0};
 	char filterBrRef[32] = {0};
 	char filterIntf[32] = {0};
 	char numOfFilterIntf[4] = {0};
@@ -726,11 +724,11 @@
 	rdm_BridgingBrPort_t *brPortObj = NULL;
 
 	printf("Enter %s\n", __FUNCTION__);
-	
-       if((ret = zcfgFe98To181MappingNameGet(tr98FullPathName, mappingPathName)) != ZCFG_SUCCESS){
+
+	if((ret = zcfgFe98To181MappingNameGet(tr98FullPathName, mappingPathName)) != ZCFG_SUCCESS){
 		printf("98 to 181 Mapping Fail!!\n");
 		return ret;
-       }
+	}
 	else   /* mappingPathName will be Bridging.Filter.i */
 		printf("TR181 object %s\n", mappingPathName);
 
@@ -739,11 +737,20 @@
 	numOfInstance = atoi(tmpChar);	
 
 	IID_INIT(brFilterIid);
+#if 0
 	sprintf(tr181Obj, "Device.%s", mappingPathName);
 	brFilterOid = zcfgFeObjNameToObjId(tr181Obj, &brFilterIid);
 	if((ret = feObjJsonGet(brFilterOid, &brFilterIid, &brFilterJobj, updateFlag)) != ZCFG_SUCCESS)
 		return ret;
-	
+#else
+	brFilterIid.level = 1;
+	sscanf(mappingPathName, "Bridging.Filter.%hhu", &brFilterIid.idx[0]);
+	if((ret = feObjJsonGet(RDM_OID_BRIDGING_FILTER, &brFilterIid, &brFilterJobj, updateFlag)) != ZCFG_SUCCESS) {
+		printf("%s : Get Obj Fail\n", __FUNCTION__);
+		return ret;
+	}
+#endif	
+
 	/*fill up tr98 Bridging object*/
 	*tr98Jobj = json_object_new_object();
 	paramList = tr98Obj[handler].parameter;
@@ -765,8 +772,8 @@
 		
 		/*we default use index number of object "Device.Bridging.Bridge.i" as the parameter 'FilterBridgeReference' under tr98 */
 		if(strstr(paramList->name, "FilterBridgeReference") != NULL){
-			sprintf(paramName, "%s", "Bridge");
-			paramValue = json_object_object_get(brFilterJobj, paramName);
+			//sprintf(paramName, "%s", "Bridge");
+			paramValue = json_object_object_get(brFilterJobj, "Bridge");
 			if(paramValue != NULL) {
 				sprintf(filterBrRef, "%s", json_object_get_string(paramValue));
 				ptr = NULL;
@@ -779,12 +786,14 @@
 			}
 		}
 
-		/*we default use parameter 'X_ZYXEL_AvailableInterfaceKey' under object "Bridging.Bridge.i.Port.i" as the parameter 'FilterInterface' under tr98. 
-		   actually in tr98 , the parameter 'FilterInterface' is associated with the corresponding 'AvailableInterfaceKey' under tr98 object 'InternetGatewayDevice.Layer2Bridging.AvailableInterface.i',
-		   but in tr181, it doesn't have the AvailableInterface object, so we add the parameters which belong 'AvailableInterface' under object 'Bridging.Bridge.i.Port.i'. */
+		/*  we default use parameter 'X_ZYXEL_AvailableInterfaceKey' under object "Bridging.Bridge.i.Port.i" as the parameter 'FilterInterface' under tr98. 
+		 *  actually in tr98 , the parameter 'FilterInterface' is associated with the corresponding 'AvailableInterfaceKey' under tr98 object 
+		 *  'InternetGatewayDevice.Layer2Bridging.AvailableInterface.i',
+		 *  but in tr181, it doesn't have the AvailableInterface object, so we add the parameters which belong 'AvailableInterface' under object 'Bridging.Bridge.i.Port.i'. 
+		 */
 		if(strstr(paramList->name, "FilterInterface") != NULL){
-			sprintf(paramName, "%s", "Interface");
-			paramValue = json_object_object_get(brFilterJobj, paramName);
+			//sprintf(paramName, "%s", "Interface");
+			paramValue = json_object_object_get(brFilterJobj, "Interface");
 			if(paramValue != NULL){
 				IID_INIT(brPortIid);
 				sprintf(filterIntf, "Device.%s", json_object_get_string(paramValue));
@@ -793,8 +802,10 @@
 					sprintf(numOfFilterIntf,"%d",brPortObj->X_ZYXEL_AvailableInterfaceKey);
 					zcfgFeObjStructFree(brPortObj);
 				}
-				else 
+				else {
+					json_object_put(brFilterJobj);
 					return ret;
+				}
 				
 				json_object_object_add(*tr98Jobj, paramList->name,  json_object_new_string(numOfFilterIntf));
 				paramList++;
@@ -803,8 +814,8 @@
 		}
 
 		if(strstr(paramList->name, "Enable") != NULL){
-			sprintf(paramName, "%s", "Enable");
-			paramValue = json_object_object_get(brFilterJobj, paramName);
+			//sprintf(paramName, "%s", "Enable");
+			paramValue = json_object_object_get(brFilterJobj, "Enable");
 			if(paramValue != NULL) {
 				json_object_object_add(*tr98Jobj, paramList->name, JSON_OBJ_COPY(paramValue));
 				paramList++;
@@ -813,8 +824,8 @@
 		}
 
 		if(strstr(paramList->name, "Status") != NULL){
-			sprintf(paramName, "%s", "Status");
-			paramValue = json_object_object_get(brFilterJobj, paramName);
+			//sprintf(paramName, "%s", "Status");
+			paramValue = json_object_object_get(brFilterJobj, "Status");
 			if(paramValue != NULL) {
 				json_object_object_add(*tr98Jobj, paramList->name, JSON_OBJ_COPY(paramValue));
 				paramList++;
@@ -835,7 +846,9 @@
 		printf("Can't find parameter %s in TR181\n", paramList->name);
 		paramList++;
 	}
+
 	json_object_put(brFilterJobj);
+
 	return ZCFG_SUCCESS;
 }
 
@@ -859,10 +872,10 @@
 
 	printf("Enter %s\n", __FUNCTION__);
 	
-       if((ret = zcfgFe98To181MappingNameGet(tr98FullPathName, mappingPathName)) != ZCFG_SUCCESS){
+	if((ret = zcfgFe98To181MappingNameGet(tr98FullPathName, mappingPathName)) != ZCFG_SUCCESS){
 		printf("98 to 181 Mapping Fail!!\n");
 		return ret;
-       }
+	}
 	else       /* mappingPathName will be Bridging.Filter.i */
 		printf("TR181 object %s\n", mappingPathName);
 
@@ -982,7 +995,7 @@
 
 	printf("Enter %s\n", __FUNCTION__);
 
-        if((ret = zcfgFe98To181MappingNameGet(tr98FullPathName, mappingPathName)) != ZCFG_SUCCESS)
+	if((ret = zcfgFe98To181MappingNameGet(tr98FullPathName, mappingPathName)) != ZCFG_SUCCESS)
 		return ret;
 		
 	IID_INIT(objIid);
@@ -1183,41 +1196,44 @@
 {
 	zcfgRet_t ret;
 	char mappingPathName[32] = {0};
-	uint32_t oid = 0;
 	objIndex_t objIid;
 	struct json_object *brPortJobj = NULL;
 	struct json_object *paramValue = NULL;
 	tr98Parameter_t *paramList = NULL;
 	char zyxelPrefixParam[64] = {0};
-	char paramName[64] = {0};
 	char tr181Obj[32] = {0};
 	char mapping98ObjName[128] = {0};
 
 	printf("Enter %s\n", __FUNCTION__);
 
-       if((ret = zcfgFe98To181MappingNameGet(tr98FullPathName, mappingPathName)) != ZCFG_SUCCESS){
+	if((ret = zcfgFe98To181MappingNameGet(tr98FullPathName, mappingPathName)) != ZCFG_SUCCESS){
 		printf("98 to 181 Mapping Fail!!\n");
 		return ret;
-       }
+	}
 	else   /* mappingPathName will be Bridging */
 		printf("TR181 object %s\n", mappingPathName);
 		
 	IID_INIT(objIid);
+#if 0
 	sprintf(tr181Obj, "Device.%s", mappingPathName);
 	oid = zcfgFeObjNameToObjId(tr181Obj, &objIid);
 	
 	if((ret = feObjJsonGet(oid, &objIid, &brPortJobj, updateFlag)) != ZCFG_SUCCESS)
 		return ret;
-	
+#else
+	objIid.level = 2;
+	sscanf(mappingPathName, "Bridging.Bridge.%hhu.Port.%hhu", &objIid.idx[0], &objIid.idx[1]);
+	if((ret = feObjJsonGet(RDM_OID_BRIDGING_BR_PORT, &objIid, &brPortJobj, updateFlag)) != ZCFG_SUCCESS)
+		return ret;
+#endif
 	/*fill up tr98 Bridging object*/
 	*tr98Jobj = json_object_new_object();
 	paramList = tr98Obj[handler].parameter;
 	while(paramList->name != NULL){		
 		/*special case*/
 		if(strstr(paramList->name, "InterfaceReference") != NULL){
-			sprintf(paramName, "%s", "LowerLayers");
-			sprintf(tr181Obj, "%s", json_object_get_string(json_object_object_get(brPortJobj, paramName)));		
-			zcfgFe181To98MappingNameGet(tr181Obj, mapping98ObjName);				
+			sprintf(tr181Obj, "%s", json_object_get_string(json_object_object_get(brPortJobj, "LowerLayers")));	
+			zcfgFe181To98MappingNameGet(tr181Obj, mapping98ObjName);
 			json_object_object_add(*tr98Jobj, paramList->name, json_object_new_string(mapping98ObjName));
 			paramList++;
 			continue;
@@ -1236,6 +1252,7 @@
 		printf("Can't find parameter %s in TR181\n", paramList->name);
 		paramList++;
 	}
+
 	json_object_put(brPortJobj);
 	return ZCFG_SUCCESS;
 }
Index: libzcfg_fe_tr98-1.0/l3fwd.c
===================================================================
--- libzcfg_fe_tr98-1.0.orig/l3fwd.c	2014-06-06 19:51:25.308823670 +0800
+++ libzcfg_fe_tr98-1.0/l3fwd.c	2014-06-06 19:54:59.597298019 +0800
@@ -78,7 +78,7 @@
 	char lowerLayer[32] = {0};
 	char tr98ObjName[TR98_MAX_OBJ_NAME_LENGTH] = {0};
 
-	printf("%s : Enter\n", __FUNCTION__);
+	//printf("%s : Enter\n", __FUNCTION__);
 
 	sscanf(tr98FullPathName, "InternetGatewayDevice.Layer3Forwarding.Forwarding.%hhu", &idx);
 
@@ -135,6 +135,11 @@
 			json_object_object_add(*tr98Jobj, paramList->name, json_object_new_string(""));
 			paramList++;
 			continue;
+		}
+		else if(!strcmp(paramList->name, "Type")) {
+			json_object_object_add(*tr98Jobj, paramList->name, json_object_new_string(""));
+			paramList++;
+			continue;
 		}
 		else if(!strcmp(paramList->name, "MTU")) {
 			json_object_object_add(*tr98Jobj, paramList->name, json_object_new_int(1540));
Index: libzcfg_fe_tr98-1.0/lanDev.c
===================================================================
--- libzcfg_fe_tr98-1.0.orig/lanDev.c	2014-06-06 19:51:25.340823268 +0800
+++ libzcfg_fe_tr98-1.0/lanDev.c	2014-06-06 19:58:01.788659749 +0800
@@ -28,37 +28,6 @@
 	return numOfBridge;
 }
 
-bool isLowestLayerIntf(char*interfacePath, char*ethLinkPath)
-{
-	objIndex_t objIid;
-	rdm_IfaceStack_t *ifaceStack = NULL;
-	char brPath[32] = {0};
-	char *ptr = NULL;
-
-	IID_INIT(objIid);
-	while(zcfgFeObjStructGetNext(RDM_OID_IFACE_STACK, &objIid, (void **)&ifaceStack) == ZCFG_SUCCESS){			
-		if(strcmp(ifaceStack->HigherLayer, ethLinkPath) == 0){
-			sprintf(brPath, "%s", ifaceStack->LowerLayer);			
-			ptr = strstr(brPath, ".Port.1");
-			*ptr = '\0';				
-			zcfgFeObjStructFree(ifaceStack);
-			break;
-		}
-		zcfgFeObjStructFree(ifaceStack);
-	}
-
-	IID_INIT(objIid);
-	while(zcfgFeObjStructGetNext(RDM_OID_IFACE_STACK, &objIid, (void **)&ifaceStack) == ZCFG_SUCCESS){
-		if((strcmp(ifaceStack->LowerLayer, interfacePath) == 0) && (strstr(ifaceStack->HigherLayer, brPath) !=NULL)){
-			zcfgFeObjStructFree(ifaceStack);
-			return true;
-		}			
-		zcfgFeObjStructFree(ifaceStack);
-	}
-
-	return false;
-}
-
 static zcfgRet_t ethLinkAdd(char *ethLinkPathName, char *lowerLayer)
 {
 	zcfgRet_t ret;
@@ -95,11 +64,13 @@
 zcfgRet_t lanDevObjGet(char *tr98FullPathName, int handler, struct json_object **tr98Jobj, bool updateFlag)
 {
 	zcfgRet_t ret;
-	objIndex_t objIid, ethIntfIid;
+	objIndex_t objIid, ethIntfIid, ethLinkIid;
+	char *tmp = NULL, *token = NULL;
 	char mappingPathName[128] = {0};
 	char ethIntfPathName[32] = {0};
-	rdm_IfaceStack_t *ifaceStack = NULL;
-	rdm_EthIface_t *ethIntfObj = NULL;
+	char lowerlayers[1025] = {0};
+	rdm_EthLink_t *ethLink = NULL;
+	rdm_BridgingBrPort_t *brPortObj = NULL;
 	int numberOfEthIntf = 0;
 	int numberOfWlanIntf = 0;
 	int numberOfUsbIntf = 0;
@@ -108,11 +79,10 @@
 		printf("98 to 181 Mapping Fail!!\n");
 		return ret;
 	}
-	else{
-		/* mappingPathName will be Ethernet.Link.i */
-		printf("TR181 object %s\n", mappingPathName);
-	}
-	
+
+	/* mappingPathName will be Ethernet.Link.i */
+	//printf("TR181 object %s\n", mappingPathName);
+#if 0
 	IID_INIT(objIid);
 	IID_INIT(ethIntfIid);
 	while(feObjStructGetNext(RDM_OID_ETH_IFACE, &ethIntfIid, (void **)&ethIntfObj, updateFlag) == ZCFG_SUCCESS){
@@ -134,13 +104,61 @@
 		/*scan of usb interface number*/	
 		zcfgFeObjStructFree(ifaceStack);
 	}
+#else
+	IID_INIT(ethLinkIid);
+	ethLinkIid.level = 1;
+	sscanf(mappingPathName, "Ethernet.Link.%hhu", &ethLinkIid.idx[0]);
+
+	if((ret = zcfgFeObjStructGetWithoutUpdate(RDM_OID_ETH_LINK, &ethLinkIid, (void **)&ethLink)) != ZCFG_SUCCESS) {
+		zcfgLog(ZCFG_LOG_ERR, "%s : Get Ethernet Link Fail\n", __FUNCTION__);
+		return ret;
+	}
+
+	IID_INIT(objIid);
+	objIid.level = 2;
+	sscanf(ethLink->LowerLayers, "Bridging.Bridge.%hhu.Port.%hhu", &objIid.idx[0], &objIid.idx[1]);
+
+	if((ret = zcfgFeObjStructGetWithoutUpdate(RDM_OID_BRIDGING_BR_PORT, &objIid, (void **)&brPortObj)) != ZCFG_SUCCESS) {
+		zcfgLog(ZCFG_LOG_ERR, "%s : Get Bridge Port Fail\n", __FUNCTION__);
+		zcfgFeObjStructFree(ethLink);
+		return ret;
+	}
+
+	strcpy(lowerlayers, brPortObj->LowerLayers);
+	zcfgFeObjStructFree(brPortObj);
+
+	token = strtok_r(lowerlayers, ",", &tmp);
+	while(token != NULL) {
+		sscanf(token, "Bridging.Bridge.%hhu.Port.%hhu", &objIid.idx[0], &objIid.idx[1]);
+
+		if(zcfgFeObjStructGetWithoutUpdate(RDM_OID_BRIDGING_BR_PORT, &objIid, (void **)&brPortObj) != ZCFG_SUCCESS) {
+			zcfgLog(ZCFG_LOG_ERR, "%s : Get Bridge Port Fail\n", __FUNCTION__);
+		}
+		else {
+			if(strstr(brPortObj->LowerLayers, "WiFi.SSID") != NULL) {
+				numberOfWlanIntf++;
+			}
+			else if(strstr(brPortObj->LowerLayers, "Ethernet.Interface") != NULL) {
+				numberOfEthIntf++;
+			}
+			else if(strstr(brPortObj->LowerLayers, "USB.Interface") != NULL) {
+				numberOfUsbIntf++;
+			}
+
+			zcfgFeObjStructFree(brPortObj);
+		}
+
+		token = strtok_r(NULL, ",", &tmp);
+	}
+	zcfgFeObjStructFree(ethLink);
+#endif
 
 	/*fill up tr98 LANDevice object*/
 	*tr98Jobj = json_object_new_object();
 	json_object_object_add(*tr98Jobj, "LANEthernetInterfaceNumberOfEntries", json_object_new_int(numberOfEthIntf));
 	json_object_object_add(*tr98Jobj, "LANUSBInterfaceNumberOfEntries", json_object_new_int(numberOfUsbIntf));
 	json_object_object_add(*tr98Jobj, "LANWLANConfigurationNumberOfEntries", json_object_new_int(numberOfWlanIntf));
-	
+
 	return ZCFG_SUCCESS;
 }
 
Index: libzcfg_fe_tr98-1.0/root.c
===================================================================
--- libzcfg_fe_tr98-1.0.orig/root.c	2014-06-06 19:51:25.168825430 +0800
+++ libzcfg_fe_tr98-1.0/root.c	2014-06-06 19:54:33.633794560 +0800
@@ -18,20 +18,16 @@
 zcfgRet_t rootObjGet(char *tr98FullPathName, int handler, struct json_object **tr98Jobj, bool updateFlag)
 {
 	zcfgRet_t ret;
-	char rootObjName[128] = "Device";
-	uint32_t  rootOid = 0;
 	objIndex_t rootIid;
 	struct json_object *rootObj = NULL;
 	struct json_object *paramValue = NULL;
 	tr98Parameter_t *paramList = NULL;
 
 	printf("Enter %s\n", __FUNCTION__);
-	IID_INIT(rootIid);
-	rootOid = zcfgFeObjNameToObjId(rootObjName, &rootIid);
 
-	if((ret = feObjJsonGet(rootOid, &rootIid, &rootObj, updateFlag)) != ZCFG_SUCCESS)
+	IID_INIT(rootIid);
+	if((ret = feObjJsonGet(RDM_OID_DEVICE, &rootIid, &rootObj, updateFlag)) != ZCFG_SUCCESS)
 		return ret;
-		
 
 	/*fill up tr98 root object*/
 	*tr98Jobj = json_object_new_object();
Index: libzcfg_fe_tr98-1.0/wanDev.c
===================================================================
--- libzcfg_fe_tr98-1.0.orig/wanDev.c	2014-06-06 19:51:25.320823519 +0800
+++ libzcfg_fe_tr98-1.0/wanDev.c	2014-06-06 19:54:14.092805973 +0800
@@ -1592,9 +1592,9 @@
 	}
 
 	/*DNSServer*/
-	dnsInfoGetJobj(ipIface, &dnsSrvIid, (struct json_object **)&dnsSrvJobj, false); //dns v4
+	dnsInfoGetJobj(ipIface, &dnsSrvIid, (struct json_object **)&dnsSrvJobj, false, updateFlag); //dns v4
 #ifdef IPV6INTERFACE_PROFILE
-	dnsInfoGetJobj(ipIface, &dnsV6SrvIid, (struct json_object **)&dnsV6SrvJobj, true); //dns v6
+	dnsInfoGetJobj(ipIface, &dnsV6SrvIid, (struct json_object **)&dnsV6SrvJobj, true, updateFlag); //dns v6
 #endif
 
 	/*Fill up tr98 WANIPConnection.i object*/
@@ -1645,11 +1645,13 @@
 				continue;
 			}
 		}
+#if 0	/* Should be found in ipAddrJobj */
 		else if(!strcmp(paramList->name, "SubnetMask")) {
 			json_object_object_add(*tr98Jobj, paramList->name, json_object_new_string(""));
 			paramList++;
 			continue;
 		}
+#endif
 		else if(!strcmp(paramList->name, "NATEnabled")) {
 			natInfoSet(ipIface, *tr98Jobj);
 			paramList++;
@@ -1709,16 +1711,11 @@
 				continue;
 			}
 		}
-		else if(!strcmp(paramList->name, "PortMappingNumberOfEntries")){
-			for(i = 1; i<=254; i++){
-				snprintf(pmPath, sizeof(pmPath), "%s.PortMapping.%d", tr98FullPathName, i);
-				if(zcfgFe98To181MappingNameGet(pmPath, tmp) == ZCFG_SUCCESS) {
-					numOfEntries++;
-				}
-			}
+		else if(!strcmp(paramList->name, "PortMappingNumberOfEntries")) {
+			numOfEntries = portMappingNumGet(ipIface);
 			json_object_object_add(*tr98Jobj, paramList->name, json_object_new_int(numOfEntries));
 			paramList++;
-			continue;			
+			continue;
 		}
 		else if(!strcmp(paramList->name, "ConnectionStatus")) {
 			paramValue = json_object_object_get(ipIfaceJobj, "Status");
@@ -1824,7 +1821,6 @@
 		json_object_put(dnsV6SrvJobj);
 	}
 #endif	
-
 	return ZCFG_SUCCESS;	
 }
 /*  
@@ -1871,10 +1867,10 @@
 		return ret;
 
 	/*DNSServer*/
-	if(dnsInfoGetJobj(ipIface, &dnsSrvIid, (struct json_object **)&dnsSrvJobj, false) == ZCFG_SUCCESS) //dns v4
+	if(dnsInfoGetJobj(ipIface, &dnsSrvIid, (struct json_object **)&dnsSrvJobj, false, false) == ZCFG_SUCCESS) //dns v4
 		isDnsObjExist = true;
 #ifdef IPV6INTERFACE_PROFILE
-	if(dnsInfoGetJobj(ipIface, &dnsSrvV6Iid, (struct json_object **)&dnsSrvV6Jobj, true) == ZCFG_SUCCESS) //dns v6
+	if(dnsInfoGetJobj(ipIface, &dnsSrvV6Iid, (struct json_object **)&dnsSrvV6Jobj, true, false) == ZCFG_SUCCESS) //dns v6
 		isDnsObjExist = true;
 #endif
 	if(isDnsObjExist){
@@ -2959,9 +2955,9 @@
 		return ret;
 
 	/*DNSServer*/
-	dnsInfoGetJobj(ipIface, &dnsSrvIid, (struct json_object **)&dnsSrvJobj, false); //dns v4
+	dnsInfoGetJobj(ipIface, &dnsSrvIid, (struct json_object **)&dnsSrvJobj, false, updateFlag); //dns v4
 #ifdef IPV6INTERFACE_PROFILE
-	dnsInfoGetJobj(ipIface, &dnsV6SrvIid, (struct json_object **)&dnsV6SrvJobj, true); //dns v6
+	dnsInfoGetJobj(ipIface, &dnsV6SrvIid, (struct json_object **)&dnsV6SrvJobj, true, updateFlag); //dns v6
 #endif
 
 	/*Fill up tr98 WANPPPConnection.i object*/
@@ -3230,10 +3226,10 @@
 	
 	/*DNSServer*/
 
-	if(dnsInfoGetJobj(ipIface, &dnsSrvIid, (struct json_object **)&dnsSrvJobj, false) == ZCFG_SUCCESS) //dns v4
+	if(dnsInfoGetJobj(ipIface, &dnsSrvIid, (struct json_object **)&dnsSrvJobj, false, false) == ZCFG_SUCCESS) //dns v4
 		isDnsObjExist = true;
 #ifdef IPV6INTERFACE_PROFILE
-	if(dnsInfoGetJobj(ipIface, &dnsSrvV6Iid, (struct json_object **)&dnsSrvV6Jobj, true) == ZCFG_SUCCESS) //dns v6
+	if(dnsInfoGetJobj(ipIface, &dnsSrvV6Iid, (struct json_object **)&dnsSrvV6Jobj, true, false) == ZCFG_SUCCESS) //dns v6
 		isDnsObjExist = true;
 #endif	
 	if(isDnsObjExist){
Index: libzcfg_fe_tr98-1.0/wanDev_api.c
===================================================================
--- libzcfg_fe_tr98-1.0.orig/wanDev_api.c	2014-06-06 19:51:25.280824022 +0800
+++ libzcfg_fe_tr98-1.0/wanDev_api.c	2014-06-06 19:53:32.058182582 +0800
@@ -12,6 +12,23 @@
 #include "zcfg_debug.h"
 #include "zcfg_fe_tr98.h"
 
+int portMappingNumGet(char *ipIface)
+{
+	int num = 0;
+    objIndex_t objIid;
+	rdm_NatPortMapping_t *portMapObj = NULL;
+
+    IID_INIT(objIid);
+    while(zcfgFeObjStructGetNextWithoutUpdate(RDM_OID_NAT_PORT_MAPPING, &objIid, (void **)&portMapObj) == ZCFG_SUCCESS) {
+        if(!strcmp(portMapObj->Interface, ipIface)) {
+			num++;
+        }
+        zcfgFeObjStructFree(portMapObj);
+    }
+
+    return num;
+}
+
 zcfgRet_t natInfoSet(char *ipIface, struct json_object *tr98Jobj)
 {
 	objIndex_t natIntfIid;
@@ -20,7 +37,7 @@
 //	printf("%s : Enter\n", __FUNCTION__);
 	
 	IID_INIT(natIntfIid);
-	while(zcfgFeObjStructGetNext(RDM_OID_NAT_INTF_SETTING, &natIntfIid, (void **)&natIntfObj) == ZCFG_SUCCESS) {
+	while(zcfgFeObjStructGetNextWithoutUpdate(RDM_OID_NAT_INTF_SETTING, &natIntfIid, (void **)&natIntfObj) == ZCFG_SUCCESS) {
 		if(!strcmp(natIntfObj->Interface, ipIface)) {
 			json_object_object_add(tr98Jobj, "NATEnabled", json_object_new_boolean(natIntfObj->Enable));
 			zcfgFeObjStructFree(natIntfObj);
@@ -43,7 +60,7 @@
 //	printf("%s : Enter\n", __FUNCTION__);
 
 	IID_INIT(ipv4FwdIid);
-	while(zcfgFeObjStructGetNext(RDM_OID_ROUTING_ROUTER_V4_FWD, &ipv4FwdIid, (void **)&v4FwdObj) == ZCFG_SUCCESS) {
+	while(zcfgFeObjStructGetNextWithoutUpdate(RDM_OID_ROUTING_ROUTER_V4_FWD, &ipv4FwdIid, (void **)&v4FwdObj) == ZCFG_SUCCESS) {
 		if(!strcmp(v4FwdObj->Interface, ipIface)) {
 			json_object_object_add(tr98Jobj, "DefaultGateway", json_object_new_string(v4FwdObj->GatewayIPAddress));
 			zcfgFeObjStructFree(v4FwdObj);
@@ -85,14 +102,14 @@
 	return ZCFG_SUCCESS;
 }
 #else
-zcfgRet_t dnsInfoGetJobj(char *ipIface, objIndex_t *dnsIid, struct json_object **dnsSrvJobj, bool ipv6){
+zcfgRet_t dnsInfoGetJobj(char *ipIface, objIndex_t *dnsIid, struct json_object **dnsSrvJobj, bool ipv6, bool updateFlag){
 	zcfgRet_t ret = ZCFG_SUCCESS;
 	char *interface = NULL;
 	char *type = NULL;
 	char *dnsServers = NULL;
 	
 	IID_INIT(*dnsIid);
-	while((ret = feObjJsonGetNext(RDM_OID_DNS_CLIENT_SRV, dnsIid, dnsSrvJobj, false)) == ZCFG_SUCCESS) {
+	while((ret = feObjJsonGetNext(RDM_OID_DNS_CLIENT_SRV, dnsIid, dnsSrvJobj, updateFlag)) == ZCFG_SUCCESS) {
 		interface = json_object_get_string(json_object_object_get((*dnsSrvJobj), "Interface"));
 		type = json_object_get_string(json_object_object_get((*dnsSrvJobj), "Type"));
 		if(!strcmp(ipIface, interface)){
@@ -111,6 +128,7 @@
 	}	
 	return ret;
 }
+
 zcfgRet_t dnsAddJobj(char *ipIface, objIndex_t *dnsIid, struct json_object **dnsSrvJobj){
 	zcfgRet_t ret = ZCFG_SUCCESS;
 	char *interface = NULL;
@@ -448,7 +466,8 @@
 	return ret;
 }
 
-zcfgRet_t DhcpcIidGet(char *tr98FullPathName, objIndex_t *dhcpcIid){
+zcfgRet_t DhcpcIidGet(char *tr98FullPathName, objIndex_t *dhcpcIid)
+{
 	zcfgRet_t ret = ZCFG_SUCCESS;
 	rdm_Dhcpv4Client_t* dhcpcObj = NULL;
 	char tr98TmpName[TR98_MAX_OBJ_NAME_LENGTH] = {0};
@@ -456,8 +475,6 @@
 	char *ptr = NULL;
 	bool found = false;
 
-	zcfgLog(ZCFG_LOG_DEBUG, "%s : Enter\n", __FUNCTION__);
-
 	strcpy(tr98TmpName, tr98FullPathName);
 	
 	ptr = strstr(tr98TmpName, ".DHCPClient");
Index: libzcfg_fe_tr98-1.0/wanDev_api.h
===================================================================
--- libzcfg_fe_tr98-1.0.orig/wanDev_api.h	2014-06-06 19:51:25.280824022 +0800
+++ libzcfg_fe_tr98-1.0/wanDev_api.h	2014-06-06 19:53:16.805345701 +0800
@@ -1,11 +1,13 @@
 #ifndef _WANDEV_API_H_
 #define _WANDEV_API_H_
+
+int portMappingNumGet(char *);
 zcfgRet_t natInfoSet(char *, struct json_object *);
 zcfgRet_t defaultGwInfoSet(char *, struct json_object *);
 #if 0
 zcfgRet_t dnsInfoSet(char *, struct json_object *);
 #else
-zcfgRet_t dnsInfoGetJobj(char *, objIndex_t *, struct json_object **, bool );
+zcfgRet_t dnsInfoGetJobj(char *, objIndex_t *, struct json_object **, bool, bool);
 zcfgRet_t dnsAddJobj(char *, objIndex_t *, struct json_object **);
 #endif
 zcfgRet_t ethLinkAdd(char *, char *);
Index: libzcfg_fe_tr98-1.0/zcfg_fe_tr98.c
===================================================================
--- libzcfg_fe_tr98-1.0.orig/zcfg_fe_tr98.c	2014-06-06 19:51:25.280824022 +0800
+++ libzcfg_fe_tr98-1.0/zcfg_fe_tr98.c	2014-06-06 19:53:01.018902733 +0800
@@ -74,15 +74,27 @@
 
 static int zcfgFeTr98HandlerGet(char *tr98FullPathName)
 {
+	static int last = 0;
 	int c = 0;
 
-	while(tr98Obj[c].name != NULL) {
-		if(strcmp(tr98Obj[c].name, tr98FullPathName) == 0)
+	c = last;
+
+	do {
+		if(tr98Obj[c].name == NULL) {
+			c = 0;
+
+			if(c == last)
+				break;
+		}
+
+		if(!strcmp(tr98Obj[c].name, tr98FullPathName)) {
+			last = c;
 			return c;
+		}
 
 		c++;
-	}
-		
+	} while(c != last);
+
 	return -1;
 }
 
@@ -190,10 +202,11 @@
 	char result[256] = {0};
 	char tr98ObjNameTmp[128];
 	char *ptr;
-	
+
 #if TR98_MAPPING_DEBUG
 	printf("Enter %s\n", __FUNCTION__);
 #endif
+
 	if((ret = zcfgFeTr98ClassNameGet(tr98ObjName, tr98ClassName)) != ZCFG_SUCCESS) {
 		return ret;
 	}
@@ -201,6 +214,7 @@
 #if TR98_MAPPING_DEBUG
 	printf("tr98ClassName %s\n", tr98ClassName);
 #endif
+
 	handler = zcfgFeTr98HandlerGet(tr98ClassName);
 	if(handler != -1) {
 		if(tr98Obj[handler].getObj != NULL){
@@ -287,7 +301,6 @@
 				}
 				else
 					return ZCFG_NO_SUCH_OBJECT;
-					
 			}
 			else if( strcmp( tr98Obj[handler].name, TR98_WAN_PTM_LINK_CONF_STAT)==0){
 				ptr = strstr(tr98ObjNameTmp, ".WANPTMLinkConfig.Stats");
@@ -353,7 +366,7 @@
 			ret = zcfgFe98To181MappingNameGet(tr98ObjName, result);
 			if( (ret == ZCFG_SUCCESS))
 				return ret;
-			else{
+			else {
 				return tr98Obj[handler].getObj(tr98ObjName, handler, value, TR98_GET_WITHOUT_UPDATE);
 			}
 		}
