Index: libzcfg_fe_tr98-1.0/lanDev.c
===================================================================
--- libzcfg_fe_tr98-1.0.orig/lanDev.c	2015-10-01 21:34:50.537865294 +0800
+++ libzcfg_fe_tr98-1.0/lanDev.c	2015-10-01 21:52:28.873093100 +0800
@@ -62,6 +62,33 @@
 
 extern tr98Object_t tr98Obj[];
 
+#ifdef WIFISECURITY_AUTH_WITH_EAP
+
+#define TR98_PARM_LAN_DEV_WLAN_CFG "{\	
+		\"BeaconType\": { \"Basic\": { }, \"WPA\": { }, \"11i\": { }, \"WPAand11i\": { }, \"Emp\": { } },\
+		\"DeviceOperationMode\": { \"InfrastructureAccessPoint\": { }, \"Emp\": { } },\
+		\"BasicEncryptionModes\": { \"None\": { }, \"WEPEncryption\": { } },\
+		\"BasicAuthenticationMode\": { \"None\": { }, \"EAPAuthentication\": { }, \"SharedAuthentication\": { } },\
+  		\"WPAEncryptionModes\": { \"TKIPEncryption\": { }, \"TKIPandAESEncryption\": { }, \"Emp\": { } },\
+  		\"WPAAuthenticationMode\": { \"PSKAuthentication\": { }, \"EAPAuthentication\": { }, \"Emp\": { } },\
+  		\"IEEE11iEncryptionModes\": { \"AESEncryption\": { }, \"Emp\": { } },\
+  		\"IEEE11iAuthenticationMode\": { \"PSKAuthentication\": { }, \"EAPAuthentication\": { }, \"Emp\": { } },\
+		}"
+
+#else
+
+#define TR98_PARM_LAN_DEV_WLAN_CFG "{\	
+		\"BeaconType\": { \"Basic\": { }, \"WPA\": { }, \"11i\": { }, \"Emp\": { } },\
+		\"DeviceOperationMode\": { \"InfrastructureAccessPoint\": { }, \"Emp\": { } },\
+		\"BasicEncryptionModes\": { \"None\": { }, \"WEPEncryption\": { } },\
+		\"BasicAuthenticationMode\": { \"None\": { }, \"SharedAuthentication\": { } },\
+  		\"WPAEncryptionModes\": { \"TKIPEncryption\": { }, \"TKIPandAESEncryption\": { }, \"Emp\": { } },\
+  		\"WPAAuthenticationMode\": { \"PSKAuthentication\": { }, \"Emp\": { } },\
+  		\"IEEE11iEncryptionModes\": { \"AESEncryption\": { }, \"Emp\": { } },\
+  		\"IEEE11iAuthenticationMode\": { \"PSKAuthentication\": { }, \"Emp\": { } },\
+		}"
+
+#endif
 
 int getNumOfBridge()
 {
@@ -3916,52 +3943,28 @@
 			paramValue = json_object_object_get(radioJobj, "X_ZYXEL_Auto_Channel_Skip");
 		}
 		else if(!strcmp(paramList->name, "WEPKeyIndex")) {
-			paramValue = json_object_new_int(1);
+			int defaultKeyIndex = json_object_get_int(json_object_object_get(apSecJobj, "X_ZYXEL_DefaultKeyID"));
+			defaultKeyIndex = (defaultKeyIndex == 0) ? 1 : defaultKeyIndex;
+			paramValue = json_object_new_int(defaultKeyIndex);
 			freeflag = 1;
 		}
-		else if(!strcmp(paramList->name, "WPAEncryptionModes") || !strcmp(paramList->name, "IEEE11iEncryptionModes")) {
-			char *encryption = NULL;
-			paramValue = json_object_object_get(apSecJobj, "X_ZYXEL_Encryption");
-			encryption = json_object_get_string(paramValue);
-			if(!strcmp(encryption, "tkipaes")) paramValue = json_object_new_string("TKIPandAESEncryption");
-			else if(!strcmp(encryption, "aes")) paramValue = json_object_new_string("AESEncryption");
-			else if(!strcmp(encryption, "wep")) paramValue = json_object_new_string("WEPEncryption");
-			else paramValue = json_object_new_string("");
-			freeflag = 1;
-		}
-		else if(!strcmp(paramList->name, "WPAAuthenticationMode")) {
-			paramValue = json_object_object_get(apSecJobj, "ModeEnabled");
-			if(paramValue != NULL) {
-				if(!strcmp(json_object_get_string(paramValue), "WPA2-Personal") 
-					|| !strcmp(json_object_get_string(paramValue), "WPA-WPA2-Personal") ) {
-					paramValue = json_object_new_string("PSKAuthentication");
-				}	
-				else if(!strcmp(json_object_get_string(paramValue), "WPA2-Enterprise")
-					|| !strcmp(json_object_get_string(paramValue), "WPA-WPA2-Enterprise")){
-					paramValue = json_object_new_string("EAPAuthentication");
+		else if(!strcmp(paramList->name, "WPAEncryptionModes")) {
+			paramValue = json_object_object_get(apSecJobj, "X_ZYXEL_WPAEncryption");
 				}
-				else {
-					paramValue = json_object_new_string("");
-				}
-				freeflag = 1;
+		else if(!strcmp(paramList->name, "IEEE11iEncryptionModes")) {
+			paramValue = json_object_object_get(apSecJobj, "X_ZYXEL_11iEncryption");
 			}
+		else if(!strcmp(paramList->name, "WPAAuthenticationMode")) {
+			paramValue = json_object_object_get(apSecJobj, "X_ZYXEL_WPAAuthentication");
 		}
 		else if(!strcmp(paramList->name, "IEEE11iAuthenticationMode")) {
-			paramValue = json_object_object_get(apSecJobj, "ModeEnabled");
-			if(paramValue != NULL) {
-				if(!strcmp(json_object_get_string(paramValue), "WPA2-Personal") 
-					|| !strcmp(json_object_get_string(paramValue), "WPA-WPA2-Personal") ) {
-					paramValue = json_object_new_string("PSKAuthentication");
-				}	
-				else if(!strcmp(json_object_get_string(paramValue), "WPA2-Enterprise")
-					|| !strcmp(json_object_get_string(paramValue), "WPA-WPA2-Enterprise")){
-					paramValue = json_object_new_string("EAPAuthentication");
+			paramValue = json_object_object_get(apSecJobj, "X_ZYXEL_11iAuthentication");
 				}
-				else {
-					paramValue = json_object_new_string("");
-				}
-				freeflag = 1;
+		else if(!strcmp(paramList->name, "BasicAuthenticationMode")) {
+			paramValue = json_object_object_get(apSecJobj, "X_ZYXEL_WEPAuthentication");
 			}
+		else if(!strcmp(paramList->name, "BasicEncryptionModes")) {
+			paramValue = json_object_object_get(apSecJobj, "X_ZYXEL_WEPEncryption");
 		}
 		else if(!strcmp(paramList->name, "BeaconType")) {
 			paramValue = json_object_object_get(apSecJobj, "ModeEnabled");
@@ -3981,26 +3984,6 @@
 				freeflag = 1;
 			}
 		}
-		else if(!strcmp(paramList->name, "BasicEncryptionModes")) {
-			paramValue = json_object_object_get(apSecJobj, "ModeEnabled");
-			if(!strcmp(json_object_get_string(paramValue), "WEP-64") || !strcmp(json_object_get_string(paramValue), "WEP-128")) {
-				paramValue = json_object_new_string("WEPEncryption");
-			}
-			else {
-				paramValue = json_object_new_string("None");
-			}
-			freeflag = 1;
-		}
-		else if(!strcmp(paramList->name, "BasicAuthenticationMode")) {
-			paramValue = json_object_object_get(apSecJobj, "ModeEnabled");
-			if(!strcmp(json_object_get_string(paramValue), "WEP-64") || !strcmp(json_object_get_string(paramValue), "WEP-128")) {
-				paramValue = json_object_new_string("SharedAuthentication");
-			}
-			else {
-				paramValue = json_object_new_string("None");
-			}
-			freeflag = 1;
-		}
 		else if(!strcmp(paramList->name, "AutoRateFallBackEnabled")) {
 			paramValue = json_object_new_string("true");
 			freeflag = 1;
@@ -4093,37 +4076,24 @@
 	zcfgRet_t ret = ZCFG_SUCCESS;
 	char type[12] = {0};
 	struct json_object *tr98ParamValue = NULL;
-	struct json_object *paramValue = NULL;
 	const char *modeEnabled = json_object_get_string(json_object_object_get(apSecJobj, "ModeEnabled"));
 	const char *tr98ParmStr_1 = NULL, *tr98ParmStr_2 = NULL;
+	const char *tr181AuthStr = NULL, *tr98Auth11iStr = NULL, *tr98AuthWPAStr = NULL;
+	int modifyAuth = 0, tr181Auth = 0, tr98Auth11i = 0, tr98AuthWPA = 0;
 
 	strcpy(type, json_object_get_string(beaconType));
 
 	if(!strcmp(type, "Basic")) {
-		const char *basicEncryptModes = NULL;
-
-		tr98ParamValue = json_object_object_get(tr98Jobj, "BasicEncryptionModes");
-		basicEncryptModes = json_object_get_string(tr98ParamValue);
+		const char *basicEncryptModes = NULL, *basicAuthMode = NULL;
 
-		if(basicEncryptModes && !strcmp(basicEncryptModes, "None")) {
-			json_object_object_add(apSecJobj, "ModeEnabled", json_object_new_string("None"));
-		}
-		else if(basicEncryptModes && !strcmp(basicEncryptModes, "WEPEncryption")) {
-			if(modeEnabled && strstr(modeEnabled, "WEP")) {
-				//modeEnabled is already WEP encryption
-				printf("%s: modeEnabled %s has specified\n", __FUNCTION__, modeEnabled);
-			}
-			else if(wepKeyLen == 5 || wepKeyLen == 10){
+		if(wepKeyLen == 5 || wepKeyLen == 10){
 				json_object_object_add(apSecJobj, "ModeEnabled", json_object_new_string("WEP-64"));
 			}
 			else if(wepKeyLen == 0 || wepKeyLen == 13 || wepKeyLen == 26){
 				json_object_object_add(apSecJobj, "ModeEnabled", json_object_new_string("WEP-128"));
 			}
 		}
-	}
-//#ifdef WIFI_SECURITY_WPA
 	else if(!strcmp(type, "WPA")) {
-		bool invalid=false;
 		tr98ParamValue = json_object_object_get(tr98Jobj, "WPAAuthenticationMode");
 		if(tr98ParamValue) {
 			if(!strcmp(json_object_get_string(tr98ParamValue), "EAPAuthentication")) {
@@ -4131,34 +4101,30 @@
 			}
 			else if(!strcmp(json_object_get_string(tr98ParamValue), "PSKAuthentication")) {
 				json_object_object_add(apSecJobj, "ModeEnabled", json_object_new_string("WPA-Personal"));
-			}//else return ZCFG_INVALID_PARAM_VALUE;
-			else invalid=true;
+			}
+			else
+				return ZCFG_INVALID_PARAM_VALUE;
 		}		
 
 		tr98ParamValue = json_object_object_get(tr98Jobj, "WPAEncryptionModes");		
 		if(tr98ParamValue) {
 			if(!strcmp(json_object_get_string(tr98ParamValue), "TKIPandAESEncryption")) {
 				json_object_object_add(apSecJobj, "X_ZYXEL_Encryption", json_object_new_string("tkipaes"));
-				invalid=false;
 			}
 			else if(!strcmp(json_object_get_string(tr98ParamValue), "TKIPEncryption")) {
 				json_object_object_add(apSecJobj, "X_ZYXEL_Encryption", json_object_new_string("tkip"));
-				invalid=false;
 			}
 			else if(!strcmp(json_object_get_string(tr98ParamValue), "AESEncryption")) {
 				json_object_object_add(apSecJobj, "X_ZYXEL_Encryption", json_object_new_string("aes"));
-				invalid=false;
-			}else return ZCFG_INVALID_PARAM_VALUE;
 		}
-		if (invalid) return ZCFG_INVALID_PARAM_VALUE;
-
+			else
+				return ZCFG_INVALID_PARAM_VALUE;
+		}
 	}
-//#endif
 	else if(!strcmp(type, "11i")) {
 		int apAuth = 0;
 
 		tr98ParmStr_1 = json_object_get_string(json_object_object_get(tr98Jobj, "IEEE11iAuthenticationMode"));
-		tr98ParmStr_2 = json_object_get_string(json_object_object_get(tr98Jobj, "WPAAuthenticationMode"));
 
 		if(strstr(modeEnabled, "WPA2-Enterprise") || strstr(modeEnabled, "WPA-WPA2-Enterprise"))
 			apAuth = WPA2_ENTERPRISE;
@@ -4166,41 +4132,37 @@
 			apAuth = WPA2_PERSONAL;
 
 		if(apAuth == WPA2_PERSONAL) {
-			if(!strcmp(tr98ParmStr_1, "EAPAuthentication") || !strcmp(tr98ParmStr_2, "EAPAuthentication")) {
+			if(!strcmp(tr98ParmStr_1, "EAPAuthentication")) {
 				if((index == WIFI_24_PRIMARY_LINK) || (index == WIFI_5_PRIMARY_LINK))
 					return ZCFG_INVALID_PARAM_VALUE;
 
 				json_object_object_add(apSecJobj, "ModeEnabled", json_object_new_string("WPA2-Enterprise"));
 			}else json_object_object_add(apSecJobj, "ModeEnabled", json_object_new_string("WPA2-Personal"));
 		}else if(apAuth == WPA2_ENTERPRISE) {
-			if(!strcmp(tr98ParmStr_1, "PSKAuthentication") || !strcmp(tr98ParmStr_2, "PSKAuthentication"))
+			if(!strcmp(tr98ParmStr_1, "PSKAuthentication"))
 				json_object_object_add(apSecJobj, "ModeEnabled", json_object_new_string("WPA2-Personal"));
 			else json_object_object_add(apSecJobj, "ModeEnabled", json_object_new_string("WPA2-Enterprise"));
 		}else {
-			if(!strcmp(tr98ParmStr_1, "EAPAuthentication") && !strcmp(tr98ParmStr_2, "PSKAuthentication"))
-				return ZCFG_INVALID_PARAM_VALUE;
-			if(!strcmp(tr98ParmStr_1, "PSKAuthentication") && !strcmp(tr98ParmStr_2, "EAPAuthentication"))
-				return ZCFG_INVALID_PARAM_VALUE;
-
-			if(!strcmp(tr98ParmStr_1, "EAPAuthentication") || !strcmp(tr98ParmStr_2, "EAPAuthentication")) {
+			if(!strcmp(tr98ParmStr_1, "EAPAuthentication")) {
 				if((index == WIFI_24_PRIMARY_LINK) || (index == WIFI_5_PRIMARY_LINK))
 					return ZCFG_INVALID_PARAM_VALUE;
 
 				json_object_object_add(apSecJobj, "ModeEnabled", json_object_new_string("WPA2-Enterprise"));
-			}else if(!strcmp(tr98ParmStr_1, "PSKAuthentication") || !strcmp(tr98ParmStr_2, "PSKAuthentication")) {
+			}else if(!strcmp(tr98ParmStr_1, "PSKAuthentication")) {
 				json_object_object_add(apSecJobj, "ModeEnabled", json_object_new_string("WPA2-Personal"));
-			}else {
+			}
+			else {
 				return ZCFG_INVALID_PARAM_VALUE;
 			}
 		}
 
 
 		tr98ParmStr_1 = json_object_get_string(json_object_object_get(tr98Jobj, "IEEE11iEncryptionModes"));
-		tr98ParmStr_2 = json_object_get_string(json_object_object_get(tr98Jobj, "WPAEncryptionModes"));
-
-		if(strcmp(tr98ParmStr_1, "AESEncryption") || strcmp(tr98ParmStr_2, "AESEncryption")) {
+		if((strlen(tr98ParmStr_1) > 0) && strcmp(tr98ParmStr_1, "AESEncryption"))
 			return ZCFG_INVALID_PARAM_VALUE;
-		}else json_object_object_add(apSecJobj, "X_ZYXEL_Encryption", json_object_new_string("aes"));
+
+		if(!strcmp(tr98ParmStr_1, "AESEncryption"))
+			json_object_object_add(apSecJobj, "X_ZYXEL_Encryption", json_object_new_string("aes"));
 	}
 	else if(!strcmp(type, "WPAand11i")) {
 		int apAuth = 0, apEncryp = 0;
@@ -4231,7 +4193,8 @@
 				json_object_object_add(apSecJobj, "ModeEnabled", json_object_new_string("WPA-WPA2-Enterprise"));
 			}else if(!strcmp(tr98ParmStr_1, "PSKAuthentication") || !strcmp(tr98ParmStr_2, "PSKAuthentication")) {
 				json_object_object_add(apSecJobj, "ModeEnabled", json_object_new_string("WPA-WPA2-Personal"));
-			}else {
+			}
+			else {
 				return ZCFG_INVALID_PARAM_VALUE;
 			}
 		}
@@ -4256,17 +4219,21 @@
 			if(!strcmp(tr98ParmStr_1, "AESEncryption") || !strcmp(tr98ParmStr_2, "AESEncryption"))
 				json_object_object_add(apSecJobj, "X_ZYXEL_Encryption", json_object_new_string("aes"));
 		}else {
-			if(!strcmp(tr98ParmStr_1, "AESEncryption")) json_object_object_add(apSecJobj, "X_ZYXEL_Encryption", json_object_new_string("aes"));
-			else json_object_object_add(apSecJobj, "X_ZYXEL_Encryption", json_object_new_string("tkipaes"));
+			if(!strcmp(tr98ParmStr_1, "AESEncryption")) 
+				json_object_object_add(apSecJobj, "X_ZYXEL_Encryption", json_object_new_string("aes"));
+			else if(!strcmp(tr98ParmStr_1, "TKIPandAESEncryption"))
+				json_object_object_add(apSecJobj, "X_ZYXEL_Encryption", json_object_new_string("tkipaes"));
 		}
-	}else {
+	}
+	else {
 		ret = ZCFG_INVALID_PARAM_VALUE;
 	}
 
-	json_object_put(paramValue);
-
 	return ret;
 }
+
+#define MAX_WEPKEY_NUM   4
+
 /*   TR98 Object Name : InternetGatewayDevice.LANDevice.i.WLANConfiguration.i
  *
  *   Related object in TR181:
@@ -4294,6 +4261,7 @@
 	int wepKeyLen = 0, wepKey64Len = 0;
 	struct json_object *wepKey = NULL, *wepKey64 = NULL;
 	bool apWpsEnable = false;
+	struct json_object *paramGuardObj = NULL;
 
 	if(zcfgFe98To181MappingNameGet(tr98FullPathName, wifiSsid) != ZCFG_SUCCESS) {
 		/*  The instance number of WLANConfiguration.i will be continuous because of the tr98 to tr181 mapping table. 
@@ -4355,7 +4323,7 @@
 		apSecJobjBak = json_tokener_parse(json_object_to_json_string(apSecJobj));
 
 		defaultKeyIndex = json_object_get_int(json_object_object_get(apSecJobj, "X_ZYXEL_DefaultKeyID"));
-		defaultKeyIndex = (defaultKeyIndex > 0 && defaultKeyIndex <=4) ? defaultKeyIndex : 1;
+		defaultKeyIndex = (defaultKeyIndex > 0 && defaultKeyIndex <=MAX_WEPKEY_NUM) ? defaultKeyIndex : 1;
 		if(defaultKeyIndex == 1)
 			strcpy(keyParamName, "WEPKey");
 		else
@@ -4409,6 +4377,8 @@
 	/*Backup for recover*/
 	ssidJobjBak = json_tokener_parse(json_object_to_json_string(ssidJobj));
 
+	paramGuardObj = zcfgFe98ParamGuardInit((const char *)TR98_PARM_LAN_DEV_WLAN_CFG, NULL);
+
 	paramList = tr98Obj[handler].parameter;
 	while(paramList->name != NULL) {
 		/*Write new parameter value from tr98 object to tr181 objects*/
@@ -4478,6 +4448,13 @@
 				}
 			}
 
+			zcfgRet_t paramSecured = zcfgFe98ParamGuard(paramGuardObj, (const char *)paramList->name, paramValue);
+			if(paramSecured == ZCFG_INVALID_PARAM_VALUE){
+				printf("%s: invalid parameter value\n", __FUNCTION__);
+				ret = paramSecured;
+				goto finish;
+			}
+
 			/*special case*/
 			if(!strcmp(paramList->name, "BeaconType")) {
 				int wepKeyLength = (wepKeyLen > wepKey64Len) ? wepKeyLen : wepKey64Len;
@@ -4492,10 +4469,30 @@
 				}
 			}
 			else if(!strcmp(paramList->name, "WEPKeyIndex")) {
-				bool autoWepKey = json_object_get_boolean(json_object_object_get(apSecJobj, "X_ZYXEL_AutoGenWepKey"));
+				bool autoWepKey = json_object_get_boolean(json_object_object_get(tr98Jobj, "X_ZYXEL_AutoGenWepKey"));
 				int wepKeyIndex = json_object_get_int(paramValue);
-				if((autoWepKey == false) || (wepKeyIndex == 1))
+				if((autoWepKey == false) && (wepKeyIndex > 0) && (wepKeyIndex <= MAX_WEPKEY_NUM))
 					json_object_object_add(apSecJobj, "X_ZYXEL_DefaultKeyID", JSON_OBJ_COPY(paramValue));
+				else
+					json_object_object_add(apSecJobj, "X_ZYXEL_DefaultKeyID", json_object_new_int(1));
+			}
+			else if(!strcmp(paramList->name, "BasicAuthenticationMode")) {
+				json_object_object_add(apSecJobj, "X_ZYXEL_WEPAuthentication", JSON_OBJ_COPY(paramValue));
+			}
+			else if(!strcmp(paramList->name, "BasicEncryptionModes")) {
+				json_object_object_add(apSecJobj, "X_ZYXEL_WEPEncryption", JSON_OBJ_COPY(paramValue));
+			}
+			else if(!strcmp(paramList->name, "IEEE11iAuthenticationMode")) {
+				json_object_object_add(apSecJobj, "X_ZYXEL_11iAuthentication", JSON_OBJ_COPY(paramValue));
+			}
+			else if(!strcmp(paramList->name, "WPAAuthenticationMode")) {
+				json_object_object_add(apSecJobj, "X_ZYXEL_WPAAuthentication", JSON_OBJ_COPY(paramValue));
+			}
+			else if(!strcmp(paramList->name, "IEEE11iEncryptionModes")) {
+				json_object_object_add(apSecJobj, "X_ZYXEL_11iEncryption", JSON_OBJ_COPY(paramValue));
+			}
+			else if(!strcmp(paramList->name, "WPAEncryptionModes")) {
+				json_object_object_add(apSecJobj, "X_ZYXEL_WPAEncryption", JSON_OBJ_COPY(paramValue));
 			}
 
 			/*End of special case*/
@@ -4547,6 +4544,8 @@
 	}
 
 finish:
+	zcfgFe98ParamGuardRelease(paramGuardObj);
+
 	if(multiJobj == NULL){
 		json_object_put(radioJobj);
 		json_object_put(ssidJobj);
@@ -5502,7 +5501,7 @@
 	char wifiSsid[32] = {0};
 	char ssidRef[32] = {0};
 	int keylength = 0;
-	char paramName[20] = {0};
+	char wepKey64ParmName[20] = {0}, wepKeyParmName[20] = {0};
 	objIndex_t apIid;
 	struct json_object *apJobj = NULL, *apSecJobj = NULL;
 	struct json_object *paramValue = NULL;
@@ -5561,22 +5560,20 @@
 		if(paramValue != NULL) {
 			if(!strcmp(paramList->name, "WEPKey")){
 				keylength = strlen((const char *)json_object_get_string(paramValue));
+				sprintf(wepKey64ParmName, "X_ZYXEL_WEP64Key%hhu", idx);
+				sprintf(wepKeyParmName, "X_ZYXEL_WEPKey%hhu", idx);
 				if((5 == keylength) || (10 == keylength)){
-					sprintf(paramName, "X_ZYXEL_WEP64Key%hhu", idx);
-					json_object_object_add(apSecJobj, paramName, JSON_OBJ_COPY(paramValue));
-					paramList++;
-					json_object_object_add(apSecJobj, "ModeEnabled", json_object_new_string("WEP-64"));
+					json_object_object_add(apSecJobj, wepKey64ParmName, JSON_OBJ_COPY(paramValue));
+					json_object_object_add(apSecJobj, "X_ZYXEL_WepModeSelect", json_object_new_string("WEP-64"));
 					paramList++;
 					continue;
 				}else if((13 == keylength) || (26 == keylength)){
 					if(1 != idx){
-						sprintf(paramName, "X_ZYXEL_WEPKey%hhu", idx);
-						json_object_object_add(apSecJobj, paramName, JSON_OBJ_COPY(paramValue));
+						json_object_object_add(apSecJobj, wepKeyParmName, JSON_OBJ_COPY(paramValue));
 					}else{
 						json_object_object_add(apSecJobj, paramList->name, JSON_OBJ_COPY(paramValue));
 					}
-					paramList++;
-					json_object_object_add(apSecJobj, "ModeEnabled", json_object_new_string("WEP-128"));
+					json_object_object_add(apSecJobj, "X_ZYXEL_WepModeSelect", json_object_new_string("WEP-128"));					
 					paramList++;
 					continue;
 				}
Index: libzcfg_fe_tr98-1.0/zcfg_fe_tr98.c
===================================================================
--- libzcfg_fe_tr98-1.0.orig/zcfg_fe_tr98.c	2015-10-01 21:34:50.449865291 +0800
+++ libzcfg_fe_tr98-1.0/zcfg_fe_tr98.c	2015-10-01 21:34:50.601865296 +0800
@@ -652,6 +652,62 @@
 	return ZCFG_SUCCESS;
 }
 
+struct json_object *zcfgFe98ParamGuardInit(const char *parmList, void *addition)
+{
+	if(!parmList)
+		return NULL;
+
+	if(addition)
+		printf("%s: has addition\n", __FUNCTION__);
+
+	struct json_object *parmListObj = json_tokener_parse((const char *)parmList);
+	if(!parmListObj) {
+		printf("%s: parmList object build fail: %s\n", __FUNCTION__, parmList);
+		return NULL;
+	}
+
+	return parmListObj;
+}
+
+zcfgRet_t zcfgFe98ParamGuard(struct json_object *parmList, const char *parmName, struct json_object *param)
+{
+	struct json_object *paramValueObjs, *paramValueObj = NULL;
+	bool secured = false;
+	enum json_type parmtype = json_type_null;
+	const char *paramString = NULL;
+
+	if(!parmList || !parmName)
+		return ZCFG_INTERNAL_ERROR;
+
+	if(!param)
+		return ZCFG_NO_SUCH_PARAMETER;
+
+	parmtype = json_object_get_type(param);
+	if(parmtype == json_type_string)
+		paramString = json_object_get_string(param);
+
+
+	paramValueObjs = json_object_object_get(parmList, parmName);
+	if(!paramValueObjs)
+		return ZCFG_NO_SUCH_PARAMETER;
+
+	if((!paramString || !strlen(paramString)) && json_object_object_get(paramValueObjs, "Emp"))
+		secured = true;
+	else if(paramString && strlen(paramString)) {
+		paramValueObj = json_object_object_get(paramValueObjs, paramString);
+		secured = (paramValueObj) ? true : false;
+		if(paramValueObj)
+			printf("%s: has parameter %s %s\n", __FUNCTION__, parmName, paramString);
+	}
+
+	return (secured == true) ? ZCFG_SUCCESS : ZCFG_INVALID_PARAM_VALUE;
+}
+
+void zcfgFe98ParamGuardRelease(struct json_object *parmList)
+{
+	json_object_put(parmList);
+}
+
 zcfgRet_t zcfgFe98StaticNameTableInit(void)
 {
 	int maxTableEntries = e_TR98_LAST;
Index: libzcfg_fe_tr98-1.0/zcfg_fe_tr98.h
===================================================================
--- libzcfg_fe_tr98-1.0.orig/zcfg_fe_tr98.h	2015-10-01 21:34:50.449865291 +0800
+++ libzcfg_fe_tr98-1.0/zcfg_fe_tr98.h	2015-10-01 21:34:50.601865296 +0800
@@ -128,6 +128,10 @@
 zcfgRet_t zcfgFeTr98ParamChk(char *, char *, char *);
 zcfgSubObjNameList_t* zcfgFeTr98SubObjNameListGet(char *);
 
+struct json_object *zcfgFe98ParamGuardInit(const char *, void *);
+zcfgRet_t zcfgFe98ParamGuard(struct json_object *, const char *, struct json_object *);
+void zcfgFe98ParamGuardRelease(struct json_object *);
+
 zcfg_offset_t zcfgFeTr181WanSetLink(char *wanLinkName, bool set, void **retObj, objIndex_t *retObjIndex, int *applied);
 
 zcfgRet_t zcfgFeTr181IfaceStackLowerLayerGet(char *higherLayer, char *result);
