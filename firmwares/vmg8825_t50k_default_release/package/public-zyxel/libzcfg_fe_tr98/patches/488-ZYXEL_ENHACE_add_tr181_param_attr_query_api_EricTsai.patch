Index: libzcfg_fe_tr98-1.0/zcfg_fe_msg.c
===================================================================
--- libzcfg_fe_tr98-1.0.orig/zcfg_fe_msg.c	2017-08-02 14:11:17.688659815 +0800
+++ libzcfg_fe_tr98-1.0/zcfg_fe_msg.c	2017-08-02 14:11:20.120659835 +0800
@@ -124,7 +124,8 @@
 
 	//zcfgLog(ZCFG_LOG_INFO, "%s\n", __FUNCTION__);
 
-	if(!tr98ObjIid || !parmName || !oid || !objIid || !queriedParmName)
+	//if(!tr98ObjIid || !parmName || !oid || !objIid || !queriedParmName)
+	if(!tr98ObjIid || !parmName)
 		return ZCFG_INTERNAL_ERROR;
 
 	//zcfgLog(ZCFG_LOG_INFO, "%s: %u %hu,%hu,%hu,%hu,%hu,%hu %s\n", __FUNCTION__, seqnum, tr98ObjIid->idx[0],
@@ -144,6 +145,7 @@
 	queryData = (zcfgParmQryAttr_t *)(sendMsgHdr + 1);
 	queryData->objnum = seqnum;
 	memcpy(&queryData->objIid, tr98ObjIid, sizeof(objIndex_t));
+	queryData->attr = *attr;
 	queryData->parmNameLen = parmNameLen;
 	dataParmName = (char *)(queryData + 1);
 	strcpy(dataParmName, parmName);
@@ -174,15 +176,20 @@
 			return ZCFG_INTERNAL_ERROR;
 		}
 		#endif
-		*oid = queriedData->objnum;
-		memcpy(objIid, &queriedData->objIid, sizeof(objIndex_t));
+
+
+		if(oid)
+			*oid = queriedData->objnum;
+		if(objIid)
+			memcpy(objIid, &queriedData->objIid, sizeof(objIndex_t));
 		if(attr) {
 			*attr = queriedData->attr;
 			parmAttr = *attr;
 			//printf("%s: attr 0x%x\n", __FUNCTION__, *attr);
 		}
 		dataParmName = (char *)(queriedData + 1);
-		strcpy(queriedParmName, dataParmName);
+		if(queriedParmName)
+			strcpy(queriedParmName, dataParmName);
 
 		//zcfgLog(ZCFG_LOG_INFO, "%s: queried %u %hu,%hu,%hu,%hu,%hu,%hu %s 0x%x\n", __FUNCTION__, *oid, objIid->idx[0],
         // objIid->idx[1], objIid->idx[2], objIid->idx[3], objIid->idx[4], objIid->idx[5], queriedParmName, parmAttr);
@@ -193,6 +200,83 @@
 	return ZCFG_SUCCESS;
 }
 
+zcfgRet_t zcfgFeTr181ParmAttrQry(zcfg_offset_t oid, objIndex_t *objIid, char *parmName, zcfg_name_t *seqnum, objIndex_t *tr98ObjIid, const char *queriedParmName, uint32_t *qriedTr181Attr)
+{
+	zcfgRet_t rst = ZCFG_SUCCESS;
+	uint32_t attr = 0;
+
+	attr |= PARAMETER_ATTR_TR181;
+	if((rst = zcfgFeParmAttrQry(oid, objIid, parmName, seqnum, tr98ObjIid, queriedParmName, &attr)) == ZCFG_SUCCESS)
+		*qriedTr181Attr = attr;
+
+	return rst;
+}
+
+zcfgRet_t zcfgFeObjParamAttrQry(uint32_t objnum, objIndex_t *objIid, struct json_object **parmAttrObj, uint32_t attr)
+{
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	zcfgMsg_t *sendMsgHdr = NULL;
+	zcfgMsg_t *recvMsgHdr = NULL;
+	char *sendBuf = NULL, *recvBuf = NULL;
+	zcfgParmQryAttr_t *queryData = NULL;
+	int msgDataLen = 0;
+
+
+	zcfgLog(ZCFG_LOG_INFO, "%s\n", __FUNCTION__);
+
+	if(!objIid || !parmAttrObj)
+		return ZCFG_INTERNAL_ERROR;
+
+	//zcfgLog(ZCFG_LOG_INFO, "%s: %u %hu,%hu,%hu,%hu,%hu,%hu %s\n", __FUNCTION__, seqnum, tr98ObjIid->idx[0],
+	//   tr98ObjIid->idx[1], tr98ObjIid->idx[2], tr98ObjIid->idx[3], tr98ObjIid->idx[4], tr98ObjIid->idx[5], parmName);
+
+	msgDataLen = sizeof(zcfgParmQryAttr_t);
+	sendBuf = (char *)malloc(sizeof(zcfgMsg_t) + msgDataLen);
+	memset(sendBuf, 0, (sizeof(zcfgMsg_t) + msgDataLen));
+
+	sendMsgHdr = (zcfgMsg_t *)sendBuf;
+	sendMsgHdr->type = REQUEST_QUERY_OBJ_PARAM_ATTR;
+	sendMsgHdr->length = msgDataLen;
+	sendMsgHdr->dstEid = ZCFG_EID_ZCMD;
+
+	queryData = (zcfgParmQryAttr_t *)(sendMsgHdr + 1);
+	queryData->objnum = objnum;
+	memcpy(&queryData->objIid, objIid, sizeof(objIndex_t));
+	queryData->attr = attr;
+
+	ret = zcfgMsgSendAndGetReply(sendMsgHdr, (zcfgMsg_t **)&recvBuf, 0);
+
+	if(ret != ZCFG_SUCCESS) {
+		return ret;
+	}
+
+	recvMsgHdr = (zcfgMsg_t*)recvBuf;
+	if ( recvMsgHdr->type == RESPONSE_FAIL ) {
+		free(recvBuf);
+		return ZCFG_INTERNAL_ERROR;
+	}
+
+	if( recvMsgHdr->length > 0 ) {
+		char *queriedData = (char *)malloc(recvMsgHdr->length + 1);
+		char *data = (char *)(recvBuf+sizeof(zcfgMsg_t));
+
+		memcpy(queriedData, data, recvMsgHdr->length);
+		*(queriedData+recvMsgHdr->length) = '\0';
+		struct json_object *obj = json_tokener_parse(queriedData);
+		if(obj){
+			*parmAttrObj = obj;
+		}
+
+		free(queriedData);
+	}else{
+		ret = ZCFG_INTERNAL_ERROR;
+	}
+
+	free(recvBuf);
+
+	return ret;
+}
+
 zcfgRet_t zcfgFeMultiParmAttrSet(zcfgFeSetParmAttrLst_t *setParmAttrLst)
 {
 	zcfgFeSetParmAttr_t *setParmAttr = NULL;
Index: libzcfg_fe_tr98-1.0/zcfg_fe_msg.h
===================================================================
--- libzcfg_fe_tr98-1.0.orig/zcfg_fe_msg.h	2017-08-02 14:11:18.208659819 +0800
+++ libzcfg_fe_tr98-1.0/zcfg_fe_msg.h	2017-08-02 14:11:20.120659835 +0800
@@ -47,5 +47,6 @@
 zcfgRet_t zcfgObjMappingGet(uint32_t msgType, uint32_t num_1, objIndex_t *objIdxData_1, uint32_t *num_2, objIndex_t *objIdxData_2);
 zcfgRet_t zcfgFeMultiParmAttrSet(zcfgFeSetParmAttrLst_t *setParmAttrLst);
 zcfgRet_t zcfgFeParmAttrQry(zcfg_name_t seqnum, objIndex_t *tr98ObjIid, const char *parmName, zcfg_offset_t *oid, objIndex_t *objIid, char *queriedParmName, uint32_t *attr);
-
-#endif
\ No newline at end of file
+zcfgRet_t zcfgFeTr181ParmAttrQry(zcfg_offset_t , objIndex_t *, char *, zcfg_name_t *, objIndex_t *, const char *, uint32_t *);
+zcfgRet_t zcfgFeObjParamAttrQry(uint32_t , objIndex_t *, struct json_object **, uint32_t );
+#endif
Index: libzcfg_fe_tr98-1.0/zcfg_fe_tr98.c
===================================================================
--- libzcfg_fe_tr98-1.0.orig/zcfg_fe_tr98.c	2017-08-02 14:02:33.215239300 +0800
+++ libzcfg_fe_tr98-1.0/zcfg_fe_tr98.c	2017-08-02 14:02:47.368239300 +0800
@@ -3488,6 +3488,7 @@
 	}
 
 	if(ret == ZCFG_SUCCESS) {
+		attr |= PARAMETER_ATTR_TR98;
 		if((ret = zcfgFeParmAttrQry(seqnum, &tr98ObjIid, name, &oid, &objIid, queriedParmName, &attr)) != ZCFG_SUCCESS) {
 			ztrdbg(ZTR_SL_DEBUG, "%s: parm attr query fail, %u %s\n", __FUNCTION__, seqnum, name);
 			return ret;
@@ -3716,6 +3717,7 @@
 	}
 
 	if(ret == ZCFG_SUCCESS){
+		queriedAttr |= PARAMETER_ATTR_TR98;
 		if((ret = zcfgFeParmAttrQry(seqnum, &tr98ObjIid, (const char *)name, &oid, &objIid, queriedParmName, &queriedAttr)) != ZCFG_SUCCESS) {
 			zcfgLog(ZCFG_LOG_INFO, "%s: tr98 objnum %u %s query fail\n", __FUNCTION__, seqnum, name);
 			qriedNoSuchParam = true;
