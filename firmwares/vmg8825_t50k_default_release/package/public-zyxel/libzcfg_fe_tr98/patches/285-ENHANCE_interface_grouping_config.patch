Index: libzcfg_fe_tr98-1.0/lanDev.c
===================================================================
--- libzcfg_fe_tr98-1.0.orig/lanDev.c	2016-02-02 23:01:11.334684165 +0800
+++ libzcfg_fe_tr98-1.0/lanDev.c	2016-02-02 23:02:08.398685259 +0800
@@ -1114,7 +1114,7 @@
 	}
 
 	if((ret = zcfgFeObjStructGet(RDM_OID_ETH_LINK, &objIid, (void **)&ethLinkObj)) == ZCFG_SUCCESS){
-		ethLinkObj->Enable= true;
+		ethLinkObj->Enable= false;
 		if((ret = zcfgFeObjStructSet(RDM_OID_ETH_LINK, &objIid, (void *)ethLinkObj, NULL)) != ZCFG_SUCCESS){
 			printf("Set Ethernet.Link LowerLayers Fail\n");
 		}
@@ -1623,14 +1623,14 @@
 			}
 
 			json_object_object_add(*tr98Jobj, paramList->name, JSON_OBJ_COPY(paramValue));
-
+#if 0
 			paramValue = json_object_object_get(ipIntfv4AddrJobj, paramList->name);
 			if(paramValue != NULL) {
 				json_object_object_add(*tr98Jobj, paramList->name, JSON_OBJ_COPY(paramValue));
 				paramList++;
 				continue;
 			}
-
+#endif
 			paramList++;
 			continue;
 		}
@@ -1872,7 +1872,7 @@
 	if((ret = zcfgFeSubInObjJsonGetNext(RDM_OID_IP_IFACE_V4_ADDR, &ipIntfIid, &ipIntfv4AddrIid, &ipIntfv4AddrJobj)) != ZCFG_SUCCESS) {
 		json_object_put(igmpJobj);
 		json_object_put(ipIntfJobj);
-		json_object_put(ipIntfv4AddrJobj);
+		json_object_put(ethLinkJobj);
 		return ret;
 	}
 
@@ -1884,14 +1884,14 @@
 	}
 	
 	if(multiJobj){
-		tmpObj = ipIntfJobj;
-		ipIntfJobj = NULL;
-		ipIntfJobj = zcfgFeJsonMultiObjAppend(RDM_OID_IP_IFACE, &ipIntfIid, multiJobj, tmpObj);
-		json_object_put(tmpObj);
 		tmpObj = ethLinkJobj;
 		ethLinkJobj = NULL;
 		ethLinkJobj = zcfgFeJsonMultiObjAppend(RDM_OID_ETH_LINK, &ethLinkIid, multiJobj, tmpObj);
 		json_object_put(tmpObj);
+		tmpObj = ipIntfJobj;
+		ipIntfJobj = NULL;
+		ipIntfJobj = zcfgFeJsonMultiObjAppend(RDM_OID_IP_IFACE, &ipIntfIid, multiJobj, tmpObj);
+		json_object_put(tmpObj);
 	}
 
 	if(multiJobj){
@@ -2004,7 +2004,7 @@
 				if(ethLinkJobj) {
 					sprintf(bridgingIfaceName, "Bridging.Bridge.%hhu.Port.1", brNum+1);
 					printf("%s: Ethernet.Link bridge iface name %s\n", __FUNCTION__, bridgingIfaceName);
-
+					json_object_object_add(ethLinkJobj, "Enable", json_object_new_boolean(true));
 					json_object_object_add(ethLinkJobj, "LowerLayers", json_object_new_string(bridgingIfaceName));
 				}
 
@@ -2014,7 +2014,7 @@
 					json_object_object_add(ipIntfv4AddrJobj, "Enable", json_object_new_boolean(true));
 					json_object_object_add(ipIntfv4AddrJobj, "IPAddress", json_object_new_string(ipIfaceIpAddr));
 					json_object_object_add(ipIntfv4AddrJobj, "SubnetMask", json_object_new_string(LAN_DEFAULT_NETMASK));
-					json_object_object_add(ipIntfv4AddrJobj, "AddressingType", json_object_new_string("Static"));
+					//json_object_object_add(ipIntfv4AddrJobj, "AddressingType", json_object_new_string("Static"));
 				}
 
 				paramList++;
@@ -2249,19 +2249,21 @@
 	
 	/*set LowerLayer for IP.Interface.i*/
 	if((ret = zcfgFeObjStructGet(RDM_OID_IP_IFACE, &objIid, (void **)&ipIntfObj)) == ZCFG_SUCCESS){
-		ipIntfObj->Enable = true;
+		ipIntfObj->Enable = false;
 		ipIntfObj->IPv4Enable = true;
+		//ipIntfObj->X_ZYXEL_ConnectionType[0] = '\0';
+		strcpy(ipIntfObj->X_ZYXEL_AccessDescription, "AddSetIpIface");
 		//strcpy(ipIntfObj->X_ZYXEL_IfName, ifName);
 		strcpy(ipIntfObj->LowerLayers, mappingPathName);
 		if((ret = zcfgFeObjStructSet(RDM_OID_IP_IFACE, &objIid, (void *)ipIntfObj, NULL)) != ZCFG_SUCCESS) {
 			printf("%s: Set IP.Interface LowerLayers Fail\n", __FUNCTION__);
 		}
 
-			zcfgFeObjStructFree(ipIntfObj);
+		zcfgFeObjStructFree(ipIntfObj);
 	}
 	else {
-			return ret;
-		}
+		return ret;
+	}
 
 #ifndef ZCFG_DYNAMIC_NAMEMAPPING
 	*idx = objIid.idx[0];
