Index: libzcfg_fe_tr98-1.0/l3fwd.c
===================================================================
--- libzcfg_fe_tr98-1.0.orig/l3fwd.c	2015-07-01 18:08:07.763789070 +0800
+++ libzcfg_fe_tr98-1.0/l3fwd.c	2015-07-01 18:08:07.979789072 +0800
@@ -333,16 +333,13 @@
 		if(zcfgFe98NameToSeqnum((const char *)tr98FullPathName, &seqnum, &tr98ObjIid) != ZCFG_SUCCESS)
 			return ZCFG_NO_SUCH_PARAMETER;
 
-		attr = newNotify;
-		attr |= PARAMETER_ATTR_TR98;
-		setParmAttr = zcfgFeTr98ParamAttrSetByName(seqnum, &tr98ObjIid, paramName, attr);
+		attr = newNotify | PARAMETER_ATTR_TR98;
+		setParmAttr = zcfgFeTr98ParamAttrSetByName(seqnum, &tr98ObjIid, paramName, 0, NULL, NULL, attr);
 		json_object_array_add(multiAttrJobj, json_object_new_int((int)setParmAttr));
-		if(newNotify & PARAMETER_ATTR_NOTIFY_MASK) {
-			IID_INIT(objIid);
-			zcfgFe98To181ObjMappingGet(seqnum, &tr98ObjIid, &oid, &objIid);
-			attr &= ~PARAMETER_ATTR_TR98;
-			attr |= PARAMETER_ATTR_TR181;
-			setParmAttr = zcfgFeTr98ParamAttrSetByName(oid, &objIid, paramName, attr);
+		IID_INIT(objIid);
+		if(zcfgFe98To181ObjMappingGet(seqnum, &tr98ObjIid, &oid, &objIid) == ZCFG_SUCCESS) {
+			attr = newNotify;
+			setParmAttr = zcfgFeTr98ParamAttrSetByName(oid, &objIid, paramName, seqnum, &tr98ObjIid, paramName, attr);
 			json_object_array_add(multiAttrJobj, json_object_new_int((int)setParmAttr));
 		}
 	}
Index: libzcfg_fe_tr98-1.0/wanDev.c
===================================================================
--- libzcfg_fe_tr98-1.0.orig/wanDev.c	2015-07-01 18:08:07.907789072 +0800
+++ libzcfg_fe_tr98-1.0/wanDev.c	2015-07-01 18:06:28.861058000 +0800
@@ -3270,6 +3270,7 @@
 	return attrValue;
 }
 
+#if 0
 zcfgRet_t WANIpConnObjAttrSet(char *tr98FullPathName, int handler, char *paramName, int newNotify, struct json_object *multiAttrJobj)
 {
 	zcfgRet_t ret = ZCFG_SUCCESS;
@@ -3406,6 +3407,59 @@
 
 	return ret;
 }
+#endif
+
+zcfgRet_t WANIpConnObjAttrSet(char *tr98FullPathName, int handler, char *paramName, int newNotify, struct json_object *multiAttrJobj)
+{
+	zcfgFeSetParmAttr_t *setParmAttr = NULL;
+	uint32_t seqnum = 0;
+	objIndex_t tr98ObjIid, tr181ObjIid;
+	uint32_t attr = 0;
+	struct json_object *jobj = NULL;
+	char ipIfaceName[TR98_MAX_OBJ_NAME_LENGTH] = {0};
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+
+	printf("%s: parm %s\n", __FUNCTION__, paramName);
+
+	if(zcfgFe98NameToSeqnum((const char *)tr98FullPathName, &seqnum, &tr98ObjIid) != ZCFG_SUCCESS)
+		return ZCFG_NO_SUCH_OBJECT;
+
+	IID_INIT(tr181ObjIid);
+
+	// DNSEnabled, DNSServers, X_ZYXEL_IPv6DNSEnabled, X_ZYXEL_IPv6DNSServers, DefaultGateway
+	if(zcfgFe98To181MappingNameGet(tr98FullPathName, ipIfaceName) != ZCFG_SUCCESS)
+		return ZCFG_NO_SUCH_OBJECT;
+
+	printf("%s: ipIfaceName %s\n", __FUNCTION__, ipIfaceName);
+
+	if(!strcmp(paramName, "DNSEnabled") || !strcmp(paramName, "X_ZYXEL_IPv6DNSEnabled")) {
+		if(retrieveJobjWithIpIface(ipIfaceName, RDM_OID_DNS_CLIENT_SRV, &tr181ObjIid, &jobj) != ZCFG_SUCCESS)
+			return ZCFG_NO_SUCH_OBJECT;
+
+		json_object_put(jobj);
+		attr = PARAMETER_ATTR_SET_TR98(newNotify);
+		setParmAttr = zcfgFeTr98ParamAttrSetByName(seqnum, &tr98ObjIid, paramName, 0, NULL, NULL, attr);
+		json_object_array_add(multiAttrJobj, json_object_new_int((int)setParmAttr));
+		attr = PARAMETER_ATTR_SET_TR181(newNotify);
+		setParmAttr = zcfgFeTr98ParamAttrSetByName(RDM_OID_DNS_CLIENT_SRV, &tr181ObjIid, "Enable", seqnum, &tr98ObjIid, paramName, attr);
+		json_object_array_add(multiAttrJobj, json_object_new_int((int)setParmAttr));
+	}
+	else if(!strcmp(paramName, "DNSServers") || !strcmp(paramName, "X_ZYXEL_IPv6DNSServers")) {
+		if(retrieveJobjWithIpIface(ipIfaceName, RDM_OID_DNS_CLIENT_SRV, &tr181ObjIid, &jobj) != ZCFG_SUCCESS)
+			return ZCFG_NO_SUCH_OBJECT;
+
+		json_object_put(jobj);
+		attr = PARAMETER_ATTR_SET_TR98(newNotify);
+		setParmAttr = zcfgFeTr98ParamAttrSetByName(seqnum, &tr98ObjIid, paramName, 0, NULL, NULL, attr);
+		json_object_array_add(multiAttrJobj, json_object_new_int((int)setParmAttr));
+		attr = PARAMETER_ATTR_SET_TR181(newNotify);
+		setParmAttr = zcfgFeTr98ParamAttrSetByName(RDM_OID_DNS_CLIENT_SRV, &tr181ObjIid, "DNSServer", seqnum, &tr98ObjIid, paramName, attr);
+		json_object_array_add(multiAttrJobj, json_object_new_int((int)setParmAttr));
+	}
+
+	return ZCFG_SUCCESS;
+}
 
 /*
  *   TR98 Object Name : InternetGatewayDevice.WANDevice.i.WANConnectionDevice.i.WANIPConnection.i.DHCPClient
Index: libzcfg_fe_tr98-1.0/wanDev_api.c
===================================================================
--- libzcfg_fe_tr98-1.0.orig/wanDev_api.c	2015-07-01 18:08:07.967789072 +0800
+++ libzcfg_fe_tr98-1.0/wanDev_api.c	2015-07-01 18:08:07.983789072 +0800
@@ -52,6 +52,23 @@
 	return ZCFG_SUCCESS;
 }
 
+zcfgRet_t retrieveJobjWithIpIface(const char *ipIface, zcfg_offset_t oid, objIndex_t *objIid, struct json_object **jobj)
+{
+	if(!ipIface || !objIid || !jobj)
+		return ZCFG_NO_SUCH_OBJECT;
+
+	IID_INIT(*objIid);
+	while(zcfgFeObjJsonGetNext(oid, objIid, (struct json_object **)jobj) == ZCFG_SUCCESS) {
+		const char *intf = json_object_get_string(json_object_object_get(*jobj, "Interface"));
+		if(!strcmp(ipIface, intf))
+			return ZCFG_SUCCESS;
+
+		json_object_put(*jobj);
+	}
+
+	return ZCFG_NO_SUCH_OBJECT;
+}
+
 zcfgRet_t natIntfGetJobj(const char *ipIface, objIndex_t *natIntfIid, struct json_object **natIntfJobj)
 {
 	zcfgRet_t ret = ZCFG_SUCCESS;
Index: libzcfg_fe_tr98-1.0/wanDev_api.h
===================================================================
--- libzcfg_fe_tr98-1.0.orig/wanDev_api.h	2015-07-01 18:08:07.275789066 +0800
+++ libzcfg_fe_tr98-1.0/wanDev_api.h	2015-07-01 18:08:07.983789072 +0800
@@ -8,6 +8,7 @@
 char *activeDefaultGt_Strip(const char *, const char *);
 char *activeDefaultGt_Add(const char *, const char *);
 zcfgRet_t defaultGwInfoSet(char *, struct json_object *);
+zcfgRet_t retrieveJobjWithIpIface(const char *, zcfg_offset_t , objIndex_t *, struct json_object **);
 #if 0
 zcfgRet_t dnsInfoSet(char *, struct json_object *);
 #else
Index: libzcfg_fe_tr98-1.0/zcfg_fe_msg.c
===================================================================
--- libzcfg_fe_tr98-1.0.orig/zcfg_fe_msg.c	2015-07-01 18:08:07.503789068 +0800
+++ libzcfg_fe_tr98-1.0/zcfg_fe_msg.c	2015-07-01 18:08:07.983789072 +0800
@@ -109,7 +109,7 @@
 	zcfgMsg_t *sendMsgHdr = NULL;
 	zcfgMsg_t *recvMsgHdr = NULL;
 	char *sendBuf = NULL, *recvBuf = NULL, *dataParmName = NULL;
-	zcfgParmNotify_t *queryData = NULL, *queriedData = NULL;
+	zcfgParmQryAttr_t *queryData = NULL, *queriedData = NULL;
 	int msgDataLen = 0, n = 0, parmNameLen = 0, parmAttr = -1;
 
 	zcfgLog(ZCFG_LOG_INFO, "%s\n", __FUNCTION__);
@@ -122,7 +122,7 @@
 
 	parmNameLen = strlen(parmName) + 1;
 	parmNameLen += ((n = (parmNameLen % UNITSIZE)) > 0) ? (UNITSIZE - n) : 0;
-	msgDataLen = sizeof(zcfgParmNotify_t) + parmNameLen;
+	msgDataLen = sizeof(zcfgParmQryAttr_t) + parmNameLen;
 	sendBuf = (char *)malloc(sizeof(zcfgMsg_t) + msgDataLen);
 	memset(sendBuf, 0, (sizeof(zcfgMsg_t) + msgDataLen));
 
@@ -131,7 +131,7 @@
 	sendMsgHdr->length = msgDataLen;
 	sendMsgHdr->dstEid = ZCFG_EID_ZCMD;
 
-	queryData = (zcfgParmNotify_t *)(sendMsgHdr + 1);
+	queryData = (zcfgParmQryAttr_t *)(sendMsgHdr + 1);
 	queryData->objnum = seqnum;
 	memcpy(&queryData->objIid, tr98ObjIid, sizeof(objIndex_t));
 	queryData->parmNameLen = parmNameLen;
@@ -155,7 +155,7 @@
 	}
 
 	if( recvMsgHdr->length > 0 ) {
-		queriedData = (zcfgParmNotify_t *)(recvBuf+sizeof(zcfgMsg_t));
+		queriedData = (zcfgParmQryAttr_t *)(recvBuf+sizeof(zcfgMsg_t));
 		#if 0
 		if(queriedData->objnum) {
 			// confirm queriedData, if required
@@ -167,9 +167,7 @@
 		*oid = queriedData->objnum;
 		memcpy(objIid, &queriedData->objIid, sizeof(objIndex_t));
 		if(attr) {
-			*attr = queriedData->mask;
-			*attr = (*attr << 16);
-			*attr |= queriedData->notify;
+			*attr = queriedData->attr;
 			parmAttr = *attr;
 			printf("%s: attr 0x%x\n", __FUNCTION__, *attr);
 		}
@@ -199,17 +197,17 @@
 	if(!setParmAttrLst)
 		return ZCFG_INTERNAL_ERROR;
 
-	if(!setParmAttrLst->n || !setParmAttrLst->parmNotifyDataLen) {
-		zcfgLog(ZCFG_LOG_INFO, "%s, nsetParmAttr %d, parmNotifyDataLen %d\n", __FUNCTION__, setParmAttrLst->n, setParmAttrLst->parmNotifyDataLen);
+	if(!setParmAttrLst->n || !setParmAttrLst->parmSetAttrDataLen) {
+		zcfgLog(ZCFG_LOG_INFO, "%s, nsetParmAttr %d, parmSetAttrDataLen %d\n", __FUNCTION__, setParmAttrLst->n, setParmAttrLst->parmSetAttrDataLen);
 		return ZCFG_INTERNAL_ERROR;
 	}
 
-	sendBuf = (char *)malloc(sizeof(zcfgMsg_t) + setParmAttrLst->parmNotifyDataLen + sizeof(uint32_t));
-	memset(sendBuf, 0, (sizeof(zcfgMsg_t) + setParmAttrLst->parmNotifyDataLen + sizeof(uint32_t)));
+	sendBuf = (char *)malloc(sizeof(zcfgMsg_t) + setParmAttrLst->parmSetAttrDataLen + sizeof(uint32_t));
+	memset(sendBuf, 0, (sizeof(zcfgMsg_t) + setParmAttrLst->parmSetAttrDataLen + sizeof(uint32_t)));
 
 	sendMsgHdr = (zcfgMsg_t *)sendBuf;
 	sendMsgHdr->type = REQUEST_SET_PARAM_ATTR;
-	sendMsgHdr->length = setParmAttrLst->parmNotifyDataLen + sizeof(uint32_t);
+	sendMsgHdr->length = setParmAttrLst->parmSetAttrDataLen + sizeof(uint32_t);
 	sendMsgHdr->dstEid = ZCFG_EID_ZCMD;
 	nSetParmAttr = (uint32_t *)(sendMsgHdr + 1);
 	*nSetParmAttr = setParmAttrLst->n;
@@ -217,13 +215,18 @@
 	
 	setParmAttr = setParmAttrLst->start;
 	while(setParmAttr) {
-		char *parmName = NULL;
-		memcpy(msgParmAttrData, &setParmAttr->parmNotify, sizeof(zcfgParmNotify_t));
-		parmName = msgParmAttrData + sizeof(zcfgParmNotify_t);
-		strncpy(parmName, setParmAttr->parmName, setParmAttr->parmNotify.parmNameLen);
-		msgParmAttrData += sizeof(zcfgParmNotify_t) + setParmAttr->parmNotify.parmNameLen;
-		msgParmAttrDataLen += sizeof(zcfgParmNotify_t) + setParmAttr->parmNotify.parmNameLen;
-		if(msgParmAttrDataLen > setParmAttrLst->parmNotifyDataLen) {
+		char *parmName = NULL, *setAttrParmName = NULL;
+		memcpy(msgParmAttrData, &setParmAttr->parmSetAttr, sizeof(zcfgParmSetAttr_t));
+		parmName = msgParmAttrData + sizeof(zcfgParmSetAttr_t);
+		strncpy(parmName, setParmAttr->parmName, setParmAttr->parmSetAttr.parmNameLen);
+		if(setParmAttr->parmSetAttr.setAttrParmNameLen) {
+			setAttrParmName = parmName + setParmAttr->parmSetAttr.parmNameLen;
+			strncpy(setAttrParmName, setParmAttr->setAttrParmName, setParmAttr->parmSetAttr.setAttrParmNameLen);
+		}
+
+		msgParmAttrData += sizeof(zcfgParmSetAttr_t) + setParmAttr->parmSetAttr.parmNameLen + setParmAttr->parmSetAttr.setAttrParmNameLen;
+		msgParmAttrDataLen += sizeof(zcfgParmSetAttr_t) + setParmAttr->parmSetAttr.parmNameLen + setParmAttr->parmSetAttr.setAttrParmNameLen;
+		if(msgParmAttrDataLen > setParmAttrLst->parmSetAttrDataLen) {
 			dataLengthFail = true;
 			break;
 		}
Index: libzcfg_fe_tr98-1.0/zcfg_fe_tr98.c
===================================================================
--- libzcfg_fe_tr98-1.0.orig/zcfg_fe_tr98.c	2015-07-01 18:08:07.923789072 +0800
+++ libzcfg_fe_tr98-1.0/zcfg_fe_tr98.c	2015-07-01 18:08:07.983789072 +0800
@@ -1857,7 +1857,7 @@
 
 #ifdef ZCFG_PARM_NAMEMAPPING
 
-zcfgFeSetParmAttr_t *zcfgFeTr98ParamAttrSetByName(uint32_t objnum, objIndex_t *objIid, const char *parmName, uint32_t attr)
+zcfgFeSetParmAttr_t *zcfgFeTr98ParamAttrSetByName(uint32_t objnum, objIndex_t *objIid, const char *parmName, uint32_t setAttrObjNum, objIndex_t *setAttrObjIid, const char *setAttrParmName, uint32_t attr)
 {
 	int n = 0;
 	zcfgFeSetParmAttr_t *setParmAttr = NULL;
@@ -1866,18 +1866,34 @@
 
 	setParmAttr = (zcfgFeSetParmAttr_t *)malloc(sizeof(zcfgFeSetParmAttr_t));
 
-	setParmAttr->parmNotify.objnum = objnum;
-	memcpy(&setParmAttr->parmNotify.objIid, objIid, sizeof(objIndex_t));
-	setParmAttr->parmNotify.notify = (uint8_t)(attr & PARAMETER_ATTR_NOTIFY_MASK);
-	setParmAttr->parmNotify.mask = (uint16_t)((attr & PARAMETER_ATTR_ADDITIONAL_MASK) >> 16);
+	printf("%s: obj %u %hu,%hu,%hu,%hu,%hu,%hu %s, attr 0x%x\n", __FUNCTION__, objnum, 
+			objIid->idx[0], objIid->idx[1], objIid->idx[2], objIid->idx[3], objIid->idx[4], objIid->idx[5], parmName, attr);
+
+	setParmAttr->parmSetAttr.objnum = objnum;
+	memcpy(&setParmAttr->parmSetAttr.objIid, objIid, sizeof(objIndex_t));
+	setParmAttr->parmSetAttr.attr = attr;
 	strncpy(setParmAttr->parmName, parmName, MAX_PARMNAME_LEN);
-	setParmAttr->parmNotify.parmNameLen = strlen(setParmAttr->parmName) + 1;
+	setParmAttr->parmSetAttr.parmNameLen += ((n = (setParmAttr->parmSetAttr.parmNameLen % UNITSIZE)) > 0) ? (UNITSIZE - n) : 0;
+	setParmAttr->parmSetAttr.parmNameLen = strlen(setParmAttr->parmName) + 1;
+
 
-	setParmAttr->parmNotify.parmNameLen += ((n = (setParmAttr->parmNotify.parmNameLen % UNITSIZE)) > 0) ? (UNITSIZE - n) : 0;
+	setParmAttr->parmSetAttr.setAttrObjNum = setAttrObjNum;
+	if(setAttrObjIid)
+		memcpy(&setParmAttr->parmSetAttr.setAttrObjIid, setAttrObjIid, sizeof(objIndex_t));
+	else
+		memset(&setParmAttr->parmSetAttr.setAttrObjIid, 0, sizeof(objIndex_t));
+	n = 0;
+	setParmAttr->parmSetAttr.setAttrParmNameLen = (setAttrParmName) ? strlen(setAttrParmName) : 0;
+	if(setParmAttr->parmSetAttr.setAttrParmNameLen > 0) {
+		strncpy(setParmAttr->setAttrParmName, setAttrParmName, MAX_PARMNAME_LEN);
+		setParmAttr->parmSetAttr.setAttrParmNameLen++;
+		setParmAttr->parmSetAttr.setAttrParmNameLen += ((n = (setParmAttr->parmSetAttr.setAttrParmNameLen % UNITSIZE)) > 0) ? (UNITSIZE - n) : 0;
+	}
 
 	return setParmAttr;
 }
 
+
 int zcfgFeTr98ParamAttrMultiSetByName(char *tr98ObjName, char *name, int notify, zcfgFeSetParmAttrLst_t *setParmAttrLst)
 {
 	zcfgRet_t ret;
@@ -1890,6 +1906,7 @@
 	uint32_t queriedAttr = 0;
 	zcfgFeSetParmAttr_t *setParmAttr = NULL;
 	tr98Parameter_t *paramList = NULL;
+	bool qriedNoSuchParam = false;
 
 	zcfgLog(ZCFG_LOG_INFO, "%s\n", __FUNCTION__);
 
@@ -1943,7 +1960,7 @@
 	if(zcfgFe98NameToSeqnum((const char *)tr98ObjName, &seqnum, &tr98ObjIid) == ZCFG_SUCCESS) {
 		if((ret = zcfgFeParmAttrQry(seqnum, &tr98ObjIid, (const char *)name, &oid, &objIid, queriedParmName, &queriedAttr)) != ZCFG_SUCCESS) {
 			zcfgLog(ZCFG_LOG_INFO, "%s: tr98 objnum %u %s query fail\n", __FUNCTION__, seqnum, name);
-			return ZCFG_NO_SUCH_PARAMETER;
+			qriedNoSuchParam = true;
 		}
 	}
 	else {
@@ -1955,20 +1972,21 @@
 
 	if(IS_HANDLE_ROUTINE_REQUIRED(queriedAttr)) {
 		struct json_object *multiJobj = NULL;
-		int nObj = 0;
+		int nObj = 0, n = 0;
 
+		printf("%s: set parm attr handle routine is required\n", __FUNCTION__);
 		if(!tr98Obj[handler].setAttr) {
-
+			printf("%s: no set parm attr handle routine\n", __FUNCTION__);
 			return ZCFG_NO_SUCH_PARAMETER;
 		}
 
-		printf("%s: set parm attr handle routine is required\n", __FUNCTION__);
 		multiJobj = json_object_new_array();
 		if((ret = tr98Obj[handler].setAttr(tr98ObjName, handler, name, queriedAttr, multiJobj)) != ZCFG_SUCCESS) {
 			printf("%s: set parm attr handle routine fail\n", __FUNCTION__);
 		}
 		if((nObj = json_object_array_length(multiJobj))) {
-			int n = 0;
+			printf("%s: there're %d set attr items\n", __FUNCTION__, nObj);
+
 			while(n < nObj) {
 				setParmAttr = (zcfgFeSetParmAttr_t *)json_object_get_int(json_object_array_get_idx(multiJobj, n));
 				if(!setParmAttr) {
@@ -1990,7 +2008,7 @@
 			return ret;
 	}
 	else {
-		setParmAttr = zcfgFeTr98ParamAttrSetByName(oid, &objIid, queriedParmName, (queriedAttr & PARAMETER_ATTR_NOTIFY_MASK));
+		setParmAttr = zcfgFeTr98ParamAttrSetByName(oid, &objIid, queriedParmName, 0, NULL, NULL, (queriedAttr & PARAMETER_ATTR_NOTIFY_MASK));
 		zcfgSetParmAttrAdd(setParmAttrLst, setParmAttr);
 	}
 
Index: libzcfg_fe_tr98-1.0/zcfg_fe_tr98.h
===================================================================
--- libzcfg_fe_tr98-1.0.orig/zcfg_fe_tr98.h	2015-07-01 18:08:07.735789070 +0800
+++ libzcfg_fe_tr98-1.0/zcfg_fe_tr98.h	2015-07-01 18:08:07.983789072 +0800
@@ -115,7 +115,7 @@
 zcfgRet_t zcfgFeTr98AllParamAttrGetByObjName(const char *, struct json_object *);
 int zcfgFeTr98ObjParamAttrGetByName(const char *tr98ObjName, const char *name);
 #ifdef ZCFG_PARM_NAMEMAPPING
-zcfgFeSetParmAttr_t *zcfgFeTr98ParamAttrSetByName(uint32_t objnum, objIndex_t *objIid, const char *parmName, uint32_t attr);
+zcfgFeSetParmAttr_t *zcfgFeTr98ParamAttrSetByName(uint32_t objnum, objIndex_t *objIid, const char *parmName, uint32_t setAttrObjNum, objIndex_t *setAttrObjIid, const char *setAttrParmName, uint32_t attr);
 int zcfgFeTr98ParamAttrMultiSetByName(char *tr98ObjName, char *name, int notify, zcfgFeSetParmAttrLst_t *setParmAttrLst);
 #else
 int zcfgFeTr98ParamAttrMultiSetByName(char *, char *, int , struct json_object *);
Index: libzcfg_fe_tr98-1.0/zcfg_fe_msg.h
===================================================================
--- libzcfg_fe_tr98-1.0.orig/zcfg_fe_msg.h	2015-07-01 18:08:07.763789070 +0800
+++ libzcfg_fe_tr98-1.0/zcfg_fe_msg.h	2015-07-01 18:08:07.983789072 +0800
@@ -15,14 +15,15 @@
 
 typedef struct zcfgFeSetParmAttr_s zcfgFeSetParmAttr_t;
 struct zcfgFeSetParmAttr_s {
-	zcfgParmNotify_t parmNotify;
+	zcfgParmSetAttr_t parmSetAttr;
 	char parmName[MAX_PARMNAME_LEN];
+	char setAttrParmName[MAX_PARMNAME_LEN];
 	zcfgFeSetParmAttr_t *next;
 };
 
 typedef struct {
 	uint16_t n;
-	uint16_t parmNotifyDataLen;
+	uint16_t parmSetAttrDataLen;
 	zcfgFeSetParmAttr_t *start;
 } zcfgFeSetParmAttrLst_t;
 
@@ -30,7 +31,7 @@
 		setParmAttrLst = (zcfgFeSetParmAttrLst_t *)malloc(sizeof(zcfgFeSetParmAttrLst_t)); \
 		memset(setParmAttrLst, 0, sizeof(zcfgFeSetParmAttrLst_t)); }
 #define zcfgSetParmAttrAdd(setParmAttrLst, setParmAttr) {setParmAttr->next = setParmAttrLst->start; setParmAttrLst->start = setParmAttr; setParmAttrLst->n++; \
-											setParmAttrLst->parmNotifyDataLen += sizeof(zcfgParmNotify_t) + setParmAttr->parmNotify.parmNameLen; }
+											setParmAttrLst->parmSetAttrDataLen += sizeof(zcfgParmSetAttr_t) + setParmAttr->parmSetAttr.parmNameLen + setParmAttr->parmSetAttr.setAttrParmNameLen; }
 #define zcfgSetParmAttrLstFree(setParmAttrLst) \
 	{zcfgFeSetParmAttr_t *setParmAttr = (setParmAttrLst) ? setParmAttrLst->start : NULL; \
 	 while(setParmAttr) { setParmAttrLst->start = setParmAttr->next; free(setParmAttr); setParmAttr = setParmAttrLst->start; } \
