Index: libzcfg_fe_tr98-1.0/Makefile
===================================================================
--- libzcfg_fe_tr98-1.0.orig/Makefile	2015-05-27 19:38:22.474810181 +0800
+++ libzcfg_fe_tr98-1.0/Makefile	2015-05-27 19:42:02.087311500 +0800
@@ -9,6 +9,8 @@
 OBJ_FILES+=oneConnect.o
 endif
 
+OBJ_FILES+=zcfg_fe_msg.o
+
 CFLAGS += -fPIC -Wall
 
 
@@ -72,6 +74,9 @@
 	$(CC) $(CFLAGS) -c $< $(INC_PATH) $(LIB_PATH) $(LINK_LIB) -std=gnu99
 endif
 
+zcfg_fe_msg.o: zcfg_fe_msg.c
+	$(CC) $(CFLAGS) -c $< $(INC_PATH) $(LIB_PATH) $(LINK_LIB) -std=gnu99
+
 zcfg_fe_tr98.o : zcfg_fe_tr98.c zcfg_fe_tr98.h
 	$(CC) $(CFLAGS) -c zcfg_fe_tr98.c $(CFLAG) $(LIB_PATH) $(INC_PATH) $(LINK_LIB) -std=gnu99
 
@@ -91,6 +96,8 @@
 #include $(BUILD_DIR)/make.common
 
 CFLAGS += -DIPV6INTERFACE_PROFILE -DDHCPV6CLIENT_PROFILE -DIPV6RD_PROFILE -DROUTERADVERTISEMENT_PROFILE -DIPV6SERVER_PROFILE
+CFLAGS += -DZCFG_DYNAMIC_NAMEMAPPING -DZCFG_PARM_NAMEMAPPING
+CFLAGS += -DZYXEL_EXT=1
 
 #Generic
 ifneq ($(strip $(CONFIG_PACKAGE_ZyIMS)),)
Index: libzcfg_fe_tr98-1.0/zcfg_fe_msg.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ libzcfg_fe_tr98-1.0/zcfg_fe_msg.c	2015-05-26 10:58:24.332583400 +0800
@@ -0,0 +1,225 @@
+
+#include "zcfg_fe_msg.h"
+
+zcfgRet_t zcfg98To181ObjMappingAdd(zcfg_name_t seqnum, objIndex_t *tr98ObjIid, zcfg_offset_t oid, objIndex_t *objIid)
+{
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	zcfgMsg_t *sendMsgHdr = NULL;
+	zcfgMsg_t *recvMsgHdr = NULL;
+	char *sendBuf = NULL, *recvBuf = NULL;
+	zcfgMapData_t *mappingData = NULL, *addedMapping = NULL;
+
+	sendBuf = (char *)malloc(sizeof(zcfgMsg_t) + sizeof(zcfgMapData_t));
+	memset(sendBuf, 0, (sizeof(zcfgMsg_t) + sizeof(zcfgMapData_t)));
+
+	sendMsgHdr = (zcfgMsg_t *)sendBuf;
+	sendMsgHdr->type = ZCFG_MSG_ADD_TR98_MAPPING;
+	sendMsgHdr->length = sizeof(zcfgMapData_t);
+	sendMsgHdr->dstEid = ZCFG_EID_ZCMD;
+
+	mappingData = (zcfgMapData_t *)(sendMsgHdr + 1);
+	mappingData->num_1 = seqnum;
+	memcpy(&mappingData->objIdxData_1, tr98ObjIid, sizeof(objIndex_t));
+	mappingData->num_2 = oid;
+	memcpy(&mappingData->objIdxData_2, objIid, sizeof(objIndex_t));
+
+	ret = zcfgMsgSendAndGetReply(sendMsgHdr, (zcfgMsg_t **)&recvBuf, 0);
+
+	if(ret != ZCFG_SUCCESS) {
+		return ZCFG_INTERNAL_ERROR;
+	}
+	
+	recvMsgHdr = (zcfgMsg_t*)recvBuf;
+	if ( recvMsgHdr->type == RESPONSE_FAIL ) {
+		free(recvBuf);
+		return ZCFG_INTERNAL_ERROR;
+	}
+
+	if( recvMsgHdr->length > 0 ) {
+		addedMapping = (zcfgMapData_t *)(recvBuf+sizeof(zcfgMsg_t));
+		if(addedMapping->num_1 != seqnum) {
+
+			free(recvBuf);
+			return ZCFG_INTERNAL_ERROR;
+		}
+		memcpy(tr98ObjIid, &addedMapping->objIdxData_1, sizeof(objIndex_t));
+	}
+
+	free(recvBuf);
+
+	return ZCFG_SUCCESS;
+}
+
+zcfgRet_t zcfgObjMappingGet(uint32_t msgType, uint32_t num_1, objIndex_t *objIdxData_1, uint32_t *num_2, objIndex_t *objIdxData_2)
+{
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	zcfgMsg_t *sendMsgHdr = NULL;
+	zcfgMsg_t *recvMsgHdr = NULL;
+	char *sendBuf = NULL, *recvBuf = NULL;
+	zcfgMapData_t *msgMapData = NULL, *queriedMapping = NULL;
+
+	sendBuf = (char *)malloc(sizeof(zcfgMsg_t) + sizeof(zcfgMapData_t));
+	memset(sendBuf, 0, (sizeof(zcfgMsg_t) + sizeof(zcfgMapData_t)));
+
+	sendMsgHdr = (zcfgMsg_t *)sendBuf;
+	sendMsgHdr->type = msgType;
+	sendMsgHdr->length = sizeof(zcfgMapData_t);
+	sendMsgHdr->dstEid = ZCFG_EID_ZCMD;
+
+	msgMapData = (zcfgMapData_t *)(sendMsgHdr + 1);
+	msgMapData->num_1 = num_1;
+	memcpy(&msgMapData->objIdxData_1, objIdxData_1, sizeof(objIndex_t));
+
+	ret = zcfgMsgSendAndGetReply(sendMsgHdr, (zcfgMsg_t **)&recvBuf, 0);
+
+	if(ret != ZCFG_SUCCESS) {
+		return ZCFG_INTERNAL_ERROR;
+	}
+
+	recvMsgHdr = (zcfgMsg_t*)recvBuf;
+	if ( recvMsgHdr->type == RESPONSE_FAIL ) {
+		free(recvBuf);
+		return ZCFG_INTERNAL_ERROR;
+	}
+
+	if( recvMsgHdr->length > 0 ) {
+		queriedMapping = (zcfgMapData_t *)(recvBuf+sizeof(zcfgMsg_t));
+		if(queriedMapping->num_1 != num_1) {
+			zcfgLog(ZCFG_LOG_INFO, "%s: wrong query mapping\n", __FUNCTION__);
+			free(recvBuf);
+			return ZCFG_INTERNAL_ERROR;
+		}
+		*num_2 = queriedMapping->num_2;
+		memcpy(objIdxData_2, &queriedMapping->objIdxData_2, sizeof(objIndex_t));
+	}
+
+	free(recvBuf);
+
+	return ZCFG_SUCCESS;
+}
+
+zcfgRet_t zcfgFeParmAttrQry(zcfg_name_t seqnum, objIndex_t *tr98ObjIid, const char *parmName, zcfg_offset_t *oid, objIndex_t *objIid, char *queriedParmName, uint32_t *attr)
+{
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	zcfgMsg_t *sendMsgHdr = NULL;
+	zcfgMsg_t *recvMsgHdr = NULL;
+	char *sendBuf = NULL, *recvBuf = NULL, *dataParmName = NULL;
+	zcfgParmNotify_t *queryData = NULL, *queriedData = NULL;
+	int msgDataLen = 0, n = 0, parmNameLen = 0;
+
+	//if(!tr98ObjIid || !parmName || !oid || objIid || queriedParmName || !attr)
+	//	return ZCFG_INTERNAL_ERROR;
+
+	parmNameLen = strlen(parmName) + 1;
+	parmNameLen += ((n = (parmNameLen % UNITSIZE)) > 0) ? (UNITSIZE - n) : 0;
+	msgDataLen = sizeof(zcfgParmNotify_t) + parmNameLen;
+	sendBuf = (char *)malloc(sizeof(zcfgMsg_t) + msgDataLen);
+	memset(sendBuf, 0, (sizeof(zcfgMsg_t) + msgDataLen));
+
+	sendMsgHdr = (zcfgMsg_t *)sendBuf;
+	sendMsgHdr->type = REQUEST_GET_PARAM_ATTR;
+	sendMsgHdr->length = msgDataLen;
+	sendMsgHdr->dstEid = ZCFG_EID_ZCMD;
+
+	queryData = (zcfgParmNotify_t *)(sendMsgHdr + 1);
+	queryData->objnum = seqnum;
+	memcpy(&queryData->objIid, tr98ObjIid, sizeof(objIndex_t));
+	queryData->parmNameLen = parmNameLen;
+	dataParmName = (char *)(queryData + 1);
+	strcpy(dataParmName, parmName);
+
+	ret = zcfgMsgSendAndGetReply(sendMsgHdr, (zcfgMsg_t **)&recvBuf, 0);
+
+	if(ret != ZCFG_SUCCESS) {
+		return ZCFG_INTERNAL_ERROR;
+	}
+
+	recvMsgHdr = (zcfgMsg_t*)recvBuf;
+	if ( recvMsgHdr->type == RESPONSE_FAIL ) {
+		free(recvBuf);
+		return ZCFG_INTERNAL_ERROR;
+	}
+
+	if( recvMsgHdr->length > 0 ) {
+		queriedData = (zcfgParmNotify_t *)(recvBuf+sizeof(zcfgMsg_t));
+		#if 0
+		if(queriedData->objnum) {
+			// confirm queriedData, if required
+			zcfgLog(ZCFG_LOG_INFO, "%s: wrong queried data\n", __FUNCTION__);
+			free(recvBuf);
+			return ZCFG_INTERNAL_ERROR;
+		}
+		#endif
+		*oid = queriedData->objnum;
+		memcpy(objIid, &queriedData->objIid, sizeof(objIndex_t));
+		*attr = queriedData->notify;
+		dataParmName = (char *)(queriedData + 1);
+		strcpy(queriedParmName, dataParmName);
+	}
+
+	free(recvBuf);
+
+	return ZCFG_SUCCESS;
+}
+
+zcfgRet_t zcfgFeMultiParmAttrSet(zcfgFeSetParmAttrLst_t *setParmAttrLst)
+{
+	zcfgFeSetParmAttr_t *setParmAttr = NULL;
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	zcfgMsg_t *sendMsgHdr = NULL;
+	zcfgMsg_t *recvMsgHdr = NULL;
+	char *sendBuf = NULL, *recvBuf = NULL, *msgParmAttrData = NULL;
+	uint32_t *nSetParmAttr = NULL, msgParmAttrDataLen = 0;
+
+	//if(!setParmAttrLst)
+	//	return ZCFG_INTERNAL_ERROR;
+		
+	sendBuf = (char *)malloc(sizeof(zcfgMsg_t) + setParmAttrLst->parmNotifyDataLen) + sizeof(uint32_t);
+	memset(sendBuf, 0, (sizeof(zcfgMsg_t) + setParmAttrLst->parmNotifyDataLen));
+
+	sendMsgHdr = (zcfgMsg_t *)sendBuf;
+	sendMsgHdr->type = REQUEST_SET_PARAM_ATTR;
+	sendMsgHdr->length = setParmAttrLst->parmNotifyDataLen;
+	sendMsgHdr->dstEid = ZCFG_EID_ZCMD;
+	nSetParmAttr = (uint32_t *)(sendMsgHdr + 1);
+	*nSetParmAttr = setParmAttrLst->n;
+	msgParmAttrData = (char *)(nSetParmAttr + 1);
+	
+	setParmAttr = setParmAttrLst->start;
+	while(setParmAttr) {
+		char *parmName = NULL;
+		memcpy(msgParmAttrData, &setParmAttr->parmNotify, sizeof(zcfgParmNotify_t));
+		parmName = msgParmAttrData + sizeof(zcfgParmNotify_t);
+		strncpy(parmName, setParmAttr->parmName, setParmAttr->parmNotify.parmNameLen);
+		msgParmAttrData += sizeof(zcfgParmNotify_t) + setParmAttr->parmNotify.parmNameLen;
+		msgParmAttrDataLen += sizeof(zcfgParmNotify_t) + setParmAttr->parmNotify.parmNameLen;
+		if(msgParmAttrDataLen > setParmAttrLst->parmNotifyDataLen) {
+			break;
+		}
+		setParmAttr = setParmAttr->next;
+	}
+
+	if(msgParmAttrDataLen > setParmAttrLst->parmNotifyDataLen) {
+
+		free(sendBuf);
+		return ZCFG_INTERNAL_ERROR;		
+	}
+
+	ret = zcfgMsgSendAndGetReply(sendMsgHdr, (zcfgMsg_t **)&recvBuf, 0);
+
+	if(ret != ZCFG_SUCCESS) {
+		return ZCFG_INTERNAL_ERROR;
+	}
+
+	recvMsgHdr = (zcfgMsg_t*)recvBuf;
+	if ( recvMsgHdr->type == RESPONSE_FAIL ) {
+		ret = recvMsgHdr->statCode;
+		free(recvBuf);
+		return ret;
+	}
+	
+	free(recvBuf);
+
+	return ZCFG_SUCCESS;
+}
+
Index: libzcfg_fe_tr98-1.0/zcfg_fe_msg.h
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ libzcfg_fe_tr98-1.0/zcfg_fe_msg.h	2015-05-22 13:56:08.191960200 +0800
@@ -0,0 +1,44 @@
+#ifndef _ZCFG_FE_MSG_H
+#define _ZCFG_FE_MSG_H
+
+#include <json/json.h>
+
+#include <json/json_object.h>
+
+#include "zcfg_common.h"
+#include "zcmd_schema.h"
+#include "zcfg_msg.h"
+#include "zcfg_debug.h"
+#include "zcfg_fe_schema.h"
+
+#define UNITSIZE   4
+
+typedef struct zcfgFeSetParmAttr_s zcfgFeSetParmAttr_t;
+struct zcfgFeSetParmAttr_s {
+	zcfgParmNotify_t parmNotify;
+	char parmName[MAX_PARMNAME_LEN];
+	zcfgFeSetParmAttr_t *next;
+};
+
+typedef struct {
+	uint16_t n;
+	uint16_t parmNotifyDataLen;
+	zcfgFeSetParmAttr_t *start;
+} zcfgFeSetParmAttrLst_t;
+
+#define zcfgSetParmAttrLstInit(setParmAttrLst) { \
+		setParmAttrLst = (zcfgFeSetParmAttrLst_t *)malloc(sizeof(zcfgFeSetParmAttrLst_t)); \
+		memset(setParmAttrLst, 0, sizeof(sizeof(zcfgFeSetParmAttrLst_t)); }
+#define zcfgSetParmAttrAdd(setParmAttrLst, setParmAttr) {setParmAttr->next = setParmAttrLst->start; setParmAttrLst->start = setParmAttr; setParmAttrLst->n++; \
+											setParmAttrLst->parmNotifyDataLen += sizeof(zcfgParmNotify_t) + setParmAttr->parmNotify.parmNameLen; }
+#define zcfgSetParmAttrLstFree(setParmAttrLst) \
+	{zcfgFeSetParmAttr_t *setParmAttr = (setParmAttrLst) ? setParmAttrLst->start : NULL; \
+	 while(setParmAttrLst) { setParmAttrLst->start = setParmAttr->next; free(setParmAttr); setParmAttr = setParmAttrLst->start; } \
+     if(setParmAttrLst) free(setParmAttrLst); }
+
+zcfgRet_t zcfg98To181ObjMappingAdd(zcfg_name_t seqnum, objIndex_t *tr98ObjIid, zcfg_offset_t oid, objIndex_t *objIid);
+zcfgRet_t zcfgObjMappingGet(uint32_t msgType, uint32_t num_1, objIndex_t *objIdxData_1, uint32_t *num_2, objIndex_t *objIdxData_2);
+zcfgRet_t zcfgFeMultiParmAttrSet(zcfgFeSetParmAttrLst_t *setParmAttrLst);
+zcfgRet_t zcfgFeParmAttrQry(zcfg_name_t seqnum, objIndex_t *tr98ObjIid, const char *parmName, zcfg_offset_t *oid, objIndex_t *objIid, char *queriedParmName, uint32_t *attr);
+
+#endif
\ No newline at end of file
Index: libzcfg_fe_tr98-1.0/zcfg_fe_tr98.c
===================================================================
--- libzcfg_fe_tr98-1.0.orig/zcfg_fe_tr98.c	2015-05-27 19:38:22.490810181 +0800
+++ libzcfg_fe_tr98-1.0/zcfg_fe_tr98.c	2015-05-27 19:40:16.537311500 +0800
@@ -30,6 +30,10 @@
 #include "zcfg_tr98_common.h"
 
 #define _isdigit(c) ((c >= 0x30) && (c <= 0x39))
+#ifdef ZCFG_PARM_NAMEMAPPING
+#define TR98MAPPING_PREFIX "Tr98_"
+#define IS_HANDLE_ROUTINE_REQUIRED(attr) (attr & PARAMETER_ATTR_ADDITIONAL_MASK)
+#endif
 
 static struct json_object *tr98StaticNameTable = NULL;
 
@@ -273,7 +277,6 @@
 }
 #endif
 
-
 zcfgRet_t zcfgFeTr98AllIGDNameGet()
 {
 #if 0
@@ -296,6 +299,7 @@
 	return zcfgFeAllIGDNameGet();
 #endif
 }
+
 static zcfgRet_t zcfgFeTr98ClassNameGet(char *objName, char *className)
 {
 	char *token = NULL;
@@ -865,6 +869,67 @@
 	return ZCFG_SUCCESS;
 }
 
+#ifdef ZCFG_PARM_NAMEMAPPING
+zcfgRet_t zcfgFe98ParmMappingToName(const char *notifyName, char *tr98NotifyName)
+{
+	char seqnumStr[30] = {0};
+	char idxstr[30] = {0}, instNumStr[5];
+	char parmName[MAX_PARMNAME_LEN] = {0};
+	uint32_t seqnum = 0;
+	char *c = NULL;
+	objIndex_t tr98ObjIid;
+	int n = 0, instNumStrLen = 0;
+	bool subpath = true;
+
+	zcfgLog(ZCFG_LOG_INFO, "%s\n", __FUNCTION__);
+
+	sscanf(notifyName, "%s_%s_%s", seqnumStr, idxstr, parmName);
+
+	seqnum = atoi(seqnumStr);
+	if(!(IS_SEQNUM_RIGHT(seqnum)))
+		return ZCFG_INTERNAL_ERROR;
+
+	IID_INIT(tr98ObjIid);
+	c = (idxstr + n);
+	while(*c != '\0') {
+		if(*c == '.') {
+			subpath = (subpath == true) ? false : true;
+		}
+		else if(subpath == true) {
+			if(_isdigit(*c)) {
+				instNumStr[instNumStrLen++] = *c;
+				if((instNumStrLen+1) >= sizeof(instNumStr))
+					return ZCFG_NO_SUCH_OBJECT;
+			}
+			else {
+				return ZCFG_NO_SUCH_OBJECT;
+			}
+		}
+		c = idxstr+(++n);
+		if(((subpath == false) && instNumStrLen) || ((*c == '\0') && instNumStrLen)) {
+			int idx = 0;
+			tr98ObjIid.idx[tr98ObjIid.level++] = ((idx = atoi(instNumStr)) > 255) ? 255 : idx;
+			instNumStrLen = 0;
+			memset(instNumStr, 0, sizeof(instNumStr));
+		}
+	}
+
+	if(zcfgFe98SeqnumToName(seqnum, &tr98ObjIid, tr98NotifyName) != ZCFG_SUCCESS) {
+		zcfgLog(ZCFG_LOG_INFO, "%s: seqnum to name fail\n", __FUNCTION__);
+		return ZCFG_NO_SUCH_OBJECT;
+	}
+
+	if(strlen(parmName) > 0) {
+		n = strlen(tr98NotifyName);
+		*(tr98NotifyName + n++) = '.';
+		*(tr98NotifyName + n) = '\0';
+		strcat(tr98NotifyName, parmName);
+	}
+
+	return ZCFG_SUCCESS;
+}
+#endif
+
 zcfgRet_t zcfgFeTr98ObjNameGet(char *tr98ObjName, struct json_object **value)
 {
 	zcfgRet_t ret;
@@ -1478,12 +1543,15 @@
 
 		*ptr = '\0';
 #else
+		if(!strncmp(tr181NotifyName, (const char *)"Device", strlen("Device"))) {
 		if(zcfgFeGetTr181NameParm(tr181NotifyName, tr181ObjName, tr181ParamName) != ZCFG_SUCCESS)
 			continue;
 			
 		printf("%s: tr181NotifyName=%s, tr181ObjName=%s, tr181ParamName=%s\n", __FUNCTION__, tr181NotifyName, tr181ObjName, tr181ParamName);
 #endif
-		if((ret = zcfgFe181To98MappingNameGet(tr181ObjName, tr98ObjName)) == ZCFG_SUCCESS) {
+			if((ret = zcfgFe181To98MappingNameGet(tr181ObjName, tr98ObjName)) != ZCFG_SUCCESS)
+				continue;
+
 			printf("TR98 Object Name %s\n", tr98ObjName);
 	
 			if((ret = zcfgFeTr98ClassNameGet(tr98ObjName, tr98ClassName)) != ZCFG_SUCCESS) {
@@ -1496,6 +1564,21 @@
 					ret = tr98Obj[handler].notify(tr98ObjName, tr181ParamName, tr181ParamVal, handler, tr98NotifyInfo);
 			}
 		}
+#ifdef ZCFG_PARM_NAMEMAPPING
+		else if(!strncmp(tr181NotifyName, (const char *)TR98MAPPING_PREFIX, strlen(TR98MAPPING_PREFIX))) {
+			const char *notifyName = tr181NotifyName + strlen(TR98MAPPING_PREFIX);
+			char *tr98NotifyName = (char *)malloc(TR98_MAX_OBJ_NAME_LENGTH + MAX_PARMNAME_LEN);
+
+			if((ret = zcfgFe98ParmMappingToName(notifyName, tr98NotifyName)) != ZCFG_SUCCESS) {
+
+				free(tr98NotifyName);
+				return ret;
+			}
+
+			json_object_object_add(*tr98NotifyInfo, tr98NotifyName, JSON_OBJ_COPY(tr181ParamVal));
+			free(tr98NotifyName);
+		}
+#endif
 		else { /*Not found, maybe one by one mapping*/
 			/*Replace Device to InternetGatewayDevice */
 			token = strtok_r(tr181ObjName, ".", &tmp);
@@ -1571,6 +1654,56 @@
 	return ZCFG_SUCCESS;
 }
 
+#ifdef ZCFG_PARM_NAMEMAPPING
+int zcfgFeTr98ObjParamAttrGetByName(const char *tr98ObjName, const char *name)
+{
+	zcfgRet_t ret;
+	zcfg_name_t seqnum = 0; 
+	zcfg_offset_t oid = 0;
+	objIndex_t tr98ObjIid, objIid;
+	char queriedParmName[MAX_PARMNAME_LEN] = {0}, tr98ClassName[128] = {0};
+	uint32_t attr = 0;
+	int handler = 0;
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_INFO, "%s\n", __FUNCTION__);
+
+	if((ret = zcfgFeTr98ClassNameGet((char *)tr98ObjName, tr98ClassName)) != ZCFG_SUCCESS) {
+		return ret;
+	}
+
+	handler = zcfgFeTr98HandlerGet(tr98ClassName);
+	if(handler != -1) {
+		paramList = tr98Obj[handler].parameter;
+		if(paramList == NULL)
+		{
+			return ZCFG_NO_SUCH_PARAMETER;
+		}
+
+		while(paramList->name!= NULL) {
+			if(strcmp(paramList->name, name) == 0){
+				break;
+			}
+			paramList++;
+		}
+	}
+
+	if(!paramList->name) {
+		return ZCFG_NO_SUCH_PARAMETER;
+	}
+
+	IID_INIT(tr98ObjIid);
+	if(zcfgFe98NameToSeqnum((const char *)tr98ClassName, &seqnum, &tr98ObjIid) == ZCFG_SUCCESS) {
+		if(zcfgFeParmAttrQry(seqnum, &tr98ObjIid, name, &oid, &objIid, queriedParmName, &attr) == ZCFG_SUCCESS) {
+			//confirm data if required
+			return attr;
+		}
+	}
+
+	return ZCFG_NO_SUCH_PARAMETER;
+}
+#endif
+
 int zcfgFeTr98ParamAttrGetByName(char *tr98ObjName, char *name)
 {
 	zcfgRet_t ret;
@@ -1606,7 +1739,7 @@
 	return ZCFG_NO_SUCH_PARAMETER;
 }
 
-zcfgRet_t zcfgFeTr98AllParamAttrGetByObjName(char *tr98ObjName, struct json_object *result)
+zcfgRet_t zcfgFeTr98AllParamAttrGetByObjName(const char *tr98ObjName, struct json_object *result)
 {
 	zcfgRet_t ret;
 	char tr98ClassName[256] = {0};
@@ -1638,6 +1771,121 @@
 	return ZCFG_SUCCESS;
 }
 
+#ifdef ZCFG_PARM_NAMEMAPPING
+
+zcfgFeSetParmAttr_t *zcfgFeTr98ParamAttrSetByName(uint32_t objnum, objIndex_t *objIid, const char *parmName, uint32_t attr)
+{
+	int n = 0;
+	zcfgFeSetParmAttr_t *setParmAttr = NULL;
+
+	zcfgLog(ZCFG_LOG_INFO, "%s\n", __FUNCTION__);
+
+	setParmAttr = (zcfgFeSetParmAttr_t *)malloc(sizeof(zcfgFeSetParmAttr_t));
+
+	setParmAttr->parmNotify.objnum = objnum;
+	memcpy(&setParmAttr->parmNotify.objIid, objIid, sizeof(objIndex_t));
+	setParmAttr->parmNotify.notify = (uint8_t)(attr & PARAMETER_ATTR_NOTIFY_MASK);
+	//setParmAttr->parmNotify.mask with attr
+	strcpy(setParmAttr->parmName, parmName);
+	setParmAttr->parmNotify.parmNameLen = strlen(setParmAttr->parmName) + 1;
+
+	setParmAttr->parmNotify.parmNameLen += ((n = (setParmAttr->parmNotify.parmNameLen % UNITSIZE)) > 0) ? (UNITSIZE - n) : 0;
+
+	return setParmAttr;
+}
+
+int zcfgFeTr98ParamAttrMultiSetByName(char *tr98ObjName, char *name, int notify, zcfgFeSetParmAttrLst_t *setParmAttrLst)
+{
+	zcfgRet_t ret;
+	char tr98ClassName[128] = {0};
+	int handler = 0;
+	zcfg_name_t seqnum = 0;
+	zcfg_offset_t oid = 0;
+	objIndex_t tr98ObjIid, objIid;
+	char queriedParmName[MAX_PARMNAME_LEN] = {0};
+	uint32_t queriedAttr = 0;
+	zcfgFeSetParmAttr_t *setParmAttr = NULL;
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_INFO, "%s\n", __FUNCTION__);
+
+	//if(!tr98ObjName || !name || !setParmAttrLst)
+	//	return ZCFG_INTERNAL_ERROR;
+
+	if((ret = zcfgFeTr98ClassNameGet(tr98ObjName, tr98ClassName)) != ZCFG_SUCCESS) {
+		return ret;
+	}
+
+	handler = zcfgFeTr98HandlerGet(tr98ClassName);
+	paramList = tr98Obj[handler].parameter;
+	if((handler == -1) || !paramList) {
+		return ZCFG_NO_SUCH_PARAMETER;
+	}
+
+	while(paramList->name) {
+		if(!strcmp(paramList->name, name)) {
+			if((ret = zcfgFeTr98ParamAttrChk(paramList->attr, notify)) != ZCFG_SUCCESS)
+				return ret;
+			
+			break;
+		}
+		paramList++;
+	}
+
+	if(!paramList->name) {
+		return ZCFG_NO_SUCH_PARAMETER;
+	}
+
+#if 0
+	objInfo_t *objInfo = NULL;
+	objInfo = GET_OBJ_INFO_BY_OID(oid);
+	GET_PAMAMETERS_IN_OBJECT(objInfo, paramInfo, paramName) {
+		if(strcmp(name, paramName) == 0) {
+			/*Notify attribute was modified*/
+			if( ((paramInfo->attr & PARAMETER_ATTR_NOTIFY_MASK) != (notify & PARAMETER_ATTR_NOTIFY_MASK)) &&
+				((notify & PARAMETER_ATTR_ACTIVENOTIFY) && (paramInfo->attr & PARAMETER_ATTR_DENY_ACTIVENOTIFY_REQUEST)) ) {
+				return ZCFG_SET_ATTR_ERROR;
+			}
+			break;
+		}
+	}
+#endif
+
+	IID_INIT(tr98ObjIid);
+	if(zcfgFe98NameToSeqnum((const char *)tr98ClassName, &seqnum, &tr98ObjIid) == ZCFG_SUCCESS) {
+		if((ret = zcfgFeParmAttrQry(seqnum, &tr98ObjIid, (const char *)name, &oid, &objIid, queriedParmName, &queriedAttr)) != ZCFG_SUCCESS) {
+			zcfgLog(ZCFG_LOG_INFO, "%s: tr98 objnum %u %s query fail\n", __FUNCTION__, seqnum, name);
+			return ret;
+		}
+	}
+
+	if(IS_HANDLE_ROUTINE_REQUIRED(queriedAttr)) {
+		struct json_object *multiJobj = NULL;
+
+		if(!tr98Obj[handler].setAttr) {
+
+			return ZCFG_NO_SUCH_PARAMETER;
+		}
+
+		multiJobj = json_object_new_array();
+		if((ret = tr98Obj[handler].setAttr(tr98ObjName, handler, name, queriedAttr, multiJobj)) != ZCFG_SUCCESS) {
+
+			//flush multiJobj
+			json_object_put(multiJobj);
+			return ret;
+		}
+		//zcfgSetParmAttrAdd(setParmAttrLst, setParmAttr);
+		//flush multiJobj
+		json_object_put(multiJobj);
+	}
+	else {
+		setParmAttr = zcfgFeTr98ParamAttrSetByName(oid, &objIid, queriedParmName, (queriedAttr & PARAMETER_ATTR_NOTIFY_MASK));
+		zcfgSetParmAttrAdd(setParmAttrLst, setParmAttr);
+	}
+
+	return ZCFG_SUCCESS;
+}
+#else
 int zcfgFeTr98ParamAttrMultiSetByName(char *tr98ObjName, char *name, int notify, struct json_object *multiJobj)
 {
 	zcfgRet_t ret;
@@ -1660,7 +1908,7 @@
 	
 	return ZCFG_NO_SUCH_PARAMETER;
 }
-
+#endif
 
 int zcfgFeTr98ParamTypeGetByName(char *tr98ObjName, char *name)
 {
Index: libzcfg_fe_tr98-1.0/zcfg_fe_tr98.h
===================================================================
--- libzcfg_fe_tr98-1.0.orig/zcfg_fe_tr98.h	2015-05-27 19:38:22.490810181 +0800
+++ libzcfg_fe_tr98-1.0/zcfg_fe_tr98.h	2015-05-27 19:40:41.287311500 +0800
@@ -11,6 +11,7 @@
 #include "zcfg_debug.h"
 #include "zcfg_fe_schema.h"
 #include "zcfg_tr98_common.h"
+#include "zcfg_fe_msg.h"
 
 #define TR98_MAPPING_DEBUG 0
 
@@ -57,6 +58,7 @@
 zcfgRet_t zcfgFe181To98ObjMappingNameGet(const char *tr181PathName, char *tr98PathName);
 zcfgRet_t zcfgFe98NameToSeqnum(const char *tr98PathName, zcfg_name_t *seqnum, objIndex_t *tr98ObjIid);
 zcfgRet_t zcfgFe98SeqnumToName(zcfg_name_t seqnum, objIndex_t *objIid, char *tr98PathName);
+zcfgRet_t zcfgFe98ParmMappingToName(const char *notifyName, char *tr98NotifyName);
 zcfgRet_t zcfgFeTr98ObjNameGet(char *, struct  json_object** );
 zcfgRet_t zcfgFeTr98ObjNameObjGet(char *, struct json_object **);
 zcfgRet_t zcfgFeTr98ObjParamSet(char *, uint32_t , struct json_object *, char *);
@@ -71,8 +73,14 @@
 
 int zcfgFeTr98ParamAttrChk(int , int);
 int zcfgFeTr98ParamAttrGetByName(char *, char *);
-zcfgRet_t zcfgFeTr98AllParamAttrGetByObjName(char *, struct json_object *);
+zcfgRet_t zcfgFeTr98AllParamAttrGetByObjName(const char *, struct json_object *);
+int zcfgFeTr98ObjParamAttrGetByName(const char *tr98ObjName, const char *name);
+#ifdef ZCFG_PARM_NAMEMAPPING
+zcfgFeSetParmAttr_t *zcfgFeTr98ParamAttrSetByName(uint32_t objnum, objIndex_t *objIid, const char *parmName, uint32_t attr);
+int zcfgFeTr98ParamAttrMultiSetByName(char *tr98ObjName, char *name, int notify, zcfgFeSetParmAttrLst_t *setParmAttrLst);
+#else
 int zcfgFeTr98ParamAttrMultiSetByName(char *, char *, int , struct json_object *);
+#endif
 int zcfgFeTr98ParamTypeGetByName(char *, char *);
 zcfgRet_t zcfgFeTr98ParamChk(char *, char *, char *);
 zcfgSubObjNameList_t* zcfgFeTr98SubObjNameListGet(char *);
