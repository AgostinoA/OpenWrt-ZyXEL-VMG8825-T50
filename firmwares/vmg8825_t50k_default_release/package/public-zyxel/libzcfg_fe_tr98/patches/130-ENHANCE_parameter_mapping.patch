Index: libzcfg_fe_tr98-1.0/devInfo_parameter.h
===================================================================
--- libzcfg_fe_tr98-1.0.orig/devInfo_parameter.h	2015-06-04 09:09:17.712217544 +0800
+++ libzcfg_fe_tr98-1.0/devInfo_parameter.h	2015-06-04 09:09:17.972217546 +0800
@@ -8,14 +8,14 @@
 	{ "HardwareVersion", PARAMETER_ATTR_READONLY|PARAMETER_ATTR_DENY_DISABLENOTIFY_REQUEST, 65, json_type_string},
 	{ "SoftwareVersion", PARAMETER_ATTR_READONLY|PARAMETER_ATTR_DENY_DISABLENOTIFY_REQUEST|PARAMETER_ATTR_DENY_PASSIVENOTIFY_REQUEST|PARAMETER_ATTR_ACTIVENOTIFY, 65, json_type_string},
 	{ "ModemFirmwareVersion", PARAMETER_ATTR_READONLY, 65, json_type_string},
-	{ "EnabledOptions", PARAMETER_ATTR_READONLY|PARAMETER_ATTR_DENY_PASSIVENOTIFY_REQUEST|PARAMETER_ATTR_DENY_ACTIVENOTIFY_REQUEST, 1025, json_type_string},
+	{ "EnabledOptions", PARAMETER_ATTR_READONLY|PARAMETER_ATTR_DEFAULTATTR|PARAMETER_ATTR_DENY_PASSIVENOTIFY_REQUEST|PARAMETER_ATTR_DENY_ACTIVENOTIFY_REQUEST, 1025, json_type_string},
 	{ "UpTime", PARAMETER_ATTR_READONLY|PARAMETER_ATTR_DENY_ACTIVENOTIFY_REQUEST, 0, json_type_uint32},
 	{ "AdditionalHardwareVersion", PARAMETER_ATTR_READONLY, 65, json_type_string},
 	{ "AdditionalSoftwareVersion", PARAMETER_ATTR_READONLY, 65, json_type_string},
-	{ "SpecVersion", PARAMETER_ATTR_READONLY|PARAMETER_ATTR_DENY_DISABLENOTIFY_REQUEST|PARAMETER_ATTR_DENY_ACTIVENOTIFY_REQUEST, 17, json_type_string},
+	{ "SpecVersion", PARAMETER_ATTR_READONLY|PARAMETER_ATTR_DEFAULTATTR|PARAMETER_ATTR_DENY_DISABLENOTIFY_REQUEST|PARAMETER_ATTR_DENY_ACTIVENOTIFY_REQUEST, 17, json_type_string},
 	{ "ProvisioningCode", PARAMETER_ATTR_WRITE|PARAMETER_ATTR_DENY_DISABLENOTIFY_REQUEST|PARAMETER_ATTR_DENY_PASSIVENOTIFY_REQUEST|PARAMETER_ATTR_ACTIVENOTIFY, 65, json_type_string},
 	{ "FirstUseDate", PARAMETER_ATTR_READONLY, 21, json_type_time},
-	{ "DeviceLog", PARAMETER_ATTR_READONLY|PARAMETER_ATTR_DENY_PASSIVENOTIFY_REQUEST|PARAMETER_ATTR_DENY_ACTIVENOTIFY_REQUEST, 33, json_type_string},
+	{ "DeviceLog", PARAMETER_ATTR_READONLY|PARAMETER_ATTR_DEFAULTATTR|PARAMETER_ATTR_DENY_PASSIVENOTIFY_REQUEST|PARAMETER_ATTR_DENY_ACTIVENOTIFY_REQUEST, 33, json_type_string},
 	{ "VendorConfigFileNumberOfEntries", PARAMETER_ATTR_READONLY, 0, json_type_uint32},
 	{ NULL, 0, 0, 0}
 };
\ No newline at end of file
Index: libzcfg_fe_tr98-1.0/wanDev_parameter.h
===================================================================
--- libzcfg_fe_tr98-1.0.orig/wanDev_parameter.h	2015-06-04 09:09:17.804217544 +0800
+++ libzcfg_fe_tr98-1.0/wanDev_parameter.h	2015-06-04 09:08:40.001609500 +0800
@@ -288,26 +288,26 @@
 	{ "ConnectionType", PARAMETER_ATTR_WRITE, 35, json_type_string},
 	{ "Name", PARAMETER_ATTR_WRITE, 257, json_type_string},
 	{ "Uptime", PARAMETER_ATTR_READONLY, 0, json_type_uint32},
-	{ "LastConnectionError", PARAMETER_ATTR_READONLY|PARAMETER_ATTR_DENY_ACTIVENOTIFY_REQUEST|PARAMETER_ATTR_DENY_PASSIVENOTIFY_REQUEST, 32, json_type_string},
-	{ "AutoDisconnectTime", PARAMETER_ATTR_WRITE|PARAMETER_ATTR_DENY_ACTIVENOTIFY_REQUEST|PARAMETER_ATTR_DENY_PASSIVENOTIFY_REQUEST, 0, json_type_uint32},
-	{ "IdleDisconnectTime", PARAMETER_ATTR_WRITE|PARAMETER_ATTR_DENY_ACTIVENOTIFY_REQUEST|PARAMETER_ATTR_DENY_PASSIVENOTIFY_REQUEST, 0, json_type_uint32},
-	{ "WarnDisconnectDelay", PARAMETER_ATTR_WRITE|PARAMETER_ATTR_DENY_ACTIVENOTIFY_REQUEST|PARAMETER_ATTR_DENY_PASSIVENOTIFY_REQUEST, 0, json_type_uint32},
-	{ "RSIPAvailable", PARAMETER_ATTR_READONLY|PARAMETER_ATTR_DENY_ACTIVENOTIFY_REQUEST|PARAMETER_ATTR_DENY_PASSIVENOTIFY_REQUEST, 0, json_type_boolean},
+	{ "LastConnectionError", PARAMETER_ATTR_READONLY|PARAMETER_ATTR_DEFAULTATTR|PARAMETER_ATTR_DENY_ACTIVENOTIFY_REQUEST|PARAMETER_ATTR_DENY_PASSIVENOTIFY_REQUEST, 33, json_type_string},
+	{ "AutoDisconnectTime", PARAMETER_ATTR_WRITE|PARAMETER_ATTR_DEFAULTATTR|PARAMETER_ATTR_DENY_ACTIVENOTIFY_REQUEST|PARAMETER_ATTR_DENY_PASSIVENOTIFY_REQUEST, 0, json_type_uint32},
+	{ "IdleDisconnectTime", PARAMETER_ATTR_WRITE|PARAMETER_ATTR_DEFAULTATTR|PARAMETER_ATTR_DENY_ACTIVENOTIFY_REQUEST|PARAMETER_ATTR_DENY_PASSIVENOTIFY_REQUEST, 0, json_type_uint32},
+	{ "WarnDisconnectDelay", PARAMETER_ATTR_WRITE|PARAMETER_ATTR_DEFAULTATTR|PARAMETER_ATTR_DENY_ACTIVENOTIFY_REQUEST|PARAMETER_ATTR_DENY_PASSIVENOTIFY_REQUEST, 0, json_type_uint32},
+	{ "RSIPAvailable", PARAMETER_ATTR_READONLY|PARAMETER_ATTR_DEFAULTATTR|PARAMETER_ATTR_DENY_ACTIVENOTIFY_REQUEST|PARAMETER_ATTR_DENY_PASSIVENOTIFY_REQUEST, 0, json_type_boolean},
 	{ "NATEnabled", PARAMETER_ATTR_WRITE, 0, json_type_boolean},
 	{ "AddressingType", PARAMETER_ATTR_WRITE, 8, json_type_string},
 	{ "ExternalIPAddress", PARAMETER_ATTR_WRITE|PARAMETER_ATTR_ACTIVENOTIFY, 17, json_type_string},
 	{ "SubnetMask", PARAMETER_ATTR_WRITE, 17, json_type_string},
 	{ "DefaultGateway", PARAMETER_ATTR_WRITE, 17, json_type_string},
 	{ "DNSEnabled", PARAMETER_ATTR_WRITE, 0, json_type_boolean},
-	{ "DNSOverrideAllowed", PARAMETER_ATTR_WRITE|PARAMETER_ATTR_DENY_ACTIVENOTIFY_REQUEST|PARAMETER_ATTR_DENY_PASSIVENOTIFY_REQUEST, 0, json_type_boolean},
+	{ "DNSOverrideAllowed", PARAMETER_ATTR_WRITE|PARAMETER_ATTR_DEFAULTATTR|PARAMETER_ATTR_DENY_ACTIVENOTIFY_REQUEST|PARAMETER_ATTR_DENY_PASSIVENOTIFY_REQUEST, 0, json_type_boolean},
 	{ "DNSServers", PARAMETER_ATTR_WRITE, 65, json_type_string},
 	{ "MaxMTUSize", PARAMETER_ATTR_WRITE, 0, json_type_uint32},
-	{ "MACAddress", PARAMETER_ATTR_WRITE|PARAMETER_ATTR_DENY_ACTIVENOTIFY_REQUEST|PARAMETER_ATTR_DENY_PASSIVENOTIFY_REQUEST, 19, json_type_string},
-	{ "MACAddressOverride", PARAMETER_ATTR_WRITE|PARAMETER_ATTR_DENY_ACTIVENOTIFY_REQUEST|PARAMETER_ATTR_DENY_PASSIVENOTIFY_REQUEST, 0, json_type_boolean},
-	{ "ConnectionTrigger", PARAMETER_ATTR_WRITE|PARAMETER_ATTR_DENY_ACTIVENOTIFY_REQUEST|PARAMETER_ATTR_DENY_PASSIVENOTIFY_REQUEST, 10, json_type_string},
-	{ "RouteProtocolRx", PARAMETER_ATTR_WRITE|PARAMETER_ATTR_DENY_ACTIVENOTIFY_REQUEST|PARAMETER_ATTR_DENY_PASSIVENOTIFY_REQUEST, 7, json_type_string},
-	{ "ShapingRate", PARAMETER_ATTR_WRITE|PARAMETER_ATTR_DENY_ACTIVENOTIFY_REQUEST|PARAMETER_ATTR_DENY_PASSIVENOTIFY_REQUEST, 0, json_type_int},
-	{ "ShapingBurstSize", PARAMETER_ATTR_WRITE|PARAMETER_ATTR_DENY_ACTIVENOTIFY_REQUEST|PARAMETER_ATTR_DENY_PASSIVENOTIFY_REQUEST, 0, json_type_uint32},
+	{ "MACAddress", PARAMETER_ATTR_WRITE|PARAMETER_ATTR_DEFAULTATTR|PARAMETER_ATTR_DENY_ACTIVENOTIFY_REQUEST|PARAMETER_ATTR_DENY_PASSIVENOTIFY_REQUEST, 19, json_type_string},
+	{ "MACAddressOverride", PARAMETER_ATTR_WRITE|PARAMETER_ATTR_DEFAULTATTR|PARAMETER_ATTR_DENY_ACTIVENOTIFY_REQUEST|PARAMETER_ATTR_DENY_PASSIVENOTIFY_REQUEST, 0, json_type_boolean},
+	{ "ConnectionTrigger", PARAMETER_ATTR_WRITE|PARAMETER_ATTR_DEFAULTATTR|PARAMETER_ATTR_DENY_ACTIVENOTIFY_REQUEST|PARAMETER_ATTR_DENY_PASSIVENOTIFY_REQUEST, 10, json_type_string},
+	{ "RouteProtocolRx", PARAMETER_ATTR_WRITE|PARAMETER_ATTR_DEFAULTATTR|PARAMETER_ATTR_DENY_ACTIVENOTIFY_REQUEST|PARAMETER_ATTR_DENY_PASSIVENOTIFY_REQUEST, 7, json_type_string},
+	{ "ShapingRate", PARAMETER_ATTR_WRITE|PARAMETER_ATTR_DEFAULTATTR|PARAMETER_ATTR_DENY_ACTIVENOTIFY_REQUEST|PARAMETER_ATTR_DENY_PASSIVENOTIFY_REQUEST, 0, json_type_int},
+	{ "ShapingBurstSize", PARAMETER_ATTR_WRITE|PARAMETER_ATTR_DEFAULTATTR|PARAMETER_ATTR_DENY_ACTIVENOTIFY_REQUEST|PARAMETER_ATTR_DENY_PASSIVENOTIFY_REQUEST, 0, json_type_uint32},
 	{ "PortMappingNumberOfEntries", PARAMETER_ATTR_READONLY|PARAMETER_ATTR_DENY_ACTIVENOTIFY_REQUEST|PARAMETER_ATTR_DENY_PASSIVENOTIFY_REQUEST, 0, json_type_uint32},
 	{ "X_ZYXEL_DNSType", PARAMETER_ATTR_WRITE, 19, json_type_string},
 	{ "X_ZYXEL_IGMPProxyEnable", PARAMETER_ATTR_WRITE, 0, json_type_boolean},
@@ -459,11 +459,11 @@
 	{ "DefaultGateway", PARAMETER_ATTR_READONLY, 17, json_type_string},
 	{ "Name", PARAMETER_ATTR_WRITE, 257, json_type_string},
 	{ "Uptime", PARAMETER_ATTR_READONLY, 0, json_type_uint32},
-	{ "LastConnectionError", PARAMETER_ATTR_READONLY, 33, json_type_string},
-	{ "AutoDisconnectTime", PARAMETER_ATTR_WRITE, 0, json_type_uint32},
-	{ "IdleDisconnectTime", PARAMETER_ATTR_WRITE, 0, json_type_uint32},
-	{ "WarnDisconnectDelay", PARAMETER_ATTR_WRITE, 0, json_type_uint32},
-	{ "RSIPAvailable", PARAMETER_ATTR_READONLY, 0, json_type_boolean},
+	{ "LastConnectionError", PARAMETER_ATTR_READONLY|PARAMETER_ATTR_DEFAULTATTR|PARAMETER_ATTR_DENY_ACTIVENOTIFY_REQUEST|PARAMETER_ATTR_DENY_PASSIVENOTIFY_REQUEST, 33, json_type_string},
+	{ "AutoDisconnectTime", PARAMETER_ATTR_WRITE|PARAMETER_ATTR_DEFAULTATTR|PARAMETER_ATTR_DENY_ACTIVENOTIFY_REQUEST|PARAMETER_ATTR_DENY_PASSIVENOTIFY_REQUEST, 0, json_type_uint32},
+	{ "IdleDisconnectTime", PARAMETER_ATTR_WRITE|PARAMETER_ATTR_DEFAULTATTR|PARAMETER_ATTR_DENY_ACTIVENOTIFY_REQUEST|PARAMETER_ATTR_DENY_PASSIVENOTIFY_REQUEST, 0, json_type_uint32},
+	{ "WarnDisconnectDelay", PARAMETER_ATTR_WRITE|PARAMETER_ATTR_DEFAULTATTR|PARAMETER_ATTR_DENY_ACTIVENOTIFY_REQUEST|PARAMETER_ATTR_DENY_PASSIVENOTIFY_REQUEST, 0, json_type_uint32},
+	{ "RSIPAvailable", PARAMETER_ATTR_READONLY|PARAMETER_ATTR_DEFAULTATTR|PARAMETER_ATTR_DENY_ACTIVENOTIFY_REQUEST|PARAMETER_ATTR_DENY_PASSIVENOTIFY_REQUEST, 0, json_type_boolean},
 	{ "NATEnabled", PARAMETER_ATTR_WRITE, 0, json_type_boolean},
 	{ "Username", PARAMETER_ATTR_WRITE, 65, json_type_string},
 	{ "Password", PARAMETER_ATTR_WRITE, 65, json_type_string},
@@ -475,19 +475,19 @@
 	{ "MaxMRUSize", PARAMETER_ATTR_WRITE, 0, json_type_uint32},
 	{ "CurrentMRUSize", PARAMETER_ATTR_READONLY, 0, json_type_uint32},
 	{ "DNSEnabled", PARAMETER_ATTR_WRITE, 0, json_type_boolean},
-	{ "DNSOverrideAllowed", PARAMETER_ATTR_WRITE, 0, json_type_boolean},
+	{ "DNSOverrideAllowed", PARAMETER_ATTR_WRITE|PARAMETER_ATTR_DEFAULTATTR|PARAMETER_ATTR_DENY_ACTIVENOTIFY_REQUEST|PARAMETER_ATTR_DENY_PASSIVENOTIFY_REQUEST, 0, json_type_boolean},
 	{ "DNSServers", PARAMETER_ATTR_WRITE, 65, json_type_string},
-	{ "MACAddress", PARAMETER_ATTR_WRITE, 19, json_type_string},
-	{ "MACAddressOverride", PARAMETER_ATTR_WRITE, 0, json_type_boolean},
-	{ "TransportType", PARAMETER_ATTR_READONLY, 7, json_type_string},
+	{ "MACAddress", PARAMETER_ATTR_WRITE|PARAMETER_ATTR_DEFAULTATTR|PARAMETER_ATTR_DENY_ACTIVENOTIFY_REQUEST|PARAMETER_ATTR_DENY_PASSIVENOTIFY_REQUEST, 19, json_type_string},
+	{ "MACAddressOverride", PARAMETER_ATTR_WRITE|PARAMETER_ATTR_DEFAULTATTR|PARAMETER_ATTR_DENY_ACTIVENOTIFY_REQUEST|PARAMETER_ATTR_DENY_PASSIVENOTIFY_REQUEST, 0, json_type_boolean},
+	{ "TransportType", PARAMETER_ATTR_READONLY|PARAMETER_ATTR_DEFAULTATTR|PARAMETER_ATTR_DENY_ACTIVENOTIFY_REQUEST|PARAMETER_ATTR_DENY_PASSIVENOTIFY_REQUEST, 7, json_type_string},
 	{ "PPPoEACName", PARAMETER_ATTR_WRITE, 257, json_type_string},
 	{ "PPPoEServiceName", PARAMETER_ATTR_WRITE, 257, json_type_string},
-	{ "ConnectionTrigger", PARAMETER_ATTR_WRITE, 10, json_type_string},
+	{ "ConnectionTrigger", PARAMETER_ATTR_WRITE|PARAMETER_ATTR_DEFAULTATTR|PARAMETER_ATTR_DENY_ACTIVENOTIFY_REQUEST|PARAMETER_ATTR_DENY_PASSIVENOTIFY_REQUEST, 10, json_type_string},
 	{ "RouteProtocolRx", PARAMETER_ATTR_WRITE, 7, json_type_string},
 	{ "PPPLCPEcho", PARAMETER_ATTR_READONLY, 0, json_type_uint32},
 	{ "PPPLCPEchoRetry", PARAMETER_ATTR_READONLY, 0, json_type_uint32},
-	{ "ShapingRate", PARAMETER_ATTR_WRITE, 0, json_type_int},
-	{ "ShapingBurstSize", PARAMETER_ATTR_WRITE, 0, json_type_uint32},
+	{ "ShapingRate", PARAMETER_ATTR_WRITE|PARAMETER_ATTR_DEFAULTATTR|PARAMETER_ATTR_DENY_ACTIVENOTIFY_REQUEST|PARAMETER_ATTR_DENY_PASSIVENOTIFY_REQUEST, 0, json_type_int},
+	{ "ShapingBurstSize", PARAMETER_ATTR_WRITE|PARAMETER_ATTR_DEFAULTATTR|PARAMETER_ATTR_DENY_ACTIVENOTIFY_REQUEST|PARAMETER_ATTR_DENY_PASSIVENOTIFY_REQUEST, 0, json_type_uint32},
 	{ "PortMappingNumberOfEntries", PARAMETER_ATTR_READONLY, 0, json_type_uint32},
 	{ "X_ZYXEL_DNSType", PARAMETER_ATTR_WRITE, 19, json_type_string},
 	{ "X_ZYXEL_IGMPProxyEnable", PARAMETER_ATTR_WRITE, 0, json_type_boolean},
Index: libzcfg_fe_tr98-1.0/zcfg_fe_msg.c
===================================================================
--- libzcfg_fe_tr98-1.0.orig/zcfg_fe_msg.c	2015-06-04 09:09:17.848217545 +0800
+++ libzcfg_fe_tr98-1.0/zcfg_fe_msg.c	2015-06-04 09:09:17.972217546 +0800
@@ -1,4 +1,5 @@
 
+#include "zcfg_debug.h"
 #include "zcfg_fe_msg.h"
 
 zcfgRet_t zcfg98To181ObjMappingAdd(zcfg_name_t seqnum, objIndex_t *tr98ObjIid, zcfg_offset_t oid, objIndex_t *objIid)
@@ -9,6 +10,8 @@
 	char *sendBuf = NULL, *recvBuf = NULL;
 	zcfgMapData_t *mappingData = NULL, *addedMapping = NULL;
 
+	zcfgLog(ZCFG_LOG_INFO, "%s\n", __FUNCTION__);
+
 	sendBuf = (char *)malloc(sizeof(zcfgMsg_t) + sizeof(zcfgMapData_t));
 	memset(sendBuf, 0, (sizeof(zcfgMsg_t) + sizeof(zcfgMapData_t)));
 
@@ -58,6 +61,8 @@
 	char *sendBuf = NULL, *recvBuf = NULL;
 	zcfgMapData_t *msgMapData = NULL, *queriedMapping = NULL;
 
+	zcfgLog(ZCFG_LOG_INFO, "%s\n", __FUNCTION__);
+
 	sendBuf = (char *)malloc(sizeof(zcfgMsg_t) + sizeof(zcfgMapData_t));
 	memset(sendBuf, 0, (sizeof(zcfgMsg_t) + sizeof(zcfgMapData_t)));
 
@@ -105,11 +110,16 @@
 	zcfgMsg_t *recvMsgHdr = NULL;
 	char *sendBuf = NULL, *recvBuf = NULL, *dataParmName = NULL;
 	zcfgParmNotify_t *queryData = NULL, *queriedData = NULL;
-	int msgDataLen = 0, n = 0, parmNameLen = 0;
+	int msgDataLen = 0, n = 0, parmNameLen = 0, parmAttr = -1;
+
+	zcfgLog(ZCFG_LOG_INFO, "%s\n", __FUNCTION__);
 
 	//if(!tr98ObjIid || !parmName || !oid || objIid || queriedParmName || !attr)
 	//	return ZCFG_INTERNAL_ERROR;
 
+	zcfgLog(ZCFG_LOG_INFO, "%s: %u %hu,%hu,%hu,%hu,%hu,%hu %s\n", __FUNCTION__, seqnum, tr98ObjIid->idx[0],
+         tr98ObjIid->idx[1], tr98ObjIid->idx[2], tr98ObjIid->idx[3], tr98ObjIid->idx[4], tr98ObjIid->idx[5], parmName);
+
 	parmNameLen = strlen(parmName) + 1;
 	parmNameLen += ((n = (parmNameLen % UNITSIZE)) > 0) ? (UNITSIZE - n) : 0;
 	msgDataLen = sizeof(zcfgParmNotify_t) + parmNameLen;
@@ -131,7 +141,7 @@
 	ret = zcfgMsgSendAndGetReply(sendMsgHdr, (zcfgMsg_t **)&recvBuf, 0);
 
 	if(ret != ZCFG_SUCCESS) {
-		return ZCFG_INTERNAL_ERROR;
+		return ret;
 	}
 
 	recvMsgHdr = (zcfgMsg_t*)recvBuf;
@@ -140,6 +150,10 @@
 		return ZCFG_INTERNAL_ERROR;
 	}
 
+	if(attr) {
+		*attr = PARAMETER_ATTR_NOATTR;
+	}
+
 	if( recvMsgHdr->length > 0 ) {
 		queriedData = (zcfgParmNotify_t *)(recvBuf+sizeof(zcfgMsg_t));
 		#if 0
@@ -152,9 +166,18 @@
 		#endif
 		*oid = queriedData->objnum;
 		memcpy(objIid, &queriedData->objIid, sizeof(objIndex_t));
-		*attr = queriedData->notify;
+		if(attr) {
+			*attr = queriedData->mask;
+			*attr = (*attr << 16);
+			*attr |= queriedData->notify;
+			parmAttr = *attr;
+			printf("%s: attr 0x%x\n", __FUNCTION__, *attr);
+		}
 		dataParmName = (char *)(queriedData + 1);
 		strcpy(queriedParmName, dataParmName);
+
+		zcfgLog(ZCFG_LOG_INFO, "%s: queried %u %hu,%hu,%hu,%hu,%hu,%hu %s 0x%x\n", __FUNCTION__, *oid, objIid->idx[0],
+         objIid->idx[1], objIid->idx[2], objIid->idx[3], objIid->idx[4], objIid->idx[5], queriedParmName, parmAttr);
 	}
 
 	free(recvBuf);
@@ -166,20 +189,27 @@
 {
 	zcfgFeSetParmAttr_t *setParmAttr = NULL;
 	zcfgRet_t ret = ZCFG_SUCCESS;
-	zcfgMsg_t *sendMsgHdr = NULL;
-	zcfgMsg_t *recvMsgHdr = NULL;
+	zcfgMsg_t *sendMsgHdr = NULL, *recvMsgHdr = NULL;
+	bool dataLengthFail = false;
 	char *sendBuf = NULL, *recvBuf = NULL, *msgParmAttrData = NULL;
 	uint32_t *nSetParmAttr = NULL, msgParmAttrDataLen = 0;
 
-	//if(!setParmAttrLst)
-	//	return ZCFG_INTERNAL_ERROR;
+	zcfgLog(ZCFG_LOG_INFO, "%s\n", __FUNCTION__);
 		
-	sendBuf = (char *)malloc(sizeof(zcfgMsg_t) + setParmAttrLst->parmNotifyDataLen) + sizeof(uint32_t);
-	memset(sendBuf, 0, (sizeof(zcfgMsg_t) + setParmAttrLst->parmNotifyDataLen));
+	if(!setParmAttrLst)
+		return ZCFG_INTERNAL_ERROR;
+
+	if(!setParmAttrLst->n || !setParmAttrLst->parmNotifyDataLen) {
+		zcfgLog(ZCFG_LOG_INFO, "%s, nsetParmAttr %d, parmNotifyDataLen %d\n", __FUNCTION__, setParmAttrLst->n, setParmAttrLst->parmNotifyDataLen);
+		return ZCFG_INTERNAL_ERROR;
+	}
+
+	sendBuf = (char *)malloc(sizeof(zcfgMsg_t) + setParmAttrLst->parmNotifyDataLen + sizeof(uint32_t));
+	memset(sendBuf, 0, (sizeof(zcfgMsg_t) + setParmAttrLst->parmNotifyDataLen + sizeof(uint32_t)));
 
 	sendMsgHdr = (zcfgMsg_t *)sendBuf;
 	sendMsgHdr->type = REQUEST_SET_PARAM_ATTR;
-	sendMsgHdr->length = setParmAttrLst->parmNotifyDataLen;
+	sendMsgHdr->length = setParmAttrLst->parmNotifyDataLen + sizeof(uint32_t);
 	sendMsgHdr->dstEid = ZCFG_EID_ZCMD;
 	nSetParmAttr = (uint32_t *)(sendMsgHdr + 1);
 	*nSetParmAttr = setParmAttrLst->n;
@@ -194,12 +224,13 @@
 		msgParmAttrData += sizeof(zcfgParmNotify_t) + setParmAttr->parmNotify.parmNameLen;
 		msgParmAttrDataLen += sizeof(zcfgParmNotify_t) + setParmAttr->parmNotify.parmNameLen;
 		if(msgParmAttrDataLen > setParmAttrLst->parmNotifyDataLen) {
+			dataLengthFail = true;
 			break;
 		}
 		setParmAttr = setParmAttr->next;
 	}
 
-	if(msgParmAttrDataLen > setParmAttrLst->parmNotifyDataLen) {
+	if(dataLengthFail) {
 
 		free(sendBuf);
 		return ZCFG_INTERNAL_ERROR;		
@@ -208,11 +239,13 @@
 	ret = zcfgMsgSendAndGetReply(sendMsgHdr, (zcfgMsg_t **)&recvBuf, 0);
 
 	if(ret != ZCFG_SUCCESS) {
+		printf("%s: not ZCFG_SUCCESS\n", __FUNCTION__);
 		return ZCFG_INTERNAL_ERROR;
 	}
 
 	recvMsgHdr = (zcfgMsg_t*)recvBuf;
 	if ( recvMsgHdr->type == RESPONSE_FAIL ) {
+		printf("%s: RESPONSE_FAIL\n", __FUNCTION__);
 		ret = recvMsgHdr->statCode;
 		free(recvBuf);
 		return ret;
Index: libzcfg_fe_tr98-1.0/zcfg_fe_msg.h
===================================================================
--- libzcfg_fe_tr98-1.0.orig/zcfg_fe_msg.h	2015-06-04 09:09:17.852217545 +0800
+++ libzcfg_fe_tr98-1.0/zcfg_fe_msg.h	2015-06-04 09:09:17.972217546 +0800
@@ -28,12 +28,12 @@
 
 #define zcfgSetParmAttrLstInit(setParmAttrLst) { \
 		setParmAttrLst = (zcfgFeSetParmAttrLst_t *)malloc(sizeof(zcfgFeSetParmAttrLst_t)); \
-		memset(setParmAttrLst, 0, sizeof(sizeof(zcfgFeSetParmAttrLst_t)); }
+		memset(setParmAttrLst, 0, sizeof(zcfgFeSetParmAttrLst_t)); }
 #define zcfgSetParmAttrAdd(setParmAttrLst, setParmAttr) {setParmAttr->next = setParmAttrLst->start; setParmAttrLst->start = setParmAttr; setParmAttrLst->n++; \
 											setParmAttrLst->parmNotifyDataLen += sizeof(zcfgParmNotify_t) + setParmAttr->parmNotify.parmNameLen; }
 #define zcfgSetParmAttrLstFree(setParmAttrLst) \
 	{zcfgFeSetParmAttr_t *setParmAttr = (setParmAttrLst) ? setParmAttrLst->start : NULL; \
-	 while(setParmAttrLst) { setParmAttrLst->start = setParmAttr->next; free(setParmAttr); setParmAttr = setParmAttrLst->start; } \
+	 while(setParmAttr) { setParmAttrLst->start = setParmAttr->next; free(setParmAttr); setParmAttr = setParmAttrLst->start; } \
      if(setParmAttrLst) free(setParmAttrLst); }
 
 zcfgRet_t zcfg98To181ObjMappingAdd(zcfg_name_t seqnum, objIndex_t *tr98ObjIid, zcfg_offset_t oid, objIndex_t *objIid);
Index: libzcfg_fe_tr98-1.0/zcfg_fe_tr98.c
===================================================================
--- libzcfg_fe_tr98-1.0.orig/zcfg_fe_tr98.c	2015-06-04 09:09:17.956217546 +0800
+++ libzcfg_fe_tr98-1.0/zcfg_fe_tr98.c	2015-06-04 09:08:49.295538800 +0800
@@ -32,7 +32,7 @@
 #define _isdigit(c) ((c >= 0x30) && (c <= 0x39))
 #ifdef ZCFG_PARM_NAMEMAPPING
 #define TR98MAPPING_PREFIX "Tr98_"
-#define IS_HANDLE_ROUTINE_REQUIRED(attr) (attr & PARAMETER_ATTR_ADDITIONAL_MASK)
+#define IS_HANDLE_ROUTINE_REQUIRED(attr) (attr & PARAMETER_ATTR_ROUTINE_REQ)
 #endif
 
 static struct json_object *tr98StaticNameTable = NULL;
@@ -804,7 +804,7 @@
 	pos = (tr98PathName + n);
 	while(*pos != '\0') {
 		if(*pos == '.') {
-			subpathname = (subpathname == true) ? false : true;
+			subpathname = (_isdigit(*(pos + 1)) && !subpathname) ? true : false;
 			pathName[pathNameLen++] = *pos;
 		}
 		else if(subpathname == true) {
@@ -818,6 +818,13 @@
 			}
 			else {
 				subpathname = false;
+				if(instNumStrLen && pathName[pathNameLen-1] == 'i') {
+					strcat(&pathName[pathNameLen-1], instNumStr);
+					pathNameLen += (instNumStrLen-1);
+					memset(instNumStr, 0, sizeof(instNumStr));
+					instNumStrLen = 0;
+				}
+				else
 				pathName[pathNameLen++] = *pos;
 			}
 		}
@@ -870,8 +877,8 @@
 
 	pos = (pathName + n);
 	while(*pos != '\0') {
-		if(*pos == 'i') {
-			sprintf(instNumStr, "%d", objIid->idx[level++]);
+		if(*pos == 'i' && (n != 0) && (*(pos - 1) == '.' && (*(pos + 1) == '.' || *(pos + 1) == '\0'))) {
+			sprintf(instNumStr, "%hhu", objIid->idx[level++]);
 			strcat(tr98PathName, instNumStr);
 			tr98PathNameLen += strlen(instNumStr);
 		}
@@ -897,11 +904,14 @@
 	char *c = NULL;
 	objIndex_t tr98ObjIid;
 	int n = 0, instNumStrLen = 0;
-	bool subpath = true;
+
+	//if(!notifyName || !tr98NotifyName)
 
 	zcfgLog(ZCFG_LOG_INFO, "%s\n", __FUNCTION__);
 
-	sscanf(notifyName, "%s_%s_%s", seqnumStr, idxstr, parmName);
+	sscanf(notifyName, "%[^_]_%[^_]_%s", seqnumStr, idxstr, parmName);
+
+	printf("%s: %s\n", __FUNCTION__, notifyName);
 
 	seqnum = atoi(seqnumStr);
 	if(!(IS_SEQNUM_RIGHT(seqnum)))
@@ -910,21 +920,19 @@
 	IID_INIT(tr98ObjIid);
 	c = (idxstr + n);
 	while(*c != '\0') {
-		if(*c == '.') {
-			subpath = (subpath == true) ? false : true;
-		}
-		else if(subpath == true) {
 			if(_isdigit(*c)) {
 				instNumStr[instNumStrLen++] = *c;
 				if((instNumStrLen+1) >= sizeof(instNumStr))
 					return ZCFG_NO_SUCH_OBJECT;
 			}
-			else {
-				return ZCFG_NO_SUCH_OBJECT;
-			}
+		else if(*c == '.' && instNumStrLen) {
+			int idx = 0;
+			tr98ObjIid.idx[tr98ObjIid.level++] = ((idx = atoi(instNumStr)) > 255) ? 255 : idx;
+			instNumStrLen = 0;
+			memset(instNumStr, 0, sizeof(instNumStr));
 		}
 		c = idxstr+(++n);
-		if(((subpath == false) && instNumStrLen) || ((*c == '\0') && instNumStrLen)) {
+		if((*c == '\0') && instNumStrLen) {
 			int idx = 0;
 			tr98ObjIid.idx[tr98ObjIid.level++] = ((idx = atoi(instNumStr)) > 255) ? 255 : idx;
 			instNumStrLen = 0;
@@ -944,6 +952,8 @@
 		strcat(tr98NotifyName, parmName);
 	}
 
+	zcfgLog(ZCFG_LOG_INFO, "%s: %s\n", __FUNCTION__, tr98NotifyName);
+
 	return ZCFG_SUCCESS;
 }
 #endif
@@ -1710,12 +1720,32 @@
 		return ZCFG_NO_SUCH_PARAMETER;
 	}
 
+	if(paramList->attr & PARAMETER_ATTR_DEFAULTATTR) {
+		if((paramList->attr & PARAMETER_ATTR_DENY_DISABLENOTIFY_REQUEST) && 
+							(paramList->attr & PARAMETER_ATTR_DENY_ACTIVENOTIFY_REQUEST))
+			return 1;
+
+		if((paramList->attr & PARAMETER_ATTR_DENY_DISABLENOTIFY_REQUEST) && 
+							(paramList->attr & PARAMETER_ATTR_DENY_PASSIVENOTIFY_REQUEST))
+			return 2;
+
+		if((paramList->attr & PARAMETER_ATTR_DENY_PASSIVENOTIFY_REQUEST) && 
+							(paramList->attr & PARAMETER_ATTR_DENY_ACTIVENOTIFY_REQUEST))
+			return 0;
+	}
+
 	IID_INIT(tr98ObjIid);
-	if(zcfgFe98NameToSeqnum((const char *)tr98ClassName, &seqnum, &tr98ObjIid) == ZCFG_SUCCESS) {
-		if(zcfgFeParmAttrQry(seqnum, &tr98ObjIid, name, &oid, &objIid, queriedParmName, &attr) == ZCFG_SUCCESS) {
+	if(zcfgFe98NameToSeqnum((const char *)tr98ObjName, &seqnum, &tr98ObjIid) == ZCFG_SUCCESS) {
+		if((ret = zcfgFeParmAttrQry(seqnum, &tr98ObjIid, name, &oid, &objIid, queriedParmName, &attr)) != ZCFG_SUCCESS) {
+			zcfgLog(ZCFG_LOG_INFO, "%s: parm attr query fail, %u %s\n", __FUNCTION__, seqnum, name);
+			return ret;
+		}
 			//confirm data if required
-			return attr;
+		if(attr & PARAMETER_ATTR_NOATTR) {
+			return ZCFG_NO_SUCH_PARAMETER;
 		}
+		printf("%s: attr 0x%x\n", __FUNCTION__, attr);
+		return PARAMETER_ATTR_NOTIFY_RETRIEVE(attr);
 	}
 
 	return ZCFG_NO_SUCH_PARAMETER;
@@ -1803,8 +1833,8 @@
 	setParmAttr->parmNotify.objnum = objnum;
 	memcpy(&setParmAttr->parmNotify.objIid, objIid, sizeof(objIndex_t));
 	setParmAttr->parmNotify.notify = (uint8_t)(attr & PARAMETER_ATTR_NOTIFY_MASK);
-	//setParmAttr->parmNotify.mask with attr
-	strcpy(setParmAttr->parmName, parmName);
+	setParmAttr->parmNotify.mask = (uint16_t)((attr & PARAMETER_ATTR_ADDITIONAL_MASK) >> 16);
+	strncpy(setParmAttr->parmName, parmName, MAX_PARMNAME_LEN);
 	setParmAttr->parmNotify.parmNameLen = strlen(setParmAttr->parmName) + 1;
 
 	setParmAttr->parmNotify.parmNameLen += ((n = (setParmAttr->parmNotify.parmNameLen % UNITSIZE)) > 0) ? (UNITSIZE - n) : 0;
@@ -1853,6 +1883,10 @@
 	if(!paramList->name) {
 		return ZCFG_NO_SUCH_PARAMETER;
 	}
+	else {
+		if(paramList->attr & PARAMETER_ATTR_DEFAULTATTR)
+			return ZCFG_SUCCESS;
+	}
 
 #if 0
 	objInfo_t *objInfo = NULL;
@@ -1870,12 +1904,18 @@
 #endif
 
 	IID_INIT(tr98ObjIid);
-	if(zcfgFe98NameToSeqnum((const char *)tr98ClassName, &seqnum, &tr98ObjIid) == ZCFG_SUCCESS) {
+	if(zcfgFe98NameToSeqnum((const char *)tr98ObjName, &seqnum, &tr98ObjIid) == ZCFG_SUCCESS) {
 		if((ret = zcfgFeParmAttrQry(seqnum, &tr98ObjIid, (const char *)name, &oid, &objIid, queriedParmName, &queriedAttr)) != ZCFG_SUCCESS) {
 			zcfgLog(ZCFG_LOG_INFO, "%s: tr98 objnum %u %s query fail\n", __FUNCTION__, seqnum, name);
-			return ret;
+			return ZCFG_NO_SUCH_PARAMETER;
 		}
 	}
+	else {
+
+		return ZCFG_NO_SUCH_PARAMETER;
+	}
+
+	queriedAttr = (queriedAttr & ~PARAMETER_ATTR_NOTIFY_MASK) | (notify & PARAMETER_ATTR_NOTIFY_MASK);
 
 	if(IS_HANDLE_ROUTINE_REQUIRED(queriedAttr)) {
 		struct json_object *multiJobj = NULL;
