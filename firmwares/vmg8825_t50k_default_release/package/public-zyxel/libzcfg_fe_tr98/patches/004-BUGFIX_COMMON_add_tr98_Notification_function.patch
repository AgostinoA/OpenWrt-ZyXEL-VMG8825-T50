Index: libzcfg_fe_tr98-1.0/firewall.c
===================================================================
--- libzcfg_fe_tr98-1.0.orig/firewall.c	2014-01-03 16:07:24.000000000 +0800
+++ libzcfg_fe_tr98-1.0/firewall.c	2014-03-14 13:36:58.664768300 +0800
@@ -114,6 +114,121 @@
 	return ZCFG_SUCCESS;
 }
 
+zcfgRet_t firewallObjNotify(char *tr98ObjName, char *tr181ParamName, struct json_object *tr181ParamVal, int handler, struct json_object **tr98NotifyInfo)
+{
+	bool found = false;
+	char tr98Notify[256] = "";
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+
+	if(*tr98NotifyInfo == NULL) {
+		*tr98NotifyInfo = json_object_new_object();
+	}
+
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		if(strcmp(tr181ParamName, paramList->name) == 0) {
+			found = true;
+			sprintf(tr98Notify, "%s.%s", tr98ObjName, paramList->name);
+			break;
+		}
+		paramList++;
+	}
+
+	if(found) {
+		json_object_object_add(*tr98NotifyInfo, tr98Notify, JSON_OBJ_COPY(tr181ParamVal));
+	}
+
+	return ZCFG_SUCCESS;
+}
+
+int firewallObjAttrGet(char *tr98FullPathName, int handler, char *paramName)
+{
+	char tr181Obj[128] = {0};
+	uint32_t  devInfoOid = 0;
+	objIndex_t devInfoIid;
+	int attrValue = ZCFG_NO_SUCH_PARAMETER;
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+
+	if(zcfgFe98To181MappingNameGet(tr98FullPathName, tr181Obj) != ZCFG_SUCCESS) {
+		return ZCFG_INVALID_OBJECT;
+	}
+	
+
+	IID_INIT(devInfoIid);
+	devInfoOid = zcfgFeObjNameToObjId(tr181Obj, &devInfoIid);
+		
+
+	/*fill up tr98 devInfo object*/
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		if(strcmp(paramList->name, paramName)){
+			paramList++;
+			continue;
+		}
+		
+		/*special case*/
+
+		attrValue = zcfgFeParamAttrGetByName(devInfoOid, paramList->name);
+		if(attrValue < 0 ) {
+			attrValue = 0;
+		}
+		break;
+	}
+	
+	return attrValue;
+}
+
+zcfgRet_t firewallObjAttrSet(char *tr98FullPathName, int handler, char *paramName, int newNotify, struct json_object *multiAttrJobj)
+{
+	zcfgRet_t ret;
+	char tr181Obj[128] = {0};
+	uint32_t  devInfoOid = 0;
+	objIndex_t devInfoIid;
+	int attrValue = 0;
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+	if(zcfgFe98To181MappingNameGet(tr98FullPathName, tr181Obj) != ZCFG_SUCCESS) {
+		return ZCFG_INVALID_OBJECT;
+	}
+	
+
+	IID_INIT(devInfoIid);
+	devInfoOid = zcfgFeObjNameToObjId(tr181Obj, &devInfoIid);
+
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		/*find the matched parameter*/
+		if(strcmp(paramList->name, paramName)){
+			paramList++;
+			continue;
+		}
+		/*special case*/
+		
+		attrValue = zcfgFeParamAttrGetByName(devInfoOid, paramList->name);
+		if(attrValue < 0) {
+			ret = ZCFG_INVALID_ARGUMENTS;
+			break;
+		}
+
+		/*Write new parameter attribute from tr98 object to tr181 objects*/
+		attrValue = zcfgFeNotifyAttrValSet(attrValue, newNotify);
+		ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, paramList->name, attrValue);
+		if( ret != ZCFG_SUCCESS){
+			zcfgLog(ZCFG_LOG_ERR, "%s(): set %d %s attribute fail\n", __FUNCTION__, devInfoOid, paramList->name);
+		}
+		break;
+
+	} /*Edn while*/
+	
+	return ret;
+}
+
+
 /* InternetGatewayDevice.Firewall.Level.i */
 zcfgRet_t firewallLevelObjGet(char *tr98FullPathName, int handler, struct json_object **tr98Jobj)
 {
@@ -254,6 +369,121 @@
 	return ret;
 }
 
+zcfgRet_t firewallLevelObjNotify(char *tr98ObjName, char *tr181ParamName, struct json_object *tr181ParamVal, int handler, struct json_object **tr98NotifyInfo)
+{
+	bool found = false;
+	char tr98Notify[256] = "";
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+
+	if(*tr98NotifyInfo == NULL) {
+		*tr98NotifyInfo = json_object_new_object();
+	}
+
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		if(strcmp(tr181ParamName, paramList->name) == 0) {
+			found = true;
+			sprintf(tr98Notify, "%s.%s", tr98ObjName, paramList->name);
+			break;
+		}
+		paramList++;
+	}
+
+	if(found) {
+		json_object_object_add(*tr98NotifyInfo, tr98Notify, JSON_OBJ_COPY(tr181ParamVal));
+	}
+
+	return ZCFG_SUCCESS;
+}
+
+int firewallLevelObjAttrGet(char *tr98FullPathName, int handler, char *paramName)
+{
+	char tr181Obj[128] = {0};
+	uint32_t  devInfoOid = 0;
+	objIndex_t devInfoIid;
+	int attrValue = ZCFG_NO_SUCH_PARAMETER;
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+
+	if(zcfgFe98To181MappingNameGet(tr98FullPathName, tr181Obj) != ZCFG_SUCCESS) {
+		return ZCFG_INVALID_OBJECT;
+	}
+	
+
+	IID_INIT(devInfoIid);
+	devInfoOid = zcfgFeObjNameToObjId(tr181Obj, &devInfoIid);
+		
+
+	/*fill up tr98 devInfo object*/
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		if(strcmp(paramList->name, paramName)){
+			paramList++;
+			continue;
+		}
+		
+		/*special case*/
+
+		attrValue = zcfgFeParamAttrGetByName(devInfoOid, paramList->name);
+		if(attrValue < 0 ) {
+			attrValue = 0;
+		}
+		break;
+	}
+	
+	return attrValue;
+}
+
+zcfgRet_t firewallLevelObjAttrSet(char *tr98FullPathName, int handler, char *paramName, int newNotify, struct json_object *multiAttrJobj)
+{
+	zcfgRet_t ret;
+	char tr181Obj[128] = {0};
+	uint32_t  devInfoOid = 0;
+	objIndex_t devInfoIid;
+	int attrValue = 0;
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+	if(zcfgFe98To181MappingNameGet(tr98FullPathName, tr181Obj) != ZCFG_SUCCESS) {
+		return ZCFG_INVALID_OBJECT;
+	}
+	
+
+	IID_INIT(devInfoIid);
+	devInfoOid = zcfgFeObjNameToObjId(tr181Obj, &devInfoIid);
+
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		/*find the matched parameter*/
+		if(strcmp(paramList->name, paramName)){
+			paramList++;
+			continue;
+		}
+		/*special case*/
+		
+		attrValue = zcfgFeParamAttrGetByName(devInfoOid, paramList->name);
+		if(attrValue < 0) {
+			ret = ZCFG_INVALID_ARGUMENTS;
+			break;
+		}
+
+		/*Write new parameter attribute from tr98 object to tr181 objects*/
+		attrValue = zcfgFeNotifyAttrValSet(attrValue, newNotify);
+		ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, paramList->name, attrValue);
+		if( ret != ZCFG_SUCCESS){
+			zcfgLog(ZCFG_LOG_ERR, "%s(): set %d %s attribute fail\n", __FUNCTION__, devInfoOid, paramList->name);
+		}
+		break;
+
+	} /*Edn while*/
+	
+	return ret;
+}
+
+
 /* InternetGatewayDevice.Firewall.Chain.i */
 zcfgRet_t firewallChainObjGet(char *tr98FullPathName, int handler, struct json_object **tr98Jobj)
 {
@@ -397,6 +627,120 @@
 	return ret;
 }
 
+zcfgRet_t firewallChainObjNotify(char *tr98ObjName, char *tr181ParamName, struct json_object *tr181ParamVal, int handler, struct json_object **tr98NotifyInfo)
+{
+	bool found = false;
+	char tr98Notify[256] = "";
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+
+	if(*tr98NotifyInfo == NULL) {
+		*tr98NotifyInfo = json_object_new_object();
+	}
+
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		if(strcmp(tr181ParamName, paramList->name) == 0) {
+			found = true;
+			sprintf(tr98Notify, "%s.%s", tr98ObjName, paramList->name);
+			break;
+		}
+		paramList++;
+	}
+
+	if(found) {
+		json_object_object_add(*tr98NotifyInfo, tr98Notify, JSON_OBJ_COPY(tr181ParamVal));
+	}
+
+	return ZCFG_SUCCESS;
+}
+
+int firewallChainObjAttrGet(char *tr98FullPathName, int handler, char *paramName)
+{
+	char tr181Obj[128] = {0};
+	uint32_t  devInfoOid = 0;
+	objIndex_t devInfoIid;
+	int attrValue = ZCFG_NO_SUCH_PARAMETER;
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+
+	if(zcfgFe98To181MappingNameGet(tr98FullPathName, tr181Obj) != ZCFG_SUCCESS) {
+		return ZCFG_INVALID_OBJECT;
+	}
+	
+
+	IID_INIT(devInfoIid);
+	devInfoOid = zcfgFeObjNameToObjId(tr181Obj, &devInfoIid);
+		
+
+	/*fill up tr98 devInfo object*/
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		if(strcmp(paramList->name, paramName)){
+			paramList++;
+			continue;
+		}
+		
+		/*special case*/
+
+		attrValue = zcfgFeParamAttrGetByName(devInfoOid, paramList->name);
+		if(attrValue < 0 ) {
+			attrValue = 0;
+		}
+		break;
+	}
+	
+	return attrValue;
+}
+
+zcfgRet_t firewallChainObjAttrSet(char *tr98FullPathName, int handler, char *paramName, int newNotify, struct json_object *multiAttrJobj)
+{
+	zcfgRet_t ret;
+	char tr181Obj[128] = {0};
+	uint32_t  devInfoOid = 0;
+	objIndex_t devInfoIid;
+	int attrValue = 0;
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+	if(zcfgFe98To181MappingNameGet(tr98FullPathName, tr181Obj) != ZCFG_SUCCESS) {
+		return ZCFG_INVALID_OBJECT;
+	}
+	
+
+	IID_INIT(devInfoIid);
+	devInfoOid = zcfgFeObjNameToObjId(tr181Obj, &devInfoIid);
+
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		/*find the matched parameter*/
+		if(strcmp(paramList->name, paramName)){
+			paramList++;
+			continue;
+		}
+		/*special case*/
+		
+		attrValue = zcfgFeParamAttrGetByName(devInfoOid, paramList->name);
+		if(attrValue < 0) {
+			ret = ZCFG_INVALID_ARGUMENTS;
+			break;
+		}
+
+		/*Write new parameter attribute from tr98 object to tr181 objects*/
+		attrValue = zcfgFeNotifyAttrValSet(attrValue, newNotify);
+		ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, paramList->name, attrValue);
+		if( ret != ZCFG_SUCCESS){
+			zcfgLog(ZCFG_LOG_ERR, "%s(): set %d %s attribute fail\n", __FUNCTION__, devInfoOid, paramList->name);
+		}
+		break;
+
+	} /*Edn while*/
+	
+	return ret;
+}
+
 
 /* InternetGatewayDevice.Firewall.Chain.i.Rule.i */
 zcfgRet_t firewallRuleObjGet(char *tr98FullPathName, int handler, struct json_object **tr98Jobj)
@@ -543,3 +887,118 @@
 	return ret;
 }
 
+zcfgRet_t firewallRuleObjNotify(char *tr98ObjName, char *tr181ParamName, struct json_object *tr181ParamVal, int handler, struct json_object **tr98NotifyInfo)
+{
+	bool found = false;
+	char tr98Notify[256] = "";
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+
+	if(*tr98NotifyInfo == NULL) {
+		*tr98NotifyInfo = json_object_new_object();
+	}
+
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		if(strcmp(tr181ParamName, paramList->name) == 0) {
+			found = true;
+			sprintf(tr98Notify, "%s.%s", tr98ObjName, paramList->name);
+			break;
+		}
+		paramList++;
+	}
+
+	if(found) {
+		json_object_object_add(*tr98NotifyInfo, tr98Notify, JSON_OBJ_COPY(tr181ParamVal));
+	}
+
+	return ZCFG_SUCCESS;
+}
+
+int firewallRuleObjAttrGet(char *tr98FullPathName, int handler, char *paramName)
+{
+	char tr181Obj[128] = {0};
+	uint32_t  devInfoOid = 0;
+	objIndex_t devInfoIid;
+	int attrValue = ZCFG_NO_SUCH_PARAMETER;
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+
+	if(zcfgFe98To181MappingNameGet(tr98FullPathName, tr181Obj) != ZCFG_SUCCESS) {
+		return ZCFG_INVALID_OBJECT;
+	}
+	
+
+	IID_INIT(devInfoIid);
+	devInfoOid = zcfgFeObjNameToObjId(tr181Obj, &devInfoIid);
+		
+
+	/*fill up tr98 devInfo object*/
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		if(strcmp(paramList->name, paramName)){
+			paramList++;
+			continue;
+		}
+		
+		/*special case*/
+
+		attrValue = zcfgFeParamAttrGetByName(devInfoOid, paramList->name);
+		if(attrValue < 0 ) {
+			attrValue = 0;
+		}
+		break;
+	}
+	
+	return attrValue;
+}
+
+zcfgRet_t firewallRuleObjAttrSet(char *tr98FullPathName, int handler, char *paramName, int newNotify, struct json_object *multiAttrJobj)
+{
+	zcfgRet_t ret;
+	char tr181Obj[128] = {0};
+	uint32_t  devInfoOid = 0;
+	objIndex_t devInfoIid;
+	int attrValue = 0;
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+	if(zcfgFe98To181MappingNameGet(tr98FullPathName, tr181Obj) != ZCFG_SUCCESS) {
+		return ZCFG_INVALID_OBJECT;
+	}
+	
+
+	IID_INIT(devInfoIid);
+	devInfoOid = zcfgFeObjNameToObjId(tr181Obj, &devInfoIid);
+
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		/*find the matched parameter*/
+		if(strcmp(paramList->name, paramName)){
+			paramList++;
+			continue;
+		}
+		/*special case*/
+		
+		attrValue = zcfgFeParamAttrGetByName(devInfoOid, paramList->name);
+		if(attrValue < 0) {
+			ret = ZCFG_INVALID_ARGUMENTS;
+			break;
+		}
+
+		/*Write new parameter attribute from tr98 object to tr181 objects*/
+		attrValue = zcfgFeNotifyAttrValSet(attrValue, newNotify);
+		ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, paramList->name, attrValue);
+		if( ret != ZCFG_SUCCESS){
+			zcfgLog(ZCFG_LOG_ERR, "%s(): set %d %s attribute fail\n", __FUNCTION__, devInfoOid, paramList->name);
+		}
+		break;
+
+	} /*Edn while*/
+	
+	return ret;
+}
+
+
Index: libzcfg_fe_tr98-1.0/firewall.h
===================================================================
--- libzcfg_fe_tr98-1.0.orig/firewall.h	2014-01-03 16:07:24.000000000 +0800
+++ libzcfg_fe_tr98-1.0/firewall.h	2014-03-14 13:37:14.052149500 +0800
@@ -7,19 +7,31 @@
 /*Handler Function*/
 extern zcfgRet_t firewallObjGet(char *, int, struct json_object **);
 extern zcfgRet_t firewallObjSet(char *, int , struct json_object *, struct json_object *);
+extern zcfgRet_t firewallObjNotify(char *, char *, struct json_object *, int, struct json_object **);
+extern int firewallObjAttrGet(char *, int, char *);
+extern zcfgRet_t firewallObjAttrSet(char *, int, char *, int , struct json_object *);
 
 extern zcfgRet_t firewallLevelObjGet(char *, int, struct json_object **);
 extern zcfgRet_t firewallLevelObjSet(char *, int , struct json_object *, struct json_object *);
 extern zcfgRet_t firewallLevelObjAdd(char *, int *);
 extern zcfgRet_t firewallLevelObjDel(char *);
+extern zcfgRet_t firewallLevelObjNotify(char *, char *, struct json_object *, int, struct json_object **);
+extern int firewallLevelObjAttrGet(char *, int, char *);
+extern zcfgRet_t firewallLevelObjAttrSet(char *, int, char *, int , struct json_object *);
 
 extern zcfgRet_t firewallChainObjGet(char *, int, struct json_object **);
 extern zcfgRet_t firewallChainObjSet(char *, int , struct json_object *, struct json_object *);
 extern zcfgRet_t firewallChainObjAdd(char *, int *);
 extern zcfgRet_t firewallChainObjDel(char *);
+extern zcfgRet_t firewallChainObjNotify(char *, char *, struct json_object *, int, struct json_object **);
+extern int firewallChainObjAttrGet(char *, int, char *);
+extern zcfgRet_t firewallChainObjAttrSet(char *, int, char *, int , struct json_object *);
 
 extern zcfgRet_t firewallRuleObjGet(char *, int, struct json_object **);
 extern zcfgRet_t firewallRuleObjSet(char *, int , struct json_object *, struct json_object *);
 extern zcfgRet_t firewallRuleObjAdd(char *, int *);
 extern zcfgRet_t firewallRuleObjDel(char *);
+extern zcfgRet_t firewallRuleObjNotify(char *, char *, struct json_object *, int, struct json_object **);
+extern int firewallRuleObjAttrGet(char *, int, char *);
+extern zcfgRet_t firewallRuleObjAttrSet(char *, int, char *, int , struct json_object *);
 
Index: libzcfg_fe_tr98-1.0/l2bridge.c
===================================================================
--- libzcfg_fe_tr98-1.0.orig/l2bridge.c	2014-03-14 14:13:48.980131925 +0800
+++ libzcfg_fe_tr98-1.0/l2bridge.c	2014-03-14 13:39:05.502372400 +0800
@@ -77,6 +77,163 @@
 	return ZCFG_SUCCESS;
 }
 
+zcfgRet_t l2BridingObjNotify(char *tr98ObjName, char *tr181ParamName, struct json_object *tr181ParamVal, int handler, struct json_object **tr98NotifyInfo)
+{
+	bool found = false;
+	char tr98Notify[256] = "";
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+
+	if(*tr98NotifyInfo == NULL) {
+		*tr98NotifyInfo = json_object_new_object();
+	}
+
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		if(strcmp(tr181ParamName, paramList->name) == 0) {
+			found = true;
+			sprintf(tr98Notify, "%s.%s", tr98ObjName, paramList->name);
+			break;
+		}
+		
+		if(strcmp(tr181ParamName, "X_ZYXEL_MaxMarkingEntries") == 0) {
+			found = true;
+			sprintf(tr98Notify, "%s.%s", tr98ObjName, "MaxMarkingEntries");
+			break;
+		}
+
+		if(strcmp(tr181ParamName, "X_ZYXEL_MarkingNumberOfEntries") == 0) {
+			found = true;
+			sprintf(tr98Notify, "%s.%s", tr98ObjName, "MarkingNumberOfEntries");
+			break;
+		}
+		
+		if(strcmp(tr181ParamName, "X_ZYXEL_AvailableInterfaceNumberOfEntries") == 0) {
+			found = true;
+			sprintf(tr98Notify, "%s.%s", tr98ObjName, "AvailableInterfaceNumberOfEntries");
+			break;
+		}
+		
+		paramList++;
+	}
+
+	if(found) {
+		json_object_object_add(*tr98NotifyInfo, tr98Notify, JSON_OBJ_COPY(tr181ParamVal));
+	}
+
+	return ZCFG_SUCCESS;
+}
+
+int l2BridingObjAttrGet(char *tr98FullPathName, int handler, char *paramName)
+{
+	char tr181Obj[128] = {0};
+	uint32_t  devInfoOid = 0;
+	objIndex_t devInfoIid;
+	int attrValue = ZCFG_NO_SUCH_PARAMETER;
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+
+	if(zcfgFe98To181MappingNameGet(tr98FullPathName, tr181Obj) != ZCFG_SUCCESS) {
+		return ZCFG_INVALID_OBJECT;
+	}
+	
+
+	IID_INIT(devInfoIid);
+	devInfoOid = zcfgFeObjNameToObjId(tr181Obj, &devInfoIid);
+		
+
+	/*fill up tr98 devInfo object*/
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		if(strcmp(paramList->name, paramName)){
+			paramList++;
+			continue;
+		}
+		
+		/*special case*/
+		if(strcmp(paramList->name, "MaxMarkingEntries") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "X_ZYXEL_MaxMarkingEntries");
+		}else if(strcmp(paramList->name, "MarkingNumberOfEntries") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "X_ZYXEL_MarkingNumberOfEntries");
+		}else if(strcmp(paramList->name, "AvailableInterfaceNumberOfEntries") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "X_ZYXEL_AvailableInterfaceNumberOfEntries");
+		}else{
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, paramList->name);
+		}
+		
+		if(attrValue < 0 ) {
+			attrValue = 0;
+		}
+		break;
+	}
+	
+	return attrValue;
+}
+
+zcfgRet_t l2BridingObjAttrSet(char *tr98FullPathName, int handler, char *paramName, int newNotify, struct json_object *multiAttrJobj)
+{
+	zcfgRet_t ret;
+	char tr181Obj[128] = {0};
+	uint32_t  devInfoOid = 0;
+	objIndex_t devInfoIid;
+	int attrValue = 0;
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+	if(zcfgFe98To181MappingNameGet(tr98FullPathName, tr181Obj) != ZCFG_SUCCESS) {
+		return ZCFG_INVALID_OBJECT;
+	}
+	
+
+	IID_INIT(devInfoIid);
+	devInfoOid = zcfgFeObjNameToObjId(tr181Obj, &devInfoIid);
+
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		/*find the matched parameter*/
+		if(strcmp(paramList->name, paramName)){
+			paramList++;
+			continue;
+		}
+		/*special case*/
+		if(strcmp(paramList->name, "MaxMarkingEntries") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "X_ZYXEL_MaxMarkingEntries");
+		}else if(strcmp(paramList->name, "MarkingNumberOfEntries") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "X_ZYXEL_MarkingNumberOfEntries");
+		}else if(strcmp(paramList->name, "AvailableInterfaceNumberOfEntries") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "X_ZYXEL_AvailableInterfaceNumberOfEntries");
+		}else{
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, paramList->name);
+		}
+		if(attrValue < 0) {
+			ret = ZCFG_INVALID_ARGUMENTS;
+			break;
+		}
+
+		/*Write new parameter attribute from tr98 object to tr181 objects*/
+		attrValue = zcfgFeNotifyAttrValSet(attrValue, newNotify);
+		if(strcmp(paramList->name, "MaxMarkingEntries") == 0){
+			ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, "X_ZYXEL_MaxMarkingEntries", attrValue);
+		}else if(strcmp(paramList->name, "MarkingNumberOfEntries") == 0){
+			ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, "X_ZYXEL_MarkingNumberOfEntries", attrValue);
+		}else if(strcmp(paramList->name, "AvailableInterfaceNumberOfEntries") == 0){
+			ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, "X_ZYXEL_AvailableInterfaceNumberOfEntries", attrValue);
+		}else{
+			ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, paramList->name, attrValue);
+		}
+		
+		if( ret != ZCFG_SUCCESS){
+			zcfgLog(ZCFG_LOG_ERR, "%s(): set %d %s attribute fail\n", __FUNCTION__, devInfoOid, paramList->name);
+		}
+		break;
+
+	} /*Edn while*/
+	
+	return ret;
+}
+
 
 /*  TR98 Object Name : InternetGatewayDevice.Layer2Bridging.Bridge.i
 
@@ -353,6 +510,187 @@
 	return ZCFG_SUCCESS;
 }
 
+zcfgRet_t l2BrObjNotify(char *tr98ObjName, char *tr181ParamName, struct json_object *tr181ParamVal, int handler, struct json_object **tr98NotifyInfo)
+{
+	bool found = false;
+	char tr98Notify[256] = "";
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+
+	if(*tr98NotifyInfo == NULL) {
+		*tr98NotifyInfo = json_object_new_object();
+	}
+
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		if(strcmp(tr181ParamName, paramList->name) == 0) {
+			found = true;
+			sprintf(tr98Notify, "%s.%s", tr98ObjName, paramList->name);
+			break;
+		}
+		
+		if(strcmp(tr181ParamName, "Standard") == 0) {
+			found = true;
+			sprintf(tr98Notify, "%s.%s", tr98ObjName, "BridgeStandard");
+			break;
+		}
+
+		if(strcmp(tr181ParamName, "Enable") == 0) {
+			found = true;
+			sprintf(tr98Notify, "%s.%s", tr98ObjName, "BridgeEnable");
+			break;
+		}
+		
+		if(strcmp(tr181ParamName, "Status") == 0) {
+			found = true;
+			sprintf(tr98Notify, "%s.%s", tr98ObjName, "BridgeStatus");
+			break;
+		}
+		
+		if(strcmp(tr181ParamName, "X_ZYXEL_BridgeName") == 0) {
+			found = true;
+			sprintf(tr98Notify, "%s.%s", tr98ObjName, "BridgeName");
+			break;
+		}
+		
+		if(strcmp(tr181ParamName, "X_ZYXEL_VLANID") == 0) {
+			found = true;
+			sprintf(tr98Notify, "%s.%s", tr98ObjName, "VLANID");
+			break;
+		}
+		
+		paramList++;
+	}
+
+	if(found) {
+		json_object_object_add(*tr98NotifyInfo, tr98Notify, JSON_OBJ_COPY(tr181ParamVal));
+	}
+
+	return ZCFG_SUCCESS;
+}
+
+int l2BrObjAttrGet(char *tr98FullPathName, int handler, char *paramName)
+{
+	char tr181Obj[128] = {0};
+	uint32_t  devInfoOid = 0;
+	objIndex_t devInfoIid;
+	int attrValue = ZCFG_NO_SUCH_PARAMETER;
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+
+	if(zcfgFe98To181MappingNameGet(tr98FullPathName, tr181Obj) != ZCFG_SUCCESS) {
+		return ZCFG_INVALID_OBJECT;
+	}
+	
+
+	IID_INIT(devInfoIid);
+	devInfoOid = zcfgFeObjNameToObjId(tr181Obj, &devInfoIid);
+		
+
+	/*fill up tr98 devInfo object*/
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		if(strcmp(paramList->name, paramName)){
+			paramList++;
+			continue;
+		}
+		
+		/*special case*/
+		if(strcmp(paramList->name, "BridgeStandard") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "Standard");
+		}else if(strcmp(paramList->name, "BridgeEnable") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "Enable");
+		}else if(strcmp(paramList->name, "BridgeStatus") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "Status");
+		}else if(strcmp(paramList->name, "BridgeName") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "X_ZYXEL_BridgeName");
+		}else if(strcmp(paramList->name, "VLANID") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "X_ZYXEL_VLANID");
+		}else{
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, paramList->name);
+		}
+		
+		if(attrValue < 0 ) {
+			attrValue = 0;
+		}
+		break;
+	}
+	
+	return attrValue;
+}
+
+zcfgRet_t l2BrObjAttrSet(char *tr98FullPathName, int handler, char *paramName, int newNotify, struct json_object *multiAttrJobj)
+{
+	zcfgRet_t ret;
+	char tr181Obj[128] = {0};
+	uint32_t  devInfoOid = 0;
+	objIndex_t devInfoIid;
+	int attrValue = 0;
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+	if(zcfgFe98To181MappingNameGet(tr98FullPathName, tr181Obj) != ZCFG_SUCCESS) {
+		return ZCFG_INVALID_OBJECT;
+	}
+	
+
+	IID_INIT(devInfoIid);
+	devInfoOid = zcfgFeObjNameToObjId(tr181Obj, &devInfoIid);
+
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		/*find the matched parameter*/
+		if(strcmp(paramList->name, paramName)){
+			paramList++;
+			continue;
+		}
+		/*special case*/
+		if(strcmp(paramList->name, "BridgeStandard") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "Standard");
+		}else if(strcmp(paramList->name, "BridgeEnable") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "Enable");
+		}else if(strcmp(paramList->name, "BridgeStatus") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "Status");
+		}else if(strcmp(paramList->name, "BridgeName") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "X_ZYXEL_BridgeName");
+		}else if(strcmp(paramList->name, "VLANID") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "X_ZYXEL_VLANID");
+		}else{
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, paramList->name);
+		}
+		
+		if(attrValue < 0) {
+			ret = ZCFG_INVALID_ARGUMENTS;
+			break;
+		}
+
+		/*Write new parameter attribute from tr98 object to tr181 objects*/
+		attrValue = zcfgFeNotifyAttrValSet(attrValue, newNotify);
+		if(strcmp(paramList->name, "BridgeStandard") == 0){
+			ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, "Standard", attrValue);
+		}else if(strcmp(paramList->name, "BridgeEnable") == 0){
+			ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, "Enable", attrValue);
+		}else if(strcmp(paramList->name, "BridgeStatus") == 0){
+			ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, "Status", attrValue);
+		}else if(strcmp(paramList->name, "BridgeName") == 0){
+			ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, "X_ZYXEL_BridgeName", attrValue);
+		}else if(strcmp(paramList->name, "VLANID") == 0){
+			ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, "X_ZYXEL_VLANID", attrValue);
+		}else{
+			ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, paramList->name, attrValue);
+		}
+		
+		if( ret != ZCFG_SUCCESS){
+			zcfgLog(ZCFG_LOG_ERR, "%s(): set %d %s attribute fail\n", __FUNCTION__, devInfoOid, paramList->name);
+		}
+		break;
+
+	} /*Edn while*/
+	
+	return ret;
+}
 
 /*  TR98 Object Name : InternetGatewayDevice.Layer2Bridging.Filter.i
 
@@ -654,6 +992,175 @@
 	return ZCFG_SUCCESS;
 }
 
+zcfgRet_t l2BrFilterObjNotify(char *tr98ObjName, char *tr181ParamName, struct json_object *tr181ParamVal, int handler, struct json_object **tr98NotifyInfo)
+{
+	bool found = false;
+	char tr98Notify[256] = "";
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+
+	if(*tr98NotifyInfo == NULL) {
+		*tr98NotifyInfo = json_object_new_object();
+	}
+
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		if(strcmp(tr181ParamName, paramList->name) == 0) {
+			found = true;
+			sprintf(tr98Notify, "%s.%s", tr98ObjName, paramList->name);
+			break;
+		}
+		
+		if(strcmp(tr181ParamName, "Bridge") == 0) {
+			found = true;
+			sprintf(tr98Notify, "%s.%s", tr98ObjName, "FilterBridgeReference");
+			break;
+		}
+
+		if(strcmp(tr181ParamName, "Enable") == 0) {
+			found = true;
+			sprintf(tr98Notify, "%s.%s", tr98ObjName, "FileterEnable");
+			break;
+		}
+		
+		if(strcmp(tr181ParamName, "Status") == 0) {
+			found = true;
+			sprintf(tr98Notify, "%s.%s", tr98ObjName, "FilterStatus");
+			break;
+		}
+		
+		if(strcmp(tr181ParamName, "Interface") == 0) {
+			found = true;
+			sprintf(tr98Notify, "%s.%s", tr98ObjName, "FilterInterface");
+			break;
+		}
+		
+		paramList++;
+	}
+
+	if(found) {
+		json_object_object_add(*tr98NotifyInfo, tr98Notify, JSON_OBJ_COPY(tr181ParamVal));
+	}
+
+	return ZCFG_SUCCESS;
+}
+
+int l2BrFilterObjAttrGet(char *tr98FullPathName, int handler, char *paramName)
+{
+	char tr181Obj[128] = {0};
+	uint32_t  devInfoOid = 0;
+	objIndex_t devInfoIid;
+	int attrValue = ZCFG_NO_SUCH_PARAMETER;
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+
+	if(zcfgFe98To181MappingNameGet(tr98FullPathName, tr181Obj) != ZCFG_SUCCESS) {
+		return ZCFG_INVALID_OBJECT;
+	}
+	
+
+	IID_INIT(devInfoIid);
+	devInfoOid = zcfgFeObjNameToObjId(tr181Obj, &devInfoIid);
+		
+
+	/*fill up tr98 devInfo object*/
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		if(strcmp(paramList->name, paramName)){
+			paramList++;
+			continue;
+		}
+		
+		/*special case*/
+		if(strcmp(paramList->name, "FilterBridgeReference") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "Bridge");
+		}else if(strcmp(paramList->name, "FileterEnable") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "Enable");
+		}else if(strcmp(paramList->name, "FilterStatus") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "Status");
+		}else if(strcmp(paramList->name, "FilterInterface") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "Interface");
+		}else{
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, paramList->name);
+		}
+		
+		if(attrValue < 0 ) {
+			attrValue = 0;
+		}
+		break;
+	}
+	
+	return attrValue;
+}
+
+zcfgRet_t l2BrFilterObjAttrSet(char *tr98FullPathName, int handler, char *paramName, int newNotify, struct json_object *multiAttrJobj)
+{
+	zcfgRet_t ret;
+	char tr181Obj[128] = {0};
+	uint32_t  devInfoOid = 0;
+	objIndex_t devInfoIid;
+	int attrValue = 0;
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+	if(zcfgFe98To181MappingNameGet(tr98FullPathName, tr181Obj) != ZCFG_SUCCESS) {
+		return ZCFG_INVALID_OBJECT;
+	}
+	
+
+	IID_INIT(devInfoIid);
+	devInfoOid = zcfgFeObjNameToObjId(tr181Obj, &devInfoIid);
+
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		/*find the matched parameter*/
+		if(strcmp(paramList->name, paramName)){
+			paramList++;
+			continue;
+		}
+		/*special case*/
+		if(strcmp(paramList->name, "FilterBridgeReference") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "Bridge");
+		}else if(strcmp(paramList->name, "FileterEnable") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "Enable");
+		}else if(strcmp(paramList->name, "FilterStatus") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "Status");
+		}else if(strcmp(paramList->name, "FilterInterface") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "Interface");
+		}else{
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, paramList->name);
+		}
+		
+		if(attrValue < 0) {
+			ret = ZCFG_INVALID_ARGUMENTS;
+			break;
+		}
+
+		/*Write new parameter attribute from tr98 object to tr181 objects*/
+		attrValue = zcfgFeNotifyAttrValSet(attrValue, newNotify);
+		if(strcmp(paramList->name, "FilterBridgeReference") == 0){
+			ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, "Bridge", attrValue);
+		}else if(strcmp(paramList->name, "FileterEnable") == 0){
+			ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, "Enable", attrValue);
+		}else if(strcmp(paramList->name, "FilterStatus") == 0){
+			ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, "Status", attrValue);
+		}else if(strcmp(paramList->name, "FilterInterface") == 0){
+			ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, "Interface", attrValue);
+		}else{
+			ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, paramList->name, attrValue);
+		}
+		
+		if( ret != ZCFG_SUCCESS){
+			zcfgLog(ZCFG_LOG_ERR, "%s(): set %d %s attribute fail\n", __FUNCTION__, devInfoOid, paramList->name);
+		}
+		break;
+
+	} /*Edn while*/
+	
+	return ret;
+}
 
 /*  TR98 Object Name : InternetGatewayDevice.Layer2Bridging.AvailableInterface.i
 
@@ -721,6 +1228,174 @@
 	return ZCFG_SUCCESS;
 }
 
+zcfgRet_t l2BrAvailableIntfObjNotify(char *tr98ObjName, char *tr181ParamName, struct json_object *tr181ParamVal, int handler, struct json_object **tr98NotifyInfo)
+{
+	bool found = false;
+	char tr98Notify[256] = "";
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+
+	if(*tr98NotifyInfo == NULL) {
+		*tr98NotifyInfo = json_object_new_object();
+	}
+
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		if(strcmp(tr181ParamName, paramList->name) == 0) {
+			found = true;
+			sprintf(tr98Notify, "%s.%s", tr98ObjName, paramList->name);
+			break;
+		}
+		
+		if(strcmp(tr181ParamName, "LowerLayers") == 0) {
+			found = true;
+			sprintf(tr98Notify, "%s.%s", tr98ObjName, "InterfaceReference");
+			break;
+		}
+
+		if(strcmp(tr181ParamName, "X_ZYXEL_AvailableInterfaceKey") == 0) {
+			found = true;
+			sprintf(tr98Notify, "%s.%s", tr98ObjName, "AvailableInterfaceKey");
+			break;
+		}
+		
+		if(strcmp(tr181ParamName, "X_ZYXEL_InterfaceType") == 0) {
+			found = true;
+			sprintf(tr98Notify, "%s.%s", tr98ObjName, "InterfaceType");
+			break;
+		}
+		
+		paramList++;
+	}
+
+	if(found) {
+		json_object_object_add(*tr98NotifyInfo, tr98Notify, JSON_OBJ_COPY(tr181ParamVal));
+	}
+
+	return ZCFG_SUCCESS;
+}
+
+int l2BrAvailableIntfObjAttrGet(char *tr98FullPathName, int handler, char *paramName)
+{
+	char tr181Obj[128] = {0};
+	uint32_t  devInfoOid = 0;
+	objIndex_t devInfoIid;
+	int attrValue = ZCFG_NO_SUCH_PARAMETER;
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+
+	if(zcfgFe98To181MappingNameGet(tr98FullPathName, tr181Obj) != ZCFG_SUCCESS) {
+		return ZCFG_INVALID_OBJECT;
+	}
+	
+
+	IID_INIT(devInfoIid);
+	devInfoOid = zcfgFeObjNameToObjId(tr181Obj, &devInfoIid);
+		
+
+	/*fill up tr98 devInfo object*/
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		if(strcmp(paramList->name, paramName)){
+			paramList++;
+			continue;
+		}
+		
+		/*special case*/
+		if(strcmp(paramList->name, "InterfaceReference") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "LowerLayers");
+		}else if(strcmp(paramList->name, "AvailableInterfaceKey") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "X_ZYXEL_AvailableInterfaceKey");
+		}else if(strcmp(paramList->name, "InterfaceType") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "X_ZYXEL_InterfaceType");
+		}else{
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, paramList->name);
+		}
+		
+		if(attrValue < 0 ) {
+			attrValue = 0;
+		}
+		break;
+	}
+	
+	return attrValue;
+}
+
+zcfgRet_t l2BrAvailableIntfObjAttrSet(char *tr98FullPathName, int handler, char *paramName, int newNotify, struct json_object *multiAttrJobj)
+{
+	zcfgRet_t ret;
+	char tr181Obj[128] = {0};
+	uint32_t  devInfoOid = 0;
+	objIndex_t devInfoIid;
+	int attrValue = 0;
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+	if(zcfgFe98To181MappingNameGet(tr98FullPathName, tr181Obj) != ZCFG_SUCCESS) {
+		return ZCFG_INVALID_OBJECT;
+	}
+	
+
+	IID_INIT(devInfoIid);
+	devInfoOid = zcfgFeObjNameToObjId(tr181Obj, &devInfoIid);
+
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		/*find the matched parameter*/
+		if(strcmp(paramList->name, paramName)){
+			paramList++;
+			continue;
+		}
+		/*special case*/
+		if(strcmp(paramList->name, "InterfaceReference") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "LowerLayers");
+		}else if(strcmp(paramList->name, "AvailableInterfaceKey") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "X_ZYXEL_AvailableInterfaceKey");
+		}else if(strcmp(paramList->name, "InterfaceType") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "X_ZYXEL_InterfaceType");
+		}else{
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, paramList->name);
+		}
+		
+		if(attrValue < 0) {
+			ret = ZCFG_INVALID_ARGUMENTS;
+			break;
+		}
+
+		/*Write new parameter attribute from tr98 object to tr181 objects*/
+		attrValue = zcfgFeNotifyAttrValSet(attrValue, newNotify);
+		if(strcmp(paramList->name, "BridgeStandard") == 0){
+			ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, "Standard", attrValue);
+		}else if(strcmp(paramList->name, "BridgeEnable") == 0){
+			ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, "Enable", attrValue);
+		}else if(strcmp(paramList->name, "BridgeStatus") == 0){
+			ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, "Status", attrValue);
+		}else{
+			ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, paramList->name, attrValue);
+		}
+		
+		if(strcmp(paramList->name, "InterfaceReference") == 0){
+			ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, "LowerLayers", attrValue);
+		}else if(strcmp(paramList->name, "AvailableInterfaceKey") == 0){
+			ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, "X_ZYXEL_AvailableInterfaceKey", attrValue);
+		}else if(strcmp(paramList->name, "InterfaceType") == 0){
+			ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, "X_ZYXEL_InterfaceType", attrValue);
+		}else{
+			ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, paramList->name, attrValue);
+		}
+		if( ret != ZCFG_SUCCESS){
+			zcfgLog(ZCFG_LOG_ERR, "%s(): set %d %s attribute fail\n", __FUNCTION__, devInfoOid, paramList->name);
+		}
+		break;
+
+	} /*Edn while*/
+	
+	return ret;
+}
+
+
 zcfgRet_t l2BrVlanObjGet(char *tr98FullPathName, int handler, struct json_object **tr98Jobj)
 {
 	zcfgRet_t ret;
@@ -892,4 +1567,149 @@
 	return ZCFG_SUCCESS;
 }
 
+zcfgRet_t l2BrVlanObjNotify(char *tr98ObjName, char *tr181ParamName, struct json_object *tr181ParamVal, int handler, struct json_object **tr98NotifyInfo)
+{
+	bool found = false;
+	char tr98Notify[256] = "";
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+
+	if(*tr98NotifyInfo == NULL) {
+		*tr98NotifyInfo = json_object_new_object();
+	}
+
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		if(strcmp(tr181ParamName, paramList->name) == 0) {
+			found = true;
+			sprintf(tr98Notify, "%s.%s", tr98ObjName, paramList->name);
+			break;
+		}
+		
+		if(strcmp(tr181ParamName, "Enable") == 0) {
+			found = true;
+			sprintf(tr98Notify, "%s.%s", tr98ObjName, "VLANEnable");
+			break;
+		}
+
+		if(strcmp(tr181ParamName, "X_ZYXEL_VLANName") == 0) {
+			found = true;
+			sprintf(tr98Notify, "%s.%s", tr98ObjName, "VLANName");
+			break;
+		}
+		
+		paramList++;
+	}
+
+	if(found) {
+		json_object_object_add(*tr98NotifyInfo, tr98Notify, JSON_OBJ_COPY(tr181ParamVal));
+	}
+
+	return ZCFG_SUCCESS;
+}
+
+int l2BrVlanObjAttrGet(char *tr98FullPathName, int handler, char *paramName)
+{
+	char tr181Obj[128] = {0};
+	uint32_t  devInfoOid = 0;
+	objIndex_t devInfoIid;
+	int attrValue = ZCFG_NO_SUCH_PARAMETER;
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+
+	if(zcfgFe98To181MappingNameGet(tr98FullPathName, tr181Obj) != ZCFG_SUCCESS) {
+		return ZCFG_INVALID_OBJECT;
+	}
+	
+
+	IID_INIT(devInfoIid);
+	devInfoOid = zcfgFeObjNameToObjId(tr181Obj, &devInfoIid);
+		
+
+	/*fill up tr98 devInfo object*/
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		if(strcmp(paramList->name, paramName)){
+			paramList++;
+			continue;
+		}
+		
+		/*special case*/
+		if(strcmp(paramList->name, "VLANEnable") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "Enable");
+		}else if(strcmp(paramList->name, "VLANName") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "X_ZYXEL_VLANName");
+		}else{
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, paramList->name);
+		}
+		
+		if(attrValue < 0 ) {
+			attrValue = 0;
+		}
+		break;
+	}
+	
+	return attrValue;
+}
+
+zcfgRet_t l2BrVlanObjAttrSet(char *tr98FullPathName, int handler, char *paramName, int newNotify, struct json_object *multiAttrJobj)
+{
+	zcfgRet_t ret;
+	char tr181Obj[128] = {0};
+	uint32_t  devInfoOid = 0;
+	objIndex_t devInfoIid;
+	int attrValue = 0;
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+	if(zcfgFe98To181MappingNameGet(tr98FullPathName, tr181Obj) != ZCFG_SUCCESS) {
+		return ZCFG_INVALID_OBJECT;
+	}
+	
+
+	IID_INIT(devInfoIid);
+	devInfoOid = zcfgFeObjNameToObjId(tr181Obj, &devInfoIid);
+
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		/*find the matched parameter*/
+		if(strcmp(paramList->name, paramName)){
+			paramList++;
+			continue;
+		}
+		/*special case*/
+		if(strcmp(paramList->name, "VLANEnable") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "Enable");
+		}else if(strcmp(paramList->name, "VLANName") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "X_ZYXEL_VLANName");
+		}else{
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, paramList->name);
+		}
+		
+		if(attrValue < 0) {
+			ret = ZCFG_INVALID_ARGUMENTS;
+			break;
+		}
+
+		/*Write new parameter attribute from tr98 object to tr181 objects*/
+		attrValue = zcfgFeNotifyAttrValSet(attrValue, newNotify);
+		if(strcmp(paramList->name, "VLANEnable") == 0){
+			ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, "Enable", attrValue);
+		}else if(strcmp(paramList->name, "VLANName") == 0){
+			ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, "X_ZYXEL_VLANName", attrValue);
+		}else{
+			ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, paramList->name, attrValue);
+		}
+		
+		if( ret != ZCFG_SUCCESS){
+			zcfgLog(ZCFG_LOG_ERR, "%s(): set %d %s attribute fail\n", __FUNCTION__, devInfoOid, paramList->name);
+		}
+		break;
+
+	} /*Edn while*/
+	
+	return ret;
+}
 
Index: libzcfg_fe_tr98-1.0/l2bridge.h
===================================================================
--- libzcfg_fe_tr98-1.0.orig/l2bridge.h	2014-01-03 16:07:24.000000000 +0800
+++ libzcfg_fe_tr98-1.0/l2bridge.h	2014-03-14 13:38:19.547548300 +0800
@@ -9,19 +9,34 @@
 
 /*Handler Function*/
 extern zcfgRet_t l2BridingObjGet(char *tr98FullPathName, int handler, struct json_object **tr98Jobj);
+extern zcfgRet_t l2BridingObjNotify(char *, char *, struct json_object *, int, struct json_object **);
+extern int l2BridingObjAttrGet(char *, int, char *);
+extern zcfgRet_t l2BridingObjAttrSet(char *, int, char *, int , struct json_object *);
 
 extern zcfgRet_t l2BrObjGet(char *tr98FullPathName, int handler, struct json_object **tr98Jobj);
 extern zcfgRet_t l2BrObjSet(char *tr98FullPathName, int handler, struct json_object *tr98Jobj, struct json_object *multiJobj);
 extern zcfgRet_t l2BrObjAdd(char *tr98FullPathName, int *idx);
 extern zcfgRet_t l2BrObjDel(char *tr98FullPathName);
+extern zcfgRet_t l2BrObjNotify(char *, char *, struct json_object *, int, struct json_object **);
+extern int l2BrObjAttrGet(char *, int, char *);
+extern zcfgRet_t l2BrObjAttrSet(char *, int, char *, int , struct json_object *);
 
 
 extern zcfgRet_t l2BrFilterObjGet(char *tr98FullPathName, int handler, struct json_object **tr98Jobj);
 extern zcfgRet_t l2BrFilterObjSet(char *tr98FullPathName, int handler, struct json_object *tr98Jobj, struct json_object *multiJobj);
 extern zcfgRet_t l2BrFilterObjAdd(char *tr98FullPathName, int *idx);
 extern zcfgRet_t l2BrFilterObjDel(char *tr98FullPathName);
+extern zcfgRet_t l2BrFilterObjNotify(char *, char *, struct json_object *, int, struct json_object **);
+extern int l2BrFilterObjAttrGet(char *, int, char *);
+extern zcfgRet_t l2BrFilterObjAttrSet(char *, int, char *, int , struct json_object *);
 
 extern zcfgRet_t l2BrAvailableIntfObjGet(char *tr98FullPathName, int handler, struct json_object **tr98Jobj);
+extern zcfgRet_t l2BrAvailableIntfObjNotify(char *, char *, struct json_object *, int, struct json_object **);
+extern int l2BrAvailableIntfObjAttrGet(char *, int, char *);
+extern zcfgRet_t l2BrAvailableIntfObjAttrSet(char *, int, char *, int , struct json_object *);
 
 extern zcfgRet_t l2BrVlanObjGet(char *tr98FullPathName, int handler, struct json_object **tr98Jobj);
-extern zcfgRet_t l2BrVlanObjSet(char *tr98FullPathName, int handler, struct json_object *tr98Jobj, struct json_object *multiJobj);
\ No newline at end of file
+extern zcfgRet_t l2BrVlanObjSet(char *tr98FullPathName, int handler, struct json_object *tr98Jobj, struct json_object *multiJobj);
+extern zcfgRet_t l2BrVlanObjNotify(char *, char *, struct json_object *, int, struct json_object **);
+extern int l2BrVlanObjAttrGet(char *, int, char *);
+extern zcfgRet_t l2BrVlanObjAttrSet(char *, int, char *, int , struct json_object *);
Index: libzcfg_fe_tr98-1.0/lanConfSec.c
===================================================================
--- libzcfg_fe_tr98-1.0.orig/lanConfSec.c	2014-01-03 16:07:24.000000000 +0800
+++ libzcfg_fe_tr98-1.0/lanConfSec.c	2014-03-14 13:41:01.829040000 +0800
@@ -111,3 +111,120 @@
 	return ZCFG_SUCCESS;
 }
 
+zcfgRet_t lanConfSecObjNotify(char *tr98ObjName, char *tr181ParamName, struct json_object *tr181ParamVal, int handler, struct json_object **tr98NotifyInfo)
+{
+	bool found = false;
+	char tr98Notify[256] = "";
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+
+	if(*tr98NotifyInfo == NULL) {
+		*tr98NotifyInfo = json_object_new_object();
+	}
+
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		if(strcmp(tr181ParamName, paramList->name) == 0) {
+			found = true;
+			sprintf(tr98Notify, "%s.%s", tr98ObjName, paramList->name);
+			break;
+		}
+		
+		paramList++;
+	}
+
+	if(found) {
+		json_object_object_add(*tr98NotifyInfo, tr98Notify, JSON_OBJ_COPY(tr181ParamVal));
+	}
+
+	return ZCFG_SUCCESS;
+}
+
+int lanConfSecObjAttrGet(char *tr98FullPathName, int handler, char *paramName)
+{
+	char tr181Obj[128] = {0};
+	uint32_t  devInfoOid = 0;
+	objIndex_t devInfoIid;
+	int attrValue = ZCFG_NO_SUCH_PARAMETER;
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+
+	if(zcfgFe98To181MappingNameGet(tr98FullPathName, tr181Obj) != ZCFG_SUCCESS) {
+		return ZCFG_INVALID_OBJECT;
+	}
+	
+
+	IID_INIT(devInfoIid);
+	devInfoOid = zcfgFeObjNameToObjId(tr181Obj, &devInfoIid);
+		
+
+	/*fill up tr98 devInfo object*/
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		if(strcmp(paramList->name, paramName)){
+			paramList++;
+			continue;
+		}
+		
+		/*special case*/
+		
+		attrValue = zcfgFeParamAttrGetByName(devInfoOid, paramList->name);
+		
+		if(attrValue < 0 ) {
+			attrValue = 0;
+		}
+		break;
+	}
+	
+	return attrValue;
+}
+
+zcfgRet_t lanConfSecObjAttrSet(char *tr98FullPathName, int handler, char *paramName, int newNotify, struct json_object *multiAttrJobj)
+{
+	zcfgRet_t ret;
+	char tr181Obj[128] = {0};
+	uint32_t  devInfoOid = 0;
+	objIndex_t devInfoIid;
+	int attrValue = 0;
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+	if(zcfgFe98To181MappingNameGet(tr98FullPathName, tr181Obj) != ZCFG_SUCCESS) {
+		return ZCFG_INVALID_OBJECT;
+	}
+	
+
+	IID_INIT(devInfoIid);
+	devInfoOid = zcfgFeObjNameToObjId(tr181Obj, &devInfoIid);
+
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		/*find the matched parameter*/
+		if(strcmp(paramList->name, paramName)){
+			paramList++;
+			continue;
+		}
+		/*special case*/
+
+		attrValue = zcfgFeParamAttrGetByName(devInfoOid, paramList->name);
+		if(attrValue < 0) {
+			ret = ZCFG_INVALID_ARGUMENTS;
+			break;
+		}
+
+		/*Write new parameter attribute from tr98 object to tr181 objects*/
+		attrValue = zcfgFeNotifyAttrValSet(attrValue, newNotify);
+		ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, paramList->name, attrValue);
+		
+		if( ret != ZCFG_SUCCESS){
+			zcfgLog(ZCFG_LOG_ERR, "%s(): set %d %s attribute fail\n", __FUNCTION__, devInfoOid, paramList->name);
+		}
+		break;
+
+	} /*Edn while*/
+	
+	return ret;
+}
+
Index: libzcfg_fe_tr98-1.0/lanConfSec.h
===================================================================
--- libzcfg_fe_tr98-1.0.orig/lanConfSec.h	2014-01-03 16:07:24.000000000 +0800
+++ libzcfg_fe_tr98-1.0/lanConfSec.h	2014-03-14 13:41:04.882072900 +0800
@@ -4,4 +4,7 @@
 /*Handler Function*/
 extern zcfgRet_t lanConfSecObjGet(char *, int, struct json_object **);
 extern zcfgRet_t lanConfSecObjSet(char *, int , struct json_object *, struct json_object *);
+extern zcfgRet_t lanConfSecObjNotify(char *, char *, struct json_object *, int, struct json_object **);
+extern int lanConfSecObjAttrGet(char *, int, char *);
+extern zcfgRet_t lanConfSecObjAttrSet(char *, int, char *, int , struct json_object *);
 
Index: libzcfg_fe_tr98-1.0/lanDev.c
===================================================================
--- libzcfg_fe_tr98-1.0.orig/lanDev.c	2014-03-14 14:13:48.988131925 +0800
+++ libzcfg_fe_tr98-1.0/lanDev.c	2014-03-14 13:44:13.163406200 +0800
@@ -1162,6 +1162,125 @@
 	return ret;
 }
 
+zcfgRet_t lanDhcpStaticAddrObjNotify(char *tr98ObjName, char *tr181ParamName, struct json_object *tr181ParamVal, int handler, struct json_object **tr98NotifyInfo)
+{
+	bool found = false;
+	char tr98Notify[256] = "";
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+
+	if(*tr98NotifyInfo == NULL) {
+		*tr98NotifyInfo = json_object_new_object();
+	}
+
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		if(strcmp(tr181ParamName, paramList->name) == 0) {
+			found = true;
+			sprintf(tr98Notify, "%s.%s", tr98ObjName, paramList->name);
+			break;
+		}
+		
+		paramList++;
+	}
+
+	if(found) {
+		json_object_object_add(*tr98NotifyInfo, tr98Notify, JSON_OBJ_COPY(tr181ParamVal));
+	}
+
+	return ZCFG_SUCCESS;
+}
+
+int lanDhcpStaticAddrObjAttrGet(char *tr98FullPathName, int handler, char *paramName)
+{
+	char tr181Obj[128] = {0};
+	uint32_t  devInfoOid = 0;
+	objIndex_t devInfoIid;
+	int attrValue = ZCFG_NO_SUCH_PARAMETER;
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+
+	if(zcfgFe98To181MappingNameGet(tr98FullPathName, tr181Obj) != ZCFG_SUCCESS) {
+		return ZCFG_INVALID_OBJECT;
+	}
+	
+
+	IID_INIT(devInfoIid);
+	devInfoOid = zcfgFeObjNameToObjId(tr181Obj, &devInfoIid);
+		
+
+	/*fill up tr98 devInfo object*/
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		if(strcmp(paramList->name, paramName)){
+			paramList++;
+			continue;
+		}
+		
+		/*special case*/
+		
+		attrValue = zcfgFeParamAttrGetByName(devInfoOid, paramList->name);
+		
+		if(attrValue < 0 ) {
+			attrValue = 0;
+		}
+		break;
+	}
+	
+	return attrValue;
+}
+
+zcfgRet_t lanDhcpStaticAddrObjAttrSet(char *tr98FullPathName, int handler, char *paramName, int newNotify, struct json_object *multiAttrJobj)
+{
+	zcfgRet_t ret;
+	char tr181Obj[128] = {0};
+	uint32_t  devInfoOid = 0;
+	objIndex_t devInfoIid;
+	int attrValue = 0;
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+	if(zcfgFe98To181MappingNameGet(tr98FullPathName, tr181Obj) != ZCFG_SUCCESS) {
+		return ZCFG_INVALID_OBJECT;
+	}
+	
+
+	IID_INIT(devInfoIid);
+	devInfoOid = zcfgFeObjNameToObjId(tr181Obj, &devInfoIid);
+
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		/*find the matched parameter*/
+		if(strcmp(paramList->name, paramName)){
+			paramList++;
+			continue;
+		}
+		/*special case*/
+
+		attrValue = zcfgFeParamAttrGetByName(devInfoOid, paramList->name);
+		if(attrValue < 0) {
+			ret = ZCFG_INVALID_ARGUMENTS;
+			break;
+		}
+
+		/*Write new parameter attribute from tr98 object to tr181 objects*/
+		attrValue = zcfgFeNotifyAttrValSet(attrValue, newNotify);
+		ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, paramList->name, attrValue);
+		
+		if( ret != ZCFG_SUCCESS){
+			zcfgLog(ZCFG_LOG_ERR, "%s(): set %d %s attribute fail\n", __FUNCTION__, devInfoOid, paramList->name);
+		}
+		break;
+
+	} /*Edn while*/
+	
+	return ret;
+}
+
+
+
 
 /*  TR98 Object Name : InternetGatewayDevice.LANDevice.i.LANHostConfigManagement.DHCPOption.i
 
@@ -1364,6 +1483,125 @@
 	return ret;
 }
 
+zcfgRet_t lanDhcpOptObjNotify(char *tr98ObjName, char *tr181ParamName, struct json_object *tr181ParamVal, int handler, struct json_object **tr98NotifyInfo)
+{
+	bool found = false;
+	char tr98Notify[256] = "";
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+
+	if(*tr98NotifyInfo == NULL) {
+		*tr98NotifyInfo = json_object_new_object();
+	}
+
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		if(strcmp(tr181ParamName, paramList->name) == 0) {
+			found = true;
+			sprintf(tr98Notify, "%s.%s", tr98ObjName, paramList->name);
+			break;
+		}
+		
+		paramList++;
+	}
+
+	if(found) {
+		json_object_object_add(*tr98NotifyInfo, tr98Notify, JSON_OBJ_COPY(tr181ParamVal));
+	}
+
+	return ZCFG_SUCCESS;
+}
+
+int lanDhcpOptObjAttrGet(char *tr98FullPathName, int handler, char *paramName)
+{
+	char tr181Obj[128] = {0};
+	uint32_t  devInfoOid = 0;
+	objIndex_t devInfoIid;
+	int attrValue = ZCFG_NO_SUCH_PARAMETER;
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+
+	if(zcfgFe98To181MappingNameGet(tr98FullPathName, tr181Obj) != ZCFG_SUCCESS) {
+		return ZCFG_INVALID_OBJECT;
+	}
+	
+
+	IID_INIT(devInfoIid);
+	devInfoOid = zcfgFeObjNameToObjId(tr181Obj, &devInfoIid);
+		
+
+	/*fill up tr98 devInfo object*/
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		if(strcmp(paramList->name, paramName)){
+			paramList++;
+			continue;
+		}
+		
+		/*special case*/
+		
+		attrValue = zcfgFeParamAttrGetByName(devInfoOid, paramList->name);
+		
+		if(attrValue < 0 ) {
+			attrValue = 0;
+		}
+		break;
+	}
+	
+	return attrValue;
+}
+
+zcfgRet_t lanDhcpOptObjAttrSet(char *tr98FullPathName, int handler, char *paramName, int newNotify, struct json_object *multiAttrJobj)
+{
+	zcfgRet_t ret;
+	char tr181Obj[128] = {0};
+	uint32_t  devInfoOid = 0;
+	objIndex_t devInfoIid;
+	int attrValue = 0;
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+	if(zcfgFe98To181MappingNameGet(tr98FullPathName, tr181Obj) != ZCFG_SUCCESS) {
+		return ZCFG_INVALID_OBJECT;
+	}
+	
+
+	IID_INIT(devInfoIid);
+	devInfoOid = zcfgFeObjNameToObjId(tr181Obj, &devInfoIid);
+
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		/*find the matched parameter*/
+		if(strcmp(paramList->name, paramName)){
+			paramList++;
+			continue;
+		}
+		/*special case*/
+
+		attrValue = zcfgFeParamAttrGetByName(devInfoOid, paramList->name);
+		if(attrValue < 0) {
+			ret = ZCFG_INVALID_ARGUMENTS;
+			break;
+		}
+
+		/*Write new parameter attribute from tr98 object to tr181 objects*/
+		attrValue = zcfgFeNotifyAttrValSet(attrValue, newNotify);
+		ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, paramList->name, attrValue);
+		
+		if( ret != ZCFG_SUCCESS){
+			zcfgLog(ZCFG_LOG_ERR, "%s(): set %d %s attribute fail\n", __FUNCTION__, devInfoOid, paramList->name);
+		}
+		break;
+
+	} /*Edn while*/
+	
+	return ret;
+}
+
+
+
 #if 0
 /*  TR98 Object Name : InternetGatewayDevice.LANDevice.i.LANHostConfigManagement.DHCPConditionalServingPool.i
 
@@ -1676,6 +1914,126 @@
 	return ZCFG_SUCCESS;
 }
 
+zcfgRet_t lanEthIntfConfObjNotify(char *tr98ObjName, char *tr181ParamName, struct json_object *tr181ParamVal, int handler, struct json_object **tr98NotifyInfo)
+{
+	bool found = false;
+	char tr98Notify[256] = "";
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+
+	if(*tr98NotifyInfo == NULL) {
+		*tr98NotifyInfo = json_object_new_object();
+	}
+
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		if(strcmp(tr181ParamName, paramList->name) == 0) {
+			found = true;
+			sprintf(tr98Notify, "%s.%s", tr98ObjName, paramList->name);
+			break;
+		}
+		
+		paramList++;
+	}
+
+	if(found) {
+		json_object_object_add(*tr98NotifyInfo, tr98Notify, JSON_OBJ_COPY(tr181ParamVal));
+	}
+
+	return ZCFG_SUCCESS;
+}
+
+int lanEthIntfConfObjAttrGet(char *tr98FullPathName, int handler, char *paramName)
+{
+	char tr181Obj[128] = {0};
+	uint32_t  devInfoOid = 0;
+	objIndex_t devInfoIid;
+	int attrValue = ZCFG_NO_SUCH_PARAMETER;
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+
+	if(zcfgFe98To181MappingNameGet(tr98FullPathName, tr181Obj) != ZCFG_SUCCESS) {
+		return ZCFG_INVALID_OBJECT;
+	}
+	
+
+	IID_INIT(devInfoIid);
+	devInfoOid = zcfgFeObjNameToObjId(tr181Obj, &devInfoIid);
+		
+
+	/*fill up tr98 devInfo object*/
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		if(strcmp(paramList->name, paramName)){
+			paramList++;
+			continue;
+		}
+		
+		/*special case*/
+		
+		attrValue = zcfgFeParamAttrGetByName(devInfoOid, paramList->name);
+		
+		if(attrValue < 0 ) {
+			attrValue = 0;
+		}
+		break;
+	}
+	
+	return attrValue;
+}
+
+zcfgRet_t lanEthIntfConfObjAttrSet(char *tr98FullPathName, int handler, char *paramName, int newNotify, struct json_object *multiAttrJobj)
+{
+	zcfgRet_t ret;
+	char tr181Obj[128] = {0};
+	uint32_t  devInfoOid = 0;
+	objIndex_t devInfoIid;
+	int attrValue = 0;
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+	if(zcfgFe98To181MappingNameGet(tr98FullPathName, tr181Obj) != ZCFG_SUCCESS) {
+		return ZCFG_INVALID_OBJECT;
+	}
+	
+
+	IID_INIT(devInfoIid);
+	devInfoOid = zcfgFeObjNameToObjId(tr181Obj, &devInfoIid);
+
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		/*find the matched parameter*/
+		if(strcmp(paramList->name, paramName)){
+			paramList++;
+			continue;
+		}
+		/*special case*/
+
+		attrValue = zcfgFeParamAttrGetByName(devInfoOid, paramList->name);
+		if(attrValue < 0) {
+			ret = ZCFG_INVALID_ARGUMENTS;
+			break;
+		}
+
+		/*Write new parameter attribute from tr98 object to tr181 objects*/
+		attrValue = zcfgFeNotifyAttrValSet(attrValue, newNotify);
+		ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, paramList->name, attrValue);
+		
+		if( ret != ZCFG_SUCCESS){
+			zcfgLog(ZCFG_LOG_ERR, "%s(): set %d %s attribute fail\n", __FUNCTION__, devInfoOid, paramList->name);
+		}
+		break;
+
+	} /*Edn while*/
+	
+	return ret;
+}
+
+
+
+
 
 /*  TR98 Object Name : InternetGatewayDevice.LANDevice.i.LANEthernetInterfaceConfig.i.Stats
 
Index: libzcfg_fe_tr98-1.0/lanDev.h
===================================================================
--- libzcfg_fe_tr98-1.0.orig/lanDev.h	2014-01-03 16:07:24.000000000 +0800
+++ libzcfg_fe_tr98-1.0/lanDev.h	2014-03-14 13:44:27.658789400 +0800
@@ -41,11 +41,17 @@
 extern zcfgRet_t lanDhcpStaticAddrObjSet(char *tr98FullPathName, int handler, struct json_object *tr98Jobj, struct json_object *multiJobj);
 extern zcfgRet_t lanDhcpStaticAddrObjAdd(char *tr98FullPathName, int *idx);
 extern zcfgRet_t lanDhcpStaticAddrObjDel(char *tr98FullPathName);
+extern zcfgRet_t lanDhcpStaticAddrObjNotify(char *, char *, struct json_object *, int, struct json_object **);
+extern int lanDhcpStaticAddrObjAttrGet(char *, int, char *);
+extern zcfgRet_t lanDhcpStaticAddrObjAttrSet(char *, int, char *, int , struct json_object *);
 
 extern zcfgRet_t lanDhcpOptObjGet(char *tr98FullPathName, int handler, struct json_object **tr98Jobj);
 extern zcfgRet_t lanDhcpOptObjSet(char *tr98FullPathName, int handler, struct json_object *tr98Jobj, struct json_object *multiJobj);
 extern zcfgRet_t lanDhcpOptObjAdd(char *tr98FullPathName, int *idx);
 extern zcfgRet_t lanDhcpOptObjDel(char *tr98FullPathName);
+extern zcfgRet_t lanDhcpOptObjNotify(char *, char *, struct json_object *, int, struct json_object **);
+extern int lanDhcpOptObjAttrGet(char *, int, char *);
+extern zcfgRet_t lanDhcpOptObjAttrSet(char *, int, char *, int , struct json_object *);
 
 extern zcfgRet_t lanDhcpCondServPoolObjGet(char *tr98FullPathName, int handler, struct json_object **tr98Jobj);
 extern zcfgRet_t lanDhcpCondServPoolObjSet(char *tr98FullPathName, int handler, struct json_object *tr98Jobj, struct json_object *multiJobj);
@@ -64,6 +70,9 @@
 
 extern zcfgRet_t lanEthIntfConfObjGet(char *tr98FullPathName, int handler, struct json_object **tr98Jobj);
 extern zcfgRet_t lanEthIntfConfObjSet(char *tr98FullPathName, int handler, struct json_object *tr98Jobj, struct json_object *multiJobj);
+extern zcfgRet_t lanEthIntfConfObjNotify(char *, char *, struct json_object *, int, struct json_object **);
+extern int lanEthIntfConfObjAttrGet(char *, int, char *);
+extern zcfgRet_t lanEthIntfConfObjAttrSet(char *, int, char *, int , struct json_object *);
 
 extern zcfgRet_t lanEthIntfConfStatObjGet(char *tr98FullPathName, int handler, struct json_object **tr98Jobj);
 
Index: libzcfg_fe_tr98-1.0/qos.c
===================================================================
--- libzcfg_fe_tr98-1.0.orig/qos.c	2014-01-03 16:07:24.000000000 +0800
+++ libzcfg_fe_tr98-1.0/qos.c	2014-03-14 13:45:18.822303800 +0800
@@ -183,6 +183,163 @@
 	return ZCFG_SUCCESS;
 }
 
+zcfgRet_t qMgmtNotify(char *tr98ObjName, char *tr181ParamName, struct json_object *tr181ParamVal, int handler, struct json_object **tr98NotifyInfo)
+{
+	bool found = false;
+	char tr98Notify[256] = "";
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+
+	if(*tr98NotifyInfo == NULL) {
+		*tr98NotifyInfo = json_object_new_object();
+	}
+
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		if(strcmp(tr181ParamName, paramList->name) == 0) {
+			found = true;
+			sprintf(tr98Notify, "%s.%s", tr98ObjName, paramList->name);
+			break;
+		}
+		
+		if(strcmp(tr181ParamName, "X_ZYXEL_Enabled") == 0) {
+			found = true;
+			sprintf(tr98Notify, "%s.%s", tr98ObjName, "Enable");
+			break;
+		}
+
+		if(strcmp(tr181ParamName, "MaxShaperEntries") == 0) {
+			found = true;
+			sprintf(tr98Notify, "%s.%s", tr98ObjName, "X_ZYXEL_MaxShaperEntries");
+			break;
+		}
+		
+		if(strcmp(tr181ParamName, "ShaperNumberOfEntries") == 0) {
+			found = true;
+			sprintf(tr98Notify, "%s.%s", tr98ObjName, "X_ZYXEL_ShaperNumberOfEntries");
+			break;
+		}
+		
+		paramList++;
+	}
+
+	if(found) {
+		json_object_object_add(*tr98NotifyInfo, tr98Notify, JSON_OBJ_COPY(tr181ParamVal));
+	}
+
+	return ZCFG_SUCCESS;
+}
+
+int qMgmtAttrGet(char *tr98FullPathName, int handler, char *paramName)
+{
+	char tr181Obj[128] = {0};
+	uint32_t  devInfoOid = 0;
+	objIndex_t devInfoIid;
+	int attrValue = ZCFG_NO_SUCH_PARAMETER;
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+
+	if(zcfgFe98To181MappingNameGet(tr98FullPathName, tr181Obj) != ZCFG_SUCCESS) {
+		return ZCFG_INVALID_OBJECT;
+	}
+	
+
+	IID_INIT(devInfoIid);
+	devInfoOid = zcfgFeObjNameToObjId(tr181Obj, &devInfoIid);
+		
+
+	/*fill up tr98 devInfo object*/
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		if(strcmp(paramList->name, paramName)){
+			paramList++;
+			continue;
+		}
+		
+		/*special case*/
+		if(strcmp(paramList->name, "Enable") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "X_ZYXEL_Enabled");
+		}else if(strcmp(paramList->name, "X_ZYXEL_MaxShaperEntries") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "MaxShaperEntries");
+		}else if(strcmp(paramList->name, "X_ZYXEL_ShaperNumberOfEntries") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "ShaperNumberOfEntries");
+		}else{
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, paramList->name);
+		}
+		
+		if(attrValue < 0 ) {
+			attrValue = 0;
+		}
+		break;
+	}
+	
+	return attrValue;
+}
+
+zcfgRet_t qMgmtAttrSet(char *tr98FullPathName, int handler, char *paramName, int newNotify, struct json_object *multiAttrJobj)
+{
+	zcfgRet_t ret;
+	char tr181Obj[128] = {0};
+	uint32_t  devInfoOid = 0;
+	objIndex_t devInfoIid;
+	int attrValue = 0;
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+	if(zcfgFe98To181MappingNameGet(tr98FullPathName, tr181Obj) != ZCFG_SUCCESS) {
+		return ZCFG_INVALID_OBJECT;
+	}
+	
+
+	IID_INIT(devInfoIid);
+	devInfoOid = zcfgFeObjNameToObjId(tr181Obj, &devInfoIid);
+
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		/*find the matched parameter*/
+		if(strcmp(paramList->name, paramName)){
+			paramList++;
+			continue;
+		}
+		/*special case*/
+		if(strcmp(paramList->name, "Enable") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "X_ZYXEL_Enabled");
+		}else if(strcmp(paramList->name, "X_ZYXEL_MaxShaperEntries") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "MaxShaperEntries");
+		}else if(strcmp(paramList->name, "X_ZYXEL_ShaperNumberOfEntries") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "ShaperNumberOfEntries");
+		}else{
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, paramList->name);
+		}
+		if(attrValue < 0) {
+			ret = ZCFG_INVALID_ARGUMENTS;
+			break;
+		}
+
+		/*Write new parameter attribute from tr98 object to tr181 objects*/
+		attrValue = zcfgFeNotifyAttrValSet(attrValue, newNotify);
+		if(strcmp(paramList->name, "Enable") == 0){
+			ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, "X_ZYXEL_Enabled", attrValue);
+		}else if(strcmp(paramList->name, "X_ZYXEL_MaxShaperEntries") == 0){
+			ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, "MaxShaperEntries", attrValue);
+		}else if(strcmp(paramList->name, "X_ZYXEL_ShaperNumberOfEntries") == 0){
+			ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, "ShaperNumberOfEntries", attrValue);
+		}else{
+			ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, paramList->name, attrValue);
+		}
+		
+		if( ret != ZCFG_SUCCESS){
+			zcfgLog(ZCFG_LOG_ERR, "%s(): set %d %s attribute fail\n", __FUNCTION__, devInfoOid, paramList->name);
+		}
+		break;
+
+	} /*Edn while*/
+	
+	return ret;
+}
+
 
 zcfgRet_t qMgmtQueGet(char *tr98FullPathName, int handler, struct json_object **tr98Jobj){
 	zcfgRet_t ret = ZCFG_SUCCESS;
@@ -415,6 +572,194 @@
 	return ZCFG_SUCCESS;
 }
 
+zcfgRet_t qMgmtQueNotify(char *tr98ObjName, char *tr181ParamName, struct json_object *tr181ParamVal, int handler, struct json_object **tr98NotifyInfo)
+{
+	bool found = false;
+	char tr98Notify[256] = "";
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+
+	if(*tr98NotifyInfo == NULL) {
+		*tr98NotifyInfo = json_object_new_object();
+	}
+
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		if(strcmp(tr181ParamName, paramList->name) == 0) {
+			found = true;
+			sprintf(tr98Notify, "%s.%s", tr98ObjName, paramList->name);
+			break;
+		}
+		
+		if(strcmp(tr181ParamName, "Enable") == 0) {
+			found = true;
+			sprintf(tr98Notify, "%s.%s", tr98ObjName, "QueueEnable");
+			break;
+		}
+		if(strcmp(tr181ParamName, "Status") == 0) {
+			found = true;
+			sprintf(tr98Notify, "%s.%s", tr98ObjName, "QueueStatus");
+			break;
+		}
+		if(strcmp(tr181ParamName, "Interface") == 0) {
+			found = true;
+			sprintf(tr98Notify, "%s.%s", tr98ObjName, "QueueInterface");
+			break;
+		}
+		if(strcmp(tr181ParamName, "BufferLength") == 0) {
+			found = true;
+			sprintf(tr98Notify, "%s.%s", tr98ObjName, "QueueBufferLength");
+			break;
+		}
+		if(strcmp(tr181ParamName, "Weight") == 0) {
+			found = true;
+			sprintf(tr98Notify, "%s.%s", tr98ObjName, "QueueWeight");
+			break;
+		}
+		if(strcmp(tr181ParamName, "Precedence") == 0) {
+			found = true;
+			sprintf(tr98Notify, "%s.%s", tr98ObjName, "QueuePrecedence");
+			break;
+		}
+		
+		paramList++;
+	}
+
+	if(found) {
+		json_object_object_add(*tr98NotifyInfo, tr98Notify, JSON_OBJ_COPY(tr181ParamVal));
+	}
+
+	return ZCFG_SUCCESS;
+}
+
+int qMgmtQueAttrGet(char *tr98FullPathName, int handler, char *paramName)
+{
+	char tr181Obj[128] = {0};
+	uint32_t  devInfoOid = 0;
+	objIndex_t devInfoIid;
+	int attrValue = ZCFG_NO_SUCH_PARAMETER;
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+
+	if(zcfgFe98To181MappingNameGet(tr98FullPathName, tr181Obj) != ZCFG_SUCCESS) {
+		return ZCFG_INVALID_OBJECT;
+	}
+	
+
+	IID_INIT(devInfoIid);
+	devInfoOid = zcfgFeObjNameToObjId(tr181Obj, &devInfoIid);
+		
+
+	/*fill up tr98 devInfo object*/
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		if(strcmp(paramList->name, paramName)){
+			paramList++;
+			continue;
+		}
+		
+		/*special case*/
+		if(strcmp(paramList->name, "QueueEnable") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "Enable");
+		}else if(strcmp(paramList->name, "QueueStatus") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "Status");
+		}else if(strcmp(paramList->name, "QueueInterface") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "Interface");
+		}else if(strcmp(paramList->name, "QueueBufferLength") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "BufferLength");
+		}else if(strcmp(paramList->name, "QueueWeight") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "Weight");
+		}else if(strcmp(paramList->name, "QueuePrecedence") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "Precedence");
+		}else{
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, paramList->name);
+		}
+		
+		if(attrValue < 0 ) {
+			attrValue = 0;
+		}
+		break;
+	}
+	
+	return attrValue;
+}
+
+zcfgRet_t qMgmtQueAttrSet(char *tr98FullPathName, int handler, char *paramName, int newNotify, struct json_object *multiAttrJobj)
+{
+	zcfgRet_t ret;
+	char tr181Obj[128] = {0};
+	uint32_t  devInfoOid = 0;
+	objIndex_t devInfoIid;
+	int attrValue = 0;
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+	if(zcfgFe98To181MappingNameGet(tr98FullPathName, tr181Obj) != ZCFG_SUCCESS) {
+		return ZCFG_INVALID_OBJECT;
+	}
+	
+
+	IID_INIT(devInfoIid);
+	devInfoOid = zcfgFeObjNameToObjId(tr181Obj, &devInfoIid);
+
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		/*find the matched parameter*/
+		if(strcmp(paramList->name, paramName)){
+			paramList++;
+			continue;
+		}
+		/*special case*/
+		if(strcmp(paramList->name, "QueueEnable") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "Enable");
+		}else if(strcmp(paramList->name, "QueueStatus") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "Status");
+		}else if(strcmp(paramList->name, "QueueInterface") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "Interface");
+		}else if(strcmp(paramList->name, "QueueBufferLength") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "BufferLength");
+		}else if(strcmp(paramList->name, "QueueWeight") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "Weight");
+		}else if(strcmp(paramList->name, "QueuePrecedence") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "Precedence");
+		}else{
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, paramList->name);
+		}
+		if(attrValue < 0) {
+			ret = ZCFG_INVALID_ARGUMENTS;
+			break;
+		}
+
+		/*Write new parameter attribute from tr98 object to tr181 objects*/
+		attrValue = zcfgFeNotifyAttrValSet(attrValue, newNotify);
+		if(strcmp(paramList->name, "QueueEnable") == 0){
+			ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, "Enable", attrValue);
+		}else if(strcmp(paramList->name, "QueueStatus") == 0){
+			ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, "Status", attrValue);
+		}else if(strcmp(paramList->name, "QueueInterface") == 0){
+			ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, "Interface", attrValue);
+		}else if(strcmp(paramList->name, "QueueBufferLength") == 0){
+			ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, "BufferLength", attrValue);
+		}else if(strcmp(paramList->name, "QueueWeight") == 0){
+			ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, "Weight", attrValue);
+		}else if(strcmp(paramList->name, "QueuePrecedence") == 0){
+			ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, "Precedence", attrValue);
+		}else{
+			ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, paramList->name, attrValue);
+		}
+		if( ret != ZCFG_SUCCESS){
+			zcfgLog(ZCFG_LOG_ERR, "%s(): set %d %s attribute fail\n", __FUNCTION__, devInfoOid, paramList->name);
+		}
+		break;
+
+	} /*Edn while*/
+	
+	return ret;
+}
+
+
 zcfgRet_t qMgmtClsGet(char *tr98FullPathName, int handler, struct json_object **tr98Jobj){
 	
 	zcfgRet_t ret = ZCFG_SUCCESS;
@@ -695,6 +1040,193 @@
 	return ZCFG_SUCCESS;
 }
 
+zcfgRet_t qMgmtClsNotify(char *tr98ObjName, char *tr181ParamName, struct json_object *tr181ParamVal, int handler, struct json_object **tr98NotifyInfo)
+{
+	bool found = false;
+	char tr98Notify[256] = "";
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+
+	if(*tr98NotifyInfo == NULL) {
+		*tr98NotifyInfo = json_object_new_object();
+	}
+
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		if(strcmp(tr181ParamName, paramList->name) == 0) {
+			found = true;
+			sprintf(tr98Notify, "%s.%s", tr98ObjName, paramList->name);
+			break;
+		}
+		
+		if(strcmp(tr181ParamName, "Enable") == 0) {
+			found = true;
+			sprintf(tr98Notify, "%s.%s", tr98ObjName, "ClassificationEnable");
+			break;
+		}
+		if(strcmp(tr181ParamName, "Status") == 0) {
+			found = true;
+			sprintf(tr98Notify, "%s.%s", tr98ObjName, "ClassificationStatus");
+			break;
+		}
+		if(strcmp(tr181ParamName, "Order") == 0) {
+			found = true;
+			sprintf(tr98Notify, "%s.%s", tr98ObjName, "ClassificationOrder");
+			break;
+		}
+		if(strcmp(tr181ParamName, "Interface") == 0) {
+			found = true;
+			sprintf(tr98Notify, "%s.%s", tr98ObjName, "ClassInterface");
+			break;
+		}
+		if(strcmp(tr181ParamName, "Policer") == 0) {
+			found = true;
+			sprintf(tr98Notify, "%s.%s", tr98ObjName, "ClassPolicer");
+			break;
+		}
+		if(strcmp(tr181ParamName, "App") == 0) {
+			found = true;
+			sprintf(tr98Notify, "%s.%s", tr98ObjName, "ClassApp");
+			break;
+		}
+		
+		paramList++;
+	}
+
+	if(found) {
+		json_object_object_add(*tr98NotifyInfo, tr98Notify, JSON_OBJ_COPY(tr181ParamVal));
+	}
+
+	return ZCFG_SUCCESS;
+}
+
+int qMgmtClsAttrGet(char *tr98FullPathName, int handler, char *paramName)
+{
+	char tr181Obj[128] = {0};
+	uint32_t  devInfoOid = 0;
+	objIndex_t devInfoIid;
+	int attrValue = ZCFG_NO_SUCH_PARAMETER;
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+
+	if(zcfgFe98To181MappingNameGet(tr98FullPathName, tr181Obj) != ZCFG_SUCCESS) {
+		return ZCFG_INVALID_OBJECT;
+	}
+	
+
+	IID_INIT(devInfoIid);
+	devInfoOid = zcfgFeObjNameToObjId(tr181Obj, &devInfoIid);
+		
+
+	/*fill up tr98 devInfo object*/
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		if(strcmp(paramList->name, paramName)){
+			paramList++;
+			continue;
+		}
+		
+		/*special case*/
+		if(strcmp(paramList->name, "ClassificationEnable") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "Enable");
+		}else if(strcmp(paramList->name, "ClassificationStatus") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "Status");
+		}else if(strcmp(paramList->name, "ClassificationOrder") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "Order");
+		}else if(strcmp(paramList->name, "ClassInterface") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "Interface");
+		}else if(strcmp(paramList->name, "ClassPolicer") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "Policer");
+		}else if(strcmp(paramList->name, "ClassApp") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "App");
+		}else{
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, paramList->name);
+		}
+		
+		if(attrValue < 0 ) {
+			attrValue = 0;
+		}
+		break;
+	}
+	
+	return attrValue;
+}
+
+zcfgRet_t qMgmtClsAttrSet(char *tr98FullPathName, int handler, char *paramName, int newNotify, struct json_object *multiAttrJobj)
+{
+	zcfgRet_t ret;
+	char tr181Obj[128] = {0};
+	uint32_t  devInfoOid = 0;
+	objIndex_t devInfoIid;
+	int attrValue = 0;
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+	if(zcfgFe98To181MappingNameGet(tr98FullPathName, tr181Obj) != ZCFG_SUCCESS) {
+		return ZCFG_INVALID_OBJECT;
+	}
+	
+
+	IID_INIT(devInfoIid);
+	devInfoOid = zcfgFeObjNameToObjId(tr181Obj, &devInfoIid);
+
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		/*find the matched parameter*/
+		if(strcmp(paramList->name, paramName)){
+			paramList++;
+			continue;
+		}
+		/*special case*/
+		if(strcmp(paramList->name, "ClassificationEnable") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "Enable");
+		}else if(strcmp(paramList->name, "ClassificationStatus") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "Status");
+		}else if(strcmp(paramList->name, "ClassificationOrder") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "Order");
+		}else if(strcmp(paramList->name, "ClassInterface") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "Interface");
+		}else if(strcmp(paramList->name, "ClassPolicer") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "Policer");
+		}else if(strcmp(paramList->name, "ClassApp") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "App");
+		}else{
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, paramList->name);
+		}
+		if(attrValue < 0) {
+			ret = ZCFG_INVALID_ARGUMENTS;
+			break;
+		}
+
+		/*Write new parameter attribute from tr98 object to tr181 objects*/
+		attrValue = zcfgFeNotifyAttrValSet(attrValue, newNotify);
+		if(strcmp(paramList->name, "ClassificationEnable") == 0){
+			ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, "Enable", attrValue);
+		}else if(strcmp(paramList->name, "ClassificationStatus") == 0){
+			ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, "Enable", attrValue);
+		}else if(strcmp(paramList->name, "ClassificationOrder") == 0){
+			ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, "Order", attrValue);
+		}else if(strcmp(paramList->name, "ClassInterface") == 0){
+			ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, "Interface", attrValue);
+		}else if(strcmp(paramList->name, "ClassPolicer") == 0){
+			ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, "Policer", attrValue);
+		}else if(strcmp(paramList->name, "ClassApp") == 0){
+			ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, "App", attrValue);
+		}else{
+			ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, paramList->name, attrValue);
+		}
+		if( ret != ZCFG_SUCCESS){
+			zcfgLog(ZCFG_LOG_ERR, "%s(): set %d %s attribute fail\n", __FUNCTION__, devInfoOid, paramList->name);
+		}
+		break;
+
+	} /*Edn while*/
+	
+	return ret;
+}
+
 
 zcfgRet_t qMgmtShaperGet(char *tr98FullPathName, int handler, struct json_object **tr98Jobj){
 	zcfgRet_t ret = ZCFG_SUCCESS;
@@ -857,6 +1389,122 @@
 	return ZCFG_SUCCESS;
 }
 
+zcfgRet_t qMgmtShaperNotify(char *tr98ObjName, char *tr181ParamName, struct json_object *tr181ParamVal, int handler, struct json_object **tr98NotifyInfo)
+{
+	bool found = false;
+	char tr98Notify[256] = "";
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+
+	if(*tr98NotifyInfo == NULL) {
+		*tr98NotifyInfo = json_object_new_object();
+	}
+
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		if(strcmp(tr181ParamName, paramList->name) == 0) {
+			found = true;
+			sprintf(tr98Notify, "%s.%s", tr98ObjName, paramList->name);
+			break;
+		}
+		paramList++;
+	}
+
+	if(found) {
+		json_object_object_add(*tr98NotifyInfo, tr98Notify, JSON_OBJ_COPY(tr181ParamVal));
+	}
+
+	return ZCFG_SUCCESS;
+}
+
+int qMgmtShaperAttrGet(char *tr98FullPathName, int handler, char *paramName)
+{
+	char tr181Obj[128] = {0};
+	uint32_t  devInfoOid = 0;
+	objIndex_t devInfoIid;
+	int attrValue = ZCFG_NO_SUCH_PARAMETER;
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+
+	if(zcfgFe98To181MappingNameGet(tr98FullPathName, tr181Obj) != ZCFG_SUCCESS) {
+		return ZCFG_INVALID_OBJECT;
+	}
+	
+
+	IID_INIT(devInfoIid);
+	devInfoOid = zcfgFeObjNameToObjId(tr181Obj, &devInfoIid);
+		
+
+	/*fill up tr98 devInfo object*/
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		if(strcmp(paramList->name, paramName)){
+			paramList++;
+			continue;
+		}
+		
+		/*special case*/
+
+
+		attrValue = zcfgFeParamAttrGetByName(devInfoOid, paramList->name);
+		if(attrValue < 0 ) {
+			attrValue = 0;
+		}
+		break;
+	}
+	
+	return attrValue;
+}
+
+zcfgRet_t qMgmtShaperAttrSet(char *tr98FullPathName, int handler, char *paramName, int newNotify, struct json_object *multiAttrJobj)
+{
+	zcfgRet_t ret;
+	char tr181Obj[128] = {0};
+	uint32_t  devInfoOid = 0;
+	objIndex_t devInfoIid;
+	int attrValue = 0;
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+	if(zcfgFe98To181MappingNameGet(tr98FullPathName, tr181Obj) != ZCFG_SUCCESS) {
+		return ZCFG_INVALID_OBJECT;
+	}
+	
+
+	IID_INIT(devInfoIid);
+	devInfoOid = zcfgFeObjNameToObjId(tr181Obj, &devInfoIid);
+
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		/*find the matched parameter*/
+		if(strcmp(paramList->name, paramName)){
+			paramList++;
+			continue;
+		}
+		/*special case*/
+
+
+		attrValue = zcfgFeParamAttrGetByName(devInfoOid, paramList->name);
+		if(attrValue < 0) {
+			ret = ZCFG_INVALID_ARGUMENTS;
+			break;
+		}
+
+		/*Write new parameter attribute from tr98 object to tr181 objects*/
+		attrValue = zcfgFeNotifyAttrValSet(attrValue, newNotify);
+		ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, paramList->name, attrValue);
+		
+		if( ret != ZCFG_SUCCESS){
+			zcfgLog(ZCFG_LOG_ERR, "%s(): set %d %s attribute fail\n", __FUNCTION__, devInfoOid, paramList->name);
+		}
+		break;
+
+	} /*Edn while*/
+	
+	return ret;
+}
 
 
 
Index: libzcfg_fe_tr98-1.0/qos.h
===================================================================
--- libzcfg_fe_tr98-1.0.orig/qos.h	2014-01-03 16:07:24.000000000 +0800
+++ libzcfg_fe_tr98-1.0/qos.h	2014-03-14 13:45:03.213598400 +0800
@@ -147,24 +147,36 @@
 /* InternetGatewayDevice.QueueManagement */
 extern zcfgRet_t qMgmtGet(char *, int, struct json_object **);
 extern zcfgRet_t qMgmtSet(char *, int, struct json_object *, struct json_object *);
+extern zcfgRet_t qMgmtNotify(char *, char *, struct json_object *, int, struct json_object **);
+extern int qMgmtAttrGet(char *, int, char *);
+extern zcfgRet_t qMgmtAttrSet(char *, int, char *, int , struct json_object *);
 
 /* InternetGatewayDevice.QueueManagement.Queue.i */
 extern zcfgRet_t qMgmtQueGet(char *, int, struct json_object **);
 extern zcfgRet_t qMgmtQueSet(char *, int, struct json_object *, struct json_object *);
 extern zcfgRet_t qMgmtQueAdd(char *, int *);
 extern zcfgRet_t qMgmtQueDel(char *);
+extern zcfgRet_t qMgmtQueNotify(char *, char *, struct json_object *, int, struct json_object **);
+extern int qMgmtQueAttrGet(char *, int, char *);
+extern zcfgRet_t qMgmtQueAttrSet(char *, int, char *, int , struct json_object *);
 
 /* InternetGatewayDevice.QueueManagement.Classification.i */
 extern zcfgRet_t qMgmtClsGet(char *, int, struct json_object **);
 extern zcfgRet_t qMgmtClsSet(char *, int, struct json_object *, struct json_object *);
 extern zcfgRet_t qMgmtClsAdd(char *, int *);
 extern zcfgRet_t qMgmtClsDel(char *);
+extern zcfgRet_t qMgmtClsNotify(char *, char *, struct json_object *, int, struct json_object **);
+extern int qMgmtClsAttrGet(char *, int, char *);
+extern zcfgRet_t qMgmtClsAttrSet(char *, int, char *, int , struct json_object *);
 
 /* InternetGatewayDevice.QueueManagement.X_ZYXEL_Shaper.i */
 extern zcfgRet_t qMgmtShaperGet(char *, int, struct json_object **);
 extern zcfgRet_t qMgmtShaperSet(char *, int, struct json_object *, struct json_object *);
 extern zcfgRet_t qMgmtShaperAdd(char *, int *);
 extern zcfgRet_t qMgmtShaperDel(char *);
+extern zcfgRet_t qMgmtShaperNotify(char *, char *, struct json_object *, int, struct json_object **);
+extern int qMgmtShaperAttrGet(char *, int, char *);
+extern zcfgRet_t qMgmtShaperAttrSet(char *, int, char *, int , struct json_object *);
 
 
 
Index: libzcfg_fe_tr98-1.0/schedule.c
===================================================================
--- libzcfg_fe_tr98-1.0.orig/schedule.c	2014-01-03 16:07:24.000000000 +0800
+++ libzcfg_fe_tr98-1.0/schedule.c	2014-03-14 13:45:45.091934100 +0800
@@ -155,3 +155,117 @@
 	return ret;
 }
 
+zcfgRet_t scheduleObjNotify(char *tr98ObjName, char *tr181ParamName, struct json_object *tr181ParamVal, int handler, struct json_object **tr98NotifyInfo)
+{
+	bool found = false;
+	char tr98Notify[256] = "";
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+
+	if(*tr98NotifyInfo == NULL) {
+		*tr98NotifyInfo = json_object_new_object();
+	}
+
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		if(strcmp(tr181ParamName, paramList->name) == 0) {
+			found = true;
+			sprintf(tr98Notify, "%s.%s", tr98ObjName, paramList->name);
+			break;
+		}
+		paramList++;
+	}
+
+	if(found) {
+		json_object_object_add(*tr98NotifyInfo, tr98Notify, JSON_OBJ_COPY(tr181ParamVal));
+	}
+
+	return ZCFG_SUCCESS;
+}
+
+int scheduleObjAttrGet(char *tr98FullPathName, int handler, char *paramName)
+{
+	char tr181Obj[128] = {0};
+	uint32_t  devInfoOid = 0;
+	objIndex_t devInfoIid;
+	int attrValue = ZCFG_NO_SUCH_PARAMETER;
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+
+	if(zcfgFe98To181MappingNameGet(tr98FullPathName, tr181Obj) != ZCFG_SUCCESS) {
+		return ZCFG_INVALID_OBJECT;
+	}
+	
+
+	IID_INIT(devInfoIid);
+	devInfoOid = zcfgFeObjNameToObjId(tr181Obj, &devInfoIid);
+		
+
+	/*fill up tr98 devInfo object*/
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		if(strcmp(paramList->name, paramName)){
+			paramList++;
+			continue;
+		}
+		
+		/*special case*/
+
+		attrValue = zcfgFeParamAttrGetByName(devInfoOid, paramList->name);
+		if(attrValue < 0 ) {
+			attrValue = 0;
+		}
+		break;
+	}
+	
+	return attrValue;
+}
+
+zcfgRet_t scheduleObjAttrSet(char *tr98FullPathName, int handler, char *paramName, int newNotify, struct json_object *multiAttrJobj)
+{
+	zcfgRet_t ret;
+	char tr181Obj[128] = {0};
+	uint32_t  devInfoOid = 0;
+	objIndex_t devInfoIid;
+	int attrValue = 0;
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+	if(zcfgFe98To181MappingNameGet(tr98FullPathName, tr181Obj) != ZCFG_SUCCESS) {
+		return ZCFG_INVALID_OBJECT;
+	}
+	
+
+	IID_INIT(devInfoIid);
+	devInfoOid = zcfgFeObjNameToObjId(tr181Obj, &devInfoIid);
+
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		/*find the matched parameter*/
+		if(strcmp(paramList->name, paramName)){
+			paramList++;
+			continue;
+		}
+		/*special case*/
+		
+		attrValue = zcfgFeParamAttrGetByName(devInfoOid, paramList->name);
+		if(attrValue < 0) {
+			ret = ZCFG_INVALID_ARGUMENTS;
+			break;
+		}
+
+		/*Write new parameter attribute from tr98 object to tr181 objects*/
+		attrValue = zcfgFeNotifyAttrValSet(attrValue, newNotify);
+		ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, paramList->name, attrValue);
+		if( ret != ZCFG_SUCCESS){
+			zcfgLog(ZCFG_LOG_ERR, "%s(): set %d %s attribute fail\n", __FUNCTION__, devInfoOid, paramList->name);
+		}
+		break;
+
+	} /*Edn while*/
+	
+	return ret;
+}
+
Index: libzcfg_fe_tr98-1.0/schedule.h
===================================================================
--- libzcfg_fe_tr98-1.0.orig/schedule.h	2014-01-03 16:07:24.000000000 +0800
+++ libzcfg_fe_tr98-1.0/schedule.h	2014-03-14 13:45:37.846562400 +0800
@@ -6,4 +6,7 @@
 extern zcfgRet_t scheduleObjSet(char *, int , struct json_object *, struct json_object *);
 extern zcfgRet_t scheduleObjAdd(char *, int *);
 extern zcfgRet_t scheduleObjDel(char *);
+extern zcfgRet_t scheduleObjNotify(char *, char *, struct json_object *, int, struct json_object **);
+extern int scheduleObjAttrGet(char *, int, char *);
+extern zcfgRet_t scheduleObjAttrSet(char *, int, char *, int , struct json_object *);
 
Index: libzcfg_fe_tr98-1.0/wanDev.c
===================================================================
--- libzcfg_fe_tr98-1.0.orig/wanDev.c	2014-03-14 14:13:48.996131925 +0800
+++ libzcfg_fe_tr98-1.0/wanDev.c	2014-03-14 13:46:12.974347900 +0800
@@ -3563,6 +3563,176 @@
 
 	return ret;
 }
+
+zcfgRet_t WANPortMappingNotify(char *tr98ObjName, char *tr181ParamName, struct json_object *tr181ParamVal, int handler, struct json_object **tr98NotifyInfo)
+{
+	bool found = false;
+	char tr98Notify[256] = "";
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+
+	if(*tr98NotifyInfo == NULL) {
+		*tr98NotifyInfo = json_object_new_object();
+	}
+
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		if(strcmp(tr181ParamName, paramList->name) == 0) {
+			found = true;
+			sprintf(tr98Notify, "%s.%s", tr98ObjName, paramList->name);
+			break;
+		}
+		
+		if(strcmp(tr181ParamName, "Enabled") == 0) {
+			found = true;
+			sprintf(tr98Notify, "%s.%s", tr98ObjName, "PortMappingEnabled");
+			break;
+		}
+
+		if(strcmp(tr181ParamName, "LeaseDuration") == 0) {
+			found = true;
+			sprintf(tr98Notify, "%s.%s", tr98ObjName, "PortMappingLeaseDuration");
+			break;
+		}
+		
+		if(strcmp(tr181ParamName, "Protocol") == 0) {
+			found = true;
+			sprintf(tr98Notify, "%s.%s", tr98ObjName, "PortMappingProtocol");
+			break;
+		}
+		
+		if(strcmp(tr181ParamName, "Description") == 0) {
+			found = true;
+			sprintf(tr98Notify, "%s.%s", tr98ObjName, "PortMappingDescription");
+			break;
+		}
+		
+		paramList++;
+	}
+
+	if(found) {
+		json_object_object_add(*tr98NotifyInfo, tr98Notify, JSON_OBJ_COPY(tr181ParamVal));
+	}
+
+	return ZCFG_SUCCESS;
+}
+
+int WANPortMappingAttrGet(char *tr98FullPathName, int handler, char *paramName)
+{
+	char tr181Obj[128] = {0};
+	uint32_t  devInfoOid = 0;
+	objIndex_t devInfoIid;
+	int attrValue = ZCFG_NO_SUCH_PARAMETER;
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+
+	if(zcfgFe98To181MappingNameGet(tr98FullPathName, tr181Obj) != ZCFG_SUCCESS) {
+		return ZCFG_INVALID_OBJECT;
+	}
+	
+
+	IID_INIT(devInfoIid);
+	devInfoOid = zcfgFeObjNameToObjId(tr181Obj, &devInfoIid);
+		
+
+	/*fill up tr98 devInfo object*/
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		if(strcmp(paramList->name, paramName)){
+			paramList++;
+			continue;
+		}
+		
+		/*special case*/
+		if(strcmp(paramList->name, "PortMappingEnabled") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "Enabled");
+		}else if(strcmp(paramList->name, "PortMappingLeaseDuration") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "LeaseDuration");
+		}else if(strcmp(paramList->name, "PortMappingProtocol") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "Protocol");
+		}else if(strcmp(paramList->name, "PortMappingDescription") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "Description");
+		}else{
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, paramList->name);
+		}
+		
+		if(attrValue < 0 ) {
+			attrValue = 0;
+		}
+		break;
+	}
+	
+	return attrValue;
+}
+
+zcfgRet_t WANPortMappingAttrSet(char *tr98FullPathName, int handler, char *paramName, int newNotify, struct json_object *multiAttrJobj)
+{
+	zcfgRet_t ret;
+	char tr181Obj[128] = {0};
+	uint32_t  devInfoOid = 0;
+	objIndex_t devInfoIid;
+	int attrValue = 0;
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+	if(zcfgFe98To181MappingNameGet(tr98FullPathName, tr181Obj) != ZCFG_SUCCESS) {
+		return ZCFG_INVALID_OBJECT;
+	}
+	
+
+	IID_INIT(devInfoIid);
+	devInfoOid = zcfgFeObjNameToObjId(tr181Obj, &devInfoIid);
+
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		/*find the matched parameter*/
+		if(strcmp(paramList->name, paramName)){
+			paramList++;
+			continue;
+		}
+		/*special case*/
+		if(strcmp(paramList->name, "PortMappingEnabled") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "Enabled");
+		}else if(strcmp(paramList->name, "PortMappingLeaseDuration") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "LeaseDuration");
+		}else if(strcmp(paramList->name, "PortMappingProtocol") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "Protocol");
+		}else if(strcmp(paramList->name, "PortMappingDescription") == 0){
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, "Description");
+		}else{
+			attrValue = zcfgFeParamAttrGetByName(devInfoOid, paramList->name);
+		}
+		if(attrValue < 0) {
+			ret = ZCFG_INVALID_ARGUMENTS;
+			break;
+		}
+
+		/*Write new parameter attribute from tr98 object to tr181 objects*/
+		attrValue = zcfgFeNotifyAttrValSet(attrValue, newNotify);
+		if(strcmp(paramList->name, "PortMappingEnabled") == 0){
+			ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, "Enabled", attrValue);
+		}else if(strcmp(paramList->name, "PortMappingLeaseDuration") == 0){
+			ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, "LeaseDuration", attrValue);
+		}else if(strcmp(paramList->name, "PortMappingProtocol") == 0){
+			ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, "Protocol", attrValue);
+		}else if(strcmp(paramList->name, "PortMappingDescription") == 0){
+			ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, "Description", attrValue);
+		}else{
+			ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, paramList->name, attrValue);
+		}
+		if( ret != ZCFG_SUCCESS){
+			zcfgLog(ZCFG_LOG_ERR, "%s(): set %d %s attribute fail\n", __FUNCTION__, devInfoOid, paramList->name);
+		}
+		break;
+
+	} /*Edn while*/
+	
+	return ret;
+}
+
+
 /*  
  *   TR98 Object Name : InternetGatewayDevice.WANDevice.i.WANConnectionDevice.i.WANIPConnection.i.Stats
  *			or InternetGatewayDevice.WANDevice.i.WANConnectionDevice.i.WANPPPConnection.i.Stats
Index: libzcfg_fe_tr98-1.0/wanDev.h
===================================================================
--- libzcfg_fe_tr98-1.0.orig/wanDev.h	2014-02-20 16:00:33.000000000 +0800
+++ libzcfg_fe_tr98-1.0/wanDev.h	2014-03-14 13:46:03.844982200 +0800
@@ -106,6 +106,9 @@
 extern zcfgRet_t WANPortMappingSet(char *, int, struct json_object *, struct json_object *);
 extern zcfgRet_t WANPortMappingAdd(char *, int *);
 extern zcfgRet_t WANPortMappingDel(char *);
+extern zcfgRet_t WANPortMappingNotify(char *, char *, struct json_object *, int, struct json_object **);
+extern int WANPortMappingAttrGet(char *, int, char *);
+extern zcfgRet_t WANPortMappingAttrSet(char *, int, char *, int , struct json_object *);
 
 /* InternetGatewayDevice.WANDevice.i.WANConnectionDevice.i.WANIPConnection.i.Stats */
 /* InternetGatewayDevice.WANDevice.i.WANConnectionDevice.i.WANPPPConnection.i.Stats */
Index: libzcfg_fe_tr98-1.0/zcfg_fe_tr98_handle.h
===================================================================
--- libzcfg_fe_tr98-1.0.orig/zcfg_fe_tr98_handle.h	2014-02-20 15:55:24.000000000 +0800
+++ libzcfg_fe_tr98-1.0/zcfg_fe_tr98_handle.h	2014-03-14 13:48:58.075850900 +0800
@@ -209,22 +209,22 @@
 {TR98_CAPT_PORTAL,              0,              NULL,                   NULL,                    NULL,                   NULL,             NULL,            NULL},
 {TR98_L3_FWD,                   0,              para_L3Fwd,             l3fwdObjGet,             NULL,                   NULL,             NULL,            NULL},
 {TR98_FWD,                      ATTR_INDEX_CREA,para_Fwd,               l3fwdFwdTbObjGet,        l3fwdFwdTbObjSet,       l3fwdFwdTbObjAdd, l3fwdFwdTbObjDel,NULL},
-{TR98_L2_BR,                    0,              para_L2Br,              l2BridingObjGet,         NULL,                   NULL,             NULL,            NULL},
-{TR98_BR,                       ATTR_INDEX_CREA,para_Br,                l2BrObjGet,              l2BrObjSet,             l2BrObjAdd,       l2BrObjDel,      NULL},
+{TR98_L2_BR,                    0,               para_L2Br,              l2BridingObjGet,         NULL,                   NULL,             NULL,            l2BridingObjNotify, l2BridingObjAttrGet, l2BridingObjAttrSet},
+{TR98_BR,                       ATTR_INDEX_CREA, para_Br,                l2BrObjGet,              l2BrObjSet,             l2BrObjAdd,       l2BrObjDel,      l2BrObjNotify, l2BrObjAttrGet, l2BrObjAttrSet},
 {TR98_PORT,                     ATTR_INDEXNODE, para_Port,              NULL,                    NULL,                   NULL,             NULL,            NULL},
-{TR98_VLAN,                     ATTR_INDEXNODE,	para_Vlan,              l2BrVlanObjGet,          l2BrVlanObjSet,                   NULL,             NULL,            NULL},
-{TR98_FILTER,                   ATTR_INDEX_CREA,para_Filter,            l2BrFilterObjGet,        l2BrFilterObjSet,       l2BrFilterObjAdd, l2BrFilterObjDel,NULL},
+{TR98_VLAN,                     ATTR_INDEXNODE,  para_Vlan,              l2BrVlanObjGet,          l2BrVlanObjSet,         NULL,             NULL,            l2BrVlanObjNotify, l2BrVlanObjAttrGet, l2BrVlanObjAttrSet},
+{TR98_FILTER,                   ATTR_INDEX_CREA, para_Filter,            l2BrFilterObjGet,        l2BrFilterObjSet,       l2BrFilterObjAdd, l2BrFilterObjDel,l2BrFilterObjNotify, l2BrFilterObjAttrGet, l2BrFilterObjAttrSet},
 {TR98_MARK,                     ATTR_INDEXNODE, para_Mark,              NULL,                    NULL,                   NULL,             NULL,            NULL},
-{TR98_AVAI_INTF,                ATTR_INDEXNODE, para_AvaiIntf,          l2BrAvailableIntfObjGet, NULL,                   NULL,             NULL,            NULL},
-{TR98_QUE_MGMT,                 0,              para_qMgmt,          	qMgmtGet,     			 qMgmtSet,               NULL,             NULL,            NULL},
-{TR98_CLS,                      ATTR_INDEX_CREA, para_Cls,          	qMgmtClsGet,			 qMgmtClsSet,            qMgmtClsAdd,      qMgmtClsDel,     NULL},
+{TR98_AVAI_INTF,                ATTR_INDEXNODE,  para_AvaiIntf,          l2BrAvailableIntfObjGet, NULL,                   NULL,             NULL,            l2BrAvailableIntfObjNotify, l2BrAvailableIntfObjAttrGet, l2BrAvailableIntfObjAttrSet},
+{TR98_QUE_MGMT,                 0,               para_qMgmt,          	qMgmtGet,     		   qMgmtSet,               NULL,             NULL,            qMgmtNotify, qMgmtAttrGet, qMgmtAttrSet},
+{TR98_CLS,                      ATTR_INDEX_CREA, para_Cls,          	qMgmtClsGet,			   qMgmtClsSet,            qMgmtClsAdd,      qMgmtClsDel,     qMgmtClsNotify, qMgmtClsAttrGet, qMgmtClsAttrSet},
 {TR98_APP,                      ATTR_INDEXNODE, NULL,                   NULL,                    NULL,                   NULL,             NULL,            NULL},
 {TR98_FLOW,                     ATTR_INDEXNODE, NULL,                   NULL,                    NULL,                   NULL,             NULL,            NULL},
 {TR98_POLICER,                  ATTR_INDEXNODE, NULL,                   NULL,                    NULL,                   NULL,             NULL,            NULL},
-{TR98_QUE,                      ATTR_INDEX_CREA, para_Que,              qMgmtQueGet,			 qMgmtQueSet,            qMgmtQueAdd,      qMgmtQueDel,     NULL},
-{TR98_SHAPER,					ATTR_INDEX_CREA, para_Shaper,			qMgmtShaperGet,			 qMgmtShaperSet,         qMgmtShaperAdd,   qMgmtShaperDel,     NULL},
+{TR98_QUE,                      ATTR_INDEX_CREA, para_Que,              qMgmtQueGet,			   qMgmtQueSet,            qMgmtQueAdd,      qMgmtQueDel,     qMgmtQueNotify, qMgmtQueAttrGet, qMgmtQueAttrSet},
+{TR98_SHAPER,                   ATTR_INDEX_CREA, para_Shaper,			qMgmtShaperGet,	   	   qMgmtShaperSet,         qMgmtShaperAdd,   qMgmtShaperDel,  qMgmtShaperNotify, qMgmtShaperAttrGet, qMgmtShaperAttrSet},
 {TR98_QUE_STAT,                 ATTR_INDEXNODE, NULL,                   NULL,                    NULL,                   NULL,             NULL,            NULL},
-{TR98_LAN_CONF_SEC,             0,              para_LanConfSec,        lanConfSecObjGet,        lanConfSecObjSet,       NULL,             NULL,            NULL},
+{TR98_LAN_CONF_SEC,             0,               para_LanConfSec,        lanConfSecObjGet,        lanConfSecObjSet,       NULL,             NULL,            lanConfSecObjNotify, lanConfSecObjAttrGet, lanConfSecObjAttrSet},
 {TR98_IP_PING_DIAG,             0,              para_IpPingDiag,        ipPingDiagObjGet,        ipPingDiagObjSet,       NULL,             NULL,            NULL},
 {TR98_TRA_RT_DIAG,              0,              para_TraceRtDiag,       traceRtDiagObjGet,       traceRtDiagObjSet,      NULL,             NULL,            NULL},
 {TR98_RT_HOP,                   ATTR_INDEXNODE, para_RtHop,		        routeHopsObjGet,         NULL,                   NULL,             NULL,            NULL},
@@ -244,12 +244,12 @@
 #ifdef IPV6SERVER_PROFILE
 {TR98_IP_INTF_DHCPV6SRV,        0,				para_IpIntfV6Srv,		lanIpIntfV6SrvObjGet,    lanIpIntfV6SrvObjSet,        NULL,  NULL,	NULL},
 #endif
-{TR98_DHCP_STATIC_ADDR,         ATTR_INDEX_CREA,para_DhcpStaticAddr,    lanDhcpStaticAddrObjGet, lanDhcpStaticAddrObjSet,lanDhcpStaticAddrObjAdd,lanDhcpStaticAddrObjDel,NULL},
-{TR98_DHCP_OPT,                 ATTR_INDEX_CREA,para_DhcpOpt,           lanDhcpOptObjGet,        lanDhcpOptObjSet,       lanDhcpOptObjAdd, lanDhcpOptObjDel,NULL},
+{TR98_DHCP_STATIC_ADDR,         ATTR_INDEX_CREA,para_DhcpStaticAddr,    lanDhcpStaticAddrObjGet, lanDhcpStaticAddrObjSet,lanDhcpStaticAddrObjAdd,lanDhcpStaticAddrObjDel, lanDhcpStaticAddrObjNotify, lanDhcpStaticAddrObjAttrGet, lanDhcpStaticAddrObjAttrSet},
+{TR98_DHCP_OPT,                 ATTR_INDEX_CREA,para_DhcpOpt,           lanDhcpOptObjGet,        lanDhcpOptObjSet,       lanDhcpOptObjAdd, lanDhcpOptObjDel,lanDhcpOptObjNotify, lanDhcpOptObjAttrGet, lanDhcpOptObjAttrSet},
 {TR98_DHCP_COND_SERVPOOL,       ATTR_INDEXNODE, para_DhcpCondServPool,  NULL,                    NULL,                   NULL,             NULL,            NULL},
 {TR98_SERVPOOL_DHCP_STATICADDR, ATTR_INDEXNODE,	para_DhcpCondServPoolDhcpStaticAddr,NULL,        NULL,                   NULL,             NULL,            NULL},
 {TR98_SERVPOOL_DHCP_OPT,        ATTR_INDEXNODE, para_DhcpCondServPoolDhcpOpt,NULL,               NULL,                   NULL,             NULL,            NULL},
-{TR98_LAN_ETH_INTF_CONF,        ATTR_INDEXNODE, para_LanEthIntfConf,    lanEthIntfConfObjGet,    lanEthIntfConfObjSet,   NULL,             NULL,            NULL},
+{TR98_LAN_ETH_INTF_CONF,        ATTR_INDEXNODE, para_LanEthIntfConf,    lanEthIntfConfObjGet,    lanEthIntfConfObjSet,   NULL,             NULL,            lanEthIntfConfObjNotify, lanEthIntfConfObjAttrGet, lanEthIntfConfObjAttrSet},
 {TR98_LAN_ETH_INTF_CONF_STAT,   0,              para_LanEthIntfConfStat,lanEthIntfConfStatObjGet,NULL,                   NULL,             NULL,            NULL},
 {TR98_LAN_USB_INTF_CONF,        ATTR_INDEXNODE, NULL,                   NULL,                    NULL,                   NULL,             NULL,            NULL},
 {TR98_LAN_USB_INTF_CONF_STAT,   0,              NULL,                   NULL,                    NULL,                   NULL,             NULL,            NULL},
@@ -294,7 +294,7 @@
 {TR98_DHCP_CLIENT,              0,              para_DhcpClient,        DhcpClientObjGet,        NULL,                   NULL,             NULL,            NULL},
 {TR98_SENT_DHCP_OPT,            ATTR_INDEX_CREA, para_SentDhcpOpt,      DhcpClientSentOptObjGet, DhcpClientSentOptObjSet,DhcpClientSentOptObjAdd, DhcpClientSentOptObjDel,            NULL},
 {TR98_REQ_DHCP_OPT,             ATTR_INDEX_CREA, para_ReqDhcpOpt,       DhcpClientReqOptObjGet,  DhcpClientReqOptObjSet, DhcpClientReqOptObjAdd, DhcpClientReqOptObjDel,            NULL},
-{TR98_WAN_IP_PORT_MAP,          ATTR_INDEX_CREA,para_WANIpPortMap,      WANPortMappingGet,       WANPortMappingSet,      WANPortMappingAdd,WANPortMappingDel,NULL},
+{TR98_WAN_IP_PORT_MAP,          ATTR_INDEX_CREA,para_WANIpPortMap,      WANPortMappingGet,       WANPortMappingSet,      WANPortMappingAdd,WANPortMappingDel,WANPortMappingNotify, WANPortMappingAttrGet, WANPortMappingAttrSet},
 {TR98_WAN_IP_CONN_STAT,         0,              para_WANIpConnStat,     WANConnStObjGet,         NULL,                   NULL,             NULL,            NULL},
 #ifdef IPV6INTERFACE_PROFILE
 {TR98_WAN_IP_CONN_IPV6ADDR,     ATTR_INDEX_CREA, para_WANIpv6Addr,      WANIpv6AddrObjGet,        WANIpv6AddrObjSet,     WANIpv6AddrObjAdd, WANIpv6AddrObjDel,            NULL},
@@ -319,15 +319,15 @@
 #ifdef IPV6RD_PROFILE
 {TR98_WAN_PPP_CONN_IPV6RD,      0,				para_WANPppv6Rd,        WANPppv6RdObjGet,         WANPppv6RdObjSet,        NULL,             NULL,            NULL},
 #endif
-{TR98_FIREWALL,                 0,              para_Firewall,          firewallObjGet,          firewallObjSet,         NULL,             NULL,            NULL},
-{TR98_FIREWALL_LEVEL,           ATTR_INDEX_CREA,para_FirewallLevel,     firewallLevelObjGet,     firewallLevelObjSet,    firewallLevelObjAdd,firewallLevelObjDel,NULL},
-{TR98_FIREWALL_CHAIN,           ATTR_INDEX_CREA,para_FirewallChain,     firewallChainObjGet,     firewallChainObjSet,    firewallChainObjAdd,firewallChainObjDel,NULL},
-{TR98_FIREWALL_CHAIN_RULE,      ATTR_INDEX_CREA,para_FirewallChainRule, firewallRuleObjGet,      firewallRuleObjSet,     firewallRuleObjAdd,firewallRuleObjDel,NULL},
+{TR98_FIREWALL,                 0,              para_Firewall,          firewallObjGet,          firewallObjSet,         NULL,             NULL,            firewallObjNotify, firewallObjAttrGet, firewallObjAttrSet},
+{TR98_FIREWALL_LEVEL,           ATTR_INDEX_CREA,para_FirewallLevel,     firewallLevelObjGet,     firewallLevelObjSet,    firewallLevelObjAdd,firewallLevelObjDel,firewallLevelObjNotify, firewallLevelObjAttrGet, firewallLevelObjAttrSet},
+{TR98_FIREWALL_CHAIN,           ATTR_INDEX_CREA,para_FirewallChain,     firewallChainObjGet,     firewallChainObjSet,    firewallChainObjAdd,firewallChainObjDel,firewallChainObjNotify, firewallChainObjAttrGet, firewallChainObjAttrSet},
+{TR98_FIREWALL_CHAIN_RULE,      ATTR_INDEX_CREA,para_FirewallChainRule, firewallRuleObjGet,      firewallRuleObjSet,     firewallRuleObjAdd,firewallRuleObjDel,firewallRuleObjNotify, firewallRuleObjAttrGet, firewallRuleObjAttrSet},
 #if ZYXEL_EXT
 {TR98_ZYXEL_EXT,             	0,				NULL,        			NULL,        			 NULL,       			 NULL, 				NULL,			NULL},
-{TR98_DNS_RT_ENTRY,             ATTR_INDEX_CREA,para_DnsRtEntry,        zyExtDnsRtObjGet,        zyExtDnsRtObjSet,       zyExtDnsRtObjAdd, zyExtDnsRtObjDel,NULL},
-{TR98_D_DNS,                    0,              para_DDns,              zyExtDDnsObjGet,         zyExtDDnsObjSet,        NULL,             NULL,            NULL},
-{TR98_SCHEDULE,                 ATTR_INDEX_CREA,para_Schedule,          scheduleObjGet,          scheduleObjSet,         scheduleObjAdd,   scheduleObjDel,  NULL},
+{TR98_DNS_RT_ENTRY,             ATTR_INDEX_CREA,para_DnsRtEntry,        zyExtDnsRtObjGet,        zyExtDnsRtObjSet,       zyExtDnsRtObjAdd, zyExtDnsRtObjDel,zyExtDnsRtObjNotify, zyExtDnsRtObjAttrGet, zyExtDnsRtObjAttrSet},
+{TR98_D_DNS,                    0,              para_DDns,              zyExtDDnsObjGet,         zyExtDDnsObjSet,        NULL,             NULL,            zyExtDDnsObjNotify, zyExtDDnsObjAttrGet, zyExtDDnsObjAttrSet},
+{TR98_SCHEDULE,                 ATTR_INDEX_CREA,para_Schedule,          scheduleObjGet,          scheduleObjSet,         scheduleObjAdd,   scheduleObjDel,  scheduleObjNotify, scheduleObjAttrGet, scheduleObjAttrSet},
 #endif
 #if OBSOLETED
 #else
Index: libzcfg_fe_tr98-1.0/zyExt.c
===================================================================
--- libzcfg_fe_tr98-1.0.orig/zyExt.c	2014-01-03 16:07:24.000000000 +0800
+++ libzcfg_fe_tr98-1.0/zyExt.c	2014-03-14 14:05:17.610564200 +0800
@@ -159,6 +159,122 @@
 
 	return zcfgFeObjStructDel(RDM_OID_DNS_RT_ENTRY, &objIid, NULL);;
 }
+
+zcfgRet_t zyExtDnsRtObjNotify(char *tr98ObjName, char *tr181ParamName, struct json_object *tr181ParamVal, int handler, struct json_object **tr98NotifyInfo)
+{
+	bool found = false;
+	char tr98Notify[256] = "";
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+
+	if(*tr98NotifyInfo == NULL) {
+		*tr98NotifyInfo = json_object_new_object();
+	}
+
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		if(strcmp(tr181ParamName, paramList->name) == 0) {
+			found = true;
+			sprintf(tr98Notify, "%s.%s", tr98ObjName, paramList->name);
+			break;
+		}
+		paramList++;
+	}
+
+	if(found) {
+		json_object_object_add(*tr98NotifyInfo, tr98Notify, JSON_OBJ_COPY(tr181ParamVal));
+	}
+
+	return ZCFG_SUCCESS;
+}
+
+int zyExtDnsRtObjAttrGet(char *tr98FullPathName, int handler, char *paramName)
+{
+	char tr181Obj[128] = {0};
+	uint32_t  devInfoOid = 0;
+	objIndex_t devInfoIid;
+	int attrValue = ZCFG_NO_SUCH_PARAMETER;
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+
+	if(zcfgFe98To181MappingNameGet(tr98FullPathName, tr181Obj) != ZCFG_SUCCESS) {
+		return ZCFG_INVALID_OBJECT;
+	}
+	
+
+	IID_INIT(devInfoIid);
+	devInfoOid = zcfgFeObjNameToObjId(tr181Obj, &devInfoIid);
+		
+
+	/*fill up tr98 devInfo object*/
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		if(strcmp(paramList->name, paramName)){
+			paramList++;
+			continue;
+		}
+		
+		/*special case*/
+
+		attrValue = zcfgFeParamAttrGetByName(devInfoOid, paramList->name);
+		if(attrValue < 0 ) {
+			attrValue = 0;
+		}
+		break;
+	}
+	
+	return attrValue;
+}
+
+zcfgRet_t zyExtDnsRtObjAttrSet(char *tr98FullPathName, int handler, char *paramName, int newNotify, struct json_object *multiAttrJobj)
+{
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	char tr181Obj[128] = {0};
+	uint32_t  devInfoOid = 0;
+	objIndex_t devInfoIid;
+	int attrValue = 0;
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+	if(zcfgFe98To181MappingNameGet(tr98FullPathName, tr181Obj) != ZCFG_SUCCESS) {
+		return ZCFG_INVALID_OBJECT;
+	}
+	
+
+	IID_INIT(devInfoIid);
+	devInfoOid = zcfgFeObjNameToObjId(tr181Obj, &devInfoIid);
+
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		/*find the matched parameter*/
+		if(strcmp(paramList->name, paramName)){
+			paramList++;
+			continue;
+		}
+		/*special case*/
+		
+		attrValue = zcfgFeParamAttrGetByName(devInfoOid, paramList->name);
+		if(attrValue < 0) {
+			ret = ZCFG_INVALID_ARGUMENTS;
+			break;
+		}
+
+		/*Write new parameter attribute from tr98 object to tr181 objects*/
+		attrValue = zcfgFeNotifyAttrValSet(attrValue, newNotify);
+		ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, paramList->name, attrValue);
+		if( ret != ZCFG_SUCCESS){
+			zcfgLog(ZCFG_LOG_ERR, "%s(): set %d %s attribute fail\n", __FUNCTION__, devInfoOid, paramList->name);
+		}
+		break;
+
+	} /*Edn while*/
+	
+	return ret;
+}
+
+
 /*
  *   TR98 Object Name : InternetGatewayDevice.X_ZYXEL_EXT.DynamicDNS
  *
@@ -260,4 +376,119 @@
 	}
 
 	return ZCFG_SUCCESS;
-}
\ No newline at end of file
+}
+
+zcfgRet_t zyExtDDnsObjNotify(char *tr98ObjName, char *tr181ParamName, struct json_object *tr181ParamVal, int handler, struct json_object **tr98NotifyInfo)
+{
+	bool found = false;
+	char tr98Notify[256] = "";
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+
+	if(*tr98NotifyInfo == NULL) {
+		*tr98NotifyInfo = json_object_new_object();
+	}
+
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		if(strcmp(tr181ParamName, paramList->name) == 0) {
+			found = true;
+			sprintf(tr98Notify, "%s.%s", tr98ObjName, paramList->name);
+			break;
+		}
+		paramList++;
+	}
+
+	if(found) {
+		json_object_object_add(*tr98NotifyInfo, tr98Notify, JSON_OBJ_COPY(tr181ParamVal));
+	}
+
+	return ZCFG_SUCCESS;
+}
+
+int zyExtDDnsObjAttrGet(char *tr98FullPathName, int handler, char *paramName)
+{
+	char tr181Obj[128] = {0};
+	uint32_t  devInfoOid = 0;
+	objIndex_t devInfoIid;
+	int attrValue = ZCFG_NO_SUCH_PARAMETER;
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+
+	if(zcfgFe98To181MappingNameGet(tr98FullPathName, tr181Obj) != ZCFG_SUCCESS) {
+		return ZCFG_INVALID_OBJECT;
+	}
+	
+
+	IID_INIT(devInfoIid);
+	devInfoOid = zcfgFeObjNameToObjId(tr181Obj, &devInfoIid);
+		
+
+	/*fill up tr98 devInfo object*/
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		if(strcmp(paramList->name, paramName)){
+			paramList++;
+			continue;
+		}
+		
+		/*special case*/
+
+		attrValue = zcfgFeParamAttrGetByName(devInfoOid, paramList->name);
+		if(attrValue < 0 ) {
+			attrValue = 0;
+		}
+		break;
+	}
+	
+	return attrValue;
+}
+
+zcfgRet_t zyExtDDnsObjAttrSet(char *tr98FullPathName, int handler, char *paramName, int newNotify, struct json_object *multiAttrJobj)
+{
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	char tr181Obj[128] = {0};
+	uint32_t  devInfoOid = 0;
+	objIndex_t devInfoIid;
+	int attrValue = 0;
+	tr98Parameter_t *paramList = NULL;
+
+	zcfgLog(ZCFG_LOG_DEBUG, "Enter %s\n", __FUNCTION__);
+	if(zcfgFe98To181MappingNameGet(tr98FullPathName, tr181Obj) != ZCFG_SUCCESS) {
+		return ZCFG_INVALID_OBJECT;
+	}
+	
+
+	IID_INIT(devInfoIid);
+	devInfoOid = zcfgFeObjNameToObjId(tr181Obj, &devInfoIid);
+
+	paramList = tr98Obj[handler].parameter;
+	while(paramList->name != NULL) {
+		/*find the matched parameter*/
+		if(strcmp(paramList->name, paramName)){
+			paramList++;
+			continue;
+		}
+		/*special case*/
+		
+		attrValue = zcfgFeParamAttrGetByName(devInfoOid, paramList->name);
+		if(attrValue < 0) {
+			ret = ZCFG_INVALID_ARGUMENTS;
+			break;
+		}
+
+		/*Write new parameter attribute from tr98 object to tr181 objects*/
+		attrValue = zcfgFeNotifyAttrValSet(attrValue, newNotify);
+		ret = zcfgFeMultiParamAttrAppend(devInfoOid, multiAttrJobj, paramList->name, attrValue);
+		if( ret != ZCFG_SUCCESS){
+			zcfgLog(ZCFG_LOG_ERR, "%s(): set %d %s attribute fail\n", __FUNCTION__, devInfoOid, paramList->name);
+		}
+		break;
+
+	} /*Edn while*/
+	
+	return ret;
+}
+
Index: libzcfg_fe_tr98-1.0/zyExt.h
===================================================================
--- libzcfg_fe_tr98-1.0.orig/zyExt.h	2014-01-03 16:07:24.000000000 +0800
+++ libzcfg_fe_tr98-1.0/zyExt.h	2014-03-14 13:46:32.102725900 +0800
@@ -9,7 +9,13 @@
 extern zcfgRet_t zyExtDnsRtObjSet(char *, int , struct json_object *, struct json_object *);
 extern zcfgRet_t zyExtDnsRtObjAdd(char *, int *);
 extern zcfgRet_t zyExtDnsRtObjDel(char *);
+extern zcfgRet_t zyExtDnsRtObjNotify(char *, char *, struct json_object *, int, struct json_object **);
+extern int zyExtDnsRtObjAttrGet(char *, int, char *);
+extern zcfgRet_t zyExtDnsRtObjAttrSet(char *, int, char *, int , struct json_object *);
 
 /*InternetGatewayDevice.X_ZYXEL_EXT.DynamicDNS*/
 extern zcfgRet_t zyExtDDnsObjGet(char *, int, struct json_object **);
-extern zcfgRet_t zyExtDDnsObjSet(char *, int, struct json_object *, struct json_object *);
\ No newline at end of file
+extern zcfgRet_t zyExtDDnsObjSet(char *, int, struct json_object *, struct json_object *);
+extern zcfgRet_t zyExtDDnsObjNotify(char *, char *, struct json_object *, int, struct json_object **);
+extern int zyExtDDnsObjAttrGet(char *, int, char *);
+extern zcfgRet_t zyExtDDnsObjAttrSet(char *, int, char *, int , struct json_object *);
\ No newline at end of file
