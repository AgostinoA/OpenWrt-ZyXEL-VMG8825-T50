Index: libzcfg_fe_tr98-1.0/lanDev.c
===================================================================
--- libzcfg_fe_tr98-1.0.orig/lanDev.c	2018-04-18 10:36:39.475354078 +0800
+++ libzcfg_fe_tr98-1.0/lanDev.c	2018-04-18 10:39:45.485691400 +0800
@@ -3472,7 +3472,7 @@
 
 	zcfgRet_t ret;
 	char mappingPathName[128] = {0};
-	char tr181Obj[128] = {0};
+	//char tr181Obj[128] = {0};
 	uint32_t Oid = 0;
 	objIndex_t Iid;
 	struct json_object *Jobj = NULL;
@@ -3487,18 +3487,57 @@
 	}
 
 	IID_INIT(Iid);
-	sprintf(tr181Obj, "Device.%s", mappingPathName);
-	Oid = zcfgFeObjNameToObjId(tr181Obj, &Iid);
-	if((ret = feObjJsonGet(Oid, &Iid, &Jobj, updateFlag)) != ZCFG_SUCCESS){
+	//sprintf(tr181Obj, "Device.%s", mappingPathName);
+	Oid = RDM_OID_DHCPV4_SRV_POOL;
+	Iid.level += 1;
+
+	int n = sscanf(mappingPathName, "DHCPv4.Server.Pool.%hhu", &Iid.idx[0]);
+	if(n != 1 || (ret = feObjJsonGet(RDM_OID_DHCPV4_SRV_POOL, &Iid, &Jobj, updateFlag)) != ZCFG_SUCCESS){
 		zcfgLog(ZCFG_LOG_ERR, "%s() feObjJsonGet Fail!! Oid=%u ret=%d\n\n", __FUNCTION__, Oid, ret);
 		return ret;
 	}
 
-	/*fill up tr98 LANEthernetInterfaceConfig object*/
 	*tr98Jobj = json_object_new_object();
+
+	const char *ipIface = json_object_get_string(json_object_object_get(Jobj, "Interface"));
+	if(ipIface){
+		struct json_object *ipIfaceAddrObj = NULL;
+		objIndex_t ipIfaceAddrIid;
+		IID_INIT(ipIfaceAddrIid);
+		ipIfaceAddrIid.level = 2;
+		int n = sscanf(ipIface, "IP.Interface.%hhu", &ipIfaceAddrIid.idx[0]);
+		ipIfaceAddrIid.idx[1] = 1;
+		if((n = 1) && zcfgFeObjJsonGet(RDM_OID_IP_IFACE_V4_ADDR, &ipIfaceAddrIid, &ipIfaceAddrObj) == ZCFG_SUCCESS){
+			const char *ipAddr = json_object_get_string(json_object_object_get(ipIfaceAddrObj, "IPAddress"));
+			json_object_object_add(*tr98Jobj, "DHCPServerIPAddress", json_object_new_string(ipAddr));
+			json_object_put(ipIfaceAddrObj);
+		}else{
+			json_object_object_add(*tr98Jobj, "DHCPServerIPAddress", json_object_new_string(""));
+		}
+	}else{
+		json_object_object_add(*tr98Jobj, "DHCPServerIPAddress", json_object_new_string(""));
+	}
+
+	/*fill up tr98 LANEthernetInterfaceConfig object*/
 	paramList = tr98Obj[handler].parameter;
 	while(paramList->name != NULL) {
 		paramValue = json_object_object_get(Jobj, paramList->name);
+
+		if(!paramValue){
+			if(strstr(paramList->name, "Order")){
+				paramValue = json_object_object_get(Jobj, "Order");
+			}
+			else if(strstr(paramList->name, "LeaseTime")){
+				paramValue = json_object_object_get(Jobj, "LeaseTime");
+			}
+			else if(strstr(paramList->name, "StaticAddressNumberOfEntries")){
+				paramValue = json_object_object_get(Jobj, "StaticAddressNumberOfEntries");
+			}
+			else if(strstr(paramList->name, "OptionNumberOfEntries")){
+				paramValue = json_object_object_get(Jobj, "OptionNumberOfEntries");
+			}
+		}
+
 		if(paramValue != NULL) {
 			json_object_object_add(*tr98Jobj, paramList->name, JSON_OBJ_COPY(paramValue));
 			paramList++;
@@ -3514,12 +3553,13 @@
 	return ZCFG_SUCCESS;
 }
 
+// TR98 Object Name : InternetGatewayDevice.LANDevice.i.LANHostConfigManagement.DHCPConditionalServingPool.i
 zcfgRet_t lanDhcpCondServPoolObjSet(char *tr98FullPathName, int handler, struct json_object *tr98Jobj, struct json_object *multiJobj, char *paramfault)
 {
 
 	zcfgRet_t ret;
 	char mappingPathName[128] = {0};
-	char tr181Obj[128] = {0};
+	//char tr181Obj[128] = {0};
 	uint32_t Oid = 0;
 	objIndex_t Iid;
 	struct json_object *Jobj = NULL;
@@ -3536,9 +3576,11 @@
 	}
 
 	IID_INIT(Iid);
-	sprintf(tr181Obj, "Device.%s", mappingPathName);
-	Oid = zcfgFeObjNameToObjId(tr181Obj, &Iid);
-	if((ret = zcfgFeObjJsonGet(Oid, &Iid, &Jobj)) != ZCFG_SUCCESS){
+	//sprintf(tr181Obj, "Device.%s", mappingPathName);
+	Oid = RDM_OID_DHCPV4_SRV_POOL;
+	Iid.level += 1;
+	int n = sscanf(mappingPathName, "DHCPv4.Server.Pool.%hhu", &Iid.idx[0]);
+	if(n != 1 || (ret = zcfgFeObjJsonGet(RDM_OID_DHCPV4_SRV_POOL, &Iid, &Jobj)) != ZCFG_SUCCESS){
 		return ret;
 	}
 	if(multiJobj){
@@ -3556,8 +3598,20 @@
 			tr181ParamValue = json_object_object_get(Jobj, paramList->name);
 			if(tr181ParamValue != NULL) {
 				json_object_object_add(Jobj, paramList->name, JSON_OBJ_COPY(paramValue));
-				paramList++;
-				continue;
+				//paramList++;
+				//continue;
+			}
+			else if(strstr(paramList->name, "Order")){
+				json_object_object_add(Jobj, "Order", JSON_OBJ_COPY(paramValue));
+			}
+			else if(strstr(paramList->name, "LeaseTime")){
+				json_object_object_add(Jobj, "LeaseTime", JSON_OBJ_COPY(paramValue));
+			}
+			else if(strstr(paramList->name, "StaticAddressNumberOfEntries")){
+				json_object_object_add(Jobj, "StaticAddressNumberOfEntries", JSON_OBJ_COPY(paramValue));
+			}
+			else if(strstr(paramList->name, "OptionNumberOfEntries")){
+				json_object_object_add(Jobj, "OptionNumberOfEntries", JSON_OBJ_COPY(paramValue));
 			}		
 		}
 
@@ -3581,6 +3635,7 @@
 	return ZCFG_SUCCESS;
 }
 
+// TR98 Object Name : InternetGatewayDevice.LANDevice.i.LANHostConfigManagement.DHCPConditionalServingPool.i
 zcfgRet_t lanDhcpCondServPoolObjAdd(char *tr98FullPathName, int *idx)
 {
 	zcfgRet_t ret;
@@ -3670,11 +3725,12 @@
 	return ret;
 }
 
+// TR98 Object Name : InternetGatewayDevice.LANDevice.i.LANHostConfigManagement.DHCPConditionalServingPool.i
 zcfgRet_t lanDhcpCondServPoolObjDel(char *tr98FullPathName)
 {
 	zcfgRet_t ret;
 	char mappingPathName[128] = {0};
-	char tr181Obj[128] = {0};
+	//char tr181Obj[128] = {0};
 	uint32_t  Oid = 0;
 	objIndex_t Iid;
 
@@ -3687,8 +3743,10 @@
 	
 
 	IID_INIT(Iid);
-	sprintf(tr181Obj, "Device.%s", mappingPathName);
-	Oid = zcfgFeObjNameToObjId(tr181Obj, &Iid);
+	//sprintf(tr181Obj, "Device.%s", mappingPathName);
+	Oid = RDM_OID_DHCPV4_SRV_POOL;
+	Iid.level += 1;
+	int n = sscanf(mappingPathName, "DHCPv4.Server.Pool.%hhu", &Iid.idx[0]);
 
 	ret = zcfgFeObjJsonDel(Oid, &Iid, NULL);
 	if(ret == ZCFG_SUCCESS) {
@@ -3704,7 +3762,7 @@
 	return ret;
 }
 
-
+#if 0
 zcfgRet_t lanDhcpCondServPoolObjNotify(char *tr98ObjName, char *tr181ParamName, struct json_object *tr181ParamVal, int handler, struct json_object **tr98NotifyInfo)
 {
 	bool found = false;
@@ -3825,7 +3883,7 @@
 	
 	return ret;
 }
-
+#endif
 #if 0
 
 /*  TR98 Object Name : InternetGatewayDevice.LANDevice.i.LANHostConfigManagement.DHCPConditionalServingPool.i.DHCPStaticAddress.i
@@ -3891,7 +3949,6 @@
 	return ZCFG_SUCCESS;
 }
 
-
 /*  TR98 Object Name : InternetGatewayDevice.LANDevice.i.LANHostConfigManagement.DHCPConditionalServingPool.i.DHCPOption.i
 
     Related object in TR181:
Index: libzcfg_fe_tr98-1.0/zcfg_fe_tr98_handle.h
===================================================================
--- libzcfg_fe_tr98-1.0.orig/zcfg_fe_tr98_handle.h	2018-04-18 10:36:39.455354078 +0800
+++ libzcfg_fe_tr98-1.0/zcfg_fe_tr98_handle.h	2018-04-18 10:36:39.523354078 +0800
@@ -452,7 +452,8 @@
 {TR98_VENDOR_SPECIFIC,                 0,              para_VendorSpecific,          zyExtVendorSpecObjGet,          zyExtVendorSpecObjSet,         NULL,             NULL,            NULL, NULL, NULL},
 {TR98_VENDOR_SPECIFIC_PROF,           ATTR_INDEX_CREA, para_VendorSpecificProf,     zyExtVendorSpecProfObjGet,     zyExtVendorSpecProfObjSet,    zyExtVendorSpecProfObjAdd,zyExtVendorSpecProfObjDel,NULL, NULL, NULL},
 #endif
-{TR98_DHCP_COND_SERVPOOL,       ATTR_INDEX_CREA,para_DhcpCondServPool,  lanDhcpCondServPoolObjGet,  lanDhcpCondServPoolObjSet,  lanDhcpCondServPoolObjAdd,  lanDhcpCondServPoolObjDel, lanDhcpCondServPoolObjNotify, lanDhcpCondServPoolObjAttrGet, lanDhcpCondServPoolObjAttrSet},
+//{TR98_DHCP_COND_SERVPOOL,       ATTR_INDEX_CREA,para_DhcpCondServPool,  lanDhcpCondServPoolObjGet,  lanDhcpCondServPoolObjSet,  lanDhcpCondServPoolObjAdd,  lanDhcpCondServPoolObjDel, lanDhcpCondServPoolObjNotify, lanDhcpCondServPoolObjAttrGet, lanDhcpCondServPoolObjAttrSet},
+{TR98_DHCP_COND_SERVPOOL,       ATTR_INDEX_CREA,para_DhcpCondServPool,  lanDhcpCondServPoolObjGet,  lanDhcpCondServPoolObjSet,  lanDhcpCondServPoolObjAdd,  lanDhcpCondServPoolObjDel, NULL, NULL, NULL},
 {TR98_SERVPOOL_DHCP_STATICADDR, ATTR_INDEX_CREA,para_DhcpCondServPoolDhcpStaticAddr,NULL, NULL, NULL, NULL, NULL, NULL, NULL},
 {TR98_SERVPOOL_DHCP_OPT,        ATTR_INDEX_CREA,para_DhcpCondServPoolDhcpOpt,NULL,  NULL,  NULL,  NULL, NULL, NULL, NULL},
 {TR98_LAN_ETH_INTF_CONF,        ATTR_INDEXNODE, para_LanEthIntfConf,    lanEthIntfConfObjGet,    lanEthIntfConfObjSet,   NULL,             NULL,            lanEthIntfConfObjNotify, lanEthIntfConfObjAttrGet, lanEthIntfConfObjAttrSet},
Index: libzcfg_fe_tr98-1.0/lanDev_parameter.h
===================================================================
--- libzcfg_fe_tr98-1.0.orig/lanDev_parameter.h	2018-04-18 10:41:22.853459600 +0800
+++ libzcfg_fe_tr98-1.0/lanDev_parameter.h	2018-04-18 10:41:39.780152100 +0800
@@ -174,7 +174,7 @@
 	{ "Chaddr", PARAMETER_ATTR_WRITE, 19, json_type_string},	
 	{ "ChaddrMask", PARAMETER_ATTR_WRITE, 19, json_type_string},	
 	{ "ChaddrExclude", PARAMETER_ATTR_WRITE, 0, json_type_boolean},	
-	{ "LocallyServed", PARAMETER_ATTR_WRITE, 0, json_type_boolean},	
+	//{ "LocallyServed", PARAMETER_ATTR_WRITE, 0, json_type_boolean},
 	{ "MinAddress", PARAMETER_ATTR_WRITE, 9, json_type_string},	
 	{ "MaxAddress", PARAMETER_ATTR_WRITE, 17, json_type_string},	
 	{ "ReservedAddresses", PARAMETER_ATTR_WRITE, 513, json_type_string},	
@@ -183,8 +183,8 @@
 	{ "DomainName", PARAMETER_ATTR_WRITE, 65, json_type_string},	
 	{ "IPRouters", PARAMETER_ATTR_WRITE, 65, json_type_string},	
 	{ "DHCPLeaseTime", PARAMETER_ATTR_WRITE, 0, json_type_int},	
-	{ "UseAllocatedWAN", PARAMETER_ATTR_WRITE, 13, json_type_string},	
-	{ "AssociatedConnection", PARAMETER_ATTR_WRITE, 257, json_type_string},	
+	//{ "UseAllocatedWAN", PARAMETER_ATTR_WRITE, 13, json_type_string},
+	//{ "AssociatedConnection", PARAMETER_ATTR_WRITE, 257, json_type_string},
 	{ "DHCPServerIPAddress", PARAMETER_ATTR_WRITE, 17, json_type_string},	
 	{ "DHCPStaticAddressNumberOfEntries", PARAMETER_ATTR_READONLY, 0, json_type_uint32},	
 	{ "DHCPOptionNumberOfEntries", PARAMETER_ATTR_READONLY, 0, json_type_uint32},
