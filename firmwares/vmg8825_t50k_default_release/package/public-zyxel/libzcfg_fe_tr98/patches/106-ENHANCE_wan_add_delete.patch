Index: libzcfg_fe_tr98-1.0/wanDev.c
===================================================================
--- libzcfg_fe_tr98-1.0.orig/wanDev.c	2015-03-12 15:49:12.738185949 +0800
+++ libzcfg_fe_tr98-1.0/wanDev.c	2015-03-12 15:48:35.470185234 +0800
@@ -15,6 +15,9 @@
 
 #include "wanDev_api.h"
 
+
+#define WAN_ADD_INDIVIDUAL
+
 extern tr98Object_t tr98Obj[];
 
 extern zcfgRet_t zcfgFeTr181IfaceStackHigherLayerGet(char *, char *);
@@ -1138,18 +1141,20 @@
 	/*Delete WANIPConnection*/
 	for(c = 1; c <= ipcount; c++) {
 		sprintf(wanIpConnName, "%s.WANIPConnection.1", tr98FullPathName);
-		if(WANIpConnObjDel(wanIpConnName) != ZCFG_SUCCESS) {
+		ret = WANIpConnObjDel(wanIpConnName);
+		if((ret != ZCFG_SUCCESS) && (ret != ZCFG_DELAY_APPLY)) {
 			printf("%s : Delete %s fail\n", __FUNCTION__, wanIpConnName);
-			return ZCFG_INTERNAL_ERROR;
+			return ret;
 		}
 	}
 
 	/*Delete WANPPPConnection*/
 	for(c = 1; c <= pppcount; c++) {
 		sprintf(wanPppConnName, "%s.WANPPPConnection.1", tr98FullPathName);
-		if(WANPppConnObjDel(wanPppConnName) != ZCFG_SUCCESS) {
+		ret = WANPppConnObjDel(wanPppConnName);
+		if((ret != ZCFG_SUCCESS) && (ret != ZCFG_DELAY_APPLY)) {
 			printf("%s : Delete %s fail\n", __FUNCTION__, wanPppConnName);
-			return ZCFG_INTERNAL_ERROR;
+			return ret;
 		}
 		else {
 			printf("%s : Delete %s Success\n", __FUNCTION__, wanPppConnName);
@@ -1872,7 +1877,6 @@
 	*tr98Jobj = json_object_new_object();
 	paramList = tr98Obj[handler].parameter;
 	while(paramList->name != NULL) {
-#ifdef SUNRISE_TR98_CUSTOMIZATION // Sunrise, special case: the same parameter name.
 		if(!strcmp(paramList->name, "Name")) {
 			paramValue = json_object_object_get(ipIfaceJobj, "X_ZYXEL_SrvName");
 			if(paramValue != NULL) {
@@ -1884,7 +1888,7 @@
 			paramList++;
 			continue;
 		}
-#endif
+
 		paramValue = json_object_object_get(ipIfaceJobj, paramList->name);
 		if(paramValue != NULL) {
 			json_object_object_add(*tr98Jobj, paramList->name, JSON_OBJ_COPY(paramValue));
@@ -2010,7 +2014,7 @@
 
 			paramList++;
 			continue;
-		}		
+		}
 #ifdef IPV6INTERFACE_PROFILE		
 		else if(!strcmp(paramList->name, "X_ZYXEL_IPv6Enable")) {
 			paramValue = json_object_object_get(ipIfaceJobj, "IPv6Enable");
@@ -2210,21 +2214,19 @@
 		paramValue = json_object_object_get(tr98Jobj, paramList->name);
 		if(paramValue != NULL) {
 			/*Write value from WANIPConnection to Device.IP.Interface.i*/
-#ifdef SUNRISE_TR98_CUSTOMIZATION // Sunrise
 			if(!strcmp(paramList->name, "Name")){
 				tr181ParamValue = json_object_object_get(ipIfaceJobj, "X_ZYXEL_SrvName");
 			}
-			else
-#endif
-			tr181ParamValue = json_object_object_get(ipIfaceJobj, paramList->name);
+			else {
+				tr181ParamValue = json_object_object_get(ipIfaceJobj, paramList->name);
+			}
 			if(tr181ParamValue != NULL) {
-#ifdef SUNRISE_TR98_CUSTOMIZATION // Sunrise
 				if(!strcmp(paramList->name, "Name")){
 					json_object_object_add(ipIfaceJobj, "X_ZYXEL_SrvName", JSON_OBJ_COPY(paramValue));
 				}
 				else
-#endif
-				json_object_object_add(ipIfaceJobj, paramList->name, JSON_OBJ_COPY(paramValue));
+					json_object_object_add(ipIfaceJobj, paramList->name, JSON_OBJ_COPY(paramValue));
+
 				paramList++;
 				continue;
 			}
@@ -2345,6 +2347,13 @@
 	if(!strcmp(connType, "IP_Routed")) {
 		/*Set IP Address*/
 		ret = ipaddrSet(devIpIface, &ipIfaceIid, addrType, tr98Jobj);
+		if((ret != ZCFG_SUCCESS) && (ret != ZCFG_DELAY_APPLY)) {
+			printf("%s: ipaddrSet return %d\n", __FUNCTION__, ret);
+			return ret;
+		}
+		else { 
+			ret = ZCFG_SUCCESS;
+		}
 	}
 
 	/*Set Device.IP.Interface.i*/
@@ -2405,6 +2414,13 @@
 
 	return ret;
 }
+
+#ifdef WAN_ADD_INDIVIDUAL
+enum {
+	WAN_IPCONN_EINTELVLIP,
+	WAN_IPCONN_ATMIP
+};
+#endif
 /*  
  *   TR98 Object Name : InternetGatewayDevice.WANDevice.i.WANConnectionDevice.i.WANIPConnection.i
  *
@@ -2420,13 +2436,18 @@
 	char ethLinkPathName[32] = {0};
 	char vlanTermPathName[32] = {0};
 	char ipIfacePathName[32] = {0};
-	char higherLayer[64] = {0};
 	char tr98TmpName[TR98_MAX_OBJ_NAME_LENGTH] = {0};  /*tr98TmpName is used to look up mapping table*/
 	uint32_t  wanLinkOid = 0;
 	objIndex_t wanLinkIid;
 	char *ptr = NULL;
 	rdm_AtmLink_t *atmLinkObj = NULL;
+#ifdef WAN_ADD_INDIVIDUAL
+	int wanIpConnType = WAN_IPCONN_EINTELVLIP;
+	char *wanLinkName = NULL;
+#else
+	char higherLayer[64] = {0};
 	rdm_PtmLink_t *ptmLinkObj = NULL;
+#endif
 
 	zcfgLog(ZCFG_LOG_INFO, "%s : Enter\n", __FUNCTION__);
 
@@ -2456,6 +2477,76 @@
 		sprintf(tr181Obj, "Device.%s", wanLinkObj);
 		wanLinkOid = zcfgFeObjNameToObjId(tr181Obj, &wanLinkIid);
 
+#ifdef WAN_ADD_INDIVIDUAL
+		if(wanLinkOid == RDM_OID_ATM_LINK) {
+			printf("ATM Link\n");
+			if((ret = zcfgFeObjStructGet(RDM_OID_ATM_LINK, &wanLinkIid, (void **)&atmLinkObj)) != ZCFG_SUCCESS) {
+				return ret;
+			}
+
+			if(strcmp(atmLinkObj->LinkType, "EoA") == 0) {
+				wanIpConnType = WAN_IPCONN_EINTELVLIP;
+			}
+			else if(strcmp(atmLinkObj->LinkType, "IPoA") == 0) {
+				wanIpConnType = WAN_IPCONN_ATMIP;
+			}
+			else {
+				printf("ATM Link type %s not supported\n", atmLinkObj->LinkType);
+				zcfgFeObjStructFree(atmLinkObj);
+				return ZCFG_INVALID_PARAM_VALUE;
+			}
+			zcfgFeObjStructFree(atmLinkObj);
+		}
+		wanLinkName = wanLinkObj;
+	}
+	else if(strstr(wanIntfObj, "Ethernet") != NULL) { // Ethernet WAN
+		wanIpConnType = WAN_IPCONN_EINTELVLIP;
+		wanLinkName = wanIntfObj;
+	}
+	else {
+		return ZCFG_INTERNAL_ERROR;
+	}
+
+	if(wanIpConnType == WAN_IPCONN_EINTELVLIP) {
+		/*Add Device.Ethernet.Link.i*/
+		ret = ethLinkAdd(ethLinkPathName, wanLinkName);
+		if((ret != ZCFG_SUCCESS) && (ret != ZCFG_DELAY_APPLY)) {
+			return ret;
+		}
+
+		/*add Device.Ethernet.VLANTermination.i*/
+		ret = vlanTermAdd(vlanTermPathName, ethLinkPathName);
+		if((ret != ZCFG_SUCCESS) && (ret != ZCFG_DELAY_APPLY)) {
+			return ret;
+		}
+
+		/*Add Device.IP.Interface.i*/
+		ret = ipIfaceAdd(ipIfacePathName, vlanTermPathName);
+		if((ret != ZCFG_SUCCESS) && (ret != ZCFG_DELAY_APPLY)) {
+			printf("%s : Add Device.IP.Interface.i fail\n", __FUNCTION__);
+			return ret;
+		}
+
+	}
+	else if(wanIpConnType == WAN_IPCONN_ATMIP) {
+		printf("ATM Link type is IPoA\n");
+		/*Add Device.IP.Interface.i ?*/
+		ret = ipIfaceAdd(ipIfacePathName, wanLinkName);
+		if((ret != ZCFG_SUCCESS) && (ret != ZCFG_DELAY_APPLY)) {
+			return ret;
+		}
+
+	}
+
+	if(ret == ZCFG_SUCCESS) {
+		if((ret = zcfgFe181To98MappingNameGet(ipIfacePathName, wanIpConnObj)) != ZCFG_SUCCESS) {
+			return ret;
+		}
+	}
+
+	sscanf(wanIpConnObj, "%*[^.].%*[^.].%*d.%*[^.].%*d.WANIPConnection.%d", idx);
+
+#else
 		if(wanLinkOid == RDM_OID_ATM_LINK) {
 			printf("ATM Link\n");
 			if((ret = zcfgFeObjStructGet(RDM_OID_ATM_LINK, &wanLinkIid, (void **)&atmLinkObj)) != ZCFG_SUCCESS) {
@@ -2467,26 +2558,31 @@
 			if(ret == ZCFG_NO_SUCH_OBJECT) {
 				if(strcmp(atmLinkObj->LinkType, "EoA") == 0) {
 					/*Add Device.Ethernet.Link.i*/
-					if((ret = ethLinkAdd(ethLinkPathName, wanLinkObj)) != ZCFG_SUCCESS) {
+					ret = ethLinkAdd(ethLinkPathName, wanLinkObj);
+					if((ret != ZCFG_SUCCESS) && (ret != ZCFG_DELAY_APPLY)) {
 						zcfgFeObjStructFree(atmLinkObj);
 						return ret;
 					}
 
 					/*add Device.Ethernet.VLANTermination.i*/
-					if((ret = vlanTermAdd(vlanTermPathName, ethLinkPathName)) != ZCFG_SUCCESS) {
+					ret = vlanTermAdd(vlanTermPathName, ethLinkPathName);
+					if((ret != ZCFG_SUCCESS) && (ret != ZCFG_DELAY_APPLY)) {
 						zcfgFeObjStructFree(atmLinkObj);
 						return ret;
 					}
 
 					/*Add Device.IP.Interface.i*/
-					if((ret = ipIfaceAdd(ipIfacePathName, vlanTermPathName)) != ZCFG_SUCCESS) {
+					ret = ipIfaceAdd(ipIfacePathName, vlanTermPathName);
+					if((ret != ZCFG_SUCCESS) && (ret != ZCFG_DELAY_APPLY)) {
 						zcfgFeObjStructFree(atmLinkObj);
 						return ret;
 					}
 
-					if((ret = zcfgFe181To98MappingNameGet(ipIfacePathName, wanIpConnObj)) != ZCFG_SUCCESS) {
-						zcfgFeObjStructFree(atmLinkObj);
-						return ret;
+					if(ret == ZCFG_SUCCESS) { 
+						if((ret = zcfgFe181To98MappingNameGet(ipIfacePathName, wanIpConnObj)) != ZCFG_SUCCESS) {
+							zcfgFeObjStructFree(atmLinkObj);
+							return ret;
+						}
 					}
 
 					sscanf(wanIpConnObj, "%*[^.].%*[^.].%*d.%*[^.].%*d.WANIPConnection.%d", idx);
@@ -2494,6 +2590,20 @@
 				else if(strcmp(atmLinkObj->LinkType, "IPoA") == 0) {
 					printf("ATM Link type is IPoA\n");
 					/*Add Device.IP.Interface.i ?*/
+					ret = ipIfaceAdd(ipIfacePathName, wanLinkObj);
+					if((ret != ZCFG_SUCCESS) && (ret != ZCFG_DELAY_APPLY)) {
+						zcfgFeObjStructFree(atmLinkObj);
+						return ret;
+					}
+
+					if(ret == ZCFG_SUCCESS) { 
+						if((ret = zcfgFe181To98MappingNameGet(ipIfacePathName, wanIpConnObj)) != ZCFG_SUCCESS) {
+							zcfgFeObjStructFree(atmLinkObj);
+							return ret;
+						}
+					}
+
+					sscanf(wanIpConnObj, "%*[^.].%*[^.].%*d.%*[^.].%*d.WANIPConnection.%d", idx);
 				}
 				else if(strcmp(atmLinkObj->LinkType, "PPPoA") == 0) {
 					printf("ATM Link type is PPPoA\n");
@@ -2509,23 +2619,31 @@
 
 					printf("Ethernet.Link already exists\n");
 
-					zcfgFeTr181IfaceStackHigherLayerGet(higherLayer, vlanTermPathName);
+					if(zcfgFeTr181IfaceStackHigherLayerGet(higherLayer, vlanTermPathName) != ZCFG_SUCCESS) {
+						zcfgFeObjStructFree(atmLinkObj);
+						return ZCFG_INTERNAL_ERROR;
+					}
+
 					if (strstr(vlanTermPathName, "Ethernet.VLANTermination.") == NULL){
-						if((ret = vlanTermAdd(vlanTermPathName, higherLayer)) != ZCFG_SUCCESS) {
+						ret = vlanTermAdd(vlanTermPathName, higherLayer);
+						if((ret != ZCFG_SUCCESS) && (ret != ZCFG_DELAY_APPLY)) {
 							zcfgFeObjStructFree(atmLinkObj);
 							return ret;
 						}
 					}
 					
 					/*Add Device.IP.Interface.i*/
-					if((ret = ipIfaceAdd(ipIfacePathName, vlanTermPathName)) != ZCFG_SUCCESS) {
+					ret = ipIfaceAdd(ipIfacePathName, vlanTermPathName);
+					if((ret != ZCFG_SUCCESS) && (ret != ZCFG_DELAY_APPLY)) {
 						zcfgFeObjStructFree(atmLinkObj);
 						return ret;
 					}
 
-					if((ret = zcfgFe181To98MappingNameGet(ipIfacePathName, wanIpConnObj)) != ZCFG_SUCCESS) {
-						zcfgFeObjStructFree(atmLinkObj);
-						return ret;
+					if(ret == ZCFG_SUCCESS) {
+						if((ret = zcfgFe181To98MappingNameGet(ipIfacePathName, wanIpConnObj)) != ZCFG_SUCCESS) {
+							zcfgFeObjStructFree(atmLinkObj);
+							return ret;
+						}
 					}
 
 					sscanf(wanIpConnObj, "%*[^.].%*[^.].%*d.%*[^.].%*d.WANIPConnection.%d", idx);
@@ -2543,30 +2661,39 @@
 			}
 
 			/*Try to get the higher layer of PTM.Link*/
-			ret = zcfgFeTr181IfaceStackHigherLayerGet(wanLinkObj, higherLayer);
+			if(zcfgFeTr181IfaceStackHigherLayerGet(wanLinkObj, higherLayer) != ZCFG_SUCCESS) {
+				zcfgFeObjStructFree(ptmLinkObj);
+				return ZCFG_INTERNAL_ERROR;
+			}
+
 			if(ret == ZCFG_NO_SUCH_OBJECT) {
 				/*Add Device.Ethernet.Link.i*/
-				if((ret = ethLinkAdd(ethLinkPathName, wanLinkObj)) != ZCFG_SUCCESS) {
+				ret = ethLinkAdd(ethLinkPathName, wanLinkObj);
+				if((ret != ZCFG_SUCCESS) && (ret != ZCFG_DELAY_APPLY)) {
 					zcfgFeObjStructFree(ptmLinkObj);
 					return ret;
 				}
 
 				/*add Device.Ethernet.VLANTermination.i*/
-				if((ret = vlanTermAdd(vlanTermPathName, ethLinkPathName)) != ZCFG_SUCCESS) {
+				ret = vlanTermAdd(vlanTermPathName, ethLinkPathName);
+				if((ret != ZCFG_SUCCESS) && (ret != ZCFG_DELAY_APPLY)) {
 					zcfgFeObjStructFree(ptmLinkObj);
 					return ret;
 				}
 
 				/*Add Device.IP.Interface.i*/
-				if((ret = ipIfaceAdd(ipIfacePathName, vlanTermPathName)) != ZCFG_SUCCESS) {
+				ret = ipIfaceAdd(ipIfacePathName, vlanTermPathName);
+				if((ret != ZCFG_SUCCESS) && (ret != ZCFG_DELAY_APPLY)) {
 					zcfgFeObjStructFree(ptmLinkObj);
 					printf("%s : Add Device.IP.Interface.i fail\n", __FUNCTION__);
 					return ret;
 				}
 
-				if((ret = zcfgFe181To98MappingNameGet(ipIfacePathName, wanIpConnObj)) != ZCFG_SUCCESS) {
-					zcfgFeObjStructFree(ptmLinkObj);
-					return ret;
+				if(ret == ZCFG_SUCCESS) {
+					if((ret = zcfgFe181To98MappingNameGet(ipIfacePathName, wanIpConnObj)) != ZCFG_SUCCESS) {
+						zcfgFeObjStructFree(ptmLinkObj);
+						return ret;
+					}
 				}
 
 				sscanf(wanIpConnObj, "%*[^.].%*[^.].%*d.%*[^.].%*d.WANIPConnection.%d", idx);
@@ -2577,23 +2704,31 @@
 
 					printf("Ethernet.Link already exists\n");
 
-					zcfgFeTr181IfaceStackHigherLayerGet(higherLayer, vlanTermPathName);
+					if(zcfgFeTr181IfaceStackHigherLayerGet(higherLayer, vlanTermPathName) != ZCFG_SUCCESS) {
+						zcfgFeObjStructFree(ptmLinkObj);
+						return ZCFG_INTERNAL_ERROR;
+					}
+
 					if (strstr(vlanTermPathName, "Ethernet.VLANTermination.") == NULL){
-						if((ret = vlanTermAdd(vlanTermPathName, higherLayer)) != ZCFG_SUCCESS) {
+						ret = vlanTermAdd(vlanTermPathName, higherLayer);
+						if((ret != ZCFG_SUCCESS) && (ret != ZCFG_DELAY_APPLY)) {
 							zcfgFeObjStructFree(ptmLinkObj);
 							return ret;
 						}
 					}
-					
+					printf("Add IP.Interface: %s\n", vlanTermPathName);
 					/*Add Device.IP.Interface.i*/
-					if((ret = ipIfaceAdd(ipIfacePathName, vlanTermPathName)) != ZCFG_SUCCESS) {
+					ret = ipIfaceAdd(ipIfacePathName, vlanTermPathName);
+					if((ret != ZCFG_SUCCESS) && (ret != ZCFG_DELAY_APPLY)) {
 						zcfgFeObjStructFree(ptmLinkObj);
 						return ret;
 					}
 
-					if((ret = zcfgFe181To98MappingNameGet(ipIfacePathName, wanIpConnObj)) != ZCFG_SUCCESS) {
-						zcfgFeObjStructFree(ptmLinkObj);
-						return ret;
+					if(ret == ZCFG_SUCCESS) {
+						if((ret = zcfgFe181To98MappingNameGet(ipIfacePathName, wanIpConnObj)) != ZCFG_SUCCESS) {
+							zcfgFeObjStructFree(ptmLinkObj);
+							return ret;
+						}
 					}
 
 					sscanf(wanIpConnObj, "%*[^.].%*[^.].%*d.%*[^.].%*d.WANIPConnection.%d", idx);
@@ -2618,27 +2753,102 @@
 			return ret;
 		}
 
-		zcfgFeTr181IfaceStackHigherLayerGet(wanLinkObj, vlanTermPathName);
+		if(zcfgFeTr181IfaceStackHigherLayerGet(wanLinkObj, vlanTermPathName) != ZCFG_SUCCESS) {
+			return ZCFG_INTERNAL_ERROR;
+		}
+
 		if (strstr(vlanTermPathName, "Ethernet.VLANTermination.") == NULL){
-			if((ret = vlanTermAdd(vlanTermPathName, wanLinkObj)) != ZCFG_SUCCESS) {
+			ret = vlanTermAdd(vlanTermPathName, wanLinkObj);
+			if((ret != ZCFG_SUCCESS) && (ret != ZCFG_DELAY_APPLY)) {
 				return ret;
 			}
 		}
 					
 		/*Add Device.IP.Interface.i*/
-		if((ret = ipIfaceAdd(ipIfacePathName, vlanTermPathName)) != ZCFG_SUCCESS) {
+		ret = ipIfaceAdd(ipIfacePathName, vlanTermPathName);
+		if((ret != ZCFG_SUCCESS) && (ret != ZCFG_DELAY_APPLY)) {
 			return ret;
 		}
 
-		if((ret = zcfgFe181To98MappingNameGet(ipIfacePathName, wanIpConnObj)) != ZCFG_SUCCESS) {
-			return ret;
+		if(ret == ZCFG_SUCCESS) {
+			if((ret = zcfgFe181To98MappingNameGet(ipIfacePathName, wanIpConnObj)) != ZCFG_SUCCESS) {
+				return ret;
+			}
 		}
 
 		sscanf(wanIpConnObj, "%*[^.].%*[^.].%*d.%*[^.].%*d.WANIPConnection.%d", idx);
 	}
+#endif
 
 	return ret;
 }
+
+#ifdef WAN_ADD_INDIVIDUAL
+static zcfgRet_t WANIpPppConnObjDelEther(const char *layerName)
+{
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	objIndex_t vlanTermIid, etherLinkIid;
+	struct json_objec *vlanTermObj = NULL;
+	const char *lowerLayer = NULL;
+
+	zcfgLog(ZCFG_LOG_INFO, "%s : Enter\n", __FUNCTION__);
+
+	if(strstr(layerName, "VLANTerm")) {
+		//it is Ethernet.VLANTermination
+		IID_INIT(vlanTermIid);
+		sscanf(layerName, "Ethernet.VLANTermination.%hhu", &vlanTermIid.idx[0]);
+		vlanTermIid.level = 1;
+	}
+	else if(strstr(layerName, "ATM")) {
+		printf("%s : lowerlayer is ATM link\n", __FUNCTION__);
+		return ZCFG_SUCCESS;
+	}
+	else {
+		printf("%s : lowerlayer is unknown\n", __FUNCTION__);
+		return ZCFG_INTERNAL_ERROR;
+	}
+
+	if(zcfgFeObjJsonGet(RDM_OID_ETH_VLAN_TERM, &vlanTermIid, &vlanTermObj) != ZCFG_SUCCESS) {
+		printf("%s : retrieve vlanTerm fail\n", __FUNCTION__);
+		return ZCFG_INTERNAL_ERROR;
+	}
+
+	lowerLayer = NULL;
+	lowerLayer = json_object_get_string(json_object_object_get(vlanTermObj, "LowerLayers"));
+	if(strstr(lowerLayer, "Ethernet.Link")) {
+		//it is Ethernet.Link
+
+		printf("%s : vlanTerm lowerlayer %s\n", __FUNCTION__, lowerLayer);
+
+		IID_INIT(etherLinkIid);
+		sscanf(lowerLayer, "Ethernet.Link.%hhu", &etherLinkIid.idx[0]);
+		etherLinkIid.level = 1;
+
+		if((ret = zcfgFeObjJsonDel(RDM_OID_ETH_VLAN_TERM, &vlanTermIid, NULL)) != ZCFG_SUCCESS) {
+			printf("%s : Delete vlanTerm Fail\n", __FUNCTION__);
+		}
+
+		if((ret != ZCFG_SUCCESS) && (ret != ZCFG_DELAY_APPLY)) {
+			json_object_put(vlanTermObj);
+			return ret;
+		}
+	}
+	else {
+		printf("%s : vlanTerm lowerlayer is unknown\n", __FUNCTION__);
+		json_object_put(vlanTermObj);
+		return ZCFG_INTERNAL_ERROR;
+	}
+
+	json_object_put(vlanTermObj);
+
+	if((ret = zcfgFeObjJsonDel(RDM_OID_ETH_LINK, &etherLinkIid, NULL)) != ZCFG_SUCCESS) {
+		printf("%s : Delete ether link Fail\n", __FUNCTION__);
+	}
+
+	return ret;
+}
+#endif
+
 /*  
  *   TR98 Object Name : InternetGatewayDevice.WANDevice.i.WANConnectionDevice.i.WANIPConnection.i
  *
@@ -2649,10 +2859,14 @@
 	zcfgRet_t ret;
 	char ipIface[32] = {0};
 	objIndex_t ipIfaceIid;
+#ifdef WAN_ADD_INDIVIDUAL
+	struct json_object *ipIfaceObj = NULL;
+	const char *lowerLayer = NULL;
+#endif
 
 	zcfgLog(ZCFG_LOG_INFO, "%s : Enter\n", __FUNCTION__);
 
-        if((ret = zcfgFe98To181MappingNameGet(tr98FullPathName, ipIface)) != ZCFG_SUCCESS) {
+	if((ret = zcfgFe98To181MappingNameGet(tr98FullPathName, ipIface)) != ZCFG_SUCCESS) {
 		return ret;
 	}
 
@@ -2660,11 +2874,33 @@
 	sscanf(ipIface, "IP.Interface.%hhu", &ipIfaceIid.idx[0]);
 	ipIfaceIid.level = 1;
 
+#ifdef WAN_ADD_INDIVIDUAL
+	if((ret = zcfgFeObjJsonGet(RDM_OID_IP_IFACE, &ipIfaceIid, &ipIfaceObj)) != ZCFG_SUCCESS) {
+		printf("%s : Retreieve IP Interface Fail\n", __FUNCTION__);
+		return ret;
+	}
+#endif
+
 	ret = zcfgFeObjJsonDel(RDM_OID_IP_IFACE, &ipIfaceIid, NULL);
 	if(ret != ZCFG_SUCCESS) {
 		zcfgLog(ZCFG_LOG_ERR, "%s : Delete Object Fail\n", __FUNCTION__);	
 	}
 
+#ifdef WAN_ADD_INDIVIDUAL
+	lowerLayer = json_object_get_string(json_object_object_get(ipIfaceObj, "LowerLayers"));
+	if(!lowerLayer) {
+		printf("%s : ipIface lowerlayer is none\n", __FUNCTION__);
+		json_object_put(ipIfaceObj);
+		return ZCFG_INTERNAL_ERROR;
+	}
+	printf("%s : ipIface lowerlayer %s\n", __FUNCTION__, lowerLayer);
+
+	ret = WANIpPppConnObjDelEther(lowerLayer);
+
+	json_object_put(ipIfaceObj);
+
+#endif
+
 	return ret;
 }
 
@@ -3346,7 +3582,7 @@
 		/*  The instance number of WANPPPConnection.i will be continuous. Therefore, 
 		 *  just return "ZCFG_NO_MORE_INSTANCE" when there is no related mapping of tr181 for
 		 *  this WANPPPConnection object.
-		 */		
+		 */
 		return ZCFG_NO_MORE_INSTANCE;
 	}
 
@@ -3391,9 +3627,16 @@
 	*tr98Jobj = json_object_new_object();
 	paramList = tr98Obj[handler].parameter;
 	while(paramList->name != NULL) {
-		/*Write parameter value from tr181 objects to tr98 object*/		
+		/*Write parameter value from tr181 objects to tr98 object*/
 		paramValue = json_object_object_get(pppConnJobj, paramList->name);
 		if(paramValue != NULL) {
+			if(!strcmp(paramList->name, "Name")) {
+				paramValue = json_object_object_get(ipIfaceJobj, "X_ZYXEL_SrvName");
+				if(paramValue)
+					printf("X_ZYXEL_SrvName, %s\n", json_object_get_string(paramValue));
+				else
+					printf("X_ZYXEL_SrvName null\n");
+			}
 			json_object_object_add(*tr98Jobj, paramList->name, JSON_OBJ_COPY(paramValue));
 			paramList++;
 			continue;
@@ -3503,12 +3746,15 @@
 			continue;
 		}
 		else if(!strcmp(paramList->name, "PortMappingNumberOfEntries")){
+			numOfEntries = portMappingNumGet(ipIface);
+#if 0
 			for(i = 1; i<=254; i++){
 				snprintf(pmPath, sizeof(pmPath), "%s.PortMapping.%d", tr98FullPathName, i);
 				if(zcfgFe98To181MappingNameGet(pmPath, tmp) == ZCFG_SUCCESS) {
 					numOfEntries++;
 				}
 			}
+#endif
 			json_object_object_add(*tr98Jobj, paramList->name, json_object_new_int(numOfEntries));
 			paramList++;
 			continue;			
@@ -3723,6 +3969,14 @@
 		/*Write new parameter value from tr98 object to tr181 objects*/
 		paramValue = json_object_object_get(tr98Jobj, paramList->name);
 		if(paramValue != NULL) {
+			if(!strcmp(paramList->name, "Name")) {
+				if((tr181ParamValue = json_object_object_get(ipIfaceJobj, "X_ZYXEL_SrvName"))) {
+					json_object_object_add(ipIfaceJobj, "X_ZYXEL_SrvName", JSON_OBJ_COPY(paramValue));
+				}
+				paramList++;
+				continue;
+			}
+
 			/*Write value from WANPPPConnection to Device.PPP.Interface.i*/
 			tr181ParamValue = json_object_object_get(pppIfaceJobj, paramList->name);
 			if(tr181ParamValue != NULL) {
@@ -3903,6 +4157,13 @@
 
 	return ZCFG_SUCCESS;
 }
+
+#ifdef WAN_ADD_INDIVIDUAL
+enum {
+	WAN_PPPCONN_EINTELVLPPP,
+	WAN_PPPCONN_ATMPPP
+};
+#endif
 /*  
  *   TR98 Object Name : InternetGatewayDevice.WANDevice.i.WANConnectionDevice.i.WANPPPConnection.i
  *
@@ -3918,13 +4179,18 @@
 	char ethLinkPathName[32] = {0};
 	char vlanTermPathName[32] = {0};
 	char pppIfacePathName[32] = {0};
-	char higherLayer[64] = {0};
 	char tr98TmpName[TR98_MAX_OBJ_NAME_LENGTH] = {0};  /*tr98TmpName is used to look up mapping table*/
 	char *ptr = NULL;
 	uint32_t  wanLinkOid = 0;
 	objIndex_t wanLinkIid;
 	rdm_AtmLink_t *atmLinkObj = NULL;
+#ifdef WAN_ADD_INDIVIDUAL
+	int wanPppConnType = WAN_PPPCONN_EINTELVLPPP;
+	char *wanLinkName = NULL;
+#else
+	char higherLayer[64] = {0};
 	rdm_PtmLink_t *ptmLinkObj = NULL;
+#endif
 
 	printf("%s : Enter\n", __FUNCTION__);
 
@@ -3958,6 +4224,76 @@
 		sprintf(tr181Obj, "Device.%s", wanLinkObj);
 		wanLinkOid = zcfgFeObjNameToObjId(tr181Obj, &wanLinkIid);
 		
+#ifdef WAN_ADD_INDIVIDUAL
+		if(wanLinkOid == RDM_OID_ATM_LINK) {
+			printf("ATM Link\n");
+			if((ret = zcfgFeObjStructGet(RDM_OID_ATM_LINK, &wanLinkIid, (void **)&atmLinkObj)) != ZCFG_SUCCESS) {
+				return ret;
+			}
+
+			if(strcmp(atmLinkObj->LinkType, "EoA") == 0) {
+				wanPppConnType = WAN_PPPCONN_EINTELVLPPP;
+			}
+			else if(strcmp(atmLinkObj->LinkType, "PPPoA") == 0) {
+				wanPppConnType = WAN_PPPCONN_ATMPPP;
+			}
+			else {
+				printf("ATM Link type %s not supported\n", atmLinkObj->LinkType);
+				zcfgFeObjStructFree(atmLinkObj);
+				return ZCFG_INVALID_PARAM_VALUE;
+			}
+			zcfgFeObjStructFree(atmLinkObj);
+		}
+		wanLinkName = wanLinkObj;
+	}
+	else if(strstr(wanIntfObj, "Ethernet") != NULL) { // Ethernet WAN
+		wanPppConnType = WAN_PPPCONN_EINTELVLPPP;
+		wanLinkName = wanIntfObj;
+	}
+	else {
+		return ZCFG_INTERNAL_ERROR;
+	}
+
+	if(wanPppConnType == WAN_PPPCONN_EINTELVLPPP) {
+		/*Add Device.Ethernet.Link.i*/
+		ret = ethLinkAdd(ethLinkPathName, wanLinkName);
+		if((ret != ZCFG_SUCCESS) && (ret != ZCFG_DELAY_APPLY)) {
+			return ret;
+		}
+
+		/*add Device.Ethernet.VLANTermination.i*/
+		ret = vlanTermAdd(vlanTermPathName, ethLinkPathName);
+		if((ret != ZCFG_SUCCESS) && (ret != ZCFG_DELAY_APPLY)) {
+			return ret;
+		}
+
+		/*Add Device.PPP.Interface.i*/
+		ret = pppIfaceAdd(pppIfacePathName, vlanTermPathName);
+		if((ret != ZCFG_SUCCESS) && (ret != ZCFG_DELAY_APPLY)) {
+			printf("%s : Add Device.PPP.Interface.i fail\n", __FUNCTION__);
+			return ret;
+		}
+
+	}
+	else if(wanPppConnType == WAN_PPPCONN_ATMPPP) {
+		printf("ATM Link type is PPPoA\n");
+		/*Add Device.PPP.Interface.i and Device.IP.Interface.i ?*/
+		ret = pppIfaceAdd(pppIfacePathName, wanLinkName);
+		if((ret != ZCFG_SUCCESS) && (ret != ZCFG_DELAY_APPLY)) {
+			return ret;
+		}
+
+	}
+
+	if(ret == ZCFG_SUCCESS) {
+		if((ret = zcfgFe181To98MappingNameGet(pppIfacePathName, wanPppConnObj)) != ZCFG_SUCCESS) {
+			return ret;
+		}
+	}
+
+	sscanf(wanPppConnObj, "%*[^.].%*[^.].%*d.%*[^.].%*d.WANPPPConnection.%d", idx);
+
+#else
 		if(wanLinkOid == RDM_OID_ATM_LINK) {
 			printf("ATM Link\n");
 			if((ret = zcfgFeObjStructGet(RDM_OID_ATM_LINK, &wanLinkIid, (void **)&atmLinkObj)) != ZCFG_SUCCESS) {
@@ -3969,26 +4305,31 @@
 			if(ret == ZCFG_NO_SUCH_OBJECT) {
 				if(strcmp(atmLinkObj->LinkType, "EoA") == 0) {
 					/*Add Device.Ethernet.Link.i*/
-					if((ret = ethLinkAdd(ethLinkPathName, wanLinkObj)) != ZCFG_SUCCESS) {
+					ret = ethLinkAdd(ethLinkPathName, wanLinkObj);
+					if((ret != ZCFG_SUCCESS) && (ret != ZCFG_DELAY_APPLY)) {
 						zcfgFeObjStructFree(atmLinkObj);
 						return ret;
 					}
 
 					/*Add Device.Ethernet.VLANTermination.i*/
-					if((ret = vlanTermAdd(vlanTermPathName, ethLinkPathName)) != ZCFG_SUCCESS) {
+					ret = vlanTermAdd(vlanTermPathName, ethLinkPathName);
+					if((ret != ZCFG_SUCCESS) && (ret != ZCFG_DELAY_APPLY)) {
 						zcfgFeObjStructFree(atmLinkObj);
 						return ret;
 					}
 
 					/*Add Device.PPP.Interface.i*/
-					if((ret = pppIfaceAdd(pppIfacePathName, vlanTermPathName)) != ZCFG_SUCCESS) {
+					ret = pppIfaceAdd(pppIfacePathName, vlanTermPathName);
+					if((ret != ZCFG_SUCCESS) && (ret != ZCFG_DELAY_APPLY)) {
 						zcfgFeObjStructFree(atmLinkObj);
 						return ret;
 					}
 
-					if((ret = zcfgFe181To98MappingNameGet(pppIfacePathName, wanPppConnObj)) != ZCFG_SUCCESS) {
-						zcfgFeObjStructFree(atmLinkObj);
-						return ret;
+					if(ret == ZCFG_SUCCESS) {
+						if((ret = zcfgFe181To98MappingNameGet(pppIfacePathName, wanPppConnObj)) != ZCFG_SUCCESS) {
+							zcfgFeObjStructFree(atmLinkObj);
+							return ret;
+						}
 					}
 
 					sscanf(wanPppConnObj, "%*[^.].%*[^.].%*d.%*[^.].%*d.WANPPPConnection.%d", idx);
@@ -4000,6 +4341,20 @@
 				else if(strcmp(atmLinkObj->LinkType, "PPPoA") == 0) {
 					printf("ATM Link type is PPPoA\n");
 					/*Add Device.PPP.Interface.i and Device.IP.Interface.i ?*/
+					ret = pppIfaceAdd(pppIfacePathName, wanLinkObj);
+					if((ret != ZCFG_SUCCESS) && (ret != ZCFG_DELAY_APPLY)) {
+						zcfgFeObjStructFree(atmLinkObj);
+						return ret;
+					}
+
+					if(ret == ZCFG_SUCCESS) {
+						if((ret = zcfgFe181To98MappingNameGet(pppIfacePathName, wanPppConnObj)) != ZCFG_SUCCESS) {
+							zcfgFeObjStructFree(atmLinkObj);
+							return ret;
+						}
+					}
+
+					sscanf(wanPppConnObj, "%*[^.].%*[^.].%*d.%*[^.].%*d.WANPPPConnection.%d", idx);
 				}
 				else {
 					printf("ATM Link type %s not supported\n", atmLinkObj->LinkType);
@@ -4011,23 +4366,31 @@
 
 					printf("%s : Ethernet.Link already exists\n", __FUNCTION__);
 
-					zcfgFeTr181IfaceStackHigherLayerGet(higherLayer, vlanTermPathName);
+					if(zcfgFeTr181IfaceStackHigherLayerGet(higherLayer, vlanTermPathName) != ZCFG_SUCCESS) {
+						zcfgFeObjStructFree(atmLinkObj);
+						return ZCFG_INTERNAL_ERROR;
+					}
+
 					if (strstr(vlanTermPathName, "Ethernet.VLANTermination.") == NULL){
-						if((ret = vlanTermAdd(vlanTermPathName, higherLayer)) != ZCFG_SUCCESS) {
+						ret = vlanTermAdd(vlanTermPathName, higherLayer);
+						if((ret != ZCFG_SUCCESS) && (ret != ZCFG_DELAY_APPLY)) {
 							zcfgFeObjStructFree(atmLinkObj);
 							return ret;
 						}
 					}
 					
 					/*Add Device.PPP.Interface.i*/
-					if((ret = pppIfaceAdd(pppIfacePathName, vlanTermPathName)) != ZCFG_SUCCESS) {
+					ret = pppIfaceAdd(pppIfacePathName, vlanTermPathName);
+					if((ret != ZCFG_SUCCESS) && (ret != ZCFG_DELAY_APPLY)) {
 						zcfgFeObjStructFree(atmLinkObj);
 						return ret;
 					}
 
-					if((ret = zcfgFe181To98MappingNameGet(pppIfacePathName, wanPppConnObj)) != ZCFG_SUCCESS) {
-						zcfgFeObjStructFree(atmLinkObj);
-						return ret;
+					if(ret == ZCFG_SUCCESS) {
+						if((ret = zcfgFe181To98MappingNameGet(pppIfacePathName, wanPppConnObj)) != ZCFG_SUCCESS) {
+							zcfgFeObjStructFree(atmLinkObj);
+							return ret;
+						}
 					}
 
 					sscanf(wanPppConnObj, "%*[^.].%*[^.].%*d.%*[^.].%*d.WANPPPConnection.%d", idx);
@@ -4045,29 +4408,34 @@
 			}
 
 			/*Try to get the higher layer of PTM.Link*/
-			ret = zcfgFeTr181IfaceStackHigherLayerGet(ptmLinkObj->LowerLayers, higherLayer);
+			ret = zcfgFeTr181IfaceStackHigherLayerGet(wanLinkObj, higherLayer);
 			if(ret == ZCFG_NO_SUCH_OBJECT) {
 				/*Add Device.Ethernet.Link.i*/
-				if((ret = ethLinkAdd(ethLinkPathName, wanLinkObj)) != ZCFG_SUCCESS) {
+				ret = ethLinkAdd(ethLinkPathName, wanLinkObj);
+				if((ret != ZCFG_SUCCESS) && (ret != ZCFG_DELAY_APPLY)) {
 					zcfgFeObjStructFree(ptmLinkObj);
 					return ret;
 				}
 
 				/*Add Device.Ethernet.VLANTermination.i*/
-				if((ret = vlanTermAdd(vlanTermPathName, ethLinkPathName)) != ZCFG_SUCCESS) {
+				ret = vlanTermAdd(vlanTermPathName, ethLinkPathName);
+				if((ret != ZCFG_SUCCESS) && (ret != ZCFG_DELAY_APPLY)) {
 					zcfgFeObjStructFree(ptmLinkObj);
 					return ret;
 				}
 
 				/*Add Device.PPP.Interface.i*/
-				if((ret = pppIfaceAdd(pppIfacePathName, vlanTermPathName)) != ZCFG_SUCCESS) {
+				ret = pppIfaceAdd(pppIfacePathName, vlanTermPathName);
+				if((ret != ZCFG_SUCCESS) && (ret != ZCFG_DELAY_APPLY)) {
 					zcfgFeObjStructFree(ptmLinkObj);
 					return ret;
 				}
 
-				if((ret = zcfgFe181To98MappingNameGet(pppIfacePathName, wanPppConnObj)) != ZCFG_SUCCESS) {
-					zcfgFeObjStructFree(ptmLinkObj);
-					return ret;
+				if(ret == ZCFG_SUCCESS) {
+					if((ret = zcfgFe181To98MappingNameGet(pppIfacePathName, wanPppConnObj)) != ZCFG_SUCCESS) {
+						zcfgFeObjStructFree(ptmLinkObj);
+						return ret;
+					}
 				}
 
 				sscanf(wanPppConnObj, "%*[^.].%*[^.].%*d.%*[^.].%*d.WANPPPConnection.%d", idx);
@@ -4077,23 +4445,30 @@
 				if(strstr(higherLayer, "Ethernet.Link") != NULL) {
 					printf("%s : Ethernet.Link already exists\n", __FUNCTION__);
 
-					zcfgFeTr181IfaceStackHigherLayerGet(higherLayer, vlanTermPathName);
+					if(zcfgFeTr181IfaceStackHigherLayerGet(higherLayer, vlanTermPathName) != ZCFG_SUCCESS) {
+						zcfgFeObjStructFree(ptmLinkObj);
+						return ZCFG_INTERNAL_ERROR;
+					}
 					if (strstr(vlanTermPathName, "Ethernet.VLANTermination.") == NULL){
-						if((ret = vlanTermAdd(vlanTermPathName, higherLayer)) != ZCFG_SUCCESS) {
+						ret = vlanTermAdd(vlanTermPathName, higherLayer);
+						if((ret != ZCFG_SUCCESS) && (ret != ZCFG_DELAY_APPLY)) {
 							zcfgFeObjStructFree(ptmLinkObj);
 							return ret;
 						}
 					}
 					
 					/*Add Device.PPP.Interface.i*/
-					if((ret = pppIfaceAdd(pppIfacePathName, vlanTermPathName)) != ZCFG_SUCCESS) {
+					ret = pppIfaceAdd(pppIfacePathName, vlanTermPathName);
+					if((ret != ZCFG_SUCCESS) && (ret != ZCFG_DELAY_APPLY)) {
 						zcfgFeObjStructFree(ptmLinkObj);
 						return ret;
 					}
 
-					if((ret = zcfgFe181To98MappingNameGet(pppIfacePathName, wanPppConnObj)) != ZCFG_SUCCESS) {
-						zcfgFeObjStructFree(ptmLinkObj);
-						return ret;
+					if(ret == ZCFG_SUCCESS) {
+						if((ret = zcfgFe181To98MappingNameGet(pppIfacePathName, wanPppConnObj)) != ZCFG_SUCCESS) {
+							zcfgFeObjStructFree(ptmLinkObj);
+							return ret;
+						}
 					}
 
 					sscanf(wanPppConnObj, "%*[^.].%*[^.].%*d.%*[^.].%*d.WANPPPConnection.%d", idx);
@@ -4121,24 +4496,32 @@
 
 		printf("Ethernet Link %s\n", wanLinkObj);
 
-		zcfgFeTr181IfaceStackHigherLayerGet(wanLinkObj, vlanTermPathName);
+		if(zcfgFeTr181IfaceStackHigherLayerGet(wanLinkObj, vlanTermPathName) != ZCFG_SUCCESS) {
+			return ZCFG_INTERNAL_ERROR;
+		}
+
 		if (strstr(vlanTermPathName, "Ethernet.VLANTermination.") == NULL){
-			if((ret = vlanTermAdd(vlanTermPathName, wanLinkObj)) != ZCFG_SUCCESS) {
+			ret = vlanTermAdd(vlanTermPathName, wanLinkObj);
+			if((ret != ZCFG_SUCCESS) && (ret != ZCFG_DELAY_APPLY)) {
 				return ret;
 			}
 		}
 
 		/*Add Device.PPP.Interface.i*/
-		if((ret = pppIfaceAdd(pppIfacePathName, vlanTermPathName)) != ZCFG_SUCCESS) {
+		ret = pppIfaceAdd(pppIfacePathName, vlanTermPathName);
+		if((ret != ZCFG_SUCCESS) && (ret != ZCFG_DELAY_APPLY)) {
 			return ret;
 		}
 
-		if((ret = zcfgFe181To98MappingNameGet(pppIfacePathName, wanPppConnObj)) != ZCFG_SUCCESS) {
-			return ret;
+		if(ret == ZCFG_SUCCESS) {
+			if((ret = zcfgFe181To98MappingNameGet(pppIfacePathName, wanPppConnObj)) != ZCFG_SUCCESS) {
+				return ret;
+			}
 		}
 
 		sscanf(wanPppConnObj, "%*[^.].%*[^.].%*d.%*[^.].%*d.WANPPPConnection.%d", idx);
 	}
+#endif
 
 	return ret;
 }
@@ -4151,10 +4534,12 @@
 	zcfgRet_t ret;
 	char tr181Obj[128] = {0};
 	char pppIfacePathName[32] = {0};
-	uint32_t  pppIfaceOid = 0;
 	objIndex_t pppIfaceIid, ipIfaceIid;
 	rdm_IpIface_t *ipIface = NULL;
-
+#ifdef WAN_ADD_INDIVIDUAL
+	struct json_object *pppIface = NULL;
+	const char *lowerLayer = NULL;
+#endif
 	printf("%s : Enter\n", __FUNCTION__);
 
 	if((ret = zcfgFe98To181MappingNameGet(tr98FullPathName, pppIfacePathName)) != ZCFG_SUCCESS) {
@@ -4163,7 +4548,7 @@
 	
 	printf("%s : pppIface %s\n", __FUNCTION__, pppIfacePathName);
 	sprintf(tr181Obj, "Device.%s", pppIfacePathName);
-	pppIfaceOid = zcfgFeObjNameToObjId(tr181Obj, &pppIfaceIid);
+	zcfgFeObjNameToObjId(tr181Obj, &pppIfaceIid);
 
 	IID_INIT(ipIfaceIid);
 	while((ret = zcfgFeObjStructGetNext(RDM_OID_IP_IFACE, &ipIfaceIid, (void **)&ipIface)) == ZCFG_SUCCESS) {
@@ -4180,6 +4565,12 @@
 		zcfgFeObjStructFree(ipIface);
 	}
 
+#ifdef WAN_ADD_INDIVIDUAL
+	if((ret = zcfgFeObjJsonGet(RDM_OID_PPP_IFACE, &pppIfaceIid, &pppIface)) != ZCFG_SUCCESS) {
+		printf("%s : Retreieve PPP Interface Fail\n", __FUNCTION__);
+		return ret;
+	}
+#endif
 	ret = zcfgFeObjStructDel(RDM_OID_PPP_IFACE, &pppIfaceIid, NULL);
 	if (ret == ZCFG_SUCCESS) {
 		printf("%s : Delete PPP Interface Success\n", __FUNCTION__);
@@ -4187,6 +4578,20 @@
 	else {
 		printf("%s : Delete PPP Interface Fail\n", __FUNCTION__);
 	}
+#ifdef WAN_ADD_INDIVIDUAL
+	lowerLayer = json_object_get_string(json_object_object_get(pppIface, "LowerLayers"));
+	if(!lowerLayer) {
+		printf("%s : pppIface lowerlayer is none\n", __FUNCTION__);
+		json_object_put(pppIface);
+		return ZCFG_INTERNAL_ERROR;
+	}
+	printf("%s : pppIface lowerlayer %s\n", __FUNCTION__, lowerLayer);
+
+	ret = WANIpPppConnObjDelEther(lowerLayer);
+
+	json_object_put(pppIface);
+
+#endif
 
 	return ret;
 }
@@ -4267,6 +4672,9 @@
 		else if(strcmp(paramList->name, "RemoteIPAddress") == 0){
 			attrValue = zcfgFeParamAttrGetByName(RDM_OID_PPP_IFACE_IPCP, paramList->name);
 		}		
+		else if(!strcmp(paramList->name, "Name")){
+			attrValue = zcfgFeParamAttrGetByName(RDM_OID_IP_IFACE, "X_ZYXEL_SrvName");
+		}
 		else if(!strcmp(paramList->name, "DNSEnabled") || !strcmp( paramList->name, "X_ZYXEL_IPv6DNSEnabled")){
 			attrValue = zcfgFeParamAttrGetByName(RDM_OID_DNS_CLIENT_SRV, "Enable");
 		}
Index: libzcfg_fe_tr98-1.0/wanDev_api.c
===================================================================
--- libzcfg_fe_tr98-1.0.orig/wanDev_api.c	2015-03-12 15:49:12.530185945 +0800
+++ libzcfg_fe_tr98-1.0/wanDev_api.c	2015-03-12 15:47:09.770366800 +0800
@@ -370,13 +370,12 @@
 	while((ret = zcfgFeObjStructGetNext(RDM_OID_DHCPV4_CLIENT, &dhcpcv4Iid, (void **)&dhcpc4Obj)) == ZCFG_SUCCESS) {
 		if(!strcmp(dhcpc4Obj->Interface, devIpIface)) {
 			dhcpc4Obj->Enable = enable;
-			if(zcfgFeObjStructSet(RDM_OID_DHCPV4_CLIENT, &dhcpcv4Iid, (void *)dhcpc4Obj, NULL) != ZCFG_SUCCESS) {
+			ret = zcfgFeObjStructSet(RDM_OID_DHCPV4_CLIENT, &dhcpcv4Iid, (void *)dhcpc4Obj, NULL);
+			if((ret != ZCFG_SUCCESS) && (ret != ZCFG_DELAY_APPLY)) {
 				printf("Set DHCPv4.Clien Fail\n");
-				zcfgFeObjStructFree(dhcpc4Obj);
-				return ZCFG_INTERNAL_ERROR;
 			}
 			zcfgFeObjStructFree(dhcpc4Obj);
-			return ZCFG_SUCCESS;
+			return ret;
 		}
 		zcfgFeObjStructFree(dhcpc4Obj);
 	}
@@ -417,10 +416,11 @@
 					strcpy(v4AddrObj->SubnetMask, json_object_get_string(paramValue));
 				}
 
-				if(zcfgFeObjStructSet(RDM_OID_IP_IFACE_V4_ADDR, &v4AddrIid, (void *)v4AddrObj, NULL) != ZCFG_SUCCESS) {
+				ret = zcfgFeObjStructSet(RDM_OID_IP_IFACE_V4_ADDR, &v4AddrIid, (void *)v4AddrObj, NULL);
+				if((ret != ZCFG_SUCCESS) && (ret != ZCFG_DELAY_APPLY)) {
 					printf("%s : Set IPv4Address Fail\n", __FUNCTION__);
 					zcfgFeObjStructFree(v4AddrObj);
-					return ZCFG_INTERNAL_ERROR;
+					return ret;
 				}
 			}
 
@@ -496,10 +496,11 @@
 						strcpy(v4AddrObj->SubnetMask, json_object_get_string(paramValue));
 					}
 
-					if(zcfgFeObjStructSet(RDM_OID_IP_IFACE_V4_ADDR, &v4AddrIid, (void *)v4AddrObj, NULL) != ZCFG_SUCCESS) {
+					ret = zcfgFeObjStructSet(RDM_OID_IP_IFACE_V4_ADDR, &v4AddrIid, (void *)v4AddrObj, NULL);
+					if((ret != ZCFG_SUCCESS) && (ret != ZCFG_DELAY_APPLY)) {
 						printf("%s : Set IPv4Address Fail\n", __FUNCTION__);
 						zcfgFeObjStructFree(v4AddrObj);
-						return ZCFG_INTERNAL_ERROR;
+						return ret;
 					}
 					zcfgFeObjStructFree(v4AddrObj);
 				}
