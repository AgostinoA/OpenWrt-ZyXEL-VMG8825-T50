Index: libzcfg_fe_rdm_string-1.0/zcfg_fe_rdm_string.c
===================================================================
--- libzcfg_fe_rdm_string-1.0.orig/zcfg_fe_rdm_string.c	2016-06-30 13:58:23.415042707 +0800
+++ libzcfg_fe_rdm_string-1.0/zcfg_fe_rdm_string.c	2016-06-30 13:53:05.274146100 +0800
@@ -693,6 +693,17 @@
 }
 #endif
 
+/* It wouldn't delete rdm object on 'delay apply' until 're-apply', but run as 'zcfgFeObjJsonDel'
+    while not utilizing 'delay apply' */
+zcfgRet_t zcfgFeObjJsonDelayRdmDel(zcfg_offset_t oid, objIndex_t *objIid, char *feedbackMsg)
+{
+	zcfgRet_t ret;
+
+	ret = zcfgFeObjWrite(oid, objIid, NULL, ZCFG_MSG_REQUEST_DELAY_DELETE, feedbackMsg);
+
+	return ret;
+}
+
 zcfgRet_t zcfgFeObjJsonDel(zcfg_offset_t oid, objIndex_t *objIid, char *feedbackMsg)
 {
 	zcfgRet_t ret;
Index: libzcfg_fe_rdm_string-1.0/zcfg_fe_rdm_string.h
===================================================================
--- libzcfg_fe_rdm_string-1.0.orig/zcfg_fe_rdm_string.h	2016-06-30 13:58:23.299042704 +0800
+++ libzcfg_fe_rdm_string-1.0/zcfg_fe_rdm_string.h	2016-06-30 13:58:23.427042707 +0800
@@ -18,6 +18,7 @@
 zcfgRet_t zcfgFeObjJsonSetWithoutApply(zcfg_offset_t, objIndex_t *, struct json_object *, char *);
 zcfgRet_t zcfgFeMultiObjJsonSet(struct json_object *, char *);
 zcfgRet_t zcfgFeObjJsonAdd(zcfg_offset_t, objIndex_t *, char *);
+zcfgRet_t zcfgFeObjJsonDelayRdmDel(zcfg_offset_t , objIndex_t *, char *);
 zcfgRet_t zcfgFeObjJsonDel(zcfg_offset_t, objIndex_t *, char *);
 char* zcfgFeParamValGet(struct json_object *, char *);
 json_object* zcfgFeJsonMultiObjAppend(zcfg_offset_t, objIndex_t *, json_object *, json_object *);
