Index: libzcfg_fe_rdm_string-1.0/zcfg_fe_rdm_string.c
===================================================================
--- libzcfg_fe_rdm_string-1.0.orig/zcfg_fe_rdm_string.c	2017-01-01 22:55:42.594690632 +0800
+++ libzcfg_fe_rdm_string-1.0/zcfg_fe_rdm_string.c	2017-01-01 23:04:46.853633300 +0800
@@ -124,6 +124,80 @@
 	return oid;
 }
 
+int zcfgTr181ObjNameOid(char *objName)
+{
+	uint32_t oid = 0;
+	objInfo_t *objInfo = NULL;
+	char *name = NULL;
+	char *fullPathName;
+	bool found = false;
+	uint16_t paramCount;
+
+	if(!objName)
+		return ZCFG_INTERNAL_ERROR;
+
+	if(schemaShmAddr == NULL)
+		zcfgFeSharedMemInit();
+
+	if(objName == NULL || strlen(objName) == 0) {
+		zcfgLog(ZCFG_LOG_ERR, "Object Name is NULL\n");
+		return ZCFG_NO_SUCH_OBJECT;
+	}
+
+	fullPathName = (char *)malloc(strlen(objName)+8);
+	if (!strncmp(objName, "Device.", strlen("Device.")) || !strcmp(objName, "Device")){
+		strcpy(fullPathName, objName);
+	}
+	else{
+		sprintf(fullPathName, "%s.%s", "Device", objName);
+	}
+
+	while(oid < schemaShmSize) {
+		objInfo = GET_OBJ_INFO_BY_OID(oid);
+		name = GET_OBJ_NAME(objInfo);
+
+		if(strcmp(fullPathName, name) == 0) {
+			found = true;
+			break;
+		}
+		else {
+			paramCount = objInfo->count;
+			oid = oid + sizeof(objInfo_t) + paramCount*sizeof(parameterInfo_t);
+		}
+	}
+
+	free(fullPathName);
+
+	if(!found) {
+		zcfgLog(ZCFG_LOG_ERR, "Can't find OID by object name %s\n", objName);
+		return ZCFG_NO_SUCH_OBJECT;
+	}
+
+	return oid;
+}
+
+const char *zcfgFeTr181OidToName(zcfg_offset_t oid)
+{
+	objInfo_t *objInfo;
+	int nameStrLen = 0;
+
+
+	if(schemaShmAddr == NULL)
+		zcfgFeSharedMemInit();
+
+	if(oid > schemaShmSize)
+		return NULL;
+
+	objInfo = GET_OBJ_INFO_BY_OID(oid);
+	const char *name = (const char *)GET_OBJ_NAME(objInfo);
+	if((nameStrLen = strlen(name)) >= MAX_TR181_PATHNAME || nameStrLen == 0){
+		zcfgLog(ZCFG_LOG_INFO, "%s: no object\n", __FUNCTION__);
+		return NULL;
+	}
+
+	return name;
+}
+
 zcfgRet_t zcfgFeObjIdToName(zcfg_offset_t oid, objIndex_t *objIid, char *objName)
 {
 	objInfo_t *objInfo = NULL;
Index: libzcfg_fe_rdm_string-1.0/zcfg_fe_rdm_string.h
===================================================================
--- libzcfg_fe_rdm_string-1.0.orig/zcfg_fe_rdm_string.h	2017-01-01 22:55:42.858822639 +0800
+++ libzcfg_fe_rdm_string-1.0/zcfg_fe_rdm_string.h	2017-01-01 23:05:04.588273700 +0800
@@ -5,6 +5,8 @@
 } multiObjInfo_t;
 
 int zcfgFeObjNameToObjId(char *, objIndex_t *);
+int zcfgTr181ObjNameOid(char *objName);
+const char *zcfgFeTr181OidToName(zcfg_offset_t oid);
 zcfgRet_t zcfgFeObjIdToName(zcfg_offset_t oid, objIndex_t *objIid, char *objName);
 zcfgRet_t zcfgFeJsonObjGen(zcfg_offset_t, char *, uint32_t, struct json_object *, void *);
 zcfgRet_t zcfgFeJsonObjParamSet(zcfg_offset_t, char *, uint32_t, struct json_object *, char *);
