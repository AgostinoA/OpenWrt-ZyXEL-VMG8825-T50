Index: libzcfg_fe_rdm_string-1.0/zcfg_fe_rdm_string.c
===================================================================
--- libzcfg_fe_rdm_string-1.0.orig/zcfg_fe_rdm_string.c	2016-11-09 11:39:49.261654810 +0800
+++ libzcfg_fe_rdm_string-1.0/zcfg_fe_rdm_string.c	2016-11-09 11:40:49.980078088 +0800
@@ -13,6 +13,8 @@
 extern void *objNameShmAddr;
 extern void *paramNameShmAddr;
 extern int schemaShmSize;
+extern int myEid;
+
 /*
  *  Function Name: zcfgFeObjNameToObjId
  *  Description: Translate the object name to object id
@@ -29,6 +31,7 @@
 	uint32_t oid = 0;
 	objInfo_t *objInfo = NULL;
 	bool find = false;
+	char *tmp_ptr = NULL;
 
 	if(!objName || !objIid)
 		return ZCFG_INTERNAL_ERROR;
@@ -59,10 +62,10 @@
 		sprintf(tmpName, "%s.%s", "Device", objName);
 	}
 
-	token = strtok(tmpName, ".");
+	token = strtok_r(tmpName, ".", &tmp_ptr);
 	/*InternetGatewayDevice*/
 	strcpy(fullPathName, token);
-	token = strtok(NULL, ".");
+	token = strtok_r(NULL, ".", &tmp_ptr);
 
 	while(token != NULL) {
 		strcat(fullPathName, ".");
@@ -84,7 +87,7 @@
 			strcat(fullPathName, token);
 		}
 
-		token = strtok(NULL, ".");
+		token = strtok_r(NULL, ".", &tmp_ptr);
 	}
 
 	if(level >= SUPPORTED_INDEX_LEVEL) {
@@ -594,6 +597,25 @@
 	return ret;
 }
 
+zcfgRet_t zcfgFeWholeObjJsonGet(char *tr181path, struct json_object **value)
+
+{
+	zcfgRet_t ret;
+	char *result = NULL;
+	
+	ret = zcfgFeWholeObjReadByName(tr181path, REQUEST_GET_WHOLE_OBJ_BY_NAME, &result);
+
+	if(ret == ZCFG_SUCCESS) {
+		if(result){
+			*value = json_tokener_parse(result);
+			result = NULL;
+			free(result);
+		}
+	}
+
+	return ret;
+}
+
 zcfgRet_t zcfgFeObjJsonGetWithoutUpdate(zcfg_offset_t oid, objIndex_t *objIid, struct json_object **value)
 {
         zcfgRet_t ret;
@@ -663,7 +685,7 @@
 
 zcfgRet_t zcfgFeObjJsonSet(zcfg_offset_t oid, objIndex_t *objIid, struct json_object *jobj, char *fbkMsg)
 {
-        zcfgRet_t ret;
+	zcfgRet_t ret;
 	char *value = NULL;
 
 	value = (char *)json_object_to_json_string(jobj);
@@ -672,7 +694,21 @@
 		return ZCFG_INTERNAL_ERROR;
 
 	ret = zcfgFeObjWrite(oid, objIid, value, REQUEST_SET_OBJ, fbkMsg);
-        return ret;
+	return ret;
+}
+
+zcfgRet_t zcfgFeWholeObjJsonSet(char *tr181path, struct json_object *jobj, char *fbkMsg)
+{
+	zcfgRet_t ret;
+	char *value = NULL;
+
+	value = (char *)json_object_to_json_string_ext(jobj, JSON_C_TO_STRING_PLAIN);
+
+	if(value == NULL)
+		return ZCFG_INTERNAL_ERROR;
+
+	ret =  zcfgFeWholeObjWriteByName(tr181path, value, REQUEST_SET_WHOLE_OBJ_BY_NAME, fbkMsg);
+	return ret;
 }
 
 #if 1 /* non-blocking config apply, ZyXEL, John */
Index: libzcfg_fe_rdm_string-1.0/zcfg_fe_rdm_string.h
===================================================================
--- libzcfg_fe_rdm_string-1.0.orig/zcfg_fe_rdm_string.h	2016-11-09 11:39:49.261654810 +0800
+++ libzcfg_fe_rdm_string-1.0/zcfg_fe_rdm_string.h	2016-11-09 11:39:49.273654810 +0800
@@ -30,6 +30,9 @@
 zcfgRet_t zcfgFeJsonMultiObjAddParam(struct json_object *, zcfg_offset_t , objIndex_t *, const char *, struct json_object *);
 zcfgRet_t zcfgFeJsonMultiObjRetrieve(struct json_object *multiJobj, zcfg_offset_t oid, objIndex_t *objIid, objIndex_t *rtdIid, struct json_object **rtdObj);
 
+zcfgRet_t zcfgFeWholeObjJsonGet(char *tr181path, struct json_object **);
+zcfgRet_t zcfgFeWholeObjJsonSet(char *tr181path, struct json_object *, char *);
+
 #define zcfgFeJsonObjNew() json_object_new_object()
 #define zcfgFeJsonObjFree(jobj) json_object_put(jobj); jobj = NULL
 #define zcfgFeParamValForEach(obj, key) char *key; \
