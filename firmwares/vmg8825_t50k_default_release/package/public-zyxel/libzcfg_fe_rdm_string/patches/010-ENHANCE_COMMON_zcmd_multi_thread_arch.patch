Index: libzcfg_fe_rdm_string-1.0/zcfg_fe_rdm_string.c
===================================================================
--- libzcfg_fe_rdm_string-1.0.orig/zcfg_fe_rdm_string.c	2014-06-25 14:39:31.314165797 +0800
+++ libzcfg_fe_rdm_string-1.0/zcfg_fe_rdm_string.c	2014-06-25 14:40:51.810455559 +0800
@@ -530,6 +530,23 @@
         return ret;
 }
 
+#if 1 /* non-blocking config apply, ZyXEL, John */
+zcfgRet_t zcfgFeObjJsonBlockedSet(zcfg_offset_t oid, objIndex_t *objIid, struct json_object *jobj, char *fbkMsg)
+{
+        zcfgRet_t ret;
+	char *value = NULL;
+
+	value = (char *)json_object_to_json_string(jobj);
+
+	if(value == NULL)
+		return ZCFG_INTERNAL_ERROR;
+
+	ret = zcfgFeObjWrite(oid, objIid, value, REQUEST_SET_OBJ | ZCFG_BLOCK_MODE_CONFIG_APPLY, fbkMsg);
+        return ret;
+}
+
+#endif
+
 zcfgRet_t zcfgFeObjJsonSetWithoutApply(zcfg_offset_t oid, objIndex_t *objIid, struct json_object *jobj, char *fbkMsg)
 {
 	zcfgRet_t ret;
@@ -561,6 +578,25 @@
 	return ret;
 }
 
+#if 1 /* non-blocking config apply, ZyXEL, John */
+zcfgRet_t zcfgFeMultiObjJsonBlockedSet(struct json_object *multiJobj, char *feedbackMsg)
+{
+	zcfgRet_t ret;
+	char *value = NULL;
+	objIndex_t objIid;
+
+	value = (char *)json_object_to_json_string(multiJobj);
+
+	if(value == NULL)
+		return ZCFG_INTERNAL_ERROR;
+
+	IID_INIT(objIid);
+	ret = zcfgFeObjWrite(0, &objIid, value, REQUEST_SET_MULTI_OBJ | ZCFG_BLOCK_MODE_CONFIG_APPLY, feedbackMsg);
+
+	return ret;
+}
+#endif
+
 zcfgRet_t zcfgFeObjJsonAdd(zcfg_offset_t oid, objIndex_t *objIid, char *feedbackMsg)
 {
 	zcfgRet_t ret;
@@ -569,12 +605,27 @@
 
 	return ret;
 }
+#if 1 /* non-blocking config apply, ZyXEL, John */
+zcfgRet_t zcfgFeObjJsonBlockedAdd(zcfg_offset_t oid, objIndex_t *objIid, char *feedbackMsg)
+{
+	zcfgRet_t ret;
+
+	ret = zcfgFeObjWrite(oid, objIid, NULL, REQUEST_ADD_INSTANCE | ZCFG_BLOCK_MODE_CONFIG_APPLY, feedbackMsg);
+
+	return ret;
+}
+#endif
 
 zcfgRet_t zcfgFeObjJsonDel(zcfg_offset_t oid, objIndex_t *objIid, char *feedbackMsg)
 {
 	zcfgRet_t ret;
 
+#if 1 /* non-blocking config apply, ZyXEL, John */
+	/* deleted instanced won;t be update to rdm(RAM) until backend process is done, as the result, we better 
+	    set action, DELETE, as blocked mode in multi-thread achitecture */
+	ret = zcfgFeObjWrite(oid, objIid, NULL, REQUEST_DEL_INSTANCE | ZCFG_BLOCK_MODE_CONFIG_APPLY, feedbackMsg);
+#else
 	ret = zcfgFeObjWrite(oid, objIid, NULL, REQUEST_DEL_INSTANCE, feedbackMsg);
-
+#endif
 	return ret;
 }
Index: libzcfg_fe_rdm_string-1.0/zcfg_fe_rdm_string.h
===================================================================
--- libzcfg_fe_rdm_string-1.0.orig/zcfg_fe_rdm_string.h	2014-06-25 14:39:31.306165797 +0800
+++ libzcfg_fe_rdm_string-1.0/zcfg_fe_rdm_string.h	2014-06-25 14:40:36.697927520 +0800
@@ -20,6 +20,11 @@
 zcfgRet_t zcfgFeObjJsonDel(zcfg_offset_t, objIndex_t *, char *);
 char* zcfgFeParamValGet(struct json_object *, char *);
 json_object* zcfgFeJsonMultiObjAppend(zcfg_offset_t, objIndex_t *, json_object *, json_object *);
+#if 1 /* non-blocking config apply, ZyXEL, John */
+zcfgRet_t zcfgFeObjJsonBlockedSet(zcfg_offset_t oid, objIndex_t *objIid, struct json_object *jobj, char *fbkMsg);
+zcfgRet_t zcfgFeObjJsonBlockedAdd(zcfg_offset_t oid, objIndex_t *objIid, char *feedbackMsg);
+zcfgRet_t zcfgFeMultiObjJsonBlockedSet(struct json_object *multiJobj, char *feedbackMsg);
+#endif
 
 #define zcfgFeJsonObjNew() json_object_new_object()
 #define zcfgFeJsonObjFree(jobj) json_object_put(jobj); jobj = NULL
