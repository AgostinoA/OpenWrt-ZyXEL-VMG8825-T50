Index: libzcfg_fe_rdm_string-1.0/zcfg_fe_rdm_string.c
===================================================================
--- libzcfg_fe_rdm_string-1.0.orig/zcfg_fe_rdm_string.c	2014-05-15 16:44:10.590300248 +0800
+++ libzcfg_fe_rdm_string-1.0/zcfg_fe_rdm_string.c	2014-05-15 16:47:40.546305552 +0800
@@ -166,7 +166,8 @@
 				}
 			}
 
-			if(type == json_type_string || type == json_type_time) {
+			if(type == json_type_string || type == json_type_time ||
+				type == json_type_base64 || type == json_type_hex ) {
 				strLen = strlen(value);
 				if(strLen >= paramInfo->len) {
 					zcfgLog(ZCFG_LOG_ERR, "The value length of %s is %d greater than %d defined in schema\n", parameterName, strLen, paramInfo->len);
@@ -252,6 +253,38 @@
 						p++;
 					}
 					break;
+				case json_type_hex:
+					strLen = strlen(value);
+					p = value;
+					for(index = 0; index<strLen; index++){
+						if(!isdigit(*p) && (!((*p)>='a' && (*p)<='f')) && (!((*p)>='A' && (*p)<='F')))
+							return ZCFG_INVALID_PARAM_VALUE;
+						p++;
+					}
+					break;
+				case json_type_base64: /*[A-Z,a-z,0-9, + /] ,if rest length is less than 4, fill of '=' character. */
+					strLen = strlen(value);
+					if( strLen%4 !=0) return ZCFG_INVALID_PARAM_VALUE;
+
+					p = value;
+					for(index = 0; index<strLen; index++){
+						if(!isdigit(*p) && !isalpha(*p) && (*p !='+') && (*p != '/')){
+							if((*p == '=') && (index >= strLen-2)){
+								break;
+							}
+							else
+								return ZCFG_INVALID_PARAM_VALUE;
+						}
+						p++;
+					}
+					// check end of =
+					strLen -= index;
+					for(index = 0; index<strLen; index++){
+						if(*p != '=')
+							return ZCFG_INVALID_PARAM_VALUE;
+						p++;
+					}
+					break;
 				default:
 					break;
 			}
@@ -300,11 +333,12 @@
 			setValue = json_object_new_int(atoi(value));
 			break;
 		case json_type_uint32:
+		case json_type_ulong:
 			setValue = json_object_new_int((uint32_t)atoi(value));
 			break;
 		case json_type_string:
-			setValue = json_object_new_string(value);
-			break;
+		case json_type_hex:
+		case json_type_base64:
 		case json_type_time:
 			setValue = json_object_new_string(value);
 			break;
