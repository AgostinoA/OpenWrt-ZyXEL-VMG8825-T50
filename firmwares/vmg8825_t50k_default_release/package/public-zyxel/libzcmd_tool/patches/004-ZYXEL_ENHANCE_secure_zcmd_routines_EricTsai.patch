Index: libzcmd_tool-1.0/zcmd_tool.c
===================================================================
--- libzcmd_tool-1.0.orig/zcmd_tool.c	2016-10-26 21:13:44.223112308 +0800
+++ libzcmd_tool-1.0/zcmd_tool.c	2016-10-26 21:03:55.069092000 +0800
@@ -137,9 +137,10 @@
 			case json_type_base64:
 			case json_type_hex:
 				//zcfgLog(ZCFG_LOG_DEBUG, "type_string\n");
-				v.str_val = (char *)malloc(len+1);
+				v.str_val = (char *)calloc(len+1, 1);
 				if(v.str_val == NULL) {
 					printf("%s : malloc fail\n", __FUNCTION__);
+					free(jobj);
 					return;
 				}
 				memcpy(v.str_val, rqst_struct+pos, len);
@@ -196,7 +197,7 @@
 	*objStruct = (void *)malloc(objInfo->size);
 	if(*objStruct == NULL){
 		zcfgLog(ZCFG_LOG_ERR, "Malloc fail in %s\n", __FUNCTION__);
-		free(*objStruct);
+		//free(*objStruct);
 		return ZCFG_INTERNAL_ERROR;
 	}
 
@@ -205,6 +206,10 @@
 	/* With the information of each parameter, we can fill up data structure
            from json string. */
 	jobj = json_tokener_parse(jstr);
+	if(is_error(jobj)){
+		free(*objStruct);
+		return ZCFG_INTERNAL_ERROR;
+	}
 
 	GET_PAMAMETERS_IN_OBJECT(objInfo, paramInfo, paramName) {
 		type = paramInfo->type;
@@ -214,6 +219,7 @@
 		if(tmpJobj == NULL) {
 			zcfgLog(ZCFG_LOG_ERR, "Can't get value for parameter %s\n", paramName);
 			free(*objStruct);
+			json_object_put(jobj);
 			return ZCFG_INTERNAL_ERROR;
 		}
 
@@ -275,8 +281,8 @@
 			case json_type_hex:
 				//zcfgLog(ZCFG_LOG_DEBUG, "json_type_string\n");
 				//zcfgLog(ZCFG_LOG_DEBUG, "Name %s length %d\n", paramName, len);
-				v.str_val = (char *)malloc(len+1);
-				strcpy(v.str_val, json_object_get_string(tmpJobj));
+				v.str_val = (char *)calloc(len+1, 1);
+				strncpy(v.str_val, json_object_get_string(tmpJobj), len);
                                 memcpy(*objStruct+pos, v.str_val, len);
 				free(v.str_val);
 
