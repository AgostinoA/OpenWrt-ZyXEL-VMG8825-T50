Index: busybox-1.25.1/loginutils/login.c
===================================================================
--- busybox-1.25.1.orig/loginutils/login.c
+++ busybox-1.25.1/loginutils/login.c
@@ -410,6 +410,7 @@ int login_main(int argc UNUSED_PARAM, ch
 	char *opt_user = opt_user; /* for compiler */
 	char *full_tty;
 	char *short_tty;
+        char  addr[128];
 #ifdef ZCFG_SUPPORT
         int cur_user_idx[2] = {-1};
         int login_fail_cnt = 0;
@@ -452,6 +453,10 @@ int login_main(int argc UNUSED_PARAM, ch
 			bb_error_msg_and_die("-f is for root only");
 		safe_strncpy(username, opt_user, sizeof(username));
 	}
+
+        safe_strncpy(addr, argv[1], sizeof(addr));
+        argv[1] = NULL;
+
 	argv += optind;
 	if (argv[0]) /* user from command line (getty) */
 		safe_strncpy(username, argv[0], sizeof(username));
@@ -628,7 +633,7 @@ int login_main(int argc UNUSED_PARAM, ch
                 }
 #endif
                 if (!strncmp("p",short_tty,1))
-                        syslog(LOG_INFO, "Account: Enter an invalid password for User '%s' from the host on %s by telnetd.",username,short_tty);
+                        syslog(LOG_INFO, "Account: Enter an invalid password for User '%s' from the host %s by telnetd.",username,addr);
 		if (++count == 3) {
 			syslog(LOG_WARNING, "invalid password for '%s'%s",
 						username, fromhost);
@@ -697,7 +702,7 @@ int login_main(int argc UNUSED_PARAM, ch
 		syslog(LOG_INFO, "root login%s", fromhost);
 
         if (!strncmp("p",short_tty,1))
-                syslog(LOG_INFO, "Account: User '%s' login from the host on %s by telnetd.", username, short_tty);
+                syslog(LOG_INFO, "Account: User '%s' login from the host %s by telnetd.", username, addr);
 
 	if (ENABLE_FEATURE_CLEAN_UP)
 		free(fromhost);
Index: busybox-1.25.1/networking/telnetd.c
===================================================================
--- busybox-1.25.1.orig/networking/telnetd.c
+++ busybox-1.25.1/networking/telnetd.c
@@ -249,7 +249,7 @@ make_new_session(
 #if !ENABLE_FEATURE_TELNETD_STANDALONE
 	enum { sock = 0 };
 #endif
-	const char *login_argv[2];
+	const char *login_argv[3];
 	struct termios termbuf;
 	int fd, pid;
 	char tty_name[GETPTY_BUFSIZE];
@@ -337,15 +337,20 @@ make_new_session(
 
 	pid = getpid();
 
-	if (ENABLE_FEATURE_UTMP) {
-		len_and_sockaddr *lsa = get_peer_lsa(sock);
-		char *hostname = NULL;
-		if (lsa) {
+ 
+        len_and_sockaddr *lsa = get_peer_lsa(sock);
+        char *address = NULL;
+        if (lsa) {
+                address = xmalloc_sockaddr2host_noport(&lsa->u.sa);
+                if (strncmp(address, "::ffff:", sizeof("::ffff:") - 1) == 0)
+                        address = address + sizeof("::ffff:") - 1;
+ 
+                if (ENABLE_FEATURE_UTMP) {
+                        char *hostname = NULL;
 			hostname = xmalloc_sockaddr2dotted(&lsa->u.sa);
-			free(lsa);
+                        write_new_utmp(pid, LOGIN_PROCESS, tty_name, /*username:*/ "LOGIN", hostname);
+                        free(hostname);
 		}
-		write_new_utmp(pid, LOGIN_PROCESS, tty_name, /*username:*/ "LOGIN", hostname);
-		free(hostname);
 	}
 
 	/* Make new session and process group */
@@ -380,13 +385,16 @@ make_new_session(
 
 	/* Exec shell / login / whatever */
 	login_argv[0] = G.loginpath;
-	login_argv[1] = NULL;
+        login_argv[1] = address;
+        login_argv[2] = NULL;
 	/* exec busybox applet (if PREFER_APPLETS=y), if that fails,
 	 * exec external program.
 	 * NB: sock is either 0 or has CLOEXEC set on it.
 	 * fd has CLOEXEC set on it too. These two fds will be closed here.
 	 */
 	BB_EXECVP(G.loginpath, (char **)login_argv);
+        free(lsa);
+        free(address);
 	/* _exit is safer with vfork, and we shouldn't send message
 	 * to remote clients anyway */
 	_exit(EXIT_FAILURE); /*bb_perror_msg_and_die("execv %s", G.loginpath);*/
