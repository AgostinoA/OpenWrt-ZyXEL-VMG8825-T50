From 8762512fdb088acefb9f3ea5f7b1e1bf2d336ff3 Mon Sep 17 00:00:00 2001
From: Rostislav Skudnov <rostislav@tuxera.com>
Date: Wed, 1 Feb 2017 18:35:13 +0000
Subject: Replace int -> uint to avoid signed integer overflow

An example of such an error (should be compiled with DEBUG_SANITIZE):

runtime error: left shift of 1 by 31 places cannot be represented in
type 'int'

Signed-off-by: Rostislav Skudnov <rostislav@tuxera.com>
Signed-off-by: Denys Vlasenko <vda.linux@googlemail.com>
---
 archival/libarchive/decompress_bunzip2.c | 6 +++---
 libbb/crc32.c                            | 2 +-
 libbb/getopt32.c                         | 4 ++--
 libbb/pw_encrypt.c                       | 2 +-
 miscutils/rx.c                           | 2 +-
 5 files changed, 8 insertions(+), 8 deletions(-)

Index: busybox-1_20_1/archival/libarchive/decompress_bunzip2.c
===================================================================
--- busybox-1_20_1.orig/archival/libarchive/decompress_bunzip2.c	2017-11-08 14:52:57.602526406 +0800
+++ busybox-1_20_1/archival/libarchive/decompress_bunzip2.c	2017-11-08 14:54:58.202526406 +0800
@@ -134,7 +134,7 @@
 
 		/* Avoid 32-bit overflow (dump bit buffer to top of output) */
 		if (bit_count >= 24) {
-			bits = bd->inbufBits & ((1 << bit_count) - 1);
+			bits = bd->inbufBits & ((1U << bit_count) - 1);
 			bits_wanted -= bit_count;
 			bits <<= bits_wanted;
 			bit_count = 0;
@@ -158,11 +158,11 @@
 {
 	struct group_data *hufGroup;
 	int dbufCount, dbufSize, groupCount, *base, *limit, selector,
-		i, j, t, runPos, symCount, symTotal, nSelectors, byteCount[256];
+		i, j, runPos, symCount, symTotal, nSelectors, byteCount[256];
 	int runCnt = runCnt; /* for compiler */
 	uint8_t uc, symToByte[256], mtfSymbol[256], *selectors;
 	uint32_t *dbuf;
-	unsigned origPtr;
+	unsigned origPtr, t;
 
 	dbuf = bd->dbuf;
 	dbufSize = bd->dbufSize;
Index: busybox-1_20_1/libbb/crc32.c
===================================================================
--- busybox-1_20_1.orig/libbb/crc32.c	2012-05-28 08:48:55.000000000 +0800
+++ busybox-1_20_1/libbb/crc32.c	2017-11-08 14:54:58.202526406 +0800
@@ -24,7 +24,7 @@
 {
 	uint32_t polynomial = endian ? 0x04c11db7 : 0xedb88320;
 	uint32_t c;
-	int i, j;
+	unsigned i, j;
 
 	if (!crc_table)
 		crc_table = xmalloc(256 * sizeof(uint32_t));
Index: busybox-1_20_1/libbb/getopt32.c
===================================================================
--- busybox-1_20_1.orig/libbb/getopt32.c	2012-05-28 08:48:55.000000000 +0800
+++ busybox-1_20_1/libbb/getopt32.c	2017-11-08 14:54:58.202526406 +0800
@@ -376,7 +376,7 @@
 		if (c >= 32)
 			break;
 		on_off->opt_char = *s;
-		on_off->switch_on = (1 << c);
+		on_off->switch_on = (1U << c);
 		if (*++s == ':') {
 			on_off->optarg = va_arg(p, void **);
 			while (*++s == ':')
@@ -419,7 +419,7 @@
 			if (c >= 32)
 				break;
 			on_off->opt_char = l_o->val;
-			on_off->switch_on = (1 << c);
+			on_off->switch_on = (1U << c);
 			if (l_o->has_arg != no_argument)
 				on_off->optarg = va_arg(p, void **);
 			c++;
Index: busybox-1_20_1/libbb/pw_encrypt.c
===================================================================
--- busybox-1_20_1.orig/libbb/pw_encrypt.c	2012-05-28 08:48:55.000000000 +0800
+++ busybox-1_20_1/libbb/pw_encrypt.c	2017-11-08 14:54:58.202526406 +0800
@@ -30,7 +30,7 @@
 int FAST_FUNC crypt_make_salt(char *p, int cnt /*, int x */)
 {
 	/* was: x += ... */
-	int x = getpid() + monotonic_us();
+	unsigned x = getpid() + monotonic_us();
 	do {
 		/* x = (x*1664525 + 1013904223) % 2^32 generator is lame
 		 * (low-order bit is not "random", etc...),
Index: busybox-1_20_1/miscutils/rx.c
===================================================================
--- busybox-1_20_1.orig/miscutils/rx.c	2012-05-28 08:48:55.000000000 +0800
+++ busybox-1_20_1/miscutils/rx.c	2017-11-08 14:54:58.202526406 +0800
@@ -84,7 +84,7 @@
 		int blockBegin;
 		int blockNo, blockNoOnesCompl;
 		int cksum_or_crc;
-		int expected;
+		unsigned expected;
 		int i, j;
 
 		blockBegin = read_byte(timeout);
