Index: busybox-1_20_1/libbb/correct_password.c
===================================================================
--- busybox-1_20_1.orig/libbb/correct_password.c	2017-08-08 20:16:38.529191372 +0800
+++ busybox-1_20_1/libbb/correct_password.c	2017-08-09 08:58:48.873281681 +0800
@@ -63,10 +63,15 @@
 		correct = (r || !result) ? "aa" : result->sp_pwdp;
 	}
 #endif
-
+//SHA512_PASSWD
+#if 0
 	if (!correct[0]) /* empty password field? */
 		return 1;
-
+#else
+	if (!correct[0]) /* empty password field? */
+		return 0;
+#endif
+//SHA512_PASSWD
  fake_it:
 	unencrypted = bb_ask_stdin("Password: ");
 	if (!unencrypted) {
Index: busybox-1_20_1/loginutils/login.c
===================================================================
--- busybox-1_20_1.orig/loginutils/login.c	2017-08-08 20:16:38.565191372 +0800
+++ busybox-1_20_1/loginutils/login.c	2017-08-09 09:02:32.755709524 +0800
@@ -10,7 +10,9 @@
 //usage:     "\n	-f	Don't authenticate (user already authenticated)"
 //usage:     "\n	-h	Name of the remote host"
 //usage:     "\n	-p	Preserve environment"
-
+//SHA512_PASSWD
+//usage:     "\n	-z	for ZYXEL auth user account"
+//SHA512_PASSWD
 #include "libbb.h"
 #include <syslog.h>
 #include <sys/resource.h>
@@ -394,6 +396,9 @@
 		LOGIN_OPT_f = (1<<0),
 		LOGIN_OPT_h = (1<<1),
 		LOGIN_OPT_p = (1<<2),
+//SHA512_PASSWD
+		LOGIN_OPT_z = (1<<3)
+//SHA512_PASSWD
 	};
 	char *fromhost;
 	char username[USERNAME_SIZE];
@@ -405,6 +410,9 @@
 	char *opt_user = opt_user; /* for compiler */
 	char *full_tty;
 	char *short_tty;
+//SHA512_PASSWD
+	char *accFile = NULL;
+//SHA512_PASSWD
 	char  addr[128];
 #ifdef ZCFG_SUPPORT
 	int cur_user_idx[2] = {-1};
@@ -441,7 +449,105 @@
 	bb_daemonize_or_rexec(DAEMON_ONLY_SANITIZE | DAEMON_CLOSE_EXTRA_FDS, NULL);
 
 	username[0] = '\0';
+//SHA512_PASSWD
+#if 0
 	opt = getopt32(argv, "f:h:p", &opt_user, &opt_host);
+#else
+	opt = getopt32(argv, "f:h:pz:", &opt_user, &opt_host, &accFile);
+
+	if (accFile) {
+		// return:
+		// -3: auth file does not exist
+		// -2: user account does not exist
+		// -1: auth fail
+		// 0: auth success
+#if ENABLE_FEATURE_SHADOWPASSWDS
+		/* Using _r function to avoid pulling in static buffers */
+		struct spwd spw;
+		char buffer[256];
+#endif
+		char accInfo[512] = {0};
+		char sysCmd[64] = {0};
+		char *accUser;
+		char *accPwd;
+		const char *correct;
+		char *encrypted;
+		char *pp;
+		int r, fd;
+
+		fd = open(accFile, O_RDWR|O_APPEND);
+		if (fd < 0) {
+			sprintf(sysCmd, "echo \"result:-3\" > %s", accFile);
+			system(sysCmd);
+			return 0;
+		}
+		// accInfo in format username:password
+		r = read(fd, &accInfo[0], 512);
+		close(fd);
+		
+		accUser = &accInfo[0];
+		accPwd = strstr(accInfo,  "\r\n");
+		if (accUser[0] == 0) {
+			sprintf(sysCmd, "echo \"result:-2\" > %s", accFile);
+			system(sysCmd);
+			return 0;
+		}
+		if (accPwd == NULL) {
+			sprintf(sysCmd, "echo \"result:-1\" > %s", accFile);
+			system(sysCmd);
+			return 0;
+		}
+		accPwd[0] = 0;
+		accPwd += 2;
+		pp = strstr(accPwd ,  "\r\n");
+		*pp = 0;
+
+		correct = "aa";
+		pw = getpwnam(accUser);
+		if (!pw) {
+			sprintf(sysCmd, "echo \"result:-2\" > %s", accFile);
+			system(sysCmd);
+			return 0;
+		}
+		if (pw->pw_passwd[0] == '!' || pw->pw_passwd[0] == '*') {
+			sprintf(sysCmd, "echo \"result:-2\" > %s", accFile);
+			system(sysCmd);
+			return 0;
+		}
+		/* Don't check the password if password entry is empty (!) */
+		if (!pw->pw_passwd[0]) {
+			sprintf(sysCmd, "echo \"result:-2\" > %s", accFile);
+			system(sysCmd);
+			return 0;
+		}
+		correct = pw->pw_passwd;
+#if ENABLE_FEATURE_SHADOWPASSWDS
+		if ((correct[0] == 'x' || correct[0] == '*') && !correct[1]) {
+			/* getspnam_r may return 0 yet set result to NULL.
+			 * At least glibc 2.4 does this. Be extra paranoid here. */
+			struct spwd *result = NULL;
+			r = getspnam_r(pw->pw_name, &spw, buffer, sizeof(buffer), &result);
+			correct = (r || !result) ? "aa" : result->sp_pwdp;
+		}
+#endif
+		if (!correct[0]) {/* empty password field? */
+			sprintf(sysCmd, "echo \"result:-2\" > %s", accFile);
+			system(sysCmd);
+			return 0;
+		}
+		encrypted = pw_encrypt(accPwd, correct, 1);
+
+		if (strcmp(encrypted, correct) == 0) {
+			sprintf(sysCmd, "echo \"result:0\" > %s", accFile);
+			system(sysCmd);
+			return 0;
+		}
+		sprintf(sysCmd, "echo \"result:-1\" > %s", accFile);
+		system(sysCmd);
+		return 0;
+	}
+#endif
+//SHA512_PASSWD
 	if (opt & LOGIN_OPT_f) {
 		if (!run_by_root)
 			bb_error_msg_and_die("-f is for root only");
@@ -642,16 +748,24 @@
 
 		if (pw->pw_passwd[0] == '!' || pw->pw_passwd[0] == '*')
 			goto auth_failed;
-
+//SHA512_PASSWD
+#if 0
 		if (opt & LOGIN_OPT_f)
 			break; /* -f USER: success without asking passwd */
-
+#endif
+//SHA512_PASSWD
 		if (pw->pw_uid == 0 && !check_securetty(short_tty))
 			goto auth_failed;
 
 		/* Don't check the password if password entry is empty (!) */
 		if (!pw->pw_passwd[0])
+//SHA512_PASSWD
+#if 0
 			break;
+#else
+			goto auth_failed;
+#endif
+//SHA512_PASSWD 
  fake_it:
 		/* Password reading and authorization takes place here.
 		 * Note that reads (in no-echo mode) trash tty attributes.
Index: busybox-1_20_1/loginutils/passwd.c
===================================================================
--- busybox-1_20_1.orig/loginutils/passwd.c	2012-05-28 08:48:55.000000000 +0800
+++ busybox-1_20_1/loginutils/passwd.c	2017-08-09 09:07:09.183210320 +0800
@@ -20,8 +20,13 @@
 {
 	if (str) memset(str, 0, strlen(str));
 }
-
+//SHA512_PASSWD
+#if 0
 static char* new_password(const struct passwd *pw, uid_t myuid, const char *algo)
+#else
+static char* new_password(const struct passwd *pw, uid_t myuid, const char *algo, const char *pwd)
+#endif
+//SHA512_PASSWD
 {
 	char salt[MAX_PW_SALT_LEN];
 	char *orig = (char*)"";
@@ -46,7 +51,15 @@
 			free(encrypted);
 	}
 	orig = xstrdup(orig); /* or else bb_ask_stdin() will destroy it */
+//SHA512_PASSWD
+#if 0
 	newp = bb_ask_stdin("New password: "); /* returns ptr to static */
+#else
+	if (pwd == NULL)
+		newp = bb_ask_stdin("New password: "); /* returns ptr to static */
+	else newp = pwd;
+#endif
+//SHA512_PASSWD
 	if (!newp)
 		goto err_ret;
 	newp = xstrdup(newp); /* we are going to bb_ask_stdin() again, so save it */
@@ -56,7 +69,8 @@
 	) {
 		goto err_ret; /* non-root is not allowed to have weak passwd */
 	}
-
+//SHA512_PASSWD
+#if 0
 	cp = bb_ask_stdin("Retype password: ");
 	if (!cp)
 		goto err_ret;
@@ -64,7 +78,18 @@
 		puts("Passwords don't match");
 		goto err_ret;
 	}
-
+#else
+	if (pwd == NULL) {
+	cp = bb_ask_stdin("Retype password: ");
+	if (!cp)
+		goto err_ret;
+	if (strcmp(cp, newp) != 0) {
+		puts("Passwords don't match");
+		goto err_ret;
+	}
+	}
+#endif
+//SHA512_PASSWD
 	crypt_make_pw_salt(salt, algo);
 
 	/* pw_encrypt returns malloced str */
@@ -90,11 +115,17 @@
 		OPT_lock   = (1 << 1), /* -l - lock account */
 		OPT_unlock = (1 << 2), /* -u - unlock account */
 		OPT_delete = (1 << 3), /* -d - delete password */
+//SHA512_PASSWD
+		OPT_pwd = (1 << 4), /* -p - new password */
+//SHA512_PASSWD
 		OPT_lud    = OPT_lock | OPT_unlock | OPT_delete,
 	};
 	unsigned opt;
 	int rc;
 	const char *opt_a = CONFIG_FEATURE_DEFAULT_PASSWD_ALGO;
+//SHA512_PASSWD
+	const char *opt_p = NULL;
+//SHA512_PASSWD
 	const char *filename;
 	char *myname;
 	char *name;
@@ -111,7 +142,13 @@
 
 	logmode = LOGMODE_BOTH;
 	openlog(applet_name, 0, LOG_AUTH);
+//SHA512_PASSWD
+#if 0
 	opt = getopt32(argv, "a:lud", &opt_a);
+#else
+	opt = getopt32(argv, "a:ludp:", &opt_a, &opt_p);
+#endif
+//SHA512_PASSWD
 	//argc -= optind;
 	argv += optind;
 
@@ -165,7 +202,13 @@
 					"locked password for %s", name);
 		}
 		printf("Changing password for %s\n", name);
+//SHA512_PASSWD
+#if 0
 		newp = new_password(pw, myuid, opt_a);
+#else
+		newp = new_password(pw, myuid, opt_a, opt_p);
+#endif
+//SHA512_PASSWD
 		if (!newp) {
 			logmode = LOGMODE_STDIO;
 			bb_error_msg_and_die("password for %s is unchanged", name);
