Index: clinkc/src/cybergarage/http/chttp_server.c
===================================================================
--- clinkc.orig/src/cybergarage/http/chttp_server.c	2018-09-19 13:59:59.961860535 +0800
+++ clinkc/src/cybergarage/http/chttp_server.c	2018-09-19 14:02:25.648414757 +0800
@@ -152,7 +152,7 @@
 	if(setsockopt(httpServer->sock->id, IPPROTO_TCP, TCP_NODELAY, (char *)&flag, sizeof(flag)) == -1)
 	     printf("Error setsockopt error=%s\n\n\n",strerror(errno));
 #endif
-	
+
 	if (cg_socket_listen(httpServer->sock) == FALSE) {
 		cg_socket_delete(httpServer->sock);
 		httpServer->sock = NULL;
@@ -217,9 +217,9 @@
 			cg_socketlist_add(clientData->clientSocks, clientSock);
 			clientData->_clientSockSize++;
 		}
-#else		
+#else
 		clientData->clientSock = clientSock;
-#endif		
+#endif
 	}
 
 	cg_log_debug_l4("Leaving...\n");
@@ -269,15 +269,15 @@
 	int maxFd, nReturn, nread, clientThreadSize;
 	CgSocketList *clientSocks;
 	struct timeval timeout;
-#endif	
+#endif
 	CgSocket *clientSock;
 	void *httpServerUserData;
 	CgHttpRequest *httpReq;
 	char *version = NULL;
-	
+
 	cg_log_debug_l4("Entering...\n");
-	
-	
+
+
 #ifdef ZYXEL_PATCH //set thread un-joinabled, by Mark 20140903
 	pthread_detach(pthread_self());
 #endif
@@ -285,14 +285,14 @@
 	httpServer = clientData->httpServer;
 #ifdef ZYXEL_PATCH
 	clientSocks = clientData->clientSocks;
-#else	
+#else
 	clientSock = clientData->clientSock;
 #endif
 	httpServerUserData = cg_http_server_getuserdata(httpServer);
 
 	httpReq = cg_http_request_new();
-	
-#ifdef ZYXEL_PATCH	
+
+#ifdef ZYXEL_PATCH
 	while (cg_thread_isrunnable(thread) == TRUE) {
 		cg_thread_lock(thread);
 
@@ -301,7 +301,7 @@
 			cg_thread_unlock(thread);
 			break;
 		}
-		FD_ZERO(&activeFds); 
+		FD_ZERO(&activeFds);
 		FD_ZERO(&readFds);
 		maxFd = -1;
 		for (activeSock = cg_socketlist_gets(clientSocks); activeSock != NULL; activeSock = cg_socket_next(activeSock)){
@@ -316,7 +316,7 @@
 		nReturn = select(maxFd, &readFds, NULL, &activeFds, &timeout);
 		if(nReturn < 0) {
 			if (errno == EINTR){
-				continue; 
+				continue;
 			}
 			printf("%s: errno %d\n", __FUNCTION__, errno);
 			cg_thread_lock(thread);
@@ -348,7 +348,7 @@
 				cg_thread_unlock(thread);
 				if(FD_ISSET(clientSock->id, &activeFds) || FD_ISSET(clientSock->id, &readFds)){
 					nReturn--;
-					if(cg_http_request_read(httpReq, clientSock) == FALSE){		
+					if(cg_http_request_read(httpReq, clientSock) == FALSE){
 						cg_thread_lock(thread);
 						cg_list_remove((CgList*)clientSock);
 						clientData->_clientSockSize--;
@@ -357,9 +357,9 @@
 						clientSock = NULL;
 						continue;
 					}
-					else{					
+					else{
 						cg_http_request_setsocket(httpReq, clientSock);
-						
+
 						version = cg_http_request_getversion(httpReq);
 						if (cg_strcmp(version, CG_HTTP_VER11) == 0)
 						{
@@ -383,7 +383,7 @@
 
 						/* Close connection according to HTTP version and headers */
 						/* We are having HTTP/1.1 or better => terminate, if requested */
-						if (cg_strcmp(version, CG_HTTP_VER10) == 0 || 
+						if (cg_strcmp(version, CG_HTTP_VER10) == 0 ||
 							cg_http_request_iskeepaliveconnection(httpReq) == FALSE )
 						{
 							/* Terminate connection after HTTP/1.0 request */
@@ -408,7 +408,7 @@
 	cg_http_server_unlock(httpServer);
 #else
 	cg_http_request_setsocket(httpReq, clientSock);
-	
+
 	/**** Thanks for Makela Aapo (10/31/05) ****/
 	while (cg_http_request_read(httpReq, clientSock) == TRUE && cg_thread_isrunnable(thread) == TRUE){
 		/* Check some validity of the request */
@@ -446,7 +446,7 @@
 	cg_log_debug_s("Dropping HTTP client\n");
 	cg_http_request_delete(httpReq);
 	cg_thread_lock(thread);
-#ifdef ZYXEL_PATCH	
+#ifdef ZYXEL_PATCH
 	cg_socketlist_delete(clientSocks);
 #else
 	cg_socket_close(clientSock);
@@ -455,7 +455,7 @@
 	cg_http_server_clientdata_delete(clientData);
 	cg_thread_setuserdata(thread, NULL);
 	cg_thread_unlock(thread);
-#ifndef ZYXEL_PATCH	
+#ifndef ZYXEL_PATCH
     // This code frequently crashes. mutex lock referencing free'd memory.
 	//cg_thread_remove(thread);
 #endif
@@ -528,13 +528,13 @@
 	CgHttpServerClientData *clientData;
 	CgSocket *serverSock;
 	CgSocket *clientSock;
-#ifdef ZYXEL_PATCH 
+#ifdef ZYXEL_PATCH
 	fd_set activeFds, readFds;
 	CgSocket *activeSock;
 	int maxFd, nReturn, nread, clientThreadSize;
 	int waitClientSockets, threadSockets, threadSockets_tmp;
 	CgThread *tmpClientThread;
-#endif	
+#endif
 
 	cg_log_debug_l4("Entering...\n");
 
@@ -545,7 +545,7 @@
 	serverSock = httpServer->sock;
 	while (cg_thread_isrunnable(thread) == TRUE) {
 #ifdef ZYXEL_PATCH /*support ssl, ZyXEL 2013*/
-		//poll server socket and all client socket that is not to start handle		
+		//poll server socket and all client socket that is not to start handle
 		FD_ZERO(&activeFds);
 		FD_ZERO(&readFds);
 		FD_SET(serverSock->id, &activeFds);
@@ -558,8 +558,8 @@
 		}
 		nReturn = select(maxFd, &readFds, NULL, &activeFds, NULL);
 		if(nReturn < 0) {
-			if (errno == EINTR) continue; 
-            break; 
+			if (errno == EINTR) continue;
+            break;
 		}
 		else if(nReturn){
 			if(nReturn && (FD_ISSET(serverSock->id, &activeFds) || FD_ISSET(serverSock->id, &readFds))){
@@ -596,7 +596,7 @@
 				for (activeSock = cg_socketlist_gets(httpServer->clientSocks); activeSock != NULL, nReturn > 0; ){
 					clientSock = activeSock;
 					activeSock = cg_socket_next(clientSock);
-					if(FD_ISSET(clientSock->id, &activeFds) || FD_ISSET(clientSock->id, &readFds)){						
+					if(FD_ISSET(clientSock->id, &activeFds) || FD_ISSET(clientSock->id, &readFds)){
 						nReturn--;
 						// Limit client count, if client thread size > limit, wait for thread close
 						cg_list_remove((CgList*)clientSock);
@@ -607,7 +607,7 @@
 							continue;
 						}
 						else if(CG_CLIENT_THREAD_LIMIT && (clientThreadSize = cg_threadlist_size(httpServer->clientThreads)) >= CG_CLIENT_THREAD_LIMIT){
-							//cg_sleep(CG_CLIENT_THREAD_WAIT_TIME); 
+							//cg_sleep(CG_CLIENT_THREAD_WAIT_TIME);
 							//break;
 #if 0
 							cg_http_server_lock(httpServer);
@@ -657,7 +657,10 @@
 		cg_threadlist_add(httpServer->clientThreads, httpClientThread);
 		cg_http_server_unlock(httpServer);
 		int n = cg_threadlist_size(httpServer->clientThreads);
+
+#if 0 /* cpwang, 2018-09-19 14:02:16, redundant log */
 		printf("%s: clientThreads %d\n", __FUNCTION__, n);
+#endif
 
 		cg_thread_start(httpClientThread);
 #ifdef ZYXEL_PATCH
@@ -668,7 +671,7 @@
 		}
 #endif
 	}
-	
+
 	cg_log_debug_l4("Leaving...\n");
 }
 
@@ -734,13 +737,13 @@
 		cg_threadlist_delete(httpServer->clientThreads);
 		httpServer->clientThreads = NULL;
 	}
-	
+
 #ifdef ZYXEL_PATCH
 	if(httpServer->clientSocks != NULL){
 		cg_socketlist_delete(httpServer->clientSocks);
 		httpServer->clientSocks = NULL;
 	}
-#endif	
+#endif
 	cg_log_debug_l4("Leaving...\n");
 
 	return TRUE;
