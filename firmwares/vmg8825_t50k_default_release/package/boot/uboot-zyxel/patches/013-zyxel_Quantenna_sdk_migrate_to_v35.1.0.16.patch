Index: u-boot-2009.11/common/main.c
===================================================================
--- u-boot-2009.11.orig/common/main.c	2012-12-24 11:33:52.954804078 +0800
+++ u-boot-2009.11/common/main.c	2012-12-24 11:39:03.000000000 +0800
@@ -427,7 +427,10 @@
 # ifdef CONFIG_AUTOBOOT_KEYED
 		int prev = disable_ctrlc(1);	/* disable Control C checking */
 # endif
-
+#ifdef CONFIG_STARTUP_POST_TESTING
+		run_command ("post", 0);
+		s = getenv ("bootcmd");
+#endif
 # ifndef CONFIG_SYS_HUSH_PARSER
 		run_command (s, 0);
 # else
Index: u-boot-2009.11/common/Makefile
===================================================================
--- u-boot-2009.11.orig/common/Makefile	2009-12-16 06:20:54.000000000 +0800
+++ u-boot-2009.11/common/Makefile	2012-12-24 11:45:34.597983228 +0800
@@ -146,6 +146,8 @@
 COBJS-$(CONFIG_CMD_XIMG) += cmd_ximg.o
 COBJS-$(CONFIG_YAFFS2) += cmd_yaffs2.o
 COBJS-$(CONFIG_VFD) += cmd_vfd.o
+COBJS-$(CONFIG_STARTUP_POST_TESTING) += cmd_post.o
+COBJS-$(CONFIG_STARTUP_POST_TESTING) += memory.o
 
 # others
 COBJS-$(CONFIG_DDR_SPD) += ddr_spd.o
Index: u-boot-2009.11/common/memory.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ u-boot-2009.11/common/memory.c	2012-12-13 09:39:18.000000000 +0800
@@ -0,0 +1,467 @@
+/*
+ * (C) Copyright 2002
+ * Wolfgang Denk, DENX Software Engineering, wd@denx.de.
+ *
+ * See file CREDITS for list of people who contributed to this
+ * project.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ */
+
+#include <common.h>
+
+/* Memory test
+ *
+ * General observations:
+ * o The recommended test sequence is to test the data lines: if they are
+ *   broken, nothing else will work properly.  Then test the address
+ *   lines.  Finally, test the cells in the memory now that the test
+ *   program knows that the address and data lines work properly.
+ *   This sequence also helps isolate and identify what is faulty.
+ *
+ * o For the address line test, it is a good idea to use the base
+ *   address of the lowest memory location, which causes a '1' bit to
+ *   walk through a field of zeros on the address lines and the highest
+ *   memory location, which causes a '0' bit to walk through a field of
+ *   '1's on the address line.
+ *
+ * o Floating buses can fool memory tests if the test routine writes
+ *   a value and then reads it back immediately.  The problem is, the
+ *   write will charge the residual capacitance on the data bus so the
+ *   bus retains its state briefely.  When the test program reads the
+ *   value back immediately, the capacitance of the bus can allow it
+ *   to read back what was written, even though the memory circuitry
+ *   is broken.  To avoid this, the test program should write a test
+ *   pattern to the target location, write a different pattern elsewhere
+ *   to charge the residual capacitance in a differnt manner, then read
+ *   the target location back.
+ *
+ * o Always read the target location EXACTLY ONCE and save it in a local
+ *   variable.  The problem with reading the target location more than
+ *   once is that the second and subsequent reads may work properly,
+ *   resulting in a failed test that tells the poor technician that
+ *   "Memory error at 00000000, wrote aaaaaaaa, read aaaaaaaa" which
+ *   doesn't help him one bit and causes puzzled phone calls.  Been there,
+ *   done that.
+ *
+ * Data line test:
+ * ---------------
+ * This tests data lines for shorts and opens by forcing adjacent data
+ * to opposite states. Because the data lines could be routed in an
+ * arbitrary manner the must ensure test patterns ensure that every case
+ * is tested. By using the following series of binary patterns every
+ * combination of adjacent bits is test regardless of routing.
+ *
+ *     ...101010101010101010101010
+ *     ...110011001100110011001100
+ *     ...111100001111000011110000
+ *     ...111111110000000011111111
+ *
+ * Carrying this out, gives us six hex patterns as follows:
+ *
+ *     0xaaaaaaaaaaaaaaaa
+ *     0xcccccccccccccccc
+ *     0xf0f0f0f0f0f0f0f0
+ *     0xff00ff00ff00ff00
+ *     0xffff0000ffff0000
+ *     0xffffffff00000000
+ *
+ * To test for short and opens to other signals on our boards, we
+ * simply test with the 1's complemnt of the paterns as well, resulting
+ * in twelve patterns total.
+ *
+ * After writing a test pattern. a special pattern 0x0123456789ABCDEF is
+ * written to a different address in case the data lines are floating.
+ * Thus, if a byte lane fails, you will see part of the special
+ * pattern in that byte lane when the test runs.  For example, if the
+ * xx__xxxxxxxxxxxx byte line fails, you will see aa23aaaaaaaaaaaa
+ * (for the 'a' test pattern).
+ *
+ * Address line test:
+ * ------------------
+ *  This function performs a test to verify that all the address lines
+ *  hooked up to the RAM work properly.  If there is an address line
+ *  fault, it usually shows up as two different locations in the address
+ *  map (related by the faulty address line) mapping to one physical
+ *  memory storage location.  The artifact that shows up is writing to
+ *  the first location "changes" the second location.
+ *
+ * To test all address lines, we start with the given base address and
+ * xor the address with a '1' bit to flip one address line.  For each
+ * test, we shift the '1' bit left to test the next address line.
+ *
+ * In the actual code, we start with address sizeof(ulong) since our
+ * test pattern we use is a ulong and thus, if we tried to test lower
+ * order address bits, it wouldn't work because our pattern would
+ * overwrite itself.
+ *
+ * Example for a 4 bit address space with the base at 0000:
+ *   0000 <- base
+ *   0001 <- test 1
+ *   0010 <- test 2
+ *   0100 <- test 3
+ *   1000 <- test 4
+ * Example for a 4 bit address space with the base at 0010:
+ *   0010 <- base
+ *   0011 <- test 1
+ *   0000 <- (below the base address, skipped)
+ *   0110 <- test 2
+ *   1010 <- test 3
+ *
+ * The test locations are successively tested to make sure that they are
+ * not "mirrored" onto the base address due to a faulty address line.
+ * Note that the base and each test location are related by one address
+ * line flipped.  Note that the base address need not be all zeros.
+ *
+ * Memory tests 1-4:
+ * -----------------
+ * These tests verify RAM using sequential writes and reads
+ * to/from RAM. There are several test cases that use different patterns to
+ * verify RAM. Each test case fills a region of RAM with one pattern and
+ * then reads the region back and compares its contents with the pattern.
+ * The following patterns are used:
+ *
+ *  1a) zero pattern (0x00000000)
+ *  1b) negative pattern (0xffffffff)
+ *  1c) checkerboard pattern (0x55555555)
+ *  1d) checkerboard pattern (0xaaaaaaaa)
+ *  2)  bit-flip pattern ((1 << (offset % 32))
+ *  3)  address pattern (offset)
+ *  4)  address pattern (~offset)
+ *
+ * Being run in normal mode, the test verifies only small 4Kb
+ * regions of RAM around each 1Mb boundary. For example, for 64Mb
+ * RAM the following areas are verified: 0x00000000-0x00000800,
+ * 0x000ff800-0x00100800, 0x001ff800-0x00200800, ..., 0x03fff800-
+ * 0x04000000. If the test is run in slow-test mode, it verifies
+ * the whole RAM.
+ */
+
+#include <post.h>
+#include <watchdog.h>
+
+
+DECLARE_GLOBAL_DATA_PTR;
+
+/*
+ * Define INJECT_*_ERRORS for testing error detection in the presence of
+ * _good_ hardware.
+ */
+#undef  INJECT_DATA_ERRORS
+#undef  INJECT_ADDRESS_ERRORS
+
+#ifdef INJECT_DATA_ERRORS
+#warning "Injecting data line errors for testing purposes"
+#endif
+
+#ifdef INJECT_ADDRESS_ERRORS
+#warning "Injecting address line errors for testing purposes"
+#endif
+
+
+/*
+ * This function performs a double word move from the data at
+ * the source pointer to the location at the destination pointer.
+ * This is helpful for testing memory on processors which have a 64 bit
+ * wide data bus.
+ *
+ * On those PowerPC with FPU, use assembly and a floating point move:
+ * this does a 64 bit move.
+ *
+ * For other processors, let the compiler generate the best code it can.
+ */
+static void move64(const unsigned long long *src, unsigned long long *dest)
+{
+#if defined(CONFIG_MPC8260) || defined(CONFIG_MPC824X)
+	asm ("lfd  0, 0(3)\n\t" /* fpr0	  =  *scr	*/
+	 "stfd 0, 0(4)"		/* *dest  =  fpr0	*/
+	 : : : "fr0" );		/* Clobbers fr0		*/
+    return;
+#else
+	*dest = *src;
+#endif
+}
+
+/*
+ * This is 64 bit wide test patterns.  Note that they reside in ROM
+ * (which presumably works) and the tests write them to RAM which may
+ * not work.
+ *
+ * The "otherpattern" is written to drive the data bus to values other
+ * than the test pattern.  This is for detecting floating bus lines.
+ *
+ */
+const static unsigned long long pattern[] = {
+	0xaaaaaaaaaaaaaaaaULL,
+	0xccccccccccccccccULL,
+	0xf0f0f0f0f0f0f0f0ULL,
+	0xff00ff00ff00ff00ULL,
+	0xffff0000ffff0000ULL,
+	0xffffffff00000000ULL,
+	0x00000000ffffffffULL,
+	0x0000ffff0000ffffULL,
+	0x00ff00ff00ff00ffULL,
+	0x0f0f0f0f0f0f0f0fULL,
+	0x3333333333333333ULL,
+	0x5555555555555555ULL
+};
+const unsigned long long otherpattern = 0x0123456789abcdefULL;
+
+
+static int memory_post_dataline(unsigned long long * pmem)
+{
+	unsigned long long temp64 = 0;
+	int num_patterns = sizeof(pattern)/ sizeof(pattern[0]);
+	int i;
+	unsigned int hi, lo, pathi, patlo;
+	int ret = 0;
+
+	for ( i = 0; i < num_patterns; i++) {
+		move64(&(pattern[i]), pmem++);
+		/*
+		 * Put a different pattern on the data lines: otherwise they
+		 * may float long enough to read back what we wrote.
+		 */
+		move64(&otherpattern, pmem--);
+		move64(pmem, &temp64);
+
+#ifdef INJECT_DATA_ERRORS
+		temp64 ^= 0x00008000;
+#endif
+
+		if (temp64 != pattern[i]){
+			pathi = (pattern[i]>>32) & 0xffffffff;
+			patlo = pattern[i] & 0xffffffff;
+
+			hi = (temp64>>32) & 0xffffffff;
+			lo = temp64 & 0xffffffff;
+
+			printf ("Memory (date line) error at %08x, "
+				  "wrote %08x%08x, read %08x%08x !\n",
+					  pmem, pathi, patlo, hi, lo);
+			ret = -1;
+		}
+	}
+	return ret;
+}
+
+static int memory_post_addrline(ulong *testaddr, ulong *base, ulong size)
+{
+	ulong *target;
+	ulong *end;
+	ulong readback;
+	ulong xor;
+	int   ret = 0;
+
+	end = (ulong *)((ulong)base + size);	/* pointer arith! */
+	xor = 0;
+	for(xor = sizeof(ulong); xor > 0; xor <<= 1) {
+		target = (ulong *)((ulong)testaddr ^ xor);
+		if((target >= base) && (target < end)) {
+			*testaddr = ~*target;
+			readback  = *target;
+
+#ifdef INJECT_ADDRESS_ERRORS
+			if(xor == 0x00008000) {
+				readback = *testaddr;
+			}
+#endif
+			if(readback == *testaddr) {
+				printf ("Memory (address line) error at %08x<->%08x, "
+					"XOR value %08x !\n",
+					testaddr, target, xor);
+				ret = -1;
+			}
+		}
+	}
+	return ret;
+}
+
+static int memory_post_test1 (unsigned long start,
+			      unsigned long size,
+			      unsigned long val)
+{
+	unsigned long i;
+	ulong *mem = (ulong *) start;
+	ulong readback;
+	int ret = 0;
+
+	for (i = 0; i < size / sizeof (ulong); i++) {
+		mem[i] = val;
+		if (i % 1024 == 0)
+			WATCHDOG_RESET ();
+	}
+
+	for (i = 0; i < size / sizeof (ulong) && ret == 0; i++) {
+		readback = mem[i];
+		if (readback != val) {
+			post_log ("Memory error at %08x, "
+				  "wrote %08x, read %08x !\n",
+					  mem + i, val, readback);
+
+			ret = -1;
+			break;
+		}
+		if (i % 1024 == 0)
+			WATCHDOG_RESET ();
+	}
+
+	return ret;
+}
+
+static int memory_post_test2 (unsigned long start, unsigned long size)
+{
+	unsigned long i;
+	ulong *mem = (ulong *) start;
+	ulong readback;
+	int ret = 0;
+
+	for (i = 0; i < size / sizeof (ulong); i++) {
+		mem[i] = 1 << (i % 32);
+		if (i % 1024 == 0)
+			WATCHDOG_RESET ();
+	}
+
+	for (i = 0; i < size / sizeof (ulong) && ret == 0; i++) {
+		readback = mem[i];
+		if (readback != (1 << (i % 32))) {
+			post_log ("Memory error at %08x, "
+				  "wrote %08x, read %08x !\n",
+					  mem + i, 1 << (i % 32), readback);
+
+			ret = -1;
+			break;
+		}
+		if (i % 1024 == 0)
+			WATCHDOG_RESET ();
+	}
+
+	return ret;
+}
+
+static int memory_post_test3 (unsigned long start, unsigned long size)
+{
+	unsigned long i;
+	ulong *mem = (ulong *) start;
+	ulong readback;
+	int ret = 0;
+
+	for (i = 0; i < size / sizeof (ulong); i++) {
+		mem[i] = i;
+		if (i % 1024 == 0)
+			WATCHDOG_RESET ();
+	}
+
+	for (i = 0; i < size / sizeof (ulong) && ret == 0; i++) {
+		readback = mem[i];
+		if (readback != i) {
+			post_log ("Memory error at %08x, "
+				  "wrote %08x, read %08x !\n",
+					  mem + i, i, readback);
+
+			ret = -1;
+			break;
+		}
+		if (i % 1024 == 0)
+			WATCHDOG_RESET ();
+	}
+
+	return ret;
+}
+
+static int memory_post_test4 (unsigned long start, unsigned long size)
+{
+	unsigned long i;
+	ulong *mem = (ulong *) start;
+	ulong readback;
+	int ret = 0;
+
+	for (i = 0; i < size / sizeof (ulong); i++) {
+		mem[i] = ~i;
+		if (i % 1024 == 0)
+			WATCHDOG_RESET ();
+	}
+
+	for (i = 0; i < size / sizeof (ulong) && ret == 0; i++) {
+		readback = mem[i];
+		if (readback != ~i) {
+			post_log ("Memory error at %08x, "
+				  "wrote %08x, read %08x !\n",
+					  mem + i, ~i, readback);
+
+			ret = -1;
+			break;
+		}
+		if (i % 1024 == 0)
+			WATCHDOG_RESET ();
+	}
+
+	return ret;
+}
+
+static int memory_post_tests (unsigned long start, unsigned long size)
+{
+	int ret = 0;
+
+	if (ret == 0)
+		ret = memory_post_dataline ((unsigned long long *)start);
+	WATCHDOG_RESET ();
+	if (ret == 0)
+		ret = memory_post_addrline ((ulong *)start, (ulong *)start, size);
+	WATCHDOG_RESET ();
+	if (ret == 0)
+		ret = memory_post_addrline ((ulong *)(start + size - 8),
+					    (ulong *)start, size);
+	WATCHDOG_RESET ();
+	if (ret == 0)
+		ret = memory_post_test1 (start, size, 0x00000000);
+	WATCHDOG_RESET ();
+	if (ret == 0)
+		ret = memory_post_test1 (start, size, 0xffffffff);
+	WATCHDOG_RESET ();
+	if (ret == 0)
+		ret = memory_post_test1 (start, size, 0x55555555);
+	WATCHDOG_RESET ();
+	if (ret == 0)
+		ret = memory_post_test1 (start, size, 0xaaaaaaaa);
+	WATCHDOG_RESET ();
+	if (ret == 0)
+		ret = memory_post_test2 (start, size);
+	WATCHDOG_RESET ();
+	if (ret == 0)
+		ret = memory_post_test3 (start, size);
+	WATCHDOG_RESET ();
+	if (ret == 0)
+		ret = memory_post_test4 (start, size);
+	WATCHDOG_RESET ();
+
+	return ret;
+}
+
+int memory_post(unsigned long *start, unsigned long size)
+{
+	int ret = 0;
+
+	if (ret == 0)
+		ret |= memory_post_dataline((unsigned long long *)start);
+	WATCHDOG_RESET();
+	if (ret == 0)
+		ret |= memory_post_addrline(start, start, size);
+	WATCHDOG_RESET();
+
+	return ret;
+}
+
Index: u-boot-2009.11/common/cmd_post.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ u-boot-2009.11/common/cmd_post.c	2012-12-13 09:39:18.000000000 +0800
@@ -0,0 +1,313 @@
+/*
+ * Implement following commands:
+ *	(1). LED
+ *	(2). DRAM Address Line Continuity
+ *	(3). RF Loop Back
+ *	(4). Ethernet RJ-45 Continuity
+ */
+
+#include <common.h>
+
+#include <asm/arch/platform.h>
+#include <asm/io.h>
+
+#include <command.h>
+#include "net.h"
+
+/* Seconds waiting LED turn off	*/
+#define POST_LED_WAIT_TIME	1
+
+#define POST_MEM_BIT   0
+#define POST_PHY_BIT   1
+#define POST_RF_BIT    2
+#define POST_MEM_LEVEL_BIT   4
+#define POST_MEM_LEVEL_MASK  3
+
+
+int memory_post(unsigned long *start, unsigned long size);
+void enable_phy_loopback(void);
+void disable_phy_loopback(void);
+
+int do_post_led(unsigned int mask)
+{
+	unsigned val;
+	int offset;
+	int i;
+
+	if (!mask)
+		mask = 0xcc;
+	/*
+	  * 0xcc: bit2:wifi link led, bit3:wps led,
+	  *bit6:mode led, bit7:link quality led
+	  */
+	val = readl(RUBY_GPIO_AFSEL);
+	val &= ~mask;
+	writel(val, RUBY_GPIO_AFSEL);
+
+	/* Set GPIO to Output mode and Mask */
+	for (i = 0; i < RUBY_GPIO_MAX; i++) {
+		if (!((1 << i) & mask))
+			continue;
+
+		if (i < RUBY_GPIO_MODE1_MAX) {
+			offset = i * 2;
+
+			val = readl(RUBY_GPIO_MODE1);
+			val &= ~(0x3 << offset);
+			val |= (0x1 << offset);
+			writel(val, RUBY_GPIO_MODE1);
+		} else {
+			offset = (i - RUBY_GPIO_MODE1_MAX) * 2;
+
+			val = readl(RUBY_GPIO_MODE2);
+			val &= ~(0x3 << offset);
+			val |= (0x1 << offset);
+			writel(val, RUBY_GPIO_MODE2);
+		}
+	}
+
+	writel(mask, GPIO_OUTPUT_MASK);
+
+	/* Turn on LED	*/
+	writel(mask, GPIO_OUTPUT);
+
+	udelay(POST_LED_WAIT_TIME * 1000000);
+
+	/* Turn off LED	*/
+	writel(0, GPIO_OUTPUT);
+
+	writel(0, GPIO_OUTPUT_MASK);
+
+	return 0;
+
+}
+
+int post_led(cmd_tbl_t *cmdtp, int flag, int argc, char *argv[])
+{
+	unsigned int mask;
+	int ret;
+
+	/* GPIO mask used for LED */
+	if (argc > 1)
+		mask = (ulong)simple_strtoul(argv[1], NULL, 16);
+	else
+		mask = 0;
+
+	ret = do_post_led(mask);
+
+	return ret;
+}
+
+#ifdef POST_CMD_ENABLE
+U_BOOT_CMD(
+	post_led, CONFIG_SYS_MAXARGS, 0, post_led,
+	"POST LED test",
+	"gpio_mask\n"
+	"    - Set gpio_mask bits of gpio pins\n"
+);
+#endif
+
+int post_phy(cmd_tbl_t *cmdtp, int flag, int argc, char *argv[])
+{
+	int ret;
+
+	ret = NetLoop(ETHLOOP);
+	disable_phy_loopback();
+	if (ret < 0)
+		printf("phy loopback test failed\n");
+	else
+		printf("phy loopback test pass\n");
+
+	return ret;
+}
+
+#ifdef POST_CMD_ENABLE
+U_BOOT_CMD(
+	post_phy, CONFIG_SYS_MAXARGS, 0, post_phy,
+	"POST phy loopback test"
+	"ethernet loopback test\n"
+	);
+#endif
+
+int do_post_mem(unsigned int iteration_limit)
+{
+	ulong	*start, size;
+	unsigned int iterations;
+	int ret;
+	char *p;
+	int dcache;
+
+	dcache = dcache_status();
+	if (dcache)
+		dcache_disable();
+
+	start = (ulong *)CONFIG_SYS_MEMTEST_START;
+	p = getenv("post_mem_size");
+	if (p) {
+		size = simple_strtoul(p, NULL, 16);
+		printf("user defined mem size 0x%x\n", size);
+	} else {
+		size = RUBY_MIN_DRAM_SIZE;
+	}
+
+	if (!iteration_limit) {  /* 0 for loop */
+		for (;;) {
+			if (ctrlc()) {
+				/* printf("stop by ctrl-c ... "); */
+				break;
+			}
+			ret = memory_post(start, size);
+			if (ret < 0)
+				break;
+			iterations++;
+		}
+	} else {
+		for (iterations = 0; iterations < iteration_limit; iterations++) {
+			if (ctrlc()) {
+				/* printf("stop by ctrl-c ... "); */
+				break;
+			}
+			ret = memory_post(start, size);
+			if (ret < 0)
+				break;
+		}
+	}
+
+	if (dcache)
+		dcache_enable ();
+
+	return ret;
+}
+
+int post_mem(cmd_tbl_t *cmdtp, int flag, int argc, char *argv[])
+{
+	unsigned int iteration_limit;
+	int ret;
+
+	if (argc > 1)
+		iteration_limit = (ulong)simple_strtoul(argv[1], NULL, 16);
+	else
+		iteration_limit = 1;
+
+	ret = do_post_mem(iteration_limit);
+
+	return ret;
+}
+
+#ifdef POST_CMD_ENABLE
+U_BOOT_CMD(
+	post_mem,	CONFIG_SYS_MAXARGS,	0,	post_mem,
+	"POST RAM test",
+	"[iterations]"
+	"    - RAM Address/Data lines read/write test\n"
+);
+#endif
+
+int do_post(void){
+	char *p;
+	int post_mask, old_result = 0, new_result = 0, result_update = 0;
+	int old_function = 0, new_function = 0, functionn_update = 0;
+	int ret = 0, mem_level;
+	char buf[32];
+
+	p = getenv("post_result");
+	if (p)
+		old_result = simple_strtoul(p, NULL, 16);
+
+	p = getenv("post_function");
+	if (p)
+		old_function = simple_strtoul(p, NULL, 16);
+
+	new_function |= (1<<POST_PHY_BIT);
+	if ((new_function&(1<<POST_PHY_BIT)) != (old_function&(1<<POST_PHY_BIT)))
+		functionn_update = 1;
+
+	new_function |= (1<<POST_MEM_BIT);
+	if ((new_function&(1<<POST_MEM_BIT)) != (old_function&(1<<POST_MEM_BIT)))
+		functionn_update = 1;
+
+	p = getenv("post_mask");
+	if (p) {
+		post_mask = simple_strtoul(p, NULL, 16);
+		printf("post_mask 0x%x\n", post_mask);
+
+		if ((post_mask & 1<<POST_MEM_BIT)) {
+			mem_level = ((post_mask >> POST_MEM_LEVEL_BIT) & POST_MEM_LEVEL_MASK);
+			switch (mem_level) {
+			case 0:
+				ret = do_post_mem(1);
+				break;
+			case 1:
+				ret = do_post_mem(1000);
+				break;
+			case 2:
+				ret = do_post_mem(1000000);
+				break;
+			case 3:
+				ret = do_post_mem(0);
+				break;
+			}
+			printf("mem test ... ");
+			if (ret < 0) {
+				printf("fail\n");
+				new_result &= ~(1<<POST_MEM_BIT);
+			} else {
+				printf("pass\n");
+				new_result |= (1<<POST_MEM_BIT);
+			}
+			if ((new_result&(1<<POST_MEM_BIT)) != (old_result&(1<<POST_MEM_BIT))) {
+				old_result &= ~(1<<POST_MEM_BIT);
+				old_result |= new_result&(1<<POST_MEM_BIT);
+				result_update = 1;
+			}
+		}
+
+		if (post_mask & 1<<POST_PHY_BIT) {
+			ret = NetLoop(ETHLOOP);
+			disable_phy_loopback();
+			if (ret < 0) {
+				new_result &= ~(1<<POST_PHY_BIT);
+				printf("phy loopback test ... fail\n");
+			} else {
+				new_result |= (1<<POST_PHY_BIT);
+				printf("phy loopback test ... pass\n");
+			}
+			if ((new_result&(1<<POST_PHY_BIT)) != (old_result&(1<<POST_PHY_BIT))) {
+				old_result &= ~(1<<POST_PHY_BIT);
+				old_result |= new_result&(1<<POST_PHY_BIT);
+				result_update = 1;
+			}
+		}
+	} else {
+		printf("post_mask is null\n");
+	}
+
+	if (functionn_update | result_update) {
+		if (functionn_update) {
+			sprintf(buf, "%x", new_function);
+			setenv("post_function", buf);
+		}
+		if (result_update) {
+			sprintf(buf, "%x", old_result);
+			setenv("post_result", buf);
+		}
+		saveenv();
+	}
+}
+
+int post (cmd_tbl_t *cmdtp, int flag, int argc, char *argv[])
+{
+	int ret;
+
+	ret = do_post();
+
+	return ret;
+}
+
+U_BOOT_CMD(
+	post,	CONFIG_SYS_MAXARGS,	0,	post,
+	"POST test",
+	"POST test\n"
+);
+
+
