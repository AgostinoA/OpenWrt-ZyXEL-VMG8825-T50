Index: u-boot-2009.11/fs/jffs2/jffs2_1pass.c
===================================================================
--- u-boot-2009.11.orig/fs/jffs2/jffs2_1pass.c	2014-02-20 14:07:50.036038174 +0800
+++ u-boot-2009.11/fs/jffs2/jffs2_1pass.c	2014-02-20 14:18:47.276018643 +0800
@@ -2125,7 +2125,7 @@
 	jffs_init_1pass_list(part);
 	pL = (struct b_lists *)part->jffs2_priv;
 	buf = malloc(buf_size);
-    len = strlen("boot");
+	len = strlen("boot");
 	puts ("Scanning JFFS2 FS: ");
 
 	/* start at the beginning of the partition */
@@ -2393,10 +2393,20 @@
             return 1;
         }
 	}
-
+	
+	puts(", Scanning whole partition done\n");
+	pL->readbuf = malloc(max_totlen);
+	//Fanning.Yang 2014/02/20: Don't return 0 for fail, keep it scanning whole partition
+	//Case 1: There is no bad block in this partition(rootfs),
+	//      : Finding and Scanning uImage by parameter (uimage_size=dtotsize)
+	//Case 2: There is a bad block in this partition(rootfs),
+	//      : You cannot counting dtotsize, coz it might be re-count by skpping bad block. 
+	//      : So you have to scan whole rootfs partition to make sure all jffs2 node which is belong to uImage  has been record in parameter(pL), This way is ordinary way(fsload) from u-boot to scan all rootfs partition.
+	//printf("'/boot/%s' not found\n", fname);
 	free(buf);
-    printf("'/boot/%s' not found\n", fname);
-	return 0;
+	//return 0;
+	return 1;//return 1 and it already been assigned uimage inode address to pL, then transfer to "jffs2_1pass_load_kernel()" to keeping parsing uImage
+	
 }
 #endif
 static u32
