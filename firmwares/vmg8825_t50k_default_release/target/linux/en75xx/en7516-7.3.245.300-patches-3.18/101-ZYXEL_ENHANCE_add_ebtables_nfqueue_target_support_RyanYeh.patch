Index: linux-3.18.21/net/bridge/netfilter/Kconfig
===================================================================
--- linux-3.18.21.orig/net/bridge/netfilter/Kconfig	2019-05-29 11:47:56.968180366 +0800
+++ linux-3.18.21/net/bridge/netfilter/Kconfig	2019-05-29 11:47:59.460180466 +0800
@@ -232,6 +232,14 @@
 
           To compile it as a module, choose M here.  If unsure, say N.
 
+config BRIDGE_EBT_NFQUEUE
+    tristate "ebt: nfqueue target support"
+    depends on BRIDGE_NF_EBTABLES
+    help
+      This option adds the nfqueue target on ebtables.
+
+      To compile it as a module, choose M here.  If unsure, say N.
+
 #
 # watchers
 #
Index: linux-3.18.21/net/bridge/netfilter/Makefile
===================================================================
--- linux-3.18.21.orig/net/bridge/netfilter/Makefile	2019-05-29 11:47:56.968180366 +0800
+++ linux-3.18.21/net/bridge/netfilter/Makefile	2019-05-29 11:47:59.460180466 +0800
@@ -38,6 +38,7 @@
 obj-$(CONFIG_BRIDGE_EBT_TC) += ebt_tc.o
 obj-$(CONFIG_BRIDGE_EBT_AUTOMAP) += ebt_AUTOMAP.o
 obj-$(CONFIG_BRIDGE_EBT_POLICER) += ebt_policer.o
+obj-$(CONFIG_BRIDGE_EBT_NFQUEUE) += ebt_nfqueue.o
 
 # watchers
 obj-$(CONFIG_BRIDGE_EBT_LOG) += ebt_log.o
Index: linux-3.18.21/net/bridge/netfilter/ebt_nfqueue.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ linux-3.18.21/net/bridge/netfilter/ebt_nfqueue.c	2019-05-29 13:41:03.316453725 +0800
@@ -0,0 +1,118 @@
+/* ebtables module for using netfilter netlink queue
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ */
+
+#include <linux/module.h>
+#include <linux/skbuff.h>
+#include <linux/kernel.h>
+#include <linux/types.h>
+#include <linux/netfilter.h>
+#include <linux/netfilter/x_tables.h>
+#include <linux/netfilter_bridge/ebtables.h>
+
+MODULE_AUTHOR("JieYue Ma");
+MODULE_DESCRIPTION("ebtables: packet forwarding to netlink");
+MODULE_LICENSE("GPL");
+MODULE_ALIAS("ebt_NFQUEUE");
+
+struct xt_NFQ_info {
+        __u16 queuenum;
+        int target;
+};
+
+__sum16 nf_br_checksum(struct sk_buff* skb, unsigned int hook, unsigned int dataoff, u_int8_t protocol)
+{
+    /* do nothing */
+    return 0;
+}
+
+static __sum16 nf_br_checksum_partial(struct sk_buff* skb, unsigned int hook, unsigned int dataoff, unsigned int len, u_int8_t protocol)
+{
+    /* do nothing */
+    return 0;
+}
+
+static int nf_br_route(struct net *net, struct dst_entry **dst, struct flowi *fl, bool strict)
+{
+    /* do nothing */
+    return 0;
+}
+
+static void nf_br_saveroute(const struct sk_buff *skb, struct nf_queue_entry *entry)
+{
+    /* do nothing */
+}
+
+static int nf_br_reroute(struct sk_buff *skb, const struct nf_queue_entry *entry)
+{
+    /* do nothing */
+    return 0;
+}
+
+static const struct nf_afinfo nf_br_afinfo = {
+    .family     = NFPROTO_BRIDGE,
+    .checksum   = nf_br_checksum,
+    .checksum_partial = nf_br_checksum_partial,
+    .route      = nf_br_route,
+    .saveroute  = nf_br_saveroute,
+    .reroute    = nf_br_reroute,
+    .route_key_size = 0,
+};
+
+static unsigned int ebt_nfqueue_tg(struct sk_buff *skb, const struct xt_action_param *par)
+{
+    const struct xt_NFQ_info *info = par->targinfo;
+
+    return NF_QUEUE_NR(info->queuenum);
+}
+
+static int ebt_nfqueue_tg_check(const struct xt_tgchk_param* par)
+{
+    const struct xt_NFQ_info *info = par->targinfo;
+
+    if(BASE_CHAIN && info->target == EBT_RETURN) {
+        printk(KERN_INFO "ebt_nfqueue: ebt_nfqueue_tg_check failed\n");
+        return -EINVAL;
+    }
+
+    return 0;
+}
+
+static struct xt_target nfqueue_tg_reg __read_mostly = {
+    .name           = "nfqueue",
+    .revision       = 0,
+    .family         = NFPROTO_BRIDGE,
+    .table          = "filter",
+    .hooks          = (1 << NF_BR_NUMHOOKS) | (1 << NF_BR_LOCAL_IN) | (1 << NF_BR_LOCAL_OUT) | (1 << NF_BR_FORWARD),
+    .target         = ebt_nfqueue_tg,
+    .checkentry     = ebt_nfqueue_tg_check,
+    .targetsize     = XT_ALIGN(sizeof(struct xt_NFQ_info)),
+    .me             = THIS_MODULE,
+};
+
+static int __init nfqueue_tg_init(void)
+{
+    int ret;
+
+    /* Register nf_afinfo since netfilter doesn't support bridge in nf_queue */
+    ret = nf_register_afinfo(&nf_br_afinfo);
+    if (ret < 0) {
+        printk(KERN_ERR "ebt_nfqueue: nf_register_afinfo failed\n");
+        return ret;
+    }
+
+    return xt_register_target(&nfqueue_tg_reg);
+}
+
+static void __exit nfqueue_tg_exit(void)
+{
+    nf_unregister_afinfo(&nf_br_afinfo);
+    xt_unregister_target(&nfqueue_tg_reg);
+}
+
+module_init(nfqueue_tg_init);
+module_exit(nfqueue_tg_exit);
\ No newline at end of file
Index: linux-3.18.21/net/bridge/netfilter/ebtables.c
===================================================================
--- linux-3.18.21.orig/net/bridge/netfilter/ebtables.c	2019-05-29 11:47:56.568180350 +0800
+++ linux-3.18.21/net/bridge/netfilter/ebtables.c	2019-05-29 11:47:59.460180466 +0800
@@ -363,6 +363,12 @@
 			return NF_DROP;
 		}
 #endif
+#if IS_ENABLED(CONFIG_BRIDGE_EBT_NFQUEUE)
+        if (verdict > 0 && (verdict & NF_VERDICT_MASK) == NF_QUEUE) {
+            read_unlock_bh(&table->lock);
+            return verdict;
+        }
+#endif
 		/* jump to a udc */
 		cs[sp].n = i + 1;
 		cs[sp].chaininfo = chaininfo;
