Index: linux-3.18.21/net/ipv4/ecnt_net_ipv4.h
===================================================================
--- linux-3.18.21.orig/net/ipv4/ecnt_net_ipv4.h	2018-08-06 14:25:50.557468227 +0800
+++ linux-3.18.21/net/ipv4/ecnt_net_ipv4.h	2018-08-06 19:14:46.301042536 +0800
@@ -146,6 +146,16 @@
 static inline void ip_cmsg_recv_vlanid
 (struct msghdr *msg, struct sk_buff *skb)
 {
+#if/*TCSUPPORT_COMPILE*/ defined(TCSUPPORT_CT_VLAN_BIND)
+	__be16 lVlanId = VBIND_INVALID_VLANID;
+
+	if (ROUTING_MODE_VLAN_PACKET ==
+		(skb->vlan_tag_flag & ROUTING_MODE_VLAN_PACKET)
+		&& (skb->vlan_tags[0] < VBIND_INVALID_VLANID) )
+		lVlanId = skb->vlan_tags[0];
+
+	put_cmsg(msg, SOL_IP, IP_SKB_VLAN_ID_FLAG, sizeof(__u16), &lVlanId);
+#endif/*TCSUPPORT_COMPILE*/
 }
 
 static inline void ecnt_ip_cmsg_recv_inline_hook
@@ -170,6 +180,9 @@
 	if ( !inet || !sk || !skb )
 		return ECNT_CONTINUE;
 
+#if/*TCSUPPORT_COMPILE*/ defined(TCSUPPORT_CT_VLAN_BIND)
+	ecnt_dns_vlanid_store(inet, sk, skb);
+#endif/*TCSUPPORT_COMPILE*/
 
 	return ECNT_CONTINUE;
 }
@@ -201,9 +214,39 @@
 (struct sock *sk, struct sk_buff *skb, struct net *net,
 struct iphdr *iph, struct tcphdr *th)
 {
+#if/*TCSUPPORT_COMPILE*/ defined(TCSUPPORT_CT)
+	static uint32_t oldstamp = 0,newstamp = 0;
+#endif/*TCSUPPORT_COMPILE*/
 
 	if (!sk)
 	{
+#if/*TCSUPPORT_COMPILE*/ defined(TCSUPPORT_CT)
+		if(nf_conntrack_ftp_port == ntohs(th->dest)
+			&& !strstr(skb->dev->name, "br0")
+		  )
+		{
+			newstamp = jiffies;
+			if(jiffies_to_usecs(newstamp - oldstamp) >= 5*USEC_PER_SEC)
+				printk(KERN_INFO "TCSysLog FTP service is not open,"
+				" reject incoming connection from %d.%d.%d.%d\n",
+				((unsigned char *)&iph->saddr)[0],((unsigned char *)&iph->saddr)[1],
+				((unsigned char *)&iph->saddr)[2],((unsigned char *)&iph->saddr)[3]);
+			oldstamp = newstamp;
+		}
+		if ( nf_conntrack_portscan_enable )
+		{
+			if (!xfrm4_policy_check(NULL, XFRM_POLICY_IN, skb))
+				return ECNT_RETURN_DROP;
+
+			if (skb->len < (th->doff << 2) || tcp_checksum_complete(skb))
+			{
+				TCP_INC_STATS_BH(net, TCP_MIB_CSUMERRORS);
+				TCP_INC_STATS_BH(net, TCP_MIB_INERRS);
+			}
+
+			return ECNT_RETURN_DROP;
+		}
+#endif/*TCSUPPORT_COMPILE*/
 	}
 
         if(ra_sw_nat_local_in_tx)
@@ -216,6 +259,14 @@
 (struct sk_buff *skb_in, int type, int code, __be32 info)
 {
 
+#if/*TCSUPPORT_COMPILE*/ defined(TCSUPPORT_CT)
+	if ( nf_conntrack_portscan_enable
+		&& ICMP_DEST_UNREACH == type
+		&& ICMP_PORT_UNREACH == code )
+	{
+		return ECNT_RETURN;
+	}
+#endif/*TCSUPPORT_COMPILE*/
 
 	return ECNT_CONTINUE;
 }
@@ -224,6 +275,9 @@
 static inline int ecnt_arp_xmit_inline_hook
 (struct sk_buff *skb)
 {
+#if/*TCSUPPORT_COMPILE*/ defined(TCSUPPORT_CT_QOS)
+	ecnt_set_qoshigh_hook(skb);
+#endif/*TCSUPPORT_COMPILE*/
 
 	return ECNT_CONTINUE;
 }
@@ -252,5 +306,20 @@
 }
 #endif
 
+static inline void ecnt_ipmr_cache_report_inline_hook(struct sock *sk,
+struct sk_buff *skb, struct sk_buff *pkt)
+{
+	struct in_pktinfo *pktinfo = PKTINFO_SKB_CB(skb);
+	bool prepare = (inet_sk(sk)->cmsg_flags & IP_CMSG_PKTINFO) ||
+			   ipv6_sk_rxinfo(sk);
+
+	if (prepare && skb_rtable(pkt))
+		pktinfo->ipi_ifindex = inet_iif(pkt);
+	else
+		pktinfo->ipi_ifindex = 0;
+
+	return;
+}
+
 #endif
 
Index: linux-3.18.21/net/ipv4/ipmr.c
===================================================================
--- linux-3.18.21.orig/net/ipv4/ipmr.c	2015-09-01 06:19:23.000000000 +0800
+++ linux-3.18.21/net/ipv4/ipmr.c	2018-08-06 19:13:03.458174302 +0800
@@ -66,6 +66,7 @@
 #include <net/netlink.h>
 #include <net/fib_rules.h>
 #include <linux/netconf.h>
+#include "ecnt_net_ipv4.h"
 
 #if defined(CONFIG_IP_PIMSM_V1) || defined(CONFIG_IP_PIMSM_V2)
 #define CONFIG_IP_PIMSM	1
@@ -1013,6 +1014,8 @@
 
 	/* Deliver to mrouted */
 
+	ecnt_ipmr_cache_report_inline_hook(mroute_sk, skb, pkt);
+
 	ret = sock_queue_rcv_skb(mroute_sk, skb);
 	rcu_read_unlock();
 	if (ret < 0) {
