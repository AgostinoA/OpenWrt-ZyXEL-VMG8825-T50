Index: linux-3.18.21/arch/mips/econet/ecnt_kernel_ext.c
===================================================================
--- linux-3.18.21.orig/arch/mips/econet/ecnt_kernel_ext.c	2018-06-21 16:15:57.304577619 +0800
+++ linux-3.18.21/arch/mips/econet/ecnt_kernel_ext.c	2018-06-21 16:16:01.572577619 +0800
@@ -93,6 +93,10 @@
 #endif
 
 
+#ifdef ZYXEL
+void (*Usb_Pwr_Ctrl_Op_Hook)(int action) = NULL;
+EXPORT_SYMBOL(Usb_Pwr_Ctrl_Op_Hook);
+#endif
 
 
 
Index: linux-3.18.21/arch/mips/econet/usb_oc_protect.c
===================================================================
--- linux-3.18.21.orig/arch/mips/econet/usb_oc_protect.c	2018-06-21 16:16:01.288577619 +0800
+++ linux-3.18.21/arch/mips/econet/usb_oc_protect.c	2018-06-21 17:15:26.659251450 +0800
@@ -20,6 +20,9 @@
 #include <asm/tc3162/tc3162.h>
 #include <asm/tc3162/ledcetrl.h>
 
+// defined at ecnt_kernel_ext.c
+extern void (*Usb_Pwr_Ctrl_Op_Hook)(int action);
+
 static int g_debug_flag = 0;
 #define DBG_MSG(F, B...)	{ \
 								if(g_debug_flag) 	\
@@ -462,6 +465,58 @@
 }
 #endif
 
+/*!
+ *  Turn on/off the USB power
+ *
+ *  @param[in]  int    index of USB port number, port 0, port 1, etc....
+ *  @param[in]  int    0 means disable, and 1 means enable.
+ *  @return     int    0 means succeed, others return not zero.
+ */
+int Usb_Pwr_Ctrl_Per_Port_Op(int port, int action)
+{
+    if( (action != 0) && (action != 1) )
+    {
+        return -1;
+    }
+
+    if( port == 0)
+    {
+        _enable_1st_usb_power(action);
+    }
+#ifdef ZYXEL_SUPPORT_2ND_USB_PROTECTION_CIRCUIT
+    else if( port == 1)
+    {
+        _enable_2nd_usb_power(action);
+    }
+#endif
+    else
+    {
+        return -1;
+    }
+
+	return 0;
+}
+/*!
+ *  Turn on/off the USB power
+ *
+ *  @param[in]  int    0 means disable, and 1 means enable.
+ *  @return     int    0 means succeed, others return not zero.
+ */
+int Usb_Pwr_Ctrl_Op(int action)
+{
+    int ret = 0;
+
+    ret = Usb_Pwr_Ctrl_Per_Port_Op(0,action);
+    if ( ret != 0)
+        return ret;
+#ifdef ZYXEL_SUPPORT_2ND_USB_PROTECTION_CIRCUIT
+    ret = Usb_Pwr_Ctrl_Per_Port_Op(1,action);
+    if ( ret != 0)
+        return ret;
+#endif
+    return 0;
+}
+
 static int __init usb_oc_protect_init(void)
 {
 	gpioModeChk();
@@ -506,6 +561,9 @@
 		usb_oc_proc_debug->read_proc = NULL;
 		usb_oc_proc_debug->write_proc = debug_write_proc;
 	}
+
+	rcu_assign_pointer(Usb_Pwr_Ctrl_Op_Hook, Usb_Pwr_Ctrl_Op);
+
 	printk("USB overcurrent protection.\n");
 
 	return 0;
@@ -541,6 +599,9 @@
 	if(usb_oc_proc_dir){
 		remove_proc_entry("usb_oc", usb_oc_proc_dir);
 	}
+
+	rcu_assign_pointer(Usb_Pwr_Ctrl_Op_Hook, NULL);
+
 }
 
 module_init(usb_oc_protect_init);
